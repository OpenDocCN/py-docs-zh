- en: PostgreSQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: 原文：[https://docs.sqlalchemy.org/en/20/dialects/postgresql.html](https://docs.sqlalchemy.org/en/20/dialects/postgresql.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/dialects/postgresql.html](https://docs.sqlalchemy.org/en/20/dialects/postgresql.html)
- en: Support for the PostgreSQL database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对PostgreSQL数据库的支持。
- en: The following table summarizes current support levels for database release versions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了当前数据库发布版本的支持水平。
- en: '**Supported PostgreSQL versions**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持的PostgreSQL版本**'
- en: '| Support type | Versions |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 支持类型 | 版本 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Fully tested in CI](index.html#term-Fully-tested-in-CI) | 12, 13, 14, 15
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [CI中完全测试通过](index.html#term-Fully-tested-in-CI) | 12, 13, 14, 15 |'
- en: '| [Normal support](index.html#term-Normal-support) | 9.6+ |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [正常支持](index.html#term-Normal-support) | 9.6+ |'
- en: '| [Best effort](index.html#term-Best-effort) | 9+ |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [最佳尝试](index.html#term-Best-effort) | 9+ |'
- en: DBAPI Support
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DBAPI支持
- en: The following dialect/DBAPI options are available. Please refer to individual
    DBAPI sections for connect information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方言/DBAPI选项可用。请参考各个DBAPI部分获取连接信息。
- en: '[psycopg2](#module-sqlalchemy.dialects.postgresql.psycopg2)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg2](#module-sqlalchemy.dialects.postgresql.psycopg2)'
- en: '[psycopg (a.k.a. psycopg 3)](#module-sqlalchemy.dialects.postgresql.psycopg)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg (又名psycopg 3)](#module-sqlalchemy.dialects.postgresql.psycopg)'
- en: '[pg8000](#module-sqlalchemy.dialects.postgresql.pg8000)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pg8000](#module-sqlalchemy.dialects.postgresql.pg8000)'
- en: '[asyncpg](#module-sqlalchemy.dialects.postgresql.asyncpg)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncpg](#module-sqlalchemy.dialects.postgresql.asyncpg)'
- en: '[psycopg2cffi](#module-sqlalchemy.dialects.postgresql.psycopg2cffi)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg2cffi](#module-sqlalchemy.dialects.postgresql.psycopg2cffi)'
- en: '## Sequences/SERIAL/IDENTITY'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '## 序列/SERIAL/IDENTITY'
- en: PostgreSQL supports sequences, and SQLAlchemy uses these as the default means
    of creating new primary key values for integer-based primary key columns. When
    creating tables, SQLAlchemy will issue the `SERIAL` datatype for integer-based
    primary key columns, which generates a sequence and server side default corresponding
    to the column.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL支持序列，而SQLAlchemy使用这些作为为整数型主键列创建新主键值的默认方式。在创建表时，SQLAlchemy将为整数型主键列发出`SERIAL`数据类型，生成与列对应的序列和服务器端默认值。
- en: 'To specify a specific named sequence to be used for primary key generation,
    use the [`Sequence()`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定用于主键生成的特定命名序列，请使用[`Sequence()`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")构造：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When SQLAlchemy issues a single INSERT statement, to fulfill the contract of
    having the “last insert identifier” available, a RETURNING clause is added to
    the INSERT statement which specifies the primary key columns should be returned
    after the statement completes. The RETURNING functionality only takes place if
    PostgreSQL 8.2 or later is in use. As a fallback approach, the sequence, whether
    specified explicitly or implicitly via `SERIAL`, is executed independently beforehand,
    the returned value to be used in the subsequent insert. Note that when an [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct is executed using “executemany”
    semantics, the “last inserted identifier” functionality does not apply; no RETURNING
    clause is emitted nor is the sequence pre-executed in this case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当SQLAlchemy发出单个INSERT语句时，为了满足“最后插入标识符”可用的约定，将在INSERT语句中添加一个RETURNING子句，该子句指定在语句完成后应返回主键列。仅当使用PostgreSQL
    8.2或更高版本时，RETURNING功能才会生效。作为备用方法，无论是显式指定还是隐式通过`SERIAL`指定，序列都会在之前独立执行，返回的值将用于后续插入。请注意，当使用“executemany”语义执行[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造时，“最后插入的标识符”功能不适用；在这种情况下，不会发出RETURNING子句，也不会预先执行序列。
- en: PostgreSQL 10 and above IDENTITY columns
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL 10及以上版本的IDENTITY列
- en: 'PostgreSQL 10 and above have a new IDENTITY feature that supersedes the use
    of SERIAL. The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    can be used to control its behavior:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 10及以上版本具有新的IDENTITY功能，取代了SERIAL的使用。在[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")中的[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造可用于控制其行为：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The CREATE TABLE for the above [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object would be:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的CREATE
    TABLE如下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Changed in version 1.4: Added [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to specify the option of an autoincrementing column.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：在[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")中添加[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造，以指定自增列的选项。
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Previous versions of SQLAlchemy did not have built-in support for rendering
    of IDENTITY, and could use the following compilation hook to replace occurrences
    of SERIAL with IDENTITY:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的SQLAlchemy版本不支持渲染IDENTITY，并可以使用以下编译钩子来将SERIAL的出现替换为IDENTITY：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using the above, a table such as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述方法，一个表如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Will generate on the backing database as:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将在后端数据库上生成如下：
- en: '[PRE5]  ## Server Side Cursors'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5]  ## 服务器端游标'
- en: Server-side cursor support is available for the psycopg2, asyncpg dialects and
    may also be available in others.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2、asyncpg方言支持服务器端游标支持，其他方言也可能支持。
- en: 'Server side cursors are enabled on a per-statement basis by using the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") connection execution option:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")连接执行选项，可以在每个语句基础上启用服务器端游标：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that some kinds of SQL statements may not be supported with server side
    cursors; generally, only SQL statements that return rows should be used with this
    option.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些类型的SQL语句可能不支持服务器端游标；通常，只应使用返回行的SQL语句与此选项一起使用。
- en: 'Deprecated since version 1.4: The dialect-level server_side_cursors flag is
    deprecated and will be removed in a future release. Please use the [`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection") execution option for unbuffered cursor support.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起已弃用：方言级别的`server_side_cursors`标志已被弃用，并将在将来的版本中移除。请使用[`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection")执行选项来支持无缓冲游标。
- en: See also
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../core/connections.html#engine-stream-results)  ##
    Transaction Isolation Level'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../core/connections.html#engine-stream-results)  ## 事务隔离级别'
- en: Most SQLAlchemy dialects support setting of transaction isolation level using
    the [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter at the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") level, and at the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") level via the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SQLAlchemy方言支持使用[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")级别和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")级别设置事务隔离级别，并通过[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数。
- en: For PostgreSQL dialects, this feature works either by making use of the DBAPI-specific
    features, such as psycopg2’s isolation level flags which will embed the isolation
    level setting inline with the `"BEGIN"` statement, or for DBAPIs with no direct
    support by emitting `SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL
    <level>` ahead of the `"BEGIN"` statement emitted by the DBAPI. For the special
    AUTOCOMMIT isolation level, DBAPI-specific techniques are used which is typically
    an `.autocommit` flag on the DBAPI connection object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PostgreSQL方言，此功能可以通过利用DBAPI特定功能来实现，例如psycopg2的隔离级别标志，该标志将隔离级别设置嵌入到`"BEGIN"`语句中，或者对于没有直接支持的DBAPI，通过在DBAPI发出的`"BEGIN"`语句之前发出`SET
    SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL <level>`来实现。对于特殊的AUTOCOMMIT隔离级别，通常使用DBAPI连接对象上的`.autocommit`标志。
- en: 'To set isolation level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")设置隔离级别：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To set using per-connection execution options:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用每个连接执行选项设置：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are also more options for isolation level configurations, such as “sub-engine”
    objects linked to a main [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which each apply different isolation level settings.
    See the discussion at [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)
    for background.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多关于隔离级别配置的选项，比如与主 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 关联的 “子引擎” 对象，每个对象都应用不同的隔离级别设置。有关背景信息，请参阅 [设置事务隔离级别，包括
    DBAPI 自动提交](../core/connections.html#dbapi-autocommit) 中的讨论。
- en: 'Valid values for `isolation_level` on most PostgreSQL dialects include:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 PostgreSQL 方言的 `isolation_level` 可接受的值包括：
- en: '`READ COMMITTED`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)'
- en: '[Setting READ ONLY / DEFERRABLE](#postgresql-readonly-deferrable)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置 READ ONLY / DEFERRABLE](#postgresql-readonly-deferrable)'
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Psycopg2 事务隔离级别](#psycopg2-isolation-level)'
- en: '[pg8000 Transaction Isolation Level](#pg8000-isolation-level)  ## Setting READ
    ONLY / DEFERRABLE'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[pg8000 事务隔离级别](#pg8000-isolation-level)  ## 设置 READ ONLY / DEFERRABLE'
- en: 'Most PostgreSQL dialects support setting the “READ ONLY” and “DEFERRABLE” characteristics
    of the transaction, which is in addition to the isolation level setting. These
    two attributes can be established either in conjunction with or independently
    of the isolation level by passing the `postgresql_readonly` and `postgresql_deferrable`
    flags with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). The example below illustrates
    passing the `"SERIALIZABLE"` isolation level at the same time as setting “READ
    ONLY” and “DEFERRABLE”:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 PostgreSQL 方言支持设置事务的 “READ ONLY” 和 “DEFERRABLE” 特性，这是隔离级别设置的补充。通过使用 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法并传递 `postgresql_readonly`
    和 `postgresql_deferrable` 标志，可以同时或独立地建立这两个属性与隔离级别。下面的示例说明了在设置 “READ ONLY” 和 “DEFERRABLE”
    的同时传递 “SERIALIZABLE” 隔离级别：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that some DBAPIs such as asyncpg only support “readonly” with SERIALIZABLE
    isolation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些 DBAPI，如 asyncpg，仅支持 SERIALIZABLE 隔离级别的 “readonly”。
- en: 'New in version 1.4: added support for the `postgresql_readonly` and `postgresql_deferrable`
    execution options.  ## Temporary Table / Resource Reset for Connection Pooling'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能：增加了对 `postgresql_readonly` 和 `postgresql_deferrable` 执行选项的支持。##
    临时表 / 资源重置用于连接池
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    connection pool implementation used by the SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object includes [reset on return](../core/pooling.html#pool-reset-on-return)
    behavior that will invoke the DBAPI `.rollback()` method when connections are
    returned to the pool. While this rollback will clear out the immediate state used
    by the previous transaction, it does not cover a wider range of session-level
    state, including temporary tables as well as other server state such as prepared
    statement handles and statement caches. The PostgreSQL database includes a variety
    of commands which may be used to reset this state, including `DISCARD`, `RESET`,
    `DEALLOCATE`, and `UNLISTEN`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象使用的 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    连接池实现包括在连接返回到池时调用 DBAPI 的 `.rollback()` 方法的 [重置行为](../core/pooling.html#pool-reset-on-return)。虽然此回滚将清除前一个事务使用的即时状态，但它不涵盖更广泛范围的会话级状态，包括临时表以及其他服务器状态，如准备好的语句句柄和语句缓存。PostgreSQL
    数据库包括各种命令，可用于重置此状态，包括 `DISCARD`、`RESET`、`DEALLOCATE` 和 `UNLISTEN`。
- en: To install one or more of these commands as the means of performing reset-on-return,
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used, as demonstrated
    in the example below. The implementation will end transactions in progress as
    well as discard temporary tables using the `CLOSE`, `RESET` and `DISCARD` commands;
    see the PostgreSQL documentation for background on what each of these statements
    do.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其中一个或多个命令安装为执行返回时重置的手段，可以使用[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件挂钩，如下面的示例所示。该实现将结束进行中的事务并丢弃使用`CLOSE`、`RESET`和`DISCARD`命令的临时表；有关每个语句的背景，请参阅PostgreSQL文档。
- en: 'The [`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine")参数设置为`None`，以便自定义方案可以完全替代默认行为。自定义挂钩实现在任何情况下都调用`.rollback()`，因为通常重要的是DBAPI自身的提交/回滚跟踪将与事务的状态保持一致：'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.0b3版本中更改：为[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件添加了额外的状态参数，并确保该事件为所有“reset”发生而调用，因此它适合作为自定义“reset”处理程序的地方。以前使用[`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin")处理程序的方案仍然可用。
- en: See also
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Reset On Return](../core/pooling.html#pool-reset-on-return) - in the [Connection
    Pooling](../core/pooling.html) documentation  ## Setting Alternate Search Paths
    on Connect'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回时重置](../core/pooling.html#pool-reset-on-return) - 在[连接池](../core/pooling.html)文档中
    ## 在连接上设置备用搜索路径'
- en: 'The PostgreSQL `search_path` variable refers to the list of schema names that
    will be implicitly referenced when a particular table or other object is referenced
    in a SQL statement. As detailed in the next section [Remote-Schema Table Introspection
    and PostgreSQL search_path](#postgresql-schema-reflection), SQLAlchemy is generally
    organized around the concept of keeping this variable at its default value of
    `public`, however, in order to have it set to any arbitrary name or names when
    connections are used automatically, the “SET SESSION search_path” command may
    be invoked for all connections in a pool using the following event handler, as
    discussed at [Setting a Default Schema for New Connections](../core/metadata.html#schema-set-default-connections):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`search_path`变量指的是在SQL语句中引用特定表或其他对象时将隐式引用的模式名称列表。如下一节[远程模式表内省和PostgreSQL
    `search_path`](#postgresql-schema-reflection)中详细描述的那样，SQLAlchemy通常围绕着将此变量保持在其默认值`public`的概念组织，但是，为了在连接自动使用时将其设置为任意名称或名称，可以使用以下事件处理程序为池中的所有连接调用“SET
    SESSION search_path”命令，如[为新连接设置默认模式](../core/metadata.html#schema-set-default-connections)中所讨论的那样：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The reason the recipe is complicated by use of the `.autocommit` DBAPI attribute
    is so that when the `SET SESSION search_path` directive is invoked, it is invoked
    outside of the scope of any transaction and therefore will not be reverted when
    the DBAPI connection has a rollback.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.autocommit` DBAPI属性使配方复杂化的原因是，当调用`SET SESSION search_path`指令时，它是在任何事务范围之外调用的，因此当DBAPI连接进行回滚时不会被回滚。
- en: See also
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting a Default Schema for New Connections](../core/metadata.html#schema-set-default-connections)
    - in the [Describing Databases with MetaData](../core/metadata.html) documentation  ##
    Remote-Schema Table Introspection and PostgreSQL search_path'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[为新连接设置默认模式](../core/metadata.html#schema-set-default-connections) - 在[用 MetaData
    描述数据库](../core/metadata.html)文档中 ## 远程模式表内省和 PostgreSQL `search_path`'
- en: Section Best Practices Summarized
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 性能最佳实践摘要
- en: keep the `search_path` variable set to its default of `public`, without any
    other schema names. Ensure the username used to connect **does not** match remote
    schemas, or ensure the `"$user"` token is **removed** from `search_path`. For
    other schema names, name these explicitly within [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definitions. Alternatively, the `postgresql_ignore_search_path`
    option will cause all reflected [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects to have a [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") attribute set up.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 保持`search_path`变量设置为其默认值`public`，不包含任何其他模式名称。确保用于连接的用户名**不匹配**远程模式，或者确保从`search_path`中**移除**`"$user"`标记。对于其他模式名称，在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")定义中明确命名这些名称。另外，`postgresql_ignore_search_path`选项将导致所有反射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象都设置有一个[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema")属性。
- en: The PostgreSQL dialect can reflect tables from any schema, as outlined in [Reflecting
    Tables from Other Schemas](../core/reflection.html#metadata-reflection-schemas).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言可以从任何模式中反射表，如[从其他模式中反射表](../core/reflection.html#metadata-reflection-schemas)所述。
- en: 'In all cases, the first thing SQLAlchemy does when reflecting tables is to
    **determine the default schema for the current database connection**. It does
    this using the PostgreSQL `current_schema()` function, illustated below using
    a PostgreSQL client session (i.e. using the `psql` tool):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，SQLAlchemy反射表时首先要做的事情是**确定当前数据库连接的默认模式**。它使用PostgreSQL的`current_schema()`函数来执行此操作，以下是使用PostgreSQL客户端会话（即使用`psql`工具）进行演示：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Above we see that on a plain install of PostgreSQL, the default schema name
    is the name `public`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上面我们看到，在普通安装的PostgreSQL上，默认模式名称是名称`public`。
- en: 'However, if your database username **matches the name of a schema**, PostgreSQL’s
    default is to then **use that name as the default schema**. Below, we log in using
    the username `scott`. When we create a schema named `scott`, **it implicitly changes
    the default schema**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您的数据库用户名**与模式名称匹配**，那么PostgreSQL的默认操作就是**使用该名称作为默认模式**。下面，我们使用用户名`scott`登录。当我们创建一个名为`scott`的模式时，**它会隐式地更改默认模式**：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The behavior of `current_schema()` is derived from the [PostgreSQL search path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    variable `search_path`, which in modern PostgreSQL versions defaults to this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_schema()`的行为源自[PostgreSQL搜索路径](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)变量`search_path`，在现代PostgreSQL版本中默认为：'
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Where above, the `"$user"` variable will inject the current username as the
    default schema, if one exists. Otherwise, `public` is used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的情况下，`"$user"`变量将注入当前用户名作为默认模式，如果存在的话。否则，将使用`public`。
- en: When a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is reflected, if it is present in the schema indicated by the `current_schema()`
    function, **the schema name assigned to the “.schema” attribute of the Table is
    the Python “None” value**. Otherwise, the “.schema” attribute will be assigned
    the string name of that schema.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象被反射时，如果它存在于由`current_schema()`函数指示的模式中，**则Table的“.schema”属性分配的模式名称是Python的“None”值**。否则，“.schema”属性将被分配该模式的字符串名称。
- en: With regards to tables which these [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects refer to via foreign key constraint, a decision
    must be made as to how the `.schema` is represented in those remote tables, in
    the case where that remote schema name is also a member of the current `search_path`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象通过外键约束引用的表，必须决定在当前`search_path`成员也是该远程表的模式名称的情况下，如何在这些远程表中表示`.schema`。
- en: 'By default, the PostgreSQL dialect mimics the behavior encouraged by PostgreSQL’s
    own `pg_get_constraintdef()` builtin procedure. This function returns a sample
    definition for a particular foreign key constraint, omitting the referenced schema
    name from that definition when the name is also in the PostgreSQL schema search
    path. The interaction below illustrates this behavior:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PostgreSQL方言模仿了PostgreSQL自身`pg_get_constraintdef()`内置过程鼓励的行为。该函数返回特定外键约束的示例定义，在该定义中，当名称也在PostgreSQL模式搜索路径中时，将忽略该引用模式名称。下面的交互说明了这种行为：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Above, we created a table `referred` as a member of the remote schema `test_schema`,
    however when we added `test_schema` to the PG `search_path` and then asked `pg_get_constraintdef()`
    for the `FOREIGN KEY` syntax, `test_schema` was not included in the output of
    the function.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们创建了一个表`referred`作为远程模式`test_schema`的成员，然而当我们将`test_schema`添加到PG的`search_path`然后询问`pg_get_constraintdef()`关于`FOREIGN
    KEY`语法时，`test_schema`没有包含在函数的输出中。
- en: 'On the other hand, if we set the search path back to the typical default of
    `public`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们将搜索路径设置回典型的默认值`public`：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The same query against `pg_get_constraintdef()` now returns the fully schema-qualified
    name for us:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对`pg_get_constraintdef()`的相同查询为我们返回了完全模式限定的名称：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'SQLAlchemy will by default use the return value of `pg_get_constraintdef()`
    in order to determine the remote schema name. That is, if our `search_path` were
    set to include `test_schema`, and we invoked a table reflection process as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy默认使用`pg_get_constraintdef()`的返回值来确定远程模式名称。也就是说，如果我们的`search_path`设置为包括`test_schema`，并且我们按照以下方式调用表反射过程：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The above process would deliver to the [`MetaData.tables`](../core/metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection `referred` table named **without**
    the schema:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程将将`referred`表的名称传递给[`MetaData.tables`](../core/metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables")集合，**不包含**模式：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To alter the behavior of reflection such that the referred schema is maintained
    regardless of the `search_path` setting, use the `postgresql_ignore_search_path`
    option, which can be specified as a dialect-specific argument to both [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改反射行为，以便保持被引用模式，而不管`search_path`设置如何，请使用`postgresql_ignore_search_path`选项，该选项可以作为特定于方言的参数指定给[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")以及[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will now have `test_schema.referred` stored as schema-qualified:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将`test_schema.referred`存储为模式限定的：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Interaction of Schema-qualified Reflection with the Default Schema](../core/reflection.html#reflection-schema-qualified-interaction)
    - discussion of the issue from a backend-agnostic perspective'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式限定反射与默认模式的交互](../core/reflection.html#reflection-schema-qualified-interaction)
    - 从与后端无关的角度讨论这个问题'
- en: '[The Schema Search Path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    - on the PostgreSQL website.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式搜索路径](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    - 在PostgreSQL网站上。'
- en: INSERT/UPDATE…RETURNING
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入/更新…返回
- en: 'The dialect supports PG 8.2’s `INSERT..RETURNING`, `UPDATE..RETURNING` and
    `DELETE..RETURNING` syntaxes. `INSERT..RETURNING` is used by default for single-row
    INSERT statements in order to fetch newly generated primary key identifiers. To
    specify an explicit `RETURNING` clause, use the `_UpdateBase.returning()` method
    on a per-statement basis:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言支持PG 8.2的`INSERT..RETURNING`，`UPDATE..RETURNING`和`DELETE..RETURNING`语法。`INSERT..RETURNING`默认用于单行INSERT语句，以获取新生成的主键标识符。要指定显式的`RETURNING`子句，请在每个语句基础上使用`_UpdateBase.returning()`方法：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '## INSERT…ON CONFLICT (Upsert)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '## 插入…冲突时执行（Upsert）'
- en: Starting with version 9.5, PostgreSQL allows “upserts” (update or insert) of
    rows into a table via the `ON CONFLICT` clause of the `INSERT` statement. A candidate
    row will only be inserted if that row does not violate any unique constraints.
    In the case of a unique constraint violation, a secondary action can occur which
    can be either “DO UPDATE”, indicating that the data in the target row should be
    updated, or “DO NOTHING”, which indicates to silently skip this row.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从9.5版本开始，PostgreSQL允许通过`INSERT`语句的`ON CONFLICT`子句将行“upsert”（更新或插入）到表中。只有候选行不违反任何唯一约束时才会插入该行。在唯一约束违反的情况下，可以发生第二个动作，可以是“DO
    UPDATE”，表示应更新目标行中的数据，或者是“DO NOTHING”，表示静默跳过此行。
- en: Conflicts are determined using existing unique constraints and indexes. These
    constraints may be identified either using their name as stated in DDL, or they
    may be inferred by stating the columns and conditions that comprise the indexes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 冲突是使用现有的唯一约束和索引来确定的。这些约束可以通过在DDL中陈述的名称来识别，也可以通过陈述组成索引的列和条件来推断。
- en: 'SQLAlchemy provides `ON CONFLICT` support via the PostgreSQL-specific [`insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") function, which provides the generative
    methods [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") and [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing"):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通过PostgreSQL特定的[`insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert")函数提供`ON CONFLICT`支持，该函数提供了生成方法[`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")和[`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing")：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See also
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT .. ON CONFLICT](https://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT)
    - in the PostgreSQL documentation.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT .. ON CONFLICT](https://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT)
    - PostgreSQL文档中的内容。'
- en: Specifying the Target
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定目标
- en: 'Both methods supply the “target” of the conflict using either the named constraint
    or by column inference:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都使用“目标”冲突，可以使用命名约束或通过列推断：
- en: 'The [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument specifies
    a sequence containing string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, and/or SQL expression elements, which would
    identify a unique index:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数[`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")指定一个包含字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和/或SQL表达式元素的序列，这些元素将标识一个唯一索引：
- en: '[PRE24]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When using [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") to infer an index,
    a partial index can be inferred by also specifying the use the [`Insert.on_conflict_do_update.index_where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用[`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")推断索引时，也可以通过指定使用[`Insert.on_conflict_do_update.index_where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")参数来推断部分索引：
- en: '[PRE25]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The [`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument is used
    to specify an index directly rather than inferring it. This can be the name of
    a UNIQUE constraint, a PRIMARY KEY constraint, or an INDEX:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数[`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")用于直接指定索引而不是推断它。这可以是唯一约束的名称、主键约束或索引：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The [`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument may also
    refer to a SQLAlchemy construct representing a constraint, e.g. [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), or [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint"). In this use, if the constraint
    has a name, it is used directly. Otherwise, if the constraint is unnamed, then
    inference will be used, where the expressions and optional WHERE clause of the
    constraint will be spelled out in the construct. This use is especially convenient
    to refer to the named or unnamed primary key of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.primary_key`](../core/metadata.html#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数也可以引用一个表示约束的
    SQLAlchemy 构造，例如 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 或 [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")。在这种用法中，如果约束有名称，则直接使用。否则，如果约束未命名，则将使用推断，其中约束的表达式和可选的
    WHERE 子句将在构造中拼写出来。这种用法特别方便，以引用 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的命名或未命名主键，使用 [`Table.primary_key`](../core/metadata.html#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") 属性：'
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The SET Clause
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SET 子句
- en: '`ON CONFLICT...DO UPDATE` is used to perform an update of the already existing
    row, using any combination of new values as well as values from the proposed insertion.
    These values are specified using the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter. This
    parameter accepts a dictionary which consists of direct values for UPDATE:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON CONFLICT...DO UPDATE` 用于执行已存在行的更新，使用新值和建议插入的值的任意组合。这些值使用 [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数指定。该参数接受一个字典，其中包含更新的直接值：'
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Warning
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `Insert.on_conflict_do_update()` method does **not** take into account Python-side
    default UPDATE values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON CONFLICT
    style of UPDATE, unless they are manually specified in the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") dictionary.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert.on_conflict_do_update()` 方法**不**考虑 Python 端的默认更新值或生成函数，例如使用 [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。这些值将不会被用于 ON CONFLICT 类型的 UPDATE，除非它们在 [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 字典中手动指定。'
- en: Updating using the Excluded INSERT Values
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用排除的 INSERT 值进行更新
- en: 'In order to refer to the proposed insertion row, the special alias [`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded
    "sqlalchemy.dialects.postgresql.Insert.excluded") is available as an attribute
    on the [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    object; this object is a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which alias contains all columns
    of the target table:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用建议的插入行，特殊别名 [`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded
    "sqlalchemy.dialects.postgresql.Insert.excluded") 可用作 [`Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 对象的属性；此对象是一个包含目标表的所有列的 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的别名：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Additional WHERE Criteria
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外的 WHERE 条件
- en: 'The `Insert.on_conflict_do_update()` method also accepts a WHERE clause using
    the [`Insert.on_conflict_do_update.where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter, which
    will limit those rows which receive an UPDATE:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert.on_conflict_do_update()`方法还接受使用[`Insert.on_conflict_do_update.where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")参数的WHERE子句，这将限制接收UPDATE的行：'
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Skipping Rows with DO NOTHING
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跳过使用DO NOTHING的行
- en: '`ON CONFLICT` may be used to skip inserting a row entirely if any conflict
    with a unique or exclusion constraint occurs; below this is illustrated using
    the [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing") method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON CONFLICT`可用于完全跳过插入行，如果与唯一或排除约束发生冲突；下面是使用[`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing")方法的示例：'
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If `DO NOTHING` is used without specifying any columns or constraint, it has
    the effect of skipping the INSERT for any unique or exclusion constraint violation
    which occurs:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`DO NOTHING`而不指定任何列或约束，则会跳过任何唯一或排除约束违规的INSERT效果：
- en: '[PRE32]  ## Full Text Search'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE32]  ## 全文搜索'
- en: PostgreSQL’s full text search system is available through the use of the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace, combined with the use of custom operators
    via the [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method. For simple cases with some
    degree of cross-backend compatibility, the `Operators.match()` operator may also
    be used.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的全文搜索系统可通过[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间来使用，结合使用自定义运算符通过[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法。对于一些简单情况并具有一定的跨后端兼容性，也可以使用`Operators.match()`运算符。
- en: '### Simple plain text matching with `match()`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用`match()`进行简单纯文本匹配'
- en: The `Operators.match()` operator provides for cross-compatible simple text matching.
    For the PostgreSQL backend, it’s hardcoded to generate an expression using the
    `@@` operator in conjunction with the `plainto_tsquery()` PostgreSQL function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Operators.match()`运算符提供跨兼容的简单文本匹配。对于PostgreSQL后端，它被硬编码为使用`@@`运算符与`plainto_tsquery()`
    PostgreSQL函数结合生成表达式。'
- en: 'On the PostgreSQL dialect, an expression like the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostgreSQL方言中，类似以下表达式：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'would emit to the database:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将发送到数据库：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Above, passing a plain string to `Operators.match()` will automatically make
    use of `plainto_tsquery()` to specify the type of tsquery. This establishes basic
    database cross-compatibility for `Operators.match()` with other backends.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，将纯字符串传递给`Operators.match()`将自动使用`plainto_tsquery()`来指定tsquery的类型。这为`Operators.match()`在其他后端与基本数据库跨兼容性建立了基础。
- en: 'Changed in version 2.0: The default tsquery generation function used by the
    PostgreSQL dialect with `Operators.match()` is `plainto_tsquery()`.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从2.0版本开始更改：PostgreSQL方言与`Operators.match()`一起使用的默认tsquery生成函数是`plainto_tsquery()`。
- en: 'To render exactly what was rendered in 1.4, use the following form:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要精确呈现1.4中呈现的内容，请使用以下形式：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Which would emit:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 将发出：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Using PostgreSQL full text functions and operators directly
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接使用PostgreSQL全文本函数和运算符
- en: Text search operations beyond the simple use of `Operators.match()` may make
    use of the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    namespace to generate PostgreSQL full-text functions, in combination with [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") to generate any boolean operator.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 超出简单使用`Operators.match()`的文本搜索操作可能会利用[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间来生成PostgreSQL全文本函数，结合[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")来生成任何布尔运算符。
- en: 'For example, the query:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查询：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'would generate:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    type can provide for explicit CAST:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")类型可以提供显式的CAST：'
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'produces a statement equivalent to:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 生成等效于的语句：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `func` namespace is augmented by the PostgreSQL dialect to set up correct
    argument and return types for most full text search functions. These functions
    are used automatically by the [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace assuming the `sqlalchemy.dialects.postgresql`
    package has been imported, or [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") has been invoked using a `postgresql` dialect. These
    functions are documented at:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言通过扩展 `func` 命名空间来设置大多数全文搜索函数的正确参数和返回类型。假定已导入 `sqlalchemy.dialects.postgresql`
    包，或者使用 `postgresql` 方言调用了 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，则这些函数将自动由 [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 命名空间使用。这些函数在以下位置有文档：
- en: '[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector "sqlalchemy.dialects.postgresql.to_tsvector")'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector "sqlalchemy.dialects.postgresql.to_tsvector")'
- en: '[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery "sqlalchemy.dialects.postgresql.to_tsquery")'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery "sqlalchemy.dialects.postgresql.to_tsquery")'
- en: '[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")'
- en: '[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")'
- en: '[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")'
- en: '[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline "sqlalchemy.dialects.postgresql.ts_headline")'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline "sqlalchemy.dialects.postgresql.ts_headline")'
- en: Specifying the “regconfig” with `match()` or custom operators
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `match()` 或自定义运算符指定“regconfig”
- en: 'PostgreSQL’s `plainto_tsquery()` function accepts an optional “regconfig” argument
    that is used to instruct PostgreSQL to use a particular pre-computed GIN or GiST
    index in order to perform the search. When using `Operators.match()`, this additional
    parameter may be specified using the `postgresql_regconfig` parameter, such as:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 `plainto_tsquery()` 函数接受一个可选的“regconfig”参数，用于指示 PostgreSQL 使用特定的预先计算的
    GIN 或 GiST 索引来执行搜索。当使用 `Operators.match()` 时，可以使用 `postgresql_regconfig` 参数指定此额外参数，例如：
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Which would emit:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生：
- en: '[PRE42]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When using other PostgreSQL search functions with [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), the “regconfig” parameter may be passed directly
    as the initial argument:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他 PostgreSQL 搜索函数时，可以直接传递“regconfig”参数作为初始参数：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'produces a statement equivalent to:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 生成等效语句：
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: It is recommended that you use the `EXPLAIN ANALYZE...` tool from PostgreSQL
    to ensure that you are generating queries with SQLAlchemy that take full advantage
    of any indexes you may have created for full text search.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用 PostgreSQL 的 `EXPLAIN ANALYZE...` 工具，以确保您使用 SQLAlchemy 生成的查询充分利用了您可能为全文搜索创建的任何索引。
- en: See also
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Full Text Search](https://www.postgresql.org/docs/current/textsearch-controls.html)
    - in the PostgreSQL documentation'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[全文搜索](https://www.postgresql.org/docs/current/textsearch-controls.html) -
    PostgreSQL 文档中'
- en: FROM ONLY …
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅来自…
- en: 'The dialect supports PostgreSQL’s ONLY keyword for targeting only a particular
    table in an inheritance hierarchy. This can be used to produce the `SELECT ...
    FROM ONLY`, `UPDATE ONLY ...`, and `DELETE FROM ONLY ...` syntaxes. It uses SQLAlchemy’s
    hints mechanism:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言支持 PostgreSQL 的 ONLY 关键字，用于仅针对继承层次结构中的特定表。这可用于生成 `SELECT ... FROM ONLY`、`UPDATE
    ONLY ...` 和 `DELETE FROM ONLY ...` 语法。它使用 SQLAlchemy 的提示机制：
- en: '[PRE45]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '## PostgreSQL-Specific Index Options'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '## PostgreSQL 特定索引选项'
- en: Several extensions to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct are available, specific to the PostgreSQL
    dialect.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了针对 PostgreSQL 方言的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的几个扩展。
- en: Covering Indexes
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖索引
- en: 'The `postgresql_include` option renders INCLUDE(colname) for the given string
    names:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`postgresql_include` 选项为给定的字符串名称渲染 INCLUDE(colname)：'
- en: '[PRE46]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: would render the index as `CREATE INDEX my_index ON table (x) INCLUDE (y)`
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染索引为`CREATE INDEX my_index ON table (x) INCLUDE (y)`
- en: Note that this feature requires PostgreSQL 11 or later.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此功能需要 PostgreSQL 11 或更高版本。
- en: New in version 1.4.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '### Partial Indexes'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '### 部分索引'
- en: 'Partial indexes add criterion to the index definition so that the index is
    applied to a subset of rows. These can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_where` keyword argument:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 部分索引向索引定义添加条件，使索引应用于行的子集。这些可以在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上使用`postgresql_where`关键字参数指定：
- en: '[PRE47]  ### Operator Classes'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE47]  ### 操作符类'
- en: 'PostgreSQL allows the specification of an *operator class* for each column
    of an index (see [https://www.postgresql.org/docs/current/interactive/indexes-opclass.html](https://www.postgresql.org/docs/current/interactive/indexes-opclass.html)).
    The [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct allows these to be specified via the `postgresql_ops` keyword argument:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL允许为索引的每一列指定*操作符类*（参见[https://www.postgresql.org/docs/current/interactive/indexes-opclass.html](https://www.postgresql.org/docs/current/interactive/indexes-opclass.html)）。[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造允许通过`postgresql_ops`关键字参数指定这些：
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note that the keys in the `postgresql_ops` dictionaries are the “key” name of
    the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the name used to access it from the `.c` collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), which can be configured to be different than the actual
    name of the column as expressed in the database.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`postgresql_ops`字典中的键是[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的“键”名称，即从[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的`.c`集合中访问它所使用的名称，这个名称可以配置为与数据库中实际列名不同。
- en: 'If `postgresql_ops` is to be used against a complex SQL expression such as
    a function call, then to apply to the column it must be given a label that is
    identified in the dictionary by name, e.g.:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要对复杂的SQL表达式（如函数调用）使用`postgresql_ops`，则必须为其提供一个在字典中通过名称标识的标签，以便应用于列，例如：
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Operator classes are also supported by the [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct using the [`ExcludeConstraint.ops`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") parameter. See that parameter
    for details.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符类也受到[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")构造的支持，使用[`ExcludeConstraint.ops`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")参数。查看该参数以获取详细信息。
- en: 'New in version 1.3.21: added support for operator classes with [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint").'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.21中的新功能：为[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")添加了对操作符类的支持。
- en: Index Types
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引类型
- en: 'PostgreSQL provides several index types: B-Tree, Hash, GiST, and GIN, as well
    as the ability for users to create their own (see [https://www.postgresql.org/docs/current/static/indexes-types.html](https://www.postgresql.org/docs/current/static/indexes-types.html)).
    These can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_using` keyword argument:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL提供了几种索引类型：B-Tree、Hash、GiST和GIN，以及用户创建自己的能力（参见[https://www.postgresql.org/docs/current/static/indexes-types.html](https://www.postgresql.org/docs/current/static/indexes-types.html)）。这些可以在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上使用`postgresql_using`关键字参数指定：
- en: '[PRE50]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX command, so it *must* be a valid index type for your version
    of PostgreSQL.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递给底层的CREATE INDEX命令，因此它*必须*是您的PostgreSQL版本的有效索引类型。
- en: '### Index Storage Parameters'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '### 索引存储参数'
- en: 'PostgreSQL allows storage parameters to be set on indexes. The storage parameters
    available depend on the index method used by the index. Storage parameters can
    be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    using the `postgresql_with` keyword argument:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL允许在索引上设置存储参数。可用的存储参数取决于索引使用的索引方法。存储参数可以在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上使用`postgresql_with`关键字参数指定：
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'PostgreSQL allows to define the tablespace in which to create the index. The
    tablespace can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_tablespace` keyword argument:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许定义创建索引的表空间。可以在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上使用 `postgresql_tablespace` 关键字参数指定表空间：
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Note that the same option is available on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well.  ### Indexes with CONCURRENTLY'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，相同的选项也适用于 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。  ###
    使用 CONCURRENTLY 的索引'
- en: 'The PostgreSQL index option CONCURRENTLY is supported by passing the flag `postgresql_concurrently`
    to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 PostgreSQL 索引选项 CONCURRENTLY，通过向 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造传递标志 `postgresql_concurrently`：
- en: '[PRE53]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The above index construct will render DDL for CREATE INDEX, assuming PostgreSQL
    8.2 or higher is detected or for a connection-less dialect, as:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上述索引构造将呈现 DDL 以创建索引，假设检测到 PostgreSQL 8.2 或更高版本，或者对于无连接的方言，如下所示：
- en: '[PRE54]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'For DROP INDEX, assuming PostgreSQL 9.2 or higher is detected or for a connection-less
    dialect, it will emit:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DROP INDEX，假设检测到 PostgreSQL 9.2 或更高版本，或者对于无连接的方言，它将生成：
- en: '[PRE55]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'When using CONCURRENTLY, the PostgreSQL database requires that the statement
    be invoked outside of a transaction block. The Python DBAPI enforces that even
    for a single statement, a transaction is present, so to use this construct, the
    DBAPI’s “autocommit” mode must be used:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 CONCURRENTLY 时，PostgreSQL 数据库要求语句在事务块外调用。即使对于单个语句，Python DBAPI 也会强制存在事务，因此要使用此构造，必须使用
    DBAPI 的“自动提交”模式：
- en: '[PRE56]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: See also
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level](#postgresql-isolation-level)  ## PostgreSQL Index
    Reflection'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)  ## PostgreSQL 索引反射'
- en: The PostgreSQL database creates a UNIQUE INDEX implicitly whenever the UNIQUE
    CONSTRAINT construct is used. When inspecting a table using [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"), the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") will report on
    these two constructs distinctly; in the case of the index, the key `duplicates_constraint`
    will be present in the index entry if it is detected as mirroring a constraint.
    When performing reflection using `Table(..., autoload_with=engine)`, the UNIQUE
    INDEX is **not** returned in [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") when it is detected as mirroring a [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") in the [`Table.constraints`](../core/metadata.html#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") collection .
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用唯一约束构造时，PostgreSQL 数据库会隐式创建唯一索引。使用 [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 检查表时，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") 和 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 将分别报告这两种构造；在索引的情况下，如果检测到它与约束镜像，则索引条目中将存在键
    `duplicates_constraint`。在使用 `Table(..., autoload_with=engine)` 执行反射时，如果检测到它与 [`Table.constraints`](../core/metadata.html#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") 中的 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 镜像，唯一索引不会在 [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") 中返回。
- en: Special Reflection Options
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊反射选项
- en: 'The [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") used for the PostgreSQL backend is an
    instance of [`PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector "sqlalchemy.dialects.postgresql.base.PGInspector"),
    which offers additional methods:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 PostgreSQL 后端的 [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 是 [`PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector
    "sqlalchemy.dialects.postgresql.base.PGInspector") 的实例，提供了额外的方法：
- en: '[PRE57]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '| Object Name | Description |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [PGInspector](#sqlalchemy.dialects.postgresql.base.PGInspector) |  |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [PGInspector](#sqlalchemy.dialects.postgresql.base.PGInspector) |  |'
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '**Members**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_domains()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_domains),
    [get_enums()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums), [get_foreign_table_names()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names),
    [get_table_oid()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_table_oid),
    [has_type()](#sqlalchemy.dialects.postgresql.base.PGInspector.has_type)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_domains()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_domains),
    [get_enums()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums), [get_foreign_table_names()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names),
    [get_table_oid()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_table_oid),
    [has_type()](#sqlalchemy.dialects.postgresql.base.PGInspector.has_type)'
- en: '**Class signature**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.base.PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector
    "sqlalchemy.dialects.postgresql.base.PGInspector") ([`sqlalchemy.engine.reflection.Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"))
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.base.PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector
    "sqlalchemy.dialects.postgresql.base.PGInspector")（[`sqlalchemy.engine.reflection.Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")）
- en: '[PRE59]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return a list of DOMAIN objects.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 DOMAIN 对象的列表。
- en: 'Each member is a dictionary containing these fields:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 每个成员都是包含以下字段的字典：
- en: name - name of the domain
  id: totrans-241
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称 - 领域的名称
- en: ''
  id: totrans-242
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-243
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: schema - the schema name for the domain.
  id: totrans-244
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域的模式 - 领域的模式名称。
- en: ''
  id: totrans-245
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-246
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: visible - boolean, whether or not this domain is visible in the default search
    path.
  id: totrans-247
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: visible - 布尔值，此领域是否在默认搜索路径中可见。
- en: ''
  id: totrans-248
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-249
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: type - the type defined by this domain.
  id: totrans-250
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型 - 此领域定义的类型。
- en: ''
  id: totrans-251
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-252
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nullable - Indicates if this domain can be `NULL`.
  id: totrans-253
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: nullable - 表示此域是否可以为`NULL`。
- en: ''
  id: totrans-254
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-255
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: default - The default value of the domain or `None` if the domain has no default.
  id: totrans-256
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认值 - 域的默认值或`None`（如果域没有默认值）。
- en: ''
  id: totrans-257
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-258
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'constraints - A list of dict wit the constraint defined by this domain. Each
    element constaints two keys: `name` of the constraint and `check` with the constraint
    text.'
  id: totrans-259
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束 - 包含此域定义的约束的字典列表。每个元素包含两个键：约束的`name`和`check`与约束文本。
- en: 'Parameters:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name. If None, the default schema (typically ‘public’)
    is used. May also be set to `''*''` to indicate load domains for all schemas.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式** – 模式名称。如果为 None，则使用默认模式（通常为 ''public''）。也可以设置为`''*''`以表示加载所有模式的领域。'
- en: New in version 2.0.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的新内容。
- en: '[PRE60]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Return a list of ENUM objects.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 ENUM 对象的列表。
- en: 'Each member is a dictionary containing these fields:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 每个成员都是包含以下字段的字典：
- en: name - name of the enum
  id: totrans-266
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称 - 枚举的名称
- en: ''
  id: totrans-267
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-268
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: schema - the schema name for the enum.
  id: totrans-269
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举的模式 - 枚举的模式名称。
- en: ''
  id: totrans-270
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-271
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: visible - boolean, whether or not this enum is visible in the default search
    path.
  id: totrans-272
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: visible - 布尔值，此枚举是否在默认搜索路径中可见。
- en: ''
  id: totrans-273
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-274
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: labels - a list of string labels that apply to the enum.
  id: totrans-275
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签 - 适用于枚举的字符串标签列表。
- en: 'Parameters:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name. If None, the default schema (typically ‘public’)
    is used. May also be set to `''*''` to indicate load enums for all schemas.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式** – 模式名称。如果为 None，则使用默认模式（通常为 ''public''）。也可以设置为`''*''`以表示加载所有模式的枚举。'
- en: '[PRE61]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Return a list of FOREIGN TABLE names.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 FOREIGN TABLE 名称的列表。
- en: Behavior is similar to that of [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names"), except that the list
    is limited to those tables that report a `relkind` value of `f`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 行为类似于[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")，但列表仅限于报告`relkind`值为`f`的表。
- en: '[PRE62]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return the OID for the given table name.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定表名称的 OID。
- en: 'Parameters:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，则使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '[PRE63]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Return if the database has the specified type in the provided schema.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中是否在提供的模式中具有指定类型。
- en: 'Parameters:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`type_name` – the type to check.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_name` – 要检查的类型。'
- en: '`schema` – schema name. If None, the default schema (typically ‘public’) is
    used. May also be set to `''*''` to check in all schemas.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 模式名称。如果为None，则使用默认模式（通常为''public''）。也可以设置为`''*''`以在所有模式中检查。'
- en: New in version 2.0.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '## PostgreSQL Table Options'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '## PostgreSQL表选项'
- en: 'Several options for CREATE TABLE are supported directly by the PostgreSQL dialect
    in conjunction with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言与[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造一起直接支持CREATE
    TABLE的几个选项：
- en: '`INHERITS`:'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INHERITS`:'
- en: '[PRE64]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '`ON COMMIT`:'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ON COMMIT`:'
- en: '[PRE65]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`PARTITION BY`:'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PARTITION BY`:'
- en: '[PRE66]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '`TABLESPACE`:'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLESPACE`:'
- en: '[PRE67]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The above option is also available on the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述选项也适用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")构造。
- en: '`USING`:'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USING`:'
- en: '[PRE68]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`WITH OIDS`:'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH OIDS`:'
- en: '[PRE69]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`WITHOUT OIDS`:'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITHOUT OIDS`:'
- en: '[PRE70]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: See also
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL CREATE TABLE options](https://www.postgresql.org/docs/current/static/sql-createtable.html)
    - in the PostgreSQL documentation.  ## PostgreSQL Constraint Options'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL CREATE TABLE选项](https://www.postgresql.org/docs/current/static/sql-createtable.html)
    - 在PostgreSQL文档中。  ## PostgreSQL约束选项'
- en: 'The following option(s) are supported by the PostgreSQL dialect in conjunction
    with selected constraint constructs:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言与选定约束构造一起支持以下选项：
- en: '`NOT VALID`: This option applies towards CHECK and FOREIGN KEY constraints
    when the constraint is being added to an existing table via ALTER TABLE, and has
    the effect that existing rows are not scanned during the ALTER operation against
    the constraint being added.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOT VALID`：此选项适用于通过ALTER TABLE向现有表添加CHECK和FOREIGN KEY约束时，其效果是在添加约束时不扫描现有行。'
- en: 'When using a SQL migration tool such as [Alembic](https://alembic.sqlalchemy.org)
    that renders ALTER TABLE constructs, the `postgresql_not_valid` argument may be
    specified as an additional keyword argument within the operation that creates
    the constraint, as in the following Alembic example:'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用SQL迁移工具（如[Alembic](https://alembic.sqlalchemy.org)）渲染ALTER TABLE构造时，`postgresql_not_valid`参数可以作为额外的关键字参数在创建约束的操作中指定，如下面的Alembic示例所示：
- en: '[PRE71]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The keyword is ultimately accepted directly by the [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") constructs; when using a tool like Alembic, dialect-specific
    keyword arguments are passed through to these constructs from the migration operation
    directives:'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该关键字最终直接被[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")和[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")构造接受；当使用类似Alembic的工具时，方言特定的关键字参数从迁移操作指令传递给这些构造：
- en: '[PRE72]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: New in version 1.4.32.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.4.32中的新功能。
- en: See also
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL ALTER TABLE options](https://www.postgresql.org/docs/current/static/sql-altertable.html)
    - in the PostgreSQL documentation.  ## Table values, Table and Column valued functions,
    Row and Tuple objects'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL ALTER TABLE选项](https://www.postgresql.org/docs/current/static/sql-altertable.html)
    - 在PostgreSQL文档中。  ## 表值、表和列值函数、行和元组对象'
- en: PostgreSQL makes great use of modern SQL forms such as table-valued functions,
    tables and rows as values. These constructs are commonly used as part of PostgreSQL’s
    support for complex datatypes such as JSON, ARRAY, and other datatypes. SQLAlchemy’s
    SQL expression language has native support for most table-valued and row-valued
    forms.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL充分利用现代SQL形式，如表值函数、表和行作为值。这些构造通常作为PostgreSQL支持复杂数据类型（如JSON、ARRAY和其他数据类型）的一部分使用。SQLAlchemy的SQL表达式语言对大多数表值和行值形式具有本机支持。
- en: '### Table-Valued Functions'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '### 表值函数'
- en: Many PostgreSQL built-in functions are intended to be used in the FROM clause
    of a SELECT statement, and are capable of returning table rows or sets of table
    rows. A large portion of PostgreSQL’s JSON functions for example such as `json_array_elements()`,
    `json_object_keys()`, `json_each_text()`, `json_each()`, `json_to_record()`, `json_populate_recordset()`
    use such forms. These classes of SQL function calling forms in SQLAlchemy are
    available using the [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method in conjunction
    with [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    objects generated from the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 PostgreSQL 内置函数旨在在 SELECT 语句的 FROM 子句中使用，并且能够返回表行或表行集合。例如，PostgreSQL 的许多
    JSON 函数，如 `json_array_elements()`、`json_object_keys()`、`json_each_text()`、`json_each()`、`json_to_record()`、`json_populate_recordset()`
    使用了这些形式。在 SQLAlchemy 中，使用 [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法与从 [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 命名空间生成的 [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") 对象，可以使用这些 SQL 函数调用形式。
- en: 'Examples from PostgreSQL’s reference documentation follow below:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是来自 PostgreSQL 参考文档的示例：
- en: '`json_each()`:'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_each()`:'
- en: '[PRE73]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '`json_populate_record()`:'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_populate_record()`:'
- en: '[PRE74]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '`json_to_record()` - this form uses a PostgreSQL specific form of derived columns
    in the alias, where we may make use of [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") elements with types to produce them. The [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method produces a [`TableValuedAlias`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct, and the method [`TableValuedAlias.render_derived()`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") method sets up the
    derived columns specification:'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_to_record()` - 此形式使用了 PostgreSQL 特定的派生列形式作为别名，在其中我们可以利用 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 元素和类型来生成它们。 [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法生成一个 [`TableValuedAlias`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") 构造，而方法 [`TableValuedAlias.render_derived()`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") 设置了派生列的规范：'
- en: '[PRE75]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '`WITH ORDINALITY` - part of the SQL standard, `WITH ORDINALITY` adds an ordinal
    counter to the output of a function and is accepted by a limited set of PostgreSQL
    functions including `unnest()` and `generate_series()`. The [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method accepts a keyword
    parameter `with_ordinality` for this purpose, which accepts the string name that
    will be applied to the “ordinality” column:'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH ORDINALITY` - SQL 标准的一部分，`WITH ORDINALITY` 将一个序号计数器添加到函数的输出中，并且被一组有限的
    PostgreSQL 函数接受，包括 `unnest()` 和 `generate_series()`。 [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法接受一个关键字参数 `with_ordinality`，用于此目的，该参数接受将应用于“序号”列的字符串名称：'
- en: '[PRE76]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: New in version 1.4.0b2.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.0b2 起新增。
- en: See also
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)  ###
    Column Valued Functions'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中  ### 列值函数'
- en: 'Similar to the table valued function, a column valued function is present in
    the FROM clause, but delivers itself to the columns clause as a single scalar
    value. PostgreSQL functions such as `json_array_elements()`, `unnest()` and `generate_series()`
    may use this form. Column valued functions are available using the [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method of [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"):'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 与表值函数类似，列值函数出现在 FROM 子句中，但将自身传递到列子句作为单个标量值。PostgreSQL 函数，如 `json_array_elements()`、`unnest()`
    和 `generate_series()` 可以使用这种形式。列值函数可通过 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法来使用 [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")：
- en: '`json_array_elements()`:'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_array_elements()`:'
- en: '[PRE77]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '`unnest()` - in order to generate a PostgreSQL ARRAY literal, the [`array()`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct may be used:'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unnest()` - 为了生成 PostgreSQL 的数组字面量，可以使用 [`array()`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造：'
- en: '[PRE78]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The function can of course be used against an existing table-bound column that’s
    of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"):'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，该函数可以用于已经是类型 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    的现有表绑定列：
- en: '[PRE79]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: See also
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数 - 将表值函数作为标量列](../tutorial/data_select.html#tutorial-functions-column-valued)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: Row Types
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行类型
- en: 'Built-in support for rendering a `ROW` may be approximated using `func.ROW`
    with the `sqlalchemy.func` namespace, or by using the [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 内置支持以 `func.ROW` 与 `sqlalchemy.func` 命名空间来近似渲染 `ROW`，或者使用 [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 构造：
- en: '[PRE80]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: See also
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Row Constructors](https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 行构造器](https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS)'
- en: '[PostgreSQL Row Constructor Comparison](https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON)'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 行构造器比较](https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON)'
- en: Table Types passed to Functions
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递给函数的表类型
- en: 'PostgreSQL supports passing a table as an argument to a function, which is
    known as a “record” type. SQLAlchemy [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects such as [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") support this special form using the `FromClause.table_valued()`
    method, which is comparable to the [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method except that the
    collection of columns is already established by that of the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") itself:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 支持将表作为函数参数传递，这称为“record”类型。SQLAlchemy [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象，如 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") ，支持使用 `FromClause.table_valued()` 方法来实现这种特殊形式，该方法类似于
    [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法，不同之处在于 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 本身的列集合已经被建立：
- en: '[PRE81]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: New in version 1.4.0b2.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.0b2 版中新增。
- en: ARRAY Types
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARRAY 类型
- en: 'The PostgreSQL dialect supports arrays, both as multidimensional column types
    as well as array literals:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言支持数组，既作为多维列类型，也作为数组字面量：
- en: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    - ARRAY datatype'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    - ARRAY 数据类型'
- en: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - array literal'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - 数组字面量'
- en: '[`array_agg()`](#sqlalchemy.dialects.postgresql.array_agg "sqlalchemy.dialects.postgresql.array_agg")
    - ARRAY_AGG SQL function'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`array_agg()`](#sqlalchemy.dialects.postgresql.array_agg "sqlalchemy.dialects.postgresql.array_agg")
    - ARRAY_AGG SQL 函数'
- en: '[`aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by "sqlalchemy.dialects.postgresql.aggregate_order_by")
    - helper for PG’s ORDER BY aggregate function syntax.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by "sqlalchemy.dialects.postgresql.aggregate_order_by")
    - 用于 PG 的 ORDER BY 聚合函数语法的辅助函数。'
- en: '## JSON Types'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '## JSON 类型'
- en: 'The PostgreSQL dialect supports both JSON and JSONB datatypes, including psycopg2’s
    native support and support for all of PostgreSQL’s special operators:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言支持 JSON 和 JSONB 数据类型，包括 psycopg2 的原生支持以及对所有 PostgreSQL 的特殊运算符的支持：
- en: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")'
- en: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
- en: '[`JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH "sqlalchemy.dialects.postgresql.JSONPATH")'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH "sqlalchemy.dialects.postgresql.JSONPATH")'
- en: HSTORE Type
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HSTORE 类型
- en: 'The PostgreSQL HSTORE type as well as hstore literals are supported:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL HSTORE 类型以及 hstore 字面值都受支持：
- en: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    - HSTORE datatype'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    - HSTORE 数据类型'
- en: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - hstore literal'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - hstore 字面值'
- en: ENUM Types
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ENUM 类型
- en: 'PostgreSQL has an independently creatable TYPE structure which is used to implement
    an enumerated type. This approach introduces significant complexity on the SQLAlchemy
    side in terms of when this type should be CREATED and DROPPED. The type object
    is also an independently reflectable entity. The following sections should be
    consulted:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 有一个独立可创建的 TYPE 结构，用于实现枚举类型。这种方法在 SQLAlchemy 方面引入了显着的复杂性，涉及何时应该创建和删除此类型。该类型对象也是一个可以独立反射的实体。应查阅以下各节：
- en: '[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - DDL and typing support for ENUM.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - 用于 ENUM 的 DDL 和类型支持。'
- en: '[`PGInspector.get_enums()`](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums") - retrieve a listing
    of current ENUM types'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PGInspector.get_enums()`](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums") - 检索当前 ENUM 类型的列表'
- en: '[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create "sqlalchemy.dialects.postgresql.ENUM.create")
    , [`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop "sqlalchemy.dialects.postgresql.ENUM.drop")
    - individual CREATE and DROP commands for ENUM.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create "sqlalchemy.dialects.postgresql.ENUM.create")，[`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop") - 用于 ENUM 的单独 CREATE 和 DROP 命令。'
- en: '### Using ENUM with ARRAY'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 ENUM 与 ARRAY'
- en: The combination of ENUM and ARRAY is not directly supported by backend DBAPIs
    at this time. Prior to SQLAlchemy 1.3.17, a special workaround was needed in order
    to allow this combination to work, described below.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 此时后端 DBAPI 不直接支持 ENUM 和 ARRAY 的组合。在 SQLAlchemy 1.3.17 之前，需要一种特殊的解决方法才能允许此组合工作，下面进行了描述。
- en: 'Changed in version 1.3.17: The combination of ENUM and ARRAY is now directly
    handled by SQLAlchemy’s implementation without any workarounds needed.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.17 开始更改：对于 ENUM 和 ARRAY 的组合，现在由 SQLAlchemy 的实现直接处理，无需任何需要的解决方法。
- en: '[PRE82]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'E.g.:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE83]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'This type is not included as a built-in type as it would be incompatible with
    a DBAPI that suddenly decides to support ARRAY of ENUM directly in a new version.  ###
    Using JSON/JSONB with ARRAY'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型不作为内置类型包含，因为它将与突然决定在新版本中直接支持 ENUM 的 ARRAY 的 DBAPI 不兼容。### 使用 JSON/JSONB 与
    ARRAY
- en: Similar to using ENUM, prior to SQLAlchemy 1.3.17, for an ARRAY of JSON/JSONB
    we need to render the appropriate CAST. Current psycopg2 drivers accommodate the
    result set correctly without any special steps.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 ENUM 类似，在 SQLAlchemy 1.3.17 之前，对于 JSON/JSONB 数组，我们需要呈现适当的 CAST。当前的 psycopg2
    驱动程序可以正确地处理结果集，无需任何特殊步骤。
- en: 'Changed in version 1.3.17: The combination of JSON/JSONB and ARRAY is now directly
    handled by SQLAlchemy’s implementation without any workarounds needed.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.17 开始更改：对于 JSON/JSONB 和 ARRAY 的组合，现在由 SQLAlchemy 的实现直接处理，无需任何需要的解决方法。
- en: '[PRE84]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'E.g.:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE85]  ## Range and Multirange Types'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE85]  ## 范围和多范围类型'
- en: PostgreSQL range and multirange types are supported for the psycopg, pg8000
    and asyncpg dialects; the psycopg2 dialect supports the range types only.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 支持 psycopg、pg8000 和 asyncpg 方言的范围和多范围类型；psycopg2 方言仅支持范围类型。
- en: 'New in version 2.0.17: Added range and multirange support for the pg8000 dialect.
    pg8000 1.29.8 or greater is required.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.17 中新增了对 pg8000 方言的范围和多范围支持。需要 pg8000 1.29.8 或更高版本。
- en: Data values being passed to the database may be passed as string values or by
    using the [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    data object.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给数据库的数据值可以作为字符串值传递，也可以使用 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    数据对象。
- en: 'New in version 2.0: Added the backend-agnostic [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object used to indicate ranges. The `psycopg2`-specific
    range classes are no longer exposed and are only used internally by that particular
    dialect.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：添加了后端不可知的 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    对象，用于指示范围。`psycopg2` 特定的范围类不再公开，仅在该特定方言内部使用。
- en: 'E.g. an example of a fully typed model using the [`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE
    "sqlalchemy.dialects.postgresql.TSRANGE") datatype:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 [`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE "sqlalchemy.dialects.postgresql.TSRANGE")
    数据类型的完全类型化模型示例：
- en: '[PRE86]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'To represent data for the `during` column above, the [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") type is a simple dataclass that will represent
    the bounds of the range. Below illustrates an INSERT of a row into the above `room_booking`
    table:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示上述 `during` 列的数据，[`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    类型是一个简单的数据类，用于表示范围的边界。下面演示了向上述 `room_booking` 表中插入行的示例：
- en: '[PRE87]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Selecting from any range column will also return [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects as indicated:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 从任何范围列中选择也将返回 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    对象，如下所示：
- en: '[PRE88]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The available range datatypes are as follows:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的范围数据类型如下：
- en: '[`INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE "sqlalchemy.dialects.postgresql.INT4RANGE")'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE "sqlalchemy.dialects.postgresql.INT4RANGE")'
- en: '[`INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE "sqlalchemy.dialects.postgresql.INT8RANGE")'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE "sqlalchemy.dialects.postgresql.INT8RANGE")'
- en: '[`NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE "sqlalchemy.dialects.postgresql.NUMRANGE")'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE "sqlalchemy.dialects.postgresql.NUMRANGE")'
- en: '[`DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE "sqlalchemy.dialects.postgresql.DATERANGE")'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE "sqlalchemy.dialects.postgresql.DATERANGE")'
- en: '[`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE "sqlalchemy.dialects.postgresql.TSRANGE")'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE "sqlalchemy.dialects.postgresql.TSRANGE")'
- en: '[`TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE "sqlalchemy.dialects.postgresql.TSTZRANGE")'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE "sqlalchemy.dialects.postgresql.TSTZRANGE")'
- en: '| Object Name | Description |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Range](#sqlalchemy.dialects.postgresql.Range) | Represent a PostgreSQL range.
    |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| [Range](#sqlalchemy.dialects.postgresql.Range) | 表示 PostgreSQL 范围。'
- en: '[PRE89]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Represent a PostgreSQL range.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL 范围。
- en: 'E.g.:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE90]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The calling style is similar to that of psycopg and psycopg2, in part to allow
    easier migration from previous SQLAlchemy versions that used these objects directly.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 调用风格类似于 psycopg 和 psycopg2，部分原因是为了更容易从之前直接使用这些对象的 SQLAlchemy 版本迁移。
- en: 'Parameters:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`lower` – Lower bound value, or None'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower` – 下限值，或者为 None'
- en: '`upper` – Upper bound value, or None'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upper` – 上限值，或者为 None'
- en: '`bounds` – keyword-only, optional string value that is one of `"()"`, `"[)"`,
    `"(]"`, `"[]"`. Defaults to `"[)"`.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bounds` – 仅关键字，可选字符串值，为 `"()"`, `"[)"`, `"(]"`, `"[]"` 中的一个。默认为 `"[)"`。'
- en: '`empty` – keyword-only, optional bool indicating this is an “empty” range'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty` – 仅关键字，可选布尔值，指示这是一个“空”范围'
- en: New in version 2.0.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '**Members**'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.dialects.postgresql.Range.__eq__), [adjacent_to()](#sqlalchemy.dialects.postgresql.Range.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.Range.contained_by), [contains()](#sqlalchemy.dialects.postgresql.Range.contains),
    [difference()](#sqlalchemy.dialects.postgresql.Range.difference), [intersection()](#sqlalchemy.dialects.postgresql.Range.intersection),
    [is_empty](#sqlalchemy.dialects.postgresql.Range.is_empty), [isempty](#sqlalchemy.dialects.postgresql.Range.isempty),
    [lower](#sqlalchemy.dialects.postgresql.Range.lower), [lower_inc](#sqlalchemy.dialects.postgresql.Range.lower_inc),
    [lower_inf](#sqlalchemy.dialects.postgresql.Range.lower_inf), [not_extend_left_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.Range.overlaps), [strictly_left_of()](#sqlalchemy.dialects.postgresql.Range.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.Range.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.Range.union), [upper](#sqlalchemy.dialects.postgresql.Range.upper),
    [upper_inc](#sqlalchemy.dialects.postgresql.Range.upper_inc), [upper_inf](#sqlalchemy.dialects.postgresql.Range.upper_inf)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.dialects.postgresql.Range.__eq__), [adjacent_to()](#sqlalchemy.dialects.postgresql.Range.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.Range.contained_by), [contains()](#sqlalchemy.dialects.postgresql.Range.contains),
    [difference()](#sqlalchemy.dialects.postgresql.Range.difference), [intersection()](#sqlalchemy.dialects.postgresql.Range.intersection),
    [is_empty](#sqlalchemy.dialects.postgresql.Range.is_empty), [isempty](#sqlalchemy.dialects.postgresql.Range.isempty),
    [lower](#sqlalchemy.dialects.postgresql.Range.lower), [lower_inc](#sqlalchemy.dialects.postgresql.Range.lower_inc),
    [lower_inf](#sqlalchemy.dialects.postgresql.Range.lower_inf), [not_extend_left_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.Range.overlaps), [strictly_left_of()](#sqlalchemy.dialects.postgresql.Range.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.Range.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.Range.union), [upper](#sqlalchemy.dialects.postgresql.Range.upper),
    [upper_inc](#sqlalchemy.dialects.postgresql.Range.upper_inc), [upper_inf](#sqlalchemy.dialects.postgresql.Range.upper_inf)'
- en: '**Class signature**'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") (`typing.Generic`)
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") (`typing.Generic`)
- en: '[PRE91]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Compare this range to the other taking into account bounds inclusivity, returning
    `True` if they are equal.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑边界包含性，将此范围与其他范围进行比较，如果它们相等则返回`True`。
- en: '[PRE92]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Determine whether this range is adjacent to the other.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否与其他范围相邻。
- en: '[PRE93]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Determine whether this range is a contained by other.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否被其他范围包含。
- en: '[PRE94]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Determine whether this range contains value.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否包含值。
- en: '[PRE95]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Compute the difference between this range and the other.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 计算此范围与其他范围的差异。
- en: This raises a `ValueError` exception if the two ranges are “disjunct”, that
    is neither adjacent nor overlapping.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个范围“不相交”，即既不相邻也不重叠，则引发`ValueError`异常。
- en: '[PRE96]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Compute the intersection of this range with the other.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 计算此范围与其他范围的交集。
- en: New in version 2.0.10.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.10中的新功能。
- en: '[PRE97]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: A synonym for the ‘empty’ attribute.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: “empty”属性的同义词。
- en: '[PRE98]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: A synonym for the ‘empty’ attribute.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: “empty”属性的同义词。
- en: '[PRE99]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: the lower bound
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 下界
- en: '[PRE100]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Return True if the lower bound is inclusive.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下界是包含的，则返回True。
- en: '[PRE101]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Return True if this range is non-empty and lower bound is infinite.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此范围非空且下界为无限，则返回True。
- en: '[PRE102]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Determine whether this does not extend to the left of other.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否不向左延伸到其他范围。
- en: '[PRE103]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Determine whether this does not extend to the right of other.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否不向右延伸到其他范围。
- en: '[PRE104]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Determine whether this range overlaps with other.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否与其他范围重叠。
- en: '[PRE105]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Determine whether this range is completely to the left of other.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否完全位于其他范围的左侧。
- en: '[PRE106]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Determine whether this range is completely to the right of other.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否完全位于其他范围的右侧。
- en: '[PRE107]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Compute the union of this range with the other.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 计算此范围与其他范围的并集。
- en: This raises a `ValueError` exception if the two ranges are “disjunct”, that
    is neither adjacent nor overlapping.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个范围“不相交”，即既不相邻也不重叠，则引发`ValueError`异常。
- en: '[PRE108]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: the upper bound
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 上界
- en: '[PRE109]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Return True if the upper bound is inclusive.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上界是包含的，则返回True。
- en: '[PRE110]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Return True if this range is non-empty and the upper bound is infinite.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此范围非空且上界为无限，则返回True。
- en: Multiranges
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多范围
- en: Multiranges are supported by PostgreSQL 14 and above. SQLAlchemy’s multirange
    datatypes deal in lists of [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    types.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 14及以上版本支持多范围。SQLAlchemy的多范围数据类型处理[`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")类型的列表。
- en: Multiranges are supported on the psycopg, asyncpg, and pg8000 dialects **only**.
    The psycopg2 dialect, which is SQLAlchemy’s default `postgresql` dialect, **does
    not** support multirange datatypes.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 仅支持在 psycopg、asyncpg 和 pg8000 方言上使用多范围（multiranges）。SQLAlchemy 默认的 `postgresql`
    方言 psycopg2 不支持多范围数据类型。
- en: 'New in version 2.0: Added support for MULTIRANGE datatypes. SQLAlchemy represents
    a multirange value as a list of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：增加了对 MULTIRANGE 数据类型的支持。SQLAlchemy 将多范围值表示为 [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 对象的列表。
- en: 'New in version 2.0.17: Added multirange support for the pg8000 dialect. pg8000
    1.29.8 or greater is required.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.17 中：为 pg8000 方言添加了多范围支持。需要 pg8000 1.29.8 或更高版本。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26 中：添加了 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    序列。
- en: 'The example below illustrates use of the [`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") datatype:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了使用 [`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")
    数据类型：
- en: '[PRE111]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Illustrating insertion and selecting of a record:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 插入和选择记录的示例：
- en: '[PRE112]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Note
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the above example, the list of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") types as handled by the ORM will not automatically
    detect in-place changes to a particular list value; to update list values with
    the ORM, either re-assign a new list to the attribute, or use the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") type modifier. See the section [Mutation
    Tracking](../orm/extensions/mutable.html) for background.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，ORM 处理的 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    类型列表不会自动检测到特定列表值的就地更改；要使用 ORM 更新列表值，要么重新分配一个新列表给属性，要么使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类型修饰符。请参阅 [Mutation Tracking](../orm/extensions/mutable.html)
    部分了解背景信息。
- en: '#### Use of a MultiRange sequence to infer the multirange type'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用 MultiRange 序列推断多范围类型'
- en: 'When using a multirange as a literal without specifying the type the utility
    [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    sequence can be used:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用多范围作为字面值而不指定类型时，可以使用实用程序 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") 序列：
- en: '[PRE113]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Using a simple `list` instead of [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") would require manually setting the
    type of the literal value to the appropriate multirange type.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的 `list` 而不是 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    将需要手动设置字面值的类型为适当的多范围类型。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26 中：添加了 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    序列。
- en: 'The available multirange datatypes are as follows:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的多范围数据类型如下：
- en: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
- en: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
- en: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
- en: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
- en: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
- en: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")  ##
    Network Data Types'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")  ##
    网络数据类型'
- en: The included networking datatypes are [`INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET"), [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR"), [`MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR").
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的网络数据类型为 [`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")、[`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR")、[`MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR")。
- en: For [`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")
    and [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR "sqlalchemy.dialects.postgresql.CIDR")
    datatypes, conditional support is available for these datatypes to send and retrieve
    Python `ipaddress` objects including `ipaddress.IPv4Network`, `ipaddress.IPv6Network`,
    `ipaddress.IPv4Address`, `ipaddress.IPv6Address`. This support is currently **the
    default behavior of the DBAPI itself, and varies per DBAPI. SQLAlchemy does not
    yet implement its own network address conversion logic**.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")
    和 [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR "sqlalchemy.dialects.postgresql.CIDR")
    数据类型，可条件性地支持这些数据类型发送和检索 Python `ipaddress` 对象，包括 `ipaddress.IPv4Network`、`ipaddress.IPv6Network`、`ipaddress.IPv4Address`、`ipaddress.IPv6Address`。这种支持目前是
    DBAPI 本身的**默认行为，并且因 DBAPI 而异。SQLAlchemy 尚未实现自己的网络地址转换逻辑**。
- en: The [psycopg](#postgresql-psycopg) and [asyncpg](#postgresql-asyncpg) support
    these datatypes fully; objects from the `ipaddress` family are returned in rows
    by default.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg](#postgresql-psycopg) 和 [asyncpg](#postgresql-asyncpg) 完全支持这些数据类型；默认情况下，`ipaddress`
    家族的对象将在行中返回。'
- en: The [psycopg2](#postgresql-psycopg2) dialect only sends and receives strings.
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg2](#postgresql-psycopg2) 方言仅发送和接收字符串。'
- en: The [pg8000](#postgresql-pg8000) dialect supports `ipaddress.IPv4Address` and
    `ipaddress.IPv6Address` objects for the [`INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") datatype, but uses strings for [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") types.
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pg8000](#postgresql-pg8000) 方言支持 `ipaddress.IPv4Address` 和 `ipaddress.IPv6Address`
    对象用于 [`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")
    数据类型，但对于 [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR "sqlalchemy.dialects.postgresql.CIDR")
    类型则使用字符串。'
- en: 'To **normalize all the above DBAPIs to only return strings**, use the `native_inet_types`
    parameter, passing a value of `False`:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 要**将所有上述 DBAPI 规范化为仅返回字符串**，请使用 `native_inet_types` 参数，传递值 `False`：
- en: '[PRE114]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: With the above parameter, the `psycopg`, `asyncpg` and `pg8000` dialects will
    disable the DBAPI’s adaptation of these types and will return only strings, matching
    the behavior of the older `psycopg2` dialect.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述参数，`psycopg`、`asyncpg` 和 `pg8000` 方言将禁用这些类型的 DBAPI 适配，并仅返回字符串，与旧版 `psycopg2`
    方言的行为相匹配。
- en: The parameter may also be set to `True`, where it will have the effect of raising
    `NotImplementedError` for those backends that don’t support, or don’t yet fully
    support, conversion of rows to Python `ipaddress` datatypes (currently psycopg2
    and pg8000).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 参数也可以设置为 `True`，这将导致对于那些不支持或尚未完全支持将行转换为 Python `ipaddress` 数据类型的后端（目前为 psycopg2
    和 pg8000），引发 `NotImplementedError`：
- en: 'New in version 2.0.18: - added the `native_inet_types` parameter.'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.18 版本中的新功能：- 添加了 `native_inet_types` 参数。
- en: PostgreSQL Data Types
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL 数据类型
- en: 'As with all SQLAlchemy dialects, all UPPERCASE types that are known to be valid
    with PostgreSQL are importable from the top level dialect, whether they originate
    from [`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types "sqlalchemy.types")
    or from the local dialect:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有 SQLAlchemy 方言一样，所有已知与 PostgreSQL 兼容的大写类型都可以从顶级方言导入，无论它们是来自 [`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types
    "sqlalchemy.types") 还是本地方言：
- en: '[PRE115]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Types which are specific to PostgreSQL, or have PostgreSQL-specific construction
    arguments, are as follows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 PostgreSQL 或具有 PostgreSQL 特定构造参数的类型如下：
- en: '| Object Name | Description |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AbstractMultiRange](#sqlalchemy.dialects.postgresql.AbstractMultiRange)
    | Base for PostgreSQL MULTIRANGE types. |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractMultiRange](#sqlalchemy.dialects.postgresql.AbstractMultiRange)
    | PostgreSQL MULTIRANGE 类型的基类。 |'
- en: '| [AbstractRange](#sqlalchemy.dialects.postgresql.AbstractRange) | Base class
    for single and multi Range SQL types. |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractRange](#sqlalchemy.dialects.postgresql.AbstractRange) | 单个和多个 Range
    SQL 类型的基类。 |'
- en: '| [AbstractSingleRange](#sqlalchemy.dialects.postgresql.AbstractSingleRange)
    | Base for PostgreSQL RANGE types. |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractSingleRange](#sqlalchemy.dialects.postgresql.AbstractSingleRange)
    | PostgreSQL RANGE 类型的基类。 |'
- en: '| [ARRAY](#sqlalchemy.dialects.postgresql.ARRAY) | PostgreSQL ARRAY type. |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '| [ARRAY](#sqlalchemy.dialects.postgresql.ARRAY) | PostgreSQL ARRAY 类型。 |'
- en: '| [BIT](#sqlalchemy.dialects.postgresql.BIT) |  |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| [BIT](#sqlalchemy.dialects.postgresql.BIT) |  |'
- en: '| [BYTEA](#sqlalchemy.dialects.postgresql.BYTEA) |  |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| [BYTEA](#sqlalchemy.dialects.postgresql.BYTEA) |  |'
- en: '| [CIDR](#sqlalchemy.dialects.postgresql.CIDR) |  |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| [CIDR](#sqlalchemy.dialects.postgresql.CIDR) |  |'
- en: '| [CITEXT](#sqlalchemy.dialects.postgresql.CITEXT) | Provide the PostgreSQL
    CITEXT type. |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| [CITEXT](#sqlalchemy.dialects.postgresql.CITEXT) | 提供 PostgreSQL 的 CITEXT
    类型。 |'
- en: '| [DATEMULTIRANGE](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE) | Represent
    the PostgreSQL DATEMULTIRANGE type. |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| [DATEMULTIRANGE](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE) | 表示 PostgreSQL
    的 DATEMULTIRANGE 类型。 |'
- en: '| [DATERANGE](#sqlalchemy.dialects.postgresql.DATERANGE) | Represent the PostgreSQL
    DATERANGE type. |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
  zh: '| [DATERANGE](#sqlalchemy.dialects.postgresql.DATERANGE) | 表示 PostgreSQL 的
    DATERANGE 类型。 |'
- en: '| [DOMAIN](#sqlalchemy.dialects.postgresql.DOMAIN) | Represent the DOMAIN PostgreSQL
    type. |'
  id: totrans-514
  prefs: []
  type: TYPE_TB
  zh: '| [DOMAIN](#sqlalchemy.dialects.postgresql.DOMAIN) | 表示 PostgreSQL 的 DOMAIN
    类型。 |'
- en: '| [ENUM](#sqlalchemy.dialects.postgresql.ENUM) | PostgreSQL ENUM type. |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| [ENUM](#sqlalchemy.dialects.postgresql.ENUM) | PostgreSQL 的 ENUM 类型。 |'
- en: '| [HSTORE](#sqlalchemy.dialects.postgresql.HSTORE) | Represent the PostgreSQL
    HSTORE type. |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| [HSTORE](#sqlalchemy.dialects.postgresql.HSTORE) | 表示 PostgreSQL 的 HSTORE
    类型。 |'
- en: '| [INET](#sqlalchemy.dialects.postgresql.INET) |  |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| [INET](#sqlalchemy.dialects.postgresql.INET) |  |'
- en: '| [INT4MULTIRANGE](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE) | Represent
    the PostgreSQL INT4MULTIRANGE type. |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| [INT4MULTIRANGE](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE) | 表示 PostgreSQL
    的 INT4MULTIRANGE 类型。 |'
- en: '| [INT4RANGE](#sqlalchemy.dialects.postgresql.INT4RANGE) | Represent the PostgreSQL
    INT4RANGE type. |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| [INT4RANGE](#sqlalchemy.dialects.postgresql.INT4RANGE) | 表示 PostgreSQL 的
    INT4RANGE 类型。 |'
- en: '| [INT8MULTIRANGE](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE) | Represent
    the PostgreSQL INT8MULTIRANGE type. |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| [INT8MULTIRANGE](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE) | 表示 PostgreSQL
    的 INT8MULTIRANGE 类型。 |'
- en: '| [INT8RANGE](#sqlalchemy.dialects.postgresql.INT8RANGE) | Represent the PostgreSQL
    INT8RANGE type. |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| [INT8RANGE](#sqlalchemy.dialects.postgresql.INT8RANGE) | 表示 PostgreSQL 的
    INT8RANGE 类型。 |'
- en: '| [INTERVAL](#sqlalchemy.dialects.postgresql.INTERVAL) | PostgreSQL INTERVAL
    type. |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| [INTERVAL](#sqlalchemy.dialects.postgresql.INTERVAL) | PostgreSQL 的 INTERVAL
    类型。 |'
- en: '| [JSON](#sqlalchemy.dialects.postgresql.JSON) | Represent the PostgreSQL JSON
    type. |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.dialects.postgresql.JSON) | 表示 PostgreSQL 的 JSON 类型。 |'
- en: '| [JSONB](#sqlalchemy.dialects.postgresql.JSONB) | Represent the PostgreSQL
    JSONB type. |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| [JSONB](#sqlalchemy.dialects.postgresql.JSONB) | 表示 PostgreSQL 的 JSONB 类型。
    |'
- en: '| [JSONPATH](#sqlalchemy.dialects.postgresql.JSONPATH) | JSON Path Type. |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| [JSONPATH](#sqlalchemy.dialects.postgresql.JSONPATH) | JSON 路径类型。 |'
- en: '| [MACADDR](#sqlalchemy.dialects.postgresql.MACADDR) |  |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| [MACADDR](#sqlalchemy.dialects.postgresql.MACADDR) |  |'
- en: '| [MACADDR8](#sqlalchemy.dialects.postgresql.MACADDR8) |  |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| [MACADDR8](#sqlalchemy.dialects.postgresql.MACADDR8) |  |'
- en: '| [MONEY](#sqlalchemy.dialects.postgresql.MONEY) | Provide the PostgreSQL MONEY
    type. |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| [MONEY](#sqlalchemy.dialects.postgresql.MONEY) | 提供 PostgreSQL 的 MONEY 类型。
    |'
- en: '| [MultiRange](#sqlalchemy.dialects.postgresql.MultiRange) | Represents a multirange
    sequence. |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| [MultiRange](#sqlalchemy.dialects.postgresql.MultiRange) | 表示多范围序列。 |'
- en: '| [NUMMULTIRANGE](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE) | Represent
    the PostgreSQL NUMMULTIRANGE type. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| [NUMMULTIRANGE](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE) | 表示 PostgreSQL
    的 NUMMULTIRANGE 类型。 |'
- en: '| [NUMRANGE](#sqlalchemy.dialects.postgresql.NUMRANGE) | Represent the PostgreSQL
    NUMRANGE type. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| [NUMRANGE](#sqlalchemy.dialects.postgresql.NUMRANGE) | 表示 PostgreSQL 的 NUMRANGE
    类型。 |'
- en: '| [OID](#sqlalchemy.dialects.postgresql.OID) | Provide the PostgreSQL OID type.
    |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| [OID](#sqlalchemy.dialects.postgresql.OID) | 提供 PostgreSQL 的 OID 类型。 |'
- en: '| [REGCLASS](#sqlalchemy.dialects.postgresql.REGCLASS) | Provide the PostgreSQL
    REGCLASS type. |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| [REGCLASS](#sqlalchemy.dialects.postgresql.REGCLASS) | 提供 PostgreSQL 的 REGCLASS
    类型。 |'
- en: '| [REGCONFIG](#sqlalchemy.dialects.postgresql.REGCONFIG) | Provide the PostgreSQL
    REGCONFIG type. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| [REGCONFIG](#sqlalchemy.dialects.postgresql.REGCONFIG) | 提供 PostgreSQL 的
    REGCONFIG 类型。 |'
- en: '| [TIME](#sqlalchemy.dialects.postgresql.TIME) | PostgreSQL TIME type. |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.dialects.postgresql.TIME) | PostgreSQL 的 TIME 类型。 |'
- en: '| [TIMESTAMP](#sqlalchemy.dialects.postgresql.TIMESTAMP) | Provide the PostgreSQL
    TIMESTAMP type. |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.dialects.postgresql.TIMESTAMP) | 提供 PostgreSQL 的
    TIMESTAMP 类型。 |'
- en: '| [TSMULTIRANGE](#sqlalchemy.dialects.postgresql.TSMULTIRANGE) | Represent
    the PostgreSQL TSRANGE type. |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| [TSMULTIRANGE](#sqlalchemy.dialects.postgresql.TSMULTIRANGE) | 表示 PostgreSQL
    的 TSRANGE 类型。 |'
- en: '| [TSQUERY](#sqlalchemy.dialects.postgresql.TSQUERY) | Provide the PostgreSQL
    TSQUERY type. |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| [TSQUERY](#sqlalchemy.dialects.postgresql.TSQUERY) | 提供 PostgreSQL 的 TSQUERY
    类型。 |'
- en: '| [TSRANGE](#sqlalchemy.dialects.postgresql.TSRANGE) | Represent the PostgreSQL
    TSRANGE type. |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| [TSRANGE](#sqlalchemy.dialects.postgresql.TSRANGE) | 表示 PostgreSQL 的 TSRANGE
    类型。 |'
- en: '| [TSTZMULTIRANGE](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE) | Represent
    the PostgreSQL TSTZRANGE type. |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| [TSTZMULTIRANGE](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE) | 表示 PostgreSQL
    的 TSTZRANGE 类型。 |'
- en: '| [TSTZRANGE](#sqlalchemy.dialects.postgresql.TSTZRANGE) | Represent the PostgreSQL
    TSTZRANGE type. |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| [TSTZRANGE](#sqlalchemy.dialects.postgresql.TSTZRANGE) | 表示 PostgreSQL TSTZRANGE
    类型。 |'
- en: '| [TSVECTOR](#sqlalchemy.dialects.postgresql.TSVECTOR) | The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") type implements the PostgreSQL text
    search type TSVECTOR. |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| [TSVECTOR](#sqlalchemy.dialects.postgresql.TSVECTOR) | [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") 类型实现了 PostgreSQL 文本搜索类型 TSVECTOR。 |'
- en: '[PRE116]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Base class for single and multi Range SQL types.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 单个和多个范围 SQL 类型的基类。
- en: '**Members**'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[adjacent_to()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains),
    [difference()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.difference),
    [intersection()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.intersection),
    [not_extend_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.overlaps),
    [strictly_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.union)'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[adjacent_to()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains),
    [difference()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.difference),
    [intersection()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.intersection),
    [not_extend_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.overlaps),
    [strictly_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.union)'
- en: '**Class signature**'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.AbstractRange") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.AbstractRange") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE117]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Define comparison operations for range types.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 为范围类型定义比较操作。
- en: '**Class signature**'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory`](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory") (`sqlalchemy.types.Comparator`)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory`](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory") (`sqlalchemy.types.Comparator`)
- en: '[PRE118]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Boolean expression. Returns true if the range in the column is adjacent to the
    range in the operand.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列中的范围与操作数中的范围相邻，则返回 true。
- en: '[PRE119]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Boolean expression. Returns true if the column is contained within the right
    hand operand.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列包含在右手操作数中，则返回 true。
- en: '[PRE120]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Boolean expression. Returns true if the right hand operand, which can be an
    element or a range, is contained within the column.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果右手操作数（可以是元素或范围）包含在列中，则返回 true。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符可能会忽略 kwargs，但对于 API 符合性而言，它们是必需的。
- en: '[PRE121]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Range expression. Returns the union of the two ranges. Will raise an exception
    if the resulting range is not contiguous.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表达式。返回两个范围的并集。如果结果范围不连续，则会引发异常。
- en: '[PRE122]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Range expression. Returns the intersection of the two ranges. Will raise an
    exception if the resulting range is not contiguous.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表达式。返回两个范围的交集。如果结果范围不连续，则会引发异常。
- en: '[PRE123]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Boolean expression. Returns true if the range in the column does not extend
    left of the range in the operand.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列中的范围不延伸到操作数的左侧，则返回 true。
- en: '[PRE124]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Boolean expression. Returns true if the range in the column does not extend
    right of the range in the operand.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列中的范围不延伸到操作数的右侧，则返回 true。
- en: '[PRE125]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Boolean expression. Returns true if the column overlaps (has points in common
    with) the right hand operand.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列与右操作数重叠（具有共同点），则返回 true。
- en: '[PRE126]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Boolean expression. Returns true if the column is strictly left of the right
    hand operand.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列严格位于右操作数的左侧，则返回 true。
- en: '[PRE127]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Boolean expression. Returns true if the column is strictly right of the right
    hand operand.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列严格位于右操作数的右侧，则返回 true。
- en: '[PRE128]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Range expression. Returns the union of the two ranges. Will raise an exception
    if the resulting range is not contiguous.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表达式。返回两个范围的并集。如果结果范围不连续，将引发异常。
- en: '[PRE129]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Base for PostgreSQL RANGE types.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL RANGE 类型的基础。
- en: These are types that return a single [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回单个[`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")对象的类型。
- en: See also
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL range functions](https://www.postgresql.org/docs/current/static/functions-range.html)'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 范围函数](https://www.postgresql.org/docs/current/static/functions-range.html)'
- en: '**Class signature**'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.AbstractSingleRange") ([`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange"))
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.AbstractSingleRange") ([`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange"))
- en: '[PRE130]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Base for PostgreSQL MULTIRANGE types.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL MULTIRANGE 类型的基础。
- en: these are types that return a sequence of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回一系列[`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")对象的类型。
- en: '**Class signature**'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.AbstractMultiRange") ([`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange"))
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.AbstractMultiRange") ([`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange"))
- en: '[PRE131]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: PostgreSQL ARRAY type.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 数组类型。
- en: 'The [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type is constructed in the same way as the core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type; a member type is required, and a number of dimensions
    is recommended if the type is to be used for more than one dimension:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型的构造与核心[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")类型相同；需要成员类型，并且如果要将类型用于多个维度，则建议指定维度的数量：'
- en: '[PRE132]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'The [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type provides all operations defined on the core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type, including support for “dimensions”, indexed access,
    and simple matching such as [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all"). [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") class also provides PostgreSQL-specific
    methods for containment operations, including [`Comparator.contains()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains") [`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by"), and [`Comparator.overlap()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap"), e.g.:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型提供了在核心 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型上定义的所有操作，包括对“维度”的支持、索引访问以及简单的匹配，如 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 和 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")。[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类还提供了用于包含操作的 PostgreSQL 特定方法，包括 [`Comparator.contains()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains")、[`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by") 和 [`Comparator.overlap()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap")，例如：'
- en: '[PRE133]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Indexed access is one-based by default, to match that of PostgreSQL; for zero-based
    indexed access, set [`ARRAY.zero_indexes`](#sqlalchemy.dialects.postgresql.ARRAY.params.zero_indexes
    "sqlalchemy.dialects.postgresql.ARRAY").
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，索引访问是基于一的，以匹配 PostgreSQL 的索引访问；要进行基于零的索引访问，请设置 [`ARRAY.zero_indexes`](#sqlalchemy.dialects.postgresql.ARRAY.params.zero_indexes
    "sqlalchemy.dialects.postgresql.ARRAY")。
- en: Additionally, the [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type does not work directly in conjunction with the [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type. For a workaround, see the special
    type at [Using ENUM with ARRAY](#postgresql-array-of-enum).
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型不能直接与[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    类型配合使用。有关解决方法，请参阅 [使用 ENUM 与 ARRAY](#postgresql-array-of-enum) 的特殊类型。
- en: '**Detecting Changes in ARRAY columns when using the ORM**'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 ORM 时检测 ARRAY 列中的更改**'
- en: 'The [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type, when used with the SQLAlchemy ORM, does not detect in-place mutations to
    the array. In order to detect these, the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension must be used, using the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") class:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQLAlchemy ORM 一起使用时，[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型无法检测数组的原位突变。为了检测这些突变，必须使用 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展，使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类：
- en: '[PRE134]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: This extension will allow “in-place” changes such to the array such as `.append()`
    to produce events which will be detected by the unit of work. Note that changes
    to elements **inside** the array, including subarrays that are mutated in place,
    are **not** detected.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展将允许对数组进行“就地”更改，如 `.append()`，以产生将被工作单元检测到的事件。请注意，对数组**内部**元素的更改，包括就地突变的子数组，**不会**被检测到。
- en: Alternatively, assigning a new array value to an ORM element that replaces the
    old one will always trigger a change event.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将新的数组值分配给替换旧值的 ORM 元素将始终触发更改事件。
- en: See also
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - base array type'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - 基本数组类型'
- en: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - produces a literal array value.'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - 生成文字数组值。'
- en: '**Members**'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.ARRAY.__init__), [contains()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains),
    [contained_by()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by),
    [overlap()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap)'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.ARRAY.__init__), [contains()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains),
    [contained_by()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by),
    [overlap()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap)'
- en: '**Class signature**'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") ([`sqlalchemy.types.ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"))
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")（[`sqlalchemy.types.ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")）
- en: '[PRE135]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Construct an ARRAY.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个数组。
- en: 'E.g.:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE136]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Arguments are:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 参数为：
- en: 'Parameters:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`item_type` – The data type of items of this array. Note that dimensionality
    is irrelevant here, so multi-dimensional arrays like `INTEGER[][]`, are constructed
    as `ARRAY(Integer)`, not as `ARRAY(ARRAY(Integer))` or such.'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item_type` – 此数组项的数据类型。请注意，这里维度是无关紧要的，因此像`INTEGER[][]`这样的多维数组被构造为`ARRAY(Integer)`，而不是`ARRAY(ARRAY(Integer))`或类似的。'
- en: '`as_tuple=False` – Specify whether return results should be converted to tuples
    from lists. DBAPIs such as psycopg2 return lists by default. When tuples are returned,
    the results are hashable.'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_tuple=False` – 指定返回结果是否应从列表转换为元组。例如，DBAPIs如psycopg2默认返回列表。当返回元组时，结果是可哈希的。'
- en: '`dimensions` – if non-None, the ARRAY will assume a fixed number of dimensions.
    This will cause the DDL emitted for this ARRAY to include the exact number of
    bracket clauses `[]`, and will also optimize the performance of the type overall.
    Note that PG arrays are always implicitly “non-dimensioned”, meaning they can
    store any number of dimensions no matter how they were declared.'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dimensions` – 如果非None，则ARRAY将假定具有固定数量的维度。这将导致为此ARRAY发出的DDL包括确切数量的方括号`[]`，并且还将优化整体类型的性能。请注意，PG数组始终隐式地“非维度化”，这意味着无论如何声明，它们都可以存储任意数量的维度。'
- en: '`zero_indexes=False` – when True, index values will be converted between Python
    zero-based and PostgreSQL one-based indexes, e.g. a value of one will be added
    to all index values before passing to the database.'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zero_indexes=False` – 当为True时，索引值将在Python基于零和PostgreSQL基于一的索引之间转换，例如，在传递到数据库之前，所有索引值将增加一个值。'
- en: '[PRE137]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Define comparison operations for [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY").
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")定义比较操作。
- en: Note that these operations are in addition to those provided by the base [`Comparator`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator") class, including [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all").
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些操作是基于基础[`Comparator`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator")类提供的操作之外的，包括[`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")和[`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")。
- en: '**Class signature**'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ARRAY.Comparator`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator") (`sqlalchemy.types.Comparator`)
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ARRAY.Comparator`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator")（`sqlalchemy.types.Comparator`）
- en: '[PRE138]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Boolean expression. Test if elements are a superset of the elements of the argument
    array expression.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试元素是否是参数数组表达式的元素的超集。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: kwargs可能会被此操作符忽略，但对于API一致性是必需的。
- en: '[PRE139]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Boolean expression. Test if elements are a proper subset of the elements of
    the argument array expression.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试元素是否是参数数组表达式的元素的真子集。
- en: '[PRE140]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Boolean expression. Test if array has elements in common with an argument array
    expression.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试数组是否与参数数组表达式有共同元素。
- en: '[PRE141]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '**Class signature**'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.BIT`](#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.BIT`](#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")) - PostgreSQL 的 BIT 类型
- en: '[PRE142]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '**Members**'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.BYTEA.__init__)'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.BYTEA.__init__) - 初始化方法'
- en: '**Class signature**'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.BYTEA`](#sqlalchemy.dialects.postgresql.BYTEA
    "sqlalchemy.dialects.postgresql.BYTEA") ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.BYTEA`](#sqlalchemy.dialects.postgresql.BYTEA
    "sqlalchemy.dialects.postgresql.BYTEA") ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")) - PostgreSQL 的 BYTEA 类型
- en: '[PRE143]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 的 `sqlalchemy.types.LargeBinary.__init__` *方法*
    - 从 `sqlalchemy.types.LargeBinary` 继承'
- en: Construct a LargeBinary type.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选，用于 DDL 语句中的列长度，对于那些接受长度的二进制类型，例如 MySQL 的 BLOB 类型。'
- en: '[PRE144]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '**Class signature**'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")) - PostgreSQL 的 CIDR 类型
- en: '[PRE145]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Provide the PostgreSQL CITEXT type.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL CITEXT 类型。
- en: New in version 2.0.7.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.7 中新增。
- en: '**Members**'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.CITEXT.__init__)'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.CITEXT.__init__) - 初始化方法'
- en: '**Class signature**'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.CITEXT`](#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") ([`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"))
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.CITEXT`](#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") ([`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")) - PostgreSQL 的 CITEXT 类型
- en: '[PRE146]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    的 `sqlalchemy.types.String.__init__` *方法* - 从 `sqlalchemy.types.String` 继承'
- en: Create a string-holding type.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选，用于 DDL 和 CAST 表达式中的列长度。如果不会发出 `CREATE TABLE`，可以安全地省略。某些数据库可能需要在
    DDL 中使用长度，并且如果包含长度为零的 `VARCHAR`，则在发出 `CREATE TABLE` DDL 时会引发异常。值是作为字节还是字符解释是特定于数据库的。'
- en: '`collation` –'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选，用于 DDL 和 CAST 表达式中的列级排序。使用 SQLite、MySQL 和 PostgreSQL 支持的 COLLATE 关键字呈现。例如：
- en: '[PRE147]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Note
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText "sqlalchemy.types.UnicodeText")
    数据类型应该用于期望存储非 ASCII 数据的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE148]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Represent the DOMAIN PostgreSQL type.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 DOMAIN PostgreSQL 类型。
- en: 'A domain is essentially a data type with optional constraints that restrict
    the allowed set of values. E.g.:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 域本上，域是具有可选约束的数据类型，约束限制了允许的值集。例如：
- en: '[PRE149]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: See the [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-createdomain.html)
    for additional details
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅[PostgreSQL文档](https://www.postgresql.org/docs/current/sql-createdomain.html)
- en: New in version 2.0.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: '**Members**'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.DOMAIN.__init__), [create()](#sqlalchemy.dialects.postgresql.DOMAIN.create),
    [drop()](#sqlalchemy.dialects.postgresql.DOMAIN.drop)'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.DOMAIN.__init__), [create()](#sqlalchemy.dialects.postgresql.DOMAIN.create),
    [drop()](#sqlalchemy.dialects.postgresql.DOMAIN.drop)'
- en: '**Class signature**'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") (`sqlalchemy.dialects.postgresql.named_types.NamedType`,
    [`sqlalchemy.types.SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType"))
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")（`sqlalchemy.dialects.postgresql.named_types.NamedType`，[`sqlalchemy.types.SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")）
- en: '[PRE150]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Construct a DOMAIN.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个DOMAIN。
- en: 'Parameters:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – the name of the domain'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 域的名称'
- en: '`data_type` – The underlying data type of the domain. This can include array
    specifiers.'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_type` – 域的基础数据类型。这可以包括数组说明符。'
- en: '`collation` – An optional collation for the domain. If no collation is specified,
    the underlying data type’s default collation is used. The underlying type must
    be collatable if `collation` is specified.'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 域的可选排序规则。如果未指定排序规则，则使用基础数据类型的默认排序规则。如果指定了`collation`，则基础类型必须是可排序的。'
- en: '`default` – The DEFAULT clause specifies a default value for columns of the
    domain data type. The default should be a string or a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") value. If no default value is specified, then
    the default value is the null value.'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – DEFAULT子句为域数据类型的列指定默认值。默认值应为字符串或[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")值。如果未指定默认值，则默认值为null值。'
- en: '`constraint_name` – An optional name for a constraint. If not specified, the
    backend generates a name.'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint_name` – 约束的可选名称。如果未指定，则后端会生成一个名称。'
- en: '`not_null` – Values of this domain are prevented from being null. By default
    domain are allowed to be null. If not specified no nullability clause will be
    emitted.'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not_null` – 此域的值不允许为null。默认情况下，域允许为null。如果未指定，则不会发出空值约束。'
- en: '`check` – CHECK clause specify integrity constraint or test which values of
    the domain must satisfy. A constraint must be an expression producing a Boolean
    result that can use the key word VALUE to refer to the value being tested. Differently
    from PostgreSQL, only a single check clause is currently allowed in SQLAlchemy.'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check` – CHECK子句指定域值必须满足的完整性约束或测试。约束必须是一个产生布尔结果的表达式，可以使用关键字VALUE来引用正在测试的值。与PostgreSQL不同，目前在SQLAlchemy中只允许一个检查子句。'
- en: '`schema` – optional schema name'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选的模式名称'
- en: '`metadata` – optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object which this [`DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") will be directly associated'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 可选的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象，此[`DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")将直接关联'
- en: '`create_type` – Defaults to True. Indicates that `CREATE TYPE` should be emitted,
    after optionally checking for the presence of the type, when the parent table
    is being created; and additionally that `DROP TYPE` is called when the table is
    dropped.'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_type` – 默认为True。指示在创建父表时应发出`CREATE TYPE`，并在必要时检查类型的存在；此外，在删除表时调用`DROP
    TYPE`。'
- en: '[PRE151]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '*inherited from the* `NamedType.create()` *method of* `NamedType`'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedType` *的* `NamedType.create()` *方法*'
- en: Emit `CREATE` DDL for this type.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 发出此类型的`CREATE` DDL。
- en: 'Parameters:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象以发出SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type does not exist already before creating.'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 如果为`True`，则在创建之前首先对PG目录执行查询，以查看类型是否已存在。'
- en: '[PRE152]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '*inherited from the* `NamedType.drop()` *method of* `NamedType`'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedType.drop()` *方法的* `NamedType`'
- en: Emit `DROP` DDL for this type.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 发出此类型的`DROP` DDL。
- en: 'Parameters:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象以发出 SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type actually exists before dropping.'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 如果为`True`，则首先对 PG 目录执行查询，以查看类型是否实际存在才会删除。'
- en: '[PRE153]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: The SQL DOUBLE PRECISION type.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DOUBLE PRECISION 类型。
- en: New in version 2.0.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增。
- en: See also
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    - documentation for the base type.'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.postgresql.DOUBLE_PRECISION` ([`sqlalchemy.types.Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"))
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.postgresql.DOUBLE_PRECISION` ([`sqlalchemy.types.Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"))
- en: '[PRE154]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.Float.__init__` *方法的* [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
- en: Construct a Float.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在 DDL `CREATE TABLE` 中使用的数字精度。后端**应该**尝试确保此精度指示了通用[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")数据类型的数字位数。
- en: Note
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，不接受[`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float")参数，因为 Oracle 不支持将浮点精度指定为小数位数。而是使用特定于 Oracle 的[`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")数据类型，并指定[`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")参数。这是 SQLAlchemy 的 2.0 版本中的新功能。
- en: 'To create a database agnostic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") that separately specifies binary precision for Oracle,
    use [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个与数据库无关的[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为Oracle分别指定二进制精度，请使用[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")如下所示：
- en: '[PRE155]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")相同的标志，但默认值为`False`。请注意，将此标志设置为`True`会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 十进制数时使用的默认精度。由于十进制不准确性，浮点值通常会更长，而大多数浮点数据库类型没有“精度”的概念，因此默认情况下，浮点类型在转换时会查找前十位小数点。指定此值将覆盖该长度。请注意，MySQL
    浮点类型包括“精度”，如果未另行指定，则将使用“精度”作为 decimal_return_scale 的默认值。'
- en: '[PRE156]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: PostgreSQL ENUM type.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL ENUM 类型。
- en: This is a subclass of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") which includes support for PG’s `CREATE TYPE` and `DROP
    TYPE`.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的子类，包括对
    PG 的`CREATE TYPE`和`DROP TYPE`的支持。
- en: When the builtin type [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") is used and the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") flag is left at its default of True, the PostgreSQL backend
    will use a [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    type as the implementation, so the special create/drop rules will be used.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用内置类型[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")并且[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")标志保持默认值为 True 时，PostgreSQL 后端将使用[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")类型作为实现，因此将使用特殊的创建/删除规则。
- en: The create/drop behavior of ENUM is necessarily intricate, due to the awkward
    relationship the ENUM type has in relationship to the parent table, in that it
    may be “owned” by just a single table, or may be shared among many tables.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 ENUM 类型与父表的尴尬关系，ENUM 的创建/删除行为必然复杂，因为它可能仅被单个表“拥有”，也可能被多个表共享。
- en: 'When using [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    or [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    in an “inline” fashion, the `CREATE TYPE` and `DROP TYPE` is emitted corresponding
    to when the [`Table.create()`](../core/metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") and [`Table.drop()`](../core/metadata.html#sqlalchemy.schema.Table.drop
    "sqlalchemy.schema.Table.drop") methods are called:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 当以“内联”方式使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")或[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")时，将发出`CREATE TYPE`和`DROP TYPE`，对应于调用[`Table.create()`](../core/metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")和[`Table.drop()`](../core/metadata.html#sqlalchemy.schema.Table.drop
    "sqlalchemy.schema.Table.drop")方法时：
- en: '[PRE157]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'To use a common enumerated type between multiple tables, the best practice
    is to declare the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    or [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    independently, and associate it with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object itself:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 要在多个表之间使用共同的枚举类型，最佳实践是独立声明[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")，并将其与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象本身关联：
- en: '[PRE158]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'When this pattern is used, care must still be taken at the level of individual
    table creates. Emitting CREATE TABLE without also specifying `checkfirst=True`
    will still cause issues:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用这种模式时，仍然必须在单个表创建的级别上小心处理。发出 CREATE TABLE 而不指定`checkfirst=True`仍会导致问题：
- en: '[PRE159]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'If we specify `checkfirst=True`, the individual table-level create operation
    will check for the `ENUM` and create if not exists:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定`checkfirst=True`，则单个表级别的创建操作将检查`ENUM`是否存在，如果不存在则创建：
- en: '[PRE160]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'When using a metadata-level ENUM type, the type will always be created and
    dropped if either the metadata-wide create/drop is called:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于元数据的 ENUM 类型时，如果调用元数据范围的创建/删除，则该类型将始终被创建和删除：
- en: '[PRE161]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'The type can also be created and dropped directly:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 该类型也可以直接创建和删除：
- en: '[PRE162]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '**Members**'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.ENUM.__init__), [create()](#sqlalchemy.dialects.postgresql.ENUM.create),
    [drop()](#sqlalchemy.dialects.postgresql.ENUM.drop)'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.ENUM.__init__), [create()](#sqlalchemy.dialects.postgresql.ENUM.create),
    [drop()](#sqlalchemy.dialects.postgresql.ENUM.drop)'
- en: '**Class signature**'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") (`sqlalchemy.dialects.postgresql.named_types.NamedType`,
    `sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"))
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") (`sqlalchemy.dialects.postgresql.named_types.NamedType`,
    `sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"))
- en: '[PRE163]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Construct an [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")。
- en: Arguments are the same as that of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), but also including the following parameters.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")相同，但还包括以下参数。
- en: 'Parameters:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**create_type** – Defaults to True. Indicates that `CREATE TYPE` should be
    emitted, after optionally checking for the presence of the type, when the parent
    table is being created; and additionally that `DROP TYPE` is called when the table
    is dropped. When `False`, no check will be performed and no `CREATE TYPE` or `DROP
    TYPE` is emitted, unless [`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create") or [`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop") are called directly. Setting to `False`
    is helpful when invoking a creation scheme to a SQL file without access to the
    actual database - the [`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create") and [`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop") methods can be used to emit SQL to
    a target bind.'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '**create_type** – 默认为 True。指示在创建父表时应发出`CREATE TYPE`，并在需要时检查类型的存在；此外，在删除表时调用`DROP
    TYPE`。当为`False`时，不会执行任何检查，也不会发出`CREATE TYPE`或`DROP TYPE`，除非直接调用[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create")或[`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop")。在没有实际数据库访问的情况下向 SQL 文件调用创建方案时，将其设置为`False`是有帮助的
    - 可以使用[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create "sqlalchemy.dialects.postgresql.ENUM.create")和[`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop")方法向目标绑定发出 SQL。'
- en: '[PRE164]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Emit `CREATE TYPE` for this [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")发出`CREATE
    TYPE`。
- en: If the underlying dialect does not support PostgreSQL CREATE TYPE, no action
    is taken.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层方言不支持 PostgreSQL CREATE TYPE，则不会采取任何操作。
- en: 'Parameters:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象，用于发出 SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type does not exist already before creating.'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 如果为`True`，将首先执行针对 PG 目录的查询，以查看在创建之前类型是否已存在。'
- en: '[PRE165]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Emit `DROP TYPE` for this [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")发出`DROP
    TYPE`。
- en: If the underlying dialect does not support PostgreSQL DROP TYPE, no action is
    taken.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层方言不支持 PostgreSQL DROP TYPE，则不会采取任何操作。
- en: 'Parameters:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象，用于发出 SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type actually exists before dropping.'
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 如果为`True`，将首先执行针对 PG 目录的查询，以查看类型是否实际存在，然后再执行删除。'
- en: '[PRE166]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Represent the PostgreSQL HSTORE type.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL HSTORE 类型。
- en: 'The [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    type stores dictionaries containing strings, e.g.:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    类型存储包含字符串的字典，例如：'
- en: '[PRE167]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    provides for a wide range of operations, including:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    提供广泛的操作，包括：'
- en: 'Index operations:'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引操作：
- en: '[PRE168]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Containment operations:'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含操作：
- en: '[PRE169]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Concatenation:'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接：
- en: '[PRE170]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: For a full list of special methods see `comparator_factory`.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特殊方法的完整列表，请参见`comparator_factory`。
- en: '**Detecting Changes in HSTORE columns when using the ORM**'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '**在使用 ORM 时检测 HSTORE 列中的更改**'
- en: 'For usage with the SQLAlchemy ORM, it may be desirable to combine the usage
    of [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    with [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") dictionary now part of the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension. This extension will allow “in-place” changes
    to the dictionary, e.g. addition of new keys or replacement/removal of existing
    keys to/from the current dictionary, to produce events which will be detected
    by the unit of work:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 SQLAlchemy ORM 中的使用，可能希望将[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")的使用与[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")字典结合起来，该字典现在是[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展的一部分。这个扩展将允许对字典进行“原地”更改，例如添加新键或将现有键替换/删除到/从当前字典中，以产生将被工作单元检测到的事件：
- en: '[PRE171]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: When the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension is not used, the ORM will not be alerted to
    any changes to the contents of an existing dictionary, unless that dictionary
    value is re-assigned to the HSTORE-attribute itself, thus generating a change
    event.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 当不使用[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展时，ORM 将不会被提醒对现有字典内容的任何更改，除非该字典值被重新分配给 HSTORE 属性本身，从而生成更改事件。
- en: See also
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - render the PostgreSQL `hstore()` function.'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - 渲染 PostgreSQL 的 `hstore()` 函数。'
- en: '**Members**'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[array()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.array), [contained_by()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contains), [defined()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.defined),
    [delete()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.delete), [has_all()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_all),
    [has_any()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_any), [has_key()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_key),
    [keys()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.keys), [matrix()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.matrix),
    [slice()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.slice), [vals()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.vals),
    [__init__()](#sqlalchemy.dialects.postgresql.HSTORE.__init__), [bind_processor()](#sqlalchemy.dialects.postgresql.HSTORE.bind_processor),
    [comparator_factory](#sqlalchemy.dialects.postgresql.HSTORE.comparator_factory),
    [hashable](#sqlalchemy.dialects.postgresql.HSTORE.hashable), [result_processor()](#sqlalchemy.dialects.postgresql.HSTORE.result_processor)'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '[array()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.array), [contained_by()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contains), [defined()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.defined),
    [delete()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.delete), [has_all()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_all),
    [has_any()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_any), [has_key()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_key),
    [keys()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.keys), [matrix()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.matrix),
    [slice()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.slice), [vals()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.vals),
    [__init__()](#sqlalchemy.dialects.postgresql.HSTORE.__init__), [bind_processor()](#sqlalchemy.dialects.postgresql.HSTORE.bind_processor),
    [comparator_factory](#sqlalchemy.dialects.postgresql.HSTORE.comparator_factory),
    [hashable](#sqlalchemy.dialects.postgresql.HSTORE.hashable), [result_processor()](#sqlalchemy.dialects.postgresql.HSTORE.result_processor)'
- en: '**Class signature**'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") ([`sqlalchemy.types.Indexable`](../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](../core/type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")（[`sqlalchemy.types.Indexable`](../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](../core/type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE172]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Define comparison operations for [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE").
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")定义比较操作。
- en: '**Class signature**'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.HSTORE.Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator
    "sqlalchemy.dialects.postgresql.HSTORE.Comparator") (`sqlalchemy.types.Comparator`,
    `sqlalchemy.types.Comparator`)
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.HSTORE.Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator
    "sqlalchemy.dialects.postgresql.HSTORE.Comparator")（`sqlalchemy.types.Comparator`，`sqlalchemy.types.Comparator`）
- en: '[PRE173]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Text array expression. Returns array of alternating keys and values.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回交替键和值的数组。
- en: '[PRE174]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Boolean expression. Test if keys are a proper subset of the keys of the argument
    jsonb expression.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键是否为参数jsonb表达式的键的真子集。
- en: '[PRE175]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Boolean expression. Test if keys (or array) are a superset of/contained the
    keys of the argument jsonb expression.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键（或数组）是否为参数jsonb表达式的键的超集/包含。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: kwargs可能会被此操作符忽略，但对API一致性来说是必需的。
- en: '[PRE176]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Boolean expression. Test for presence of a non-NULL value for the key. Note
    that the key may be a SQLA expression.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键的非NULL值是否存在。请注意键可以是SQLA表达式。
- en: '[PRE177]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: HStore expression. Returns the contents of this hstore with the given key deleted.
    Note that the key may be a SQLA expression.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: HStore表达式。返回删除了给定键的此hstore的内容。请注意键可以是SQLA表达式。
- en: '[PRE178]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Boolean expression. Test for presence of all keys in jsonb
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试jsonb中所有键是否存在。
- en: '[PRE179]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Boolean expression. Test for presence of any key in jsonb
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试jsonb中是否存在任何键。
- en: '[PRE180]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Boolean expression. Test for presence of a key. Note that the key may be a SQLA
    expression.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键是否存在。请注意键可以是SQLA表达式。
- en: '[PRE181]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Text array expression. Returns array of keys.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回键的数组。
- en: '[PRE182]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Text array expression. Returns array of [key, value] pairs.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回[键，值]对的数组。
- en: '[PRE183]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: HStore expression. Returns a subset of an hstore defined by array of keys.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: HStore表达式。返回由键数组定义的hstore的子集。
- en: '[PRE184]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Text array expression. Returns array of values.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回值数组。
- en: '[PRE185]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Construct a new [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE").
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")。
- en: 'Parameters:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**text_type** – the type that should be used for indexed values. Defaults to
    [`Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text").'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '**text_type** - 应用于索引值的类型。默认为[`Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text")。'
- en: '[PRE186]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Return a conversion function for processing bind values.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用函数，该函数将接收绑定参数值作为唯一位置参数，并返回要发送到DB-API的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅相对于**特定方言类型对象**调用，该对象通常是正在使用的方言的**私有对象**，并且不是与公共面向的对象相同的类型对象，这意味着无法通过子类化[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代[`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非明确子类化[`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为[`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，实现一个[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类并提供一个[`TypeDecorator.process_bind_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](../core/custom_types.html#types-typedecorator)'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](../core/custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect** – 使用的方言实例。'
- en: '[PRE187]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: alias of [`Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator "sqlalchemy.dialects.postgresql.hstore.HSTORE.Comparator")
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator "sqlalchemy.dialects.postgresql.hstore.HSTORE.Comparator")的别名。'
- en: '[PRE188]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Flag, if False, means values from this type aren’t hashable.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 标志，如果为False，则表示此类型的值不可哈希。
- en: Used by the ORM when uniquing result lists.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 在ORM中用于唯一化结果列表。
- en: '[PRE189]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Return a conversion function for processing result row values.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收一个结果行列值作为唯一的位置参数，并将返回一个要返回给用户的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于一个**特定方言类型对象**调用，该对象通常是**正在使用的方言中的私有类型对象**，并且与公共类型对象不同，这意味着无法通过子类化[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非显式地子类化[`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为[`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")提供替代行为，实现一个[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类并提供一个[`TypeDecorator.process_result_value()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value")的实现。
- en: See also
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Augmenting Existing Types](../core/custom_types.html#types-typedecorator)'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](../core/custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在cursor.description中收到的DBAPI coltype参数。'
- en: '[PRE190]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '**Class signature**'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))。
- en: '[PRE191]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: PostgreSQL INTERVAL type.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL间隔类型。
- en: '**Members**'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.INTERVAL.__init__)'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.INTERVAL.__init__)'
- en: '**Class signature**'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INTERVAL`](#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") (`sqlalchemy.types.NativeForEmulated`,
    `sqlalchemy.types._AbstractInterval`)
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.INTERVAL`](#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL")（`sqlalchemy.types.NativeForEmulated`，`sqlalchemy.types._AbstractInterval`）
- en: '[PRE192]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Construct an INTERVAL.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 INTERVAL。
- en: 'Parameters:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – optional integer precision value'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 可选的整数精度值'
- en: '`fields` –'
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields` –'
- en: string fields specifier. allows storage of fields to be limited, such as `"YEAR"`,
    `"MONTH"`, `"DAY TO HOUR"`, etc.
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字段字符串指定器。允许限制存储字段，例如 `"YEAR"`，`"MONTH"`，`"DAY TO HOUR"` 等。
- en: New in version 1.2.
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: '[PRE193]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Represent the PostgreSQL JSON type.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL 的 JSON 类型。
- en: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    is used automatically whenever the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype is used against a PostgreSQL backend, however
    base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    datatype does not provide Python accessors for PostgreSQL-specific comparison
    methods such as [`Comparator.astext()`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext"); additionally, to use
    PostgreSQL `JSONB`, the [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    datatype should be used explicitly.'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 当基本 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型用于 PostgreSQL 后端时，将自动使用 [`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")，但基本
    [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    数据类型不提供用于 PostgreSQL 特定比较方法的 Python 访问器，例如 [`Comparator.astext()`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext")；此外，要使用 PostgreSQL 的 `JSONB`，应明确使用
    [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    数据类型。
- en: See also
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - main documentation for the generic cross-platform JSON datatype.'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 用于通用跨平台 JSON 数据类型的主要文档。'
- en: 'The operators provided by the PostgreSQL version of [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") include:'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 版本提供的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    运算符包括：
- en: 'Index operations (the `->` operator):'
  id: totrans-860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引操作（`->` 运算符）：
- en: '[PRE194]'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'Index operations returning text (the `->>` operator):'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回文本的索引操作（`->>` 运算符）：
- en: '[PRE195]'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Note that equivalent functionality is available via the [`Comparator.as_string`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string") accessor.
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，等效功能也可以通过[`Comparator.as_string`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string")访问器实现。
- en: 'Index operations with CAST (equivalent to `CAST(col ->> [''some key''] AS <type>)`):'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CAST 进行索引操作（相当于 `CAST(col ->> ['some key'] AS <type>)`）：
- en: '[PRE196]'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Note that equivalent functionality is available via the [`Comparator.as_integer`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer") and similar accessors.
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，等效功能也可以通过[`Comparator.as_integer`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer")和类似的访问器实现。
- en: 'Path index operations (the `#>` operator):'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径索引操作（`#>` 运算符）：
- en: '[PRE197]'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Path index operations returning text (the `#>>` operator):'
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回文本的路径索引操作（`#>>` 运算符）：
- en: '[PRE198]'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Index operations return an expression object whose type defaults to [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") by default, so that further JSON-oriented instructions
    may be called upon the result type.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 索引操作默认返回一个类型为[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")的表达式对象，因此可以对结果类型调用更多面向
    JSON 的指令。
- en: 'Custom serializers and deserializers are specified at the dialect level, that
    is using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").
    The reason for this is that when using psycopg2, the DBAPI only allows serializers
    at the per-cursor or per-connection level. E.g.:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义序列化器和反序列化器在方言级别指定，即使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。这样做的原因是，在使用 psycopg2 时，DBAPI 只允许在每个游标或每个连接级别上进行序列化。例如：
- en: '[PRE199]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: When using the psycopg2 dialect, the json_deserializer is registered against
    the database using `psycopg2.extras.register_default_json`.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 方言时，json_deserializer 是通过 `psycopg2.extras.register_default_json`
    注册到数据库中的。
- en: See also
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - Core level JSON type'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 核心级别的 JSON 类型'
- en: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
- en: '**Members**'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[astext](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext), [__init__()](#sqlalchemy.dialects.postgresql.JSON.__init__),
    [comparator_factory](#sqlalchemy.dialects.postgresql.JSON.comparator_factory)'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '[astext](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext), [__init__()](#sqlalchemy.dialects.postgresql.JSON.__init__),
    [comparator_factory](#sqlalchemy.dialects.postgresql.JSON.comparator_factory)'
- en: '**Class signature**'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"))
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")（[`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")）
- en: '[PRE200]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Define comparison operations for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON").
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    定义比较操作。
- en: '**Class signature**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSON.Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator
    "sqlalchemy.dialects.postgresql.JSON.Comparator") (`sqlalchemy.types.Comparator`)
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.JSON.Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator
    "sqlalchemy.dialects.postgresql.JSON.Comparator")（`sqlalchemy.types.Comparator`）
- en: '[PRE201]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: On an indexed expression, use the “astext” (e.g. “->>”) conversion when rendered
    in SQL.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引表达式上，当在 SQL 中渲染时，使用“astext”（例如“->>”）转换。
- en: 'E.g.:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE202]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: See also
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")'
- en: '[PRE203]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Construct a [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型。
- en: 'Parameters:'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`none_as_null` –'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none_as_null` -'
- en: 'if True, persist the value `None` as a SQL NULL value, not the JSON encoding
    of `null`. Note that when this flag is False, the [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct can still be used to persist a NULL
    value:'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则将值`None`持久化为 SQL NULL 值，而不是`null`的 JSON 编码。请注意，当此标志为 False 时，仍然可以使用[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") 构造来持久化 NULL 值：
- en: '[PRE204]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: See also
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
- en: '`astext_type` – the type to use for the [`Comparator.astext`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") accessor on indexed attributes.
    Defaults to [`Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text").'
  id: totrans-901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`astext_type` - 用于索引属性上的[`Comparator.astext`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") 访问器的类型。默认为[`Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text")。'
- en: '[PRE205]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: alias of [`Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator "sqlalchemy.dialects.postgresql.json.JSON.Comparator")
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 的别名[`Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator "sqlalchemy.dialects.postgresql.json.JSON.Comparator")
- en: '[PRE206]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Represent the PostgreSQL JSONB type.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL 的 JSONB 类型。
- en: 'The [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    type stores arbitrary JSONB format data, e.g.:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    类型存储任意的 JSONB 格式数据，例如：'
- en: '[PRE207]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: The [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    type includes all operations provided by [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"), including the same behaviors for indexing operations.
    It also adds additional operators specific to JSONB, including [`Comparator.has_key()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key"), [`Comparator.has_all()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all"), [`Comparator.has_any()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any"), [`Comparator.contains()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contains"), [`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by"), [`Comparator.delete_path()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path"), [`Comparator.path_exists()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists") and [`Comparator.path_match()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match").
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")类型包括[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")提供的所有操作，包括索引操作的相同行为。它还添加了特定于JSONB的其他运算符，包括[`Comparator.has_key()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key")、[`Comparator.has_all()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all")、[`Comparator.has_any()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any")、[`Comparator.contains()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contains")、[`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by")、[`Comparator.delete_path()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")、[`Comparator.path_exists()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists")和[`Comparator.path_match()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")。'
- en: Like the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type, the [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    type does not detect in-place changes when used with the ORM, unless the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension is used.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类型类似，[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")类型在使用ORM时，除非使用了[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展，否则不会检测到原地更改。
- en: Custom serializers and deserializers are shared with the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") class, using the `json_serializer` and `json_deserializer`
    keyword arguments. These must be specified at the dialect level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). When using psycopg2, the serializers are associated
    with the jsonb type using `psycopg2.extras.register_default_jsonb` on a per-connection
    basis, in the same way that `psycopg2.extras.register_default_json` is used to
    register these handlers with the json type.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义序列化器和反序列化器与[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类共享，使用`json_serializer`和`json_deserializer`关键字参数。必须在方言级别使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")指定这些参数。当使用psycopg2时，序列化器与jsonb类型相关联，使用`psycopg2.extras.register_default_jsonb`在每个连接上基于psycopg2方式注册这些处理程序，与使用`psycopg2.extras.register_default_json`将这些处理程序注册到json类型的方式相同。
- en: See also
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
- en: '**Members**'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[contained_by()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains), [delete_path()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path),
    [has_all()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all), [has_any()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any),
    [has_key()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key), [path_exists()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists),
    [path_match()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match), [comparator_factory](#sqlalchemy.dialects.postgresql.JSONB.comparator_factory)'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: '[contained_by()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains), [delete_path()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path),
    [has_all()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all), [has_any()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any),
    [has_key()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key), [path_exists()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists),
    [path_match()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match), [comparator_factory](#sqlalchemy.dialects.postgresql.JSONB.comparator_factory)。'
- en: '**Class signature**'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSONB`](#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") ([`sqlalchemy.dialects.postgresql.json.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.json.JSON"))
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.JSONB`](#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") ([`sqlalchemy.dialects.postgresql.json.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.json.JSON"))。
- en: '[PRE208]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Define comparison operations for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON").
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    定义比较操作。
- en: '**Class signature**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSONB.Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator
    "sqlalchemy.dialects.postgresql.JSONB.Comparator") (`sqlalchemy.dialects.postgresql.json.Comparator`)
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.JSONB.Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator
    "sqlalchemy.dialects.postgresql.JSONB.Comparator") (`sqlalchemy.dialects.postgresql.json.Comparator`)。
- en: '[PRE209]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Boolean expression. Test if keys are a proper subset of the keys of the argument
    jsonb expression.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键是否是参数 jsonb 表达式的键的真子集。
- en: '[PRE210]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Boolean expression. Test if keys (or array) are a superset of/contained the
    keys of the argument jsonb expression.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键（或数组）是否是参数 jsonb 表达式的键的超集/包含。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: kwargs 可能会被此运算符忽略，但对于 API 一致性是必需的。
- en: '[PRE211]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: JSONB expression. Deletes field or array element specified in the argument array.
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: JSONB 表达���。删除参数数组中指定的字段或数组元素。
- en: The input may be a list of strings that will be coerced to an `ARRAY` or an
    instance of `_postgres.array()`.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 输入可以是一个将被强制转换为 `ARRAY` 的字符串列表，或者是 `_postgres.array()` 的实例。
- en: New in version 2.0.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE212]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Boolean expression. Test for presence of all keys in jsonb
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试 jsonb 中是否存在所有键。
- en: '[PRE213]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Boolean expression. Test for presence of any key in jsonb
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试 jsonb 中是否存在任何键。
- en: '[PRE214]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: Boolean expression. Test for presence of a key. Note that the key may be a SQLA
    expression.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键是否存在。请注意，键可能是 SQLA 表达式。
- en: '[PRE215]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Boolean expression. Test for presence of item given by the argument JSONPath
    expression.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试参数 JSONPath 表达式给出的项目是否存在。
- en: New in version 2.0.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE216]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Boolean expression. Test if JSONPath predicate given by the argument JSONPath
    expression matches.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试参数 JSONPath 表达式给出的 JSONPath 谓词是否匹配。
- en: Only the first item of the result is taken into account.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 仅考虑结果的第一项。
- en: New in version 2.0.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE217]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: alias of [`Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator "sqlalchemy.dialects.postgresql.json.JSONB.Comparator")
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator "sqlalchemy.dialects.postgresql.json.JSONB.Comparator")
    的别名。'
- en: '[PRE218]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: JSON Path Type.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 路径类型。
- en: 'This is usually required to cast literal values to json path when using json
    search like function, such as `jsonb_path_query_array` or `jsonb_path_exists`:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用类似于 `jsonb_path_query_array` 或 `jsonb_path_exists` 的 json 搜索函数时，通常需要将字面值转换为
    json 路径：
- en: '[PRE219]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '**Class signature**'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") (`sqlalchemy.dialects.postgresql.json.JSONPathType`)
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") (`sqlalchemy.dialects.postgresql.json.JSONPathType`)。
- en: '[PRE220]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '**Class signature**'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE221]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '**Class signature**'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MACADDR8`](#sqlalchemy.dialects.postgresql.MACADDR8
    "sqlalchemy.dialects.postgresql.MACADDR8") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.MACADDR8`](#sqlalchemy.dialects.postgresql.MACADDR8
    "sqlalchemy.dialects.postgresql.MACADDR8")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE222]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Provide the PostgreSQL MONEY type.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL MONEY 类型。
- en: Depending on driver, result rows using this type may return a string value which
    includes currency symbols.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 取决于驱动程序，使用此类型的结果行可能会返回包含货币符号的字符串值。
- en: 'For this reason, it may be preferable to provide conversion to a numerically-based
    currency datatype using [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 将其转换为基于数字的货币数据类型：
- en: '[PRE223]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Alternatively, the conversion may be applied as a CAST using the [`TypeDecorator.column_expression()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression") method as follows:'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用 [`TypeDecorator.column_expression()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression") 方法将转换应用为 CAST 如下所示：
- en: '[PRE224]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: New in version 1.2.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中新增。
- en: '**Class signature**'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MONEY`](#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.MONEY`](#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE225]'
  id: totrans-967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Provide the PostgreSQL OID type.
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL OID 类型。
- en: '**Class signature**'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.OID`](#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.OID`](#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE226]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: The SQL REAL type.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: SQL REAL 类型。
- en: See also
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    - documentation for the base type.'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.postgresql.REAL` ([`sqlalchemy.types.Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float"))
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.postgresql.REAL`（[`sqlalchemy.types.Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")）
- en: '[PRE227]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    *的* `sqlalchemy.types.Float.__init__` *方法*'
- en: Construct a Float.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 DDL `CREATE TABLE` 中的数字精度。 后端 **应该** 尝试确保此精度指示出用于通用 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时不接受 [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持将浮点精度指定为���数位数。而是使用 Oracle 特定的 [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 版本 2.0 中的新功能。
- en: 'To create a database agnostic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") that separately specifies binary precision for Oracle,
    use [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库不可知的 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为
    Oracle 分别指定二进制精度，请使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE228]'
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 相同的标志，但默认为 `False`。请注意，将此标志设置为 `True` 会导致浮点数转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 在将浮点数转换为 Python 十进制数时使用的默认精度。由于十进制不准确性，浮点值通常会更长，大多数浮点数据库类型没有“精度”的概念，因此默认情况下，浮点类型在转换时会查找前十位小数点。指定此值将覆盖该长度。请注意，MySQL
    浮点类型包括“精度”，如果未另行指定，则将使用“精度”作为 decimal_return_scale 的默认值。'
- en: '[PRE229]'
  id: totrans-989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Provide the PostgreSQL REGCONFIG type.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL 的 REGCONFIG 类型。
- en: New in version 2.0.0rc1.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.0rc1 中新增。
- en: '**Class signature**'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE230]'
  id: totrans-994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Provide the PostgreSQL REGCLASS type.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL 的 REGCLASS 类型。
- en: New in version 1.2.7.
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2.7 中新增。
- en: '**Class signature**'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.REGCLASS`](#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.REGCLASS`](#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE231]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Provide the PostgreSQL TIMESTAMP type.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL 的 TIMESTAMP 类型。
- en: '**Members**'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.TIMESTAMP.__init__)'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.TIMESTAMP.__init__)'
- en: '**Class signature**'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TIMESTAMP`](#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TIMESTAMP`](#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
- en: '[PRE232]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Construct a TIMESTAMP.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TIMESTAMP。
- en: 'Parameters:'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – boolean value if timezone present, default False'
  id: totrans-1008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – 如果存在时区则为布尔值，默认为 False'
- en: '`precision` –'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: optional integer precision value
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的整数精度值
- en: New in version 1.4.
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE233]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: PostgreSQL TIME type.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 TIME 类型。
- en: '**Members**'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.TIME.__init__)'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.TIME.__init__)'
- en: '**Class signature**'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TIME`](#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME"))
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TIME`](#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME"))
- en: '[PRE234]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Construct a TIME.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 TIME。
- en: 'Parameters:'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – boolean value if timezone present, default False'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – 如果存在时区，则为布尔值，默认为 False'
- en: '`precision` –'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: optional integer precision value
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的整数精度值
- en: New in version 1.4.
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE235]'
  id: totrans-1025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Provide the PostgreSQL TSQUERY type.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL TSQUERY 类型。
- en: New in version 2.0.0rc1.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.0rc1 中新增。
- en: '**Class signature**'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE236]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    type implements the PostgreSQL text search type TSVECTOR.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    类型实现了 PostgreSQL 文本搜索类型 TSVECTOR。'
- en: It can be used to do full text queries on natural language documents.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于对自然语言文档进行全文查询。
- en: See also
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Full Text Search](#postgresql-match)'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '[全文搜索](#postgresql-match)'
- en: '**Class signature**'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE237]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Represent the SQL UUID type.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL UUID 类型。
- en: This is the SQL-native form of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") database agnostic datatype, and is backwards compatible
    with the previous PostgreSQL-only version of `UUID`.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据库不可知数据类型的 SQL 本机形式，并且向后兼容以前的仅限于 PostgreSQL 的 `UUID` 版本。
- en: The [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    datatype only works on databases that have a SQL datatype named `UUID`. It will
    not function for backends which don’t have this exact-named type, including SQL
    Server. For backend-agnostic UUID values with native support, including for SQL
    Server’s `UNIQUEIDENTIFIER` datatype, use the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    数据类型仅适用于具有名为 `UUID` 的 SQL 数据类型的数据库。它不适用于没有这个确切命名类型的后端，包括 SQL Server。对于具有本机支持的后端不可知
    UUID 值，包括 SQL Server 的 `UNIQUEIDENTIFIER` 数据类型，请使用 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型。'
- en: New in version 2.0.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
- en: '**Class signature**'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.postgresql.UUID` ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.postgresql.UUID` ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
- en: '[PRE238]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Construct a [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    type.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    类型。
- en: 'Parameters:'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**as_uuid=True** –'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '**as_uuid=True** –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则值将被解释为 Python uuid 对象，通过 DBAPI 转换为字符串。
- en: '[PRE239]'
  id: totrans-1051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Represent the PostgreSQL INT4RANGE type.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT4RANGE 类型。
- en: '**Class signature**'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
- en: '[PRE240]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Represent the PostgreSQL INT8RANGE type.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT8RANGE 类型。
- en: '**Class signature**'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE
    "sqlalchemy.dialects.postgresql.INT8RANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE
    "sqlalchemy.dialects.postgresql.INT8RANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE241]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Represent the PostgreSQL NUMRANGE type.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL NUMRANGE 类型。
- en: '**Class signature**'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE
    "sqlalchemy.dialects.postgresql.NUMRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE
    "sqlalchemy.dialects.postgresql.NUMRANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE242]'
  id: totrans-1063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Represent the PostgreSQL DATERANGE type.
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL DATERANGE 类型。
- en: '**Class signature**'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE
    "sqlalchemy.dialects.postgresql.DATERANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE
    "sqlalchemy.dialects.postgresql.DATERANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE243]'
  id: totrans-1067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Represent the PostgreSQL TSRANGE type.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSRANGE 类型。
- en: '**Class signature**'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE
    "sqlalchemy.dialects.postgresql.TSRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE
    "sqlalchemy.dialects.postgresql.TSRANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE244]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Represent the PostgreSQL TSTZRANGE type.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSTZRANGE 类型。
- en: '**Class signature**'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE
    "sqlalchemy.dialects.postgresql.TSTZRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE
    "sqlalchemy.dialects.postgresql.TSTZRANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE245]'
  id: totrans-1075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Represent the PostgreSQL INT4MULTIRANGE type.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT4MULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT4MULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange")）
- en: '[PRE246]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Represent the PostgreSQL INT8MULTIRANGE type.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT8MULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT8MULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange")）
- en: '[PRE247]'
  id: totrans-1083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Represent the PostgreSQL NUMMULTIRANGE type.
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL NUMMULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE
    "sqlalchemy.dialects.postgresql.NUMMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE
    "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")（[`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange")）
- en: '[PRE248]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Represent the PostgreSQL DATEMULTIRANGE type.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL DATEMULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE
    "sqlalchemy.dialects.postgresql.DATEMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE
    "sqlalchemy.dialects.postgresql.DATEMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
- en: '[PRE249]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Represent the PostgreSQL TSRANGE type.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSRANGE 类型。
- en: '**Class signature**'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
- en: '[PRE250]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Represent the PostgreSQL TSTZRANGE type.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSTZRANGE 类型。
- en: '**Class signature**'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
- en: '[PRE251]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Represents a multirange sequence.
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个多范围序列。
- en: 'This list subclass is an utility to allow automatic type inference of the proper
    multi-range SQL type depending on the single range values. This is useful when
    operating on literal multi-ranges:'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表子类是一个实用工具，允许根据单个范围值自动推断适当的多范围 SQL 类型。在操作文字多范围时非常有用：
- en: '[PRE252]'
  id: totrans-1102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: New in version 2.0.26.
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26 中新增。
- en: See also
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Use of a MultiRange sequence to infer the multirange type](#postgresql-multirange-list-use).'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 MultiRange 序列推断多范围类型](#postgresql-multirange-list-use)。'
- en: '**Class signature**'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") (`builtins.list`, `typing.Generic`)
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") (`builtins.list`, `typing.Generic`)
- en: PostgreSQL SQL Elements and Functions
  id: totrans-1108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL SQL 元素和函数
- en: '| Object Name | Description |'
  id: totrans-1109
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aggregate_order_by](#sqlalchemy.dialects.postgresql.aggregate_order_by)
    | Represent a PostgreSQL aggregate order by expression. |'
  id: totrans-1111
  prefs: []
  type: TYPE_TB
  zh: '| [aggregate_order_by](#sqlalchemy.dialects.postgresql.aggregate_order_by)
    | 表示 PostgreSQL 聚合排序表达式。 |'
- en: '| [All](#sqlalchemy.dialects.postgresql.All)(other, arrexpr[, operator]) |
    A synonym for the ARRAY-level [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method. See that method for details.
    |'
  id: totrans-1112
  prefs: []
  type: TYPE_TB
  zh: '| [All](#sqlalchemy.dialects.postgresql.All)(other, arrexpr[, operator]) |
    ARRAY 级别的 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法的同义词。有关详细信息，请参阅该方法。 |'
- en: '| [Any](#sqlalchemy.dialects.postgresql.Any)(other, arrexpr[, operator]) |
    A synonym for the ARRAY-level [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method. See that method for details.
    |'
  id: totrans-1113
  prefs: []
  type: TYPE_TB
  zh: '| [Any](#sqlalchemy.dialects.postgresql.Any)(other, arrexpr[, operator]) |
    ARRAY 级别的 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法的同义词。有关详细信息，请参阅该方法。 |'
- en: '| [array](#sqlalchemy.dialects.postgresql.array) | A PostgreSQL ARRAY literal.
    |'
  id: totrans-1114
  prefs: []
  type: TYPE_TB
  zh: '| [array](#sqlalchemy.dialects.postgresql.array) | PostgreSQL ARRAY 文本。'
- en: '| [array_agg](#sqlalchemy.dialects.postgresql.array_agg)(*arg, **kw) | PostgreSQL-specific
    form of [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), ensures return type is [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") and not the plain [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), unless an explicit `type_` is passed. |'
  id: totrans-1115
  prefs: []
  type: TYPE_TB
  zh: '| [array_agg](#sqlalchemy.dialects.postgresql.array_agg)(*arg, **kw) | [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") 的 PostgreSQL 特定形式，确保返回类型是 [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 而不是普通的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，除非传递了显式的 `type_`。 |'
- en: '| [hstore](#sqlalchemy.dialects.postgresql.hstore) | Construct an hstore value
    within a SQL expression using the PostgreSQL `hstore()` function. |'
  id: totrans-1116
  prefs: []
  type: TYPE_TB
  zh: '| [hstore](#sqlalchemy.dialects.postgresql.hstore) | 使用 PostgreSQL `hstore()`
    函数在 SQL 表达式中构造 hstore 值。 |'
- en: '| [phraseto_tsquery](#sqlalchemy.dialects.postgresql.phraseto_tsquery) | The
    PostgreSQL `phraseto_tsquery` SQL function. |'
  id: totrans-1117
  prefs: []
  type: TYPE_TB
  zh: '| [phraseto_tsquery](#sqlalchemy.dialects.postgresql.phraseto_tsquery) | PostgreSQL
    `phraseto_tsquery` SQL 函数。 |'
- en: '| [plainto_tsquery](#sqlalchemy.dialects.postgresql.plainto_tsquery) | The
    PostgreSQL `plainto_tsquery` SQL function. |'
  id: totrans-1118
  prefs: []
  type: TYPE_TB
  zh: '| [plainto_tsquery](#sqlalchemy.dialects.postgresql.plainto_tsquery) | PostgreSQL
    `plainto_tsquery` SQL 函数。 |'
- en: '| [to_tsquery](#sqlalchemy.dialects.postgresql.to_tsquery) | The PostgreSQL
    `to_tsquery` SQL function. |'
  id: totrans-1119
  prefs: []
  type: TYPE_TB
  zh: '| [to_tsquery](#sqlalchemy.dialects.postgresql.to_tsquery) | PostgreSQL `to_tsquery`
    SQL 函数。 |'
- en: '| [to_tsvector](#sqlalchemy.dialects.postgresql.to_tsvector) | The PostgreSQL
    `to_tsvector` SQL function. |'
  id: totrans-1120
  prefs: []
  type: TYPE_TB
  zh: '| [to_tsvector](#sqlalchemy.dialects.postgresql.to_tsvector) | PostgreSQL `to_tsvector`
    SQL 函数。 |'
- en: '| [ts_headline](#sqlalchemy.dialects.postgresql.ts_headline) | The PostgreSQL
    `ts_headline` SQL function. |'
  id: totrans-1121
  prefs: []
  type: TYPE_TB
  zh: '| [ts_headline](#sqlalchemy.dialects.postgresql.ts_headline) | PostgreSQL `ts_headline`
    SQL 函数。 |'
- en: '| [websearch_to_tsquery](#sqlalchemy.dialects.postgresql.websearch_to_tsquery)
    | The PostgreSQL `websearch_to_tsquery` SQL function. |'
  id: totrans-1122
  prefs: []
  type: TYPE_TB
  zh: '| [websearch_to_tsquery](#sqlalchemy.dialects.postgresql.websearch_to_tsquery)
    | PostgreSQL `websearch_to_tsquery` SQL 函数。 |'
- en: '[PRE253]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Represent a PostgreSQL aggregate order by expression.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 PostgreSQL 聚合的 order by 表达式。
- en: 'E.g.:'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE254]'
  id: totrans-1126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'would represent the expression:'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 将表示表达式：
- en: '[PRE255]'
  id: totrans-1128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Similarly:'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地：
- en: '[PRE256]'
  id: totrans-1130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Would represent:'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 表示：
- en: '[PRE257]'
  id: totrans-1132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Changed in version 1.2.13: - the ORDER BY argument may be multiple terms'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.2.13 中更改：- ORDER BY 参数可以是多个术语
- en: See also
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")'
- en: '**Class signature**'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") ([`sqlalchemy.sql.expression.ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by")（[`sqlalchemy.sql.expression.ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE258]'
  id: totrans-1138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: A PostgreSQL ARRAY literal.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 ARRAY 字面量。
- en: 'This is used to produce ARRAY literals in SQL expressions, e.g.:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在 SQL 表达式中生成 ARRAY 字面量，例如：
- en: '[PRE259]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'Produces the SQL:'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 SQL：
- en: '[PRE260]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'An instance of [`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array.array")
    will always have the datatype [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"). The “inner” type of the array is inferred from the
    values present, unless the `type_` keyword argument is passed:'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array.array")
    的实例始终具有数据类型 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。数组的“内部”类型是从存在的值中推断出的，除非传递了
    `type_` 关键字参数：'
- en: '[PRE261]'
  id: totrans-1145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Multidimensional arrays are produced by nesting [`array`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array.array") constructs. The dimensionality of
    the final [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    type is calculated by recursively adding the dimensions of the inner [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type:'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 多维数组通过嵌套 [`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array.array")
    构造而产生。最终 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型的维数是通过递归添加内部 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型的维数来计算的：
- en: '[PRE262]'
  id: totrans-1147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Produces:'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE263]'
  id: totrans-1149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'New in version 1.3.6: added support for multidimensional array literals'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.6 中的新内容：增加了对多维数组字面值的支持
- en: See also
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")'
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")'
- en: '**Class signature**'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.array`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") (`sqlalchemy.sql.expression.ExpressionClauseList`)
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.array`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") (`sqlalchemy.sql.expression.ExpressionClauseList`)
- en: '[PRE264]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: PostgreSQL-specific form of [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), ensures return type is [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") and not the plain [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), unless an explicit `type_` is passed.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")
    的 PostgreSQL 特定形式，确保返回类型为 [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    而不是普通的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")，除非显式传递了
    `type_`。'
- en: '[PRE265]'
  id: totrans-1157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: A synonym for the ARRAY-level [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method. See that method for details.
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法的 ARRAY 级别的同义词。有关详细信息，请参见该方法。
- en: '[PRE266]'
  id: totrans-1159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: A synonym for the ARRAY-level [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method. See that method for details.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法的 ARRAY 级别的同义词。有关详细信息，请参见该方法。
- en: '[PRE267]'
  id: totrans-1161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Construct an hstore value within a SQL expression using the PostgreSQL `hstore()`
    function.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL `hstore()` 函数在 SQL 表达式中构造 hstore 值。
- en: The [`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore.hstore")
    function accepts one or two arguments as described in the PostgreSQL documentation.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore.hstore")
    函数接受一个或两个参数，如 PostgreSQL 文档所述。'
- en: 'E.g.:'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE268]'
  id: totrans-1165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: See also
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
    - the PostgreSQL `HSTORE` datatype.'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
    - PostgreSQL 的 `HSTORE` 数据类型。'
- en: '**Members**'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.dialects.postgresql.hstore.inherit_cache), [type](#sqlalchemy.dialects.postgresql.hstore.type)'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.dialects.postgresql.hstore.inherit_cache), [type](#sqlalchemy.dialects.postgresql.hstore.type)'
- en: '**Class signature**'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.hstore`](#sqlalchemy.dialects.postgresql.hstore
    "sqlalchemy.dialects.postgresql.hstore") ([`sqlalchemy.sql.functions.GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.hstore`](#sqlalchemy.dialects.postgresql.hstore
    "sqlalchemy.dialects.postgresql.hstore") ([`sqlalchemy.sql.functions.GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE269]'
  id: totrans-1172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") 实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性无关且不是其超类的属性，则可以在特定类上将此标志设置为 `True`，如果与对象对应的 SQL 不基于这些属性而变化。
- en: See also
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](../core/compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL
    结构的 [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE270]'
  id: totrans-1178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: alias of [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 别名[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
- en: '[PRE271]'
  id: totrans-1180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: The PostgreSQL `to_tsvector` SQL function.
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL `to_tsvector` SQL 函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR").
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将自动将 REGCONFIG 参数转换为使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用返回类型[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector") will be used automatically when
    invoking `sqlalchemy.func.to_tsvector()`, ensuring the correct argument and return
    type handlers are used at compile and execution time.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已导入 PostgreSQL 方言，可以通过调用`from sqlalchemy.dialects import postgresql`或使用`create_engine("postgresql...")`创建
    PostgreSQL 引擎，当调用`sqlalchemy.func.to_tsvector()`时，将自动使用[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新功能。
- en: '**Class signature**'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector")（`sqlalchemy.dialects.postgresql.ext._regconfig_fn`）的别名
- en: '[PRE272]'
  id: totrans-1187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: The PostgreSQL `to_tsquery` SQL function.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL `to_tsquery` SQL 函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将自动将 REGCONFIG 参数转换为使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用返回类型[`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery") will be used automatically when invoking
    `sqlalchemy.func.to_tsquery()`, ensuring the correct argument and return type
    handlers are used at compile and execution time.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已导入 PostgreSQL 方言，可以通过调用`from sqlalchemy.dialects import postgresql`或使用`create_engine("postgresql...")`创建
    PostgreSQL 引擎，当调用`sqlalchemy.func.to_tsquery()`时，将自动使用[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新功能。
- en: '**Class signature**'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery")（`sqlalchemy.dialects.postgresql.ext._regconfig_fn`）的别名
- en: '[PRE273]'
  id: totrans-1194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: The PostgreSQL `plainto_tsquery` SQL function.
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL `plainto_tsquery` SQL 函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将自动将 REGCONFIG 参数转换为使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用返回类型[`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery") will be used automatically when
    invoking `sqlalchemy.func.plainto_tsquery()`, ensuring the correct argument and
    return type handlers are used at compile and execution time.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了 PostgreSQL 方言，可以通过调用 `from sqlalchemy.dialects import postgresql` 或者使用
    `create_engine("postgresql...")` 创建 PostgreSQL 引擎来实现，当调用 `sqlalchemy.func.plainto_tsquery()`
    时将自动使用 [`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新内容。
- en: '**Class signature**'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE274]'
  id: totrans-1201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: The PostgreSQL `phraseto_tsquery` SQL function.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL `phraseto_tsquery` SQL 函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将自动将 REGCONFIG 参数转换为 [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") 数据类型，并应用返回类型 [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery") will be used automatically
    when invoking `sqlalchemy.func.phraseto_tsquery()`, ensuring the correct argument
    and return type handlers are used at compile and execution time.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了 PostgreSQL 方言，可以通过调用 `from sqlalchemy.dialects import postgresql` 或者使用
    `create_engine("postgresql...")` 创建 PostgreSQL 引擎来实现，当调用 `sqlalchemy.func.phraseto_tsquery()`
    时将自动使用 [`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新内容。
- en: '**Class signature**'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE275]'
  id: totrans-1208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: The PostgreSQL `websearch_to_tsquery` SQL function.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL `websearch_to_tsquery` SQL 函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将自动将 REGCONFIG 参数转换为 [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") 数据类型，并应用返回类型 [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery") will be used automatically
    when invoking `sqlalchemy.func.websearch_to_tsquery()`, ensuring the correct argument
    and return type handlers are used at compile and execution time.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了 PostgreSQL 方言，可以通过调用 `from sqlalchemy.dialects import postgresql` 或者使用
    `create_engine("postgresql...")` 创建 PostgreSQL 引擎来实现，当调用 `sqlalchemy.func.websearch_to_tsquery()`
    时将自动使用 [`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新内容。
- en: '**Class signature**'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE276]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: The PostgreSQL `ts_headline` SQL function.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`ts_headline` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT").
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数自动将REGCONFIG参数转换为使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用[`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")的返回类型。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline") will be used automatically when
    invoking `sqlalchemy.func.ts_headline()`, ensuring the correct argument and return
    type handlers are used at compile and execution time.
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已导入PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`或使用`create_engine("postgresql...")`创建PostgreSQL引擎，当调用`sqlalchemy.func.ts_headline()`时，[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline")将自动使用，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.0rc1中的新功能。
- en: '**Class signature**'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline")（`sqlalchemy.dialects.postgresql.ext._regconfig_fn`）
- en: PostgreSQL Constraint Types
  id: totrans-1222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL约束类型
- en: 'SQLAlchemy supports PostgreSQL EXCLUDE constraints via the [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") class:'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通过[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")类支持PostgreSQL EXCLUDE约束：
- en: '| Object Name | Description |'
  id: totrans-1224
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1225
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ExcludeConstraint](#sqlalchemy.dialects.postgresql.ExcludeConstraint) |
    A table-level EXCLUDE constraint. |'
  id: totrans-1226
  prefs: []
  type: TYPE_TB
  zh: '| [ExcludeConstraint](#sqlalchemy.dialects.postgresql.ExcludeConstraint) |
    表级EXCLUDE约束。 |'
- en: '[PRE277]'
  id: totrans-1227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: A table-level EXCLUDE constraint.
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 表级EXCLUDE约束。
- en: Defines an EXCLUDE constraint as described in the [PostgreSQL documentation](https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE).
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了在[PostgreSQL文档](https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE)中描述的EXCLUDE约束。
- en: '**Members**'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__)'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__)'
- en: '**Class signature**'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](../core/constraints.html#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")（[`sqlalchemy.schema.ColumnCollectionConstraint`](../core/constraints.html#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")）
- en: '[PRE278]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: Create an [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") object.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")对象。
- en: 'E.g.:'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE279]'
  id: totrans-1237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'The constraint is normally embedded into the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct directly, or added later using [`append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint"):'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 约束通常直接嵌入到[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造中，或者稍后使用[`append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")添加：
- en: '[PRE280]'
  id: totrans-1239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: The exclude constraint defined in this example requires the `btree_gist` extension,
    that can be created using the command `CREATE EXTENSION btree_gist;`.
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中定义的排除约束需要`btree_gist`扩展，可以使用命令`CREATE EXTENSION btree_gist;`创建。
- en: 'Parameters:'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*elements` –'
  id: totrans-1242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*elements` –'
- en: A sequence of two tuples of the form `(column, operator)` where “column” is
    either a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object, or a SQL expression element (e.g. `func.int8range(table.from, table.to)`)
    or the name of a column as string, and “operator” is a string containing the operator
    to use (e.g. “&&” or “=”).
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个由两个形式为 `(column, operator)` 的元组序列，其中“column”可以是一个 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，或者一个 SQL 表达式元素（例如 `func.int8range(table.from, table.to)`），或者作为字符串的列名，“operator”是包含要使用的操作符的字符串（例如“&&”或“=”）。
- en: In order to specify a column name when a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object is not available, while ensuring that any necessary
    quoting rules take effect, an ad-hoc [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object should be used. The `column` may also
    be a string SQL expression when passed as [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") or [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在没有 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象可用时指定列名，并确保任何必要的引号规则生效，应使用临时的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 或 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 对象。当作为 [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 或 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 传递时，`column` 也可以是字符串 SQL 表达式。
- en: '`name` – Optional, the in-database name of this constraint.'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，此约束的数据库中名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，当为此约束发出 DDL 时，发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，当为此约束发出 DDL 时，发出 INITIALLY <value>。'
- en: '`using` – Optional string. If set, emit USING <index_method>when issuing DDL
    for this constraint. Defaults to ‘gist’.</index_method>'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`using` – 可选字符串。如果设置，当为此约束发出 DDL 时，发出 USING <index_method>。默认为‘gist’。'
- en: '`where` –'
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where` –'
- en: Optional SQL expression construct or literal SQL string. If set, emit WHERE
    <predicate> when issuing DDL for this constraint.
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 SQL 表达式构造或文字 SQL 字符串。如果设置，当为此约束发出 DDL 时，发出 WHERE <predicate>。
- en: Warning
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: The [`ExcludeConstraint.where`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.where
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") argument to [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") can be passed as a Python
    string argument, which will be treated as **trusted SQL text** and rendered as
    given. **DO NOT PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ExcludeConstraint.where`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.where
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 参数可以作为 Python 字符串参数传递给 [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")，它将被视为**受信任的 SQL 文本**并按照给定的方式呈现。**不要将不受信任的输入传递给此参数**。'
- en: '`ops` –'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ops` –'
- en: Optional dictionary. Used to define operator classes for the elements; works
    the same way as that of the [postgresql_ops](#postgresql-operator-classes) parameter
    specified to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字典。用于为元素定义操作符类；与指定给 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的 [postgresql_ops](#postgresql-operator-classes)
    参数的工作方式相同。
- en: New in version 1.3.21.
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.3.21 中的新功能。
- en: See also
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Operator Classes](#postgresql-operator-classes) - general description of how
    PostgreSQL operator classes are specified.'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[操作符类](#postgresql-operator-classes) - PostgreSQL 操作符类如何指定的一般描述。'
- en: 'For example:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE281]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: PostgreSQL DML Constructs
  id: totrans-1260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL DML 构造
- en: '| Object Name | Description |'
  id: totrans-1261
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1262
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [insert](#sqlalchemy.dialects.postgresql.insert)(table) | Construct a PostgreSQL-specific
    variant [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    construct. |'
  id: totrans-1263
  prefs: []
  type: TYPE_TB
  zh: '| [insert](#sqlalchemy.dialects.postgresql.insert)(table) | 构造一个 PostgreSQL
    特定变体的 [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    构造。 |'
- en: '| [Insert](#sqlalchemy.dialects.postgresql.Insert) | PostgreSQL-specific implementation
    of INSERT. |'
  id: totrans-1264
  prefs: []
  type: TYPE_TB
  zh: '| [Insert](#sqlalchemy.dialects.postgresql.Insert) | INSERT 的 PostgreSQL 特定实现。
    |'
- en: '[PRE282]'
  id: totrans-1265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Construct a PostgreSQL-specific variant [`Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个特定于 PostgreSQL 的变体[`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    构造。
- en: The [`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") function creates a [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert"). This class is based on the dialect-agnostic
    [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which may be constructed using the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") function in SQLAlchemy Core.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") 函数创建一个 [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")。此类基于方言不可知的 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造，可以使用 SQLAlchemy Core 中的 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 函数构造。'
- en: The [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    construct includes additional methods [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update"), [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing").
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    构造包括额外的方法 [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update"), [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing")。'
- en: '[PRE283]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: PostgreSQL-specific implementation of INSERT.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT 的 PostgreSQL 特定实现。
- en: Adds methods for PG-specific syntaxes such as ON CONFLICT.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了用于 PG 特定语法的方法，如 ON CONFLICT。
- en: The [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    object is created using the [`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") function.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") 函数创建 [`Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 对象。
- en: '**Members**'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[excluded](#sqlalchemy.dialects.postgresql.Insert.excluded), [inherit_cache](#sqlalchemy.dialects.postgresql.Insert.inherit_cache),
    [on_conflict_do_nothing()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing),
    [on_conflict_do_update()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update)'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '[excluded](#sqlalchemy.dialects.postgresql.Insert.excluded), [inherit_cache](#sqlalchemy.dialects.postgresql.Insert.inherit_cache),
    [on_conflict_do_nothing()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing),
    [on_conflict_do_update()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update)'
- en: '**Class signature**'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
- en: '[PRE284]'
  id: totrans-1277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Provide the `excluded` namespace for an ON CONFLICT statement
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 为 ON CONFLICT 语句提供 `excluded` 命名空间
- en: PG’s ON CONFLICT clause allows reference to the row that would be inserted,
    known as `excluded`. This attribute provides all columns in this row to be referenceable.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: PG 的 ON CONFLICT 子句允许引用将要插入的行，称为 `excluded`。此属性提供了此行中的所有列可供引用。
- en: Tip
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded "sqlalchemy.dialects.postgresql.Insert.excluded")
    attribute is an instance of [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides an interface the
    same as that of the [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c") collection described at [Accessing Tables and Columns](../core/metadata.html#metadata-tables-and-columns).
    With this collection, ordinary names are accessible like attributes (e.g. `stmt.excluded.some_column`),
    but special names and dictionary method names should be accessed using indexed
    access, such as `stmt.excluded["column name"]` or `stmt.excluded["values"]`. See
    the docstring for [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further examples.
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded "sqlalchemy.dialects.postgresql.Insert.excluded")属性是[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")的一个实例，提供了与[访问表和列](../core/metadata.html#metadata-tables-and-columns)中描述的[`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c")集合相同的接口。通过这个集合，普通名称可以像属性一样访问（例如`stmt.excluded.some_column`），但特殊名称和字典方法名称应该使用索引访问，如`stmt.excluded["column
    name"]`或`stmt.excluded["values"]`。请参阅[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")的文档字符串以获取更多示例。'
- en: See also
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict) - example of
    how to use `Insert.excluded`'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON CONFLICT（Upsert）](#postgresql-insert-on-conflict) - 如何使用`Insert.excluded`的示例'
- en: '[PRE285]'
  id: totrans-1284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的SQL不基于本类的局部属性而是基于其超类，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](../core/compiler.html#compilerext-caching) - 为第三方或用户定义的SQL结构设置[`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指导方针。'
- en: '[PRE286]'
  id: totrans-1290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Specifies a DO NOTHING action for ON CONFLICT clause.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 指定ON CONFLICT子句的DO NOTHING操作。
- en: The `constraint` and `index_elements` arguments are optional, but only one of
    these can be specified.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '`constraint`和`index_elements`参数是可选的，但只能指定其中之一。'
- en: 'Parameters:'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`constraint` – The name of a unique or exclusion constraint on the table, or
    the constraint object itself if it has a .name attribute.'
  id: totrans-1294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint` – 表上唯一或排除约束的名称，或者如果具有`.name`属性，则是约束对象本身。'
- en: '`index_elements` – A sequence consisting of string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, or other column expression objects that will
    be used to infer a target index.'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_elements` – 由字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象或其他列表达式对象组成的序列，用于推断目标索引。'
- en: '`index_where` – Additional WHERE criterion that can be used to infer a conditional
    target index.'
  id: totrans-1296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_where` – 可用于推断条件目标索引的附加WHERE条件。'
- en: See also
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict)'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON CONFLICT（Upsert）](#postgresql-insert-on-conflict)'
- en: '[PRE287]'
  id: totrans-1299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: Specifies a DO UPDATE SET action for ON CONFLICT clause.
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 指定ON CONFLICT子句的DO UPDATE SET操作。
- en: Either the `constraint` or `index_elements` argument is required, but only one
    of these can be specified.
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: '`constraint`或`index_elements`参数中的一个是必需的，但只能指定其中之一。'
- en: 'Parameters:'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`constraint` – The name of a unique or exclusion constraint on the table, or
    the constraint object itself if it has a .name attribute.'
  id: totrans-1303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint` – 表上唯一或排除约束的名称，或者如果它有 .name 属性，则是约束对象本身。'
- en: '`index_elements` – A sequence consisting of string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, or other column expression objects that will
    be used to infer a target index.'
  id: totrans-1304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_elements` – 由字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或其他列表达式对象组成的序列，将用于推断目标索引。'
- en: '`index_where` – Additional WHERE criterion that can be used to infer a conditional
    target index.'
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_where` – 可以用于推断条件目标索引的附加 WHERE 条件。'
- en: '`set_` –'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_` –'
- en: A dictionary or other mapping object where the keys are either names of columns
    in the target table, or [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or other ORM-mapped columns matching that
    of the target table, and expressions or literals as values, specifying the `SET`
    actions to take.
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典或其他映射对象，其中键要么是目标表中的列名，要么是与目标表匹配的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或其他 ORM 映射的列，并且表达式或文字作为值，指定要执行的 `SET` 操作。
- en: 'New in version 1.4: The [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter supports
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects from the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as keys.'
  id: totrans-1308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新内容：[`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数支持来自目标 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象作为键。
- en: Warning
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: This dictionary does **not** take into account Python-specified default UPDATE
    values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON CONFLICT
    style of UPDATE, unless they are manually specified in the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") dictionary.
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此字典**不会**考虑 Python 指定的默认 UPDATE 值或生成函数，例如那些使用 [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。这些值在执行 ON CONFLICT 风格的 UPDATE 时将不会被使用，除非它们在 [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 字典中手动指定。
- en: '`where` – Optional argument. If present, can be a literal SQL string or an
    acceptable expression for a `WHERE` clause that restricts the rows affected by
    `DO UPDATE SET`. Rows not meeting the `WHERE` condition will not be updated (effectively
    a `DO NOTHING` for those rows).'
  id: totrans-1311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where` – 可选参数。如果存在，则可以是文字 SQL 字符串或可接受的 `WHERE` 子句表达式，用于限制受 `DO UPDATE SET`
    影响的行。不符合 `WHERE` 条件的行将不会被更新（实际上对于这些行是 `DO NOTHING`）。'
- en: See also
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict)'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '[插入…在冲突时执行（Upsert）](#postgresql-insert-on-conflict)'
- en: '## psycopg2'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: '## psycopg2'
- en: Support for the PostgreSQL database via the psycopg2 driver.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 psycopg2 驱动程序支持 PostgreSQL 数据库。
- en: DBAPI
  id: totrans-1316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg2 is available
    at: [https://pypi.org/project/psycopg2/](https://pypi.org/project/psycopg2/)'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 的文档和下载信息（如果适用）可在以下网址获取：[https://pypi.org/project/psycopg2/](https://pypi.org/project/psycopg2/)
- en: Connecting
  id: totrans-1318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE288]'
  id: totrans-1320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '### psycopg2 Connect Arguments'
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: '### psycopg2 连接参数'
- en: 'Keyword arguments that are specific to the SQLAlchemy psycopg2 dialect may
    be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), and include the following:'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的特定于 SQLAlchemy psycopg2 方言的关键字参数包括以下内容：
- en: '`isolation_level`: This option, available for all PostgreSQL dialects, includes
    the `AUTOCOMMIT` isolation level when using the psycopg2 dialect. This option
    sets the **default** isolation level for the connection that is set immediately
    upon connection to the database before the connection is pooled. This option is
    generally superseded by the more modern [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option, detailed at
    [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).'
  id: totrans-1323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level`: 对于所有 PostgreSQL 方言都可用的选项，当使用 psycopg2 方言时，包括了 `AUTOCOMMIT`
    隔离级别。此选项在连接到数据库时立即设置连接的**默认**隔离级别，然后连接被池化。这个选项通常被更现代的 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 执行选项所取代，详见 [设置事务隔离级别，包括 DBAPI
    自动提交](../core/connections.html#dbapi-autocommit)。'
- en: See also
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 事务隔离级别](#psycopg2-isolation-level)'
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)'
- en: '`client_encoding`: sets the client encoding in a libpq-agnostic way, using
    psycopg2’s `set_client_encoding()` method.'
  id: totrans-1327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_encoding`: 使用 psycopg2 的 `set_client_encoding()` 方法以 libpq 无关的方式设置客户端编码。'
- en: See also
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Unicode with Psycopg2](#psycopg2-unicode)'
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 中的 Unicode](#psycopg2-unicode)'
- en: '`executemany_mode`, `executemany_batch_page_size`, `executemany_values_page_size`:
    Allows use of psycopg2 extensions for optimizing “executemany”-style queries.
    See the referenced section below for details.'
  id: totrans-1330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany_mode`, `executemany_batch_page_size`, `executemany_values_page_size`:
    允许使用 psycopg2 扩展来优化“executemany”风格的查询。有关详细信息，请参阅下面引用的部分。'
- en: See also
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Psycopg2 Fast Execution Helpers](#psycopg2-executemany-mode)'
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 快速执行助手](#psycopg2-executemany-mode)'
- en: Tip
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The above keyword arguments are **dialect** keyword arguments, meaning that
    they are passed as explicit keyword arguments to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '上述关键字参数是**方言**关键字参数，意味着它们作为显式关键字参数传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
- en: '[PRE289]'
  id: totrans-1335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'These should not be confused with **DBAPI** connect arguments, which are passed
    as part of the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary and/or are passed in the URL query string,
    as detailed in the section [Custom DBAPI connect() arguments / on-connect routines](../core/engines.html#custom-dbapi-args).  ###
    SSL Connections'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: '这些不应与**DBAPI**连接参数混淆，后者作为 [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典的一部分传递，或者作为 URL 查询字符串传递，详见 [自定义 DBAPI connect()
    参数 / 连接时例程](../core/engines.html#custom-dbapi-args) 部分。  ### SSL 连接'
- en: The psycopg2 module has a connection argument named `sslmode` for controlling
    its behavior regarding secure (SSL) connections. The default is `sslmode=prefer`;
    it will attempt an SSL connection and if that fails it will fall back to an unencrypted
    connection. `sslmode=require` may be used to ensure that only secure connections
    are established. Consult the psycopg2 / libpq documentation for further options
    that are available.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 模块有一个名为 `sslmode` 的连接参数，用于控制其关于安全（SSL）连接的行为。默认值是 `sslmode=prefer`；它会尝试建立
    SSL 连接，如果失败，则回退到未加密连接。`sslmode=require` 可用于确保仅建立安全连接。请参阅 psycopg2 / libpq 文档以获取更多可用选项。
- en: 'Note that `sslmode` is specific to psycopg2 so it is included in the connection
    URI:'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`sslmode` 是特定于 psycopg2 的，因此它包含在连接 URI 中：
- en: '[PRE290]'
  id: totrans-1339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Unix Domain Connections
  id: totrans-1340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unix 域连接
- en: 'psycopg2 supports connecting via Unix domain connections. When the `host` portion
    of the URL is omitted, SQLAlchemy passes `None` to psycopg2, which specifies Unix-domain
    communication rather than TCP/IP communication:'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 支持通过 Unix 域连接进行连接。当 URL 的 `host` 部分被省略时，SQLAlchemy 会将 `None` 传递给 psycopg2，这指定了与
    TCP/IP 通信相反的 Unix 域通信：
- en: '[PRE291]'
  id: totrans-1342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'By default, the socket file used is to connect to a Unix-domain socket in `/tmp`,
    or whatever socket directory was specified when PostgreSQL was built. This value
    can be overridden by passing a pathname to psycopg2, using `host` as an additional
    keyword argument:'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用于连接到 Unix 域套接字的套接字文件是 `/tmp` 中的 Unix 域套接字，或者在构建 PostgreSQL 时指定的套接字目录。可以通过向
    psycopg2 传递路径名，并将 `host` 作为附加关键字参数来覆盖此值：
- en: '[PRE292]'
  id: totrans-1344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: Warning
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The format accepted here allows for a hostname in the main URL in addition
    to the “host” query string argument. **When using this URL format, the initial
    host is silently ignored**. That is, this URL:'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 此处接受的格式允许在主URL中还有一个主机名，除了“host”查询字符串参数之外。**在使用此URL格式时，初始主机将被悄悄地忽略**。也就是说，此URL：
- en: '[PRE293]'
  id: totrans-1347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: Above, the hostname `myhost1` is **silently ignored and discarded.** The host
    which is connected is the `myhost2` host.
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，主机名`myhost1`被**悄悄地忽略和丢弃**了。连接的主机是`myhost2`主机。
- en: This is to maintain some degree of compatibility with PostgreSQL’s own URL format
    which has been tested to behave the same way and for which tools like PifPaf hardcode
    two hostnames.
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了保持与PostgreSQL自己的URL格式的一定程度的兼容性，后者已经测试过可以以相同的方式运行，并且像PifPaf这样的工具会将两个主机名硬编码。
- en: See also
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PQconnectdbParams](https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS)'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: '[PQconnectdbParams](https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS)'
- en: '### Specifying multiple fallback hosts'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '### 指定多个备用主机'
- en: 'psycopg2 supports multiple connection points in the connection string. When
    the `host` parameter is used multiple times in the query section of the URL, SQLAlchemy
    will create a single string of the host and port information provided to make
    the connections. Tokens may consist of `host::port` or just `host`; in the latter
    case, the default port is selected by libpq. In the example below, three host
    connections are specified, for `HostA::PortA`, `HostB` connecting to the default
    port, and `HostC::PortC`:'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2支持在连接字符串中指定多个连接点。当在URL的查询部分中多次使用`host`参数时，SQLAlchemy将创建一个包含提供的主机和端口信息的单个字符串以进行连接。令牌可以包含`host::port`或仅包含`host`；在后一种情况下，libpq将选择默认端口。在下面的示例中，指定了三个主机连接，分别为`HostA::PortA`、连接到默认端口的`HostB`和`HostC::PortC`：
- en: '[PRE294]'
  id: totrans-1354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: 'As an alternative, libpq query string format also may be used; this specifies
    `host` and `port` as single query string arguments with comma-separated lists
    - the default port can be chosen by indicating an empty value in the comma separated
    list:'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方案，也可以使用libpq查询字符串格式；这使用单个查询字符串参数指定`host`和`port`，其中逗号分隔的列表 - 可以通过在逗号分隔的列表中指定空值来选择默认端口：
- en: '[PRE295]'
  id: totrans-1356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: With either URL style, connections to each host is attempted based on a configurable
    strategy, which may be configured using the libpq `target_session_attrs` parameter.
    Per libpq this defaults to `any` which indicates a connection to each host is
    then attempted until a connection is successful. Other strategies include `primary`,
    `prefer-standby`, etc. The complete list is documented by PostgreSQL at [libpq
    connection strings](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何一种URL样式，根据可配置的策略尝试对每个主机进行连接，该策略可以使用libpq `target_session_attrs`参数进行配置。根据libpq，默认为`any`，表示然后尝试连接到每个主机，直到连接成功。其他策略包括`primary`、`prefer-standby`等。完整列表由PostgreSQL在[libpq连接字符串](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)中记录。
- en: 'For example, to indicate two hosts using the `primary` strategy:'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用`primary`策略指示两个主机：
- en: '[PRE296]'
  id: totrans-1359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'Changed in version 1.4.40: Port specification in psycopg2 multiple host format
    is repaired, previously ports were not correctly interpreted in this context.
    libpq comma-separated format is also now supported.'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4.40版本开始更改：psycopg2多主机格式中的端口规范已修复，先前在此上下文中未正确解释端口。现在还支持libpq逗号分隔格式。
- en: 'New in version 1.3.20: Support for multiple hosts in PostgreSQL connection
    string.'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.20版本新增功能：支持在PostgreSQL连接字符串中指定多个主机。
- en: See also
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[libpq connection strings](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
    - please refer to this section in the libpq documentation for complete background
    on multiple host support.'
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: '[libpq连接字符串](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
    - 请参考libpq文档中关于多主机支持的完整背景信息。'
- en: Empty DSN Connections / Environment Variable Connections
  id: totrans-1364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空DSN连接 / 环境变量连接
- en: The psycopg2 DBAPI can connect to PostgreSQL by passing an empty DSN to the
    libpq client library, which by default indicates to connect to a localhost PostgreSQL
    database that is open for “trust” connections. This behavior can be further tailored
    using a particular set of environment variables which are prefixed with `PG_...`,
    which are consumed by `libpq` to take the place of any or all elements of the
    connection string.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 DBAPI可以通过向libpq客户端库传递空DSN来连接到PostgreSQL，默认情况下表示连接到一个开放了“trust”连接的本地主机PostgreSQL数据库。可以使用一组特定的以`PG_...`为前缀的环境变量来进一步调整此行为，这些环境变量由`libpq`消耗，以取代连接字符串的任何或所有元素。
- en: 'For this form, the URL can be passed without any elements other than the initial
    scheme:'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种形式，URL可以在没有初始方案之外的任何元素的情况下传递：
- en: '[PRE297]'
  id: totrans-1367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: In the above form, a blank “dsn” string is passed to the `psycopg2.connect()`
    function which in turn represents an empty DSN passed to libpq.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述形式中，一个空的“dsn”字符串被传递给`psycopg2.connect()`函数，这代表了传递给libpq的空DSN。
- en: 'New in version 1.3.2: support for parameter-less connections with psycopg2.'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.3.2中：支持使用psycopg2进行无参数连接。
- en: See also
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Environment Variables](https://www.postgresql.org/docs/current/libpq-envars.html)
    - PostgreSQL documentation on how to use `PG_...` environment variables for connections.'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '[环境变量](https://www.postgresql.org/docs/current/libpq-envars.html) - PostgreSQL文档介绍如何使用`PG_...`环境变量进行连接。'
- en: '### Per-Statement/Connection Execution Options'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '### 每个语句/连接执行选项'
- en: 'The following DBAPI-specific options are respected when used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), [`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options"), in addition to those not specific to
    DBAPIs:'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 当与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")、[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")、[`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")一起使用时，以下DBAPI特定选项将被尊重，除了那些不特定于DBAPI的选项：
- en: '`isolation_level` - Set the transaction isolation level for the lifespan of
    a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (can only be set on a connection, not a statement or query). See [Psycopg2 Transaction
    Isolation Level](#psycopg2-isolation-level).'
  id: totrans-1374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` - 为[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的生命周期设置事务隔离级别（只能在连接上设置，而不能在语句或查询上设置）。请参阅[Psycopg2事务隔离级别](#psycopg2-isolation-level)。'
- en: '`stream_results` - Enable or disable usage of psycopg2 server side cursors
    - this feature makes use of “named” cursors in combination with special result
    handling methods so that result rows are not fully buffered. Defaults to False,
    meaning cursors are buffered by default.'
  id: totrans-1375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stream_results` - 启用或禁用psycopg2服务器端游标的使用 - 此功能结合了“命名”游标和特殊结果处理方法，以便结果行不被完全缓冲。默认为False，意味着游标默认情况下是被缓冲的。'
- en: '`max_row_buffer` - when using `stream_results`, an integer value that specifies
    the maximum number of rows to buffer at a time. This is interpreted by the `BufferedRowCursorResult`,
    and if omitted the buffer will grow to ultimately store 1000 rows at a time.'
  id: totrans-1376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_row_buffer` - 在使用`stream_results`时，一个整数值，指定一次最大缓冲的行数。这由`BufferedRowCursorResult`解释，如果省略，缓冲区将最终增长到一次存储1000行。'
- en: 'Changed in version 1.4: The `max_row_buffer` size can now be greater than 1000,
    and the buffer will grow to that size.  ### Psycopg2 Fast Execution Helpers'
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '从版本1.4开始：`max_row_buffer`大小现在可以大于1000，并且缓冲区将增长到该大小。  ### Psycopg2快速执行助手'
- en: Modern versions of psycopg2 include a feature known as [Fast Execution Helpers](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    , which have been shown in benchmarking to improve psycopg2’s executemany() performance,
    primarily with INSERT statements, by at least an order of magnitude.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 现代版本的psycopg2包括一个名为[快速执行助手](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)，在基准测试中已经显示出可以将psycopg2的executemany()性能提升至少一个数量级，主要是对INSERT语句的改进。
- en: SQLAlchemy implements a native form of the “insert many values” handler that
    will rewrite a single-row INSERT statement to accommodate for many values at once
    within an extended VALUES clause; this handler is equivalent to psycopg2’s `execute_values()`
    handler; an overview of this feature and its configuration are at [“Insert Many
    Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues).
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy实现了一种本地形式的“插入多个值”处理程序，它将重写单行INSERT语句，以适应在扩展VALUES子句中一次插入多个值；这个处理程序等同于psycopg2的`execute_values()`处理程序；关于此功能及其配置的概述在[INSERT语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)。
- en: 'New in version 2.0: Replaced psycopg2’s `execute_values()` fast execution helper
    with a native SQLAlchemy mechanism known as [insertmanyvalues](../core/connections.html#engine-insertmanyvalues).'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能：使用称为[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)的本机SQLAlchemy机制替换了psycopg2的`execute_values()`快速执行助手。
- en: 'The psycopg2 dialect retains the ability to use the psycopg2-specific `execute_batch()`
    feature, although it is not expected that this is a widely used feature. The use
    of this extension may be enabled using the `executemany_mode` flag which may be
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"):'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言保留了使用psycopg2特定的`execute_batch()`功能的能力，尽管预计这不是一个广泛使用的功能。可以使用传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的`executemany_mode`标志来启用此扩展：
- en: '[PRE298]'
  id: totrans-1382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'Possible options for `executemany_mode` include:'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: '`executemany_mode`的可能选项包括：'
- en: '`values_only` - this is the default value. SQLAlchemy’s native [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    handler is used for qualifying INSERT statements, assuming [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") is left at its default value of `True`. This handler
    rewrites simple INSERT statements to include multiple VALUES clauses so that many
    parameter sets can be inserted with one statement.'
  id: totrans-1384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values_only` - 默认值。假设[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")保持默认值`True`，SQLAlchemy的本地[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)处理程序用于为合格的INSERT语句添加参数，该处理程序将简单的INSERT语句重写为包含多个VALUES子句，以便一次插入多个参数集合的语句。'
- en: '`''values_plus_batch''`- SQLAlchemy’s native [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    handler is used for qualifying INSERT statements, assuming [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") is left at its default value of `True`. Then, psycopg2’s
    `execute_batch()` handler is used for qualifying UPDATE and DELETE statements
    when executed with multiple parameter sets. When using this mode, the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute will not contain a value
    for executemany-style executions against UPDATE and DELETE statements.'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''values_plus_batch''`- 默认值。假设[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")保持默认值`True`，SQLAlchemy的本地[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)处理程序用于为合格的INSERT语句添加参数，然后，当使用多个参数集合执行UPDATE和DELETE语句时，将使用psycopg2的`execute_batch()`处理程序进行合格处理。使用此模式时，对UPDATE和DELETE语句执行的executemany样式执行将不会包含[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")属性的值。'
- en: 'Changed in version 2.0: Removed the `''batch''` and `''None''` options from
    psycopg2 `executemany_mode`. Control over batching for INSERT statements is now
    configured via the [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") engine-level parameter.'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本更改：从psycopg2的`executemany_mode`中删除了`'batch'`和`'None'`选项。现在，对于INSERT语句的批处理控制是通过[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")引擎级参数配置的。
- en: The term “qualifying statements” refers to the statement being executed being
    a Core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct, and **not** a plain textual SQL string or one constructed using [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"). It also may **not** be a special “extension”
    statement such as an “ON CONFLICT” “upsert” statement. When using the ORM, all
    insert/update/delete statements used by the ORM flush process are qualifying.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: “合格语句”一词指正在执行的语句是核心[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造，并且**不是**普通的文本SQL字符串或使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的语句。它也可能**不是**特殊的“扩展”语句，如“ON CONFLICT”“upsert”语句。使用ORM时，ORM刷新过程中使用的所有插入/更新/删除语句都是合格的。
- en: The “page size” for the psycopg2 “batch” strategy can be affected by using the
    `executemany_batch_page_size` parameter, which defaults to 100.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2“批量”策略的“页面大小”可以通过使用`executemany_batch_page_size`参数来影响，默认为100。
- en: 'For the “insertmanyvalues” feature, the page size can be controlled using the
    [`create_engine.insertmanyvalues_page_size`](../core/engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter, which defaults to 1000\. An example of
    modifying both parameters is below:'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“insertmanyvalues”功能，可以使用[`create_engine.insertmanyvalues_page_size`](../core/engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine")参数来控制页面大小，默认为1000。下面是修改两个参数的示例：
- en: '[PRE299]'
  id: totrans-1390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: See also
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    - background on “insertmanyvalues”'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT 语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues) - “插入多个值”的背景'
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - General information on using the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object to execute statements in such a way as
    to make use of the DBAPI `.executemany()` method.  ### Unicode with Psycopg2'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 使用[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象执行语句的一般信息，以便利用DBAPI的`.executemany()`方法。###
    使用 Psycopg2 进行 Unicode'
- en: The psycopg2 DBAPI driver supports Unicode data transparently.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 DBAPI 驱动程序支持透明的 Unicode 数据。
- en: 'The client character encoding can be controlled for the psycopg2 dialect in
    the following ways:'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式控制psycopg2方言的客户端字符编码：
- en: 'For PostgreSQL 9.1 and above, the `client_encoding` parameter may be passed
    in the database URL; this parameter is consumed by the underlying `libpq` PostgreSQL
    client library:'
  id: totrans-1396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 PostgreSQL 9.1 及以上版本，`client_encoding`参数可以在数据库 URL 中传递；此参数由底层的`libpq` PostgreSQL
    客户端库使用：
- en: '[PRE300]'
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Alternatively, the above `client_encoding` value may be passed using [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") for programmatic establishment with `libpq`:'
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，上述`client_encoding`值可以通过[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")传递给`libpq`进行编程建立连接：
- en: '[PRE301]'
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: 'For all PostgreSQL versions, psycopg2 supports a client-side encoding value
    that will be passed to database connections when they are first established. The
    SQLAlchemy psycopg2 dialect supports this using the `client_encoding` parameter
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"):'
  id: totrans-1400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有 PostgreSQL 版本，psycopg2 支持在首次建立数据库连接时传递的客户端端编码值。SQLAlchemy psycopg2 方言支持使用传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的`client_encoding`参数：
- en: '[PRE302]'
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Tip
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The above `client_encoding` parameter admittedly is very similar in appearance
    to usage of the parameter within the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary; the difference above is that the parameter
    is consumed by psycopg2 and is passed to the database connection using `SET client_encoding
    TO 'utf8'`; in the previously mentioned style, the parameter is instead passed
    through psycopg2 and consumed by the `libpq` library.
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述`client_encoding`参数在外观上与在[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典中使用参数的方式非常相似；上述区别在于参数由psycopg2消耗，并使用`SET client_encoding
    TO 'utf8'`将其传递给数据库连接；在先前提到的样式中，参数通过psycopg2传递并由`libpq`库消耗。
- en: 'A common way to set up client encoding with PostgreSQL databases is to ensure
    it is configured within the server-side postgresql.conf file; this is the recommended
    way to set encoding for a server that is consistently of one encoding in all databases:'
  id: totrans-1404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 数据库中设置客户端编码的常见方法是确保在服务器端的 postgresql.conf 文件中进行配置；这是为所有数据库一致使用一种编码设置编码的推荐方式：
- en: '[PRE303]'
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Transactions
  id: totrans-1406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事务
- en: The psycopg2 dialect fully supports SAVEPOINT and two-phase commit operations.
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 方言完全支持 SAVEPOINT 和两阶段提交操作。
- en: '### Psycopg2 Transaction Isolation Level'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: '### Psycopg2 事务隔离级别'
- en: As discussed in [Transaction Isolation Level](#postgresql-isolation-level),
    all PostgreSQL dialects support setting of transaction isolation level both via
    the `isolation_level` parameter passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") , as well as the `isolation_level` argument used by
    [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). When using the psycopg2 dialect
    , these options make use of psycopg2’s `set_isolation_level()` connection method,
    rather than emitting a PostgreSQL directive; this is because psycopg2’s API-level
    setting is always emitted at the start of each transaction in any case.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [事务隔离级别](#postgresql-isolation-level) 中所讨论的，所有 PostgreSQL 方言都支持通过传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的 `isolation_level` 参数设置事务隔离级别，以及 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 使用的 `isolation_level` 参数。在使用
    psycopg2 方言时，这些选项利用了 psycopg2 的 `set_isolation_level()` 连接方法，而不是发出 PostgreSQL
    指令；这是因为无论如何，在每个事务开始时，psycopg2 的 API 级设置始终会被发出。
- en: 'The psycopg2 dialect supports these constants for isolation level:'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 方言支持这些隔离级别的常量：
- en: '`READ COMMITTED`'
  id: totrans-1411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-1412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-1413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-1414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-1415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '[pg8000 Transaction Isolation Level](#pg8000-isolation-level)'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: '[pg8000 事务隔离级别](#pg8000-isolation-level)'
- en: NOTICE logging
  id: totrans-1419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意日志记录
- en: 'The psycopg2 dialect will log PostgreSQL NOTICE messages via the `sqlalchemy.dialects.postgresql`
    logger. When this logger is set to the `logging.INFO` level, notice messages will
    be logged:'
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 方言将通过 `sqlalchemy.dialects.postgresql` 记录 PostgreSQL NOTICE 消息。当此记录器设置为
    `logging.INFO` 级别时，将记录注意消息：
- en: '[PRE304]'
  id: totrans-1421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: 'Above, it is assumed that logging is configured externally. If this is not
    the case, configuration such as `logging.basicConfig()` must be utilized:'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 上面假定日志记录已在外部配置。如果不是这种情况，必须使用类似于 `logging.basicConfig()` 的配置：
- en: '[PRE305]'
  id: totrans-1423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: See also
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Logging HOWTO](https://docs.python.org/3/howto/logging.html) - on the python.org
    website'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '[日志指南](https://docs.python.org/3/howto/logging.html) - 在 python.org 网站上'
- en: '### HSTORE type'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '### HSTORE 类型'
- en: 'The `psycopg2` DBAPI includes an extension to natively handle marshalling of
    the HSTORE type. The SQLAlchemy psycopg2 dialect will enable this extension by
    default when psycopg2 version 2.4 or greater is used, and it is detected that
    the target database has the HSTORE type set up for use. In other words, when the
    dialect makes the first connection, a sequence like the following is performed:'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg2` DBAPI 包括一个扩展来原生处理 HSTORE 类型的编组。当使用 psycopg2 版本 2.4 或更高版本，并且检测到目标数据库设置了
    HSTORE 类型以供使用时，SQLAlchemy psycopg2 方言将默认启用此扩展。换句话说，当方言建立第一个连接时，会执行以下序列：'
- en: Request the available HSTORE oids using `psycopg2.extras.HstoreAdapter.get_oids()`.
    If this function returns a list of HSTORE identifiers, we then determine that
    the `HSTORE` extension is present. This function is **skipped** if the version
    of psycopg2 installed is less than version 2.4.
  id: totrans-1428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `psycopg2.extras.HstoreAdapter.get_oids()` 请求可用的 HSTORE oids。如果此函数返回一个 HSTORE
    标识符列表，则我们确定 `HSTORE` 扩展已存在。如果安装的 psycopg2 版本低于 2.4，则将跳过此函数。
- en: If the `use_native_hstore` flag is at its default of `True`, and we’ve detected
    that `HSTORE` oids are available, the `psycopg2.extensions.register_hstore()`
    extension is invoked for all connections.
  id: totrans-1429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `use_native_hstore` 标志处于其默认值 `True`，并且我们已经检测到 `HSTORE` oids 可用，那么对于所有连接，将调用
    `psycopg2.extensions.register_hstore()` 扩展。
- en: 'The `register_hstore()` extension has the effect of **all Python dictionaries
    being accepted as parameters regardless of the type of target column in SQL**.
    The dictionaries are converted by this extension into a textual HSTORE expression.
    If this behavior is not desired, disable the use of the hstore extension by setting
    `use_native_hstore` to `False` as follows:'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_hstore()` 扩展的效果是 **所有 Python 字典都被接受为参数，而不管 SQL 中目标列的类型是什么**。这些字典由此扩展转换为文本
    HSTORE 表达式。如果不希望这种行为，可以通过将 `use_native_hstore` 设置为 `False` 来禁用 hstore 扩展：'
- en: '[PRE306]'
  id: totrans-1431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: 'The `HSTORE` type is **still supported** when the `psycopg2.extensions.register_hstore()`
    extension is not used. It merely means that the coercion between Python dictionaries
    and the HSTORE string format, on both the parameter side and the result side,
    will take place within SQLAlchemy’s own marshalling logic, and not that of `psycopg2`
    which may be more performant.  ## psycopg'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: '当未使用`psycopg2.extensions.register_hstore()`扩展时，`HSTORE`类型**仍然受支持**。 这意味着 SQLAlchemy
    自身的编组逻辑将在参数端和结果端都发生 Python 字典与 HSTORE 字符串格式之间的强制转换，并不是`psycopg2`的逻辑，后者可能性能更好。  ##
    psycopg'
- en: Support for the PostgreSQL database via the psycopg (a.k.a. psycopg 3) driver.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 psycopg（又名 psycopg 3）驱动程序支持 PostgreSQL 数据库。
- en: DBAPI
  id: totrans-1434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg (a.k.a.
    psycopg 3) is available at: [https://pypi.org/project/psycopg/](https://pypi.org/project/psycopg/)'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 psycopg（又名 psycopg 3）的文档和下载信息可在此处获取：[https://pypi.org/project/psycopg/](https://pypi.org/project/psycopg/)
- en: Connecting
  id: totrans-1436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE307]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '`psycopg` is the package and module name for version 3 of the `psycopg` database
    driver, formerly known as `psycopg2`. This driver is different enough from its
    `psycopg2` predecessor that SQLAlchemy supports it via a totally separate dialect;
    support for `psycopg2` is expected to remain for as long as that package continues
    to function for modern Python versions, and also remains the default dialect for
    the `postgresql://` dialect series.'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg` 是版本 3 的 `psycopg` 数据库驱动程序的包和模块名称，以前称为 `psycopg2`。 这个驱动程序与其`psycopg2`前身有足够的不同，以至于
    SQLAlchemy 通过完全不同的方言支持它；预计只要该软件包继续为现代 Python 版本提供支持，并且仍然是`postgresql://`方言系列的默认方言，就会继续支持`psycopg2`。'
- en: 'The SQLAlchemy `psycopg` dialect provides both a sync and an async implementation
    under the same dialect name. The proper version is selected depending on how the
    engine is created:'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy `psycopg` 方言在同一方言名称下提供同步和异步实现。 根据引擎创建方式选择正确的版本：
- en: 'calling [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    with `postgresql+psycopg://...` will automatically select the sync version, e.g.:'
  id: totrans-1441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`postgresql+psycopg://...`调用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")将自动选择同步版本，例如：
- en: '[PRE308]'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'calling [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") with `postgresql+psycopg://...`
    will automatically select the async version, e.g.:'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`postgresql+psycopg://...`调用[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")将自动选择异步版本，例如：
- en: '[PRE309]'
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'The asyncio version of the dialect may also be specified explicitly using the
    `psycopg_async` suffix, as:'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 可以明确指定方言的 asyncio 版本，如下所示：
- en: '[PRE310]'
  id: totrans-1446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: See also
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[psycopg2](#postgresql-psycopg2) - The SQLAlchemy `psycopg` dialect shares
    most of its behavior with the `psycopg2` dialect. Further documentation is available
    there.'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: '[psycopg2](#postgresql-psycopg2) - SQLAlchemy `psycopg` 方言与 `psycopg2` 方言大部分行为相同。
    更多文档请参阅此处。'
- en: Using a different Cursor class
  id: totrans-1449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用不同的 Cursor 类
- en: 'One of the differences between `psycopg` and the older `psycopg2` is how bound
    parameters are handled: `psycopg2` would bind them client side, while `psycopg`
    by default will bind them server side.'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg`和旧版本`psycopg2`之间的一个区别是如何处理绑定参数：`psycopg2`会在客户端绑定它们，而`psycopg`默认情况下会在服务器端绑定它们。'
- en: 'It’s possible to configure `psycopg` to do client side binding by specifying
    the `cursor_factory` to be `ClientCursor` when creating the engine:'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在创建引擎时指定`cursor_factory`为`ClientCursor`来配置`psycopg`以执行客户端绑定：
- en: '[PRE311]'
  id: totrans-1452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: 'Similarly when using an async engine the `AsyncClientCursor` can be specified:'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，使用异步引擎时，可以指定`AsyncClientCursor`：
- en: '[PRE312]'
  id: totrans-1454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: See also
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Client-side-binding cursors](https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors)  ##
    pg8000'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: '[客户端绑定游标](https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors)  ##
    pg8000'
- en: Support for the PostgreSQL database via the pg8000 driver.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 pg8000 驱动程序支持 PostgreSQL 数据库。
- en: DBAPI
  id: totrans-1458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for pg8000 is available
    at: [https://pypi.org/project/pg8000/](https://pypi.org/project/pg8000/)'
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 pg8000 的文档和下载信息（如果适用）可在此处获取：[https://pypi.org/project/pg8000/](https://pypi.org/project/pg8000/)
- en: Connecting
  id: totrans-1460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE313]'
  id: totrans-1462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'Changed in version 1.4: The pg8000 dialect has been updated for version 1.16.6
    and higher, and is again part of SQLAlchemy’s continuous integration with full
    feature support.'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的更改：pg8000方言已更新至1.16.6及更高版本，并再次成为SQLAlchemy与完整功能支持的持续集成的一部分。
- en: '### Unicode'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: '### Unicode'
- en: 'pg8000 will encode / decode string values between it and the server using the
    PostgreSQL `client_encoding` parameter; by default this is the value in the `postgresql.conf`
    file, which often defaults to `SQL_ASCII`. Typically, this can be changed to `utf-8`,
    as a more useful default:'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000将使用PostgreSQL的`client_encoding`参数在其与服务器之间对字符串值进行编码/解码；默认情况下，这是`postgresql.conf`文件中的值，通常默认为`SQL_ASCII`。通常可以将其更改为`utf-8`，作为更有用的默认值：
- en: '[PRE314]'
  id: totrans-1466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: 'The `client_encoding` can be overridden for a session by executing the SQL:'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: '`client_encoding`可以通过执行以下SQL语句在会话中被覆盖：'
- en: SET CLIENT_ENCODING TO ‘utf8’;
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: SET CLIENT_ENCODING TO ‘utf8’;
- en: 'SQLAlchemy will execute this SQL on all new connections based on the value
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    using the `client_encoding` parameter:'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy将根据传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的值在所有新连接上执行此SQL，使用`client_encoding`参数：
- en: '[PRE315]  ### SSL Connections'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE315]  ### SSL连接'
- en: 'pg8000 accepts a Python `SSLContext` object which may be specified using the
    [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary:'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000接受可以使用[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典指定的Python `SSLContext`对象：
- en: '[PRE316]'
  id: totrans-1472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'If the server uses an automatically-generated certificate that is self-signed
    or does not match the host name (as seen from the client), it may also be necessary
    to disable hostname checking:'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用自动生成的自签名证书或与主机名不匹配（从客户端看），可能还需要禁用主机名检查：
- en: '[PRE317]  ### pg8000 Transaction Isolation Level'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE317]  ### pg8000事务隔离级别'
- en: 'The pg8000 dialect offers the same isolation level settings as that of the
    [psycopg2](#psycopg2-isolation-level) dialect:'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000方言提供与[psycopg2](#psycopg2-isolation-level)方言相同的隔离级别设置：
- en: '`READ COMMITTED`'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-1478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)  ## asyncpg'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: '[Psycopg2事务隔离级别](#psycopg2-isolation-level)  ## asyncpg'
- en: Support for the PostgreSQL database via the asyncpg driver.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 通过asyncpg驱动程序支持PostgreSQL数据库。
- en: DBAPI
  id: totrans-1485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for asyncpg is available
    at: [https://magicstack.github.io/asyncpg/](https://magicstack.github.io/asyncpg/)'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg的文档和下载信息（如果适用）可在以下网址找到：[https://magicstack.github.io/asyncpg/](https://magicstack.github.io/asyncpg/)
- en: Connecting
  id: totrans-1487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE318]'
  id: totrans-1489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: The asyncpg dialect is SQLAlchemy’s first Python asyncio dialect.
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg方言是SQLAlchemy的第一个Python asyncio方言。
- en: Using a special asyncio mediation layer, the asyncpg dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的asyncio中介层，asyncpg方言可用作[SQLAlchemy asyncio](../orm/extensions/asyncio.html)扩展包的后端。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function:'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常仅应与[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数一起使用：
- en: '[PRE319]'
  id: totrans-1493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: New in version 1.4.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: Note
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By default asyncpg does not decode the `json` and `jsonb` types and returns
    them as strings. SQLAlchemy sets default type decoder for `json` and `jsonb` types
    using the python builtin `json.loads` function. The json implementation used can
    be changed by setting the attribute `json_deserializer` when creating the engine
    with `create_engine()` or `create_async_engine()`.
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，asyncpg不解码`json`和`jsonb`类型，并将它们作为字符串返回。SQLAlchemy使用内置的`json.loads`函数为`json`和`jsonb`类型设置默认类型解码器。可以通过在使用`create_engine()`或`create_async_engine()`创建引擎时设置`json_deserializer`属性来更改所使用的json实现。
- en: '### Multihost Connections'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多主机连接'
- en: 'The asyncpg dialect features support for multiple fallback hosts in the same
    way as that of the psycopg2 and psycopg dialects. The syntax is the same, using
    `host=<host>:<port>` combinations as additional query string arguments; however,
    there is no default port, so all hosts must have a complete port number present,
    otherwise an exception is raised:'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncpg` 方言支持多个备用主机，与 `psycopg2` 和 `psycopg` 方言的方式相同。 语法相同，使用 `host=<host>:<port>`
    组合作为额外的查询字符串参数；然而，没有默认端口，因此所有主机必须具有完整的端口号，否则将引发异常：'
- en: '[PRE320]'
  id: totrans-1499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: For complete background on this syntax, see [Specifying multiple fallback hosts](#psycopg2-multi-host).
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此语法的完整背景，请参阅 [指定多个备用主机](#psycopg2-multi-host)。
- en: New in version 2.0.18.
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.18 中的新功能。
- en: See also
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Specifying multiple fallback hosts](#psycopg2-multi-host)  ### Prepared Statement
    Cache'
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: '[指定多个备用主机](#psycopg2-multi-host)  ### 准备语句缓存'
- en: 'The asyncpg SQLAlchemy dialect makes use of `asyncpg.connection.prepare()`
    for all statements. The prepared statement objects are cached after construction
    which appears to grant a 10% or more performance improvement for statement invocation.
    The cache is on a per-DBAPI connection basis, which means that the primary storage
    for prepared statements is within DBAPI connections pooled within the connection
    pool. The size of this cache defaults to 100 statements per DBAPI connection and
    may be adjusted using the `prepared_statement_cache_size` DBAPI argument (note
    that while this argument is implemented by SQLAlchemy, it is part of the DBAPI
    emulation portion of the asyncpg dialect, therefore is handled as a DBAPI argument,
    not a dialect argument):'
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncpg` SQLAlchemy 方言对所有语句使用 `asyncpg.connection.prepare()`。 准备的语句对象在构造后被缓存，这似乎为语句调用提供了
    10% 或更多的性能改进。 缓存是基于每个 DBAPI 连接的，这意味着准备语句的主要存储在连接池中的 DBAPI 连接内。 此缓存的大小默认为每个 DBAPI
    连接 100 个语句，并且可以使用 `prepared_statement_cache_size` DBAPI 参数进行调整（请注意，虽然 SQLAlchemy
    实现了此参数，但它是 `asyncpg` 方言的 DBAPI 模拟部分的一部分，因此将其处理为 DBAPI 参数，而不是方言参数）：'
- en: '[PRE321]'
  id: totrans-1505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'To disable the prepared statement cache, use a value of zero:'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用准备语句缓存，请使用零值：
- en: '[PRE322]'
  id: totrans-1507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: 'New in version 1.4.0b2: Added `prepared_statement_cache_size` for asyncpg.'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能：为 `asyncpg` 添加了 `prepared_statement_cache_size`。
- en: Warning
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `asyncpg` database driver necessarily uses caches for PostgreSQL type OIDs,
    which become stale when custom PostgreSQL datatypes such as `ENUM` objects are
    changed via DDL operations. Additionally, prepared statements themselves which
    are optionally cached by SQLAlchemy’s driver as described above may also become
    “stale” when DDL has been emitted to the PostgreSQL database which modifies the
    tables or other objects involved in a particular prepared statement.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncpg` 数据库驱动程序必须使用 PostgreSQL 类型 OID 的缓存，在通过 DDL 操作更改自定义 PostgreSQL 数据类型（如
    `ENUM` 对象）时会变得过时。 此外，如上所述，由 SQLAlchemy 驱动程序可选缓存的准备语句本身在发出修改特定准备语句涉及的表或其他对象的 DDL
    到 PostgreSQL 数据库时也可能变得“过时”。'
- en: 'The SQLAlchemy asyncpg dialect will invalidate these caches within its local
    process when statements that represent DDL are emitted on a local connection,
    but this is only controllable within a single Python process / database engine.
    If DDL changes are made from other database engines and/or processes, a running
    application may encounter asyncpg exceptions `InvalidCachedStatementError` and/or
    `InternalServerError("cache lookup failed for type <oid>")` if it refers to pooled
    database connections which operated upon the previous structures. The SQLAlchemy
    asyncpg dialect will recover from these error cases when the driver raises these
    exceptions by clearing its internal caches as well as those of the asyncpg driver
    in response to them, but cannot prevent them from being raised in the first place
    if the cached prepared statement or asyncpg type caches have gone stale, nor can
    it retry the statement as the PostgreSQL transaction is invalidated when these
    errors occur.  ### Prepared Statement Name with PGBouncer'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 'SQLAlchemy 的 `asyncpg` 方言在本地进程中发出代表 DDL 的语句时将使这些缓存失效，但这仅在单个 Python 进程/数据库引擎中可控。
    如果从其他数据库引擎和/或进程进行 DDL 更改，则正在运行的应用程序可能会遇到 `InvalidCachedStatementError` 和/或 `InternalServerError("cache
    lookup failed for type <oid>")` 异常，如果它引用了之前的结构上操作的池化数据库连接。 SQLAlchemy 的 `asyncpg`
    方言将在驱动程序引发这些异常时通过清除其内部缓存以及响应它们的 `asyncpg` 驱动程序的缓存来从这些错误情况中恢复，但如果缓存的准备语句或 `asyncpg`
    类型缓存已过时，则无法防止它们首次引发，也无法在发生这些错误时重试语句，因为当这些错误发生时，PostgreSQL 事务将无效。  ### 使用 PGBouncer
    的准备语句名称'
- en: 'By default, asyncpg enumerates prepared statements in numeric order, which
    can lead to errors if a name has already been taken for another prepared statement.
    This issue can arise if your application uses database proxies such as PgBouncer
    to handle connections. One possible workaround is to use dynamic prepared statement
    names, which asyncpg now supports through an optional `name` value for the statement
    name. This allows you to generate your own unique names that won’t conflict with
    existing ones. To achieve this, you can provide a function that will be called
    every time a prepared statement is prepared:'
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，asyncpg 按数字顺序枚举预处理语句，如果名称已被另一个预处理语句占用，则可能导致错误。如果您的应用程序使用数据库代理（如 PgBouncer）来处理连接，则可能会出现此问题。一个可能的解决方法是使用动态预处理语句名称，asyncpg
    现在通过语句名称的可选 `name` 值支持此功能。这允许您生成自己的唯一名称，不会与现有名称冲突。为此，您可以提供一个函数，每次准备预处理语句时都会调用该函数：
- en: '[PRE323]'
  id: totrans-1513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: See also
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://github.com/MagicStack/asyncpg/issues/837](https://github.com/MagicStack/asyncpg/issues/837)'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MagicStack/asyncpg/issues/837](https://github.com/MagicStack/asyncpg/issues/837)'
- en: '[https://github.com/sqlalchemy/sqlalchemy/issues/6467](https://github.com/sqlalchemy/sqlalchemy/issues/6467)'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/sqlalchemy/sqlalchemy/issues/6467](https://github.com/sqlalchemy/sqlalchemy/issues/6467)'
- en: Warning
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using PGBouncer, to prevent a buildup of useless prepared statements in
    your application, it’s important to use the [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") pool class, and to configure PgBouncer to use [DISCARD](https://www.postgresql.org/docs/current/sql-discard.html)
    when returning connections. The DISCARD command is used to release resources held
    by the db connection, including prepared statements. Without proper setup, prepared
    statements can accumulate quickly and cause performance issues.
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PGBouncer 时，为了防止应用程序中无用的预处理语句的积累，重要的是使用 [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") 池类，并配置 PgBouncer 在返回连接时使用 [DISCARD](https://www.postgresql.org/docs/current/sql-discard.html)。DISCARD
    命令用于释放由数据库连接持有的资源，包括预处理语句。如果没有正确设置，预处理语句可能会迅速积累并导致性能问题。
- en: Disabling the PostgreSQL JIT to improve ENUM datatype handling
  id: totrans-1519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用 PostgreSQL JIT 以改善 ENUM 数据类型处理
- en: 'Asyncpg has an [issue](https://github.com/MagicStack/asyncpg/issues/727) when
    using PostgreSQL ENUM datatypes, where upon the creation of new database connections,
    an expensive query may be emitted in order to retrieve metadata regarding custom
    types which has been shown to negatively affect performance. To mitigate this
    issue, the PostgreSQL “jit” setting may be disabled from the client using this
    setting passed to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"):'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL ENUM 数据类型时，asyncpg 存在一个 [问题](https://github.com/MagicStack/asyncpg/issues/727)，在创建新的数据库连接时，可能会发出一个昂贵的查询，以检索有关自定义类型的元数据，这已被证明对性能产生负面影响。为了缓解这个问题，可以通过传递给
    [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 的设置来禁用客户端的 PostgreSQL “jit” 设置：
- en: '[PRE324]'
  id: totrans-1521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: See also
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://github.com/MagicStack/asyncpg/issues/727](https://github.com/MagicStack/asyncpg/issues/727)  ##
    psycopg2cffi'
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MagicStack/asyncpg/issues/727](https://github.com/MagicStack/asyncpg/issues/727)  ##
    psycopg2cffi'
- en: Support for the PostgreSQL database via the psycopg2cffi driver.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 psycopg2cffi 驱动程序支持 PostgreSQL 数据库。
- en: DBAPI
  id: totrans-1525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg2cffi is
    available at: [https://pypi.org/project/psycopg2cffi/](https://pypi.org/project/psycopg2cffi/)'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2cffi 的文档和下载信息（如果适用）可在此处找到：[https://pypi.org/project/psycopg2cffi/](https://pypi.org/project/psycopg2cffi/)
- en: Connecting
  id: totrans-1527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE325]'
  id: totrans-1529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '`psycopg2cffi` is an adaptation of `psycopg2`, using CFFI for the C layer.
    This makes it suitable for use in e.g. PyPy. Documentation is as per `psycopg2`.'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg2cffi` 是 `psycopg2` 的改编版本，使用 CFFI 作为 C 层。这使得它适用于例如 PyPy 的使用。文档与 `psycopg2`
    相同。'
- en: See also
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.psycopg2`](#module-sqlalchemy.dialects.postgresql.psycopg2
    "sqlalchemy.dialects.postgresql.psycopg2")'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.psycopg2`](#module-sqlalchemy.dialects.postgresql.psycopg2
    "sqlalchemy.dialects.postgresql.psycopg2")'
- en: Support for the PostgreSQL database.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 对 PostgreSQL 数据库的支持。
- en: The following table summarizes current support levels for database release versions.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了当前数据库版本的支持级别。
- en: '**Supported PostgreSQL versions**'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持的 PostgreSQL 版本**'
- en: '| Support type | Versions |'
  id: totrans-1536
  prefs: []
  type: TYPE_TB
  zh: '| 支持类型 | 版本 |'
- en: '| --- | --- |'
  id: totrans-1537
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Fully tested in CI](index.html#term-Fully-tested-in-CI) | 12, 13, 14, 15
    |'
  id: totrans-1538
  prefs: []
  type: TYPE_TB
  zh: '| [完全在 CI 中测试](index.html#term-Fully-tested-in-CI) | 12, 13, 14, 15 |'
- en: '| [Normal support](index.html#term-Normal-support) | 9.6+ |'
  id: totrans-1539
  prefs: []
  type: TYPE_TB
  zh: '| [Normal support](index.html#term-Normal-support) | 9.6+ |'
- en: '| [Best effort](index.html#term-Best-effort) | 9+ |'
  id: totrans-1540
  prefs: []
  type: TYPE_TB
  zh: '| [Best effort](index.html#term-Best-effort) | 9+ |'
- en: DBAPI Support
  id: totrans-1541
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DBAPI支持
- en: The following dialect/DBAPI options are available. Please refer to individual
    DBAPI sections for connect information.
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方言/DBAPI选项可用。请参阅各个DBAPI部分以获取连接信息。
- en: '[psycopg2](#module-sqlalchemy.dialects.postgresql.psycopg2)'
  id: totrans-1543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg2](#module-sqlalchemy.dialects.postgresql.psycopg2)'
- en: '[psycopg (a.k.a. psycopg 3)](#module-sqlalchemy.dialects.postgresql.psycopg)'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg（又名psycopg 3）](#module-sqlalchemy.dialects.postgresql.psycopg)'
- en: '[pg8000](#module-sqlalchemy.dialects.postgresql.pg8000)'
  id: totrans-1545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pg8000](#module-sqlalchemy.dialects.postgresql.pg8000)'
- en: '[asyncpg](#module-sqlalchemy.dialects.postgresql.asyncpg)'
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncpg](#module-sqlalchemy.dialects.postgresql.asyncpg)'
- en: '[psycopg2cffi](#module-sqlalchemy.dialects.postgresql.psycopg2cffi)'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg2cffi](#module-sqlalchemy.dialects.postgresql.psycopg2cffi)'
- en: '## Sequences/SERIAL/IDENTITY'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: '## 序列/SERIAL/IDENTITY'
- en: PostgreSQL supports sequences, and SQLAlchemy uses these as the default means
    of creating new primary key values for integer-based primary key columns. When
    creating tables, SQLAlchemy will issue the `SERIAL` datatype for integer-based
    primary key columns, which generates a sequence and server side default corresponding
    to the column.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL支持序列，并且SQLAlchemy将其作为创建基于整数的主键列的新主键值的默认方式。在创建表时，SQLAlchemy会为整数型主键列发出`SERIAL`数据类型，这会生成一个序列和对应于该列的服务器端默认值。
- en: 'To specify a specific named sequence to be used for primary key generation,
    use the [`Sequence()`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct:'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定用于主键生成的特定命名序列，请使用[`Sequence()`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")构造：
- en: '[PRE326]'
  id: totrans-1551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: When SQLAlchemy issues a single INSERT statement, to fulfill the contract of
    having the “last insert identifier” available, a RETURNING clause is added to
    the INSERT statement which specifies the primary key columns should be returned
    after the statement completes. The RETURNING functionality only takes place if
    PostgreSQL 8.2 or later is in use. As a fallback approach, the sequence, whether
    specified explicitly or implicitly via `SERIAL`, is executed independently beforehand,
    the returned value to be used in the subsequent insert. Note that when an [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct is executed using “executemany”
    semantics, the “last inserted identifier” functionality does not apply; no RETURNING
    clause is emitted nor is the sequence pre-executed in this case.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 当SQLAlchemy发出单个INSERT语句以满足“最后插入标识符”可用的合同时，将在INSERT语句中添加一个RETURNING子句，该子句指定在语句完成后应返回主键列。仅当使用PostgreSQL
    8.2或更高版本时，才会使用RETURNING功能。作为备用方法，不管是显式指定还是隐式通过`SERIAL`指定，序列都会提前独立执行，返回的值将用于后续插入。请注意，当使用“executemany”语义执行[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造时，“最后插入的标识符”功能不适用；在这种情况下，不会发出RETURNING子句，也不会预先执行序列。
- en: PostgreSQL 10 and above IDENTITY columns
  id: totrans-1553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL 10及以上的IDENTITY列
- en: 'PostgreSQL 10 and above have a new IDENTITY feature that supersedes the use
    of SERIAL. The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    can be used to control its behavior:'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 10及以上版本具有新的IDENTITY功能，取代了SERIAL的使用。在[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")中的[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造可用于控制其行为：
- en: '[PRE327]'
  id: totrans-1555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: 'The CREATE TABLE for the above [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object would be:'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 以上[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的CREATE
    TABLE将是：
- en: '[PRE328]'
  id: totrans-1557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'Changed in version 1.4: Added [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to specify the option of an autoincrementing column.'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：在[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")中添加[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造以指定自增列的选项。
- en: Note
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Previous versions of SQLAlchemy did not have built-in support for rendering
    of IDENTITY, and could use the following compilation hook to replace occurrences
    of SERIAL with IDENTITY:'
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的SQLAlchemy版本不具有内置的IDENTITY呈现支持，并且可以使用以下编译钩子来将SERIAL的出现替换为IDENTITY：
- en: '[PRE329]'
  id: totrans-1561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'Using the above, a table such as:'
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以上内容，类似以下的表：
- en: '[PRE330]'
  id: totrans-1563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Will generate on the backing database as:'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端数据库上将生成：
- en: '[PRE331]'
  id: totrans-1565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: PostgreSQL 10 and above IDENTITY columns
  id: totrans-1566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL 10及以上版本的IDENTITY列
- en: 'PostgreSQL 10 and above have a new IDENTITY feature that supersedes the use
    of SERIAL. The [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    can be used to control its behavior:'
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 10及以上版本具有一个新的IDENTITY功能，取代了SERIAL的使用。在[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")中的[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造可以用来控制其行为：
- en: '[PRE332]'
  id: totrans-1568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'The CREATE TABLE for the above [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object would be:'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的CREATE
    TABLE将是：
- en: '[PRE333]'
  id: totrans-1570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'Changed in version 1.4: Added [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct in a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to specify the option of an autoincrementing column.'
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：在[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")中添加了[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")构造，以指定自动递增列的选项。
- en: Note
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Previous versions of SQLAlchemy did not have built-in support for rendering
    of IDENTITY, and could use the following compilation hook to replace occurrences
    of SERIAL with IDENTITY:'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的旧版本没有内置支持IDENTITY的渲染，可以使用以下编译钩子来将SERIAL替换为IDENTITY：
- en: '[PRE334]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'Using the above, a table such as:'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述内容，一个表如下：
- en: '[PRE335]'
  id: totrans-1576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'Will generate on the backing database as:'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端数据库上生成如下内容：
- en: '[PRE336]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '## Server Side Cursors'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: '## 服务器端游标'
- en: Server-side cursor support is available for the psycopg2, asyncpg dialects and
    may also be available in others.
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2、asyncpg方言支持服务器端游标，并且可能也适用于其他方言。
- en: 'Server side cursors are enabled on a per-statement basis by using the [`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") connection execution option:'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`Connection.execution_options.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")连接执行选项，可以在每个语句基础上启用服务器端游标：
- en: '[PRE337]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Note that some kinds of SQL statements may not be supported with server side
    cursors; generally, only SQL statements that return rows should be used with this
    option.
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些类型的SQL语句可能不支持服务器端游标；通常，只有返回行的SQL语句应与此选项一起使用。
- en: 'Deprecated since version 1.4: The dialect-level server_side_cursors flag is
    deprecated and will be removed in a future release. Please use the [`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection") execution option for unbuffered cursor support.'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：dialect级别的server_side_cursors标志已弃用，并将在将来的版本中删除。请使用[`Connection.stream_results`](../core/connections.html#sqlalchemy.engine.Connection.params.stream_results
    "sqlalchemy.engine.Connection")执行选项以支持无缓冲游标。
- en: See also
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../core/connections.html#engine-stream-results)'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（也称为流式结果）](../core/connections.html#engine-stream-results)'
- en: '## Transaction Isolation Level'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: '## 事务隔离级别'
- en: Most SQLAlchemy dialects support setting of transaction isolation level using
    the [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter at the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") level, and at the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") level via the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SQLAlchemy方言支持使用[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")级别和在[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")级别通过[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数设置事务隔离级别。
- en: For PostgreSQL dialects, this feature works either by making use of the DBAPI-specific
    features, such as psycopg2’s isolation level flags which will embed the isolation
    level setting inline with the `"BEGIN"` statement, or for DBAPIs with no direct
    support by emitting `SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL
    <level>` ahead of the `"BEGIN"` statement emitted by the DBAPI. For the special
    AUTOCOMMIT isolation level, DBAPI-specific techniques are used which is typically
    an `.autocommit` flag on the DBAPI connection object.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PostgreSQL方言，此功能通过利用DBAPI特定功能实现，例如psycopg2的隔离级别标志，该标志将隔离级别设置嵌入到与`"BEGIN"`语句一起发出的语句中，或者对于没有直接支持的DBAPI，通过在DBAPI发出的`"BEGIN"`语句之前发出`SET
    SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL <level>`来实现。对于特殊的AUTOCOMMIT隔离级别，使用DBAPI特定的技术，通常是DBAPI连接对象上的`.autocommit`标志。
- en: 'To set isolation level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")设置隔离级别：
- en: '[PRE338]'
  id: totrans-1591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'To set using per-connection execution options:'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用每个连接的执行选项设置：
- en: '[PRE339]'
  id: totrans-1593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: There are also more options for isolation level configurations, such as “sub-engine”
    objects linked to a main [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which each apply different isolation level settings.
    See the discussion at [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)
    for background.
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多关于隔离级别配置的选项，例如与主[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联的“子引擎”对象，每个对象应用不同的隔离级别设置。有关背景信息，请参阅[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)中的讨论。
- en: 'Valid values for `isolation_level` on most PostgreSQL dialects include:'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数PostgreSQL方言的`isolation_level`的有效值包括：
- en: '`READ COMMITTED`'
  id: totrans-1596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-1598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-1599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-1600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)'
- en: '[Setting READ ONLY / DEFERRABLE](#postgresql-readonly-deferrable)'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置只读 / 可延迟](#postgresql-readonly-deferrable)'
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: '[Psycopg2事务隔离级别](#psycopg2-isolation-level)'
- en: '[pg8000 Transaction Isolation Level](#pg8000-isolation-level)'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: '[pg8000事务隔离级别](#pg8000-isolation-level)'
- en: '## Setting READ ONLY / DEFERRABLE'
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: '## 设置只读 / 可延迟'
- en: 'Most PostgreSQL dialects support setting the “READ ONLY” and “DEFERRABLE” characteristics
    of the transaction, which is in addition to the isolation level setting. These
    two attributes can be established either in conjunction with or independently
    of the isolation level by passing the `postgresql_readonly` and `postgresql_deferrable`
    flags with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). The example below illustrates
    passing the `"SERIALIZABLE"` isolation level at the same time as setting “READ
    ONLY” and “DEFERRABLE”:'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数PostgreSQL方言支持设置事务的“只读”和“可延迟”特性，这是隔离级别设置的补充。这两个属性可以通过使用[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")传递`postgresql_readonly`和`postgresql_deferrable`标志来同时或独立地建立。下面的示例演示了同时设置“只读”和“可延迟”以及设置“SERIALIZABLE”隔离级别：
- en: '[PRE340]'
  id: totrans-1608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Note that some DBAPIs such as asyncpg only support “readonly” with SERIALIZABLE
    isolation.
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些DBAPI（如asyncpg）仅支持“只读”与SERIALIZABLE隔离。
- en: 'New in version 1.4: added support for the `postgresql_readonly` and `postgresql_deferrable`
    execution options.'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中：增加了对`postgresql_readonly`和`postgresql_deferrable`执行选项的支持。
- en: '## Temporary Table / Resource Reset for Connection Pooling'
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: '## 用于连接池的临时表 / 资源重置'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    connection pool implementation used by the SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object includes [reset on return](../core/pooling.html#pool-reset-on-return)
    behavior that will invoke the DBAPI `.rollback()` method when connections are
    returned to the pool. While this rollback will clear out the immediate state used
    by the previous transaction, it does not cover a wider range of session-level
    state, including temporary tables as well as other server state such as prepared
    statement handles and statement caches. The PostgreSQL database includes a variety
    of commands which may be used to reset this state, including `DISCARD`, `RESET`,
    `DEALLOCATE`, and `UNLISTEN`.
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象使用的 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    连接池实现包括在连接返回到池时调用 DBAPI 的 `.rollback()` 方法的 [reset on return](../core/pooling.html#pool-reset-on-return)
    行为。虽然这个回滚会清除前一个事务使用的即时状态，但它不涵盖更广泛的会话级状态，包括临时表以及其他服务器状态，如预备声明句柄和语句缓存。PostgreSQL
    数据库包括各种命令，可用于重置此状态，包括 `DISCARD`、`RESET`、`DEALLOCATE` 和 `UNLISTEN`。
- en: To install one or more of these commands as the means of performing reset-on-return,
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used, as demonstrated
    in the example below. The implementation will end transactions in progress as
    well as discard temporary tables using the `CLOSE`, `RESET` and `DISCARD` commands;
    see the PostgreSQL documentation for background on what each of these statements
    do.
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其中一个或多个命令安装为执行返回时的重置手段，可以使用 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子，如下面的示例所示。该实现将结束进行中的事务，并使用 `CLOSE`、`RESET`
    和 `DISCARD` 命令丢弃临时表；有关每个语句的背景，请参阅 PostgreSQL 文档。
- en: 'The [`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.pool_reset_on_return`](../core/engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 参数设置为 `None`，以便自定义方案可以完全替换默认行为。自定义钩子实现在任何情况下都调用 `.rollback()`，因为通常重要的是
    DBAPI 自身的提交/回滚跟踪将与事务的状态保持一致：'
- en: '[PRE341]'
  id: totrans-1615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.0b3 起更改：为 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件添加了额外的状态参数，并确保事件对所有“重置”事件都会被调用，因此它适用于自定义“重置”处理程序的位置。之前使用
    [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 处理程序的方案仍然可用。
- en: See also
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](../core/pooling.html#pool-reset-on-return) - in the [Connection
    Pooling](../core/pooling.html) documentation'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回时重置](../core/pooling.html#pool-reset-on-return) - 在[连接池](../core/pooling.html)文档中'
- en: '## Setting Alternate Search Paths on Connect'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '## 在连接时设置备用搜索路径'
- en: 'The PostgreSQL `search_path` variable refers to the list of schema names that
    will be implicitly referenced when a particular table or other object is referenced
    in a SQL statement. As detailed in the next section [Remote-Schema Table Introspection
    and PostgreSQL search_path](#postgresql-schema-reflection), SQLAlchemy is generally
    organized around the concept of keeping this variable at its default value of
    `public`, however, in order to have it set to any arbitrary name or names when
    connections are used automatically, the “SET SESSION search_path” command may
    be invoked for all connections in a pool using the following event handler, as
    discussed at [Setting a Default Schema for New Connections](../core/metadata.html#schema-set-default-connections):'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 `search_path` 变量是指在引用特定表或其他对象时将隐式引用的模式名称列表。如下一节[远程模式表内省和 PostgreSQL
    search_path](#postgresql-schema-reflection)所述，SQLAlchemy 通常以保持此变量处于其默认值`public`的状态为组织方式，但是，为了在自动使用连接时将其设置为任意名称或名称，可以使用以下事件处理程序为池中的所有连接调用“SET
    SESSION search_path”命令，如[设置新连接的默认模式](../core/metadata.html#schema-set-default-connections)所讨论的那样：
- en: '[PRE342]'
  id: totrans-1621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: The reason the recipe is complicated by use of the `.autocommit` DBAPI attribute
    is so that when the `SET SESSION search_path` directive is invoked, it is invoked
    outside of the scope of any transaction and therefore will not be reverted when
    the DBAPI connection has a rollback.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了 `.autocommit` DBAPI 属性，该命令的复杂之处在于当调用`SET SESSION search_path`指令时，它是在任何事务范围之外调用的，因此当
    DBAPI 连接回滚时不会被还原。
- en: See also
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting a Default Schema for New Connections](../core/metadata.html#schema-set-default-connections)
    - in the [Describing Databases with MetaData](../core/metadata.html) documentation'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置新连接的默认模式](../core/metadata.html#schema-set-default-connections) - 在 [用 MetaData
    描述数据库](../core/metadata.html) 文档中'
- en: '## Remote-Schema Table Introspection and PostgreSQL search_path'
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: '## 远程模式表内省和 PostgreSQL search_path'
- en: Section Best Practices Summarized
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践摘要部分
- en: keep the `search_path` variable set to its default of `public`, without any
    other schema names. Ensure the username used to connect **does not** match remote
    schemas, or ensure the `"$user"` token is **removed** from `search_path`. For
    other schema names, name these explicitly within [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") definitions. Alternatively, the `postgresql_ignore_search_path`
    option will cause all reflected [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects to have a [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema") attribute set up.
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 保持`search_path`变量设置为其默认值`public`，不带任何其他模式名称。确保用于连接的用户名**不与远程模式匹配**，或者确保从`search_path`中**移除**`"$user"`标记。对于其他模式名称，请在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")定义中明确命名这些。另外，`postgresql_ignore_search_path`选项将导致所有反映的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象设置一个[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.schema
    "sqlalchemy.schema.Table.schema")属性。
- en: The PostgreSQL dialect can reflect tables from any schema, as outlined in [Reflecting
    Tables from Other Schemas](../core/reflection.html#metadata-reflection-schemas).
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言可以反映来自任何模式的表，如 [从其他模式反射表](../core/reflection.html#metadata-reflection-schemas)
    中所述。
- en: 'In all cases, the first thing SQLAlchemy does when reflecting tables is to
    **determine the default schema for the current database connection**. It does
    this using the PostgreSQL `current_schema()` function, illustated below using
    a PostgreSQL client session (i.e. using the `psql` tool):'
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，SQLAlchemy 反射表时的第一件事是**确定当前数据库连接的默认模式**。它使用 PostgreSQL 的 `current_schema()`
    函数来执行此操作，下面使用 PostgreSQL 客户端会话（即使用 `psql` 工具）进行演示：
- en: '[PRE343]'
  id: totrans-1630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Above we see that on a plain install of PostgreSQL, the default schema name
    is the name `public`.
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，在普通安装的 PostgreSQL 上，默认模式名称是名称`public`。
- en: 'However, if your database username **matches the name of a schema**, PostgreSQL’s
    default is to then **use that name as the default schema**. Below, we log in using
    the username `scott`. When we create a schema named `scott`, **it implicitly changes
    the default schema**:'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的数据库用户名**与模式名称匹配**，PostgreSQL 的默认行为是**将该名称用作默认模式**。下面，我们使用用户名`scott`登录。当我们创建一个名为`scott`的模式时，**它会隐式地更改默认模式**：
- en: '[PRE344]'
  id: totrans-1633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: 'The behavior of `current_schema()` is derived from the [PostgreSQL search path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    variable `search_path`, which in modern PostgreSQL versions defaults to this:'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_schema()` 函数的行为源自 [PostgreSQL 搜索路径](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    变量 `search_path`，在现代 PostgreSQL 版本中，默认情况如下：'
- en: '[PRE345]'
  id: totrans-1635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Where above, the `"$user"` variable will inject the current username as the
    default schema, if one exists. Otherwise, `public` is used.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`"$user"` 变量将注入当前用户名作为默认模式，如果存在的话。否则，将使用 `public`。
- en: When a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object is reflected, if it is present in the schema indicated by the `current_schema()`
    function, **the schema name assigned to the “.schema” attribute of the Table is
    the Python “None” value**. Otherwise, the “.schema” attribute will be assigned
    the string name of that schema.
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象反映时，如果它存在于由 `current_schema()` 函数指示的模式中，**表的“.schema”属性分配的模式名称是 Python 的“None”值**。否则，“.schema”属性将被分配为该模式的字符串名称。
- en: With regards to tables which these [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects refer to via foreign key constraint, a decision
    must be made as to how the `.schema` is represented in those remote tables, in
    the case where that remote schema name is also a member of the current `search_path`.
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象通过外键约束引用的表，必须决定在当前 `search_path` 中的远程模式名称在那些远程表中如何表示。
- en: 'By default, the PostgreSQL dialect mimics the behavior encouraged by PostgreSQL’s
    own `pg_get_constraintdef()` builtin procedure. This function returns a sample
    definition for a particular foreign key constraint, omitting the referenced schema
    name from that definition when the name is also in the PostgreSQL schema search
    path. The interaction below illustrates this behavior:'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PostgreSQL 方言模仿 PostgreSQL 自己的 `pg_get_constraintdef()` 内置过程鼓励的行为。当引用的模式名称也在
    PostgreSQL 模式搜索路径中时，此函数从该定义中省略引用模式名称，该定义返回特定外键约束的示例定义。下面的交互演示了此行为：
- en: '[PRE346]'
  id: totrans-1640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: Above, we created a table `referred` as a member of the remote schema `test_schema`,
    however when we added `test_schema` to the PG `search_path` and then asked `pg_get_constraintdef()`
    for the `FOREIGN KEY` syntax, `test_schema` was not included in the output of
    the function.
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们创建了一个名为 `referred` 的表，作为远程模式 `test_schema` 的成员，然而当我们将 `test_schema` 添加到
    PG 的 `search_path` 然后询问 `pg_get_constraintdef()` 关于 `FOREIGN KEY` 语法时，`test_schema`
    没有包含在函数的输出中。
- en: 'On the other hand, if we set the search path back to the typical default of
    `public`:'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们将搜索路径设置回典型默认的 `public`：
- en: '[PRE347]'
  id: totrans-1643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'The same query against `pg_get_constraintdef()` now returns the fully schema-qualified
    name for us:'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 现在相同的查询对于 `pg_get_constraintdef()` 返回了完全限定的名称：
- en: '[PRE348]'
  id: totrans-1645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'SQLAlchemy will by default use the return value of `pg_get_constraintdef()`
    in order to determine the remote schema name. That is, if our `search_path` were
    set to include `test_schema`, and we invoked a table reflection process as follows:'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 默认使用 `pg_get_constraintdef()` 的返回值来确定远程模式名称。也就是说，如果我们的 `search_path`
    被设置为包含 `test_schema`，并且我们调用了如下表反射过程：
- en: '[PRE349]'
  id: totrans-1647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: 'The above process would deliver to the [`MetaData.tables`](../core/metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") collection `referred` table named **without**
    the schema:'
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程将向 [`MetaData.tables`](../core/metadata.html#sqlalchemy.schema.MetaData.tables
    "sqlalchemy.schema.MetaData.tables") 集合交付 **不含** 模式的 `referred` 表名称：
- en: '[PRE350]'
  id: totrans-1649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: 'To alter the behavior of reflection such that the referred schema is maintained
    regardless of the `search_path` setting, use the `postgresql_ignore_search_path`
    option, which can be specified as a dialect-specific argument to both [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"):'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改反射行为，使参考模式不受 `search_path` 设置的影响，请使用 `postgresql_ignore_search_path` 选项，该选项可以指定为
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    和 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 的方言特定参数：
- en: '[PRE351]'
  id: totrans-1651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: 'We will now have `test_schema.referred` stored as schema-qualified:'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将 `test_schema.referred` 作为模式限定存储：
- en: '[PRE352]'
  id: totrans-1653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: See also
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Interaction of Schema-qualified Reflection with the Default Schema](../core/reflection.html#reflection-schema-qualified-interaction)
    - discussion of the issue from a backend-agnostic perspective'
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式限定反射与默认模式的交互](../core/reflection.html#reflection-schema-qualified-interaction)
    - 从与后端无关的角度讨论这个问题'
- en: '[The Schema Search Path](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    - on the PostgreSQL website.'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: '[模式搜索路径](https://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH)
    - 在 PostgreSQL 网站上。'
- en: INSERT/UPDATE…RETURNING
  id: totrans-1657
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: INSERT/UPDATE…RETURNING
- en: 'The dialect supports PG 8.2’s `INSERT..RETURNING`, `UPDATE..RETURNING` and
    `DELETE..RETURNING` syntaxes. `INSERT..RETURNING` is used by default for single-row
    INSERT statements in order to fetch newly generated primary key identifiers. To
    specify an explicit `RETURNING` clause, use the `_UpdateBase.returning()` method
    on a per-statement basis:'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言支持 PG 8.2 的 `INSERT..RETURNING`、`UPDATE..RETURNING` 和 `DELETE..RETURNING`
    语法。默认情况下，对于单行 INSERT 语句，使用 `INSERT..RETURNING` 来获取新生成的主键标识符。要在每个语句基础上指定显式的 `RETURNING`
    子句，请使用 `_UpdateBase.returning()` 方法：
- en: '[PRE353]'
  id: totrans-1659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '## INSERT…ON CONFLICT (Upsert)'
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: '## INSERT…ON CONFLICT（插入或更新）'
- en: Starting with version 9.5, PostgreSQL allows “upserts” (update or insert) of
    rows into a table via the `ON CONFLICT` clause of the `INSERT` statement. A candidate
    row will only be inserted if that row does not violate any unique constraints.
    In the case of a unique constraint violation, a secondary action can occur which
    can be either “DO UPDATE”, indicating that the data in the target row should be
    updated, or “DO NOTHING”, which indicates to silently skip this row.
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 9.5 开始，PostgreSQL 允许通过 `INSERT` 语句的 `ON CONFLICT` 子句将行“插入或更新”到表中。只有在该行不违反任何唯一约束的情况下才会插入候选行。在唯一约束冲突的情况下，可以发生次要操作，可以是“DO
    UPDATE”，表示应更新目标行中的数据，或者是“DO NOTHING”，表示静默跳过此行。
- en: Conflicts are determined using existing unique constraints and indexes. These
    constraints may be identified either using their name as stated in DDL, or they
    may be inferred by stating the columns and conditions that comprise the indexes.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 冲突是使用现有的唯一约束和索引确定的。这些约束可以通过在DDL中声明的名称来标识，也可以通过声明组成索引的列和条件来推断。
- en: 'SQLAlchemy provides `ON CONFLICT` support via the PostgreSQL-specific [`insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") function, which provides the generative
    methods [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") and [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing"):'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 'SQLAlchemy 通过 PostgreSQL 特定的 [`insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") 函数提供 `ON CONFLICT` 支持，该函数提供了生成方法 [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 和 [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing"):'
- en: '[PRE354]'
  id: totrans-1664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: See also
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT .. ON CONFLICT](https://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT)
    - in the PostgreSQL documentation.'
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT .. ON CONFLICT](https://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT)
    - 在 PostgreSQL 文档中。'
- en: Specifying the Target
  id: totrans-1667
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定目标
- en: 'Both methods supply the “target” of the conflict using either the named constraint
    or by column inference:'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都使用命名约束或通过列推断来提供冲突的“目标”：
- en: 'The [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument specifies
    a sequence containing string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, and/or SQL expression elements, which would
    identify a unique index:'
  id: totrans-1669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数指定了一个序列，其中包含字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象和/或 SQL 表达式元素，这些元素将标识一个唯一索引：'
- en: '[PRE355]'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'When using [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") to infer an index,
    a partial index can be inferred by also specifying the use the [`Insert.on_conflict_do_update.index_where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter:'
  id: totrans-1671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用 [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 推断索引时，还可以通过指定 [`Insert.on_conflict_do_update.index_where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数来推断部分索引：
- en: '[PRE356]'
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: 'The [`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument is used
    to specify an index directly rather than inferring it. This can be the name of
    a UNIQUE constraint, a PRIMARY KEY constraint, or an INDEX:'
  id: totrans-1673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数用于直接指定索引而不是推断索引。这可以是唯一约束的名称、主键约束或索引：'
- en: '[PRE357]'
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: 'The [`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument may also
    refer to a SQLAlchemy construct representing a constraint, e.g. [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), or [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint"). In this use, if the constraint
    has a name, it is used directly. Otherwise, if the constraint is unnamed, then
    inference will be used, where the expressions and optional WHERE clause of the
    constraint will be spelled out in the construct. This use is especially convenient
    to refer to the named or unnamed primary key of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.primary_key`](../core/metadata.html#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute:'
  id: totrans-1675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数也可以引用表示约束的SQLAlchemy构造，例如
    [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 或 [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")。在这种用法中，如果约束有名称，则直接使用。否则，如果约束没有名称，则将使用推断，其中约束的表达式和可选的WHERE子句将在构造中详细说明。这种用法特别方便，可以使用
    [`Table.primary_key`](../core/metadata.html#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") 属性来引用具有命名或未命名主键的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")：'
- en: '[PRE358]'
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: The SET Clause
  id: totrans-1677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SET子句
- en: '`ON CONFLICT...DO UPDATE` is used to perform an update of the already existing
    row, using any combination of new values as well as values from the proposed insertion.
    These values are specified using the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter. This
    parameter accepts a dictionary which consists of direct values for UPDATE:'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON CONFLICT...DO UPDATE` 用于执行已存在行的更新，可以使用新值和插入提议中的值的任意组合。这些值使用 [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数指定。该参数接受一个包含直接更新值的字典：'
- en: '[PRE359]'
  id: totrans-1679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: Warning
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `Insert.on_conflict_do_update()` method does **not** take into account Python-side
    default UPDATE values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON CONFLICT
    style of UPDATE, unless they are manually specified in the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") dictionary.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert.on_conflict_do_update()`方法**不会**考虑Python端的默认UPDATE值或生成函数，例如使用[`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column")指定的值。除非在[`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")字典中手动指定，否则这些值不会用于ON
    CONFLICT风格的UPDATE。'
- en: Updating using the Excluded INSERT Values
  id: totrans-1682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用被排除的插入值进行更新
- en: 'In order to refer to the proposed insertion row, the special alias [`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded
    "sqlalchemy.dialects.postgresql.Insert.excluded") is available as an attribute
    on the [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    object; this object is a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which alias contains all columns
    of the target table:'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用提议的插入行，特殊别名[`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded
    "sqlalchemy.dialects.postgresql.Insert.excluded")可作为[`Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")对象的属性使用；此对象是一��包含目标表的所有列的[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")别名：
- en: '[PRE360]'
  id: totrans-1684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: Additional WHERE Criteria
  id: totrans-1685
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加的WHERE条件
- en: 'The `Insert.on_conflict_do_update()` method also accepts a WHERE clause using
    the [`Insert.on_conflict_do_update.where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter, which
    will limit those rows which receive an UPDATE:'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert.on_conflict_do_update()`方法还接受使用[`Insert.on_conflict_do_update.where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")参数的WHERE子句，这将限制接收UPDATE的行：'
- en: '[PRE361]'
  id: totrans-1687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: Skipping Rows with DO NOTHING
  id: totrans-1688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用DO NOTHING跳过行
- en: '`ON CONFLICT` may be used to skip inserting a row entirely if any conflict
    with a unique or exclusion constraint occurs; below this is illustrated using
    the [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing") method:'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON CONFLICT`可用于在出现与唯一性或排他性约束冲突时完全跳过插入行；下面通过[`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing")方法进行了说明：'
- en: '[PRE362]'
  id: totrans-1690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: 'If `DO NOTHING` is used without specifying any columns or constraint, it has
    the effect of skipping the INSERT for any unique or exclusion constraint violation
    which occurs:'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`DO NOTHING`而没有指定任何列或约束条件，则会跳过任何唯一性或排他性约束违规的插入操作：
- en: '[PRE363]'
  id: totrans-1692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: Specifying the Target
  id: totrans-1693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定目标
- en: 'Both methods supply the “target” of the conflict using either the named constraint
    or by column inference:'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都使用命名约束或通过列推断来提供冲突的“目标”：
- en: 'The [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument specifies
    a sequence containing string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, and/or SQL expression elements, which would
    identify a unique index:'
  id: totrans-1695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")参数指定了一个包含字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象和/或SQL表达式元素的序列，用于标识唯一索引：'
- en: '[PRE364]'
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'When using [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") to infer an index,
    a partial index can be inferred by also specifying the use the [`Insert.on_conflict_do_update.index_where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter:'
  id: totrans-1697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用 [`Insert.on_conflict_do_update.index_elements`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_elements
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 推断索引时，也可以通过同时指定使用
    [`Insert.on_conflict_do_update.index_where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.index_where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数来推断部分索引：
- en: '[PRE365]'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'The [`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument is used
    to specify an index directly rather than inferring it. This can be the name of
    a UNIQUE constraint, a PRIMARY KEY constraint, or an INDEX:'
  id: totrans-1699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数用于直接指定索引，而不是推断索引。这可以是唯一约束、主键约束或索引的名称：'
- en: '[PRE366]'
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'The [`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") argument may also
    refer to a SQLAlchemy construct representing a constraint, e.g. [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), or [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint"). In this use, if the constraint
    has a name, it is used directly. Otherwise, if the constraint is unnamed, then
    inference will be used, where the expressions and optional WHERE clause of the
    constraint will be spelled out in the construct. This use is especially convenient
    to refer to the named or unnamed primary key of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") using the [`Table.primary_key`](../core/metadata.html#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") attribute:'
  id: totrans-1701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Insert.on_conflict_do_update.constraint`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数也可以指代一个 SQLAlchemy
    构造，代表一个约束，例如 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 或 [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")。在这种用法中，如果约束有名称，则直接使用它。否则，如果约束没有名称，则将使用推断，其中约束的表达式和可选的
    WHERE 子句将在构造中详细说明。这种用法特别方便，可以使用 [`Table.primary_key`](../core/metadata.html#sqlalchemy.schema.Table.primary_key
    "sqlalchemy.schema.Table.primary_key") 属性引用表的命名或未命名的主键：'
- en: '[PRE367]'
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: The SET Clause
  id: totrans-1703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SET 子句
- en: '`ON CONFLICT...DO UPDATE` is used to perform an update of the already existing
    row, using any combination of new values as well as values from the proposed insertion.
    These values are specified using the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter. This
    parameter accepts a dictionary which consists of direct values for UPDATE:'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON CONFLICT...DO UPDATE` 用于执行已经存在的行的更新，使用新值以及来自建议插入的值的任意组合。这些值使用 [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数指定。此参数接受一个包含直接更新值的字典：'
- en: '[PRE368]'
  id: totrans-1705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: Warning
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `Insert.on_conflict_do_update()` method does **not** take into account Python-side
    default UPDATE values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON CONFLICT
    style of UPDATE, unless they are manually specified in the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") dictionary.
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert.on_conflict_do_update()` 方法**不会**考虑 Python 端的默认更新值或生成函数，例如使用 [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 指定的值。这些值不会在 ON CONFLICT 类型的更新中执行，除非它们在 [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 字典中手动指定。'
- en: Updating using the Excluded INSERT Values
  id: totrans-1708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用排除的插入值进行更新
- en: 'In order to refer to the proposed insertion row, the special alias [`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded
    "sqlalchemy.dialects.postgresql.Insert.excluded") is available as an attribute
    on the [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    object; this object is a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which alias contains all columns
    of the target table:'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用提议的插入行，[`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded
    "sqlalchemy.dialects.postgresql.Insert.excluded") 这个特殊别名可作为 [`Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") 对象的属性；这个对象是一个包含目标表所有列的 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 别名：
- en: '[PRE369]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: Additional WHERE Criteria
  id: totrans-1711
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加的 WHERE 条件
- en: 'The `Insert.on_conflict_do_update()` method also accepts a WHERE clause using
    the [`Insert.on_conflict_do_update.where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter, which
    will limit those rows which receive an UPDATE:'
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert.on_conflict_do_update()` 方法还接受一个 WHERE 子句，使用 [`Insert.on_conflict_do_update.where`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.where
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数，将限制那些接收更新的行：'
- en: '[PRE370]'
  id: totrans-1713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: Skipping Rows with DO NOTHING
  id: totrans-1714
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 DO NOTHING 跳过行
- en: '`ON CONFLICT` may be used to skip inserting a row entirely if any conflict
    with a unique or exclusion constraint occurs; below this is illustrated using
    the [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing") method:'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON CONFLICT` 可用于完全跳过插入行，如果与唯一约束或排除约束发生冲突；下面是使用 [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing") 方法进行说明：'
- en: '[PRE371]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'If `DO NOTHING` is used without specifying any columns or constraint, it has
    the effect of skipping the INSERT for any unique or exclusion constraint violation
    which occurs:'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `DO NOTHING` 而没有指定任何列或约束，它将跳过任何唯一或排除约束违规的插入：
- en: '[PRE372]'
  id: totrans-1718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '## Full Text Search'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: '## 全文搜索'
- en: PostgreSQL’s full text search system is available through the use of the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace, combined with the use of custom operators
    via the [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method. For simple cases with some
    degree of cross-backend compatibility, the `Operators.match()` operator may also
    be used.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的全文搜索系统可通过 [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 命名空间使用，结合通过 [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 方法使用自定义运算符。对于一些简单情况，具有一定跨后端兼容性，也可以使用
    `Operators.match()` 运算符。
- en: '### Simple plain text matching with `match()`'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 `match()` 进行简单纯文本���配'
- en: The `Operators.match()` operator provides for cross-compatible simple text matching.
    For the PostgreSQL backend, it’s hardcoded to generate an expression using the
    `@@` operator in conjunction with the `plainto_tsquery()` PostgreSQL function.
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: '`Operators.match()` 运算符提供了跨平台的简单文本匹配功能。对于 PostgreSQL 后端，它被硬编码为使用 `@@` 运算符与
    `plainto_tsquery()` PostgreSQL 函数结合生成表达式。'
- en: 'On the PostgreSQL dialect, an expression like the following:'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言中，类似以下表达式：
- en: '[PRE373]'
  id: totrans-1724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'would emit to the database:'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 将发送到数据库的内容：
- en: '[PRE374]'
  id: totrans-1726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: Above, passing a plain string to `Operators.match()` will automatically make
    use of `plainto_tsquery()` to specify the type of tsquery. This establishes basic
    database cross-compatibility for `Operators.match()` with other backends.
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，将普通字符串传递给`Operators.match()`将自动使用`plainto_tsquery()`来指定 tsquery 的类型。这为`Operators.match()`与其他后端的基本数据库跨兼容性建立了基础。
- en: 'Changed in version 2.0: The default tsquery generation function used by the
    PostgreSQL dialect with `Operators.match()` is `plainto_tsquery()`.'
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：PostgreSQL 方言与`Operators.match()`一起使用的默认 tsquery 生成函数是`plainto_tsquery()`。
- en: 'To render exactly what was rendered in 1.4, use the following form:'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 要精确呈现 1.4 中呈现的内容，请使用以下形式：
- en: '[PRE375]'
  id: totrans-1730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'Which would emit:'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成：
- en: '[PRE376]'
  id: totrans-1732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: Using PostgreSQL full text functions and operators directly
  id: totrans-1733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接使用 PostgreSQL 全文函数和运算符
- en: Text search operations beyond the simple use of `Operators.match()` may make
    use of the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    namespace to generate PostgreSQL full-text functions, in combination with [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") to generate any boolean operator.
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 文本搜索操作超出了简单使用`Operators.match()`，可能会利用[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间生成 PostgreSQL 全文函数，结合[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")生成任何布尔运算符。
- en: 'For example, the query:'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查询：
- en: '[PRE377]'
  id: totrans-1736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'would generate:'
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成：
- en: '[PRE378]'
  id: totrans-1738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    type can provide for explicit CAST:'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    类型可以提供显式 CAST：'
- en: '[PRE379]'
  id: totrans-1740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'produces a statement equivalent to:'
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: 生成等效于的语句：
- en: '[PRE380]'
  id: totrans-1742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: 'The `func` namespace is augmented by the PostgreSQL dialect to set up correct
    argument and return types for most full text search functions. These functions
    are used automatically by the [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace assuming the `sqlalchemy.dialects.postgresql`
    package has been imported, or [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") has been invoked using a `postgresql` dialect. These
    functions are documented at:'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 方言通过增强`func`命名空间来设置大多数全文搜索函数的正确参数和返回类型。假定已导入`sqlalchemy.dialects.postgresql`包，或者使用`postgresql`方言调用了[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，这些函数将自动使用[`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间。这些函数在以下文档中有详细说明：
- en: '[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector "sqlalchemy.dialects.postgresql.to_tsvector")'
  id: totrans-1744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector "sqlalchemy.dialects.postgresql.to_tsvector")'
- en: '[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery "sqlalchemy.dialects.postgresql.to_tsquery")'
  id: totrans-1745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery "sqlalchemy.dialects.postgresql.to_tsquery")'
- en: '[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")'
  id: totrans-1746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")'
- en: '[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")'
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")'
- en: '[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")'
  id: totrans-1748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")'
- en: '[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline "sqlalchemy.dialects.postgresql.ts_headline")'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline "sqlalchemy.dialects.postgresql.ts_headline")'
- en: Specifying the “regconfig” with `match()` or custom operators
  id: totrans-1750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`match()`或自定义运算符指定“regconfig”
- en: 'PostgreSQL’s `plainto_tsquery()` function accepts an optional “regconfig” argument
    that is used to instruct PostgreSQL to use a particular pre-computed GIN or GiST
    index in order to perform the search. When using `Operators.match()`, this additional
    parameter may be specified using the `postgresql_regconfig` parameter, such as:'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的`plainto_tsquery()`函数接受一个可选的“regconfig”参数，用于指示 PostgreSQL 使用特定的预计算
    GIN 或 GiST 索引来执行搜索。在使用`Operators.match()`时，可以使用`postgresql_regconfig`参数指定此附加参数，例如：
- en: '[PRE381]'
  id: totrans-1752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: 'Which would emit:'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成：
- en: '[PRE382]'
  id: totrans-1754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: 'When using other PostgreSQL search functions with [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), the “regconfig” parameter may be passed directly
    as the initial argument:'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用其他 PostgreSQL 搜索函数与 [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 时，“regconfig” 参数可以直接作为初始参数传递：
- en: '[PRE383]'
  id: totrans-1756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: 'produces a statement equivalent to:'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个等效于的语句：
- en: '[PRE384]'
  id: totrans-1758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: It is recommended that you use the `EXPLAIN ANALYZE...` tool from PostgreSQL
    to ensure that you are generating queries with SQLAlchemy that take full advantage
    of any indexes you may have created for full text search.
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用 PostgreSQL 的 `EXPLAIN ANALYZE...` 工具，以确保您使用 SQLAlchemy 生成了充分利用为全文搜索创建的任何索引的查询。
- en: See also
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Full Text Search](https://www.postgresql.org/docs/current/textsearch-controls.html)
    - in the PostgreSQL documentation'
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: '[全文搜索](https://www.postgresql.org/docs/current/textsearch-controls.html) -
    PostgreSQL 文档中'
- en: '### Simple plain text matching with `match()`'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 `match()` 进行简单纯文本匹配'
- en: The `Operators.match()` operator provides for cross-compatible simple text matching.
    For the PostgreSQL backend, it’s hardcoded to generate an expression using the
    `@@` operator in conjunction with the `plainto_tsquery()` PostgreSQL function.
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: '`Operators.match()` 运算符提供跨兼容的简单文本匹配。对于 PostgreSQL 后端，它被硬编码为使用 `@@` 运算符与 `plainto_tsquery()`
    PostgreSQL 函数结合生成表达式。'
- en: 'On the PostgreSQL dialect, an expression like the following:'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言上，类似以下表达式：
- en: '[PRE385]'
  id: totrans-1765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: 'would emit to the database:'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 将会发送到数据库：
- en: '[PRE386]'
  id: totrans-1767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: Above, passing a plain string to `Operators.match()` will automatically make
    use of `plainto_tsquery()` to specify the type of tsquery. This establishes basic
    database cross-compatibility for `Operators.match()` with other backends.
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，将纯字符串传递给 `Operators.match()` 将自动使用 `plainto_tsquery()` 来指定 tsquery 的类型。这为
    `Operators.match()` 与其他后端的基本数据库跨兼容性��立了基础。
- en: 'Changed in version 2.0: The default tsquery generation function used by the
    PostgreSQL dialect with `Operators.match()` is `plainto_tsquery()`.'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：PostgreSQL 方言与 `Operators.match()` 一起使用的默认 tsquery 生成函数是 `plainto_tsquery()`。
- en: 'To render exactly what was rendered in 1.4, use the following form:'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 要精确呈现 1.4 中呈现的内容，请使用以下形式：
- en: '[PRE387]'
  id: totrans-1771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: 'Which would emit:'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成：
- en: '[PRE388]'
  id: totrans-1773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Using PostgreSQL full text functions and operators directly
  id: totrans-1774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接使用 PostgreSQL 全文搜索函数和运算符
- en: Text search operations beyond the simple use of `Operators.match()` may make
    use of the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    namespace to generate PostgreSQL full-text functions, in combination with [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") to generate any boolean operator.
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: 超出简单使用 `Operators.match()` 的文本搜索操作可能会利用 [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 命名空间来生成 PostgreSQL 全文搜索函数，结合 [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 生成任何布尔运算符。
- en: 'For example, the query:'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查询：
- en: '[PRE389]'
  id: totrans-1777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: 'would generate:'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
  zh: 会生成：
- en: '[PRE390]'
  id: totrans-1779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    type can provide for explicit CAST:'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    类型可以提供显式转换：'
- en: '[PRE391]'
  id: totrans-1781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'produces a statement equivalent to:'
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个等效于的语句：
- en: '[PRE392]'
  id: totrans-1783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'The `func` namespace is augmented by the PostgreSQL dialect to set up correct
    argument and return types for most full text search functions. These functions
    are used automatically by the [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace assuming the `sqlalchemy.dialects.postgresql`
    package has been imported, or [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") has been invoked using a `postgresql` dialect. These
    functions are documented at:'
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: '`func` 命名空间由 PostgreSQL 方言增强，以设置大多数全文搜索函数的正确参数和返回类型。假定已导入 `sqlalchemy.dialects.postgresql`
    包，或者使用 `postgresql` 方言调用了 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，这些函数将自动由 [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 命名空间使用。这些函数在以下文档中有详细说明：'
- en: '[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector "sqlalchemy.dialects.postgresql.to_tsvector")'
  id: totrans-1785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector "sqlalchemy.dialects.postgresql.to_tsvector")'
- en: '[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery "sqlalchemy.dialects.postgresql.to_tsquery")'
  id: totrans-1786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery "sqlalchemy.dialects.postgresql.to_tsquery")'
- en: '[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")'
  id: totrans-1787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery "sqlalchemy.dialects.postgresql.plainto_tsquery")'
- en: '[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")'
  id: totrans-1788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery "sqlalchemy.dialects.postgresql.phraseto_tsquery")'
- en: '[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")'
  id: totrans-1789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")'
- en: '[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline "sqlalchemy.dialects.postgresql.ts_headline")'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline "sqlalchemy.dialects.postgresql.ts_headline")'
- en: Specifying the “regconfig” with `match()` or custom operators
  id: totrans-1791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `match()` 或自定义操作符指定“regconfig”
- en: 'PostgreSQL’s `plainto_tsquery()` function accepts an optional “regconfig” argument
    that is used to instruct PostgreSQL to use a particular pre-computed GIN or GiST
    index in order to perform the search. When using `Operators.match()`, this additional
    parameter may be specified using the `postgresql_regconfig` parameter, such as:'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 `plainto_tsquery()` 函数接受一个可选的“regconfig”参数，用于指示 PostgreSQL 使用特定的预计���
    GIN 或 GiST 索引来执行搜索。在使用 `Operators.match()` 时，可以使用 `postgresql_regconfig` 参数指定此附加参数，例如：
- en: '[PRE393]'
  id: totrans-1793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: 'Which would emit:'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: 会发出：
- en: '[PRE394]'
  id: totrans-1795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: 'When using other PostgreSQL search functions with [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), the “regconfig” parameter may be passed directly
    as the initial argument:'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他 PostgreSQL 搜索函数与 [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 一起使用时，“regconfig” 参数可以直接作为初始参数传递：
- en: '[PRE395]'
  id: totrans-1797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'produces a statement equivalent to:'
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 生成等效语句：
- en: '[PRE396]'
  id: totrans-1799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: It is recommended that you use the `EXPLAIN ANALYZE...` tool from PostgreSQL
    to ensure that you are generating queries with SQLAlchemy that take full advantage
    of any indexes you may have created for full text search.
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用 PostgreSQL 的 `EXPLAIN ANALYZE...` 工具，以确保您正在生成利用为全文搜索创建的任何索引的 SQLAlchemy
    查询。
- en: See also
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Full Text Search](https://www.postgresql.org/docs/current/textsearch-controls.html)
    - in the PostgreSQL documentation'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: '[全文搜索](https://www.postgresql.org/docs/current/textsearch-controls.html) -
    PostgreSQL 文档中的内容'
- en: FROM ONLY …
  id: totrans-1803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅来自…
- en: 'The dialect supports PostgreSQL’s ONLY keyword for targeting only a particular
    table in an inheritance hierarchy. This can be used to produce the `SELECT ...
    FROM ONLY`, `UPDATE ONLY ...`, and `DELETE FROM ONLY ...` syntaxes. It uses SQLAlchemy’s
    hints mechanism:'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: 该方言支持 PostgreSQL 的 ONLY 关键字，用于仅针对继承层次结构中的特定表。这可用于生成 `SELECT ... FROM ONLY`、`UPDATE
    ONLY ...` 和 `DELETE FROM ONLY ...` 语法。它使用 SQLAlchemy 的提示机制：
- en: '[PRE397]'
  id: totrans-1805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '## PostgreSQL-Specific Index Options'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: '## PostgreSQL 特定的索引选项'
- en: Several extensions to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct are available, specific to the PostgreSQL
    dialect.
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个针对 PostgreSQL 方言的 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的扩展可用。
- en: Covering Indexes
  id: totrans-1808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖索引
- en: 'The `postgresql_include` option renders INCLUDE(colname) for the given string
    names:'
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: '`postgresql_include` 选项为给定的字符串名称呈现 INCLUDE(colname)：'
- en: '[PRE398]'
  id: totrans-1810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: would render the index as `CREATE INDEX my_index ON table (x) INCLUDE (y)`
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引呈现为 `CREATE INDEX my_index ON table (x) INCLUDE (y)`
- en: Note that this feature requires PostgreSQL 11 or later.
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此功能需要 PostgreSQL 11 或更高版本。
- en: New in version 1.4.
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '### Partial Indexes'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: '### 部分索引'
- en: 'Partial indexes add criterion to the index definition so that the index is
    applied to a subset of rows. These can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_where` keyword argument:'
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: 部分索引向索引定义添加条件，以便将索引应用于行的子集。这些可以在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上使用 `postgresql_where` 关键字参数指定：
- en: '[PRE399]  ### Operator Classes'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE399]  ### 操作符类'
- en: 'PostgreSQL allows the specification of an *operator class* for each column
    of an index (see [https://www.postgresql.org/docs/current/interactive/indexes-opclass.html](https://www.postgresql.org/docs/current/interactive/indexes-opclass.html)).
    The [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct allows these to be specified via the `postgresql_ops` keyword argument:'
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许为索引的每一列指定一个 *操作符类*（参见 [https://www.postgresql.org/docs/current/interactive/indexes-opclass.html](https://www.postgresql.org/docs/current/interactive/indexes-opclass.html)）。[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造允许通过 `postgresql_ops` 关键字参数指定这些内容：
- en: '[PRE400]'
  id: totrans-1818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Note that the keys in the `postgresql_ops` dictionaries are the “key” name of
    the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the name used to access it from the `.c` collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), which can be configured to be different than the actual
    name of the column as expressed in the database.
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`postgresql_ops` 字典中的键是 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的“键”名称，即从 `.c` 集合中访问它的名称，它可以配置为与数据库中实际列的名称不同。
- en: 'If `postgresql_ops` is to be used against a complex SQL expression such as
    a function call, then to apply to the column it must be given a label that is
    identified in the dictionary by name, e.g.:'
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要对复杂的 SQL 表达式（例如函数调用）使用 `postgresql_ops`，那么它必须被赋予一个在字典中由名称标识的标签，例如：
- en: '[PRE401]'
  id: totrans-1821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: Operator classes are also supported by the [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct using the [`ExcludeConstraint.ops`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") parameter. See that parameter
    for details.
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符类也支持 [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 结构，使用 [`ExcludeConstraint.ops`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 参数。有关详细信息，请参阅该参数。
- en: 'New in version 1.3.21: added support for operator classes with [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint").'
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3.21 中新增对 [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 的操作符类的支持。
- en: Index Types
  id: totrans-1824
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引类型
- en: 'PostgreSQL provides several index types: B-Tree, Hash, GiST, and GIN, as well
    as the ability for users to create their own (see [https://www.postgresql.org/docs/current/static/indexes-types.html](https://www.postgresql.org/docs/current/static/indexes-types.html)).
    These can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_using` keyword argument:'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 提供了几种索引类型：B-Tree、Hash、GiST 和 GIN，以及用户创建自己的能力（参见[https://www.postgresql.org/docs/current/static/indexes-types.html](https://www.postgresql.org/docs/current/static/indexes-types.html)）。这些可以在
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    上使用 `postgresql_using` 关键字参数指定：
- en: '[PRE402]'
  id: totrans-1826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX command, so it *must* be a valid index type for your version
    of PostgreSQL.
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递到底层 CREATE INDEX 命令，因此它 *必须* 是你的 PostgreSQL 版本的有效索引类型。
- en: '### Index Storage Parameters'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: '### 索引存储参数'
- en: 'PostgreSQL allows storage parameters to be set on indexes. The storage parameters
    available depend on the index method used by the index. Storage parameters can
    be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    using the `postgresql_with` keyword argument:'
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许在索引上设置存储参数。可用的存储参数取决于索引使用的索引方法。存储参数可以在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上使用 `postgresql_with` 关键字参数指定：
- en: '[PRE403]'
  id: totrans-1830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: 'PostgreSQL allows to define the tablespace in which to create the index. The
    tablespace can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_tablespace` keyword argument:'
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许在创建索引的表空间中定义表空间。表空间可以在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上使用 `postgresql_tablespace` 关键字参数指定：
- en: '[PRE404]'
  id: totrans-1832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: 'Note that the same option is available on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well.  ### Indexes with CONCURRENTLY'
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，同样的选项也可在 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    上使用。### 使用 CONCURRENTLY 的索引
- en: 'The PostgreSQL index option CONCURRENTLY is supported by passing the flag `postgresql_concurrently`
    to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct:'
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 PostgreSQL 索引选项 CONCURRENTLY，通过将标志 `postgresql_concurrently` 传递给 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 结构：
- en: '[PRE405]'
  id: totrans-1835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'The above index construct will render DDL for CREATE INDEX, assuming PostgreSQL
    8.2 or higher is detected or for a connection-less dialect, as:'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: 上述索引结构将呈现 DDL 用于 CREATE INDEX，假设检测到 PostgreSQL 8.2 或更高版本，或者对于无连接的方言，如下所示：
- en: '[PRE406]'
  id: totrans-1837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: 'For DROP INDEX, assuming PostgreSQL 9.2 or higher is detected or for a connection-less
    dialect, it will emit:'
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DROP INDEX，假设检测到 PostgreSQL 9.2 或更高版本，或者对于无连接的方言，它将发出：
- en: '[PRE407]'
  id: totrans-1839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: 'When using CONCURRENTLY, the PostgreSQL database requires that the statement
    be invoked outside of a transaction block. The Python DBAPI enforces that even
    for a single statement, a transaction is present, so to use this construct, the
    DBAPI’s “autocommit” mode must be used:'
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用CONCURRENTLY时，PostgreSQL数据库要求该语句在事务块外调用。即使对于单个语句，Python DBAPI也要求存在事务，因此要使用此结构，必须使用DBAPI的“autocommit”模式：
- en: '[PRE408]'
  id: totrans-1841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: See also
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: Covering Indexes
  id: totrans-1844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖索引
- en: 'The `postgresql_include` option renders INCLUDE(colname) for the given string
    names:'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: '`postgresql_include`选项为给定的字符串名称呈现INCLUDE(colname)：'
- en: '[PRE409]'
  id: totrans-1846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: would render the index as `CREATE INDEX my_index ON table (x) INCLUDE (y)`
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 将索引呈现为`CREATE INDEX my_index ON table (x) INCLUDE (y)`
- en: Note that this feature requires PostgreSQL 11 or later.
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此功能要求PostgreSQL 11或更高版本。
- en: New in version 1.4.
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '### Partial Indexes'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: '### 部分索引'
- en: 'Partial indexes add criterion to the index definition so that the index is
    applied to a subset of rows. These can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_where` keyword argument:'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 部分索引向索引定义添加条件，以便将索引应用于行的子集。这些可以在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上使用`postgresql_where`关键字参数指定：
- en: '[PRE410]'
  id: totrans-1852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '### Operator Classes'
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: '### 操作类'
- en: 'PostgreSQL allows the specification of an *operator class* for each column
    of an index (see [https://www.postgresql.org/docs/current/interactive/indexes-opclass.html](https://www.postgresql.org/docs/current/interactive/indexes-opclass.html)).
    The [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct allows these to be specified via the `postgresql_ops` keyword argument:'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL允许为索引的每列指定*操作类*（参见[https://www.postgresql.org/docs/current/interactive/indexes-opclass.html](https://www.postgresql.org/docs/current/interactive/indexes-opclass.html)）。[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造允许通过`postgresql_ops`���键字参数指定这些：
- en: '[PRE411]'
  id: totrans-1855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: Note that the keys in the `postgresql_ops` dictionaries are the “key” name of
    the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    i.e. the name used to access it from the `.c` collection of [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), which can be configured to be different than the actual
    name of the column as expressed in the database.
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`postgresql_ops`字典中的键是[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的“键”名称，即从[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的`.c`集合中访问它所使用的名称，这个名称可以配置为与数据库中实际列名不同。
- en: 'If `postgresql_ops` is to be used against a complex SQL expression such as
    a function call, then to apply to the column it must be given a label that is
    identified in the dictionary by name, e.g.:'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要针对复杂的SQL表达式（如函数调用）使用`postgresql_ops`，则必须为列指定一个在字典中以名称标识的标签，例如：
- en: '[PRE412]'
  id: totrans-1858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: Operator classes are also supported by the [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct using the [`ExcludeConstraint.ops`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") parameter. See that parameter
    for details.
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 操作类也受[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")构造的支持，使用[`ExcludeConstraint.ops`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.ops
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")参数。查看该参数以获取详细信息。
- en: 'New in version 1.3.21: added support for operator classes with [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint").'
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.21中的新功能：增加了对[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")的操作类支持。
- en: Index Types
  id: totrans-1861
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引类型
- en: 'PostgreSQL provides several index types: B-Tree, Hash, GiST, and GIN, as well
    as the ability for users to create their own (see [https://www.postgresql.org/docs/current/static/indexes-types.html](https://www.postgresql.org/docs/current/static/indexes-types.html)).
    These can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_using` keyword argument:'
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL提供了几种索引类型：B-Tree、Hash、GiST和GIN，用户还可以创建自己的索引类型（参见[https://www.postgresql.org/docs/current/static/indexes-types.html](https://www.postgresql.org/docs/current/static/indexes-types.html)）。这些可以在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上使用`postgresql_using`关键字参数指定：
- en: '[PRE413]'
  id: totrans-1863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: The value passed to the keyword argument will be simply passed through to the
    underlying CREATE INDEX command, so it *must* be a valid index type for your version
    of PostgreSQL.
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给关键字参数的值将简单地传递到底层的 CREATE INDEX 命令，因此它*必须*是您的 PostgreSQL 版本的有效索引类型。
- en: '### Index Storage Parameters'
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: '### 索引存储参数'
- en: 'PostgreSQL allows storage parameters to be set on indexes. The storage parameters
    available depend on the index method used by the index. Storage parameters can
    be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    using the `postgresql_with` keyword argument:'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许在索引上设置存储参数。可用的存储参数取决于索引使用的索引方法。可以使用 `postgresql_with` 关键字参数在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上指定存储参数：
- en: '[PRE414]'
  id: totrans-1867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'PostgreSQL allows to define the tablespace in which to create the index. The
    tablespace can be specified on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") using the `postgresql_tablespace` keyword argument:'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许在其中创建索引的表空间中定义表空间。可以使用 `postgresql_tablespace` 关键字参数在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 上指定表空间：
- en: '[PRE415]'
  id: totrans-1869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: Note that the same option is available on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well.
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，相同的选项也适用于 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。
- en: '### Indexes with CONCURRENTLY'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: '### CONCURRENTLY 索引'
- en: 'The PostgreSQL index option CONCURRENTLY is supported by passing the flag `postgresql_concurrently`
    to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct:'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将标志 `postgresql_concurrently` 传递给 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造来支持 PostgreSQL 的索引选项 CONCURRENTLY：
- en: '[PRE416]'
  id: totrans-1873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: 'The above index construct will render DDL for CREATE INDEX, assuming PostgreSQL
    8.2 or higher is detected or for a connection-less dialect, as:'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: 上述索引构造将生成 DDL 用于 CREATE INDEX，假设检测到 PostgreSQL 8.2 或更高版本，或者对于无连接的方言，如下所示：
- en: '[PRE417]'
  id: totrans-1875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'For DROP INDEX, assuming PostgreSQL 9.2 or higher is detected or for a connection-less
    dialect, it will emit:'
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DROP INDEX，假设检测到 PostgreSQL 9.2 或更高版本，或者对于无连接的方言，它将生成：
- en: '[PRE418]'
  id: totrans-1877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'When using CONCURRENTLY, the PostgreSQL database requires that the statement
    be invoked outside of a transaction block. The Python DBAPI enforces that even
    for a single statement, a transaction is present, so to use this construct, the
    DBAPI’s “autocommit” mode must be used:'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CONCURRENTLY 时，PostgreSQL 数据库要求该语句在事务块外部调用。Python DBAPI 强制即使对于单个语句，也必须存在事务，因此要使用此构造，必须使用
    DBAPI 的“自动提交”模式：
- en: '[PRE419]'
  id: totrans-1879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: See also
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '## PostgreSQL Index Reflection'
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: '## PostgreSQL 索引反射'
- en: The PostgreSQL database creates a UNIQUE INDEX implicitly whenever the UNIQUE
    CONSTRAINT construct is used. When inspecting a table using [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"), the [`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes") and the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") will report on
    these two constructs distinctly; in the case of the index, the key `duplicates_constraint`
    will be present in the index entry if it is detected as mirroring a constraint.
    When performing reflection using `Table(..., autoload_with=engine)`, the UNIQUE
    INDEX is **not** returned in [`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes") when it is detected as mirroring a [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") in the [`Table.constraints`](../core/metadata.html#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints") collection .
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用唯一约束构造时，PostgreSQL数据库会隐式地创建一个唯一索引。当使用[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")检查表时，[`Inspector.get_indexes()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")和[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")会分别报告这两个构造；在索引的情况下，如果检测到与约束相对应，则索引条目中将存在键`duplicates_constraint`。当使用`Table(...,
    autoload_with=engine)`进行反射时，如果检测到索引与[`Table.constraints`](../core/metadata.html#sqlalchemy.schema.Table.constraints
    "sqlalchemy.schema.Table.constraints")集合中的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")相对应，则唯一索引**不**会在[`Table.indexes`](../core/metadata.html#sqlalchemy.schema.Table.indexes
    "sqlalchemy.schema.Table.indexes")中返回。
- en: Special Reflection Options
  id: totrans-1884
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊反射选���
- en: 'The [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") used for the PostgreSQL backend is an
    instance of [`PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector "sqlalchemy.dialects.postgresql.base.PGInspector"),
    which offers additional methods:'
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: 用于PostgreSQL后端的[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")是[`PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector
    "sqlalchemy.dialects.postgresql.base.PGInspector")的一个实例，提供了额外的方法：
- en: '[PRE420]'
  id: totrans-1886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '| Object Name | Description |'
  id: totrans-1887
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1888
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [PGInspector](#sqlalchemy.dialects.postgresql.base.PGInspector) |  |'
  id: totrans-1889
  prefs: []
  type: TYPE_TB
  zh: '| [PGInspector](#sqlalchemy.dialects.postgresql.base.PGInspector) |  |'
- en: '[PRE421]'
  id: totrans-1890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '**Members**'
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_domains()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_domains),
    [get_enums()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums), [get_foreign_table_names()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names),
    [get_table_oid()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_table_oid),
    [has_type()](#sqlalchemy.dialects.postgresql.base.PGInspector.has_type)'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_domains()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_domains),
    [get_enums()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums), [get_foreign_table_names()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names),
    [get_table_oid()](#sqlalchemy.dialects.postgresql.base.PGInspector.get_table_oid),
    [has_type()](#sqlalchemy.dialects.postgresql.base.PGInspector.has_type)'
- en: '**Class signature**'
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.base.PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector
    "sqlalchemy.dialects.postgresql.base.PGInspector") ([`sqlalchemy.engine.reflection.Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector"))
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.base.PGInspector`](#sqlalchemy.dialects.postgresql.base.PGInspector
    "sqlalchemy.dialects.postgresql.base.PGInspector")（[`sqlalchemy.engine.reflection.Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")）
- en: '[PRE422]'
  id: totrans-1895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: Return a list of DOMAIN objects.
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个域对象的列表。
- en: 'Each member is a dictionary containing these fields:'
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: 每个成员都是一个包含以下字段的字典：
- en: name - name of the domain
  id: totrans-1898
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: name - 域的名称
- en: ''
  id: totrans-1899
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1900
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: schema - the schema name for the domain.
  id: totrans-1901
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: schema - 域的模式名称。
- en: ''
  id: totrans-1902
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1903
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: visible - boolean, whether or not this domain is visible in the default search
    path.
  id: totrans-1904
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: visible - 布尔值，表示此域是否在默认搜索路径中可见。
- en: ''
  id: totrans-1905
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1906
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: type - the type defined by this domain.
  id: totrans-1907
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: type - 此域定义的类型。
- en: ''
  id: totrans-1908
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1909
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nullable - Indicates if this domain can be `NULL`.
  id: totrans-1910
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: nullable - 指示此域是否可以为`NULL`。
- en: ''
  id: totrans-1911
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1912
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: default - The default value of the domain or `None` if the domain has no default.
  id: totrans-1913
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: default - 域的默认值，如果域没有默认值，则为`None`。
- en: ''
  id: totrans-1914
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1915
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'constraints - A list of dict wit the constraint defined by this domain. Each
    element constaints two keys: `name` of the constraint and `check` with the constraint
    text.'
  id: totrans-1916
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束 - 由此域定义的约束的字典列表。每个元素包含两个键：约束的`name`和`check`约束文本。
- en: 'Parameters:'
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name. If None, the default schema (typically ‘public’)
    is used. May also be set to `''*''` to indicate load domains for all schemas.'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: '**schema** – 模式名称。如果为None，则使用默认模式（通常为''public''）。也可以设置为`''*''`以表示加载所有模式的域。'
- en: New in version 2.0.
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新内容。
- en: '[PRE423]'
  id: totrans-1920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Return a list of ENUM objects.
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 返回ENUM对象的列表。
- en: 'Each member is a dictionary containing these fields:'
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: 每个成员都是一个包含以下字段的字典：
- en: name - name of the enum
  id: totrans-1923
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: name - 枚举的名称
- en: ''
  id: totrans-1924
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1925
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: schema - the schema name for the enum.
  id: totrans-1926
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: schema - 枚举的模式名称。
- en: ''
  id: totrans-1927
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1928
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: visible - boolean, whether or not this enum is visible in the default search
    path.
  id: totrans-1929
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: visible - 布尔值，此枚举是否在默认搜索路径中可见。
- en: ''
  id: totrans-1930
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1931
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: labels - a list of string labels that apply to the enum.
  id: totrans-1932
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: labels - 应用于枚举的字符串标签列表。
- en: 'Parameters:'
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name. If None, the default schema (typically ‘public’)
    is used. May also be set to `''*''` to indicate load enums for all schemas.'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: '**schema** – 模式名称。如果为None，则使用默认模式（通常为''public''）。也可以设置为`''*''`以表示加载所有模式的枚举。'
- en: '[PRE424]'
  id: totrans-1935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Return a list of FOREIGN TABLE names.
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: 返回FOREIGN TABLE名称列表。
- en: Behavior is similar to that of [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names"), except that the list
    is limited to those tables that report a `relkind` value of `f`.
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: 其行为类似于[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")，只不过列表仅限于那些报告`relkind`值为`f`的表。
- en: '[PRE425]'
  id: totrans-1938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Return the OID for the given table name.
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定表名的OID。
- en: 'Parameters:'
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table_name` – string name of the table. For special quoting, use [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` – 表的字符串名称。对于特殊引用，请使用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '`schema` – string schema name; if omitted, uses the default schema of the database
    connection. For special quoting, use [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-1942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称；如果省略，使用数据库连接的默认模式。对于特殊引用，请使用[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。'
- en: '[PRE426]'
  id: totrans-1943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: Return if the database has the specified type in the provided schema.
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库是否在提供的模式中具有指定类型。
- en: 'Parameters:'
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`type_name` – the type to check.'
  id: totrans-1946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_name` – 要检查的类型。'
- en: '`schema` – schema name. If None, the default schema (typically ‘public’) is
    used. May also be set to `''*''` to check in all schemas.'
  id: totrans-1947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 模式名称。如果为None，则使用默认模式（通常为''public''）。也可以设置为`''*''`以在所有模式中检查。'
- en: New in version 2.0.
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新内容。
- en: '## PostgreSQL Table Options'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: '## PostgreSQL表选项'
- en: 'Several options for CREATE TABLE are supported directly by the PostgreSQL dialect
    in conjunction with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct:'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言与[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")结构直接支持CREATE
    TABLE的几个选项：
- en: '`INHERITS`:'
  id: totrans-1951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INHERITS`：'
- en: '[PRE427]'
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '`ON COMMIT`:'
  id: totrans-1953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ON COMMIT`：'
- en: '[PRE428]'
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '`PARTITION BY`:'
  id: totrans-1955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PARTITION BY`：'
- en: '[PRE429]'
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '`TABLESPACE`:'
  id: totrans-1957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLESPACE`：'
- en: '[PRE430]'
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: The above option is also available on the [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct.
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述选项也适用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")结构。
- en: '`USING`:'
  id: totrans-1960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USING`：'
- en: '[PRE431]'
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '`WITH OIDS`:'
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH OIDS`：'
- en: '[PRE432]'
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '`WITHOUT OIDS`:'
  id: totrans-1964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITHOUT OIDS`：'
- en: '[PRE433]'
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: See also
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[PostgreSQL CREATE TABLE options](https://www.postgresql.org/docs/current/static/sql-createtable.html)
    - in the PostgreSQL documentation.'
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL CREATE TABLE options](https://www.postgresql.org/docs/current/static/sql-createtable.html)
    - PostgreSQL文档中的内容。'
- en: '## PostgreSQL Constraint Options'
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: '## PostgreSQL约束选项'
- en: 'The following option(s) are supported by the PostgreSQL dialect in conjunction
    with selected constraint constructs:'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言与选定的约束结构一起支持以下选项：
- en: '`NOT VALID`: This option applies towards CHECK and FOREIGN KEY constraints
    when the constraint is being added to an existing table via ALTER TABLE, and has
    the effect that existing rows are not scanned during the ALTER operation against
    the constraint being added.'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOT VALID`：此选项适用于向现有表通过ALTER TABLE添加约束时，约束正在添加到约束操作期间不扫描现有行的CHECK和FOREIGN
    KEY约束，并且具有的效果。'
- en: 'When using a SQL migration tool such as [Alembic](https://alembic.sqlalchemy.org)
    that renders ALTER TABLE constructs, the `postgresql_not_valid` argument may be
    specified as an additional keyword argument within the operation that creates
    the constraint, as in the following Alembic example:'
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 SQL 迁移工具（如[Alembic](https://alembic.sqlalchemy.org)）渲染 ALTER TABLE 构造时，`postgresql_not_valid`
    参数可以作为创建约束的操作中的额外关键字参数指定，如下面的 Alembic 示例：
- en: '[PRE434]'
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: 'The keyword is ultimately accepted directly by the [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") constructs; when using a tool like Alembic, dialect-specific
    keyword arguments are passed through to these constructs from the migration operation
    directives:'
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该关键字最终直接被[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")和[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 构造接受；当使用像 Alembic 这样的工具时，特定于方言的关键字参数从迁移操作指令传递给这些构造：
- en: '[PRE435]'
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: New in version 1.4.32.
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4.32 中的新功能。
- en: See also
  id: totrans-1976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[PostgreSQL ALTER TABLE options](https://www.postgresql.org/docs/current/static/sql-altertable.html)
    - in the PostgreSQL documentation.'
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL ALTER TABLE 选项](https://www.postgresql.org/docs/current/static/sql-altertable.html)
    - PostgreSQL 文档中的内容。'
- en: '## Table values, Table and Column valued functions, Row and Tuple objects'
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: '## 表值、表和列值函数、行和元组对象'
- en: PostgreSQL makes great use of modern SQL forms such as table-valued functions,
    tables and rows as values. These constructs are commonly used as part of PostgreSQL’s
    support for complex datatypes such as JSON, ARRAY, and other datatypes. SQLAlchemy’s
    SQL expression language has native support for most table-valued and row-valued
    forms.
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 在现代 SQL 形式中大量使用表值函数、表和行作为值。这些构造通常作为 PostgreSQL 对复杂数据类型（如 JSON、ARRAY
    和其他数据类型）支持的一部分。SQLAlchemy 的 SQL 表达式语言对大多数表值和行值形式具有原生支持。
- en: '### Table-Valued Functions'
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: '### 表值函数'
- en: Many PostgreSQL built-in functions are intended to be used in the FROM clause
    of a SELECT statement, and are capable of returning table rows or sets of table
    rows. A large portion of PostgreSQL’s JSON functions for example such as `json_array_elements()`,
    `json_object_keys()`, `json_each_text()`, `json_each()`, `json_to_record()`, `json_populate_recordset()`
    use such forms. These classes of SQL function calling forms in SQLAlchemy are
    available using the [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method in conjunction
    with [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    objects generated from the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace.
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 PostgreSQL 内置函数旨在在 SELECT 语句的 FROM 子句中使用，并能够返回表行或表行集。例如，PostgreSQL 的许多 JSON
    函数，如 `json_array_elements()`、`json_object_keys()`、`json_each_text()`、`json_each()`、`json_to_record()`、`json_populate_recordset()`
    使用这些形式。在 SQLAlchemy 中，通过与从[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 命名空间生成的[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") 对象一起使用[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法，可以使用这些类别的 SQL 函数调用形式。
- en: 'Examples from PostgreSQL’s reference documentation follow below:'
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是来自 PostgreSQL 参考文档的示例：
- en: '`json_each()`:'
  id: totrans-1983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_each()`:'
- en: '[PRE436]'
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '`json_populate_record()`:'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_populate_record()`:'
- en: '[PRE437]'
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '`json_to_record()` - this form uses a PostgreSQL specific form of derived columns
    in the alias, where we may make use of [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") elements with types to produce them. The [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method produces a [`TableValuedAlias`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct, and the method [`TableValuedAlias.render_derived()`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") method sets up the
    derived columns specification:'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_to_record()` - 这种形式使用了 PostgreSQL 特定的派生列形式在别名中，我们可以利用 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 元素与类型来生成它们。[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法生成了一个 [`TableValuedAlias`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") 构造，并且方法 [`TableValuedAlias.render_derived()`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") 设置了派生列规范：'
- en: '[PRE438]'
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '`WITH ORDINALITY` - part of the SQL standard, `WITH ORDINALITY` adds an ordinal
    counter to the output of a function and is accepted by a limited set of PostgreSQL
    functions including `unnest()` and `generate_series()`. The [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method accepts a keyword
    parameter `with_ordinality` for this purpose, which accepts the string name that
    will be applied to the “ordinality” column:'
  id: totrans-1989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH ORDINALITY` - SQL 标准的一部分，`WITH ORDINALITY` 将一个序号计数器添加到函数的输出中，并被一组有限的
    PostgreSQL 函数接受，包括 `unnest()` 和 `generate_series()`。[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法接受一个名为 `with_ordinality`
    的关键字参数，用于此目的，该参数接受将应用于“序号”列的字符串名称：'
- en: '[PRE439]'
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: New in version 1.4.0b2.
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.0b2 版本中的新功能。
- en: See also
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)  ###
    Column Valued Functions'
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中  ### 列值函数'
- en: 'Similar to the table valued function, a column valued function is present in
    the FROM clause, but delivers itself to the columns clause as a single scalar
    value. PostgreSQL functions such as `json_array_elements()`, `unnest()` and `generate_series()`
    may use this form. Column valued functions are available using the [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method of [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"):'
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于表值函数，列值函数存在于 FROM 子句中，但将自身提供给列子句作为单个标量值。PostgreSQL 函数，如 `json_array_elements()`、`unnest()`
    和 `generate_series()` 可以使用这种形式。使用 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法的 [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") 可用于列值函数：
- en: '`json_array_elements()`:'
  id: totrans-1995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_array_elements()`：'
- en: '[PRE440]'
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '`unnest()` - in order to generate a PostgreSQL ARRAY literal, the [`array()`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct may be used:'
  id: totrans-1997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unnest()` - 为了生成 PostgreSQL ARRAY 文字，可以使用 [`array()`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造：'
- en: '[PRE441]'
  id: totrans-1998
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'The function can of course be used against an existing table-bound column that’s
    of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"):'
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，该函数可以用于已存在的类型为[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")的表列：
- en: '[PRE442]'
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: See also
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数 - 表值函数作为标量列](../tutorial/data_select.html#tutorial-functions-column-valued)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)'
- en: Row Types
  id: totrans-2003
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行类型
- en: 'Built-in support for rendering a `ROW` may be approximated using `func.ROW`
    with the `sqlalchemy.func` namespace, or by using the [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sqlalchemy.func`命名空间中的`func.ROW`或者使用[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")构造函数，可以近似实现对`ROW`的渲染支持：
- en: '[PRE443]'
  id: totrans-2005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: See also
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Row Constructors](https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS)'
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 行构造函数](https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS)'
- en: '[PostgreSQL Row Constructor Comparison](https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON)'
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 行构造函数比较](https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON)'
- en: Table Types passed to Functions
  id: totrans-2009
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递给函数的表类型
- en: 'PostgreSQL supports passing a table as an argument to a function, which is
    known as a “record” type. SQLAlchemy [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects such as [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") support this special form using the `FromClause.table_valued()`
    method, which is comparable to the [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method except that the
    collection of columns is already established by that of the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") itself:'
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 支持将表作为函数的参数传递，这被称为“record”类型。SQLAlchemy 的[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象，如[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，支持使用`FromClause.table_valued()`方法的这种特殊形式，该方法类似于[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")方法，只是列集合已经由[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")本身建立：
- en: '[PRE444]'
  id: totrans-2011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: New in version 1.4.0b2.
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.0b2 中新增。
- en: '### Table-Valued Functions'
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: '### 表值函数'
- en: Many PostgreSQL built-in functions are intended to be used in the FROM clause
    of a SELECT statement, and are capable of returning table rows or sets of table
    rows. A large portion of PostgreSQL’s JSON functions for example such as `json_array_elements()`,
    `json_object_keys()`, `json_each_text()`, `json_each()`, `json_to_record()`, `json_populate_recordset()`
    use such forms. These classes of SQL function calling forms in SQLAlchemy are
    available using the [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method in conjunction
    with [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    objects generated from the [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace.
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 PostgreSQL 内置函数旨在在 SELECT 语句的 FROM 子句中使用，并且能够返回表行或表行集。例如，PostgreSQL 的许多 JSON
    函数，如`json_array_elements()`、`json_object_keys()`、`json_each_text()`、`json_each()`、`json_to_record()`、`json_populate_recordset()`等，使用了这种形式。在
    SQLAlchemy 中，这些类 SQL 函数调用形式可通过[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")方法与从[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")命名空间生成的[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")对象一起使用。
- en: 'Examples from PostgreSQL’s reference documentation follow below:'
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是来自 PostgreSQL 参考文档的示例：
- en: '`json_each()`:'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_each()`:'
- en: '[PRE445]'
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '`json_populate_record()`:'
  id: totrans-2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_populate_record()`:'
- en: '[PRE446]'
  id: totrans-2019
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '`json_to_record()` - this form uses a PostgreSQL specific form of derived columns
    in the alias, where we may make use of [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") elements with types to produce them. The [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method produces a [`TableValuedAlias`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct, and the method [`TableValuedAlias.render_derived()`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") method sets up the
    derived columns specification:'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_to_record()` - 此形式使用了 PostgreSQL 特定的派生列形式在别名中，我们可以利用 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 元素和类型来产生它们。[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法产生了一个 [`TableValuedAlias`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") 结构，而方法 [`TableValuedAlias.render_derived()`](../core/selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") 设置了派生列的规范：'
- en: '[PRE447]'
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '`WITH ORDINALITY` - part of the SQL standard, `WITH ORDINALITY` adds an ordinal
    counter to the output of a function and is accepted by a limited set of PostgreSQL
    functions including `unnest()` and `generate_series()`. The [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method accepts a keyword
    parameter `with_ordinality` for this purpose, which accepts the string name that
    will be applied to the “ordinality” column:'
  id: totrans-2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH ORDINALITY` - SQL 标准的一部分，`WITH ORDINALITY` 向函数的输出添加一个序数计数器，并被一组有限的 PostgreSQL
    函数接受，包括 `unnest()` 和 `generate_series()`。[`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法接受一个名为 `with_ordinality`
    的关键字参数，用于此目的，该参数接受将应用于“序数”列的字符串名称：'
- en: '[PRE448]'
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: New in version 1.4.0b2.
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.0b2 版本中新增。
- en: See also
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: '[表值函数](../tutorial/data_select.html#tutorial-functions-table-valued) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '### Column Valued Functions'
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: '### 列值函数'
- en: 'Similar to the table valued function, a column valued function is present in
    the FROM clause, but delivers itself to the columns clause as a single scalar
    value. PostgreSQL functions such as `json_array_elements()`, `unnest()` and `generate_series()`
    may use this form. Column valued functions are available using the [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method of [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"):'
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于表值函数，列值函数出现在 FROM 子句中，但将其自身交付给列子句作为单个标量值。PostgreSQL 函数如 `json_array_elements()`、`unnest()`
    和 `generate_series()` 可以使用此形式。列值函数可通过 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法的 [`FunctionElement`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") 来使用：
- en: '`json_array_elements()`:'
  id: totrans-2029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json_array_elements()`：'
- en: '[PRE449]'
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '`unnest()` - in order to generate a PostgreSQL ARRAY literal, the [`array()`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct may be used:'
  id: totrans-2031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unnest()` - 为了生成 PostgreSQL 的数组文字，可以使用 [`array()`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 结构：'
- en: '[PRE450]'
  id: totrans-2032
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: 'The function can of course be used against an existing table-bound column that’s
    of type [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY"):'
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，该函数也可以用于已存在的类型为 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的表绑定列：
- en: '[PRE451]'
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: See also
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: '[列值函数 - 作为标量列的表值函数](../tutorial/data_select.html#tutorial-functions-column-valued)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: Row Types
  id: totrans-2037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行类型
- en: 'Built-in support for rendering a `ROW` may be approximated using `func.ROW`
    with the `sqlalchemy.func` namespace, or by using the [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 内置支持渲染 `ROW` 可以使用 `func.ROW` 和 `sqlalchemy.func` 命名空间来近似，或者使用 [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 构造：
- en: '[PRE452]'
  id: totrans-2039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: See also
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Row Constructors](https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS)'
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL行构造函数](https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS)'
- en: '[PostgreSQL Row Constructor Comparison](https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON)'
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL行构造函数比较](https://www.postgresql.org/docs/current/functions-comparisons.html#ROW-WISE-COMPARISON)'
- en: Table Types passed to Functions
  id: totrans-2043
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递给函数的表类型
- en: 'PostgreSQL supports passing a table as an argument to a function, which is
    known as a “record” type. SQLAlchemy [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects such as [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") support this special form using the `FromClause.table_valued()`
    method, which is comparable to the [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method except that the
    collection of columns is already established by that of the [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") itself:'
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL支持将表作为函数的参数传递，这称为“record”类型。SQLAlchemy [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象，例如 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 支持使用 `FromClause.table_valued()` 方法来实现此特殊形式，该方法类似于
    [`FunctionElement.table_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") 方法，只是列的集合已由 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 本身建立：
- en: '[PRE453]'
  id: totrans-2045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: New in version 1.4.0b2.
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.0b2版本中的新功能。
- en: ARRAY Types
  id: totrans-2047
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组类型
- en: 'The PostgreSQL dialect supports arrays, both as multidimensional column types
    as well as array literals:'
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言支持数组，既作为多维列类型，也作为数组文本：
- en: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    - ARRAY datatype'
  id: totrans-2049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    - 数组数据类型'
- en: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - array literal'
  id: totrans-2050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - 数组文本'
- en: '[`array_agg()`](#sqlalchemy.dialects.postgresql.array_agg "sqlalchemy.dialects.postgresql.array_agg")
    - ARRAY_AGG SQL function'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`array_agg()`](#sqlalchemy.dialects.postgresql.array_agg "sqlalchemy.dialects.postgresql.array_agg")
    - ARRAY_AGG SQL函数'
- en: '[`aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by "sqlalchemy.dialects.postgresql.aggregate_order_by")
    - helper for PG’s ORDER BY aggregate function syntax.'
  id: totrans-2052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by "sqlalchemy.dialects.postgresql.aggregate_order_by")
    - PG的ORDER BY聚合函数语法的辅助工具。'
- en: '## JSON Types'
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: '## JSON类型'
- en: 'The PostgreSQL dialect supports both JSON and JSONB datatypes, including psycopg2’s
    native support and support for all of PostgreSQL’s special operators:'
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL方言支持JSON和JSONB数据类型，包括psycopg2的本机支持以及对PostgreSQL的所有特殊操作符的支持：
- en: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")'
  id: totrans-2055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")'
- en: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
  id: totrans-2056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
- en: '[`JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH "sqlalchemy.dialects.postgresql.JSONPATH")'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH "sqlalchemy.dialects.postgresql.JSONPATH")'
- en: HSTORE Type
  id: totrans-2058
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HSTORE类型
- en: 'The PostgreSQL HSTORE type as well as hstore literals are supported:'
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的HSTORE类型以及hstore文本都受支持：
- en: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    - HSTORE datatype'
  id: totrans-2060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    - HSTORE数据类型'
- en: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - hstore literal'
  id: totrans-2061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - hstore文本'
- en: ENUM Types
  id: totrans-2062
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举类型
- en: 'PostgreSQL has an independently creatable TYPE structure which is used to implement
    an enumerated type. This approach introduces significant complexity on the SQLAlchemy
    side in terms of when this type should be CREATED and DROPPED. The type object
    is also an independently reflectable entity. The following sections should be
    consulted:'
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL具有独立可创建的TYPE结构，用于实现枚举类型。这种方法在SQLAlchemy方面引入了显着的复杂性，涉及何时应该创建和删除此类型。类型对象也是一个独立的可反射实体。应查阅以下部分：
- en: '[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - DDL and typing support for ENUM.'
  id: totrans-2064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    - 用于ENUM的DDL和类型支持。'
- en: '[`PGInspector.get_enums()`](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums") - retrieve a listing
    of current ENUM types'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PGInspector.get_enums()`](#sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
    "sqlalchemy.dialects.postgresql.base.PGInspector.get_enums") - 检索当前ENUM类型的列表'
- en: '[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create "sqlalchemy.dialects.postgresql.ENUM.create")
    , [`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop "sqlalchemy.dialects.postgresql.ENUM.drop")
    - individual CREATE and DROP commands for ENUM.'
  id: totrans-2066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create "sqlalchemy.dialects.postgresql.ENUM.create")，[`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop") - 用于ENUM的单独CREATE和DROP命令。'
- en: '### Using ENUM with ARRAY'
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用ENUM与ARRAY'
- en: The combination of ENUM and ARRAY is not directly supported by backend DBAPIs
    at this time. Prior to SQLAlchemy 1.3.17, a special workaround was needed in order
    to allow this combination to work, described below.
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: 目前后端DBAPI不直接支持ENUM和ARRAY的组合。在SQLAlchemy 1.3.17之前，需要特殊的变通方法才能使此组合工作，如下所述。
- en: 'Changed in version 1.3.17: The combination of ENUM and ARRAY is now directly
    handled by SQLAlchemy’s implementation without any workarounds needed.'
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.17起更改：现在SQLAlchemy的实现直接处理ENUM和ARRAY的组合，无需任何需要的变通方法。
- en: '[PRE454]'
  id: totrans-2070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: 'E.g.:'
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE455]'
  id: totrans-2072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: 'This type is not included as a built-in type as it would be incompatible with
    a DBAPI that suddenly decides to support ARRAY of ENUM directly in a new version.  ###
    Using JSON/JSONB with ARRAY'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: '此类型未作为内置类型包含，因为它与突然决定在新版本中直接支持ENUM的DBAPI不兼容。  ### 使用JSON/JSONB与ARRAY'
- en: Similar to using ENUM, prior to SQLAlchemy 1.3.17, for an ARRAY of JSON/JSONB
    we need to render the appropriate CAST. Current psycopg2 drivers accommodate the
    result set correctly without any special steps.
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于使用ENUM，在SQLAlchemy 1.3.17之前，对于JSON/JSONB的ARRAY，我们需要呈现适当的CAST。当前的psycopg2驱动程序可以正确地处理结果集，无需任何特殊步骤。
- en: 'Changed in version 1.3.17: The combination of JSON/JSONB and ARRAY is now directly
    handled by SQLAlchemy’s implementation without any workarounds needed.'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.17起更改：现在SQLAlchemy的实现直接处理JSON/JSONB和ARRAY的组合，无需任何需要的变通方法。
- en: '[PRE456]'
  id: totrans-2076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'E.g.:'
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE457]  ### Using ENUM with ARRAY'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE457]  ### 使用ENUM与ARRAY'
- en: The combination of ENUM and ARRAY is not directly supported by backend DBAPIs
    at this time. Prior to SQLAlchemy 1.3.17, a special workaround was needed in order
    to allow this combination to work, described below.
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: 目前后端DBAPI不直接支持ENUM和ARRAY的组合。在SQLAlchemy 1.3.17之前，需要特殊的变通方法才能使此组合工作，如下所述。
- en: 'Changed in version 1.3.17: The combination of ENUM and ARRAY is now directly
    handled by SQLAlchemy’s implementation without any workarounds needed.'
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.17起更改：现在SQLAlchemy的实现直接处理ENUM和ARRAY的组合，无需任何需要的变通方法。
- en: '[PRE458]'
  id: totrans-2081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: 'E.g.:'
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE459]'
  id: totrans-2083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: This type is not included as a built-in type as it would be incompatible with
    a DBAPI that suddenly decides to support ARRAY of ENUM directly in a new version.
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型未作为内置类型包含，因为它与突然决定在新版本中直接支持ENUM的DBAPI不兼容。
- en: '### Using JSON/JSONB with ARRAY'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用JSON/JSONB与ARRAY'
- en: Similar to using ENUM, prior to SQLAlchemy 1.3.17, for an ARRAY of JSON/JSONB
    we need to render the appropriate CAST. Current psycopg2 drivers accommodate the
    result set correctly without any special steps.
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于使用ENUM，在SQLAlchemy 1.3.17之前，对于JSON/JSONB的ARRAY，我们需要呈现适当的CAST。当前的psycopg2驱动程序可以正确地处理结果集，无需任何特殊步骤。
- en: 'Changed in version 1.3.17: The combination of JSON/JSONB and ARRAY is now directly
    handled by SQLAlchemy’s implementation without any workarounds needed.'
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.17起更改：现在SQLAlchemy的实现直接处理JSON/JSONB和ARRAY的组合，无需任何需要的变通方法。
- en: '[PRE460]'
  id: totrans-2088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: 'E.g.:'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE461]'
  id: totrans-2090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '## Range and Multirange Types'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: '## 范围和多范围类型'
- en: PostgreSQL range and multirange types are supported for the psycopg, pg8000
    and asyncpg dialects; the psycopg2 dialect supports the range types only.
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 psycopg、pg8000 和 asyncpg 方言，支持 PostgreSQL 范围和多范围类型；psycopg2 方言仅支持范围类型。
- en: 'New in version 2.0.17: Added range and multirange support for the pg8000 dialect.
    pg8000 1.29.8 or greater is required.'
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.17 版本中的新功能：为 pg8000 方言添加了范围和多范围支持。需要 pg8000 1.29.8 或更高版本。
- en: Data values being passed to the database may be passed as string values or by
    using the [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    data object.
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递给数据库的数据值可以作为字符串值传递，也可以使用 [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 数据对象。
- en: 'New in version 2.0: Added the backend-agnostic [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object used to indicate ranges. The `psycopg2`-specific
    range classes are no longer exposed and are only used internally by that particular
    dialect.'
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能：添加了与后端无关的 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    对象，用于表示范围。`psycopg2`-特定的范围类不再公开，仅由该特定方言内部使用。
- en: 'E.g. an example of a fully typed model using the [`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE
    "sqlalchemy.dialects.postgresql.TSRANGE") datatype:'
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 [`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE "sqlalchemy.dialects.postgresql.TSRANGE")
    数据类型的完全类型化模型示例：
- en: '[PRE462]'
  id: totrans-2097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: 'To represent data for the `during` column above, the [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") type is a simple dataclass that will represent
    the bounds of the range. Below illustrates an INSERT of a row into the above `room_booking`
    table:'
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示上述 `during` 列的数据，[`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    类型是一个简单的数据类，用于表示范围的边界。下面说明了将行插入上述 `room_booking` 表的示例：
- en: '[PRE463]'
  id: totrans-2099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: 'Selecting from any range column will also return [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects as indicated:'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 从任何范围列中选择也将返回 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    对象，如下所示：
- en: '[PRE464]'
  id: totrans-2101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: 'The available range datatypes are as follows:'
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的范围数据类型如下：
- en: '[`INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE "sqlalchemy.dialects.postgresql.INT4RANGE")'
  id: totrans-2103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE "sqlalchemy.dialects.postgresql.INT4RANGE")'
- en: '[`INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE "sqlalchemy.dialects.postgresql.INT8RANGE")'
  id: totrans-2104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE "sqlalchemy.dialects.postgresql.INT8RANGE")'
- en: '[`NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE "sqlalchemy.dialects.postgresql.NUMRANGE")'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE "sqlalchemy.dialects.postgresql.NUMRANGE")'
- en: '[`DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE "sqlalchemy.dialects.postgresql.DATERANGE")'
  id: totrans-2106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE "sqlalchemy.dialects.postgresql.DATERANGE")'
- en: '[`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE "sqlalchemy.dialects.postgresql.TSRANGE")'
  id: totrans-2107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE "sqlalchemy.dialects.postgresql.TSRANGE")'
- en: '[`TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE "sqlalchemy.dialects.postgresql.TSTZRANGE")'
  id: totrans-2108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE "sqlalchemy.dialects.postgresql.TSTZRANGE")'
- en: '| Object Name | Description |'
  id: totrans-2109
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Range](#sqlalchemy.dialects.postgresql.Range) | Represent a PostgreSQL range.
    |'
  id: totrans-2111
  prefs: []
  type: TYPE_TB
  zh: '| [Range](#sqlalchemy.dialects.postgresql.Range) | 表示一个 PostgreSQL 范围。 |'
- en: '[PRE465]'
  id: totrans-2112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Represent a PostgreSQL range.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 PostgreSQL 范围。
- en: 'E.g.:'
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE466]'
  id: totrans-2115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: The calling style is similar to that of psycopg and psycopg2, in part to allow
    easier migration from previous SQLAlchemy versions that used these objects directly.
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 调用风格与 psycopg 和 psycopg2 类似，部分原因是为了方便从直接使用这些对象的以前的 SQLAlchemy 版本进行迁移。
- en: 'Parameters:'
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`lower` – Lower bound value, or None'
  id: totrans-2118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower` – 下限值，或为 None'
- en: '`upper` – Upper bound value, or None'
  id: totrans-2119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upper` – 上限值，或为 None'
- en: '`bounds` – keyword-only, optional string value that is one of `"()"`, `"[)"`,
    `"(]"`, `"[]"`. Defaults to `"[)"`.'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bounds` – 仅关键字，可选的字符串值，是 `"()"`、`"[)"`、`"(]"`、`"[]"` 中的一个。默认为 `"[)"`。'
- en: '`empty` – keyword-only, optional bool indicating this is an “empty” range'
  id: totrans-2121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty` – 仅关键字，可选的布尔值，指示这是一个“空”范围'
- en: New in version 2.0.
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: '**Members**'
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.dialects.postgresql.Range.__eq__), [adjacent_to()](#sqlalchemy.dialects.postgresql.Range.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.Range.contained_by), [contains()](#sqlalchemy.dialects.postgresql.Range.contains),
    [difference()](#sqlalchemy.dialects.postgresql.Range.difference), [intersection()](#sqlalchemy.dialects.postgresql.Range.intersection),
    [is_empty](#sqlalchemy.dialects.postgresql.Range.is_empty), [isempty](#sqlalchemy.dialects.postgresql.Range.isempty),
    [lower](#sqlalchemy.dialects.postgresql.Range.lower), [lower_inc](#sqlalchemy.dialects.postgresql.Range.lower_inc),
    [lower_inf](#sqlalchemy.dialects.postgresql.Range.lower_inf), [not_extend_left_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.Range.overlaps), [strictly_left_of()](#sqlalchemy.dialects.postgresql.Range.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.Range.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.Range.union), [upper](#sqlalchemy.dialects.postgresql.Range.upper),
    [upper_inc](#sqlalchemy.dialects.postgresql.Range.upper_inc), [upper_inf](#sqlalchemy.dialects.postgresql.Range.upper_inf)'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.dialects.postgresql.Range.__eq__), [adjacent_to()](#sqlalchemy.dialects.postgresql.Range.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.Range.contained_by), [contains()](#sqlalchemy.dialects.postgresql.Range.contains),
    [difference()](#sqlalchemy.dialects.postgresql.Range.difference), [intersection()](#sqlalchemy.dialects.postgresql.Range.intersection),
    [is_empty](#sqlalchemy.dialects.postgresql.Range.is_empty), [isempty](#sqlalchemy.dialects.postgresql.Range.isempty),
    [lower](#sqlalchemy.dialects.postgresql.Range.lower), [lower_inc](#sqlalchemy.dialects.postgresql.Range.lower_inc),
    [lower_inf](#sqlalchemy.dialects.postgresql.Range.lower_inf), [not_extend_left_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.Range.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.Range.overlaps), [strictly_left_of()](#sqlalchemy.dialects.postgresql.Range.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.Range.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.Range.union), [upper](#sqlalchemy.dialects.postgresql.Range.upper),
    [upper_inc](#sqlalchemy.dialects.postgresql.Range.upper_inc), [upper_inf](#sqlalchemy.dialects.postgresql.Range.upper_inf)'
- en: '**Class signature**'
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") (`typing.Generic`)
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") (`typing.Generic`)
- en: '[PRE467]'
  id: totrans-2127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Compare this range to the other taking into account bounds inclusivity, returning
    `True` if they are equal.
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑边界包含性比较此范围与其他范围，如果它们相等则返回`True`。
- en: '[PRE468]'
  id: totrans-2129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: Determine whether this range is adjacent to the other.
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否与其他范围相邻。
- en: '[PRE469]'
  id: totrans-2131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: Determine whether this range is a contained by other.
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否被其他范围包含。
- en: '[PRE470]'
  id: totrans-2133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: Determine whether this range contains value.
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否包含值。
- en: '[PRE471]'
  id: totrans-2135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: Compute the difference between this range and the other.
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: 计算此范围与其他范围之间的差异。
- en: This raises a `ValueError` exception if the two ranges are “disjunct”, that
    is neither adjacent nor overlapping.
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个范围是“不相交”的，即既不相邻也不重叠，则引发`ValueError`异常。
- en: '[PRE472]'
  id: totrans-2138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Compute the intersection of this range with the other.
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: 计算此范围与其他范围的交集。
- en: New in version 2.0.10.
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.10中的新功能。
- en: '[PRE473]'
  id: totrans-2141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: A synonym for the ‘empty’ attribute.
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: “空”属性的同义词。
- en: '[PRE474]'
  id: totrans-2143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: A synonym for the ‘empty’ attribute.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: “空”属性的同义词。
- en: '[PRE475]'
  id: totrans-2145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: the lower bound
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: 下限
- en: '[PRE476]'
  id: totrans-2147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Return True if the lower bound is inclusive.
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下限是包含的，则返回True。
- en: '[PRE477]'
  id: totrans-2149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: Return True if this range is non-empty and lower bound is infinite.
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此范围非空且下限为无穷大，则返回True。
- en: '[PRE478]'
  id: totrans-2151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Determine whether this does not extend to the left of other.
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否不延伸到其他范围的左侧。
- en: '[PRE479]'
  id: totrans-2153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Determine whether this does not extend to the right of other.
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否不延伸到其他范围的右侧。
- en: '[PRE480]'
  id: totrans-2155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: Determine whether this range overlaps with other.
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否与其他范围重叠。
- en: '[PRE481]'
  id: totrans-2157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Determine whether this range is completely to the left of other.
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否完全位于其他范围的左侧。
- en: '[PRE482]'
  id: totrans-2159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: Determine whether this range is completely to the right of other.
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此范围是否完全位于其他范围的右侧。
- en: '[PRE483]'
  id: totrans-2161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: Compute the union of this range with the other.
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: 计算此范围与其他范围的并集。
- en: This raises a `ValueError` exception if the two ranges are “disjunct”, that
    is neither adjacent nor overlapping.
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个范围是“不相交”的，即既不相邻也不重叠，则引发`ValueError`异常。
- en: '[PRE484]'
  id: totrans-2164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: the upper bound
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
  zh: 上限
- en: '[PRE485]'
  id: totrans-2166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: Return True if the upper bound is inclusive.
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上限是包含的，则返回True。
- en: '[PRE486]'
  id: totrans-2168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: Return True if this range is non-empty and the upper bound is infinite.
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此范围非空且上限为无穷大，则返回True。
- en: Multiranges
  id: totrans-2170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多范围
- en: Multiranges are supported by PostgreSQL 14 and above. SQLAlchemy’s multirange
    datatypes deal in lists of [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    types.
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 14及以上版本支持多范围。SQLAlchemy的多范围数据类型处理[`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")类型的列表。
- en: Multiranges are supported on the psycopg, asyncpg, and pg8000 dialects **only**.
    The psycopg2 dialect, which is SQLAlchemy’s default `postgresql` dialect, **does
    not** support multirange datatypes.
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: 多范围仅受 psycopg、asyncpg 和 pg8000 方言的支持**。**SQLAlchemy 的默认 `postgresql` 方言 psycopg2
    方言**不**支持多范围数据类型。
- en: 'New in version 2.0: Added support for MULTIRANGE datatypes. SQLAlchemy represents
    a multirange value as a list of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects.'
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：增加了对 MULTIRANGE 数据类型的支持。SQLAlchemy 将多范围值表示为 [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 对象的列表。
- en: 'New in version 2.0.17: Added multirange support for the pg8000 dialect. pg8000
    1.29.8 or greater is required.'
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.17：为 pg8000 方言添加了多范围支持。需要 pg8000 1.29.8 或更高版本。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26：添加了 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    序列。
- en: 'The example below illustrates use of the [`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") datatype:'
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了 [`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")
    数据类型的使用：
- en: '[PRE487]'
  id: totrans-2177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: 'Illustrating insertion and selecting of a record:'
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 插入和选择记录的示例：
- en: '[PRE488]'
  id: totrans-2179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: Note
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the above example, the list of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") types as handled by the ORM will not automatically
    detect in-place changes to a particular list value; to update list values with
    the ORM, either re-assign a new list to the attribute, or use the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") type modifier. See the section [Mutation
    Tracking](../orm/extensions/mutable.html) for background.
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，ORM 处理的 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    类型列表不会自动检测特定列表值的就地更改；要使用 ORM 更新列表值，要么重新分配一个新列表给属性，要么使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类型修饰符。请参阅 [Mutation Tracking](../orm/extensions/mutable.html)
    部分了解背景信息。
- en: '#### Use of a MultiRange sequence to infer the multirange type'
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用 MultiRange 序列推断多范围类型'
- en: 'When using a multirange as a literal without specifying the type the utility
    [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    sequence can be used:'
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有指定类型的情况下使用多范围作为文字值时，可以使用实用程序 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") 序列：
- en: '[PRE489]'
  id: totrans-2184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Using a simple `list` instead of [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") would require manually setting the
    type of the literal value to the appropriate multirange type.
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的 `list` 而不是 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    将需要手动设置文字值的类型为适当的多范围类型。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26：添加了 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    序列。
- en: 'The available multirange datatypes are as follows:'
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的多范围数据类型如下：
- en: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
  id: totrans-2188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
- en: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
  id: totrans-2189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
- en: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
  id: totrans-2190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
- en: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
  id: totrans-2191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
- en: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
  id: totrans-2192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
- en: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")'
  id: totrans-2193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")'
- en: Multiranges
  id: totrans-2194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多范围
- en: Multiranges are supported by PostgreSQL 14 and above. SQLAlchemy’s multirange
    datatypes deal in lists of [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    types.
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: 多范围在 PostgreSQL 14 及以上版本中受支持。SQLAlchemy 的多范围数据类型处理 [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 类型的列表。
- en: Multiranges are supported on the psycopg, asyncpg, and pg8000 dialects **only**.
    The psycopg2 dialect, which is SQLAlchemy’s default `postgresql` dialect, **does
    not** support multirange datatypes.
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: 仅支持 psycopg、asyncpg 和 pg8000 方言的多范围。SQLAlchemy 的默认 `postgresql` 方言 psycopg2
    方言 **不支持** 多范围数据类型。
- en: 'New in version 2.0: Added support for MULTIRANGE datatypes. SQLAlchemy represents
    a multirange value as a list of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects.'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中添加了对 MULTIRANGE 数据类型的支持。SQLAlchemy 将多范围值表示为 [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 对象的列表。
- en: 'New in version 2.0.17: Added multirange support for the pg8000 dialect. pg8000
    1.29.8 or greater is required.'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.17 中为 pg8000 方言添加了多范围支持。需要 pg8000 1.29.8 或更高版本。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26 中新增了[`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    序列。
- en: 'The example below illustrates use of the [`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") datatype:'
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了使用 [`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")
    数据类型：
- en: '[PRE490]'
  id: totrans-2201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: 'Illustrating insertion and selecting of a record:'
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: 说明插入和选择记录：
- en: '[PRE491]'
  id: totrans-2203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: Note
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the above example, the list of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") types as handled by the ORM will not automatically
    detect in-place changes to a particular list value; to update list values with
    the ORM, either re-assign a new list to the attribute, or use the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") type modifier. See the section [Mutation
    Tracking](../orm/extensions/mutable.html) for background.
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，ORM 处理的 [`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")
    类型列表不会自动检测到特定列表值的就地更改；要使用 ORM 更新列表值，要么重新分配一个新列表给属性，要么使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类型修饰符。请参阅 [Mutation Tracking](../orm/extensions/mutable.html)
    部分了解背景信息。
- en: '#### Use of a MultiRange sequence to infer the multirange type'
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用 MultiRange 序列推断多范围类型'
- en: 'When using a multirange as a literal without specifying the type the utility
    [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    sequence can be used:'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: 当在不指定类型的情况下使用多范围作为文字时，可以使用实用程序 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") 序列：
- en: '[PRE492]'
  id: totrans-2208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Using a simple `list` instead of [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") would require manually setting the
    type of the literal value to the appropriate multirange type.
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的 `list` 而不是 [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    将需要手动设置文字值的类型为适当的多范围类型。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.26 中新增了[`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    序列。
- en: 'The available multirange datatypes are as follows:'
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的多范围数据类型如下：
- en: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
  id: totrans-2212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
- en: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
  id: totrans-2213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
- en: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
- en: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
  id: totrans-2215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
- en: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
- en: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")  ####
    Use of a MultiRange sequence to infer the multirange type'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")  ####
    使用 MultiRange 序列推断多范围类型'
- en: 'When using a multirange as a literal without specifying the type the utility
    [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")
    sequence can be used:'
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: 当将多范围用作字面值而不指定类型时，可以使用实用程序[`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange")序列：
- en: '[PRE493]'
  id: totrans-2219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: Using a simple `list` instead of [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") would require manually setting the
    type of the literal value to the appropriate multirange type.
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的`list`而不是[`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")将需要手动设置字面值的类型为适当的多范围类型。
- en: 'New in version 2.0.26: [`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") sequence added.'
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.26中新增了[`MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange "sqlalchemy.dialects.postgresql.MultiRange")序列。
- en: 'The available multirange datatypes are as follows:'
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的多范围数据类型如下：
- en: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE "sqlalchemy.dialects.postgresql.INT4MULTIRANGE")'
- en: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
  id: totrans-2224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE "sqlalchemy.dialects.postgresql.INT8MULTIRANGE")'
- en: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE "sqlalchemy.dialects.postgresql.NUMMULTIRANGE")'
- en: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
  id: totrans-2226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE "sqlalchemy.dialects.postgresql.DATEMULTIRANGE")'
- en: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
  id: totrans-2227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE "sqlalchemy.dialects.postgresql.TSMULTIRANGE")'
- en: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")'
  id: totrans-2228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE")'
- en: '## Network Data Types'
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: '## 网络数据类型'
- en: The included networking datatypes are [`INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET"), [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR"), [`MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR").
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的网络数据类型有[`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")、[`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR")、[`MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR")。
- en: For [`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")
    and [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR "sqlalchemy.dialects.postgresql.CIDR")
    datatypes, conditional support is available for these datatypes to send and retrieve
    Python `ipaddress` objects including `ipaddress.IPv4Network`, `ipaddress.IPv6Network`,
    `ipaddress.IPv4Address`, `ipaddress.IPv6Address`. This support is currently **the
    default behavior of the DBAPI itself, and varies per DBAPI. SQLAlchemy does not
    yet implement its own network address conversion logic**.
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`INET`](#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")和[`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR")数据类型，这些数据类型的条件支持可用于发送和检索Python `ipaddress`对象，包括`ipaddress.IPv4Network`、`ipaddress.IPv6Network`、`ipaddress.IPv4Address`、`ipaddress.IPv6Address`。这种支持目前是**DBAPI本身的默认行为，并且因DBAPI而异。SQLAlchemy尚未实现自己的网络地址转换逻辑**。
- en: The [psycopg](#postgresql-psycopg) and [asyncpg](#postgresql-asyncpg) support
    these datatypes fully; objects from the `ipaddress` family are returned in rows
    by default.
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg](#postgresql-psycopg)和[asyncpg](#postgresql-asyncpg)完全支持这些数据类型；默认情况下，`ipaddress`系列的对象以行的形式返回。'
- en: The [psycopg2](#postgresql-psycopg2) dialect only sends and receives strings.
  id: totrans-2233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[psycopg2](#postgresql-psycopg2)方言只发送和接收字符串。'
- en: The [pg8000](#postgresql-pg8000) dialect supports `ipaddress.IPv4Address` and
    `ipaddress.IPv6Address` objects for the [`INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") datatype, but uses strings for [`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") types.
  id: totrans-2234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pg8000](#postgresql-pg8000)方言支持`ipaddress.IPv4Address`和`ipaddress.IPv6Address`对象用于[`INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET")数据类型，但对于[`CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR")类型使用字符串。'
- en: 'To **normalize all the above DBAPIs to only return strings**, use the `native_inet_types`
    parameter, passing a value of `False`:'
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: 要**将所有上述DBAPI规范化为仅返回字符串**，请使用`native_inet_types`参数，传递一个值为`False`：
- en: '[PRE494]'
  id: totrans-2236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: With the above parameter, the `psycopg`, `asyncpg` and `pg8000` dialects will
    disable the DBAPI’s adaptation of these types and will return only strings, matching
    the behavior of the older `psycopg2` dialect.
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述参数，`psycopg`、`asyncpg` 和 `pg8000` 方言将禁用 DBAPI 对这些类型的自适应，并且仅返回字符串，与旧的 `psycopg2`
    方言的行为相匹配。
- en: The parameter may also be set to `True`, where it will have the effect of raising
    `NotImplementedError` for those backends that don’t support, or don’t yet fully
    support, conversion of rows to Python `ipaddress` datatypes (currently psycopg2
    and pg8000).
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数也可以设置为 `True`，在这种情况下，对于不支持或尚未完全支持将行转换为 Python `ipaddress` 数据类型的后端（当前为 psycopg2
    和 pg8000），将引发 `NotImplementedError`。
- en: 'New in version 2.0.18: - added the `native_inet_types` parameter.'
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.18 版本新增：- 添加了 `native_inet_types` 参数。
- en: PostgreSQL Data Types
  id: totrans-2240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL 数据类型
- en: 'As with all SQLAlchemy dialects, all UPPERCASE types that are known to be valid
    with PostgreSQL are importable from the top level dialect, whether they originate
    from [`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types "sqlalchemy.types")
    or from the local dialect:'
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有 SQLAlchemy 方言一样，所有已知与 PostgreSQL 兼容的大写类型都可以从顶层方言导入，无论其来自[`sqlalchemy.types`](../core/type_basics.html#module-sqlalchemy.types
    "sqlalchemy.types") 还是本地方言：
- en: '[PRE495]'
  id: totrans-2242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: 'Types which are specific to PostgreSQL, or have PostgreSQL-specific construction
    arguments, are as follows:'
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 PostgreSQL 的类型，或具有 PostgreSQL 特定的构造参数，如下所示：
- en: '| Object Name | Description |'
  id: totrans-2244
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2245
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AbstractMultiRange](#sqlalchemy.dialects.postgresql.AbstractMultiRange)
    | Base for PostgreSQL MULTIRANGE types. |'
  id: totrans-2246
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractMultiRange](#sqlalchemy.dialects.postgresql.AbstractMultiRange)
    | PostgreSQL MULTIRANGE 类型的基类。|'
- en: '| [AbstractRange](#sqlalchemy.dialects.postgresql.AbstractRange) | Base class
    for single and multi Range SQL types. |'
  id: totrans-2247
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractRange](#sqlalchemy.dialects.postgresql.AbstractRange) | 单个和多个 Range
    SQL 类型的基类。|'
- en: '| [AbstractSingleRange](#sqlalchemy.dialects.postgresql.AbstractSingleRange)
    | Base for PostgreSQL RANGE types. |'
  id: totrans-2248
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractSingleRange](#sqlalchemy.dialects.postgresql.AbstractSingleRange)
    | PostgreSQL RANGE 类型的基类。|'
- en: '| [ARRAY](#sqlalchemy.dialects.postgresql.ARRAY) | PostgreSQL ARRAY type. |'
  id: totrans-2249
  prefs: []
  type: TYPE_TB
  zh: '| [ARRAY](#sqlalchemy.dialects.postgresql.ARRAY) | PostgreSQL ARRAY 类型。|'
- en: '| [BIT](#sqlalchemy.dialects.postgresql.BIT) |  |'
  id: totrans-2250
  prefs: []
  type: TYPE_TB
  zh: '| [BIT](#sqlalchemy.dialects.postgresql.BIT) |  |'
- en: '| [BYTEA](#sqlalchemy.dialects.postgresql.BYTEA) |  |'
  id: totrans-2251
  prefs: []
  type: TYPE_TB
  zh: '| [BYTEA](#sqlalchemy.dialects.postgresql.BYTEA) |  |'
- en: '| [CIDR](#sqlalchemy.dialects.postgresql.CIDR) |  |'
  id: totrans-2252
  prefs: []
  type: TYPE_TB
  zh: '| [CIDR](#sqlalchemy.dialects.postgresql.CIDR) |  |'
- en: '| [CITEXT](#sqlalchemy.dialects.postgresql.CITEXT) | Provide the PostgreSQL
    CITEXT type. |'
  id: totrans-2253
  prefs: []
  type: TYPE_TB
  zh: '| [CITEXT](#sqlalchemy.dialects.postgresql.CITEXT) | 提供 PostgreSQL 的 CITEXT
    类型。|'
- en: '| [DATEMULTIRANGE](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE) | Represent
    the PostgreSQL DATEMULTIRANGE type. |'
  id: totrans-2254
  prefs: []
  type: TYPE_TB
  zh: '| [DATEMULTIRANGE](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE) | 代表 PostgreSQL
    的 DATEMULTIRANGE 类型。|'
- en: '| [DATERANGE](#sqlalchemy.dialects.postgresql.DATERANGE) | Represent the PostgreSQL
    DATERANGE type. |'
  id: totrans-2255
  prefs: []
  type: TYPE_TB
  zh: '| [DATERANGE](#sqlalchemy.dialects.postgresql.DATERANGE) | 代表 PostgreSQL 的
    DATERANGE 类型。|'
- en: '| [DOMAIN](#sqlalchemy.dialects.postgresql.DOMAIN) | Represent the DOMAIN PostgreSQL
    type. |'
  id: totrans-2256
  prefs: []
  type: TYPE_TB
  zh: '| [DOMAIN](#sqlalchemy.dialects.postgresql.DOMAIN) | 代表 PostgreSQL 的 DOMAIN
    类型。|'
- en: '| [ENUM](#sqlalchemy.dialects.postgresql.ENUM) | PostgreSQL ENUM type. |'
  id: totrans-2257
  prefs: []
  type: TYPE_TB
  zh: '| [ENUM](#sqlalchemy.dialects.postgresql.ENUM) | PostgreSQL ENUM 类型。|'
- en: '| [HSTORE](#sqlalchemy.dialects.postgresql.HSTORE) | Represent the PostgreSQL
    HSTORE type. |'
  id: totrans-2258
  prefs: []
  type: TYPE_TB
  zh: '| [HSTORE](#sqlalchemy.dialects.postgresql.HSTORE) | 代表 PostgreSQL 的 HSTORE
    类型。|'
- en: '| [INET](#sqlalchemy.dialects.postgresql.INET) |  |'
  id: totrans-2259
  prefs: []
  type: TYPE_TB
  zh: '| [INET](#sqlalchemy.dialects.postgresql.INET) |  |'
- en: '| [INT4MULTIRANGE](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE) | Represent
    the PostgreSQL INT4MULTIRANGE type. |'
  id: totrans-2260
  prefs: []
  type: TYPE_TB
  zh: '| [INT4MULTIRANGE](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE) | 代表 PostgreSQL
    的 INT4MULTIRANGE 类型。|'
- en: '| [INT4RANGE](#sqlalchemy.dialects.postgresql.INT4RANGE) | Represent the PostgreSQL
    INT4RANGE type. |'
  id: totrans-2261
  prefs: []
  type: TYPE_TB
  zh: '| [INT4RANGE](#sqlalchemy.dialects.postgresql.INT4RANGE) | 代表 PostgreSQL 的
    INT4RANGE 类型。|'
- en: '| [INT8MULTIRANGE](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE) | Represent
    the PostgreSQL INT8MULTIRANGE type. |'
  id: totrans-2262
  prefs: []
  type: TYPE_TB
  zh: '| [INT8MULTIRANGE](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE) | 代表 PostgreSQL
    的 INT8MULTIRANGE 类型。|'
- en: '| [INT8RANGE](#sqlalchemy.dialects.postgresql.INT8RANGE) | Represent the PostgreSQL
    INT8RANGE type. |'
  id: totrans-2263
  prefs: []
  type: TYPE_TB
  zh: '| [INT8RANGE](#sqlalchemy.dialects.postgresql.INT8RANGE) | 代表 PostgreSQL 的
    INT8RANGE 类型。|'
- en: '| [INTERVAL](#sqlalchemy.dialects.postgresql.INTERVAL) | PostgreSQL INTERVAL
    type. |'
  id: totrans-2264
  prefs: []
  type: TYPE_TB
  zh: '| [INTERVAL](#sqlalchemy.dialects.postgresql.INTERVAL) | PostgreSQL INTERVAL
    类型。|'
- en: '| [JSON](#sqlalchemy.dialects.postgresql.JSON) | Represent the PostgreSQL JSON
    type. |'
  id: totrans-2265
  prefs: []
  type: TYPE_TB
  zh: '| [JSON](#sqlalchemy.dialects.postgresql.JSON) | 代表 PostgreSQL 的 JSON 类型。|'
- en: '| [JSONB](#sqlalchemy.dialects.postgresql.JSONB) | Represent the PostgreSQL
    JSONB type. |'
  id: totrans-2266
  prefs: []
  type: TYPE_TB
  zh: '| [JSONB](#sqlalchemy.dialects.postgresql.JSONB) | 代表 PostgreSQL 的 JSONB 类型。|'
- en: '| [JSONPATH](#sqlalchemy.dialects.postgresql.JSONPATH) | JSON Path Type. |'
  id: totrans-2267
  prefs: []
  type: TYPE_TB
  zh: '| [JSONPATH](#sqlalchemy.dialects.postgresql.JSONPATH) | JSON Path 类型。|'
- en: '| [MACADDR](#sqlalchemy.dialects.postgresql.MACADDR) |  |'
  id: totrans-2268
  prefs: []
  type: TYPE_TB
  zh: '| [MACADDR](#sqlalchemy.dialects.postgresql.MACADDR) |  |'
- en: '| [MACADDR8](#sqlalchemy.dialects.postgresql.MACADDR8) |  |'
  id: totrans-2269
  prefs: []
  type: TYPE_TB
  zh: '| [MACADDR8](#sqlalchemy.dialects.postgresql.MACADDR8) |  |'
- en: '| [MONEY](#sqlalchemy.dialects.postgresql.MONEY) | Provide the PostgreSQL MONEY
    type. |'
  id: totrans-2270
  prefs: []
  type: TYPE_TB
  zh: '| [MONEY](#sqlalchemy.dialects.postgresql.MONEY) | 提供 PostgreSQL MONEY 类型。
    |'
- en: '| [MultiRange](#sqlalchemy.dialects.postgresql.MultiRange) | Represents a multirange
    sequence. |'
  id: totrans-2271
  prefs: []
  type: TYPE_TB
  zh: '| [MultiRange](#sqlalchemy.dialects.postgresql.MultiRange) | 表示一个多范围序列。 |'
- en: '| [NUMMULTIRANGE](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE) | Represent
    the PostgreSQL NUMMULTIRANGE type. |'
  id: totrans-2272
  prefs: []
  type: TYPE_TB
  zh: '| [NUMMULTIRANGE](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE) | 表示 PostgreSQL
    NUMMULTIRANGE 类型。 |'
- en: '| [NUMRANGE](#sqlalchemy.dialects.postgresql.NUMRANGE) | Represent the PostgreSQL
    NUMRANGE type. |'
  id: totrans-2273
  prefs: []
  type: TYPE_TB
  zh: '| [NUMRANGE](#sqlalchemy.dialects.postgresql.NUMRANGE) | 表示 PostgreSQL NUMRANGE
    类型。 |'
- en: '| [OID](#sqlalchemy.dialects.postgresql.OID) | Provide the PostgreSQL OID type.
    |'
  id: totrans-2274
  prefs: []
  type: TYPE_TB
  zh: '| [OID](#sqlalchemy.dialects.postgresql.OID) | 提供 PostgreSQL OID 类型。 |'
- en: '| [REGCLASS](#sqlalchemy.dialects.postgresql.REGCLASS) | Provide the PostgreSQL
    REGCLASS type. |'
  id: totrans-2275
  prefs: []
  type: TYPE_TB
  zh: '| [REGCLASS](#sqlalchemy.dialects.postgresql.REGCLASS) | 提供 PostgreSQL REGCLASS
    类型。 |'
- en: '| [REGCONFIG](#sqlalchemy.dialects.postgresql.REGCONFIG) | Provide the PostgreSQL
    REGCONFIG type. |'
  id: totrans-2276
  prefs: []
  type: TYPE_TB
  zh: '| [REGCONFIG](#sqlalchemy.dialects.postgresql.REGCONFIG) | 提供 PostgreSQL REGCONFIG
    类型。 |'
- en: '| [TIME](#sqlalchemy.dialects.postgresql.TIME) | PostgreSQL TIME type. |'
  id: totrans-2277
  prefs: []
  type: TYPE_TB
  zh: '| [TIME](#sqlalchemy.dialects.postgresql.TIME) | PostgreSQL TIME 类型。 |'
- en: '| [TIMESTAMP](#sqlalchemy.dialects.postgresql.TIMESTAMP) | Provide the PostgreSQL
    TIMESTAMP type. |'
  id: totrans-2278
  prefs: []
  type: TYPE_TB
  zh: '| [TIMESTAMP](#sqlalchemy.dialects.postgresql.TIMESTAMP) | 提供 PostgreSQL TIMESTAMP
    类型。 |'
- en: '| [TSMULTIRANGE](#sqlalchemy.dialects.postgresql.TSMULTIRANGE) | Represent
    the PostgreSQL TSRANGE type. |'
  id: totrans-2279
  prefs: []
  type: TYPE_TB
  zh: '| [TSMULTIRANGE](#sqlalchemy.dialects.postgresql.TSMULTIRANGE) | 表示 PostgreSQL
    TSRANGE 类型。 |'
- en: '| [TSQUERY](#sqlalchemy.dialects.postgresql.TSQUERY) | Provide the PostgreSQL
    TSQUERY type. |'
  id: totrans-2280
  prefs: []
  type: TYPE_TB
  zh: '| [TSQUERY](#sqlalchemy.dialects.postgresql.TSQUERY) | 提供 PostgreSQL TSQUERY
    类型。 |'
- en: '| [TSRANGE](#sqlalchemy.dialects.postgresql.TSRANGE) | Represent the PostgreSQL
    TSRANGE type. |'
  id: totrans-2281
  prefs: []
  type: TYPE_TB
  zh: '| [TSRANGE](#sqlalchemy.dialects.postgresql.TSRANGE) | 表示 PostgreSQL TSRANGE
    类型。 |'
- en: '| [TSTZMULTIRANGE](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE) | Represent
    the PostgreSQL TSTZRANGE type. |'
  id: totrans-2282
  prefs: []
  type: TYPE_TB
  zh: '| [TSTZMULTIRANGE](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE) | 表示 PostgreSQL
    TSTZRANGE 类型。 |'
- en: '| [TSTZRANGE](#sqlalchemy.dialects.postgresql.TSTZRANGE) | Represent the PostgreSQL
    TSTZRANGE type. |'
  id: totrans-2283
  prefs: []
  type: TYPE_TB
  zh: '| [TSTZRANGE](#sqlalchemy.dialects.postgresql.TSTZRANGE) | 表示 PostgreSQL TSTZRANGE
    类型。 |'
- en: '| [TSVECTOR](#sqlalchemy.dialects.postgresql.TSVECTOR) | The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") type implements the PostgreSQL text
    search type TSVECTOR. |'
  id: totrans-2284
  prefs: []
  type: TYPE_TB
  zh: '| [TSVECTOR](#sqlalchemy.dialects.postgresql.TSVECTOR) | [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") 类型实现了 PostgreSQL 文本搜索类型 TSVECTOR。 |'
- en: '[PRE496]'
  id: totrans-2285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: Base class for single and multi Range SQL types.
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: 单范围和多范围 SQL 类型的基类。
- en: '**Members**'
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[adjacent_to()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains),
    [difference()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.difference),
    [intersection()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.intersection),
    [not_extend_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.overlaps),
    [strictly_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.union)'
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: '[adjacent_to()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.adjacent_to),
    [contained_by()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains),
    [difference()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.difference),
    [intersection()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.intersection),
    [not_extend_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_left_of),
    [not_extend_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.not_extend_right_of),
    [overlaps()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.overlaps),
    [strictly_left_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_left_of),
    [strictly_right_of()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.strictly_right_of),
    [union()](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.union)'
- en: '**Class signature**'
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.AbstractRange") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.AbstractRange")（[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE497]'
  id: totrans-2291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Define comparison operations for range types.
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: 为范围类型定义比较操作。
- en: '**Class signature**'
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory`](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory") (`sqlalchemy.types.Comparator`)
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory`](#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory")（`sqlalchemy.types.Comparator`）
- en: '[PRE498]'
  id: totrans-2295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: Boolean expression. Returns true if the range in the column is adjacent to the
    range in the operand.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列中的范围与操作数中的范围相邻，则返回true。
- en: '[PRE499]'
  id: totrans-2297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: Boolean expression. Returns true if the column is contained within the right
    hand operand.
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列包含在右操作数内，则返回true。
- en: '[PRE500]'
  id: totrans-2299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: Boolean expression. Returns true if the right hand operand, which can be an
    element or a range, is contained within the column.
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果右操作数（可以是元素或范围）包含在列中，则返回true。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符可能会忽略 kwargs，但需要符合 API 标准。
- en: '[PRE501]'
  id: totrans-2302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: Range expression. Returns the union of the two ranges. Will raise an exception
    if the resulting range is not contiguous.
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表达式。返回两个范围的并集。如果结果范围不连续，将引发异常。
- en: '[PRE502]'
  id: totrans-2304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Range expression. Returns the intersection of the two ranges. Will raise an
    exception if the resulting range is not contiguous.
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表达式。返回两个范围的交集。如果结果范围不连续，将引发异常。
- en: '[PRE503]'
  id: totrans-2306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: Boolean expression. Returns true if the range in the column does not extend
    left of the range in the operand.
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列中的范围不向左延伸到操作数中的范围，则返回true。
- en: '[PRE504]'
  id: totrans-2308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: Boolean expression. Returns true if the range in the column does not extend
    right of the range in the operand.
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列中的范围不向右延伸到操作数中的范围，则返回true。
- en: '[PRE505]'
  id: totrans-2310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: Boolean expression. Returns true if the column overlaps (has points in common
    with) the right hand operand.
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列与右操作数重叠（具有共同的点），则返回true。
- en: '[PRE506]'
  id: totrans-2312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: Boolean expression. Returns true if the column is strictly left of the right
    hand operand.
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列严格位于右操作数的左侧，则返回true。
- en: '[PRE507]'
  id: totrans-2314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: Boolean expression. Returns true if the column is strictly right of the right
    hand operand.
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。如果列严格位于右操作数的右侧，则返回true。
- en: '[PRE508]'
  id: totrans-2316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: Range expression. Returns the union of the two ranges. Will raise an exception
    if the resulting range is not contiguous.
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表达式。返回两个范围的并集。如果结果范围不连续，将引发异常。
- en: '[PRE509]'
  id: totrans-2318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: Base for PostgreSQL RANGE types.
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 范围类型的基类。
- en: These are types that return a single [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object.
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回单个[`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")对象的类型。
- en: See also
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL range functions](https://www.postgresql.org/docs/current/static/functions-range.html)'
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 范围函数](https://www.postgresql.org/docs/current/static/functions-range.html)'
- en: '**Class signature**'
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.AbstractSingleRange") ([`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange"))
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.AbstractSingleRange")（[`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange")）
- en: '[PRE510]'
  id: totrans-2325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: Base for PostgreSQL MULTIRANGE types.
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL MULTIRANGE 类型的基类。
- en: these are types that return a sequence of [`Range`](#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") objects.
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回一系列[`Range`](#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")对象的类型。
- en: '**Class signature**'
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.AbstractMultiRange") ([`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange"))
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.AbstractMultiRange")（[`sqlalchemy.dialects.postgresql.ranges.AbstractRange`](#sqlalchemy.dialects.postgresql.AbstractRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractRange")）
- en: '[PRE511]'
  id: totrans-2330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: PostgreSQL ARRAY type.
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 ARRAY 类型。
- en: 'The [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type is constructed in the same way as the core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type; a member type is required, and a number of dimensions
    is recommended if the type is to be used for more than one dimension:'
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型的构造方式与核心 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型相同；需要一个成员类型，并且建议如果要用于多个维度，则推荐指定维度数量：'
- en: '[PRE512]'
  id: totrans-2333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: 'The [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type provides all operations defined on the core [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type, including support for “dimensions”, indexed access,
    and simple matching such as [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all"). [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") class also provides PostgreSQL-specific
    methods for containment operations, including [`Comparator.contains()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains") [`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by"), and [`Comparator.overlap()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap"), e.g.:'
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型提供了在核心 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型上定义的所有操作，包括对“维度”的支持，索引访问以及简单匹配，如 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 和 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")。 [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类还提供了用于包含操作的 PostgreSQL 特定方法，包括 [`Comparator.contains()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains")、[`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by") 和 [`Comparator.overlap()`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap")，例如：'
- en: '[PRE513]'
  id: totrans-2335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: Indexed access is one-based by default, to match that of PostgreSQL; for zero-based
    indexed access, set [`ARRAY.zero_indexes`](#sqlalchemy.dialects.postgresql.ARRAY.params.zero_indexes
    "sqlalchemy.dialects.postgresql.ARRAY").
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况��，索引访问是基于一的，以匹配 PostgreSQL 的索引访问；要进行基于零的索引访问，请设置 [`ARRAY.zero_indexes`](#sqlalchemy.dialects.postgresql.ARRAY.params.zero_indexes
    "sqlalchemy.dialects.postgresql.ARRAY").
- en: Additionally, the [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type does not work directly in conjunction with the [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type. For a workaround, see the special
    type at [Using ENUM with ARRAY](#postgresql-array-of-enum).
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型不直接与 [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    类型一起使用。有关解决方法，请参见 [使用 ENUM 与 ARRAY](#postgresql-array-of-enum) 中的特殊类型。
- en: '**Detecting Changes in ARRAY columns when using the ORM**'
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
  zh: '**在使用 ORM 时检测 ARRAY 列中的更改**'
- en: 'The [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    type, when used with the SQLAlchemy ORM, does not detect in-place mutations to
    the array. In order to detect these, the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension must be used, using the [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") class:'
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQLAlchemy ORM 一起使用时，[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    类型不会检测对数组的原地变异。为了检测这些变化，必须使用 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展，并使用 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 类：
- en: '[PRE514]'
  id: totrans-2340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: This extension will allow “in-place” changes such to the array such as `.append()`
    to produce events which will be detected by the unit of work. Note that changes
    to elements **inside** the array, including subarrays that are mutated in place,
    are **not** detected.
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展将允许对数组进行“原地”更改，例如使用 `.append()` 产生的事件将被工作单元检测到。请注意，对数组内部的元素进行更改，包括原地变异的子数组，**不会**被检测到。
- en: Alternatively, assigning a new array value to an ORM element that replaces the
    old one will always trigger a change event.
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将新数组值分配给替换旧数组值的 ORM 元素将始终触发更改事件。
- en: See also
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - base array type'
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    - 基本数组类型'
- en: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - produces a literal array value.'
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array")
    - 生成字面数组值。'
- en: '**Members**'
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.ARRAY.__init__), [contains()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains),
    [contained_by()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by),
    [overlap()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap)'
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.ARRAY.__init__), [contains()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains),
    [contained_by()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by),
    [overlap()](#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap)'
- en: '**Class signature**'
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") ([`sqlalchemy.types.ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"))
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") ([`sqlalchemy.types.ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"))
- en: '[PRE515]'
  id: totrans-2350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: Construct an ARRAY.
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个数组。
- en: 'E.g.:'
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE516]'
  id: totrans-2353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: 'Arguments are:'
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是：
- en: 'Parameters:'
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`item_type` – The data type of items of this array. Note that dimensionality
    is irrelevant here, so multi-dimensional arrays like `INTEGER[][]`, are constructed
    as `ARRAY(Integer)`, not as `ARRAY(ARRAY(Integer))` or such.'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item_type` – 数组中项的数据类型。请注意，这里与维度无关，因此类似`INTEGER[][]`这样的多维数组，构造为`ARRAY(Integer)`，而不是`ARRAY(ARRAY(Integer))`或类似的形式。'
- en: '`as_tuple=False` – Specify whether return results should be converted to tuples
    from lists. DBAPIs such as psycopg2 return lists by default. When tuples are returned,
    the results are hashable.'
  id: totrans-2357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_tuple=False` – 指定返回结果是否应从列表转换为元组。例如，Psycopg2 等 DBAPI 默认返回列表。返回元组时，结果是可哈希的。'
- en: '`dimensions` – if non-None, the ARRAY will assume a fixed number of dimensions.
    This will cause the DDL emitted for this ARRAY to include the exact number of
    bracket clauses `[]`, and will also optimize the performance of the type overall.
    Note that PG arrays are always implicitly “non-dimensioned”, meaning they can
    store any number of dimensions no matter how they were declared.'
  id: totrans-2358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dimensions` – 如果非空，则数组将假定具有固定数量的维度。这将导致为此数组发出的 DDL 包括精确数量的方括号`[]`，并且还将优化类型的整体性能。请注意，PG
    数组始终隐式地“非维度化”，这意味着无论如何声明，它们都可以存储任意数量的维度。'
- en: '`zero_indexes=False` – when True, index values will be converted between Python
    zero-based and PostgreSQL one-based indexes, e.g. a value of one will be added
    to all index values before passing to the database.'
  id: totrans-2359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zero_indexes=False` – 当为 True 时，索引值将在 Python 以零为基础和 PostgreSQL 以一为基础的索引之间转换，例如，将在传递到数据库之前的所有索引值上添加一个值为一的值。'
- en: '[PRE517]'
  id: totrans-2360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: Define comparison operations for [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY").
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")定义比较操作。
- en: Note that these operations are in addition to those provided by the base [`Comparator`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator") class, including [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") and [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all").
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些操作是在基础[`Comparator`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator
    "sqlalchemy.types.ARRAY.Comparator")类提供的操作之外提供的，包括[`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")和[`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")。
- en: '**Class signature**'
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ARRAY.Comparator`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator") (`sqlalchemy.types.Comparator`)
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.ARRAY.Comparator`](#sqlalchemy.dialects.postgresql.ARRAY.Comparator
    "sqlalchemy.dialects.postgresql.ARRAY.Comparator") (`sqlalchemy.types.Comparator`)
- en: '[PRE518]'
  id: totrans-2365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: Boolean expression. Test if elements are a superset of the elements of the argument
    array expression.
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试元素是否为参数数组表达式的超集。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符可能会忽略 kwargs，但对于 API 一致性，它们是必需的。
- en: '[PRE519]'
  id: totrans-2368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: Boolean expression. Test if elements are a proper subset of the elements of
    the argument array expression.
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试元素是否是参数数组表达式的元素的适当子集。
- en: '[PRE520]'
  id: totrans-2370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: Boolean expression. Test if array has elements in common with an argument array
    expression.
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试数组是否与参数数组表达式有公共元素。
- en: '[PRE521]'
  id: totrans-2372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '**Class signature**'
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.BIT`](#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.BIT`](#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE522]'
  id: totrans-2375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '**Members**'
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.BYTEA.__init__)'
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.BYTEA.__init__)'
- en: '**Class signature**'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.BYTEA`](#sqlalchemy.dialects.postgresql.BYTEA
    "sqlalchemy.dialects.postgresql.BYTEA") ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.BYTEA`](#sqlalchemy.dialects.postgresql.BYTEA
    "sqlalchemy.dialects.postgresql.BYTEA") ([`sqlalchemy.types.LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary"))
- en: '[PRE523]'
  id: totrans-2380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '*inherited from the* `sqlalchemy.types.LargeBinary.__init__` *method of* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")'
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") *的* `sqlalchemy.types.LargeBinary.__init__` *方法*'
- en: Construct a LargeBinary type.
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 LargeBinary 类型。
- en: 'Parameters:'
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length** – optional, a length for the column for use in DDL statements, for
    those binary types that accept a length, such as the MySQL BLOB type.'
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: '**length** – 可选的，用于DDL语句中的列长度，用于那些接受长度的二进制类型，如MySQL BLOB类型。'
- en: '[PRE524]'
  id: totrans-2385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '**Class signature**'
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.CIDR`](#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE525]'
  id: totrans-2388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Provide the PostgreSQL CITEXT type.
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL CITEXT 类型。
- en: New in version 2.0.7.
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.7版本中新增。
- en: '**Members**'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.CITEXT.__init__)'
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.CITEXT.__init__)'
- en: '**Class signature**'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.CITEXT`](#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") ([`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"))
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.CITEXT`](#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") ([`sqlalchemy.types.TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"))
- en: '[PRE526]'
  id: totrans-2395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '*inherited from the* `sqlalchemy.types.String.__init__` *method of* [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")'
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    *的* `sqlalchemy.types.String.__init__` *方法*'
- en: Create a string-holding type.
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个持有字符串的类型。
- en: 'Parameters:'
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`length` – optional, a length for the column for use in DDL and CAST expressions.
    May be safely omitted if no `CREATE TABLE` will be issued. Certain databases may
    require a `length` for use in DDL, and will raise an exception when the `CREATE
    TABLE` DDL is issued if a `VARCHAR` with no length is included. Whether the value
    is interpreted as bytes or characters is database specific.'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` – 可选的，用于DDL和CAST表达式的列长度。如果不会发出 `CREATE TABLE`，可以安全地省略。某些数据库可能需要用于DDL的
    `length`，如果包含了没有长度的 `VARCHAR`，则在发出 `CREATE TABLE` DDL 时会引发异常。该值是按字节还是字符解释的取决于数据库。'
- en: '`collation` –'
  id: totrans-2400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` –'
- en: 'Optional, a column-level collation for use in DDL and CAST expressions. Renders
    using the COLLATE keyword supported by SQLite, MySQL, and PostgreSQL. E.g.:'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的，用于DDL和CAST表达式的列级排序。使用SQLite、MySQL和PostgreSQL支持的COLLATE关键字呈现。例如：
- en: '[PRE527]'
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: Note
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In most cases, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") datatypes should be used for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that expects to store non-ascii data. These datatypes
    will ensure that the correct types are used on the database.
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    期望存储非ASCII数据的列应使用 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 数据类型。这些数据类型将确保在数据库上使用正确的类型。
- en: '[PRE528]'
  id: totrans-2405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: Represent the DOMAIN PostgreSQL type.
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: 表示DOMAIN PostgreSQL类型。
- en: 'A domain is essentially a data type with optional constraints that restrict
    the allowed set of values. E.g.:'
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: 域本上是一个具有可选约束的数据类型，用于限制允许的值集。例如：
- en: '[PRE529]'
  id: totrans-2408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: See the [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-createdomain.html)
    for additional details
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅[PostgreSQL文档](https://www.postgresql.org/docs/current/sql-createdomain.html)。
- en: New in version 2.0.
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中新增。
- en: '**Members**'
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.DOMAIN.__init__), [create()](#sqlalchemy.dialects.postgresql.DOMAIN.create),
    [drop()](#sqlalchemy.dialects.postgresql.DOMAIN.drop)'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.DOMAIN.__init__)、[create()](#sqlalchemy.dialects.postgresql.DOMAIN.create)、[drop()](#sqlalchemy.dialects.postgresql.DOMAIN.drop)'
- en: '**Class signature**'
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") (`sqlalchemy.dialects.postgresql.named_types.NamedType`,
    [`sqlalchemy.types.SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType"))
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")（`sqlalchemy.dialects.postgresql.named_types.NamedType`的`sqlalchemy.types.SchemaType`）
- en: '[PRE530]'
  id: totrans-2415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: Construct a DOMAIN.
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个域。
- en: 'Parameters:'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – the name of the domain'
  id: totrans-2418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 域的名称'
- en: '`data_type` – The underlying data type of the domain. This can include array
    specifiers.'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_type` – 域的基础数据类型。这可以包括数组说明符。'
- en: '`collation` – An optional collation for the domain. If no collation is specified,
    the underlying data type’s default collation is used. The underlying type must
    be collatable if `collation` is specified.'
  id: totrans-2420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collation` – 用于域的可选排序规则。如果未指定排序规则，则使用基础数据类型的默认排序规则。如果指定了`collation`，则基础类型必须是可排序的。'
- en: '`default` – The DEFAULT clause specifies a default value for columns of the
    domain data type. The default should be a string or a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") value. If no default value is specified, then
    the default value is the null value.'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – DEFAULT子句为域数据类型的列指定默认值。默认值应为字符串或[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")值。如果未指定默认值，则默认值为null值。'
- en: '`constraint_name` – An optional name for a constraint. If not specified, the
    backend generates a name.'
  id: totrans-2422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint_name` – 用于约束的可选名称。如果未指定，则后端会生成一个名称。'
- en: '`not_null` – Values of this domain are prevented from being null. By default
    domain are allowed to be null. If not specified no nullability clause will be
    emitted.'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not_null` – 此域的值不能为null。默认情况下，域允许为null。如果未指定，则不会发出空性条款。'
- en: '`check` – CHECK clause specify integrity constraint or test which values of
    the domain must satisfy. A constraint must be an expression producing a Boolean
    result that can use the key word VALUE to refer to the value being tested. Differently
    from PostgreSQL, only a single check clause is currently allowed in SQLAlchemy.'
  id: totrans-2424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check` – CHECK子句指定域的值必须满足的完整性约束或测试。约束必须是一个产生布尔结果的表达式，可以使用关键字VALUE来引用正在测试的值。与PostgreSQL不同，目前在SQLAlchemy中只允许一个检查子句。'
- en: '`schema` – optional schema name'
  id: totrans-2425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 可选的模式名称'
- en: '`metadata` – optional [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object which this [`DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") will be directly associated'
  id: totrans-2426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata` – 可选的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象，此[`DOMAIN`](#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")将直接与之关联'
- en: '`create_type` – Defaults to True. Indicates that `CREATE TYPE` should be emitted,
    after optionally checking for the presence of the type, when the parent table
    is being created; and additionally that `DROP TYPE` is called when the table is
    dropped.'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_type` – 默认为True。指示在创建父表时（可选地检查类型的存在），发出`CREATE TYPE`；并且在删除表时另外调用`DROP
    TYPE`。'
- en: '[PRE531]'
  id: totrans-2428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '*inherited from the* `NamedType.create()` *method of* `NamedType`'
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `NamedType` *的* `NamedType.create()` *方法继承*'
- en: Emit `CREATE` DDL for this type.
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`CREATE`DDL来创建此类型。
- en: 'Parameters:'
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-2432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象以发出SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type does not exist already before creating.'
  id: totrans-2433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 如果为 `True`，则在创建之前首先执行对 PG 目录的查询，以查看类型是否已存在。'
- en: '[PRE532]'
  id: totrans-2434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '*inherited from the* `NamedType.drop()` *method of* `NamedType`'
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `NamedType` *的* `NamedType.drop()` *方法*'
- en: Emit `DROP` DDL for this type.
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: 发出此类型的 `DROP` DDL。
- en: 'Parameters:'
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-2438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象，用于发出 SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type actually exists before dropping.'
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` – 如果为 `True`，则在删除之前首先执行对 PG 目录的查询，以查看类型是否实际存在。'
- en: '[PRE533]'
  id: totrans-2440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: The SQL DOUBLE PRECISION type.
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: SQL DOUBLE PRECISION 类型。
- en: New in version 2.0.
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 中的新功能。
- en: See also
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    - documentation for the base type.'
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.postgresql.DOUBLE_PRECISION` ([`sqlalchemy.types.Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"))
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.postgresql.DOUBLE_PRECISION` ([`sqlalchemy.types.Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"))
- en: '[PRE534]'
  id: totrans-2447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    *的* `sqlalchemy.types.Float.__init__` *方法*'
- en: Construct a Float.
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-2451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-2452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 DDL `CREATE TABLE` 中的数值精度。后端**应该**尽量确保此精度指示了通用 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时不接受 [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持将浮点精度指定为小数位数的数字。而是使用 Oracle 特定的 [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，并指定 [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 2.0 版本中的新功能。
- en: 'To create a database agnostic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") that separately specifies binary precision for Oracle,
    use [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库无关的 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")，并为
    Oracle 分别指定二进制精度，请使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE535]'
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-2457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 相同的标志，但默认为 `False`。请注意，将此标志设置为 `True` 会导致浮点转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 转换为Python decimal时使用的默认精度。由于十进制不精确，浮点值通常会更长，并且大多数浮点数据库类型没有“精度”的概念，因此默认情况下，float类型在转换时会寻找前十位小数。指定此值将覆盖该长度。请注意，如果未另行指定，具有“精度”的MySQL浮点类型将使用“精度”作为decimal_return_scale的默认值。'
- en: '[PRE536]'
  id: totrans-2459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: PostgreSQL ENUM type.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL ENUM类型。
- en: This is a subclass of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") which includes support for PG’s `CREATE TYPE` and `DROP
    TYPE`.
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的一个子类，包括对PG的`CREATE
    TYPE`和`DROP TYPE`的支持。
- en: When the builtin type [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") is used and the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") flag is left at its default of True, the PostgreSQL backend
    will use a [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    type as the implementation, so the special create/drop rules will be used.
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用内置类型[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")并且将[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")标志保留为默认值True时，PostgreSQL后端将使用[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")类型作为实现，因此将使用特殊的创建/删除规则。
- en: The create/drop behavior of ENUM is necessarily intricate, due to the awkward
    relationship the ENUM type has in relationship to the parent table, in that it
    may be “owned” by just a single table, or may be shared among many tables.
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: ENUM的创建/删除行为必然是复杂的，这是由于ENUM类型与父表的尴尬关系所决定的，即它可能仅“属于”单个表，也可能在多个表之间共享。
- en: 'When using [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    or [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    in an “inline” fashion, the `CREATE TYPE` and `DROP TYPE` is emitted corresponding
    to when the [`Table.create()`](../core/metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") and [`Table.drop()`](../core/metadata.html#sqlalchemy.schema.Table.drop
    "sqlalchemy.schema.Table.drop") methods are called:'
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: 当以“内联”方式使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")或[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")时，会发出与调用[`Table.create()`](../core/metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")和[`Table.drop()`](../core/metadata.html#sqlalchemy.schema.Table.drop
    "sqlalchemy.schema.Table.drop")方法对应的`CREATE TYPE`和`DROP TYPE`：
- en: '[PRE537]'
  id: totrans-2465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: 'To use a common enumerated type between multiple tables, the best practice
    is to declare the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    or [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    independently, and associate it with the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object itself:'
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 要在多个表之间使用通用枚举类型的最佳做法是独立声明[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")或[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")，并将其与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象本身关联：
- en: '[PRE538]'
  id: totrans-2467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: 'When this pattern is used, care must still be taken at the level of individual
    table creates. Emitting CREATE TABLE without also specifying `checkfirst=True`
    will still cause issues:'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用此模式时，仍然必须在个别表创建的级别上小心处理。发出CREATE TABLE而不同时指定`checkfirst=True`仍然会导致问题：
- en: '[PRE539]'
  id: totrans-2469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: 'If we specify `checkfirst=True`, the individual table-level create operation
    will check for the `ENUM` and create if not exists:'
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定了`checkfirst=True`，则个别的表级别创建操作将检查`ENUM`，如果不存在则创建：
- en: '[PRE540]'
  id: totrans-2471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: 'When using a metadata-level ENUM type, the type will always be created and
    dropped if either the metadata-wide create/drop is called:'
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用元数据级ENUM类型时，如果调用元数据范围的创建/删除操作，则该类型将始终被创建和删除：
- en: '[PRE541]'
  id: totrans-2473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: 'The type can also be created and dropped directly:'
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: 该类型也可以直接创建和删除：
- en: '[PRE542]'
  id: totrans-2475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '**Members**'
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.ENUM.__init__), [create()](#sqlalchemy.dialects.postgresql.ENUM.create),
    [drop()](#sqlalchemy.dialects.postgresql.ENUM.drop)'
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.ENUM.__init__), [create()](#sqlalchemy.dialects.postgresql.ENUM.create),
    [drop()](#sqlalchemy.dialects.postgresql.ENUM.drop)'
- en: '**Class signature**'
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") (`sqlalchemy.dialects.postgresql.named_types.NamedType`,
    `sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"))
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ENUM`](#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") (`sqlalchemy.dialects.postgresql.named_types.NamedType`,
    `sqlalchemy.types.NativeForEmulated`, [`sqlalchemy.types.Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"))
- en: '[PRE543]'
  id: totrans-2480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: Construct an [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")。
- en: Arguments are the same as that of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), but also including the following parameters.
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的参数相同，但还包括以下参数。
- en: 'Parameters:'
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**create_type** – Defaults to True. Indicates that `CREATE TYPE` should be
    emitted, after optionally checking for the presence of the type, when the parent
    table is being created; and additionally that `DROP TYPE` is called when the table
    is dropped. When `False`, no check will be performed and no `CREATE TYPE` or `DROP
    TYPE` is emitted, unless [`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create") or [`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop") are called directly. Setting to `False`
    is helpful when invoking a creation scheme to a SQL file without access to the
    actual database - the [`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create") and [`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop") methods can be used to emit SQL to
    a target bind.'
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: '**create_type** - 默认为 True。指示在创建父表时应发出`CREATE TYPE`，在可选地检查类型是否存在后；并且在删除表时还调用`DROP
    TYPE`。当为`False`时，将不执行检查，也不会发出`CREATE TYPE`或`DROP TYPE`，除非直接调用[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create")或[`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop")。在调用到无法访问实际数据库的 SQL 文件的创建方案时，将设置为`False`是有帮助的
    - 可以使用[`ENUM.create()`](#sqlalchemy.dialects.postgresql.ENUM.create "sqlalchemy.dialects.postgresql.ENUM.create")和[`ENUM.drop()`](#sqlalchemy.dialects.postgresql.ENUM.drop
    "sqlalchemy.dialects.postgresql.ENUM.drop")方法将 SQL 发出到目标绑定。'
- en: '[PRE544]'
  id: totrans-2485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: Emit `CREATE TYPE` for this [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`CREATE TYPE`以适用于此[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")。
- en: If the underlying dialect does not support PostgreSQL CREATE TYPE, no action
    is taken.
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层方言不支持 PostgreSQL CREATE TYPE，则不采取任何操作。
- en: 'Parameters:'
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-2489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` - 可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象，用于发出 SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type does not exist already before creating.'
  id: totrans-2490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` - 如果为`True`，则首先对 PG 目录执行查询，以查看在创建之前类型是否不存在。'
- en: '[PRE545]'
  id: totrans-2491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Emit `DROP TYPE` for this [`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`DROP TYPE`以适用于此[`ENUM`](#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")。
- en: If the underlying dialect does not support PostgreSQL DROP TYPE, no action is
    taken.
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层方言不支持 PostgreSQL DROP TYPE，则不采取任何操作。
- en: 'Parameters:'
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a connectable [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), or similar object to emit SQL.'
  id: totrans-2495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` - 可连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")、[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或类似对象，用于发出 SQL。'
- en: '`checkfirst` – if `True`, a query against the PG catalog will be first performed
    to see if the type actually exists before dropping.'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkfirst` - 如果为`True`，则首先对PG目录执行查询，以查看在删除之前类型是否实际存在。'
- en: '[PRE546]'
  id: totrans-2497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: Represent the PostgreSQL HSTORE type.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL HSTORE 类型。
- en: 'The [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    type stores dictionaries containing strings, e.g.:'
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    类型存储包含字符串的字典，例如：'
- en: '[PRE547]'
  id: totrans-2500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    provides for a wide range of operations, including:'
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    提供了广泛的操作，包括：'
- en: 'Index operations:'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引操作：
- en: '[PRE548]'
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE548]'
- en: 'Containment operations:'
  id: totrans-2504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含操作：
- en: '[PRE549]'
  id: totrans-2505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE549]'
- en: 'Concatenation:'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接：
- en: '[PRE550]'
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE550]'
- en: For a full list of special methods see `comparator_factory`.
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特殊方法的完整列表，请参见`comparator_factory`。
- en: '**Detecting Changes in HSTORE columns when using the ORM**'
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
  zh: '**在使用 ORM 时检测 HSTORE 列中的更改**'
- en: 'For usage with the SQLAlchemy ORM, it may be desirable to combine the usage
    of [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")
    with [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") dictionary now part of the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension. This extension will allow “in-place” changes
    to the dictionary, e.g. addition of new keys or replacement/removal of existing
    keys to/from the current dictionary, to produce events which will be detected
    by the unit of work:'
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SQLAlchemy ORM 一起使用时，可能希望将[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")的使用与现在属于[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")扩展的[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")字典结合起来。此扩展将允许对字典进行“原地”更改，例如向当前字典添加新键或替换/删除现有键，以产生将被工作单元检测到的事件：
- en: '[PRE551]'
  id: totrans-2511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: When the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension is not used, the ORM will not be alerted to
    any changes to the contents of an existing dictionary, unless that dictionary
    value is re-assigned to the HSTORE-attribute itself, thus generating a change
    event.
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: 当未使用[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展时，ORM 不会注意到对现有字典内容的任何更改，除非将该字典值重新分配给 HSTORE 属性本身，从而生成更改事件。
- en: See also
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - render the PostgreSQL `hstore()` function.'
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore")
    - 渲染 PostgreSQL 的 `hstore()` 函数。'
- en: '**Members**'
  id: totrans-2515
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[array()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.array), [contained_by()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contains), [defined()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.defined),
    [delete()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.delete), [has_all()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_all),
    [has_any()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_any), [has_key()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_key),
    [keys()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.keys), [matrix()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.matrix),
    [slice()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.slice), [vals()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.vals),
    [__init__()](#sqlalchemy.dialects.postgresql.HSTORE.__init__), [bind_processor()](#sqlalchemy.dialects.postgresql.HSTORE.bind_processor),
    [comparator_factory](#sqlalchemy.dialects.postgresql.HSTORE.comparator_factory),
    [hashable](#sqlalchemy.dialects.postgresql.HSTORE.hashable), [result_processor()](#sqlalchemy.dialects.postgresql.HSTORE.result_processor)'
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
  zh: '[array()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.array), [contained_by()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.contains), [defined()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.defined),
    [delete()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.delete), [has_all()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_all),
    [has_any()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_any), [has_key()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_key),
    [keys()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.keys), [matrix()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.matrix),
    [slice()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.slice), [vals()](#sqlalchemy.dialects.postgresql.HSTORE.Comparator.vals),
    [__init__()](#sqlalchemy.dialects.postgresql.HSTORE.__init__), [bind_processor()](#sqlalchemy.dialects.postgresql.HSTORE.bind_processor),
    [comparator_factory](#sqlalchemy.dialects.postgresql.HSTORE.comparator_factory),
    [hashable](#sqlalchemy.dialects.postgresql.HSTORE.hashable), [result_processor()](#sqlalchemy.dialects.postgresql.HSTORE.result_processor)'
- en: '**Class signature**'
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") ([`sqlalchemy.types.Indexable`](../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable"), [`sqlalchemy.types.Concatenable`](../core/type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable"), [`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")（[`sqlalchemy.types.Indexable`](../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")，[`sqlalchemy.types.Concatenable`](../core/type_api.html#sqlalchemy.types.Concatenable
    "sqlalchemy.types.Concatenable")，[`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")）
- en: '[PRE552]'
  id: totrans-2519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: Define comparison operations for [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE").
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")定义比较操作。
- en: '**Class signature**'
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.HSTORE.Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator
    "sqlalchemy.dialects.postgresql.HSTORE.Comparator") (`sqlalchemy.types.Comparator`,
    `sqlalchemy.types.Comparator`)
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.HSTORE.Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator
    "sqlalchemy.dialects.postgresql.HSTORE.Comparator")（`sqlalchemy.types.Comparator`，`sqlalchemy.types.Comparator`）
- en: '[PRE553]'
  id: totrans-2523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: Text array expression. Returns array of alternating keys and values.
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回交替键和值的数组。
- en: '[PRE554]'
  id: totrans-2525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: Boolean expression. Test if keys are a proper subset of the keys of the argument
    jsonb expression.
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键是否是参数jsonb表达式的键的正确子集。
- en: '[PRE555]'
  id: totrans-2527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: Boolean expression. Test if keys (or array) are a superset of/contained the
    keys of the argument jsonb expression.
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键（或数组）是否是参数jsonb表达式的键的超集/包含。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
  zh: kwargs可能会被此操作符忽略，但对于API的一致性是必需的。
- en: '[PRE556]'
  id: totrans-2530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: Boolean expression. Test for presence of a non-NULL value for the key. Note
    that the key may be a SQLA expression.
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键的非NULL值的存在。请注意，键可能是一个SQLA表达式。
- en: '[PRE557]'
  id: totrans-2532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: HStore expression. Returns the contents of this hstore with the given key deleted.
    Note that the key may be a SQLA expression.
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
  zh: HStore表达式。返回删除给定键的此hstore的内容。请注意，键可能是一个SQLA表达式。
- en: '[PRE558]'
  id: totrans-2534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: Boolean expression. Test for presence of all keys in jsonb
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试jsonb中所有键的存在。
- en: '[PRE559]'
  id: totrans-2536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: Boolean expression. Test for presence of any key in jsonb
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试jsonb中任何键的存在。
- en: '[PRE560]'
  id: totrans-2538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: Boolean expression. Test for presence of a key. Note that the key may be a SQLA
    expression.
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键的存在。请注意，键可能是一个SQLA表达式。
- en: '[PRE561]'
  id: totrans-2540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: Text array expression. Returns array of keys.
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回键的数组。
- en: '[PRE562]'
  id: totrans-2542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: Text array expression. Returns array of [key, value] pairs.
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回[key, value]对的数组。
- en: '[PRE563]'
  id: totrans-2544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: HStore expression. Returns a subset of an hstore defined by array of keys.
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
  zh: HStore表达式。返回由键数组定义的hstore的子集。
- en: '[PRE564]'
  id: totrans-2546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: Text array expression. Returns array of values.
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
  zh: 文本数组表达式。返回值的数组。
- en: '[PRE565]'
  id: totrans-2548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: Construct a new [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE").
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.HSTORE")。
- en: 'Parameters:'
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**text_type** – the type that should be used for indexed values. Defaults to
    [`Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text").'
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
  zh: '**text_type** – 应用于索引值的类型。默认为[`Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text")。'
- en: '[PRE566]'
  id: totrans-2552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: Return a conversion function for processing bind values.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理绑定值的转换函数。
- en: Returns a callable which will receive a bind parameter value as the sole positional
    argument and will return a value to send to the DB-API.
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收绑定参数值作为唯一位置参数，并返回一个要发送到DB-API的值。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method, unless subclassing the [`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
  zh: '此方法仅相对于**特定方言类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共类型对象相同的类型对象，这意味着不可通过子类化[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法，除非显式地子类化[`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。 '
- en: To provide alternate behavior for [`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor"), implement a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_bind_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param").
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: 要为[`TypeEngine.bind_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")提供替代行为，实现一个[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")类，并提供[`TypeDecorator.process_bind_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_bind_param
    "sqlalchemy.types.TypeDecorator.process_bind_param")的实现。
- en: See also
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](../core/custom_types.html#types-typedecorator)'
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩充现有类型](../core/custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-2561
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dialect** – Dialect instance in use.'
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: '**方言** – 正在使用的方言实例。'
- en: '[PRE567]'
  id: totrans-2563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: alias of [`Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator "sqlalchemy.dialects.postgresql.hstore.HSTORE.Comparator")
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
  zh: 别名[`Comparator`](#sqlalchemy.dialects.postgresql.HSTORE.Comparator "sqlalchemy.dialects.postgresql.hstore.HSTORE.Comparator")
- en: '[PRE568]'
  id: totrans-2565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: Flag, if False, means values from this type aren’t hashable.
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
  zh: Flag，如果为False，则表示此类型的值不可哈希。
- en: Used by the ORM when uniquing result lists.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 由ORM在唯一化结果列表时使用。
- en: '[PRE569]'
  id: totrans-2568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: Return a conversion function for processing result row values.
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于处理结果行值的转换函数。
- en: Returns a callable which will receive a result row column value as the sole
    positional argument and will return a value to return to the user.
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将接收结果行列值作为唯一的位置参数，并将返回一个值以返回给用户。
- en: If processing is not necessary, the method should return `None`.
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要处理，则该方法应返回`None`。
- en: Note
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is only called relative to a **dialect specific type object**, which
    is often **private to a dialect in use** and is not the same type object as the
    public facing one, which means it’s not feasible to subclass a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class in order to provide an alternate [`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") method, unless subclassing the
    [`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType") class explicitly.
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅相对于**特定方言类型对象**调用，该对象通常**私有于正在使用的方言**，并且不是公共类型对象相同的类型对象，这意味着不可通过子类化[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类来提供替代的[`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor")方法，除非显式地子类化[`UserDefinedType`](../core/custom_types.html#sqlalchemy.types.UserDefinedType
    "sqlalchemy.types.UserDefinedType")类。
- en: To provide alternate behavior for [`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor"), implement a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") class and provide an implementation of [`TypeDecorator.process_result_value()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value").
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为 [`TypeEngine.result_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.result_processor
    "sqlalchemy.types.TypeEngine.result_processor") 提供备用行为，实现一个 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 类，并提供 [`TypeDecorator.process_result_value()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_result_value
    "sqlalchemy.types.TypeDecorator.process_result_value") 的实现。
- en: See also
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Augmenting Existing Types](../core/custom_types.html#types-typedecorator)'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: '[扩展现有类型](../core/custom_types.html#types-typedecorator)'
- en: 'Parameters:'
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – Dialect instance in use.'
  id: totrans-2578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 使用的方言实例。'
- en: '`coltype` – DBAPI coltype argument received in cursor.description.'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coltype` – 在 cursor.description 中接收的 DBAPI coltype 参数。'
- en: '[PRE570]'
  id: totrans-2580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '**Class signature**'
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INET`](#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE571]'
  id: totrans-2583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: PostgreSQL INTERVAL type.
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL INTERVAL 类型。
- en: '**Members**'
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.INTERVAL.__init__)'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.INTERVAL.__init__)'
- en: '**Class signature**'
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INTERVAL`](#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") (`sqlalchemy.types.NativeForEmulated`,
    `sqlalchemy.types._AbstractInterval`)
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INTERVAL`](#sqlalchemy.dialects.postgresql.INTERVAL
    "sqlalchemy.dialects.postgresql.INTERVAL") (`sqlalchemy.types.NativeForEmulated`,
    `sqlalchemy.types._AbstractInterval`)
- en: '[PRE572]'
  id: totrans-2589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: Construct an INTERVAL.
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 INTERVAL。
- en: 'Parameters:'
  id: totrans-2591
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` – optional integer precision value'
  id: totrans-2592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` – 可选的整数精度值'
- en: '`fields` –'
  id: totrans-2593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields` –'
- en: string fields specifier. allows storage of fields to be limited, such as `"YEAR"`,
    `"MONTH"`, `"DAY TO HOUR"`, etc.
  id: totrans-2594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串字段说明符。允许限制字段的存储，例如 `"YEAR"`、`"MONTH"`、`"DAY TO HOUR"` 等。
- en: New in version 1.2.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 1.2 新增。
- en: '[PRE573]'
  id: totrans-2596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: Represent the PostgreSQL JSON type.
  id: totrans-2597
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 PostgreSQL JSON 类型。
- en: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    is used automatically whenever the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype is used against a PostgreSQL backend, however
    base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    datatype does not provide Python accessors for PostgreSQL-specific comparison
    methods such as [`Comparator.astext()`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext"); additionally, to use
    PostgreSQL `JSONB`, the [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    datatype should be used explicitly.'
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](#sqlalchemy.dialects.postgresql.JSON "sqlalchemy.dialects.postgresql.JSON")
    在与 PostgreSQL 后端一起使用时会自动使用，但基本的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 数据类型不提供针对 PostgreSQL 特定比较方法的 Python 访问器，例如 [`Comparator.astext()`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext")；另外，要使用 PostgreSQL 的 `JSONB`，应显式使用
    [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    数据类型。'
- en: See also
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - main documentation for the generic cross-platform JSON datatype.'
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 通用跨平台 JSON 数据类型的主要文档。'
- en: 'The operators provided by the PostgreSQL version of [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") include:'
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 版本提供的操作符包括 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 的操作符：
- en: 'Index operations (the `->` operator):'
  id: totrans-2602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引操作（`->` 操作符）：
- en: '[PRE574]'
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE574]'
- en: 'Index operations returning text (the `->>` operator):'
  id: totrans-2604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回文本的索引操作（`->>` 操作符）：
- en: '[PRE575]'
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE575]'
- en: Note that equivalent functionality is available via the [`Comparator.as_string`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string") accessor.
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，通过 [`Comparator.as_string`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_string
    "sqlalchemy.types.JSON.Comparator.as_string") 访问器也可获得等效功能。
- en: 'Index operations with CAST (equivalent to `CAST(col ->> [''some key''] AS <type>)`):'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带 CAST 的索引操作（相当于 `CAST(col ->> ['some key'] AS <type>)`）：
- en: '[PRE576]'
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE576]'
- en: Note that equivalent functionality is available via the [`Comparator.as_integer`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer") and similar accessors.
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，等效功能可通过 [`Comparator.as_integer`](../core/type_basics.html#sqlalchemy.types.JSON.Comparator.as_integer
    "sqlalchemy.types.JSON.Comparator.as_integer") 和类似的访问器获得。
- en: 'Path index operations (the `#>` operator):'
  id: totrans-2610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径索引操作（`#>` 运算符）：
- en: '[PRE577]'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'Path index operations returning text (the `#>>` operator):'
  id: totrans-2612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回文本的路径索引操作（`#>>` 运算符）：
- en: '[PRE578]'
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE578]'
- en: Index operations return an expression object whose type defaults to [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") by default, so that further JSON-oriented instructions
    may be called upon the result type.
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
  zh: 索引操作返回一个表达式对象，默认情况下其类型为 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")，以便对结果类型进行进一步的面向 JSON 的指令调用。
- en: 'Custom serializers and deserializers are specified at the dialect level, that
    is using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine").
    The reason for this is that when using psycopg2, the DBAPI only allows serializers
    at the per-cursor or per-connection level. E.g.:'
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义序列化程序和反序列化程序是在方言级别指定的，即使用 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。这样做的原因是，当使用 psycopg2 时，DBAPI 仅允许在每个游标或每个连接级别上指定序列化程序。例如：
- en: '[PRE579]'
  id: totrans-2616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: When using the psycopg2 dialect, the json_deserializer is registered against
    the database using `psycopg2.extras.register_default_json`.
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 psycopg2 方言时，json_deserializer 是通过 `psycopg2.extras.register_default_json`
    注册到数据库中的。
- en: See also
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - Core level JSON type'
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    - 核心级别的 JSON 类型'
- en: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")'
- en: '**Members**'
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[astext](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext), [__init__()](#sqlalchemy.dialects.postgresql.JSON.__init__),
    [comparator_factory](#sqlalchemy.dialects.postgresql.JSON.comparator_factory)'
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
  zh: '[astext](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext), [__init__()](#sqlalchemy.dialects.postgresql.JSON.__init__),
    [comparator_factory](#sqlalchemy.dialects.postgresql.JSON.comparator_factory)'
- en: '**Class signature**'
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") ([`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"))
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")（[`sqlalchemy.types.JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")）
- en: '[PRE580]'
  id: totrans-2625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: Define comparison operations for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON").
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    定义比较操作。
- en: '**Class signature**'
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSON.Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator
    "sqlalchemy.dialects.postgresql.JSON.Comparator") (`sqlalchemy.types.Comparator`)
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.JSON.Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator
    "sqlalchemy.dialects.postgresql.JSON.Comparator")（`sqlalchemy.types.Comparator`）
- en: '[PRE581]'
  id: totrans-2629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: On an indexed expression, use the “astext” (e.g. “->>”) conversion when rendered
    in SQL.
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引表达式上，当在 SQL 中呈现时，请使用“astext”（例如“->>”）转换。
- en: 'E.g.:'
  id: totrans-2631
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE582]'
  id: totrans-2632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: See also
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")'
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")'
- en: '[PRE583]'
  id: totrans-2635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: Construct a [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type.
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型。
- en: 'Parameters:'
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`none_as_null` –'
  id: totrans-2638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none_as_null` –'
- en: 'if True, persist the value `None` as a SQL NULL value, not the JSON encoding
    of `null`. Note that when this flag is False, the [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") construct can still be used to persist a NULL
    value:'
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则将值 `None` 持久化为 SQL NULL 值，而不是 `null` 的 JSON 编码。请注意，当此标志为 False 时，仍然可以使用
    [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    构造来持久化 NULL 值：
- en: '[PRE584]'
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE584]'
- en: See also
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON.NULL`](../core/type_basics.html#sqlalchemy.types.JSON.NULL "sqlalchemy.types.JSON.NULL")'
- en: '`astext_type` – the type to use for the [`Comparator.astext`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") accessor on indexed attributes.
    Defaults to [`Text`](../core/type_basics.html#sqlalchemy.types.Text "sqlalchemy.types.Text").'
  id: totrans-2643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`astext_type` – 用于索引属性上的 [`Comparator.astext`](#sqlalchemy.dialects.postgresql.JSON.Comparator.astext
    "sqlalchemy.dialects.postgresql.JSON.Comparator.astext") 访问器的类型。默认为 [`Text`](../core/type_basics.html#sqlalchemy.types.Text
    "sqlalchemy.types.Text")。'
- en: '[PRE585]'
  id: totrans-2644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: alias of [`Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator "sqlalchemy.dialects.postgresql.json.JSON.Comparator")
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.dialects.postgresql.JSON.Comparator "sqlalchemy.dialects.postgresql.json.JSON.Comparator")
    的别名'
- en: '[PRE586]'
  id: totrans-2646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: Represent the PostgreSQL JSONB type.
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL JSONB 类型。
- en: 'The [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    type stores arbitrary JSONB format data, e.g.:'
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    类型存储任意的 JSONB 格式数据，例如：'
- en: '[PRE587]'
  id: totrans-2649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: The [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    type includes all operations provided by [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON"), including the same behaviors for indexing operations.
    It also adds additional operators specific to JSONB, including [`Comparator.has_key()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key"), [`Comparator.has_all()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all"), [`Comparator.has_any()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any"), [`Comparator.contains()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contains"), [`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by"), [`Comparator.delete_path()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path"), [`Comparator.path_exists()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists") and [`Comparator.path_match()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match").
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    类型包括所有由 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    提供的操作，包括索引操作的相同行为。它还添加了特定于 JSONB 的附加运算符，包括 [`Comparator.has_key()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key")、[`Comparator.has_all()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all")、[`Comparator.has_any()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any")、[`Comparator.contains()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contains")、[`Comparator.contained_by()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by")、[`Comparator.delete_path()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")、[`Comparator.path_exists()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists") 和 [`Comparator.path_match()`](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")。'
- en: Like the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    type, the [`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    type does not detect in-place changes when used with the ORM, unless the [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension is used.
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型一样，当与 ORM 一起使用时，[`JSONB`](#sqlalchemy.dialects.postgresql.JSONB "sqlalchemy.dialects.postgresql.JSONB")
    类型不会检测到原地更改，除非使用了 [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展。
- en: Custom serializers and deserializers are shared with the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") class, using the `json_serializer` and `json_deserializer`
    keyword arguments. These must be specified at the dialect level using [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). When using psycopg2, the serializers are associated
    with the jsonb type using `psycopg2.extras.register_default_jsonb` on a per-connection
    basis, in the same way that `psycopg2.extras.register_default_json` is used to
    register these handlers with the json type.
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义序列化器和反序列化器与[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")类共享，使用`json_serializer`和`json_deserializer`关键字参数。必须在方言级别使用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")指定这些参数。当使用 psycopg2 时，序列化器与 jsonb 类型关联，使用`psycopg2.extras.register_default_jsonb`在每个连接基础上，与使用`psycopg2.extras.register_default_json`注册这些处理程序与
    json 类型的方式相同。
- en: See also
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")'
- en: '**Members**'
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[contained_by()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by),
    [contains()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains), [delete_path()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path),
    [has_all()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all), [has_any()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any),
    [has_key()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key), [path_exists()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists),
    [path_match()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match), [comparator_factory](#sqlalchemy.dialects.postgresql.JSONB.comparator_factory)'
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
  zh: '[contained_by()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by)，[contains()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains)，[delete_path()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path)，[has_all()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all)，[has_any()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any)，[has_key()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key)，[path_exists()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists)，[path_match()](#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match)，[comparator_factory](#sqlalchemy.dialects.postgresql.JSONB.comparator_factory)'
- en: '**Class signature**'
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSONB`](#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") ([`sqlalchemy.dialects.postgresql.json.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.json.JSON"))
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.JSONB`](#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")（[`sqlalchemy.dialects.postgresql.json.JSON`](#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.json.JSON")）
- en: '[PRE588]'
  id: totrans-2659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: Define comparison operations for [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON").
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")定义比较操作。
- en: '**Class signature**'
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSONB.Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator
    "sqlalchemy.dialects.postgresql.JSONB.Comparator") (`sqlalchemy.dialects.postgresql.json.Comparator`)
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.JSONB.Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator
    "sqlalchemy.dialects.postgresql.JSONB.Comparator")（`sqlalchemy.dialects.postgresql.json.Comparator`）
- en: '[PRE589]'
  id: totrans-2663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: Boolean expression. Test if keys are a proper subset of the keys of the argument
    jsonb expression.
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键是否是参数 jsonb 表达式的键的真子集。
- en: '[PRE590]'
  id: totrans-2665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: Boolean expression. Test if keys (or array) are a superset of/contained the
    keys of the argument jsonb expression.
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试键（或数组）是否是参数 jsonb 表达式的键的超集/包含。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: kwargs 可能会被此运算符忽略，但在 API 符合性方面是必需的。
- en: '[PRE591]'
  id: totrans-2668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: JSONB expression. Deletes field or array element specified in the argument array.
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
  zh: JSONB 表达式。删除参数数组中指定的字段或数组元素。
- en: The input may be a list of strings that will be coerced to an `ARRAY` or an
    instance of `_postgres.array()`.
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
  zh: 输入可以是将强制转换为`ARRAY`的字符串列表，也可以是`_postgres.array()`的实例。
- en: New in version 2.0.
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中新增。
- en: '[PRE592]'
  id: totrans-2672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: Boolean expression. Test for presence of all keys in jsonb
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试 jsonb 中是否存在所有键。
- en: '[PRE593]'
  id: totrans-2674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: Boolean expression. Test for presence of any key in jsonb
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试 jsonb 中是否存在任何关键字。
- en: '[PRE594]'
  id: totrans-2676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: Boolean expression. Test for presence of a key. Note that the key may be a SQLA
    expression.
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试关键字是否存在。请注意，关键字可能是 SQLA 表达式。
- en: '[PRE595]'
  id: totrans-2678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Boolean expression. Test for presence of item given by the argument JSONPath
    expression.
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试是否存在由参数 JSONPath 表达式给出的项目。
- en: New in version 2.0.
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中新增。
- en: '[PRE596]'
  id: totrans-2681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: Boolean expression. Test if JSONPath predicate given by the argument JSONPath
    expression matches.
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式。测试 JSONPath 断言是否与参数 JSONPath 表达式匹配。
- en: Only the first item of the result is taken into account.
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: 仅考虑结果的第一个项目。
- en: New in version 2.0.
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE597]'
  id: totrans-2685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: alias of [`Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator "sqlalchemy.dialects.postgresql.json.JSONB.Comparator")
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.dialects.postgresql.JSONB.Comparator "sqlalchemy.dialects.postgresql.json.JSONB.Comparator")
    的别名'
- en: '[PRE598]'
  id: totrans-2687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: JSON Path Type.
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 路径类型。
- en: 'This is usually required to cast literal values to json path when using json
    search like function, such as `jsonb_path_query_array` or `jsonb_path_exists`:'
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 json 搜索函数时，通常需要将字面值强制转换为 json 路径，例如 `jsonb_path_query_array` 或 `jsonb_path_exists`：
- en: '[PRE599]'
  id: totrans-2690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '**Class signature**'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") (`sqlalchemy.dialects.postgresql.json.JSONPathType`)
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.JSONPATH`](#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") (`sqlalchemy.dialects.postgresql.json.JSONPathType`)
- en: '[PRE600]'
  id: totrans-2693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '**Class signature**'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.MACADDR`](#sqlalchemy.dialects.postgresql.MACADDR
    "sqlalchemy.dialects.postgresql.MACADDR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE601]'
  id: totrans-2696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '**Class signature**'
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MACADDR8`](#sqlalchemy.dialects.postgresql.MACADDR8
    "sqlalchemy.dialects.postgresql.MACADDR8") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.MACADDR8`](#sqlalchemy.dialects.postgresql.MACADDR8
    "sqlalchemy.dialects.postgresql.MACADDR8") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE602]'
  id: totrans-2699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: Provide the PostgreSQL MONEY type.
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL MONEY 类型。
- en: Depending on driver, result rows using this type may return a string value which
    includes currency symbols.
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 根据驱动程序，使用此类型的结果行可能返回一个包含货币符号的字符串值。
- en: 'For this reason, it may be preferable to provide conversion to a numerically-based
    currency datatype using [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator"):'
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可能更好地使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 提供对基于数字的货币数据类型的转换：
- en: '[PRE603]'
  id: totrans-2703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: 'Alternatively, the conversion may be applied as a CAST using the [`TypeDecorator.column_expression()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression") method as follows:'
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用 [`TypeDecorator.column_expression()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.column_expression
    "sqlalchemy.types.TypeDecorator.column_expression") 方法进行 CAST 转换，如下所示：
- en: '[PRE604]'
  id: totrans-2705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: New in version 1.2.
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中新增。
- en: '**Class signature**'
  id: totrans-2707
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MONEY`](#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.MONEY`](#sqlalchemy.dialects.postgresql.MONEY
    "sqlalchemy.dialects.postgresql.MONEY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE605]'
  id: totrans-2709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: Provide the PostgreSQL OID type.
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL OID 类型。
- en: '**Class signature**'
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.OID`](#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.OID`](#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE606]'
  id: totrans-2713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: The SQL REAL type.
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
  zh: SQL REAL 类型。
- en: See also
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    - documentation for the base type.'
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    - 基本类型的文档。'
- en: '**Class signature**'
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.postgresql.REAL` ([`sqlalchemy.types.Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float"))
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.postgresql.REAL` ([`sqlalchemy.types.Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float"))
- en: '[PRE607]'
  id: totrans-2719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '*inherited from the* `sqlalchemy.types.Float.__init__` *method of* [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.types.Float.__init__` *方法的* [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")'
- en: Construct a Float.
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 Float。
- en: 'Parameters:'
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`precision` –'
  id: totrans-2723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: the numeric precision for use in DDL `CREATE TABLE`. Backends **should** attempt
    to ensure this precision indicates a number of digits for the generic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") datatype.
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL `CREATE TABLE` 中用于数字精度。后端 **应该** 尝试确保此精度表示通用 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 数据类型的数字位数。
- en: Note
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the Oracle backend, the [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") parameter is not accepted when rendering DDL, as Oracle
    does not support float precision specified as a number of decimal places. Instead,
    use the Oracle-specific [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype and specify the [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") parameter. This is new in version 2.0 of SQLAlchemy.
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle 后端，在渲染 DDL 时，不接受 [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 参数，因为 Oracle 不支持将浮点精度指定为小数位数。而是使用特定于 Oracle 的 [`FLOAT`](oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型并指定 [`FLOAT.binary_precision`](oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") 参数。这是 SQLAlchemy 版本 2.0 中的新功能。
- en: 'To create a database agnostic [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") that separately specifies binary precision for Oracle,
    use [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") as follows:'
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个数据库无关的 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")，可以分别为
    Oracle 指定二进制精度，使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 如下所示：
- en: '[PRE608]'
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '`asdecimal` – the same flag as that of [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), but defaults to `False`. Note that setting this flag
    to `True` results in floating point conversion.'
  id: totrans-2729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asdecimal` – 与 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") 相同的标志，但默认为 `False`。请注意，将此标志设置为 `True` 将导致浮点转换。'
- en: '`decimal_return_scale` – Default scale to use when converting from floats to
    Python decimals. Floating point values will typically be much longer due to decimal
    inaccuracy, and most floating point database types don’t have a notion of “scale”,
    so by default the float type looks for the first ten decimal places when converting.
    Specifying this value will override that length. Note that the MySQL float types,
    which do include “scale”, will use “scale” as the default for decimal_return_scale,
    if not otherwise specified.'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal_return_scale` – 转换为 Python 十进制时要使用的默认精度。由于十进制不精确，浮点值通常会更长，并且大多数浮点数据库类型没有“精度”概念，所以默认情况下，浮点类型在转换时会查找前十位小数。指定此值将覆盖该长度。注意，如果未另行指定，包括“精度”的
    MySQL 浮点类型将使用“精度”作为 decimal_return_scale 的默认值。'
- en: '[PRE609]'
  id: totrans-2731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: Provide the PostgreSQL REGCONFIG type.
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL REGCONFIG 类型。
- en: New in version 2.0.0rc1.
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.0rc1 中加入。
- en: '**Class signature**'
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE610]'
  id: totrans-2736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: Provide the PostgreSQL REGCLASS type.
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL REGCLASS 类型。
- en: New in version 1.2.7.
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2.7 中加入。
- en: '**Class signature**'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.REGCLASS`](#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.REGCLASS`](#sqlalchemy.dialects.postgresql.REGCLASS
    "sqlalchemy.dialects.postgresql.REGCLASS") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE611]'
  id: totrans-2741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: Provide the PostgreSQL TIMESTAMP type.
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL TIMESTAMP 类型。
- en: '**Members**'
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.TIMESTAMP.__init__)'
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.TIMESTAMP.__init__)'
- en: '**Class signature**'
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TIMESTAMP`](#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TIMESTAMP`](#sqlalchemy.dialects.postgresql.TIMESTAMP
    "sqlalchemy.dialects.postgresql.TIMESTAMP") ([`sqlalchemy.types.TIMESTAMP`](../core/type_basics.html#sqlalchemy.types.TIMESTAMP
    "sqlalchemy.types.TIMESTAMP"))
- en: '[PRE612]'
  id: totrans-2747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: Construct a TIMESTAMP.
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 TIMESTAMP。
- en: 'Parameters:'
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – boolean value if timezone present, default False'
  id: totrans-2750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – 如果有时区则为布尔值，默认为 False'
- en: '`precision` –'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: optional integer precision value
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的整数精度值
- en: New in version 1.4.
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4 中加入。
- en: '[PRE613]'
  id: totrans-2754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: PostgreSQL TIME type.
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL TIME 类型。
- en: '**Members**'
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.TIME.__init__)'
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.TIME.__init__)'
- en: '**Class signature**'
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TIME`](#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME"))
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TIME`](#sqlalchemy.dialects.postgresql.TIME
    "sqlalchemy.dialects.postgresql.TIME") ([`sqlalchemy.types.TIME`](../core/type_basics.html#sqlalchemy.types.TIME
    "sqlalchemy.types.TIME"))
- en: '[PRE614]'
  id: totrans-2760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: Construct a TIME.
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 TIME。
- en: 'Parameters:'
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`timezone` – boolean value if timezone present, default False'
  id: totrans-2763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone` – 如果时区存在，则为布尔值，默认为 False'
- en: '`precision` –'
  id: totrans-2764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision` –'
- en: optional integer precision value
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的整数精度值
- en: New in version 1.4.
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE615]'
  id: totrans-2767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: Provide the PostgreSQL TSQUERY type.
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 PostgreSQL TSQUERY 类型。
- en: New in version 2.0.0rc1.
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新功能。
- en: '**Class signature**'
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE616]'
  id: totrans-2772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: The [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    type implements the PostgreSQL text search type TSVECTOR.
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR "sqlalchemy.dialects.postgresql.TSVECTOR")
    类型实现了 PostgreSQL 文本搜索类型 TSVECTOR。'
- en: It can be used to do full text queries on natural language documents.
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于对自然语言文档进行全文查询。
- en: See also
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Full Text Search](#postgresql-match)'
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: '[全文搜索](#postgresql-match)'
- en: '**Class signature**'
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") ([`sqlalchemy.types.TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"))
- en: '[PRE617]'
  id: totrans-2779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: Represent the SQL UUID type.
  id: totrans-2780
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL UUID 类型。
- en: This is the SQL-native form of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") database agnostic datatype, and is backwards compatible
    with the previous PostgreSQL-only version of `UUID`.
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据库不可知数据类型的 SQL 本机形式，并且向后兼容以前的仅限于 PostgreSQL 的 `UUID` 版本。
- en: The [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    datatype only works on databases that have a SQL datatype named `UUID`. It will
    not function for backends which don’t have this exact-named type, including SQL
    Server. For backend-agnostic UUID values with native support, including for SQL
    Server’s `UNIQUEIDENTIFIER` datatype, use the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype.
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    数据类型仅适用于具有名为 `UUID` 的 SQL 数据类型的数据库。对于没有这个确切命名类型的后端，包括 SQL Server，它将无法正常工作。对于具有本机支持的后端不可知
    UUID 值，包括 SQL Server 的 `UNIQUEIDENTIFIER` 数据类型，请使用 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型。'
- en: New in version 2.0.
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: See also
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")'
- en: '**Class signature**'
  id: totrans-2786
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.dialects.postgresql.UUID` ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.dialects.postgresql.UUID` ([`sqlalchemy.types.Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid"), `sqlalchemy.types.NativeForEmulated`)
- en: '[PRE618]'
  id: totrans-2788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: Construct a [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    type.
  id: totrans-2789
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")类型。
- en: 'Parameters:'
  id: totrans-2790
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**as_uuid=True** –'
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
  zh: '**as_uuid=True** –'
- en: if True, values will be interpreted as Python uuid objects, converting to/from
    string via the DBAPI.
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则值将被解释为 Python uuid 对象，通过 DBAPI 转换为/从字符串。
- en: '[PRE619]'
  id: totrans-2793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: Represent the PostgreSQL INT4RANGE type.
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT4RANGE 类型。
- en: '**Class signature**'
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INT4RANGE`](#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
- en: '[PRE620]'
  id: totrans-2797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: Represent the PostgreSQL INT8RANGE type.
  id: totrans-2798
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT8RANGE 类型。
- en: '**Class signature**'
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE
    "sqlalchemy.dialects.postgresql.INT8RANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INT8RANGE`](#sqlalchemy.dialects.postgresql.INT8RANGE
    "sqlalchemy.dialects.postgresql.INT8RANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE621]'
  id: totrans-2801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: Represent the PostgreSQL NUMRANGE type.
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL NUMRANGE 类型。
- en: '**Class signature**'
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE
    "sqlalchemy.dialects.postgresql.NUMRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.NUMRANGE`](#sqlalchemy.dialects.postgresql.NUMRANGE
    "sqlalchemy.dialects.postgresql.NUMRANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE622]'
  id: totrans-2805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: Represent the PostgreSQL DATERANGE type.
  id: totrans-2806
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL DATERANGE 类型。
- en: '**Class signature**'
  id: totrans-2807
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE
    "sqlalchemy.dialects.postgresql.DATERANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-2808
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.DATERANGE`](#sqlalchemy.dialects.postgresql.DATERANGE
    "sqlalchemy.dialects.postgresql.DATERANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE623]'
  id: totrans-2809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: Represent the PostgreSQL TSRANGE type.
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSRANGE 类型。
- en: '**Class signature**'
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE
    "sqlalchemy.dialects.postgresql.TSRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-2812
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSRANGE`](#sqlalchemy.dialects.postgresql.TSRANGE
    "sqlalchemy.dialects.postgresql.TSRANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE624]'
  id: totrans-2813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: Represent the PostgreSQL TSTZRANGE type.
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSTZRANGE 类型。
- en: '**Class signature**'
  id: totrans-2815
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE
    "sqlalchemy.dialects.postgresql.TSTZRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange"))
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.TSTZRANGE`](#sqlalchemy.dialects.postgresql.TSTZRANGE
    "sqlalchemy.dialects.postgresql.TSTZRANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange`](#sqlalchemy.dialects.postgresql.AbstractSingleRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractSingleRange")）
- en: '[PRE625]'
  id: totrans-2817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: Represent the PostgreSQL INT4MULTIRANGE type.
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT4MULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT4MULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INT4MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT4MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT4MULTIRANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange")）
- en: '[PRE626]'
  id: totrans-2821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: Represent the PostgreSQL INT8MULTIRANGE type.
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL INT8MULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-2823
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT8MULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.INT8MULTIRANGE`](#sqlalchemy.dialects.postgresql.INT8MULTIRANGE
    "sqlalchemy.dialects.postgresql.INT8MULTIRANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange")）
- en: '[PRE627]'
  id: totrans-2825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: Represent the PostgreSQL NUMMULTIRANGE type.
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL NUMMULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE
    "sqlalchemy.dialects.postgresql.NUMMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-2828
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.NUMMULTIRANGE`](#sqlalchemy.dialects.postgresql.NUMMULTIRANGE
    "sqlalchemy.dialects.postgresql.NUMMULTIRANGE") （[`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange")）
- en: '[PRE628]'
  id: totrans-2829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: Represent the PostgreSQL DATEMULTIRANGE type.
  id: totrans-2830
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL DATEMULTIRANGE 类型。
- en: '**Class signature**'
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE
    "sqlalchemy.dialects.postgresql.DATEMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.DATEMULTIRANGE`](#sqlalchemy.dialects.postgresql.DATEMULTIRANGE
    "sqlalchemy.dialects.postgresql.DATEMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
- en: '[PRE629]'
  id: totrans-2833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: Represent the PostgreSQL TSRANGE type.
  id: totrans-2834
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSRANGE 类型。
- en: '**Class signature**'
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.TSMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
- en: '[PRE630]'
  id: totrans-2837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: Represent the PostgreSQL TSTZRANGE type.
  id: totrans-2838
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL TSTZRANGE 类型。
- en: '**Class signature**'
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
  id: totrans-2840
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.TSTZMULTIRANGE`](#sqlalchemy.dialects.postgresql.TSTZMULTIRANGE
    "sqlalchemy.dialects.postgresql.TSTZMULTIRANGE") ([`sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange`](#sqlalchemy.dialects.postgresql.AbstractMultiRange
    "sqlalchemy.dialects.postgresql.ranges.AbstractMultiRange"))
- en: '[PRE631]'
  id: totrans-2841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: Represents a multirange sequence.
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个多范围序列。
- en: 'This list subclass is an utility to allow automatic type inference of the proper
    multi-range SQL type depending on the single range values. This is useful when
    operating on literal multi-ranges:'
  id: totrans-2843
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表子类是一个实用工具，可以根据单个范围值自动推断适当的多范围 SQL 类型。在操作文本多范围时，这是非常有用的：
- en: '[PRE632]'
  id: totrans-2844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: New in version 2.0.26.
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.26 版本中新增。
- en: See also
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Use of a MultiRange sequence to infer the multirange type](#postgresql-multirange-list-use).'
  id: totrans-2847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 MultiRange 序列来推断多范围类型](#postgresql-multirange-list-use).'
- en: '**Class signature**'
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") (`builtins.list`, `typing.Generic`)
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.MultiRange`](#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") (`builtins.list`, `typing.Generic`)
- en: PostgreSQL SQL Elements and Functions
  id: totrans-2850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL SQL 元素和函数
- en: '| Object Name | Description |'
  id: totrans-2851
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2852
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aggregate_order_by](#sqlalchemy.dialects.postgresql.aggregate_order_by)
    | Represent a PostgreSQL aggregate order by expression. |'
  id: totrans-2853
  prefs: []
  type: TYPE_TB
  zh: '| [aggregate_order_by](#sqlalchemy.dialects.postgresql.aggregate_order_by)
    | 表示 PostgreSQL 聚合排序表达式。 |'
- en: '| [All](#sqlalchemy.dialects.postgresql.All)(other, arrexpr[, operator]) |
    A synonym for the ARRAY-level [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method. See that method for details.
    |'
  id: totrans-2854
  prefs: []
  type: TYPE_TB
  zh: '| [All](#sqlalchemy.dialects.postgresql.All)(other, arrexpr[, operator]) |
    是 [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法在数组层面的同义词。详情请参阅该方法。 |'
- en: '| [Any](#sqlalchemy.dialects.postgresql.Any)(other, arrexpr[, operator]) |
    A synonym for the ARRAY-level [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method. See that method for details.
    |'
  id: totrans-2855
  prefs: []
  type: TYPE_TB
  zh: '| [Any](#sqlalchemy.dialects.postgresql.Any)(other, arrexpr[, operator]) |
    是 [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法在数组层面的同义词。详情请参阅该方法。 |'
- en: '| [array](#sqlalchemy.dialects.postgresql.array) | A PostgreSQL ARRAY literal.
    |'
  id: totrans-2856
  prefs: []
  type: TYPE_TB
  zh: '| [array](#sqlalchemy.dialects.postgresql.array) | 一个 PostgreSQL 数组字面量。 |'
- en: '| [array_agg](#sqlalchemy.dialects.postgresql.array_agg)(*arg, **kw) | PostgreSQL-specific
    form of [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), ensures return type is [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") and not the plain [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), unless an explicit `type_` is passed. |'
  id: totrans-2857
  prefs: []
  type: TYPE_TB
  zh: '| [array_agg](#sqlalchemy.dialects.postgresql.array_agg)(*arg, **kw) | PostgreSQL
    特定形式的 [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")，确保返回类型是 [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 而不是普通的 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，除非显式传递了 `type_`。 |'
- en: '| [hstore](#sqlalchemy.dialects.postgresql.hstore) | Construct an hstore value
    within a SQL expression using the PostgreSQL `hstore()` function. |'
  id: totrans-2858
  prefs: []
  type: TYPE_TB
  zh: '| [hstore](#sqlalchemy.dialects.postgresql.hstore) | 使用 PostgreSQL 的 `hstore()`
    函数在 SQL 表达式中构造 hstore 值。 |'
- en: '| [phraseto_tsquery](#sqlalchemy.dialects.postgresql.phraseto_tsquery) | The
    PostgreSQL `phraseto_tsquery` SQL function. |'
  id: totrans-2859
  prefs: []
  type: TYPE_TB
  zh: '| [phraseto_tsquery](#sqlalchemy.dialects.postgresql.phraseto_tsquery) | PostgreSQL
    的 `phraseto_tsquery` SQL 函数。 |'
- en: '| [plainto_tsquery](#sqlalchemy.dialects.postgresql.plainto_tsquery) | The
    PostgreSQL `plainto_tsquery` SQL function. |'
  id: totrans-2860
  prefs: []
  type: TYPE_TB
  zh: '| [plainto_tsquery](#sqlalchemy.dialects.postgresql.plainto_tsquery) | PostgreSQL
    的 `plainto_tsquery` SQL 函数。 |'
- en: '| [to_tsquery](#sqlalchemy.dialects.postgresql.to_tsquery) | The PostgreSQL
    `to_tsquery` SQL function. |'
  id: totrans-2861
  prefs: []
  type: TYPE_TB
  zh: '| [to_tsquery](#sqlalchemy.dialects.postgresql.to_tsquery) | PostgreSQL 的 `to_tsquery`
    SQL 函数。 |'
- en: '| [to_tsvector](#sqlalchemy.dialects.postgresql.to_tsvector) | The PostgreSQL
    `to_tsvector` SQL function. |'
  id: totrans-2862
  prefs: []
  type: TYPE_TB
  zh: '| [to_tsvector](#sqlalchemy.dialects.postgresql.to_tsvector) | PostgreSQL 的
    `to_tsvector` SQL 函数。 |'
- en: '| [ts_headline](#sqlalchemy.dialects.postgresql.ts_headline) | The PostgreSQL
    `ts_headline` SQL function. |'
  id: totrans-2863
  prefs: []
  type: TYPE_TB
  zh: '| [ts_headline](#sqlalchemy.dialects.postgresql.ts_headline) | PostgreSQL 的
    `ts_headline` SQL 函数。 |'
- en: '| [websearch_to_tsquery](#sqlalchemy.dialects.postgresql.websearch_to_tsquery)
    | The PostgreSQL `websearch_to_tsquery` SQL function. |'
  id: totrans-2864
  prefs: []
  type: TYPE_TB
  zh: '| [websearch_to_tsquery](#sqlalchemy.dialects.postgresql.websearch_to_tsquery)
    | PostgreSQL 的 `websearch_to_tsquery` SQL 函数。 |'
- en: '[PRE633]'
  id: totrans-2865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: Represent a PostgreSQL aggregate order by expression.
  id: totrans-2866
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 PostgreSQL 聚合排序表达式。
- en: 'E.g.:'
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE634]'
  id: totrans-2868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: 'would represent the expression:'
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
  zh: 将会表示表达式：
- en: '[PRE635]'
  id: totrans-2870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: 'Similarly:'
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地：
- en: '[PRE636]'
  id: totrans-2872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: 'Would represent:'
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
  zh: 将表示：
- en: '[PRE637]'
  id: totrans-2874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: 'Changed in version 1.2.13: - the ORDER BY argument may be multiple terms'
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2.13 版本更改：- ORDER BY 参数可以是多个条款
- en: See also
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")'
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")'
- en: '**Class signature**'
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") ([`sqlalchemy.sql.expression.ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.dialects.postgresql.aggregate_order_by`](#sqlalchemy.dialects.postgresql.aggregate_order_by
    "sqlalchemy.dialects.postgresql.aggregate_order_by") ([`sqlalchemy.sql.expression.ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE638]'
  id: totrans-2880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: A PostgreSQL ARRAY literal.
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 的 ARRAY 文字。
- en: 'This is used to produce ARRAY literals in SQL expressions, e.g.:'
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于在 SQL 表达式中生成 ARRAY 文字，例如：
- en: '[PRE639]'
  id: totrans-2883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: 'Produces the SQL:'
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 SQL 如下：
- en: '[PRE640]'
  id: totrans-2885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: 'An instance of [`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array.array")
    will always have the datatype [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"). The “inner” type of the array is inferred from the
    values present, unless the `type_` keyword argument is passed:'
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array.array")
    的一个实例将始终具有数据类型 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")。数组的“内部”类型是根据存在的值推断的，除非传递了
    `type_` 关键字参数：'
- en: '[PRE641]'
  id: totrans-2887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: 'Multidimensional arrays are produced by nesting [`array`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array.array") constructs. The dimensionality of
    the final [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    type is calculated by recursively adding the dimensions of the inner [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type:'
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 多维数组通过嵌套 [`array`](#sqlalchemy.dialects.postgresql.array "sqlalchemy.dialects.postgresql.array.array")
    构造而产生。最终 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型的维数是通过递归添加内部 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型的维数来计算的：
- en: '[PRE642]'
  id: totrans-2889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: 'Produces:'
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
  zh: 生成：
- en: '[PRE643]'
  id: totrans-2891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: 'New in version 1.3.6: added support for multidimensional array literals'
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.6 版本新增功能：增加了对多维数组文字的支持
- en: See also
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")'
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")'
- en: '**Class signature**'
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.array`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") (`sqlalchemy.sql.expression.ExpressionClauseList`)
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.array`](#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") (`sqlalchemy.sql.expression.ExpressionClauseList`)
- en: '[PRE644]'
  id: totrans-2897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: PostgreSQL-specific form of [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg"), ensures return type is [`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") and not the plain [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), unless an explicit `type_` is passed.
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL特定形式的[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg")，确保返回类型为[`ARRAY`](#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")而不是普通的[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，除非传递了显式的`type_`。
- en: '[PRE645]'
  id: totrans-2899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: A synonym for the ARRAY-level [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method. See that method for details.
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ARRAY级别的[`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法的同义词。有关详细信息，请参阅该方法。
- en: '[PRE646]'
  id: totrans-2901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: A synonym for the ARRAY-level [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method. See that method for details.
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
  zh: ARRAY级别的[`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法的同义词。有关详细信息，请参阅该方法。
- en: '[PRE647]'
  id: totrans-2903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: Construct an hstore value within a SQL expression using the PostgreSQL `hstore()`
    function.
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PostgreSQL的`hstore()`函数在SQL表达式中构造一个hstore值。
- en: The [`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore.hstore")
    function accepts one or two arguments as described in the PostgreSQL documentation.
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hstore`](#sqlalchemy.dialects.postgresql.hstore "sqlalchemy.dialects.postgresql.hstore.hstore")函数接受一个或两个参数，如PostgreSQL文档中所述。'
- en: 'E.g.:'
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE648]'
  id: totrans-2907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: See also
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
    - the PostgreSQL `HSTORE` datatype.'
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
    - PostgreSQL的`HSTORE`数据类型。'
- en: '**Members**'
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.dialects.postgresql.hstore.inherit_cache), [type](#sqlalchemy.dialects.postgresql.hstore.type)'
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.dialects.postgresql.hstore.inherit_cache), [type](#sqlalchemy.dialects.postgresql.hstore.type)'
- en: '**Class signature**'
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.hstore`](#sqlalchemy.dialects.postgresql.hstore
    "sqlalchemy.dialects.postgresql.hstore") ([`sqlalchemy.sql.functions.GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.dialects.postgresql.hstore`](#sqlalchemy.dialects.postgresql.hstore
    "sqlalchemy.dialects.postgresql.hstore") ([`sqlalchemy.sql.functions.GenericFunction`](../core/functions.html#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
- en: '[PRE649]'
  id: totrans-2914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey")实例是否应该使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性而不是其超类有关的属性不会更改对象对应的SQL，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-2918
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
  zh: 为自定义构造启用缓存支持](../core/compiler.html#compilerext-caching) - 为第三方或用户定义的SQL构造设置[`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。
- en: '[PRE650]'
  id: totrans-2920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: alias of [`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HSTORE`](#sqlalchemy.dialects.postgresql.HSTORE "sqlalchemy.dialects.postgresql.hstore.HSTORE")的别名'
- en: '[PRE651]'
  id: totrans-2922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: The PostgreSQL `to_tsvector` SQL function.
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`to_tsvector` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR").
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将REGCONFIG参数的自动转换应用于自动使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用[`TSVECTOR`](#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR")的返回类型。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector") will be used automatically when
    invoking `sqlalchemy.func.to_tsvector()`, ensuring the correct argument and return
    type handlers are used at compile and execution time.
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`来导入，或者通过使用`create_engine("postgresql...")`创建PostgreSQL引擎，当调用`sqlalchemy.func.to_tsvector()`时，将自动使用[`to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-2926
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.0rc1中推出。
- en: '**Class signature**'
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.to_tsvector`](#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE652]'
  id: totrans-2929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: The PostgreSQL `to_tsquery` SQL function.
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`to_tsquery` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将REGCONFIG参数的自动转换应用于自动使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用[`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")的返回类型。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery") will be used automatically when invoking
    `sqlalchemy.func.to_tsquery()`, ensuring the correct argument and return type
    handlers are used at compile and execution time.
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`来导入，或者通过使用`create_engine("postgresql...")`创建PostgreSQL引擎，当调用`sqlalchemy.func.to_tsquery()`时，将自动使用[`to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.0rc1中推出。
- en: '**Class signature**'
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.to_tsquery`](#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE653]'
  id: totrans-2936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: The PostgreSQL `plainto_tsquery` SQL function.
  id: totrans-2937
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`plainto_tsquery` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将REGCONFIG参数的自动转换应用于自动使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用[`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")的返回类型。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery") will be used automatically when
    invoking `sqlalchemy.func.plainto_tsquery()`, ensuring the correct argument and
    return type handlers are used at compile and execution time.
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`或者使用`create_engine("postgresql...")`创建一个PostgreSQL引擎，当调用`sqlalchemy.func.plainto_tsquery()`时，[`plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery")将会自动使用，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.0rc1中新增。
- en: '**Class signature**'
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.plainto_tsquery`](#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE654]'
  id: totrans-2943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: The PostgreSQL `phraseto_tsquery` SQL function.
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`phraseto_tsquery` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数自动将REGCONFIG参数强制转换为自动使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并将返回类型应用为[`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery") will be used automatically
    when invoking `sqlalchemy.func.phraseto_tsquery()`, ensuring the correct argument
    and return type handlers are used at compile and execution time.
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`或者使用`create_engine("postgresql...")`创建一个PostgreSQL引擎，当调用`sqlalchemy.func.phraseto_tsquery()`时，[`phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery")将会自动使用，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-2947
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.0rc1中新增。
- en: '**Class signature**'
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.phraseto_tsquery`](#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE655]'
  id: totrans-2950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: The PostgreSQL `websearch_to_tsquery` SQL function.
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`websearch_to_tsquery` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY").
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数自动将REGCONFIG参数强制转换为自动使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并将返回类型应用为[`TSQUERY`](#sqlalchemy.dialects.postgresql.TSQUERY
    "sqlalchemy.dialects.postgresql.TSQUERY")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery") will be used automatically
    when invoking `sqlalchemy.func.websearch_to_tsquery()`, ensuring the correct argument
    and return type handlers are used at compile and execution time.
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经导入了PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`或者使用`create_engine("postgresql...")`创建一个PostgreSQL引擎，当调用`sqlalchemy.func.websearch_to_tsquery()`时，[`websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")将会自动使用，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.0rc1中新增。
- en: '**Class signature**'
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-2956
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.websearch_to_tsquery`](#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
- en: '[PRE656]'
  id: totrans-2957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: The PostgreSQL `ts_headline` SQL function.
  id: totrans-2958
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的`ts_headline` SQL函数。
- en: This function applies automatic casting of the REGCONFIG argument to use the
    [`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG "sqlalchemy.dialects.postgresql.REGCONFIG")
    datatype automatically, and applies a return type of [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT").
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数自动将REGCONFIG参数转换为使用[`REGCONFIG`](#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")数据类型，并应用返回类型[`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")。
- en: Assuming the PostgreSQL dialect has been imported, either by invoking `from
    sqlalchemy.dialects import postgresql`, or by creating a PostgreSQL engine using
    `create_engine("postgresql...")`, [`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline") will be used automatically when
    invoking `sqlalchemy.func.ts_headline()`, ensuring the correct argument and return
    type handlers are used at compile and execution time.
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已导入PostgreSQL方言，可以通过调用`from sqlalchemy.dialects import postgresql`或者使用`create_engine("postgresql...")`创建PostgreSQL引擎，当调用`sqlalchemy.func.ts_headline()`时，将自动使用[`ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline")，确保在编译和执行时使用正确的参数和返回类型处理程序。
- en: New in version 2.0.0rc1.
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能：2.0.0rc1版本。
- en: '**Class signature**'
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline") (`sqlalchemy.dialects.postgresql.ext._regconfig_fn`)
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ts_headline`](#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline")（`sqlalchemy.dialects.postgresql.ext._regconfig_fn`）
- en: PostgreSQL Constraint Types
  id: totrans-2964
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL约束类型
- en: 'SQLAlchemy supports PostgreSQL EXCLUDE constraints via the [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") class:'
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy通过[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")类支持PostgreSQL EXCLUDE约束：
- en: '| Object Name | Description |'
  id: totrans-2966
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2967
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ExcludeConstraint](#sqlalchemy.dialects.postgresql.ExcludeConstraint) |
    A table-level EXCLUDE constraint. |'
  id: totrans-2968
  prefs: []
  type: TYPE_TB
  zh: '| [ExcludeConstraint](#sqlalchemy.dialects.postgresql.ExcludeConstraint) |
    表级EXCLUDE约束。 |'
- en: '[PRE657]'
  id: totrans-2969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: A table-level EXCLUDE constraint.
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
  zh: 表级EXCLUDE约束。
- en: Defines an EXCLUDE constraint as described in the [PostgreSQL documentation](https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE).
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[PostgreSQL文档](https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE)中的描述定义了一个EXCLUDE约束。
- en: '**Members**'
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__)'
  id: totrans-2973
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__)'
- en: '**Class signature**'
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](../core/constraints.html#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")（[`sqlalchemy.schema.ColumnCollectionConstraint`](../core/constraints.html#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")）
- en: '[PRE658]'
  id: totrans-2976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: Create an [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") object.
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint")对象。
- en: 'E.g.:'
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE659]'
  id: totrans-2979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: 'The constraint is normally embedded into the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct directly, or added later using [`append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint"):'
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
  zh: 通常将约束直接嵌入到[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")构造中，或者稍后使用[`append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")添加：
- en: '[PRE660]'
  id: totrans-2981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: The exclude constraint defined in this example requires the `btree_gist` extension,
    that can be created using the command `CREATE EXTENSION btree_gist;`.
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中定义的排除约束需要`btree_gist`扩展，可以使用命令`CREATE EXTENSION btree_gist;`来创建。
- en: 'Parameters:'
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*elements` –'
  id: totrans-2984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*elements` –'
- en: A sequence of two tuples of the form `(column, operator)` where “column” is
    either a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object, or a SQL expression element (e.g. `func.int8range(table.from, table.to)`)
    or the name of a column as string, and “operator” is a string containing the operator
    to use (e.g. “&&” or “=”).
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由两个形式为 `(column, operator)` 的元组序列组成，其中“column”可以是一个 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，或者一个 SQL 表达式元素（例如 `func.int8range(table.from, table.to)`）或者作为字符串的列名，“operator”是一个包含要使用的运算符的字符串（例如“&&”或“=”）。
- en: In order to specify a column name when a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object is not available, while ensuring that any necessary
    quoting rules take effect, an ad-hoc [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object should be used. The `column` may also
    be a string SQL expression when passed as [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") or [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在没有 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象可用时指定列名，并确保任何必要的引号规则生效，应使用临时 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 或 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 对象。当作为 [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 或 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 传递时，`column` 也可以是字符串 SQL 表达式。
- en: '`name` – Optional, the in-database name of this constraint.'
  id: totrans-2987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，此约束在数据库中的名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-2988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，则在为此约束发出 DDL 时发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-2989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 INITIALLY <value>。</value>'
- en: '`using` – Optional string. If set, emit USING <index_method>when issuing DDL
    for this constraint. Defaults to ‘gist’.</index_method>'
  id: totrans-2990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`using` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 USING <index_method>。默认为 ''gist''。</index_method>'
- en: '`where` –'
  id: totrans-2991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where` –'
- en: Optional SQL expression construct or literal SQL string. If set, emit WHERE
    <predicate> when issuing DDL for this constraint.
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选 SQL 表达式构造或字面 SQL 字符串。如果设置，则在为此约束发出 DDL 时发出 WHERE <predicate>。
- en: Warning
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: The [`ExcludeConstraint.where`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.where
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") argument to [`ExcludeConstraint`](#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") can be passed as a Python
    string argument, which will be treated as **trusted SQL text** and rendered as
    given. **DO NOT PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ExcludeConstraint.where`](#sqlalchemy.dialects.postgresql.ExcludeConstraint.params.where
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 参数可以作为 Python 字符串参数传递，该参数将被视为**受信任的
    SQL 文本**并按照给定的方式呈现。**不要将不受信任的输入传递给此参数**。'
- en: '`ops` –'
  id: totrans-2995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ops` –'
- en: Optional dictionary. Used to define operator classes for the elements; works
    the same way as that of the [postgresql_ops](#postgresql-operator-classes) parameter
    specified to the [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct.
  id: totrans-2996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字典。用于为元素定义运算符类；与传递给 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的 [postgresql_ops](#postgresql-operator-classes)
    参数的工作方式相同。
- en: New in version 1.3.21.
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3.21 版本中的新功能。
- en: See also
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Operator Classes](#postgresql-operator-classes) - general description of how
    PostgreSQL operator classes are specified.'
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[运算符类](#postgresql-operator-classes) - PostgreSQL 运算符类的一般描述。'
- en: 'For example:'
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE661]'
  id: totrans-3001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: PostgreSQL DML Constructs
  id: totrans-3002
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL DML 构造
- en: '| Object Name | Description |'
  id: totrans-3003
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-3004
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [insert](#sqlalchemy.dialects.postgresql.insert)(table) | Construct a PostgreSQL-specific
    variant [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    construct. |'
  id: totrans-3005
  prefs: []
  type: TYPE_TB
  zh: '| [insert](#sqlalchemy.dialects.postgresql.insert)(table) | 构造一个特定于 PostgreSQL
    的变体 [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    构造。 |'
- en: '| [Insert](#sqlalchemy.dialects.postgresql.Insert) | PostgreSQL-specific implementation
    of INSERT. |'
  id: totrans-3006
  prefs: []
  type: TYPE_TB
  zh: '| [Insert](#sqlalchemy.dialects.postgresql.Insert) | INSERT 的 PostgreSQL 特定实现。
    |'
- en: '[PRE662]'
  id: totrans-3007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: Construct a PostgreSQL-specific variant [`Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") construct.
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个特定于 PostgreSQL 的变体[`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    构造。
- en: The [`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") function creates a [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert"). This class is based on the dialect-agnostic
    [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which may be constructed using the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") function in SQLAlchemy Core.
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") 函数创建一个 [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert")。这个类基于方言不可知的 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造，可以使用 SQLAlchemy Core 中的 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 函数构造。'
- en: The [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    construct includes additional methods [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update"), [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing").
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    构造包括额外的方法 [`Insert.on_conflict_do_update()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update"), [`Insert.on_conflict_do_nothing()`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing")。'
- en: '[PRE663]'
  id: totrans-3011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: PostgreSQL-specific implementation of INSERT.
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 特定的 INSERT 实现。
- en: Adds methods for PG-specific syntaxes such as ON CONFLICT.
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了针对 PG 特定语法的方法，例如 ON CONFLICT。
- en: The [`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    object is created using the [`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") function.
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.dialects.postgresql.Insert "sqlalchemy.dialects.postgresql.Insert")
    对象是使用 [`sqlalchemy.dialects.postgresql.insert()`](#sqlalchemy.dialects.postgresql.insert
    "sqlalchemy.dialects.postgresql.insert") 函数创建的。'
- en: '**Members**'
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[excluded](#sqlalchemy.dialects.postgresql.Insert.excluded), [inherit_cache](#sqlalchemy.dialects.postgresql.Insert.inherit_cache),
    [on_conflict_do_nothing()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing),
    [on_conflict_do_update()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update)'
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
  zh: '[排除](#sqlalchemy.dialects.postgresql.Insert.excluded), [inherit_cache](#sqlalchemy.dialects.postgresql.Insert.inherit_cache),
    [on_conflict_do_nothing()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_nothing),
    [on_conflict_do_update()](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update)'
- en: '**Class signature**'
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.dialects.postgresql.Insert`](#sqlalchemy.dialects.postgresql.Insert
    "sqlalchemy.dialects.postgresql.Insert") ([`sqlalchemy.sql.expression.Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"))
- en: '[PRE664]'
  id: totrans-3019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: Provide the `excluded` namespace for an ON CONFLICT statement
  id: totrans-3020
  prefs: []
  type: TYPE_NORMAL
  zh: 为 ON CONFLICT 语句提供 `excluded` 命名空间
- en: PG’s ON CONFLICT clause allows reference to the row that would be inserted,
    known as `excluded`. This attribute provides all columns in this row to be referenceable.
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
  zh: PG 的 ON CONFLICT 子句允许引用将要插入的行，称为 `excluded`。此属性提供了此行中的所有列以供引用。
- en: Tip
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded "sqlalchemy.dialects.postgresql.Insert.excluded")
    attribute is an instance of [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), which provides an interface the
    same as that of the [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c") collection described at [Accessing Tables and Columns](../core/metadata.html#metadata-tables-and-columns).
    With this collection, ordinary names are accessible like attributes (e.g. `stmt.excluded.some_column`),
    but special names and dictionary method names should be accessed using indexed
    access, such as `stmt.excluded["column name"]` or `stmt.excluded["values"]`. See
    the docstring for [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") for further examples.
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.excluded`](#sqlalchemy.dialects.postgresql.Insert.excluded "sqlalchemy.dialects.postgresql.Insert.excluded")
    属性是 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的实例，提供了与 [访问表和列](../core/metadata.html#metadata-tables-and-columns)
    中描述的 [`Table.c`](../core/metadata.html#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c")
    集合相同的接口。使用此集合，普通名称可像属性一样访问（例如 `stmt.excluded.some_column`），但特殊名称和字典方法名称应使用索引访问，如
    `stmt.excluded["column name"]` 或 `stmt.excluded["values"]`。请参阅 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的文档字符串以获取更多示例。'
- en: See also
  id: totrans-3024
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict) - example of
    how to use `Insert.excluded`'
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict) - 使用 `Insert.excluded`
    的示例'
- en: '[PRE665]'
  id: totrans-3026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: Indicate if this [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") 实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对应的 SQL 不会基于此类的本地属性（而不是其超类）而更改，则可以在特定类上将此标志设置为 `True`。
- en: See also
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](../core/compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](../core/compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL
    结构的 [`HasCacheKey.inherit_cache`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE666]'
  id: totrans-3032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: Specifies a DO NOTHING action for ON CONFLICT clause.
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
  zh: 为 ON CONFLICT 子句指定 DO NOTHING 操作。
- en: The `constraint` and `index_elements` arguments are optional, but only one of
    these can be specified.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: '`constraint` 和 `index_elements` 参数是可选的，但只能指定其中一个。'
- en: 'Parameters:'
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`constraint` – The name of a unique or exclusion constraint on the table, or
    the constraint object itself if it has a .name attribute.'
  id: totrans-3036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint` – 表上唯一或排除约束的名称，或者如果它具有 .name 属性，则为约束对象本身。'
- en: '`index_elements` – A sequence consisting of string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, or other column expression objects that will
    be used to infer a target index.'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_elements` – 由字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象或其他将用于推断目标索引的列表达式对象组成的序列。'
- en: '`index_where` – Additional WHERE criterion that can be used to infer a conditional
    target index.'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_where` – 可用于推断条件目标索引的附加 WHERE 条件。'
- en: See also
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict)'
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict)'
- en: '[PRE667]'
  id: totrans-3041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: Specifies a DO UPDATE SET action for ON CONFLICT clause.
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
  zh: 为 ON CONFLICT 子句指定 DO UPDATE SET 操作。
- en: Either the `constraint` or `index_elements` argument is required, but only one
    of these can be specified.
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
  zh: '`constraint` 或 `index_elements` 参数中的一个是必需的，但只能指定其中一个。'
- en: 'Parameters:'
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`constraint` – The name of a unique or exclusion constraint on the table, or
    the constraint object itself if it has a .name attribute.'
  id: totrans-3045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint` – 表上唯一或排除约束的名称，或者如果具有`.name`属性的约束对象本身。'
- en: '`index_elements` – A sequence consisting of string column names, [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, or other column expression objects that will
    be used to infer a target index.'
  id: totrans-3046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_elements` – 由字符串列名、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象或其他将用于推断目标索引的列表达式对象组成的序列。'
- en: '`index_where` – Additional WHERE criterion that can be used to infer a conditional
    target index.'
  id: totrans-3047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index_where` – 可用于推断条件目标索引的附加WHERE条件。'
- en: '`set_` –'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_` –'
- en: A dictionary or other mapping object where the keys are either names of columns
    in the target table, or [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or other ORM-mapped columns matching that
    of the target table, and expressions or literals as values, specifying the `SET`
    actions to take.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典或其他映射对象，其中键要么是目标表中的列名，要么是[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象或其他与目标表匹配的ORM映射列，值为表达式或文字，指定要执行的`SET`操作。
- en: 'New in version 1.4: The [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter supports
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects from the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as keys.'
  id: totrans-3050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能：[`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")参数支持来自目标[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象作为键。
- en: Warning
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: This dictionary does **not** take into account Python-specified default UPDATE
    values or generation functions, e.g. those specified using [`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column"). These values will not be exercised for an ON CONFLICT
    style of UPDATE, unless they are manually specified in the [`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") dictionary.
  id: totrans-3052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此字典**不**考虑Python指定的默认UPDATE值或生成函数，例如使用[`Column.onupdate`](../core/metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column")指定的值。这些值在进行ON CONFLICT风格的UPDATE时不会被执行，除非它们在[`Insert.on_conflict_do_update.set_`](#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.set_
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")字典中手动指定。
- en: '`where` – Optional argument. If present, can be a literal SQL string or an
    acceptable expression for a `WHERE` clause that restricts the rows affected by
    `DO UPDATE SET`. Rows not meeting the `WHERE` condition will not be updated (effectively
    a `DO NOTHING` for those rows).'
  id: totrans-3053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where` – 可选参数。如果存在，可以是字面SQL字符串或`WHERE`子句的可接受表达式，用于限制受`DO UPDATE SET`影响的行。不符合`WHERE`条件的行将不会被更新（对于这些行实际上是`DO
    NOTHING`）。'
- en: See also
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT…ON CONFLICT (Upsert)](#postgresql-insert-on-conflict)'
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…ON CONFLICT（Upsert）](#postgresql-insert-on-conflict)'
- en: '## psycopg2'
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
  zh: '## psycopg2'
- en: Support for the PostgreSQL database via the psycopg2 driver.
  id: totrans-3057
  prefs: []
  type: TYPE_NORMAL
  zh: 通过psycopg2驱动程序支持PostgreSQL数据库。
- en: DBAPI
  id: totrans-3058
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg2 is available
    at: [https://pypi.org/project/psycopg2/](https://pypi.org/project/psycopg2/)'
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2的文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/psycopg2/](https://pypi.org/project/psycopg2/)
- en: Connecting
  id: totrans-3060
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-3061
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE668]'
  id: totrans-3062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: '### psycopg2 Connect Arguments'
  id: totrans-3063
  prefs: []
  type: TYPE_NORMAL
  zh: '### psycopg2 连接参数'
- en: 'Keyword arguments that are specific to the SQLAlchemy psycopg2 dialect may
    be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), and include the following:'
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")的特定于SQLAlchemy
    psycopg2方言的关键字参数包括以下内容：
- en: '`isolation_level`: This option, available for all PostgreSQL dialects, includes
    the `AUTOCOMMIT` isolation level when using the psycopg2 dialect. This option
    sets the **default** isolation level for the connection that is set immediately
    upon connection to the database before the connection is pooled. This option is
    generally superseded by the more modern [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option, detailed at
    [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).'
  id: totrans-3065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level`：此选项适用于所有 PostgreSQL 方言，在使用 psycopg2 方言时包括 `AUTOCOMMIT` 隔离级别。此选项设置连接的**默认**隔离级别，即在连接到数据库之前立即设置的连接隔离级别，而不是连接到池中。通常，此选项被更现代的[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")执行选项所取代，详细信息请参见[设置事务隔离级别，包括 DBAPI
    自动提交](../core/connections.html#dbapi-autocommit)。'
- en: See also
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 事务隔离级别](#psycopg2-isolation-level)'
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-3068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别，包括 DBAPI 自动提交](../core/connections.html#dbapi-autocommit)'
- en: '`client_encoding`: sets the client encoding in a libpq-agnostic way, using
    psycopg2’s `set_client_encoding()` method.'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_encoding`：以与 libpq 无关的方式设置客户端编码，使用 psycopg2 的 `set_client_encoding()`
    方法。'
- en: See also
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Unicode with Psycopg2](#psycopg2-unicode)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 中的 Unicode](#psycopg2-unicode)'
- en: '`executemany_mode`, `executemany_batch_page_size`, `executemany_values_page_size`:
    Allows use of psycopg2 extensions for optimizing “executemany”-style queries.
    See the referenced section below for details.'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany_mode`、`executemany_batch_page_size`、`executemany_values_page_size`：允许使用
    psycopg2 扩展来优化“executemany”风格的查询。有关详细信息，请参见下面引用的部分。'
- en: See also
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Psycopg2 Fast Execution Helpers](#psycopg2-executemany-mode)'
  id: totrans-3074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2 快速执行助手](#psycopg2-executemany-mode)'
- en: Tip
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The above keyword arguments are **dialect** keyword arguments, meaning that
    they are passed as explicit keyword arguments to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: 上述关键字参数是**方言**关键字参数，这意味着它们作为显式关键字参数传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")：
- en: '[PRE669]'
  id: totrans-3077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: 'These should not be confused with **DBAPI** connect arguments, which are passed
    as part of the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary and/or are passed in the URL query string,
    as detailed in the section [Custom DBAPI connect() arguments / on-connect routines](../core/engines.html#custom-dbapi-args).  ###
    SSL Connections'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不应与**DBAPI**连接参数混淆，这些参数作为[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典的一部分传递，和/或作为 URL 查询字符串传递，详细信息请参见[自定义 DBAPI connect()
    参数 / 连接时例程](../core/engines.html#custom-dbapi-args)部分。### SSL 连接
- en: The psycopg2 module has a connection argument named `sslmode` for controlling
    its behavior regarding secure (SSL) connections. The default is `sslmode=prefer`;
    it will attempt an SSL connection and if that fails it will fall back to an unencrypted
    connection. `sslmode=require` may be used to ensure that only secure connections
    are established. Consult the psycopg2 / libpq documentation for further options
    that are available.
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 模块有一个名为`sslmode`的连接参数，用于控制其关于安全（SSL）连接的行为。默认值为`sslmode=prefer`；它将尝试建立
    SSL 连接，如果失败，则退回到非加密连接。可以使用`sslmode=require`来确保仅建立安全连接。请查阅 psycopg2 / libpq 文档以获取更多可用选项。
- en: 'Note that `sslmode` is specific to psycopg2 so it is included in the connection
    URI:'
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`sslmode` 是特定于 psycopg2 的，因此它包含在连接 URI 中：
- en: '[PRE670]'
  id: totrans-3081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: Unix Domain Connections
  id: totrans-3082
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unix 域连接
- en: 'psycopg2 supports connecting via Unix domain connections. When the `host` portion
    of the URL is omitted, SQLAlchemy passes `None` to psycopg2, which specifies Unix-domain
    communication rather than TCP/IP communication:'
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 支持通过 Unix 域连接进行连接。当 URL 的`host`部分被省略时，SQLAlchemy 将`None`传递给 psycopg2，这指定了
    Unix 域通信而不是 TCP/IP 通信：
- en: '[PRE671]'
  id: totrans-3084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: 'By default, the socket file used is to connect to a Unix-domain socket in `/tmp`,
    or whatever socket directory was specified when PostgreSQL was built. This value
    can be overridden by passing a pathname to psycopg2, using `host` as an additional
    keyword argument:'
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用于连接到 Unix 域套接字的套接字文件位于 `/tmp` 中，或者在构建 PostgreSQL 时指定了套接字目录。可以通过将路径名传递给
    psycopg2，使用`host`作为附加关键字参数来覆盖此值：
- en: '[PRE672]'
  id: totrans-3086
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: Warning
  id: totrans-3087
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The format accepted here allows for a hostname in the main URL in addition
    to the “host” query string argument. **When using this URL format, the initial
    host is silently ignored**. That is, this URL:'
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
  zh: 此处接受的格式允许在主URL中使用主机名，除了“host”查询字符串参数。**使用此URL格式时，初始主机会被默默忽略**。也就是说，此URL：
- en: '[PRE673]'
  id: totrans-3089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: Above, the hostname `myhost1` is **silently ignored and discarded.** The host
    which is connected is the `myhost2` host.
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述中，主机名`myhost1`被**默默忽略并丢弃**了。连接的主机是`myhost2`主机。
- en: This is to maintain some degree of compatibility with PostgreSQL’s own URL format
    which has been tested to behave the same way and for which tools like PifPaf hardcode
    two hostnames.
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了保持与PostgreSQL自身的URL格式的某种兼容性，已经测试了相同的行为，并且像PifPaf这样的工具硬编码了两个主机名。
- en: See also
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PQconnectdbParams](https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS)'
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
  zh: '[PQconnectdbParams](https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS)'
- en: '### Specifying multiple fallback hosts'
  id: totrans-3094
  prefs: []
  type: TYPE_NORMAL
  zh: '### 指定多个备用主机'
- en: 'psycopg2 supports multiple connection points in the connection string. When
    the `host` parameter is used multiple times in the query section of the URL, SQLAlchemy
    will create a single string of the host and port information provided to make
    the connections. Tokens may consist of `host::port` or just `host`; in the latter
    case, the default port is selected by libpq. In the example below, three host
    connections are specified, for `HostA::PortA`, `HostB` connecting to the default
    port, and `HostC::PortC`:'
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2支持在连接字符串中指定多个连接点。当在URL的查询部分中多次使用`host`参数时，SQLAlchemy将创建提供的主机和端口信息的单个字符串以进行连接。令牌可以包含`host::port`或`host`；在后一种情况下，libpq将选择默认端口。在下面的示例中，指定了三个主机连接，分别为`HostA::PortA`，`HostB`连接到默认端口和`HostC::PortC`：
- en: '[PRE674]'
  id: totrans-3096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: 'As an alternative, libpq query string format also may be used; this specifies
    `host` and `port` as single query string arguments with comma-separated lists
    - the default port can be chosen by indicating an empty value in the comma separated
    list:'
  id: totrans-3097
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种替代方案，也可以使用libpq查询字符串格式；这将`host`和`port`作为单个查询字符串参数指定，其值为逗号分隔的列表 - 可以通过在逗号分隔的列表中指定空值来选择默认端口：
- en: '[PRE675]'
  id: totrans-3098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: With either URL style, connections to each host is attempted based on a configurable
    strategy, which may be configured using the libpq `target_session_attrs` parameter.
    Per libpq this defaults to `any` which indicates a connection to each host is
    then attempted until a connection is successful. Other strategies include `primary`,
    `prefer-standby`, etc. The complete list is documented by PostgreSQL at [libpq
    connection strings](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何一种URL样式，都将基于可配置的策略尝试对每个主机进行连接，可以使用libpq的`target_session_attrs`参数进行配置。根据libpq的说法，这默认为`any`，表示然后尝试连接到每个主机，直到连接成功。其他策略包括`primary`、`prefer-standby`等。完整列表由PostgreSQL在[libpq连接字符串](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)中记录。
- en: 'For example, to indicate two hosts using the `primary` strategy:'
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用`primary`策略指示两个主机：
- en: '[PRE676]'
  id: totrans-3101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: 'Changed in version 1.4.40: Port specification in psycopg2 multiple host format
    is repaired, previously ports were not correctly interpreted in this context.
    libpq comma-separated format is also now supported.'
  id: totrans-3102
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.40开始更改：在psycopg2多主机格式中修复了端口规范，以前在此上下文中未正确解释端口。现在还支持libpq逗号分隔的格式。
- en: 'New in version 1.3.20: Support for multiple hosts in PostgreSQL connection
    string.'
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.20中的新功能：支持在PostgreSQL连接字符串中指定多个主机。
- en: See also
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[libpq connection strings](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
    - please refer to this section in the libpq documentation for complete background
    on multiple host support.'
  id: totrans-3105
  prefs: []
  type: TYPE_NORMAL
  zh: '[libpq连接字符串](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
    - 请参阅libpq文档中关于多主机支持的完整背景信息的本节。'
- en: Empty DSN Connections / Environment Variable Connections
  id: totrans-3106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空DSN连接/环境变量连接
- en: The psycopg2 DBAPI can connect to PostgreSQL by passing an empty DSN to the
    libpq client library, which by default indicates to connect to a localhost PostgreSQL
    database that is open for “trust” connections. This behavior can be further tailored
    using a particular set of environment variables which are prefixed with `PG_...`,
    which are consumed by `libpq` to take the place of any or all elements of the
    connection string.
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 DBAPI可以通过将空DSN传递给libpq客户端库来连接到PostgreSQL，默认情况下表示连接到打开“信任”连接的本地主机PostgreSQL数据库。此行为可以进一步使用一组以`PG_...`为前缀的特定环境变量进行定制，这些环境变量由`libpq`消耗，以取代连接字符串的任何或所有元素。
- en: 'For this form, the URL can be passed without any elements other than the initial
    scheme:'
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此形式，可以传递 URL 而不包含任何除初始方案之外的元素：
- en: '[PRE677]'
  id: totrans-3109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: In the above form, a blank “dsn” string is passed to the `psycopg2.connect()`
    function which in turn represents an empty DSN passed to libpq.
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述形式中，将空的“dsn”字符串传递给 `psycopg2.connect()` 函数，该函数反过来表示传递给 libpq 的空 DSN。
- en: 'New in version 1.3.2: support for parameter-less connections with psycopg2.'
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.2 中新增：对于 psycopg2 支持无参数连接。
- en: See also
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Environment Variables](https://www.postgresql.org/docs/current/libpq-envars.html)
    - PostgreSQL documentation on how to use `PG_...` environment variables for connections.'
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: '[环境变量](https://www.postgresql.org/docs/current/libpq-envars.html) - PostgreSQL
    文档上关于如何使用 `PG_...` 环境变量进行连接的说明。'
- en: '### Per-Statement/Connection Execution Options'
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
  zh: '### 每语句/连接执行选项'
- en: 'The following DBAPI-specific options are respected when used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), [`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options"), in addition to those not specific to
    DBAPIs:'
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")、[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")、[`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") 时，将遵守以下特定于 DBAPI 的选项，除了不特定于 DBAPI 的选项之外：
- en: '`isolation_level` - Set the transaction isolation level for the lifespan of
    a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (can only be set on a connection, not a statement or query). See [Psycopg2 Transaction
    Isolation Level](#psycopg2-isolation-level).'
  id: totrans-3116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` - 设置[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的事务隔离级别的生命周期（仅可在连接上设置，而不是在语句或查询上）。请参阅 [Psycopg2
    事务隔离级别](#psycopg2-isolation-level)。'
- en: '`stream_results` - Enable or disable usage of psycopg2 server side cursors
    - this feature makes use of “named” cursors in combination with special result
    handling methods so that result rows are not fully buffered. Defaults to False,
    meaning cursors are buffered by default.'
  id: totrans-3117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stream_results` - 启用或禁用 psycopg2 服务器端游标的使用 - 此功能使用“命名”游标与特殊的结果处理方法结合使用，以便结果行不会完全缓冲。默认为
    False，意味着游标默认情况下是缓冲的。'
- en: '`max_row_buffer` - when using `stream_results`, an integer value that specifies
    the maximum number of rows to buffer at a time. This is interpreted by the `BufferedRowCursorResult`,
    and if omitted the buffer will grow to ultimately store 1000 rows at a time.'
  id: totrans-3118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_row_buffer` - 在使用 `stream_results` 时，一个整数值，指定一次最多缓冲的行数。这由 `BufferedRowCursorResult`
    解释，如果省略，缓冲区将增长到最终每次存储 1000 行。'
- en: 'Changed in version 1.4: The `max_row_buffer` size can now be greater than 1000,
    and the buffer will grow to that size.  ### Psycopg2 Fast Execution Helpers'
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '1.4 版中更改：`max_row_buffer` 大小现在可以大于 1000，缓冲区将增长到该大小。 ### Psycopg2 快速执行助手'
- en: Modern versions of psycopg2 include a feature known as [Fast Execution Helpers](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    , which have been shown in benchmarking to improve psycopg2’s executemany() performance,
    primarily with INSERT statements, by at least an order of magnitude.
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
  zh: 现代版本的 psycopg2 包括一个称为 [快速执行助手](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    的功能，据基准测试表明，它可以将 psycopg2 的 executemany() 性能（主要是 INSERT 语句）提高至少一个数量级。
- en: SQLAlchemy implements a native form of the “insert many values” handler that
    will rewrite a single-row INSERT statement to accommodate for many values at once
    within an extended VALUES clause; this handler is equivalent to psycopg2’s `execute_values()`
    handler; an overview of this feature and its configuration are at [“Insert Many
    Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues).
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 实现了一种原生形式的“插入多个值”处理程序，它会重写单行的 INSERT 语句以适应一次在扩展的 VALUES 子句中插入多个值；此处理程序相当于
    psycopg2 的 `execute_values()` 处理程序；有关此功能及其配置的概述在 [“插入多个值”行为对于 INSERT 语句](../core/connections.html#engine-insertmanyvalues)。
- en: 'New in version 2.0: Replaced psycopg2’s `execute_values()` fast execution helper
    with a native SQLAlchemy mechanism known as [insertmanyvalues](../core/connections.html#engine-insertmanyvalues).'
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能：用本机SQLAlchemy机制[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)替换了psycopg2的`execute_values()`快速执行助手。
- en: 'The psycopg2 dialect retains the ability to use the psycopg2-specific `execute_batch()`
    feature, although it is not expected that this is a widely used feature. The use
    of this extension may be enabled using the `executemany_mode` flag which may be
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"):'
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言保留了使用psycopg2特定的`execute_batch()`功能的能力，尽管不太可能广泛使用此功能。可以使用`executemany_mode`标志启用此扩展，该标志可以传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")：
- en: '[PRE678]'
  id: totrans-3124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'Possible options for `executemany_mode` include:'
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
  zh: '`executemany_mode`的可能选项包括：'
- en: '`values_only` - this is the default value. SQLAlchemy’s native [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    handler is used for qualifying INSERT statements, assuming [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") is left at its default value of `True`. This handler
    rewrites simple INSERT statements to include multiple VALUES clauses so that many
    parameter sets can be inserted with one statement.'
  id: totrans-3126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values_only` - 这是默认值。SQLAlchemy的本机[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)处理程序用于限定INSERT语句，假设[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")保持默认值`True`。该处理程序重写简单的INSERT语句，以包含多个VALUES子句，以便可以使用一个语句插入多个参数集。'
- en: '`''values_plus_batch''`- SQLAlchemy’s native [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    handler is used for qualifying INSERT statements, assuming [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") is left at its default value of `True`. Then, psycopg2’s
    `execute_batch()` handler is used for qualifying UPDATE and DELETE statements
    when executed with multiple parameter sets. When using this mode, the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute will not contain a value
    for executemany-style executions against UPDATE and DELETE statements.'
  id: totrans-3127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''values_plus_batch''`- SQLAlchemy的本机[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)处理程序用于限定INSERT语句，假设[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")保持默认值`True`。然后，当使用多个参数集执行UPDATE和DELETE语句时，使用psycopg2的`execute_batch()`处理程序进行限定。在使用此模式时，[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")属性将不会包含对UPDATE和DELETE语句进行executemany-style执行的行数。'
- en: 'Changed in version 2.0: Removed the `''batch''` and `''None''` options from
    psycopg2 `executemany_mode`. Control over batching for INSERT statements is now
    configured via the [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") engine-level parameter.'
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的更改：从psycopg2的`executemany_mode`中删除了`'batch'`和`'None'`选项。现在，INSERT语句的批处理控制是通过[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")引擎级参数配置的。
- en: The term “qualifying statements” refers to the statement being executed being
    a Core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct, and **not** a plain textual SQL string or one constructed using [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"). It also may **not** be a special “extension”
    statement such as an “ON CONFLICT” “upsert” statement. When using the ORM, all
    insert/update/delete statements used by the ORM flush process are qualifying.
  id: totrans-3129
  prefs: []
  type: TYPE_NORMAL
  zh: “限定语句”一词指的是正在执行的语句是一个Core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造，**而不是**一个简单的文本SQL字符串或使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的字符串。它也可能**不**是一个特殊的“扩展”语句，比如“ON CONFLICT”“upsert”语句。在使用ORM时，ORM刷新过程中使用的所有插入/更新/删除语句都是限定的。
- en: The “page size” for the psycopg2 “batch” strategy can be affected by using the
    `executemany_batch_page_size` parameter, which defaults to 100.
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `executemany_batch_page_size` 参数可以影响 psycopg2 的 “batch” 策略的 “页面大小”，默认为 100。
- en: 'For the “insertmanyvalues” feature, the page size can be controlled using the
    [`create_engine.insertmanyvalues_page_size`](../core/engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter, which defaults to 1000\. An example of
    modifying both parameters is below:'
  id: totrans-3131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 “insertmanyvalues” 功能，可以使用 [`create_engine.insertmanyvalues_page_size`](../core/engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") 参数来控制页面大小，默认为 1000。下面是修改两个参数的示例：
- en: '[PRE679]'
  id: totrans-3132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: See also
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    - background on “insertmanyvalues”'
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    - 关于“insertmanyvalues”的背景信息'
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - General information on using the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object to execute statements in such a way as
    to make use of the DBAPI `.executemany()` method.  ### Unicode with Psycopg2'
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 关于使用 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象以便利用 DBAPI 的 `.executemany()` 方法执行语句的一般信息。### 使用 Psycopg2 进行 Unicode 编码'
- en: The psycopg2 DBAPI driver supports Unicode data transparently.
  id: totrans-3136
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 DBAPI 驱动程序支持透明地处理 Unicode 数据。
- en: 'The client character encoding can be controlled for the psycopg2 dialect in
    the following ways:'
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 psycopg2 方言，客户端字符编码可以通过以下方式进行控制：
- en: 'For PostgreSQL 9.1 and above, the `client_encoding` parameter may be passed
    in the database URL; this parameter is consumed by the underlying `libpq` PostgreSQL
    client library:'
  id: totrans-3138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 PostgreSQL 9.1 及以上版本，`client_encoding` 参数可以通过数据库 URL 进行传递；该参数由底层的 `libpq`
    PostgreSQL 客户端库消费：
- en: '[PRE680]'
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE680]'
- en: 'Alternatively, the above `client_encoding` value may be passed using [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") for programmatic establishment with `libpq`:'
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，上述的 `client_encoding` 值可以通过 [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 进行传递，用于使用 `libpq` 进行程序化建立：
- en: '[PRE681]'
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE681]'
- en: 'For all PostgreSQL versions, psycopg2 supports a client-side encoding value
    that will be passed to database connections when they are first established. The
    SQLAlchemy psycopg2 dialect supports this using the `client_encoding` parameter
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"):'
  id: totrans-3142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有的 PostgreSQL 版本，psycopg2 支持客户端编码值，该值在首次建立数据库连接时传递给数据库连接。SQLAlchemy psycopg2
    方言支持通过 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    中传递的 `client_encoding` 参数来实现此功能：
- en: '[PRE682]'
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE682]'
- en: Tip
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The above `client_encoding` parameter admittedly is very similar in appearance
    to usage of the parameter within the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary; the difference above is that the parameter
    is consumed by psycopg2 and is passed to the database connection using `SET client_encoding
    TO 'utf8'`; in the previously mentioned style, the parameter is instead passed
    through psycopg2 and consumed by the `libpq` library.
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述的 `client_encoding` 参数与在 [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典中使用参数的用法非常相似；上面的区别在于，该参数由 psycopg2 消费，并使用 `SET client_encoding
    TO 'utf8'` 将其传递给数据库连接；在前面提到的样式中，该参数被 psycopg2 传递，并由 `libpq` 库消费。
- en: 'A common way to set up client encoding with PostgreSQL databases is to ensure
    it is configured within the server-side postgresql.conf file; this is the recommended
    way to set encoding for a server that is consistently of one encoding in all databases:'
  id: totrans-3146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 数据库中设置客户端编码的常见方式是确保它在服务器端的 postgresql.conf 文件中进行了配置；这是一种推荐的在所有数据库中一致采用一种编码的服务器设置编码的方式：
- en: '[PRE683]'
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE683]'
- en: Transactions
  id: totrans-3148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事务
- en: The psycopg2 dialect fully supports SAVEPOINT and two-phase commit operations.
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 方言完全支持 SAVEPOINT 和两阶段提交操作。
- en: '### Psycopg2 Transaction Isolation Level'
  id: totrans-3150
  prefs: []
  type: TYPE_NORMAL
  zh: '### Psycopg2 事务隔离级别'
- en: As discussed in [Transaction Isolation Level](#postgresql-isolation-level),
    all PostgreSQL dialects support setting of transaction isolation level both via
    the `isolation_level` parameter passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") , as well as the `isolation_level` argument used by
    [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). When using the psycopg2 dialect
    , these options make use of psycopg2’s `set_isolation_level()` connection method,
    rather than emitting a PostgreSQL directive; this is because psycopg2’s API-level
    setting is always emitted at the start of each transaction in any case.
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
  zh: 如[事务隔离级别](#postgresql-isolation-level)中所讨论的，所有PostgreSQL方言都支持通过传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的`isolation_level`参数以及[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")使用的`isolation_level`参数来设置事务隔离级别。在使用psycopg2方言时，这些选项利用了psycopg2的`set_isolation_level()`连接方法，而不是发出PostgreSQL指令；这是因为无论如何，psycopg2的API级别设置总是在每个事务开始时发出。
- en: 'The psycopg2 dialect supports these constants for isolation level:'
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言支持以下隔离级别的常量：
- en: '`READ COMMITTED`'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-3154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-3155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-3156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-3157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-3158
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '[pg8000 Transaction Isolation Level](#pg8000-isolation-level)'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: '[pg8000事务隔离级别](#pg8000-isolation-level)'
- en: NOTICE logging
  id: totrans-3161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意日志
- en: 'The psycopg2 dialect will log PostgreSQL NOTICE messages via the `sqlalchemy.dialects.postgresql`
    logger. When this logger is set to the `logging.INFO` level, notice messages will
    be logged:'
  id: totrans-3162
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言将通过`sqlalchemy.dialects.postgresql`记录PostgreSQL NOTICE消息。当将此记录器设置为`logging.INFO`级别时，将记录通知消息：
- en: '[PRE684]'
  id: totrans-3163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: 'Above, it is assumed that logging is configured externally. If this is not
    the case, configuration such as `logging.basicConfig()` must be utilized:'
  id: totrans-3164
  prefs: []
  type: TYPE_NORMAL
  zh: 上面假设已经外部配置了日志记录。如果不是这种情况，必须使用诸如`logging.basicConfig()`这样的配置：
- en: '[PRE685]'
  id: totrans-3165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: See also
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Logging HOWTO](https://docs.python.org/3/howto/logging.html) - on the python.org
    website'
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
  zh: '[日志指南](https://docs.python.org/3/howto/logging.html) - 在python.org网站上'
- en: '### HSTORE type'
  id: totrans-3168
  prefs: []
  type: TYPE_NORMAL
  zh: '### HSTORE类型'
- en: 'The `psycopg2` DBAPI includes an extension to natively handle marshalling of
    the HSTORE type. The SQLAlchemy psycopg2 dialect will enable this extension by
    default when psycopg2 version 2.4 or greater is used, and it is detected that
    the target database has the HSTORE type set up for use. In other words, when the
    dialect makes the first connection, a sequence like the following is performed:'
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg2` DBAPI包含一个扩展，用于本地处理HSTORE类型的编组。当使用psycopg2版本2.4或更高版本，并且检测到目标数据库已设置为使用HSTORE类型时，SQLAlchemy
    psycopg2方言将默认启用此扩展。换句话说，当方言建立第一个连接时，会执行类似以下的序列：'
- en: Request the available HSTORE oids using `psycopg2.extras.HstoreAdapter.get_oids()`.
    If this function returns a list of HSTORE identifiers, we then determine that
    the `HSTORE` extension is present. This function is **skipped** if the version
    of psycopg2 installed is less than version 2.4.
  id: totrans-3170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`psycopg2.extras.HstoreAdapter.get_oids()`请求可用的HSTORE oids。如果此函数返回HSTORE标识符列表，则我们确定`HSTORE`扩展存在。如果安装的psycopg2版本低于2.4，则将**跳过**此函数。
- en: If the `use_native_hstore` flag is at its default of `True`, and we’ve detected
    that `HSTORE` oids are available, the `psycopg2.extensions.register_hstore()`
    extension is invoked for all connections.
  id: totrans-3171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`use_native_hstore`标志处于默认值`True`，并且我们已经检测到`HSTORE` oids可用，则对所有连接调用`psycopg2.extensions.register_hstore()`扩展。
- en: 'The `register_hstore()` extension has the effect of **all Python dictionaries
    being accepted as parameters regardless of the type of target column in SQL**.
    The dictionaries are converted by this extension into a textual HSTORE expression.
    If this behavior is not desired, disable the use of the hstore extension by setting
    `use_native_hstore` to `False` as follows:'
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_hstore()`扩展的效果是**所有Python字典都被接受为参数，无论目标列的类型是什么**。这些字典由此扩展转换为文本HSTORE表达式。如果不希望这种行为，请通过将`use_native_hstore`设置为`False`来禁用hstore扩展，如下所示：'
- en: '[PRE686]'
  id: totrans-3173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: The `HSTORE` type is **still supported** when the `psycopg2.extensions.register_hstore()`
    extension is not used. It merely means that the coercion between Python dictionaries
    and the HSTORE string format, on both the parameter side and the result side,
    will take place within SQLAlchemy’s own marshalling logic, and not that of `psycopg2`
    which may be more performant.
  id: totrans-3174
  prefs: []
  type: TYPE_NORMAL
  zh: 当未使用`psycopg2.extensions.register_hstore()`扩展时，仍然支持`HSTORE`类型。 这仅意味着在SQLAlchemy自己的编组逻辑中，Python字典和HSTORE字符串格式之间的强制转换，无论是参数方面还是结果方面，都将发生，而不是`psycopg2`的编组逻辑，后者可能更有效率。
- en: DBAPI
  id: totrans-3175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg2 is available
    at: [https://pypi.org/project/psycopg2/](https://pypi.org/project/psycopg2/)'
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2的文档和下载信息（如适用）可在此处获取：[https://pypi.org/project/psycopg2/](https://pypi.org/project/psycopg2/)
- en: Connecting
  id: totrans-3177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: 'Connect String:'
- en: '[PRE687]'
  id: totrans-3179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: '### psycopg2 Connect Arguments'
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
  zh: '### psycopg2连接参数'
- en: 'Keyword arguments that are specific to the SQLAlchemy psycopg2 dialect may
    be passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), and include the following:'
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: 与SQLAlchemy psycopg2方言特定的关键字参数可以传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")，包括以下内容：
- en: '`isolation_level`: This option, available for all PostgreSQL dialects, includes
    the `AUTOCOMMIT` isolation level when using the psycopg2 dialect. This option
    sets the **default** isolation level for the connection that is set immediately
    upon connection to the database before the connection is pooled. This option is
    generally superseded by the more modern [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option, detailed at
    [Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).'
  id: totrans-3182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level`: 此选项适用于所有PostgreSQL方言，在使用psycopg2方言时，它包括`AUTOCOMMIT`隔离级别。
    此选项在连接到数据库时立即设置连接的**默认**隔离级别，然后连接到数据库之前将其池化。 通常，此选项被更现代的[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")执行选项所取代，详见[设置包括DBAPI自动提交的事务隔离级别](../core/connections.html#dbapi-autocommit)。'
- en: See also
  id: totrans-3183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2事务隔离级别](#psycopg2-isolation-level)'
- en: '[Setting Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit)'
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置包括DBAPI自动提交的事务隔离级别](../core/connections.html#dbapi-autocommit)'
- en: '`client_encoding`: sets the client encoding in a libpq-agnostic way, using
    psycopg2’s `set_client_encoding()` method.'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_encoding`: 使用psycopg2的`set_client_encoding()`方法以libpq不可知的方式设置客户端编码。'
- en: See also
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Unicode with Psycopg2](#psycopg2-unicode)'
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2中的Unicode](#psycopg2-unicode)'
- en: '`executemany_mode`, `executemany_batch_page_size`, `executemany_values_page_size`:
    Allows use of psycopg2 extensions for optimizing “executemany”-style queries.
    See the referenced section below for details.'
  id: totrans-3189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany_mode`、`executemany_batch_page_size`、`executemany_values_page_size`：允许使用psycopg2扩展优化“executemany”式查询。
    详见下面引用的章节了解详情。'
- en: See also
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Psycopg2 Fast Execution Helpers](#psycopg2-executemany-mode)'
  id: totrans-3191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Psycopg2快速执行助手](#psycopg2-executemany-mode)'
- en: Tip
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The above keyword arguments are **dialect** keyword arguments, meaning that
    they are passed as explicit keyword arguments to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
  zh: 上述关键字参数是**方言**关键字参数，这意味着它们作为显式关键字参数传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")：
- en: '[PRE688]'
  id: totrans-3194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: These should not be confused with **DBAPI** connect arguments, which are passed
    as part of the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary and/or are passed in the URL query string,
    as detailed in the section [Custom DBAPI connect() arguments / on-connect routines](../core/engines.html#custom-dbapi-args).
  id: totrans-3195
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不应与**DBAPI**连接参数混淆，后者作为[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典的一部分传递，并/或作为URL查询字符串传递，详见[自定义DBAPI connect()参数/连接时例程](../core/engines.html#custom-dbapi-args)章节。
- en: '### SSL Connections'
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
  zh: '### SSL连接'
- en: The psycopg2 module has a connection argument named `sslmode` for controlling
    its behavior regarding secure (SSL) connections. The default is `sslmode=prefer`;
    it will attempt an SSL connection and if that fails it will fall back to an unencrypted
    connection. `sslmode=require` may be used to ensure that only secure connections
    are established. Consult the psycopg2 / libpq documentation for further options
    that are available.
  id: totrans-3197
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2模块有一个名为`sslmode`的连接参数，用于控制其关于安全（SSL）连接的行为。默认值为`sslmode=prefer`；它将尝试SSL连接，如果失败，则会退回到未加密的连接。可以使用`sslmode=require`来确保仅建立安全连接。请查阅psycopg2
    / libpq文档以获取可用的其他选项。
- en: 'Note that `sslmode` is specific to psycopg2 so it is included in the connection
    URI:'
  id: totrans-3198
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`sslmode`是特定于psycopg2的，因此包含在连接URI中：
- en: '[PRE689]'
  id: totrans-3199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: Unix Domain Connections
  id: totrans-3200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unix域连接
- en: 'psycopg2 supports connecting via Unix domain connections. When the `host` portion
    of the URL is omitted, SQLAlchemy passes `None` to psycopg2, which specifies Unix-domain
    communication rather than TCP/IP communication:'
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2支持通过Unix域连接进行连接。当URL的`host`部分被省略时，SQLAlchemy将`None`传递给psycopg2，这指定了Unix域通信而不是TCP/IP通信：
- en: '[PRE690]'
  id: totrans-3202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: 'By default, the socket file used is to connect to a Unix-domain socket in `/tmp`,
    or whatever socket directory was specified when PostgreSQL was built. This value
    can be overridden by passing a pathname to psycopg2, using `host` as an additional
    keyword argument:'
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用于连接的套接字文件是连接到Unix域套接字的`/tmp`，或者在构建PostgreSQL时指定的套接字目录。可以通过将路径名传递给psycopg2，使用`host`作为附加关键字参数来覆盖此值：
- en: '[PRE691]'
  id: totrans-3204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: Warning
  id: totrans-3205
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The format accepted here allows for a hostname in the main URL in addition
    to the “host” query string argument. **When using this URL format, the initial
    host is silently ignored**. That is, this URL:'
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
  zh: 接受的格式允许在主URL中包含主机名，以及“host”查询字符串参数。**当使用此URL格式时，初始主机会被悄悄地忽略**。即，此URL：
- en: '[PRE692]'
  id: totrans-3207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: Above, the hostname `myhost1` is **silently ignored and discarded.** The host
    which is connected is the `myhost2` host.
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例中，主机名`myhost1`被**悄悄地忽略和丢弃**。连接的主机是`myhost2`主机。
- en: This is to maintain some degree of compatibility with PostgreSQL’s own URL format
    which has been tested to behave the same way and for which tools like PifPaf hardcode
    two hostnames.
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了与PostgreSQL自己的URL格式保持某种程度的兼容性，该格式已经经过测试，表现方式相同，并且像PifPaf这样的工具硬编码了两个主机名。
- en: See also
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PQconnectdbParams](https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS)'
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: '[PQconnectdbParams](https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS)'
- en: '### Specifying multiple fallback hosts'
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
  zh: '### 指定多个备用主机'
- en: 'psycopg2 supports multiple connection points in the connection string. When
    the `host` parameter is used multiple times in the query section of the URL, SQLAlchemy
    will create a single string of the host and port information provided to make
    the connections. Tokens may consist of `host::port` or just `host`; in the latter
    case, the default port is selected by libpq. In the example below, three host
    connections are specified, for `HostA::PortA`, `HostB` connecting to the default
    port, and `HostC::PortC`:'
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2支持在连接字符串中使用多个连接点。当在URL的查询部分中多次使用`host`参数时，SQLAlchemy将创建主机和端口信息的单个字符串以进行连接。标记可以由`host::port`或仅`host`组成；在后一种情况下，默认端口由libpq选择。在下面的示例中，指定了三个主机连接，分别为`HostA::PortA`，连接到默认端口的`HostB`，以及`HostC::PortC`：
- en: '[PRE693]'
  id: totrans-3214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: 'As an alternative, libpq query string format also may be used; this specifies
    `host` and `port` as single query string arguments with comma-separated lists
    - the default port can be chosen by indicating an empty value in the comma separated
    list:'
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方案，还可以使用libpq查询字符串格式；这使用逗号分隔的列表指定`host`和`port`作为单个查询字符串参数 - 可以通过在逗号分隔的列表中指示空值来选择默认端口：
- en: '[PRE694]'
  id: totrans-3216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: With either URL style, connections to each host is attempted based on a configurable
    strategy, which may be configured using the libpq `target_session_attrs` parameter.
    Per libpq this defaults to `any` which indicates a connection to each host is
    then attempted until a connection is successful. Other strategies include `primary`,
    `prefer-standby`, etc. The complete list is documented by PostgreSQL at [libpq
    connection strings](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何URL样式，连接到每个主机都是基于可配置策略尝试的，可以使用libpq的`target_session_attrs`参数进行配置。根据libpq，默认值为`any`，表示然后尝试连接到每个主机，直到连接成功。其他策略包括`primary`，`prefer-standby`等。完整列表由PostgreSQL在[libpq连接字符串](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)中记录。
- en: 'For example, to indicate two hosts using the `primary` strategy:'
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 `primary` 策略指示两个主机：
- en: '[PRE695]'
  id: totrans-3219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: 'Changed in version 1.4.40: Port specification in psycopg2 multiple host format
    is repaired, previously ports were not correctly interpreted in this context.
    libpq comma-separated format is also now supported.'
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.40 版本中更改：修复了 psycopg2 多主机格式中端口规范的问题，之前在这种情况下端口没有被正确解释。现在还支持 libpq 逗号分隔的格式。
- en: 'New in version 1.3.20: Support for multiple hosts in PostgreSQL connection
    string.'
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.20 版中的新功能：支持 PostgreSQL 连接字符串中的多个主机。
- en: See also
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[libpq connection strings](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
    - please refer to this section in the libpq documentation for complete background
    on multiple host support.'
  id: totrans-3223
  prefs: []
  type: TYPE_NORMAL
  zh: '[libpq 连接字符串](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
    - 请参考 libpq 文档中有关多主机支持的完整背景信息。'
- en: Empty DSN Connections / Environment Variable Connections
  id: totrans-3224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空 DSN 连接 / 环境变量连接
- en: The psycopg2 DBAPI can connect to PostgreSQL by passing an empty DSN to the
    libpq client library, which by default indicates to connect to a localhost PostgreSQL
    database that is open for “trust” connections. This behavior can be further tailored
    using a particular set of environment variables which are prefixed with `PG_...`,
    which are consumed by `libpq` to take the place of any or all elements of the
    connection string.
  id: totrans-3225
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 DBAPI 可以通过向 libpq 客户端库传递空的 DSN 来连接到 PostgreSQL，默认情况下表示连接到一个开放了“trust”连接的
    localhost PostgreSQL 数据库。这种行为可以通过一组特定的环境变量进一步定制，这些环境变量以 `PG_...` 为前缀，并由 `libpq`
    使用，以取代连接字符串的任何或所有元素。
- en: 'For this form, the URL can be passed without any elements other than the initial
    scheme:'
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此形式，URL 可以在没有除了初始方案之外的任何元素的情况下传递：
- en: '[PRE696]'
  id: totrans-3227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: In the above form, a blank “dsn” string is passed to the `psycopg2.connect()`
    function which in turn represents an empty DSN passed to libpq.
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述形式中，将空的“dsn”字符串传递给`psycopg2.connect()`函数，该函数反过来表示传递给 libpq 的空 DSN。
- en: 'New in version 1.3.2: support for parameter-less connections with psycopg2.'
  id: totrans-3229
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.2 版中的新功能：支持与 psycopg2 无参数连接。
- en: See also
  id: totrans-3230
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Environment Variables](https://www.postgresql.org/docs/current/libpq-envars.html)
    - PostgreSQL documentation on how to use `PG_...` environment variables for connections.'
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
  zh: '[环境变量](https://www.postgresql.org/docs/current/libpq-envars.html) - 有关如何使用
    `PG_...` 环境变量进行连接的 PostgreSQL 文档。'
- en: '### Per-Statement/Connection Execution Options'
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: '### 每条语句 / 连接执行选项'
- en: 'The following DBAPI-specific options are respected when used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), [`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options"), [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options"), in addition to those not specific to
    DBAPIs:'
  id: totrans-3233
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")、[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")、[`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") 一起使用时，以下 DBAPI 特定选项也会被尊重，除了那些不特定于 DBAPI
    的选项：
- en: '`isolation_level` - Set the transaction isolation level for the lifespan of
    a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    (can only be set on a connection, not a statement or query). See [Psycopg2 Transaction
    Isolation Level](#psycopg2-isolation-level).'
  id: totrans-3234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolation_level` - 设置[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的事务隔离级别的寿命（只能在连接上设置，而不是在语句或查询上设置）。参见 [Psycopg2
    事务隔离级别](#psycopg2-isolation-level)。'
- en: '`stream_results` - Enable or disable usage of psycopg2 server side cursors
    - this feature makes use of “named” cursors in combination with special result
    handling methods so that result rows are not fully buffered. Defaults to False,
    meaning cursors are buffered by default.'
  id: totrans-3235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stream_results` - 启用或禁用 psycopg2 服务器端游标的使用 - 此功能结合了“命名”游标和特殊的结果处理方法，以便结果行不被完全缓冲。默认为
    False，意味着游标默认被缓冲。'
- en: '`max_row_buffer` - when using `stream_results`, an integer value that specifies
    the maximum number of rows to buffer at a time. This is interpreted by the `BufferedRowCursorResult`,
    and if omitted the buffer will grow to ultimately store 1000 rows at a time.'
  id: totrans-3236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_row_buffer` - 当使用 `stream_results` 时，整数值，指定一次缓冲的最大行数。这由 `BufferedRowCursorResult`
    解释，如果省略，则缓冲区将最终增长到一次存储 1000 行。'
- en: 'Changed in version 1.4: The `max_row_buffer` size can now be greater than 1000,
    and the buffer will grow to that size.'
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：`max_row_buffer` 的大小现在可以大于 1000，并且缓冲区将增长到该大小。
- en: '### Psycopg2 Fast Execution Helpers'
  id: totrans-3238
  prefs: []
  type: TYPE_NORMAL
  zh: '### Psycopg2 快速执行辅助工具'
- en: Modern versions of psycopg2 include a feature known as [Fast Execution Helpers](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    , which have been shown in benchmarking to improve psycopg2’s executemany() performance,
    primarily with INSERT statements, by at least an order of magnitude.
  id: totrans-3239
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 的现代版本包括一种称为 [快速执行辅助工具](https://www.psycopg.org/docs/extras.html#fast-execution-helpers)
    的功能，据基准测试表明，它们可以将 psycopg2 的 `executemany()` 性能，主要是与 INSERT 语句，至少提高一个数量级。
- en: SQLAlchemy implements a native form of the “insert many values” handler that
    will rewrite a single-row INSERT statement to accommodate for many values at once
    within an extended VALUES clause; this handler is equivalent to psycopg2’s `execute_values()`
    handler; an overview of this feature and its configuration are at [“Insert Many
    Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues).
  id: totrans-3240
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 实现了一种本地形式的“插入多个值”处理程序，该处理程序将重新编写单行 INSERT 语句，以适应在扩展的 VALUES 子句中一次处理多个值；此处理程序等效于
    psycopg2 的 `execute_values()` 处理程序；有关此功能及其配置的概述，请参阅 [“INSERT 语句的插入多个值”行为](../core/connections.html#engine-insertmanyvalues)。
- en: 'New in version 2.0: Replaced psycopg2’s `execute_values()` fast execution helper
    with a native SQLAlchemy mechanism known as [insertmanyvalues](../core/connections.html#engine-insertmanyvalues).'
  id: totrans-3241
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始新增：用名为 [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    的本机 SQLAlchemy 机制替换了 psycopg2 的 `execute_values()` 快速执行辅助工具。
- en: 'The psycopg2 dialect retains the ability to use the psycopg2-specific `execute_batch()`
    feature, although it is not expected that this is a widely used feature. The use
    of this extension may be enabled using the `executemany_mode` flag which may be
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"):'
  id: totrans-3242
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 方言保留了使用 psycopg2 特定的 `execute_batch()` 功能的能力，尽管不太可能广泛使用此功能。可以通过传递给
    [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的 `executemany_mode` 标志启用此扩展：
- en: '[PRE697]'
  id: totrans-3243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: 'Possible options for `executemany_mode` include:'
  id: totrans-3244
  prefs: []
  type: TYPE_NORMAL
  zh: '`executemany_mode` 的可能选项包括：'
- en: '`values_only` - this is the default value. SQLAlchemy’s native [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    handler is used for qualifying INSERT statements, assuming [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") is left at its default value of `True`. This handler
    rewrites simple INSERT statements to include multiple VALUES clauses so that many
    parameter sets can be inserted with one statement.'
  id: totrans-3245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values_only` - 这是默认值。对于限定的 INSERT 语句，假设[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") 保持其默认值`True`，则使用 SQLAlchemy 的本机 [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    处理程序。该处理程序重新编写简单的 INSERT 语句，以包括多个 VALUES 子句，以便可以使用一个语句插入多个参数集。'
- en: '`''values_plus_batch''`- SQLAlchemy’s native [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    handler is used for qualifying INSERT statements, assuming [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") is left at its default value of `True`. Then, psycopg2’s
    `execute_batch()` handler is used for qualifying UPDATE and DELETE statements
    when executed with multiple parameter sets. When using this mode, the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute will not contain a value
    for executemany-style executions against UPDATE and DELETE statements.'
  id: totrans-3246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''values_plus_batch''`- 假设[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")保持默认值`True`，则SQLAlchemy的本地[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)处理程序用于限定INSERT语句。然后，当执行多个参数集时，psycopg2的`execute_batch()`处理程序用于限定UPDATE和DELETE语句。在使用此模式时，[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")属性将不会包含针对UPDATE和DELETE语句的executemany样式执行的值。'
- en: 'Changed in version 2.0: Removed the `''batch''` and `''None''` options from
    psycopg2 `executemany_mode`. Control over batching for INSERT statements is now
    configured via the [`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine") engine-level parameter.'
  id: totrans-3247
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的更改：从psycopg2的`executemany_mode`中删除了`'batch'`和`'None'`选项。现在，对于INSERT语句的批处理控制是通过[`create_engine.use_insertmanyvalues`](../core/engines.html#sqlalchemy.create_engine.params.use_insertmanyvalues
    "sqlalchemy.create_engine")引擎级参数进行配置。
- en: The term “qualifying statements” refers to the statement being executed being
    a Core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    construct, and **not** a plain textual SQL string or one constructed using [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"). It also may **not** be a special “extension”
    statement such as an “ON CONFLICT” “upsert” statement. When using the ORM, all
    insert/update/delete statements used by the ORM flush process are qualifying.
  id: totrans-3248
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“限定语句”指的是要执行的语句是一个Core [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造，并且**不**是一个纯文本的SQL字符串或使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造的字符串。它也可能**不**是一个特殊的“扩展”语句，比如“ON CONFLICT”“upsert”语句。在使用ORM时，ORM刷新过程中使用的所有插入/更新/删除语句都是限定语句。
- en: The “page size” for the psycopg2 “batch” strategy can be affected by using the
    `executemany_batch_page_size` parameter, which defaults to 100.
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`executemany_batch_page_size`参数可以影响psycopg2的“批量”策略中的“页面大小”，默认为100。
- en: 'For the “insertmanyvalues” feature, the page size can be controlled using the
    [`create_engine.insertmanyvalues_page_size`](../core/engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine") parameter, which defaults to 1000\. An example of
    modifying both parameters is below:'
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“insertmanyvalues”特性，页面大小可以使用[`create_engine.insertmanyvalues_page_size`](../core/engines.html#sqlalchemy.create_engine.params.insertmanyvalues_page_size
    "sqlalchemy.create_engine")参数进行控制，默认为1000。下面是修改两个参数的示例：
- en: '[PRE698]'
  id: totrans-3251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: See also
  id: totrans-3252
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    - background on “insertmanyvalues”'
  id: totrans-3253
  prefs: []
  type: TYPE_NORMAL
  zh: '[用于INSERT语句的“Insert Many Values”行为](../core/connections.html#engine-insertmanyvalues)
    - 关于“insertmanyvalues”的背景信息'
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - General information on using the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object to execute statements in such a way as
    to make use of the DBAPI `.executemany()` method.'
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 有关使用[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象执行语句以便利用DBAPI的`.executemany()`方法的一般信息。'
- en: '### Unicode with Psycopg2'
  id: totrans-3255
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用Psycopg2进行Unicode'
- en: The psycopg2 DBAPI driver supports Unicode data transparently.
  id: totrans-3256
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2 DBAPI驱动程序透明地支持Unicode数据。
- en: 'The client character encoding can be controlled for the psycopg2 dialect in
    the following ways:'
  id: totrans-3257
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式控制psycopg2方言的客户端字符编码：
- en: 'For PostgreSQL 9.1 and above, the `client_encoding` parameter may be passed
    in the database URL; this parameter is consumed by the underlying `libpq` PostgreSQL
    client library:'
  id: totrans-3258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于PostgreSQL 9.1及以上版本，`client_encoding`参数可以在数据库URL中传递；此参数由底层的`libpq` PostgreSQL客户端库消耗：
- en: '[PRE699]'
  id: totrans-3259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE699]'
- en: 'Alternatively, the above `client_encoding` value may be passed using [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") for programmatic establishment with `libpq`:'
  id: totrans-3260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，上述`client_encoding`值可以通过[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")在编程方式下与`libpq`建立连接时传递：
- en: '[PRE700]'
  id: totrans-3261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE700]'
- en: 'For all PostgreSQL versions, psycopg2 supports a client-side encoding value
    that will be passed to database connections when they are first established. The
    SQLAlchemy psycopg2 dialect supports this using the `client_encoding` parameter
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"):'
  id: totrans-3262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有的PostgreSQL版本，psycopg2支持一个客户端编码值，在首次建立数据库连接时将其传递给数据库连接。SQLAlchemy psycopg2方言支持使用传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的`client_encoding`参数：
- en: '[PRE701]'
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE701]'
- en: Tip
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The above `client_encoding` parameter admittedly is very similar in appearance
    to usage of the parameter within the [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary; the difference above is that the parameter
    is consumed by psycopg2 and is passed to the database connection using `SET client_encoding
    TO 'utf8'`; in the previously mentioned style, the parameter is instead passed
    through psycopg2 and consumed by the `libpq` library.
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述`client_encoding`参数在外观上与在[`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine")字典中使用参数的用法非常相似；上述的区别在于参数被psycopg2消耗，并使用`SET client_encoding
    TO 'utf8'`传递给数据库连接；在前面提到的样式中，参数反而通过psycopg2传递并由`libpq`库消耗。
- en: 'A common way to set up client encoding with PostgreSQL databases is to ensure
    it is configured within the server-side postgresql.conf file; this is the recommended
    way to set encoding for a server that is consistently of one encoding in all databases:'
  id: totrans-3266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PostgreSQL数据库中设置客户端编码的常见方法是确保它在服务器端的postgresql.conf文件中进行了配置；这是设置所有数据库一致编码的服务器的推荐方法：
- en: '[PRE702]'
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE702]'
- en: Transactions
  id: totrans-3268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事务
- en: The psycopg2 dialect fully supports SAVEPOINT and two-phase commit operations.
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言完全支持SAVEPOINT和两阶段提交操作。
- en: '### Psycopg2 Transaction Isolation Level'
  id: totrans-3270
  prefs: []
  type: TYPE_NORMAL
  zh: '### Psycopg2事务隔离级别'
- en: As discussed in [Transaction Isolation Level](#postgresql-isolation-level),
    all PostgreSQL dialects support setting of transaction isolation level both via
    the `isolation_level` parameter passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") , as well as the `isolation_level` argument used by
    [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). When using the psycopg2 dialect
    , these options make use of psycopg2’s `set_isolation_level()` connection method,
    rather than emitting a PostgreSQL directive; this is because psycopg2’s API-level
    setting is always emitted at the start of each transaction in any case.
  id: totrans-3271
  prefs: []
  type: TYPE_NORMAL
  zh: 如[事务隔离级别](#postgresql-isolation-level)所述，所有的PostgreSQL方言都支持通过传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的`isolation_level`参数以及由[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")使用的`isolation_level`参数设置事务隔离级别。当使用psycopg2方言时，这些选项使用psycopg2的`set_isolation_level()`连接方法，而不是发出PostgreSQL指令；这是因为psycopg2的API级别设置在任何情况下始终在每个事务开始时发出。
- en: 'The psycopg2 dialect supports these constants for isolation level:'
  id: totrans-3272
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言支持这些隔离级别的常量：
- en: '`READ COMMITTED`'
  id: totrans-3273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-3274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-3275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-3276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-3277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-3278
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-3279
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '[pg8000 Transaction Isolation Level](#pg8000-isolation-level)'
  id: totrans-3280
  prefs: []
  type: TYPE_NORMAL
  zh: '[pg8000事务隔离级别](#pg8000-isolation-level)'
- en: NOTICE logging
  id: totrans-3281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NOTICE记录
- en: 'The psycopg2 dialect will log PostgreSQL NOTICE messages via the `sqlalchemy.dialects.postgresql`
    logger. When this logger is set to the `logging.INFO` level, notice messages will
    be logged:'
  id: totrans-3282
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg2方言将通过`sqlalchemy.dialects.postgresql`记录PostgreSQL NOTICE消息。当此记录器设置为`logging.INFO`级别时，注意消息将被记录：
- en: '[PRE703]'
  id: totrans-3283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: 'Above, it is assumed that logging is configured externally. If this is not
    the case, configuration such as `logging.basicConfig()` must be utilized:'
  id: totrans-3284
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的内容中，假设日志是在外部配置的。如果不是这种情况，必须使用`logging.basicConfig()`等配置：
- en: '[PRE704]'
  id: totrans-3285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: See also
  id: totrans-3286
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Logging HOWTO](https://docs.python.org/3/howto/logging.html) - on the python.org
    website'
  id: totrans-3287
  prefs: []
  type: TYPE_NORMAL
  zh: '[日志指南](https://docs.python.org/3/howto/logging.html) - 在python.org网站上'
- en: '### HSTORE type'
  id: totrans-3288
  prefs: []
  type: TYPE_NORMAL
  zh: '### HSTORE类型'
- en: 'The `psycopg2` DBAPI includes an extension to natively handle marshalling of
    the HSTORE type. The SQLAlchemy psycopg2 dialect will enable this extension by
    default when psycopg2 version 2.4 or greater is used, and it is detected that
    the target database has the HSTORE type set up for use. In other words, when the
    dialect makes the first connection, a sequence like the following is performed:'
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg2` DBAPI包括一个扩展，用于原生处理HSTORE类型的编组。当使用psycopg2版本2.4或更高版本，并且检测到目标数据库已设置为使用HSTORE类型时，SQLAlchemy
    psycopg2方言将默认启用此扩展。换句话说，当方言建立第一个连接时，会执行以下类似的序列：'
- en: Request the available HSTORE oids using `psycopg2.extras.HstoreAdapter.get_oids()`.
    If this function returns a list of HSTORE identifiers, we then determine that
    the `HSTORE` extension is present. This function is **skipped** if the version
    of psycopg2 installed is less than version 2.4.
  id: totrans-3290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`psycopg2.extras.HstoreAdapter.get_oids()`请求可用的HSTORE oids。如果此函数返回HSTORE标识符列表，则我们确定`HSTORE`扩展存在。如果安装的psycopg2版本低于2.4，则会**跳过**此函数。
- en: If the `use_native_hstore` flag is at its default of `True`, and we’ve detected
    that `HSTORE` oids are available, the `psycopg2.extensions.register_hstore()`
    extension is invoked for all connections.
  id: totrans-3291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`use_native_hstore`标志处于默认值`True`，并且我们检测到`HSTORE` oids可用，则为所有连接调用`psycopg2.extensions.register_hstore()`扩展。
- en: 'The `register_hstore()` extension has the effect of **all Python dictionaries
    being accepted as parameters regardless of the type of target column in SQL**.
    The dictionaries are converted by this extension into a textual HSTORE expression.
    If this behavior is not desired, disable the use of the hstore extension by setting
    `use_native_hstore` to `False` as follows:'
  id: totrans-3292
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_hstore()`扩展的效果是**所有Python字典都被接受为参数，无论目标列的类型是什么**。这些字典由此扩展转换为文本HSTORE表达式。如果不希望这种行为，请通过将`use_native_hstore`设置为`False`来禁用hstore扩展，如下所示：'
- en: '[PRE705]'
  id: totrans-3293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: The `HSTORE` type is **still supported** when the `psycopg2.extensions.register_hstore()`
    extension is not used. It merely means that the coercion between Python dictionaries
    and the HSTORE string format, on both the parameter side and the result side,
    will take place within SQLAlchemy’s own marshalling logic, and not that of `psycopg2`
    which may be more performant.
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: 当未使用`psycopg2.extensions.register_hstore()`扩展时，`HSTORE`类型仍然得到支持。这仅意味着Python字典与HSTORE字符串格式之间的强制转换，无论是参数方面还是结果方面，都将在SQLAlchemy自己的编组逻辑中进行，而不是在`psycopg2`中进行，后者可能更高效。
- en: '## psycopg'
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
  zh: '## psycopg'
- en: Support for the PostgreSQL database via the psycopg (a.k.a. psycopg 3) driver.
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
  zh: 通过psycopg（又名psycopg 3）驱动程序支持PostgreSQL数据库。
- en: DBAPI
  id: totrans-3297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg (a.k.a.
    psycopg 3) is available at: [https://pypi.org/project/psycopg/](https://pypi.org/project/psycopg/)'
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg（又名psycopg 3）的文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/psycopg/](https://pypi.org/project/psycopg/)
- en: Connecting
  id: totrans-3299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE706]'
  id: totrans-3301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: '`psycopg` is the package and module name for version 3 of the `psycopg` database
    driver, formerly known as `psycopg2`. This driver is different enough from its
    `psycopg2` predecessor that SQLAlchemy supports it via a totally separate dialect;
    support for `psycopg2` is expected to remain for as long as that package continues
    to function for modern Python versions, and also remains the default dialect for
    the `postgresql://` dialect series.'
  id: totrans-3302
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg`是`psycopg`数据库驱动程序第3版的包和模块名称。这个驱动程序与其前身`psycopg2`有足够的不同，以至于SQLAlchemy通过完全独立的方言支持它；预计只要该软件包继续为现代Python版本提供功能，并且仍然是`postgresql://`方言系列的默认方言，就会继续支持`psycopg2`。'
- en: 'The SQLAlchemy `psycopg` dialect provides both a sync and an async implementation
    under the same dialect name. The proper version is selected depending on how the
    engine is created:'
  id: totrans-3303
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy `psycopg`方言在相同的方言名称下提供了同步和异步实现。根据引擎的创建方式选择适当的版本：
- en: 'calling [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    with `postgresql+psycopg://...` will automatically select the sync version, e.g.:'
  id: totrans-3304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`postgresql+psycopg://...`调用[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")将自动选���同步版本，例如：
- en: '[PRE707]'
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE707]'
- en: 'calling [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") with `postgresql+psycopg://...`
    will automatically select the async version, e.g.:'
  id: totrans-3306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `postgresql+psycopg://...` 调用 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 将自动选择异步版本，例如：
- en: '[PRE708]'
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE708]'
- en: 'The asyncio version of the dialect may also be specified explicitly using the
    `psycopg_async` suffix, as:'
  id: totrans-3308
  prefs: []
  type: TYPE_NORMAL
  zh: 可以明确指定方言的 asyncio 版本，如下所示：
- en: '[PRE709]'
  id: totrans-3309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: See also
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[psycopg2](#postgresql-psycopg2) - The SQLAlchemy `psycopg` dialect shares
    most of its behavior with the `psycopg2` dialect. Further documentation is available
    there.'
  id: totrans-3311
  prefs: []
  type: TYPE_NORMAL
  zh: '[psycopg2](#postgresql-psycopg2) - SQLAlchemy `psycopg` 方言与 `psycopg2` 方言大部分行为相同。更多文档可在那里找到。'
- en: Using a different Cursor class
  id: totrans-3312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用不同的 Cursor 类
- en: 'One of the differences between `psycopg` and the older `psycopg2` is how bound
    parameters are handled: `psycopg2` would bind them client side, while `psycopg`
    by default will bind them server side.'
  id: totrans-3313
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg` 与旧版 `psycopg2` 之间的一个区别是如何处理绑定参数：`psycopg2` 会在客户端端绑定它们，而 `psycopg`
    默认情况下会在服务器端绑定它们。'
- en: 'It’s possible to configure `psycopg` to do client side binding by specifying
    the `cursor_factory` to be `ClientCursor` when creating the engine:'
  id: totrans-3314
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在创建引擎时将 `cursor_factory` 指定为 `ClientCursor` 来配置 `psycopg` 进行客户端绑定：
- en: '[PRE710]'
  id: totrans-3315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: 'Similarly when using an async engine the `AsyncClientCursor` can be specified:'
  id: totrans-3316
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当使用异步引擎时，可以指定 `AsyncClientCursor`：
- en: '[PRE711]'
  id: totrans-3317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: See also
  id: totrans-3318
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Client-side-binding cursors](https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors)'
  id: totrans-3319
  prefs: []
  type: TYPE_NORMAL
  zh: '[客户端绑定游标](https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors)'
- en: DBAPI
  id: totrans-3320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg (a.k.a.
    psycopg 3) is available at: [https://pypi.org/project/psycopg/](https://pypi.org/project/psycopg/)'
  id: totrans-3321
  prefs: []
  type: TYPE_NORMAL
  zh: psycopg（又名 psycopg 3）的文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/psycopg/](https://pypi.org/project/psycopg/)
- en: Connecting
  id: totrans-3322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3323
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE712]'
  id: totrans-3324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: Using a different Cursor class
  id: totrans-3325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用不同的 Cursor 类
- en: 'One of the differences between `psycopg` and the older `psycopg2` is how bound
    parameters are handled: `psycopg2` would bind them client side, while `psycopg`
    by default will bind them server side.'
  id: totrans-3326
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg` 与旧版 `psycopg2` 之间的一个区别是如何处理绑定参数：`psycopg2` 会在客户端端绑定它们，而 `psycopg`
    默认情况下会在服务器端绑定它们。'
- en: 'It’s possible to configure `psycopg` to do client side binding by specifying
    the `cursor_factory` to be `ClientCursor` when creating the engine:'
  id: totrans-3327
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在创建引擎时将 `cursor_factory` 指定为 `ClientCursor` 来配置 `psycopg` 进行客户端绑定：
- en: '[PRE713]'
  id: totrans-3328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: 'Similarly when using an async engine the `AsyncClientCursor` can be specified:'
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当使用异步引擎时，可以指定 `AsyncClientCursor`：
- en: '[PRE714]'
  id: totrans-3330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: See also
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Client-side-binding cursors](https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors)'
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
  zh: '[客户端绑定游标](https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors)'
- en: '## pg8000'
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
  zh: '## pg8000'
- en: Support for the PostgreSQL database via the pg8000 driver.
  id: totrans-3334
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 pg8000 驱动程序支持 PostgreSQL 数据库。
- en: DBAPI
  id: totrans-3335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for pg8000 is available
    at: [https://pypi.org/project/pg8000/](https://pypi.org/project/pg8000/)'
  id: totrans-3336
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 的文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/pg8000/](https://pypi.org/project/pg8000/)
- en: Connecting
  id: totrans-3337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3338
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE715]'
  id: totrans-3339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: 'Changed in version 1.4: The pg8000 dialect has been updated for version 1.16.6
    and higher, and is again part of SQLAlchemy’s continuous integration with full
    feature support.'
  id: totrans-3340
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：pg8000 方言已更新为版本 1.16.6 及更高版本，并再次成为 SQLAlchemy 完全特性支持的持续集成的一部分。
- en: '### Unicode'
  id: totrans-3341
  prefs: []
  type: TYPE_NORMAL
  zh: '### Unicode'
- en: 'pg8000 will encode / decode string values between it and the server using the
    PostgreSQL `client_encoding` parameter; by default this is the value in the `postgresql.conf`
    file, which often defaults to `SQL_ASCII`. Typically, this can be changed to `utf-8`,
    as a more useful default:'
  id: totrans-3342
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 将使用 PostgreSQL `client_encoding` 参数在它和服务器之间对字符串值进行编码/解码；默认情况下，这是 `postgresql.conf`
    文件中的值，通常默认为 `SQL_ASCII`。通常，可以将其更改为 `utf-8`，作为更有用的默认值：
- en: '[PRE716]'
  id: totrans-3343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: 'The `client_encoding` can be overridden for a session by executing the SQL:'
  id: totrans-3344
  prefs: []
  type: TYPE_NORMAL
  zh: '`client_encoding` 可以通过执行 SQL 来覆盖会话：'
- en: SET CLIENT_ENCODING TO ‘utf8’;
  id: totrans-3345
  prefs: []
  type: TYPE_NORMAL
  zh: 将 CLIENT_ENCODING 设置为 ‘utf8’;
- en: 'SQLAlchemy will execute this SQL on all new connections based on the value
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    using the `client_encoding` parameter:'
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 将在基于传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的 `client_encoding` 参数的值的所有新连接上执行此 SQL：
- en: '[PRE717]  ### SSL Connections'
  id: totrans-3347
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE717]  ### SSL 连接'
- en: 'pg8000 accepts a Python `SSLContext` object which may be specified using the
    [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary:'
  id: totrans-3348
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 接受 Python 的 `SSLContext` 对象，可以使用 [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典指定：
- en: '[PRE718]'
  id: totrans-3349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: 'If the server uses an automatically-generated certificate that is self-signed
    or does not match the host name (as seen from the client), it may also be necessary
    to disable hostname checking:'
  id: totrans-3350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用自动生成的自签名证书或与主机名不匹配（从客户端视角看），可能还需要禁用主机名检查：
- en: '[PRE719]  ### pg8000 Transaction Isolation Level'
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE719]  ### pg8000 事务隔离级别'
- en: 'The pg8000 dialect offers the same isolation level settings as that of the
    [psycopg2](#psycopg2-isolation-level) dialect:'
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 方言提供与 [psycopg2](#psycopg2-isolation-level) 方言相同的隔离级别设置：
- en: '`READ COMMITTED`'
  id: totrans-3353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-3354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-3355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-3357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-3359
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-3360
  prefs: []
  type: TYPE_NORMAL
  zh: '[Psycopg2 事务隔离级别](#psycopg2-isolation-level)'
- en: DBAPI
  id: totrans-3361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for pg8000 is available
    at: [https://pypi.org/project/pg8000/](https://pypi.org/project/pg8000/)'
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/pg8000/](https://pypi.org/project/pg8000/)
- en: Connecting
  id: totrans-3363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE720]'
  id: totrans-3365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '### Unicode'
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: '### Unicode'
- en: 'pg8000 will encode / decode string values between it and the server using the
    PostgreSQL `client_encoding` parameter; by default this is the value in the `postgresql.conf`
    file, which often defaults to `SQL_ASCII`. Typically, this can be changed to `utf-8`,
    as a more useful default:'
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 将使用 PostgreSQL `client_encoding` 参数在其与服务器之间编码/解码字符串值；默认情况下，这是 `postgresql.conf`
    文件中的值，通常默认为 `SQL_ASCII`。通常，可以将其更改为 `utf-8`，作为更有用的默认值：
- en: '[PRE721]'
  id: totrans-3368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: 'The `client_encoding` can be overridden for a session by executing the SQL:'
  id: totrans-3369
  prefs: []
  type: TYPE_NORMAL
  zh: '`client_encoding` 可以通过执行以下 SQL 来覆盖会话：'
- en: SET CLIENT_ENCODING TO ‘utf8’;
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: SET CLIENT_ENCODING TO ‘utf8’;
- en: 'SQLAlchemy will execute this SQL on all new connections based on the value
    passed to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    using the `client_encoding` parameter:'
  id: totrans-3371
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 将根据传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的 `client_encoding` 参数值，在所有新连接上执行此 SQL：
- en: '[PRE722]'
  id: totrans-3372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: '### SSL Connections'
  id: totrans-3373
  prefs: []
  type: TYPE_NORMAL
  zh: '### SSL 连接'
- en: 'pg8000 accepts a Python `SSLContext` object which may be specified using the
    [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") dictionary:'
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 接受 Python 的 `SSLContext` 对象，可以使用 [`create_engine.connect_args`](../core/engines.html#sqlalchemy.create_engine.params.connect_args
    "sqlalchemy.create_engine") 字典指定：
- en: '[PRE723]'
  id: totrans-3375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: 'If the server uses an automatically-generated certificate that is self-signed
    or does not match the host name (as seen from the client), it may also be necessary
    to disable hostname checking:'
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用自动生成的自签名证书或与主机名不匹配（从客户端视角看），可能还需要禁用主机名检查：
- en: '[PRE724]'
  id: totrans-3377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: '### pg8000 Transaction Isolation Level'
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
  zh: '### pg8000 事务隔离级别'
- en: 'The pg8000 dialect offers the same isolation level settings as that of the
    [psycopg2](#psycopg2-isolation-level) dialect:'
  id: totrans-3379
  prefs: []
  type: TYPE_NORMAL
  zh: pg8000 方言提供与 [psycopg2](#psycopg2-isolation-level) 方言相同的隔离级别设置：
- en: '`READ COMMITTED`'
  id: totrans-3380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ COMMITTED`'
- en: '`READ UNCOMMITTED`'
  id: totrans-3381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ UNCOMMITTED`'
- en: '`REPEATABLE READ`'
  id: totrans-3382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPEATABLE READ`'
- en: '`SERIALIZABLE`'
  id: totrans-3383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIALIZABLE`'
- en: '`AUTOCOMMIT`'
  id: totrans-3384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: See also
  id: totrans-3385
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Transaction Isolation Level](#postgresql-isolation-level)'
  id: totrans-3386
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务隔离级别](#postgresql-isolation-level)'
- en: '[Psycopg2 Transaction Isolation Level](#psycopg2-isolation-level)'
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
  zh: '[Psycopg2 事务隔离级别](#psycopg2-isolation-level)'
- en: '## asyncpg'
  id: totrans-3388
  prefs: []
  type: TYPE_NORMAL
  zh: '## asyncpg'
- en: Support for the PostgreSQL database via the asyncpg driver.
  id: totrans-3389
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 asyncpg 驱动程序支持 PostgreSQL 数据库。
- en: DBAPI
  id: totrans-3390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for asyncpg is available
    at: [https://magicstack.github.io/asyncpg/](https://magicstack.github.io/asyncpg/)'
  id: totrans-3391
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和下载信息（如果适用）可在以下网址找到：[https://magicstack.github.io/asyncpg/](https://magicstack.github.io/asyncpg/)
- en: Connecting
  id: totrans-3392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接中
- en: 'Connect String:'
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE725]'
  id: totrans-3394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: The asyncpg dialect is SQLAlchemy’s first Python asyncio dialect.
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg 方言是 SQLAlchemy 的第一个 Python asyncio 方言。
- en: Using a special asyncio mediation layer, the asyncpg dialect is usable as the
    backend for the [SQLAlchemy asyncio](../orm/extensions/asyncio.html) extension
    package.
  id: totrans-3396
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特殊的 asyncio 中介层，asyncpg 方言可用作 [SQLAlchemy asyncio](../orm/extensions/asyncio.html)
    扩展包的后端。
- en: 'This dialect should normally be used only with the [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine creation function:'
  id: totrans-3397
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言通常只应与 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 引擎创建函数一起使用：
- en: '[PRE726]'
  id: totrans-3398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: New in version 1.4.
  id: totrans-3399
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起新增。
- en: Note
  id: totrans-3400
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By default asyncpg does not decode the `json` and `jsonb` types and returns
    them as strings. SQLAlchemy sets default type decoder for `json` and `jsonb` types
    using the python builtin `json.loads` function. The json implementation used can
    be changed by setting the attribute `json_deserializer` when creating the engine
    with `create_engine()` or `create_async_engine()`.
  id: totrans-3401
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，asyncpg 不会解码 `json` 和 `jsonb` 类型，并将它们返回为字符串。SQLAlchemy 使用 Python 内置的 `json.loads`
    函数为 `json` 和 `jsonb` 类型设置默认类型解码器。可以通过在使用 `create_engine()` 或 `create_async_engine()`
    创建引擎时设置属性 `json_deserializer` 来更改所使用的 json 实现。
- en: '### Multihost Connections'
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多主机连接'
- en: 'The asyncpg dialect features support for multiple fallback hosts in the same
    way as that of the psycopg2 and psycopg dialects. The syntax is the same, using
    `host=<host>:<port>` combinations as additional query string arguments; however,
    there is no default port, so all hosts must have a complete port number present,
    otherwise an exception is raised:'
  id: totrans-3403
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg 方言支持与 psycopg2 和 psycopg 方言相同的多个备用主机。语法相同，使用 `host=<host>:<port>` 组合作为附加查询字符串参数；但是，没有默认端口，因此所有主机必须具有完整的端口号，否则将引发异常：
- en: '[PRE727]'
  id: totrans-3404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: For complete background on this syntax, see [Specifying multiple fallback hosts](#psycopg2-multi-host).
  id: totrans-3405
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此语法的完整背景，请参阅 [指定多个备用主机](#psycopg2-multi-host)。
- en: New in version 2.0.18.
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.18 起新增。
- en: See also
  id: totrans-3407
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Specifying multiple fallback hosts](#psycopg2-multi-host)  ### Prepared Statement
    Cache'
  id: totrans-3408
  prefs: []
  type: TYPE_NORMAL
  zh: '[指定多个备用主机](#psycopg2-multi-host) ### 预备语句缓存'
- en: 'The asyncpg SQLAlchemy dialect makes use of `asyncpg.connection.prepare()`
    for all statements. The prepared statement objects are cached after construction
    which appears to grant a 10% or more performance improvement for statement invocation.
    The cache is on a per-DBAPI connection basis, which means that the primary storage
    for prepared statements is within DBAPI connections pooled within the connection
    pool. The size of this cache defaults to 100 statements per DBAPI connection and
    may be adjusted using the `prepared_statement_cache_size` DBAPI argument (note
    that while this argument is implemented by SQLAlchemy, it is part of the DBAPI
    emulation portion of the asyncpg dialect, therefore is handled as a DBAPI argument,
    not a dialect argument):'
  id: totrans-3409
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg SQLAlchemy 方言使用 `asyncpg.connection.prepare()` 处理所有语句。准备的语句对象在构造后被缓存，这似乎为语句调用提供了
    10% 或更多的性能提升。缓存是基于 DBAPI 连接的，这意味着准备的语句的主要存储在连接池中池化的 DBAPI 连接中。此缓存的大小默认为每个 DBAPI
    连接的 100 个语句，并可以使用 `prepared_statement_cache_size` DBAPI 参数进行调整（请注意，虽然 SQLAlchemy
    实现了此参数，但它是 asyncpg 方言的 DBAPI 模拟部分的一部分，因此将其视为 DBAPI 参数处理，而不是方言参数）：
- en: '[PRE728]'
  id: totrans-3410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: 'To disable the prepared statement cache, use a value of zero:'
  id: totrans-3411
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用准备语句缓存，请使用零值：
- en: '[PRE729]'
  id: totrans-3412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: 'New in version 1.4.0b2: Added `prepared_statement_cache_size` for asyncpg.'
  id: totrans-3413
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.0b2 起新增：为 asyncpg 添加了 `prepared_statement_cache_size`。
- en: Warning
  id: totrans-3414
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `asyncpg` database driver necessarily uses caches for PostgreSQL type OIDs,
    which become stale when custom PostgreSQL datatypes such as `ENUM` objects are
    changed via DDL operations. Additionally, prepared statements themselves which
    are optionally cached by SQLAlchemy’s driver as described above may also become
    “stale” when DDL has been emitted to the PostgreSQL database which modifies the
    tables or other objects involved in a particular prepared statement.
  id: totrans-3415
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncpg` 数据库驱动程序必须使用 PostgreSQL 类型 OID 的缓存，在通过 DDL 操作更改自定义 PostgreSQL 数据类型（如
    `ENUM` 对象）时，这些缓存会变得过时。此外，准备的语句本身，它们可选择被 SQLAlchemy 驱动程序缓存，如上所述，当对 PostgreSQL 数据库发出
    DDL 以修改与特定准备的语句涉及的表或其他对象相关的对象时，这些语句也可能变得“过时”。'
- en: 'The SQLAlchemy asyncpg dialect will invalidate these caches within its local
    process when statements that represent DDL are emitted on a local connection,
    but this is only controllable within a single Python process / database engine.
    If DDL changes are made from other database engines and/or processes, a running
    application may encounter asyncpg exceptions `InvalidCachedStatementError` and/or
    `InternalServerError("cache lookup failed for type <oid>")` if it refers to pooled
    database connections which operated upon the previous structures. The SQLAlchemy
    asyncpg dialect will recover from these error cases when the driver raises these
    exceptions by clearing its internal caches as well as those of the asyncpg driver
    in response to them, but cannot prevent them from being raised in the first place
    if the cached prepared statement or asyncpg type caches have gone stale, nor can
    it retry the statement as the PostgreSQL transaction is invalidated when these
    errors occur.  ### Prepared Statement Name with PGBouncer'
  id: totrans-3416
  prefs: []
  type: TYPE_NORMAL
  zh: '当在本地连接上发出表示 DDL 的语句时，SQLAlchemy asyncpg 方言将在其本地进程中使这些缓存失效，但是这仅在单个 Python 进程/数据库引擎中可控。如果从其他数据库引擎和/或进程进行
    DDL 更改，则运行的应用程序可能会遇到 asyncpg 异常 `InvalidCachedStatementError` 和/或 `InternalServerError("cache
    lookup failed for type <oid>")`，如果它引用了之前结构上操作的池化数据库连接。当驱动程序引发这些异常时，SQLAlchemy
    asyncpg 方言将从这些错误情况中恢复，通过清除其内部缓存以及在响应它们时清除 asyncpg 驱动程序的缓存，但是如果缓存的准备语句或 asyncpg
    类型缓存已过期，则无法防止它们首先被引发，也不能在发生这些错误时重试语句，因为这些错误会导致 PostgreSQL 事务无效。  ### 使用 PGBouncer
    的准备语句名称'
- en: 'By default, asyncpg enumerates prepared statements in numeric order, which
    can lead to errors if a name has already been taken for another prepared statement.
    This issue can arise if your application uses database proxies such as PgBouncer
    to handle connections. One possible workaround is to use dynamic prepared statement
    names, which asyncpg now supports through an optional `name` value for the statement
    name. This allows you to generate your own unique names that won’t conflict with
    existing ones. To achieve this, you can provide a function that will be called
    every time a prepared statement is prepared:'
  id: totrans-3417
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，asyncpg 按数字顺序枚举准备的语句，如果名称已被另一个准备的语句占用，则可能导致错误。如果应用程序使用数据库代理（例如 PgBouncer）来处理连接，则可能会出现此问题。一个可能的解决方法是使用动态准备语句名称，asyncpg
    现在通过可选的 `name` 值支持这种功能。这允许您生成自己的唯一名称，不会与现有名称冲突。为此，您可以提供一个函数，每次准备语句时都会调用该函数：
- en: '[PRE730]'
  id: totrans-3418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: See also
  id: totrans-3419
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://github.com/MagicStack/asyncpg/issues/837](https://github.com/MagicStack/asyncpg/issues/837)'
  id: totrans-3420
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MagicStack/asyncpg/issues/837](https://github.com/MagicStack/asyncpg/issues/837)'
- en: '[https://github.com/sqlalchemy/sqlalchemy/issues/6467](https://github.com/sqlalchemy/sqlalchemy/issues/6467)'
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/sqlalchemy/sqlalchemy/issues/6467](https://github.com/sqlalchemy/sqlalchemy/issues/6467)'
- en: Warning
  id: totrans-3422
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using PGBouncer, to prevent a buildup of useless prepared statements in
    your application, it’s important to use the [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") pool class, and to configure PgBouncer to use [DISCARD](https://www.postgresql.org/docs/current/sql-discard.html)
    when returning connections. The DISCARD command is used to release resources held
    by the db connection, including prepared statements. Without proper setup, prepared
    statements can accumulate quickly and cause performance issues.
  id: totrans-3423
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 PGBouncer 时，为了防止应用程序中出现无用的准备语句堆积，使用 [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") 连接池类很重要，并且要配置 PgBouncer 在返回连接时使用 [DISCARD](https://www.postgresql.org/docs/current/sql-discard.html)。DISCARD
    命令用于释放 db 连接持有的资源，包括准备的语句。没有适当的设置，准备的语句可能会快速积累并导致性能问题。
- en: Disabling the PostgreSQL JIT to improve ENUM datatype handling
  id: totrans-3424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用 PostgreSQL JIT 以改进 ENUM 数据类型处理
- en: 'Asyncpg has an [issue](https://github.com/MagicStack/asyncpg/issues/727) when
    using PostgreSQL ENUM datatypes, where upon the creation of new database connections,
    an expensive query may be emitted in order to retrieve metadata regarding custom
    types which has been shown to negatively affect performance. To mitigate this
    issue, the PostgreSQL “jit” setting may be disabled from the client using this
    setting passed to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"):'
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PostgreSQL ENUM 数据类型时，asyncpg 存在一个[问题](https://github.com/MagicStack/asyncpg/issues/727)，在创建新数据库连接时，可能会发出一个昂贵的查询以检索有关已显示对性能产生负面影响的自定义类型的元数据。为了缓解此问题，可以通过将此设置传递给
    [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 来禁用客户端的 PostgreSQL “jit” 设置：
- en: '[PRE731]'
  id: totrans-3426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: See also
  id: totrans-3427
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[https://github.com/MagicStack/asyncpg/issues/727](https://github.com/MagicStack/asyncpg/issues/727)'
  id: totrans-3428
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MagicStack/asyncpg/issues/727](https://github.com/MagicStack/asyncpg/issues/727)'
- en: DBAPI
  id: totrans-3429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for asyncpg is available
    at: [https://magicstack.github.io/asyncpg/](https://magicstack.github.io/asyncpg/)'
  id: totrans-3430
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg 的文档和下载信息（如果适用）可在以下网址找到：[https://magicstack.github.io/asyncpg/](https://magicstack.github.io/asyncpg/)
- en: Connecting
  id: totrans-3431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3432
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE732]'
  id: totrans-3433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '### Multihost Connections'
  id: totrans-3434
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多主机连接'
- en: 'The asyncpg dialect features support for multiple fallback hosts in the same
    way as that of the psycopg2 and psycopg dialects. The syntax is the same, using
    `host=<host>:<port>` combinations as additional query string arguments; however,
    there is no default port, so all hosts must have a complete port number present,
    otherwise an exception is raised:'
  id: totrans-3435
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg 方言支持与 psycopg2 和 psycopg 方言相同的多个备用主机。语法相同，使用 `host=<host>:<port>` 组合作为额外的查询字符串参数；但是，没有默认端口，因此所有主机必须具有完整的端口号，否则会引发异常：
- en: '[PRE733]'
  id: totrans-3436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: For complete background on this syntax, see [Specifying multiple fallback hosts](#psycopg2-multi-host).
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此语法的完整背景，请参阅[指定多个备用主机](#psycopg2-multi-host)。
- en: New in version 2.0.18.
  id: totrans-3438
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.18 开始新增。
- en: See also
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Specifying multiple fallback hosts](#psycopg2-multi-host)'
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: '[指定多个备用主机](#psycopg2-multi-host)'
- en: '### Prepared Statement Cache'
  id: totrans-3441
  prefs: []
  type: TYPE_NORMAL
  zh: '### 预编译语句缓存'
- en: 'The asyncpg SQLAlchemy dialect makes use of `asyncpg.connection.prepare()`
    for all statements. The prepared statement objects are cached after construction
    which appears to grant a 10% or more performance improvement for statement invocation.
    The cache is on a per-DBAPI connection basis, which means that the primary storage
    for prepared statements is within DBAPI connections pooled within the connection
    pool. The size of this cache defaults to 100 statements per DBAPI connection and
    may be adjusted using the `prepared_statement_cache_size` DBAPI argument (note
    that while this argument is implemented by SQLAlchemy, it is part of the DBAPI
    emulation portion of the asyncpg dialect, therefore is handled as a DBAPI argument,
    not a dialect argument):'
  id: totrans-3442
  prefs: []
  type: TYPE_NORMAL
  zh: asyncpg SQLAlchemy 方言对所有语句使用 `asyncpg.connection.prepare()`。预编译语句对象在构建后被缓存，这似乎为语句调用提供了
    10% 或更多的性能改进。缓存是基于每个 DBAPI 连接的，这意味着预编译语句的主要存储在连接池中的 DBAPI 连接内。此缓存的默认大小为每个 DBAPI
    连接 100 条语句，并可以使用 `prepared_statement_cache_size` DBAPI 参数进行调整（请注意，虽然 SQLAlchemy
    实现了此参数，但它是 asyncpg 方言的 DBAPI 模拟部分的一部分，因此被视为 DBAPI 参数，而不是方言参数）：
- en: '[PRE734]'
  id: totrans-3443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: 'To disable the prepared statement cache, use a value of zero:'
  id: totrans-3444
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用预编译语句缓存，请使用零值：
- en: '[PRE735]'
  id: totrans-3445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: 'New in version 1.4.0b2: Added `prepared_statement_cache_size` for asyncpg.'
  id: totrans-3446
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.0b2 开始新增：为 asyncpg 添加了 `prepared_statement_cache_size`。
- en: Warning
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The `asyncpg` database driver necessarily uses caches for PostgreSQL type OIDs,
    which become stale when custom PostgreSQL datatypes such as `ENUM` objects are
    changed via DDL operations. Additionally, prepared statements themselves which
    are optionally cached by SQLAlchemy’s driver as described above may also become
    “stale” when DDL has been emitted to the PostgreSQL database which modifies the
    tables or other objects involved in a particular prepared statement.
  id: totrans-3448
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncpg` 数据库驱动必须使用缓存来存储 PostgreSQL 类型的 OID，当自定义 PostgreSQL 数据类型（如 `ENUM` 对象）通过
    DDL 操作进行更改时，这些缓存就会变得过时。此外，如上述描述的那样，由 SQLAlchemy 驱动程序可选缓存的预编译语句本身在发出修改特定预编译语句涉及的表或其他对象的
    DDL 到 PostgreSQL 数据库时也可能变得“过时”。'
- en: The SQLAlchemy asyncpg dialect will invalidate these caches within its local
    process when statements that represent DDL are emitted on a local connection,
    but this is only controllable within a single Python process / database engine.
    If DDL changes are made from other database engines and/or processes, a running
    application may encounter asyncpg exceptions `InvalidCachedStatementError` and/or
    `InternalServerError("cache lookup failed for type <oid>")` if it refers to pooled
    database connections which operated upon the previous structures. The SQLAlchemy
    asyncpg dialect will recover from these error cases when the driver raises these
    exceptions by clearing its internal caches as well as those of the asyncpg driver
    in response to them, but cannot prevent them from being raised in the first place
    if the cached prepared statement or asyncpg type caches have gone stale, nor can
    it retry the statement as the PostgreSQL transaction is invalidated when these
    errors occur.
  id: totrans-3449
  prefs: []
  type: TYPE_NORMAL
  zh: 当在本地连接上发出代表 DDL 的语句时，SQLAlchemy 的 asyncpg 方言将在其本地进程中使这些缓存失效，但这仅在单个 Python 进程/数据库引擎内可控。如果从其他数据库引擎和/或进程进行了
    DDL 更改，正在运行的应用程序可能会遇到 asyncpg 异常`InvalidCachedStatementError`和/或`InternalServerError("cache
    lookup failed for type <oid>")`，如果它引用了之前的结构上操作的池化数据库连接。当驱动程序引发这些异常时，SQLAlchemy
    的 asyncpg 方言将从这些错误情况中恢复，通过清除其内部缓存以及响应它们时 asyncpg 驱动程序的缓存，但如果缓存的预处理语句或 asyncpg
    类型缓存已过时，它无法防止它们首次引发，也无法在发生这些错误时重试语句，因为当这些错误发生时，PostgreSQL 事务将无效。
- en: '### Prepared Statement Name with PGBouncer'
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 PGBouncer 的预处理语句名称'
- en: 'By default, asyncpg enumerates prepared statements in numeric order, which
    can lead to errors if a name has already been taken for another prepared statement.
    This issue can arise if your application uses database proxies such as PgBouncer
    to handle connections. One possible workaround is to use dynamic prepared statement
    names, which asyncpg now supports through an optional `name` value for the statement
    name. This allows you to generate your own unique names that won’t conflict with
    existing ones. To achieve this, you can provide a function that will be called
    every time a prepared statement is prepared:'
  id: totrans-3451
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，asyncpg 按数字顺序枚举预处理语句，如果名称已被另一个预处理语句占用，则可能会导致错误。如果您的应用程序使用数据库代理（如 PgBouncer）来处理连接，则可能会出现此问题。一个可能的解决方法是使用动态预处理语句名称，asyncpg
    现在通过语句名称的可选`name`值支持此功能。这允许您生成自己的唯一名称，不会与现有名称冲突。为此，您可以提供一个函数，每次准备预处理语句时都会调用该函数：
- en: '[PRE736]'
  id: totrans-3452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: See also
  id: totrans-3453
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://github.com/MagicStack/asyncpg/issues/837](https://github.com/MagicStack/asyncpg/issues/837)'
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MagicStack/asyncpg/issues/837](https://github.com/MagicStack/asyncpg/issues/837)'
- en: '[https://github.com/sqlalchemy/sqlalchemy/issues/6467](https://github.com/sqlalchemy/sqlalchemy/issues/6467)'
  id: totrans-3455
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/sqlalchemy/sqlalchemy/issues/6467](https://github.com/sqlalchemy/sqlalchemy/issues/6467)'
- en: Warning
  id: totrans-3456
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using PGBouncer, to prevent a buildup of useless prepared statements in
    your application, it’s important to use the [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") pool class, and to configure PgBouncer to use [DISCARD](https://www.postgresql.org/docs/current/sql-discard.html)
    when returning connections. The DISCARD command is used to release resources held
    by the db connection, including prepared statements. Without proper setup, prepared
    statements can accumulate quickly and cause performance issues.
  id: totrans-3457
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PGBouncer 时，为了防止应用程序中出现无用的预处理语句过多，重要的是使用[`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")池类，并配置 PgBouncer 在返回连接时使用[DISCARD](https://www.postgresql.org/docs/current/sql-discard.html)。DISCARD
    命令用于释放由 db 连接持有的资源，包括预处理语句。如果没有正确设置，预处理语句可能会迅速积累并导致性能问题。
- en: Disabling the PostgreSQL JIT to improve ENUM datatype handling
  id: totrans-3458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用 PostgreSQL JIT 以改善 ENUM 数据类型处理
- en: 'Asyncpg has an [issue](https://github.com/MagicStack/asyncpg/issues/727) when
    using PostgreSQL ENUM datatypes, where upon the creation of new database connections,
    an expensive query may be emitted in order to retrieve metadata regarding custom
    types which has been shown to negatively affect performance. To mitigate this
    issue, the PostgreSQL “jit” setting may be disabled from the client using this
    setting passed to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"):'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用PostgreSQL ENUM数据类型时，Asyncpg存在一个[问题](https://github.com/MagicStack/asyncpg/issues/727)，在创建新数据库连接时，可能会发出一个昂贵的查询，以检索有关自定义类型的元数据，这已被证明对性能产生负面影响。为了缓解这个问题，可以通过将此设置传递给[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")来禁用客户端中的PostgreSQL“jit”设置：
- en: '[PRE737]'
  id: totrans-3460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: See also
  id: totrans-3461
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://github.com/MagicStack/asyncpg/issues/727](https://github.com/MagicStack/asyncpg/issues/727)'
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/MagicStack/asyncpg/issues/727](https://github.com/MagicStack/asyncpg/issues/727)'
- en: '## psycopg2cffi'
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: '## psycopg2cffi'
- en: Support for the PostgreSQL database via the psycopg2cffi driver.
  id: totrans-3464
  prefs: []
  type: TYPE_NORMAL
  zh: 通过psycopg2cffi驱动程序支持PostgreSQL数据库。
- en: DBAPI
  id: totrans-3465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg2cffi is
    available at: [https://pypi.org/project/psycopg2cffi/](https://pypi.org/project/psycopg2cffi/)'
  id: totrans-3466
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/psycopg2cffi/](https://pypi.org/project/psycopg2cffi/)
- en: Connecting
  id: totrans-3467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE738]'
  id: totrans-3469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: '`psycopg2cffi` is an adaptation of `psycopg2`, using CFFI for the C layer.
    This makes it suitable for use in e.g. PyPy. Documentation is as per `psycopg2`.'
  id: totrans-3470
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg2cffi`是`psycopg2`的一种适配版本，使用CFFI作为C层。这使其适用于例如PyPy的使用。文档与`psycopg2`相同。'
- en: See also
  id: totrans-3471
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.dialects.postgresql.psycopg2`](#module-sqlalchemy.dialects.postgresql.psycopg2
    "sqlalchemy.dialects.postgresql.psycopg2")'
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.dialects.postgresql.psycopg2`](#module-sqlalchemy.dialects.postgresql.psycopg2
    "sqlalchemy.dialects.postgresql.psycopg2")'
- en: DBAPI
  id: totrans-3473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DBAPI
- en: 'Documentation and download information (if applicable) for psycopg2cffi is
    available at: [https://pypi.org/project/psycopg2cffi/](https://pypi.org/project/psycopg2cffi/)'
  id: totrans-3474
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和下载信息（如果适用）可在以下网址找到：[https://pypi.org/project/psycopg2cffi/](https://pypi.org/project/psycopg2cffi/)
- en: Connecting
  id: totrans-3475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connect String:'
  id: totrans-3476
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE739]'
  id: totrans-3477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
