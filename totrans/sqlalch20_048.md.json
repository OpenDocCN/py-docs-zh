["```py\nq = session.query(SomeMappedClass)\n```", "```py\nclass sqlalchemy.orm.Query\n```", "```py\nmethod __init__(entities: _ColumnsClauseArgument[Any] | Sequence[_ColumnsClauseArgument[Any]], session: Session | None = None)\n```", "```py\nq = Query([User, Address], session=some_session)\n```", "```py\nq = some_session.query(User, Address)\n```", "```py\nmethod add_column(column: _ColumnExpressionArgument[Any]) \u2192 Query[Any]\n```", "```py\nmethod add_columns(*column: _ColumnExpressionArgument[Any]) \u2192 Query[Any]\n```", "```py\nmethod add_entity(entity: _EntityType[Any], alias: Alias | Subquery | None = None) \u2192 Query[Any]\n```", "```py\nmethod all() \u2192 List[_T]\n```", "```py\nmethod apply_labels() \u2192 Self\n```", "```py\nmethod as_scalar() \u2192 ScalarSelect[Any]\n```", "```py\nmethod autoflush(setting: bool) \u2192 Self\n```", "```py\nattribute column_descriptions\n```", "```py\nuser_alias = aliased(User, name='user2')\nq = sess.query(User, User.id, user_alias)\n\n# this expression:\nq.column_descriptions\n\n# would return:\n[\n {\n 'name':'User',\n 'type':User,\n 'aliased':False,\n 'expr':User,\n 'entity': User\n },\n {\n 'name':'id',\n 'type':Integer(),\n 'aliased':False,\n 'expr':User.id,\n 'entity': User\n },\n {\n 'name':'user2',\n 'type':User,\n 'aliased':True,\n 'expr':user_alias,\n 'entity': user_alias\n }\n]\n```", "```py\nmethod correlate(*fromclauses: Literal[None, False] | FromClauseRole | Type[Any] | Inspectable[_HasClauseElement[Any]] | _HasClauseElement[Any]) \u2192 Self\n```", "```py\nmethod count() \u2192 int\n```", "```py\nSELECT count(1) AS count_1 FROM (\n SELECT <rest of query follows...>\n) AS anon_1\n```", "```py\nfrom sqlalchemy import func\n\n# count User records, without\n# using a subquery.\nsession.query(func.count(User.id))\n\n# return count of user \"id\" grouped\n# by \"name\"\nsession.query(func.count(User.id)).\\\n group_by(User.name)\n\nfrom sqlalchemy import distinct\n\n# count distinct \"name\" values\nsession.query(func.count(distinct(User.name)))\n```", "```py\nmethod cte(name: str | None = None, recursive: bool = False, nesting: bool = False) \u2192 CTE\n```", "```py\nfrom sqlalchemy.orm import aliased\n\nclass Part(Base):\n __tablename__ = 'part'\n part = Column(String, primary_key=True)\n sub_part = Column(String, primary_key=True)\n quantity = Column(Integer)\n\nincluded_parts = session.query(\n Part.sub_part,\n Part.part,\n Part.quantity).\\\n filter(Part.part==\"our part\").\\\n cte(name=\"included_parts\", recursive=True)\n\nincl_alias = aliased(included_parts, name=\"pr\")\nparts_alias = aliased(Part, name=\"p\")\nincluded_parts = included_parts.union_all(\n session.query(\n parts_alias.sub_part,\n parts_alias.part,\n parts_alias.quantity).\\\n filter(parts_alias.part==incl_alias.c.sub_part)\n )\n\nq = session.query(\n included_parts.c.sub_part,\n func.sum(included_parts.c.quantity).\n label('total_quantity')\n ).\\\n group_by(included_parts.c.sub_part)\n```", "```py\nmethod delete(synchronize_session: SynchronizeSessionArgument = 'auto') \u2192 int\n```", "```py\nsess.query(User).filter(User.age == 25).\\\n delete(synchronize_session=False)\n\nsess.query(User).filter(User.age == 25).\\\n delete(synchronize_session='evaluate')\n```", "```py\nmethod distinct(*expr: _ColumnExpressionArgument[Any]) \u2192 Self\n```", "```py\nmethod enable_assertions(value: bool) \u2192 Self\n```", "```py\nmethod enable_eagerloads(value: bool) \u2192 Self\n```", "```py\nmethod except_(*q: Query) \u2192 Self\n```", "```py\nmethod except_all(*q: Query) \u2192 Self\n```", "```py\nmethod execution_options(**kwargs: Any) \u2192 Self\n```", "```py\nmethod exists() \u2192 Exists\n```", "```py\nq = session.query(User).filter(User.name == 'fred')\nsession.query(q.exists())\n```", "```py\nSELECT EXISTS (\n SELECT 1 FROM users WHERE users.name = :name_1\n) AS anon_1\n```", "```py\nsession.query(User.id).filter(q.exists()).scalar()\n```", "```py\nfrom sqlalchemy import literal\n\nsession.query(literal(True)).filter(q.exists()).scalar()\n```", "```py\nmethod filter(*criterion: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nsession.query(MyClass).filter(MyClass.name == 'some name')\n```", "```py\nsession.query(MyClass).\\\n filter(MyClass.name == 'some name', MyClass.id > 5)\n```", "```py\nmethod filter_by(**kwargs: Any) \u2192 Self\n```", "```py\nsession.query(MyClass).filter_by(name = 'some name')\n```", "```py\nsession.query(MyClass).\\\n filter_by(name = 'some name', id = 5)\n```", "```py\nmethod first() \u2192 _T | None\n```", "```py\nmethod from_statement(statement: ExecutableReturnsRows) \u2192 Self\n```", "```py\nmethod get(ident: _PKIdentityArgument) \u2192 Any | None\n```", "```py\nmy_user = session.query(User).get(5)\n\nsome_object = session.query(VersionedFoo).get((5, 10))\n\nsome_object = session.query(VersionedFoo).get(\n {\"id\": 5, \"version_id\": 10})\n```", "```py\nmy_object = query.get(5)\n```", "```py\nmy_object = query.get((5, 10))\n```", "```py\nmy_object = query.get({\"id\": 5, \"version_id\": 10})\n```", "```py\nmethod get_children(*, omit_attrs: Tuple[str, ...] = (), **kw: Any) \u2192 Iterable[HasTraverseInternals]\n```", "```py\nmethod get_execution_options() \u2192 _ImmutableExecuteOptions\n```", "```py\nattribute get_label_style\n```", "```py\nmethod group_by(_Query__first: Literal[None, False, _NoArg.NO_ARG] | _ColumnExpressionOrStrLabelArgument[Any] = _NoArg.NO_ARG, *clauses: _ColumnExpressionOrStrLabelArgument[Any]) \u2192 Self\n```", "```py\nmethod having(*having: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nq = session.query(User.id).\\\n join(User.addresses).\\\n group_by(User.id).\\\n having(func.count(Address.id) > 2)\n```", "```py\nmethod instances(result_proxy: CursorResult[Any], context: QueryContext | None = None) \u2192 Any\n```", "```py\nmethod intersect(*q: Query) \u2192 Self\n```", "```py\nmethod intersect_all(*q: Query) \u2192 Self\n```", "```py\nattribute is_single_entity\n```", "```py\nmethod join(target: _JoinTargetArgument, onclause: _OnClauseArgument | None = None, *, isouter: bool = False, full: bool = False) \u2192 Self\n```", "```py\nq = session.query(User).join(User.addresses)\n```", "```py\nSELECT user.id, user.name\nFROM user JOIN address ON user.id = address.user_id\n```", "```py\nq = session.query(User).\\\n join(User.orders).\\\n join(Order.items).\\\n join(Item.keywords)\n```", "```py\nq = session.query(User).join(Address)\n```", "```py\nq = session.query(User).join(Address, User.id==Address.user_id)\n```", "```py\nq = session.query(User).join(Address, User.addresses)\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\n\nq = session.query(User).\\\n join(a1, User.addresses).\\\n join(a2, User.addresses).\\\n filter(a1.email_address=='ed@foo.com').\\\n filter(a2.email_address=='ed@bar.com')\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\n\nq = session.query(User).\\\n join(User.addresses.of_type(a1)).\\\n join(User.addresses.of_type(a2)).\\\n filter(a1.email_address == 'ed@foo.com').\\\n filter(a2.email_address == 'ed@bar.com')\n```", "```py\nq = session.query(User).join(\n User.addresses.and_(Address.email_address != 'foo@bar.com')\n)\n```", "```py\nsubq = session.query(Address).\\\n filter(Address.email_address == 'ed@foo.com').\\\n subquery()\n\nq = session.query(User).join(\n subq, User.id == subq.c.user_id\n)\n```", "```py\nsubq = session.query(Address).\\\n filter(Address.email_address == 'ed@foo.com').\\\n subquery()\n\naddress_subq = aliased(Address, subq)\n\nq = session.query(User).join(\n User.addresses.of_type(address_subq)\n)\n```", "```py\nq = session.query(Address).select_from(User).\\\n join(User.addresses).\\\n filter(User.name == 'ed')\n```", "```py\nSELECT address.* FROM user\n JOIN address ON user.id=address.user_id\n WHERE user.name = :name_1\n```", "```py\nmethod label(name: str | None) \u2192 Label[Any]\n```", "```py\nattribute lazy_loaded_from\n```", "```py\nmethod limit(limit: _LimitOffsetType) \u2192 Self\n```", "```py\nmethod merge_result(iterator: FrozenResult[Any] | Iterable[Sequence[Any]] | Iterable[object], load: bool = True) \u2192 FrozenResult[Any] | Iterable[Any]\n```", "```py\nmethod offset(offset: _LimitOffsetType) \u2192 Self\n```", "```py\nmethod one() \u2192 _T\n```", "```py\nmethod one_or_none() \u2192 _T | None\n```", "```py\nmethod only_return_tuples(value: bool) \u2192 Query\n```", "```py\nmethod options(*args: ExecutableOption) \u2192 Self\n```", "```py\nmethod order_by(_Query__first: Literal[None, False, _NoArg.NO_ARG] | _ColumnExpressionOrStrLabelArgument[Any] = _NoArg.NO_ARG, *clauses: _ColumnExpressionOrStrLabelArgument[Any]) \u2192 Self\n```", "```py\nq = session.query(Entity).order_by(Entity.id, Entity.name)\n```", "```py\n# will erase all ORDER BY and ORDER BY new_col alone\nq = q.order_by(None).order_by(new_col)\n```", "```py\nmethod outerjoin(target: _JoinTargetArgument, onclause: _OnClauseArgument | None = None, *, full: bool = False) \u2192 Self\n```", "```py\nmethod params(_Query__params: Dict[str, Any] | None = None, **kw: Any) \u2192 Self\n```", "```py\nmethod populate_existing() \u2192 Self\n```", "```py\nmethod prefix_with(*prefixes: _TextCoercedExpressionArgument[Any], dialect: str = '*') \u2192 Self\n```", "```py\nstmt = table.insert().prefix_with(\"LOW_PRIORITY\", dialect=\"mysql\")\n\n# MySQL 5.7 optimizer hints\nstmt = select(table).prefix_with(\n \"/*+ BKA(t1) */\", dialect=\"mysql\")\n```", "```py\nmethod reset_joinpoint() \u2192 Self\n```", "```py\nmethod scalar() \u2192 Any\n```", "```py\n>>> session.query(Item).scalar()\n<Item>\n>>> session.query(Item.id).scalar()\n1\n>>> session.query(Item.id).filter(Item.id < 0).scalar()\nNone\n>>> session.query(Item.id, Item.name).scalar()\n1\n>>> session.query(func.count(Parent.id)).scalar()\n20\n```", "```py\nmethod scalar_subquery() \u2192 ScalarSelect[Any]\n```", "```py\nmethod select_from(*from_obj: FromClauseRole | Type[Any] | Inspectable[_HasClauseElement[Any]] | _HasClauseElement[Any]) \u2192 Self\n```", "```py\nq = session.query(Address).select_from(User).\\\n join(User.addresses).\\\n filter(User.name == 'ed')\n```", "```py\nSELECT address.* FROM user\nJOIN address ON user.id=address.user_id\nWHERE user.name = :name_1\n```", "```py\nattribute selectable\n```", "```py\nquery.enable_eagerloads(False).with_labels().statement\n```", "```py\nmethod set_label_style(style: SelectLabelStyle) \u2192 Self\n```", "```py\nresult = session.execute(\n query\n .set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)\n .statement\n)\n```", "```py\nmethod slice(start: int, stop: int) \u2192 Self\n```", "```py\nsession.query(User).order_by(User.id).slice(1, 3)\n```", "```py\nSELECT  users.id  AS  users_id,\n  users.name  AS  users_name\nFROM  users  ORDER  BY  users.id\nLIMIT  ?  OFFSET  ?\n(2,  1)\n```", "```py\nattribute statement\n```", "```py\nmethod subquery(name: str | None = None, with_labels: bool = False, reduce_columns: bool = False) \u2192 Subquery\n```", "```py\nmethod suffix_with(*suffixes: _TextCoercedExpressionArgument[Any], dialect: str = '*') \u2192 Self\n```", "```py\nstmt = select(col1, col2).cte().suffix_with(\n \"cycle empno set y_cycle to 1 default 0\", dialect=\"oracle\")\n```", "```py\nmethod tuples() \u2192 Query\n```", "```py\nmethod union(*q: Query) \u2192 Self\n```", "```py\nq1 = sess.query(SomeClass).filter(SomeClass.foo=='bar')\nq2 = sess.query(SomeClass).filter(SomeClass.bar=='foo')\n\nq3 = q1.union(q2)\n```", "```py\nx.union(y).union(z).all()\n```", "```py\nSELECT * FROM (SELECT * FROM (SELECT * FROM X UNION\n SELECT * FROM y) UNION SELECT * FROM Z)\n```", "```py\nx.union(y, z).all()\n```", "```py\nSELECT * FROM (SELECT * FROM X UNION SELECT * FROM y UNION\n SELECT * FROM Z)\n```", "```py\nmethod union_all(*q: Query) \u2192 Self\n```", "```py\nmethod update(values: Dict[_DMLColumnArgument, Any], synchronize_session: SynchronizeSessionArgument = 'auto', update_args: Dict[Any, Any] | None = None) \u2192 int\n```", "```py\nsess.query(User).filter(User.age == 25).\\\n update({User.age: User.age - 10}, synchronize_session=False)\n\nsess.query(User).filter(User.age == 25).\\\n update({\"age\": User.age - 10}, synchronize_session='evaluate')\n```", "```py\nmethod value(column: _ColumnExpressionArgument[Any]) \u2192 Any\n```", "```py\nmethod values(*columns: _ColumnsClauseArgument[Any]) \u2192 Iterable[Any]\n```", "```py\nmethod where(*criterion: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nattribute whereclause\n```", "```py\nmethod with_entities(*entities: _ColumnsClauseArgument[Any], **_Query__kw: Any) \u2192 Query[Any]\n```", "```py\n# Users, filtered on some arbitrary criterion\n# and then ordered by related email address\nq = session.query(User).\\\n join(User.address).\\\n filter(User.name.like('%ed%')).\\\n order_by(Address.email)\n\n# given *only* User.id==5, Address.email, and 'q', what\n# would the *next* User in the result be ?\nsubq = q.with_entities(Address.email).\\\n order_by(None).\\\n filter(User.id==5).\\\n subquery()\nq = q.join((subq, subq.c.email < Address.email)).\\\n limit(1)\n```", "```py\nmethod with_for_update(*, nowait: bool = False, read: bool = False, of: _ForUpdateOfArgument | None = None, skip_locked: bool = False, key_share: bool = False) \u2192 Self\n```", "```py\nq = sess.query(User).populate_existing().with_for_update(nowait=True, of=User)\n```", "```py\nSELECT users.id AS users_id FROM users FOR UPDATE OF users NOWAIT\n```", "```py\nmethod with_hint(selectable: _FromClauseArgument, text: str, dialect_name: str = '*') \u2192 Self\n```", "```py\nselect(mytable).\\\n with_hint(mytable, \"index(%(name)s ix_mytable)\")\n```", "```py\nselect /*+ index(mytable ix_mytable) */ ... from mytable\n```", "```py\nselect(mytable).\\\n with_hint(mytable, \"index(%(name)s ix_mytable)\", 'oracle').\\\n with_hint(mytable, \"WITH INDEX ix_mytable\", 'mssql')\n```", "```py\nmethod with_labels() \u2192 Self\n```", "```py\nmethod with_parent(instance: object, property: attributes.QueryableAttribute[Any] | None = None, from_entity: _ExternalEntityType[Any] | None = None) \u2192 Self\n```", "```py\nmethod with_session(session: Session) \u2192 Self\n```", "```py\nfrom sqlalchemy.orm import Query\n\nquery = Query([MyClass]).filter(MyClass.id == 5)\n\nresult = query.with_session(my_session).one()\n```", "```py\nmethod with_statement_hint(text: str, dialect_name: str = '*') \u2192 Self\n```", "```py\nmethod with_transformation(fn: Callable[[Query], Query]) \u2192 Query\n```", "```py\ndef filter_something(criterion):\n def transform(q):\n return q.filter(criterion)\n return transform\n\nq = q.with_transformation(filter_something(x==5))\n```", "```py\nmethod yield_per(count: int) \u2192 Self\n```", "```py\nq = session.query(SomeMappedClass)\n```", "```py\nclass sqlalchemy.orm.Query\n```", "```py\nmethod __init__(entities: _ColumnsClauseArgument[Any] | Sequence[_ColumnsClauseArgument[Any]], session: Session | None = None)\n```", "```py\nq = Query([User, Address], session=some_session)\n```", "```py\nq = some_session.query(User, Address)\n```", "```py\nmethod add_column(column: _ColumnExpressionArgument[Any]) \u2192 Query[Any]\n```", "```py\nmethod add_columns(*column: _ColumnExpressionArgument[Any]) \u2192 Query[Any]\n```", "```py\nmethod add_entity(entity: _EntityType[Any], alias: Alias | Subquery | None = None) \u2192 Query[Any]\n```", "```py\nmethod all() \u2192 List[_T]\n```", "```py\nmethod apply_labels() \u2192 Self\n```", "```py\nmethod as_scalar() \u2192 ScalarSelect[Any]\n```", "```py\nmethod autoflush(setting: bool) \u2192 Self\n```", "```py\nattribute column_descriptions\n```", "```py\nuser_alias = aliased(User, name='user2')\nq = sess.query(User, User.id, user_alias)\n\n# this expression:\nq.column_descriptions\n\n# would return:\n[\n {\n 'name':'User',\n 'type':User,\n 'aliased':False,\n 'expr':User,\n 'entity': User\n },\n {\n 'name':'id',\n 'type':Integer(),\n 'aliased':False,\n 'expr':User.id,\n 'entity': User\n },\n {\n 'name':'user2',\n 'type':User,\n 'aliased':True,\n 'expr':user_alias,\n 'entity': user_alias\n }\n]\n```", "```py\nmethod correlate(*fromclauses: Literal[None, False] | FromClauseRole | Type[Any] | Inspectable[_HasClauseElement[Any]] | _HasClauseElement[Any]) \u2192 Self\n```", "```py\nmethod count() \u2192 int\n```", "```py\nSELECT count(1) AS count_1 FROM (\n SELECT <rest of query follows...>\n) AS anon_1\n```", "```py\nfrom sqlalchemy import func\n\n# count User records, without\n# using a subquery.\nsession.query(func.count(User.id))\n\n# return count of user \"id\" grouped\n# by \"name\"\nsession.query(func.count(User.id)).\\\n group_by(User.name)\n\nfrom sqlalchemy import distinct\n\n# count distinct \"name\" values\nsession.query(func.count(distinct(User.name)))\n```", "```py\nmethod cte(name: str | None = None, recursive: bool = False, nesting: bool = False) \u2192 CTE\n```", "```py\nfrom sqlalchemy.orm import aliased\n\nclass Part(Base):\n __tablename__ = 'part'\n part = Column(String, primary_key=True)\n sub_part = Column(String, primary_key=True)\n quantity = Column(Integer)\n\nincluded_parts = session.query(\n Part.sub_part,\n Part.part,\n Part.quantity).\\\n filter(Part.part==\"our part\").\\\n cte(name=\"included_parts\", recursive=True)\n\nincl_alias = aliased(included_parts, name=\"pr\")\nparts_alias = aliased(Part, name=\"p\")\nincluded_parts = included_parts.union_all(\n session.query(\n parts_alias.sub_part,\n parts_alias.part,\n parts_alias.quantity).\\\n filter(parts_alias.part==incl_alias.c.sub_part)\n )\n\nq = session.query(\n included_parts.c.sub_part,\n func.sum(included_parts.c.quantity).\n label('total_quantity')\n ).\\\n group_by(included_parts.c.sub_part)\n```", "```py\nmethod delete(synchronize_session: SynchronizeSessionArgument = 'auto') \u2192 int\n```", "```py\nsess.query(User).filter(User.age == 25).\\\n delete(synchronize_session=False)\n\nsess.query(User).filter(User.age == 25).\\\n delete(synchronize_session='evaluate')\n```", "```py\nmethod distinct(*expr: _ColumnExpressionArgument[Any]) \u2192 Self\n```", "```py\nmethod enable_assertions(value: bool) \u2192 Self\n```", "```py\nmethod enable_eagerloads(value: bool) \u2192 Self\n```", "```py\nmethod except_(*q: Query) \u2192 Self\n```", "```py\nmethod except_all(*q: Query) \u2192 Self\n```", "```py\nmethod execution_options(**kwargs: Any) \u2192 Self\n```", "```py\nmethod exists() \u2192 Exists\n```", "```py\nq = session.query(User).filter(User.name == 'fred')\nsession.query(q.exists())\n```", "```py\nSELECT EXISTS (\n SELECT 1 FROM users WHERE users.name = :name_1\n) AS anon_1\n```", "```py\nsession.query(User.id).filter(q.exists()).scalar()\n```", "```py\nfrom sqlalchemy import literal\n\nsession.query(literal(True)).filter(q.exists()).scalar()\n```", "```py\nmethod filter(*criterion: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nsession.query(MyClass).filter(MyClass.name == 'some name')\n```", "```py\nsession.query(MyClass).\\\n filter(MyClass.name == 'some name', MyClass.id > 5)\n```", "```py\nmethod filter_by(**kwargs: Any) \u2192 Self\n```", "```py\nsession.query(MyClass).filter_by(name = 'some name')\n```", "```py\nsession.query(MyClass).\\\n filter_by(name = 'some name', id = 5)\n```", "```py\nmethod first() \u2192 _T | None\n```", "```py\nmethod from_statement(statement: ExecutableReturnsRows) \u2192 Self\n```", "```py\nmethod get(ident: _PKIdentityArgument) \u2192 Any | None\n```", "```py\nmy_user = session.query(User).get(5)\n\nsome_object = session.query(VersionedFoo).get((5, 10))\n\nsome_object = session.query(VersionedFoo).get(\n {\"id\": 5, \"version_id\": 10})\n```", "```py\nmy_object = query.get(5)\n```", "```py\nmy_object = query.get((5, 10))\n```", "```py\nmy_object = query.get({\"id\": 5, \"version_id\": 10})\n```", "```py\nmethod get_children(*, omit_attrs: Tuple[str, ...] = (), **kw: Any) \u2192 Iterable[HasTraverseInternals]\n```", "```py\nmethod get_execution_options() \u2192 _ImmutableExecuteOptions\n```", "```py\nattribute get_label_style\n```", "```py\nmethod group_by(_Query__first: Literal[None, False, _NoArg.NO_ARG] | _ColumnExpressionOrStrLabelArgument[Any] = _NoArg.NO_ARG, *clauses: _ColumnExpressionOrStrLabelArgument[Any]) \u2192 Self\n```", "```py\nmethod having(*having: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nq = session.query(User.id).\\\n join(User.addresses).\\\n group_by(User.id).\\\n having(func.count(Address.id) > 2)\n```", "```py\nmethod instances(result_proxy: CursorResult[Any], context: QueryContext | None = None) \u2192 Any\n```", "```py\nmethod intersect(*q: Query) \u2192 Self\n```", "```py\nmethod intersect_all(*q: Query) \u2192 Self\n```", "```py\nattribute is_single_entity\n```", "```py\nmethod join(target: _JoinTargetArgument, onclause: _OnClauseArgument | None = None, *, isouter: bool = False, full: bool = False) \u2192 Self\n```", "```py\nq = session.query(User).join(User.addresses)\n```", "```py\nSELECT user.id, user.name\nFROM user JOIN address ON user.id = address.user_id\n```", "```py\nq = session.query(User).\\\n join(User.orders).\\\n join(Order.items).\\\n join(Item.keywords)\n```", "```py\nq = session.query(User).join(Address)\n```", "```py\nq = session.query(User).join(Address, User.id==Address.user_id)\n```", "```py\nq = session.query(User).join(Address, User.addresses)\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\n\nq = session.query(User).\\\n join(a1, User.addresses).\\\n join(a2, User.addresses).\\\n filter(a1.email_address=='ed@foo.com').\\\n filter(a2.email_address=='ed@bar.com')\n```", "```py\na1 = aliased(Address)\na2 = aliased(Address)\n\nq = session.query(User).\\\n join(User.addresses.of_type(a1)).\\\n join(User.addresses.of_type(a2)).\\\n filter(a1.email_address == 'ed@foo.com').\\\n filter(a2.email_address == 'ed@bar.com')\n```", "```py\nq = session.query(User).join(\n User.addresses.and_(Address.email_address != 'foo@bar.com')\n)\n```", "```py\nsubq = session.query(Address).\\\n filter(Address.email_address == 'ed@foo.com').\\\n subquery()\n\nq = session.query(User).join(\n subq, User.id == subq.c.user_id\n)\n```", "```py\nsubq = session.query(Address).\\\n filter(Address.email_address == 'ed@foo.com').\\\n subquery()\n\naddress_subq = aliased(Address, subq)\n\nq = session.query(User).join(\n User.addresses.of_type(address_subq)\n)\n```", "```py\nq = session.query(Address).select_from(User).\\\n join(User.addresses).\\\n filter(User.name == 'ed')\n```", "```py\nSELECT address.* FROM user\n JOIN address ON user.id=address.user_id\n WHERE user.name = :name_1\n```", "```py\nmethod label(name: str | None) \u2192 Label[Any]\n```", "```py\nattribute lazy_loaded_from\n```", "```py\nmethod limit(limit: _LimitOffsetType) \u2192 Self\n```", "```py\nmethod merge_result(iterator: FrozenResult[Any] | Iterable[Sequence[Any]] | Iterable[object], load: bool = True) \u2192 FrozenResult[Any] | Iterable[Any]\n```", "```py\nmethod offset(offset: _LimitOffsetType) \u2192 Self\n```", "```py\nmethod one() \u2192 _T\n```", "```py\nmethod one_or_none() \u2192 _T | None\n```", "```py\nmethod only_return_tuples(value: bool) \u2192 Query\n```", "```py\nmethod options(*args: ExecutableOption) \u2192 Self\n```", "```py\nmethod order_by(_Query__first: Literal[None, False, _NoArg.NO_ARG] | _ColumnExpressionOrStrLabelArgument[Any] = _NoArg.NO_ARG, *clauses: _ColumnExpressionOrStrLabelArgument[Any]) \u2192 Self\n```", "```py\nq = session.query(Entity).order_by(Entity.id, Entity.name)\n```", "```py\n# will erase all ORDER BY and ORDER BY new_col alone\nq = q.order_by(None).order_by(new_col)\n```", "```py\nmethod outerjoin(target: _JoinTargetArgument, onclause: _OnClauseArgument | None = None, *, full: bool = False) \u2192 Self\n```", "```py\nmethod params(_Query__params: Dict[str, Any] | None = None, **kw: Any) \u2192 Self\n```", "```py\nmethod populate_existing() \u2192 Self\n```", "```py\nmethod prefix_with(*prefixes: _TextCoercedExpressionArgument[Any], dialect: str = '*') \u2192 Self\n```", "```py\nstmt = table.insert().prefix_with(\"LOW_PRIORITY\", dialect=\"mysql\")\n\n# MySQL 5.7 optimizer hints\nstmt = select(table).prefix_with(\n \"/*+ BKA(t1) */\", dialect=\"mysql\")\n```", "```py\nmethod reset_joinpoint() \u2192 Self\n```", "```py\nmethod scalar() \u2192 Any\n```", "```py\n>>> session.query(Item).scalar()\n<Item>\n>>> session.query(Item.id).scalar()\n1\n>>> session.query(Item.id).filter(Item.id < 0).scalar()\nNone\n>>> session.query(Item.id, Item.name).scalar()\n1\n>>> session.query(func.count(Parent.id)).scalar()\n20\n```", "```py\nmethod scalar_subquery() \u2192 ScalarSelect[Any]\n```", "```py\nmethod select_from(*from_obj: FromClauseRole | Type[Any] | Inspectable[_HasClauseElement[Any]] | _HasClauseElement[Any]) \u2192 Self\n```", "```py\nq = session.query(Address).select_from(User).\\\n join(User.addresses).\\\n filter(User.name == 'ed')\n```", "```py\nSELECT address.* FROM user\nJOIN address ON user.id=address.user_id\nWHERE user.name = :name_1\n```", "```py\nattribute selectable\n```", "```py\nquery.enable_eagerloads(False).with_labels().statement\n```", "```py\nmethod set_label_style(style: SelectLabelStyle) \u2192 Self\n```", "```py\nresult = session.execute(\n query\n .set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)\n .statement\n)\n```", "```py\nmethod slice(start: int, stop: int) \u2192 Self\n```", "```py\nsession.query(User).order_by(User.id).slice(1, 3)\n```", "```py\nSELECT  users.id  AS  users_id,\n  users.name  AS  users_name\nFROM  users  ORDER  BY  users.id\nLIMIT  ?  OFFSET  ?\n(2,  1)\n```", "```py\nattribute statement\n```", "```py\nmethod subquery(name: str | None = None, with_labels: bool = False, reduce_columns: bool = False) \u2192 Subquery\n```", "```py\nmethod suffix_with(*suffixes: _TextCoercedExpressionArgument[Any], dialect: str = '*') \u2192 Self\n```", "```py\nstmt = select(col1, col2).cte().suffix_with(\n \"cycle empno set y_cycle to 1 default 0\", dialect=\"oracle\")\n```", "```py\nmethod tuples() \u2192 Query\n```", "```py\nmethod union(*q: Query) \u2192 Self\n```", "```py\nq1 = sess.query(SomeClass).filter(SomeClass.foo=='bar')\nq2 = sess.query(SomeClass).filter(SomeClass.bar=='foo')\n\nq3 = q1.union(q2)\n```", "```py\nx.union(y).union(z).all()\n```", "```py\nSELECT * FROM (SELECT * FROM (SELECT * FROM X UNION\n SELECT * FROM y) UNION SELECT * FROM Z)\n```", "```py\nx.union(y, z).all()\n```", "```py\nSELECT * FROM (SELECT * FROM X UNION SELECT * FROM y UNION\n SELECT * FROM Z)\n```", "```py\nmethod union_all(*q: Query) \u2192 Self\n```", "```py\nmethod update(values: Dict[_DMLColumnArgument, Any], synchronize_session: SynchronizeSessionArgument = 'auto', update_args: Dict[Any, Any] | None = None) \u2192 int\n```", "```py\nsess.query(User).filter(User.age == 25).\\\n update({User.age: User.age - 10}, synchronize_session=False)\n\nsess.query(User).filter(User.age == 25).\\\n update({\"age\": User.age - 10}, synchronize_session='evaluate')\n```", "```py\nmethod value(column: _ColumnExpressionArgument[Any]) \u2192 Any\n```", "```py\nmethod values(*columns: _ColumnsClauseArgument[Any]) \u2192 Iterable[Any]\n```", "```py\nmethod where(*criterion: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nattribute whereclause\n```", "```py\nmethod with_entities(*entities: _ColumnsClauseArgument[Any], **_Query__kw: Any) \u2192 Query[Any]\n```", "```py\n# Users, filtered on some arbitrary criterion\n# and then ordered by related email address\nq = session.query(User).\\\n join(User.address).\\\n filter(User.name.like('%ed%')).\\\n order_by(Address.email)\n\n# given *only* User.id==5, Address.email, and 'q', what\n# would the *next* User in the result be ?\nsubq = q.with_entities(Address.email).\\\n order_by(None).\\\n filter(User.id==5).\\\n subquery()\nq = q.join((subq, subq.c.email < Address.email)).\\\n limit(1)\n```", "```py\nmethod with_for_update(*, nowait: bool = False, read: bool = False, of: _ForUpdateOfArgument | None = None, skip_locked: bool = False, key_share: bool = False) \u2192 Self\n```", "```py\nq = sess.query(User).populate_existing().with_for_update(nowait=True, of=User)\n```", "```py\nSELECT users.id AS users_id FROM users FOR UPDATE OF users NOWAIT\n```", "```py\nmethod with_hint(selectable: _FromClauseArgument, text: str, dialect_name: str = '*') \u2192 Self\n```", "```py\nselect(mytable).\\\n with_hint(mytable, \"index(%(name)s ix_mytable)\")\n```", "```py\nselect /*+ index(mytable ix_mytable) */ ... from mytable\n```", "```py\nselect(mytable).\\\n with_hint(mytable, \"index(%(name)s ix_mytable)\", 'oracle').\\\n with_hint(mytable, \"WITH INDEX ix_mytable\", 'mssql')\n```", "```py\nmethod with_labels() \u2192 Self\n```", "```py\nmethod with_parent(instance: object, property: attributes.QueryableAttribute[Any] | None = None, from_entity: _ExternalEntityType[Any] | None = None) \u2192 Self\n```", "```py\nmethod with_session(session: Session) \u2192 Self\n```", "```py\nfrom sqlalchemy.orm import Query\n\nquery = Query([MyClass]).filter(MyClass.id == 5)\n\nresult = query.with_session(my_session).one()\n```", "```py\nmethod with_statement_hint(text: str, dialect_name: str = '*') \u2192 Self\n```", "```py\nmethod with_transformation(fn: Callable[[Query], Query]) \u2192 Query\n```", "```py\ndef filter_something(criterion):\n def transform(q):\n return q.filter(criterion)\n return transform\n\nq = q.with_transformation(filter_something(x==5))\n```", "```py\nmethod yield_per(count: int) \u2192 Self\n```"]