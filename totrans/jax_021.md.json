["```py\nimport jax\nimport jax.numpy as jnp\n\n@jax.jit\ndef f(x):\n  jax.debug.print(\"ðŸ¤¯ {x} ðŸ¤¯\", x=x)\n  y = jnp.sin(x)\n  jax.debug.breakpoint()\n  jax.debug.print(\"ðŸ¤¯ {y} ðŸ¤¯\", y=y)\n  return y\n\nf(2.)\n# Prints:\n# ðŸ¤¯ 2.0 ðŸ¤¯\n# Enters breakpoint to inspect values!\n# ðŸ¤¯ 0.9092974662780762 ðŸ¤¯ \n```", "```py\nfrom jax.experimental import checkify\nimport jax\nimport jax.numpy as jnp\n\ndef f(x, i):\n  checkify.check(i >= 0, \"index needs to be non-negative!\")\n  y = x[i]\n  z = jnp.sin(y)\n  return z\n\njittable_f = checkify.checkify(f)\n\nerr, z = jax.jit(jittable_f)(jnp.ones((5,)), -1)\nprint(err.get())\n# >> index needs to be non-negative! (check failed at <...>:6 (f)) \n```", "```py\nerrors = checkify.user_checks | checkify.index_checks | checkify.float_checks\nchecked_f = checkify.checkify(f, errors=errors)\n\nerr, z = checked_f(jnp.ones((5,)), 100)\nerr.throw()\n# ValueError: out-of-bounds indexing at <..>:7 (f)\n\nerr, z = checked_f(jnp.ones((5,)), -1)\nerr.throw()\n# ValueError: index needs to be non-negative! (check failed at <â€¦>:6 (f))\n\nerr, z = checked_f(jnp.array([jnp.inf, 1]), 0)\nerr.throw()\n# ValueError: nan generated by primitive sin at <...>:8 (f) \n```", "```py\nimport jax\njax.config.update(\"jax_debug_nans\", True)\n\ndef f(x, y):\n  return x / y\njax.jit(f)(0., 0.)  # ==> raises FloatingPointError exception! \n```"]