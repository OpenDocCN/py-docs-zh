["```py\n user\n---------------------------------\nuser_id    name   related_user_id\n   1       'ed'          1\n```", "```py\n widget                                                  entry\n-------------------------------------------             ---------------------------------\nwidget_id     name        favorite_entry_id             entry_id      name      widget_id\n   1       'somewidget'          5                         5       'someentry'     1\n```", "```py\nfrom sqlalchemy import Integer, ForeignKey\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Entry(Base):\n    __tablename__ = \"entry\"\n    entry_id = mapped_column(Integer, primary_key=True)\n    widget_id = mapped_column(Integer, ForeignKey(\"widget.widget_id\"))\n    name = mapped_column(String(50))\n\nclass Widget(Base):\n    __tablename__ = \"widget\"\n\n    widget_id = mapped_column(Integer, primary_key=True)\n    favorite_entry_id = mapped_column(\n        Integer, ForeignKey(\"entry.entry_id\", name=\"fk_favorite_entry\")\n    )\n    name = mapped_column(String(50))\n\n    entries = relationship(Entry, primaryjoin=widget_id == Entry.widget_id)\n    favorite_entry = relationship(\n        Entry, primaryjoin=favorite_entry_id == Entry.entry_id, post_update=True\n    )\n```", "```py\n>>> w1 = Widget(name=\"somewidget\")\n>>> e1 = Entry(name=\"someentry\")\n>>> w1.favorite_entry = e1\n>>> w1.entries = [e1]\n>>> session.add_all([w1, e1])\n>>> session.commit()\nBEGIN  (implicit)\nINSERT  INTO  widget  (favorite_entry_id,  name)  VALUES  (?,  ?)\n(None,  'somewidget')\nINSERT  INTO  entry  (widget_id,  name)  VALUES  (?,  ?)\n(1,  'someentry')\nUPDATE  widget  SET  favorite_entry_id=?  WHERE  widget.widget_id  =  ?\n(1,  1)\nCOMMIT \n```", "```py\nfrom sqlalchemy import (\n    Integer,\n    ForeignKey,\n    String,\n    UniqueConstraint,\n    ForeignKeyConstraint,\n)\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Entry(Base):\n    __tablename__ = \"entry\"\n    entry_id = mapped_column(Integer, primary_key=True)\n    widget_id = mapped_column(Integer, ForeignKey(\"widget.widget_id\"))\n    name = mapped_column(String(50))\n    __table_args__ = (UniqueConstraint(\"entry_id\", \"widget_id\"),)\n\nclass Widget(Base):\n    __tablename__ = \"widget\"\n\n    widget_id = mapped_column(Integer, autoincrement=\"ignore_fk\", primary_key=True)\n    favorite_entry_id = mapped_column(Integer)\n\n    name = mapped_column(String(50))\n\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"widget_id\", \"favorite_entry_id\"],\n            [\"entry.widget_id\", \"entry.entry_id\"],\n            name=\"fk_favorite_entry\",\n        ),\n    )\n\n    entries = relationship(\n        Entry, primaryjoin=widget_id == Entry.widget_id, foreign_keys=Entry.widget_id\n    )\n    favorite_entry = relationship(\n        Entry,\n        primaryjoin=favorite_entry_id == Entry.entry_id,\n        foreign_keys=favorite_entry_id,\n        post_update=True,\n    )\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    addresses = relationship(\"Address\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(\n        String(50), ForeignKey(\"user.username\", onupdate=\"cascade\")\n    )\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    # passive_updates=False *only* needed if the database\n    # does not implement ON UPDATE CASCADE\n    addresses = relationship(\"Address\", passive_updates=False)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(String(50), ForeignKey(\"user.username\"))\n```", "```py\n user\n---------------------------------\nuser_id    name   related_user_id\n   1       'ed'          1\n```", "```py\n widget                                                  entry\n-------------------------------------------             ---------------------------------\nwidget_id     name        favorite_entry_id             entry_id      name      widget_id\n   1       'somewidget'          5                         5       'someentry'     1\n```", "```py\nfrom sqlalchemy import Integer, ForeignKey\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Entry(Base):\n    __tablename__ = \"entry\"\n    entry_id = mapped_column(Integer, primary_key=True)\n    widget_id = mapped_column(Integer, ForeignKey(\"widget.widget_id\"))\n    name = mapped_column(String(50))\n\nclass Widget(Base):\n    __tablename__ = \"widget\"\n\n    widget_id = mapped_column(Integer, primary_key=True)\n    favorite_entry_id = mapped_column(\n        Integer, ForeignKey(\"entry.entry_id\", name=\"fk_favorite_entry\")\n    )\n    name = mapped_column(String(50))\n\n    entries = relationship(Entry, primaryjoin=widget_id == Entry.widget_id)\n    favorite_entry = relationship(\n        Entry, primaryjoin=favorite_entry_id == Entry.entry_id, post_update=True\n    )\n```", "```py\n>>> w1 = Widget(name=\"somewidget\")\n>>> e1 = Entry(name=\"someentry\")\n>>> w1.favorite_entry = e1\n>>> w1.entries = [e1]\n>>> session.add_all([w1, e1])\n>>> session.commit()\nBEGIN  (implicit)\nINSERT  INTO  widget  (favorite_entry_id,  name)  VALUES  (?,  ?)\n(None,  'somewidget')\nINSERT  INTO  entry  (widget_id,  name)  VALUES  (?,  ?)\n(1,  'someentry')\nUPDATE  widget  SET  favorite_entry_id=?  WHERE  widget.widget_id  =  ?\n(1,  1)\nCOMMIT \n```", "```py\nfrom sqlalchemy import (\n    Integer,\n    ForeignKey,\n    String,\n    UniqueConstraint,\n    ForeignKeyConstraint,\n)\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Entry(Base):\n    __tablename__ = \"entry\"\n    entry_id = mapped_column(Integer, primary_key=True)\n    widget_id = mapped_column(Integer, ForeignKey(\"widget.widget_id\"))\n    name = mapped_column(String(50))\n    __table_args__ = (UniqueConstraint(\"entry_id\", \"widget_id\"),)\n\nclass Widget(Base):\n    __tablename__ = \"widget\"\n\n    widget_id = mapped_column(Integer, autoincrement=\"ignore_fk\", primary_key=True)\n    favorite_entry_id = mapped_column(Integer)\n\n    name = mapped_column(String(50))\n\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"widget_id\", \"favorite_entry_id\"],\n            [\"entry.widget_id\", \"entry.entry_id\"],\n            name=\"fk_favorite_entry\",\n        ),\n    )\n\n    entries = relationship(\n        Entry, primaryjoin=widget_id == Entry.widget_id, foreign_keys=Entry.widget_id\n    )\n    favorite_entry = relationship(\n        Entry,\n        primaryjoin=favorite_entry_id == Entry.entry_id,\n        foreign_keys=favorite_entry_id,\n        post_update=True,\n    )\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    addresses = relationship(\"Address\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(\n        String(50), ForeignKey(\"user.username\", onupdate=\"cascade\")\n    )\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    # passive_updates=False *only* needed if the database\n    # does not implement ON UPDATE CASCADE\n    addresses = relationship(\"Address\", passive_updates=False)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(String(50), ForeignKey(\"user.username\"))\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    # passive_updates=False *only* needed if the database\n    # does not implement ON UPDATE CASCADE\n    addresses = relationship(\"Address\", passive_updates=False)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(String(50), ForeignKey(\"user.username\"))\n```"]