- en: SQL Expression Language Foundational Constructs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/foundation.html](https://docs.sqlalchemy.org/en/20/core/foundation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Base classes and mixins that are used to compose SQL Expression Language elements.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [CacheKey](#sqlalchemy.sql.expression.CacheKey) | The key used to identify
    a SQL statement construct in the SQL compilation cache. |'
  prefs: []
  type: TYPE_TB
- en: '| [ClauseElement](#sqlalchemy.sql.expression.ClauseElement) | Base class for
    elements of a programmatically constructed SQL expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [DialectKWArgs](#sqlalchemy.sql.base.DialectKWArgs) | Establish the ability
    for a class to have dialect-specific arguments with defaults and constructor validation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [HasCacheKey](#sqlalchemy.sql.traversals.HasCacheKey) | Mixin for objects
    which can produce a cache key. |'
  prefs: []
  type: TYPE_TB
- en: '| [LambdaElement](#sqlalchemy.sql.expression.LambdaElement) | A SQL construct
    where the state is stored as an un-invoked lambda. |'
  prefs: []
  type: TYPE_TB
- en: '| [StatementLambdaElement](#sqlalchemy.sql.expression.StatementLambdaElement)
    | Represent a composable SQL statement as a [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement"). |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The key used to identify a SQL statement construct in the SQL compilation cache.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[bindparams](#sqlalchemy.sql.expression.CacheKey.bindparams), [key](#sqlalchemy.sql.expression.CacheKey.key),
    [to_offline_string()](#sqlalchemy.sql.expression.CacheKey.to_offline_string)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") (`builtins.tuple`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Generate an “offline string” form of this [`CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey")
  prefs: []
  type: TYPE_NORMAL
- en: The “offline string” is basically the string SQL for the statement plus a repr
    of the bound parameter values in series. Whereas the [`CacheKey`](#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") object is dependent on in-memory identities
    in order to work as a cache key, the “offline” version is suitable for a cache
    that will work for other processes as well.
  prefs: []
  type: TYPE_NORMAL
- en: The given `statement_cache` is a dictionary-like object where the string form
    of the statement itself will be cached. This dictionary should be in a longer
    lived scope in order to reduce the time spent stringifying statements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Base class for elements of a programmatically constructed SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[compare()](#sqlalchemy.sql.expression.ClauseElement.compare), [compile()](#sqlalchemy.sql.expression.ClauseElement.compile),
    [get_children()](#sqlalchemy.sql.expression.ClauseElement.get_children), [inherit_cache](#sqlalchemy.sql.expression.ClauseElement.inherit_cache),
    [params()](#sqlalchemy.sql.expression.ClauseElement.params), [self_group()](#sqlalchemy.sql.expression.ClauseElement.self_group),
    [unique_params()](#sqlalchemy.sql.expression.ClauseElement.unique_params)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (`sqlalchemy.sql.annotation.SupportsWrappingAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.sql.traversals.HasCopyInternals`,
    `sqlalchemy.sql.visitors.ExternallyTraversible`, `sqlalchemy.sql.expression.CompilerElement`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Compare this [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    to the given [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile this SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile_kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate if this [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    instance should make use of the cache key generation scheme used by its immediate
    superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ClauseElement.self_group
    "sqlalchemy.sql.expression.ClauseElement.self_group") method of [`ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy with [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Same functionality as [`ClauseElement.params()`](#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Establish the ability for a class to have dialect-specific arguments with defaults
    and constructor validation.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DialectKWArgs`](#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    interacts with the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") present on a dialect.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[argument_for()](#sqlalchemy.sql.base.DialectKWArgs.argument_for), [dialect_kwargs](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs),
    [dialect_options](#sqlalchemy.sql.base.DialectKWArgs.dialect_options), [kwargs](#sqlalchemy.sql.base.DialectKWArgs.kwargs)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Add a new kind of dialect-specific keyword argument for this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The [`DialectKWArgs.argument_for()`](#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  prefs: []
  type: TYPE_NORMAL
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`argument_name` – name of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` – default value of the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  prefs: []
  type: TYPE_NORMAL
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_options`](#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: New in version 0.9.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs.dialect_kwargs`](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Mixin for objects which can produce a cache key.
  prefs: []
  type: TYPE_NORMAL
- en: This class is usually in a hierarchy that starts with the `HasTraverseInternals`
    base, but this is optional. Currently, the class should be able to work on its
    own without including `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[inherit_cache](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`CacheKey`](#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQL Compilation Caching](connections.html#sql-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Indicate if this [`HasCacheKey`](#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    instance should make use of the cache key generation scheme used by its immediate
    superclass.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  prefs: []
  type: TYPE_NORMAL
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: A SQL construct where the state is stored as an un-invoked lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")
    is produced transparently whenever passing lambda expressions into SQL constructs,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement "sqlalchemy.sql.expression.LambdaElement")
    is the base of the [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") which represents a full statement
    within a lambda.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Lambdas to add significant speed gains to statement production](connections.html#engine-lambda-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement") ([`sqlalchemy.sql.expression.ClauseElement`](#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Represent a composable SQL statement as a [`LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.expression.LambdaElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") is constructed using the [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once constructed, additional criteria can be built onto the statement by adding
    subsequent lambdas, which accept the existing statement object as a single parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Lambdas to add significant speed gains to statement production](connections.html#engine-lambda-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[add_criteria()](#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria),
    [is_delete](#sqlalchemy.sql.expression.StatementLambdaElement.is_delete), [is_dml](#sqlalchemy.sql.expression.StatementLambdaElement.is_dml),
    [is_insert](#sqlalchemy.sql.expression.StatementLambdaElement.is_insert), [is_select](#sqlalchemy.sql.expression.StatementLambdaElement.is_select),
    [is_text](#sqlalchemy.sql.expression.StatementLambdaElement.is_text), [is_update](#sqlalchemy.sql.expression.StatementLambdaElement.is_update),
    [spoil()](#sqlalchemy.sql.expression.StatementLambdaElement.spoil)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") (`sqlalchemy.sql.roles.AllowsLambdaRole`,
    [`sqlalchemy.sql.lambdas.LambdaElement`](#sqlalchemy.sql.expression.LambdaElement
    "sqlalchemy.sql.lambdas.LambdaElement"), [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Add new criteria to this [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`StatementLambdaElement.add_criteria()`](#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method is equivalent
    to using the Python addition operator to add a new lambda, except that additional
    arguments may be added including `track_closure_values` and `track_on`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See [`lambda_stmt()`](sqlelement.html#sqlalchemy.sql.expression.lambda_stmt
    "sqlalchemy.sql.expression.lambda_stmt") for a description of the parameters accepted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`StatementLambdaElement`](#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") that will run all lambdas
    unconditionally each time.
  prefs: []
  type: TYPE_NORMAL
