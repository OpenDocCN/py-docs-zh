- en: Core Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/exceptions.html](https://docs.sqlalchemy.org/en/20/core/exceptions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exceptions used with SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: The base exception class is [`SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"). Exceptions which are raised as a result of
    DBAPI exceptions are all subclasses of [`DBAPIError`](#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Raised when more than one foreign key matching can be located between two selectables
    during a join.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.AmbiguousForeignKeysError`](#sqlalchemy.exc.AmbiguousForeignKeysError
    "sqlalchemy.exc.AmbiguousForeignKeysError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Raised when an invalid or conflicting function argument is supplied.
  prefs: []
  type: TYPE_NORMAL
- en: This error generally corresponds to construction time state errors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Error raised by the async greenlet spawn if no async operation was awaited when
    it required one.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.AwaitRequired`](#sqlalchemy.exc.AwaitRequired "sqlalchemy.exc.AwaitRequired")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Issued for usage of APIs specifically deprecated or legacy in SQLAlchemy 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[The <some function> in SQLAlchemy 2.0 will no longer <something>](../errors.html#error-b8d9).'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy 2.0 Deprecations Mode](../changelog/migration_14.html#deprecation-20-mode)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning") ([`sqlalchemy.exc.SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the version that started raising this deprecation warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Raised by topological sorts when a circular dependency is detected.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two scenarios where this error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: In a Session flush operation, if two objects are mutually dependent on each
    other, they can not be inserted or deleted via INSERT or DELETE statements alone;
    an UPDATE will be needed to post-associate or pre-deassociate one of the foreign
    key constrained values. The `post_update` flag described at [Rows that point to
    themselves / Mutually Dependent Rows](../orm/relationship_persistence.html#post-update)
    can resolve this cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") operation, two [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects mutually refer to each other.
    Apply the `use_alter=True` flag to one or both, see [Creating/Dropping Foreign
    Key Constraints via ALTER](constraints.html#use-alter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.CircularDependencyError`](#sqlalchemy.exc.CircularDependencyError
    "sqlalchemy.exc.CircularDependencyError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Raised when an error occurs during SQL compilation
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.CompileError`](#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: raised when a constraint refers to a string column name that is not present
    in the table being constrained.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.ConstraintColumnNotFoundError`](#sqlalchemy.exc.ConstraintColumnNotFoundError
    "sqlalchemy.exc.ConstraintColumnNotFoundError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Raised when the execution of a database operation fails.
  prefs: []
  type: TYPE_NORMAL
- en: Wraps exceptions raised by the DB-API underlying the database operation. Driver-specific
    implementations of the standard DB-API exception types are wrapped by matching
    sub-types of SQLAlchemy’s [`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    when possible. DB-API’s `Error` type maps to [`DBAPIError`](#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError") in SQLAlchemy, otherwise the names are identical.
    Note that there is no guarantee that different DB-API implementations will raise
    the same exception type for any given error condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError") features
    [`StatementError.statement`](#sqlalchemy.exc.StatementError.statement "sqlalchemy.exc.StatementError.statement")
    and [`StatementError.params`](#sqlalchemy.exc.StatementError.params "sqlalchemy.exc.StatementError.params")
    attributes which supply context regarding the specifics of the statement which
    had an issue, for the typical case when the error was raised within the context
    of emitting a SQL statement.'
  prefs: []
  type: TYPE_NORMAL
- en: The wrapped exception object is available in the [`StatementError.orig`](#sqlalchemy.exc.StatementError.orig
    "sqlalchemy.exc.StatementError.orig") attribute. Its type and properties are DB-API
    implementation specific.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    ([`sqlalchemy.exc.StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API DataError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.DataError`](#sqlalchemy.exc.DataError "sqlalchemy.exc.DataError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API DatabaseError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError")
    ([`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A disconnect is detected on a raw DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: This error is raised and consumed internally by a connection pool. It can be
    raised by the [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") event so that the host pool forces a
    retry; the exception will be caught three times in a row before the pool gives
    up and raises [`InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError")
    regarding the connection attempt.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [DontWrapMixin](#sqlalchemy.exc.DontWrapMixin) | A mixin class which, when
    applied to a user-defined Exception class, will not be wrapped inside of [`StatementError`](#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") if the error is emitted within the process of
    executing a statement. |'
  prefs: []
  type: TYPE_TB
- en: '| [HasDescriptionCode](#sqlalchemy.exc.HasDescriptionCode) | helper which adds
    ‘code’ as an attribute and ‘_code_str’ as a method |'
  prefs: []
  type: TYPE_TB
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: A mixin class which, when applied to a user-defined Exception class, will not
    be wrapped inside of [`StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    if the error is emitted within the process of executing a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: a Column is being added to a Table that would replace another Column, without
    appropriate parameters to allow this in place.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.DuplicateColumnError`](#sqlalchemy.exc.DuplicateColumnError
    "sqlalchemy.exc.DuplicateColumnError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: helper which adds ‘code’ as an attribute and ‘_code_str’ as a method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Raised when a schema name is beyond the max character limit
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.IdentifierError`](#sqlalchemy.exc.IdentifierError "sqlalchemy.exc.IdentifierError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: An object that tracks state encountered an illegal state change of some kind.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.IllegalStateChangeError`](#sqlalchemy.exc.IllegalStateChangeError
    "sqlalchemy.exc.IllegalStateChangeError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API IntegrityError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.IntegrityError`](#sqlalchemy.exc.IntegrityError "sqlalchemy.exc.IntegrityError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API InterfaceError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.InterfaceError`](#sqlalchemy.exc.InterfaceError "sqlalchemy.exc.InterfaceError")
    ([`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API InternalError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.InternalError`](#sqlalchemy.exc.InternalError "sqlalchemy.exc.InternalError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: SQLAlchemy was asked to do something it can’t do.
  prefs: []
  type: TYPE_NORMAL
- en: This error generally corresponds to runtime state errors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Raised when the connection pool should invalidate all stale connections.
  prefs: []
  type: TYPE_NORMAL
- en: A subclass of [`DisconnectionError`](#sqlalchemy.exc.DisconnectionError "sqlalchemy.exc.DisconnectionError")
    that indicates that the disconnect situation encountered on the connection probably
    means the entire pool should be invalidated, as the database has been restarted.
  prefs: []
  type: TYPE_NORMAL
- en: This exception will be handled otherwise the same way as [`DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"), allowing three attempts to reconnect before
    giving up.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.InvalidatePoolError`](#sqlalchemy.exc.InvalidatePoolError
    "sqlalchemy.exc.InvalidatePoolError") ([`sqlalchemy.exc.DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: indicates an API that is in ‘legacy’ status, a long term deprecation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.LegacyAPIWarning`](#sqlalchemy.exc.LegacyAPIWarning "sqlalchemy.exc.LegacyAPIWarning")
    ([`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Error raised by the async greenlet await_ if called while not inside the greenlet
    spawn context.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.MissingGreenlet`](#sqlalchemy.exc.MissingGreenlet "sqlalchemy.exc.MissingGreenlet")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Subtype of RemovedIn20Warning to indicate an API that moved only.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.MovedIn20Warning`](#sqlalchemy.exc.MovedIn20Warning "sqlalchemy.exc.MovedIn20Warning")
    ([`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: A single database result was required but more than one were found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: This exception is now part of the `sqlalchemy.exc`
    module in Core, moved from the ORM. The symbol remains importable from `sqlalchemy.orm.exc`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.MultipleResultsFound`](#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Raised when no foreign keys can be located between two selectables during a
    join.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoForeignKeysError`](#sqlalchemy.exc.NoForeignKeysError
    "sqlalchemy.exc.NoForeignKeysError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: A subject passed to `sqlalchemy.inspection.inspect()` produced no context for
    inspection.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoInspectionAvailable`](#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Raised by `ForeignKey` to indicate a reference cannot be resolved.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError "sqlalchemy.exc.NoReferenceError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Raised by `ForeignKey` when the referred `Column` cannot be located.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoReferencedColumnError`](#sqlalchemy.exc.NoReferencedColumnError
    "sqlalchemy.exc.NoReferencedColumnError") ([`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Raised by `ForeignKey` when the referred `Table` cannot be located.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoReferencedTableError`](#sqlalchemy.exc.NoReferencedTableError
    "sqlalchemy.exc.NoReferencedTableError") ([`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: A database result was required but none was found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: This exception is now part of the `sqlalchemy.exc`
    module in Core, moved from the ORM. The symbol remains importable from `sqlalchemy.orm.exc`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoResultFound`](#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: A nonexistent column is requested from a `Row`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoSuchColumnError`](#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"), `builtins.KeyError`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Raised when a dynamically-loaded module (usually a database dialect) of a particular
    name cannot be located.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoSuchModuleError`](#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Table does not exist or is not visible to a connection.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NoSuchTableError`](#sqlalchemy.exc.NoSuchTableError "sqlalchemy.exc.NoSuchTableError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API NotSupportedError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.NotSupportedError`](#sqlalchemy.exc.NotSupportedError
    "sqlalchemy.exc.NotSupportedError") ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError
    "sqlalchemy.exc.DatabaseError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Raised when an object is passed to .execute() that can’t be executed as SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.ObjectNotExecutableError`](#sqlalchemy.exc.ObjectNotExecutableError
    "sqlalchemy.exc.ObjectNotExecutableError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API OperationalError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.OperationalError`](#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: A transaction has failed and needs to be rolled back before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.PendingRollbackError`](#sqlalchemy.exc.PendingRollbackError
    "sqlalchemy.exc.PendingRollbackError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a DB-API ProgrammingError.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.ProgrammingError`](#sqlalchemy.exc.ProgrammingError "sqlalchemy.exc.ProgrammingError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: An operation was requested from a connection, cursor, or other object that’s
    in a closed state.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.ResourceClosedError`](#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Issued for usage of deprecated APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning") ([`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode
    "sqlalchemy.exc.HasDescriptionCode"), `builtins.DeprecationWarning`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the version that started raising this deprecation warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: A similar warning as [`SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning"), this warning is not used in modern versions
    of SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.SAPendingDeprecationWarning`](#sqlalchemy.exc.SAPendingDeprecationWarning
    "sqlalchemy.exc.SAPendingDeprecationWarning") (`builtins.PendingDeprecationWarning`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the version that started raising this deprecation warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: warning for a condition detected during tests that is non-fatal
  prefs: []
  type: TYPE_NORMAL
- en: Currently outside of SAWarning so that we can work around tools like Alembic
    doing the wrong thing with warnings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.SATestSuiteWarning`](#sqlalchemy.exc.SATestSuiteWarning
    "sqlalchemy.exc.SATestSuiteWarning") (`builtins.Warning`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Issued at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.SAWarning`](#sqlalchemy.exc.SAWarning "sqlalchemy.exc.SAWarning")
    ([`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode "sqlalchemy.exc.HasDescriptionCode"),
    `builtins.RuntimeWarning`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Generic error class.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError")
    ([`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode "sqlalchemy.exc.HasDescriptionCode"),
    `builtins.Exception`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: An error occurred during execution of a SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[`StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    wraps the exception raised during execution, and features [`statement`](#sqlalchemy.exc.StatementError.statement
    "sqlalchemy.exc.StatementError.statement") and [`params`](#sqlalchemy.exc.StatementError.params
    "sqlalchemy.exc.StatementError.params") attributes which supply context regarding
    the specifics of the statement which had an issue.'
  prefs: []
  type: TYPE_NORMAL
- en: The wrapped exception object is available in the [`orig`](#sqlalchemy.exc.StatementError.orig
    "sqlalchemy.exc.StatementError.orig") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: multi parameter passed to repr_params(). None is meaningful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The original exception that was thrown.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The parameter list being used when this exception occurred.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The string SQL statement being invoked when this exception occurred.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Raised when a connection pool times out on getting a connection.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.TimeoutError`](#sqlalchemy.exc.TimeoutError "sqlalchemy.exc.TimeoutError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: SQL was attempted without a database connection to execute it on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.UnboundExecutionError`](#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Table exists but can’t be reflected for some reason.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.UnreflectableTableError`](#sqlalchemy.exc.UnreflectableTableError
    "sqlalchemy.exc.UnreflectableTableError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Raised when an operation is not supported by the given compiler.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Compiler StrSQLCompiler can’t render element of type <element type>](../errors.html#error-l7de)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.exc.UnsupportedCompilationError`](#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") ([`sqlalchemy.exc.CompileError`](#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
