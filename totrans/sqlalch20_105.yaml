- en: Core Exceptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心异常
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/exceptions.html](https://docs.sqlalchemy.org/en/20/core/exceptions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/exceptions.html](https://docs.sqlalchemy.org/en/20/core/exceptions.html)
- en: Exceptions used with SQLAlchemy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SQLAlchemy 一起使用的异常。
- en: The base exception class is [`SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"). Exceptions which are raised as a result of
    DBAPI exceptions are all subclasses of [`DBAPIError`](#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 基础异常类是 [`SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError")。作为
    DBAPI 异常的结果引发的异常都是 [`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    的子类。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Raised when more than one foreign key matching can be located between two selectables
    during a join.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当在联接过程中无法定位两个可选择项之间的多个匹配外键时引发。
- en: '**Class signature**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.AmbiguousForeignKeysError`](#sqlalchemy.exc.AmbiguousForeignKeysError
    "sqlalchemy.exc.AmbiguousForeignKeysError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.AmbiguousForeignKeysError`](#sqlalchemy.exc.AmbiguousForeignKeysError
    "sqlalchemy.exc.AmbiguousForeignKeysError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Raised when an invalid or conflicting function argument is supplied.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供了无效或冲突的函数参数时引发。
- en: This error generally corresponds to construction time state errors.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误通常对应于构建时状态错误。
- en: '**Class signature**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Error raised by the async greenlet spawn if no async operation was awaited when
    it required one.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在需要异步操作但没有等待时调用了异步 greenlet spawn，则会引发错误。
- en: '**Class signature**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.AwaitRequired`](#sqlalchemy.exc.AwaitRequired "sqlalchemy.exc.AwaitRequired")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.AwaitRequired`](#sqlalchemy.exc.AwaitRequired "sqlalchemy.exc.AwaitRequired")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Issued for usage of APIs specifically deprecated or legacy in SQLAlchemy 2.0.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用于特定于 SQLAlchemy 2.0 中已弃用或传统的 API 的使用。
- en: See also
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The <some function> in SQLAlchemy 2.0 will no longer <something>](../errors.html#error-b8d9).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 SQLAlchemy 2.0 中 <some function> 将不再 <something>](../errors.html#error-b8d9)。'
- en: '[SQLAlchemy 2.0 Deprecations Mode](../changelog/migration_14.html#deprecation-20-mode)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 弃用模式](../changelog/migration_14.html#deprecation-20-mode)'
- en: '**Class signature**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning") ([`sqlalchemy.exc.SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning"))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning") ([`sqlalchemy.exc.SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning"))
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Indicates the version that started raising this deprecation warning
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表明开始引发此废弃警告的版本
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Raised by topological sorts when a circular dependency is detected.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到循环依赖时，通过拓扑排序解决。
- en: 'There are two scenarios where this error occurs:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 出现此错误的两种情况如下：
- en: In a Session flush operation, if two objects are mutually dependent on each
    other, they can not be inserted or deleted via INSERT or DELETE statements alone;
    an UPDATE will be needed to post-associate or pre-deassociate one of the foreign
    key constrained values. The `post_update` flag described at [Rows that point to
    themselves / Mutually Dependent Rows](../orm/relationship_persistence.html#post-update)
    can resolve this cycle.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在会话刷新操作中，如果两个对象相互依赖，它们不能仅通过 INSERT 或 DELETE 语句进行插入或删除；需要使用 UPDATE 来后关联或先取消关联其中一个外键约束值。在
    [指向自身的行 / 相互依赖的行](../orm/relationship_persistence.html#post-update) 中描述的 `post_update`
    标志可以解决这种循环。
- en: In a [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") operation, two [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects mutually refer to each other.
    Apply the `use_alter=True` flag to one or both, see [Creating/Dropping Foreign
    Key Constraints via ALTER](constraints.html#use-alter).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") 操作中，两个 [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 或 [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象相互引用。对其中一个或两个应用 `use_alter=True` 标志，参见
    [通过 ALTER 创建/删除外键约束](constraints.html#use-alter)。
- en: '**Class signature**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.CircularDependencyError`](#sqlalchemy.exc.CircularDependencyError
    "sqlalchemy.exc.CircularDependencyError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.CircularDependencyError`](#sqlalchemy.exc.CircularDependencyError
    "sqlalchemy.exc.CircularDependencyError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Raised when an error occurs during SQL compilation
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 编译期间发生错误时引发
- en: '**Class signature**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.CompileError`](#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.CompileError`](#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: raised when a constraint refers to a string column name that is not present
    in the table being constrained.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当约束引用不存在于被约束表中的字符串列名称时引发。
- en: New in version 2.0.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0 中新增。
- en: '**Class signature**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.ConstraintColumnNotFoundError`](#sqlalchemy.exc.ConstraintColumnNotFoundError
    "sqlalchemy.exc.ConstraintColumnNotFoundError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.ConstraintColumnNotFoundError`](#sqlalchemy.exc.ConstraintColumnNotFoundError
    "sqlalchemy.exc.ConstraintColumnNotFoundError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Raised when the execution of a database operation fails.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库操作执行失败时引发。
- en: Wraps exceptions raised by the DB-API underlying the database operation. Driver-specific
    implementations of the standard DB-API exception types are wrapped by matching
    sub-types of SQLAlchemy’s [`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    when possible. DB-API’s `Error` type maps to [`DBAPIError`](#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError") in SQLAlchemy, otherwise the names are identical.
    Note that there is no guarantee that different DB-API implementations will raise
    the same exception type for any given error condition.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 封装由 DB-API 底层数据库操作引发的异常。可能的情况下，SQLAlchemy 的 [`DBAPIError`](#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError") 匹配 DB-API 标准异常类型的特定驱动程序实现被封装为相应的子类型。DB-API 的 `Error`
    类型映射到 SQLAlchemy 中的 [`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")，否则名称相同。请注意，不能保证不同的
    DB-API 实现将为任何给定的错误条件引发相同的异常类型。
- en: '[`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError") features
    [`StatementError.statement`](#sqlalchemy.exc.StatementError.statement "sqlalchemy.exc.StatementError.statement")
    and [`StatementError.params`](#sqlalchemy.exc.StatementError.params "sqlalchemy.exc.StatementError.params")
    attributes which supply context regarding the specifics of the statement which
    had an issue, for the typical case when the error was raised within the context
    of emitting a SQL statement.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError") 包含 [`StatementError.statement`](#sqlalchemy.exc.StatementError.statement
    "sqlalchemy.exc.StatementError.statement") 和 [`StatementError.params`](#sqlalchemy.exc.StatementError.params
    "sqlalchemy.exc.StatementError.params") 属性，提供有关出现问题的语句的上下文信息，典型情况下，错误是在发出 SQL
    语句的上下文中引发的。'
- en: The wrapped exception object is available in the [`StatementError.orig`](#sqlalchemy.exc.StatementError.orig
    "sqlalchemy.exc.StatementError.orig") attribute. Its type and properties are DB-API
    implementation specific.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 封装的异常对象在 [`StatementError.orig`](#sqlalchemy.exc.StatementError.orig "sqlalchemy.exc.StatementError.orig")
    属性中可用。其类型和属性是特定于 DB-API 实现的。
- en: '**Class signature**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    ([`sqlalchemy.exc.StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError"))
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    ([`sqlalchemy.exc.StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError"))
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Wraps a DB-API DataError.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 包装一个 DB-API DataError。
- en: '**Class signature**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.DataError`](#sqlalchemy.exc.DataError "sqlalchemy.exc.DataError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.DataError`](#sqlalchemy.exc.DataError "sqlalchemy.exc.DataError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Wraps a DB-API DatabaseError.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 包装一个 DB-API DatabaseError。
- en: '**Class signature**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError")
    ([`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError")
    ([`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"))
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A disconnect is detected on a raw DB-API connection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始 DB-API 连接上检测到断开连接。
- en: This error is raised and consumed internally by a connection pool. It can be
    raised by the [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") event so that the host pool forces a
    retry; the exception will be caught three times in a row before the pool gives
    up and raises [`InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError")
    regarding the connection attempt.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误由连接池内部引发并消耗。它可以由 [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") 事件引发，以便主机池强制重试；在池放弃并引发关于连接尝试的 [`InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") 之前，该异常将被连续捕获三次。
- en: '**Class signature**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.DisconnectionError`](#sqlalchemy.exc.DisconnectionError "sqlalchemy.exc.DisconnectionError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
- en: '| Object Name | Description |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [DontWrapMixin](#sqlalchemy.exc.DontWrapMixin) | A mixin class which, when
    applied to a user-defined Exception class, will not be wrapped inside of [`StatementError`](#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") if the error is emitted within the process of
    executing a statement. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [DontWrapMixin](#sqlalchemy.exc.DontWrapMixin) | 一个混合类，当应用于用户定义的异常类时，在执行语句过程中发出错误时不会被包装在
    [`StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    内。 |'
- en: '| [HasDescriptionCode](#sqlalchemy.exc.HasDescriptionCode) | helper which adds
    ‘code’ as an attribute and ‘_code_str’ as a method |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [HasDescriptionCode](#sqlalchemy.exc.HasDescriptionCode) | 添加 ‘code’ 作为属性和
    ‘_code_str’ 作为方法的助手 |'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A mixin class which, when applied to a user-defined Exception class, will not
    be wrapped inside of [`StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    if the error is emitted within the process of executing a statement.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个混合类，当应用于用户定义的异常类时，在执行语句过程中发出错误时不会被包装在 [`StatementError`](#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") 内。
- en: 'E.g.:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: a Column is being added to a Table that would replace another Column, without
    appropriate parameters to allow this in place.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正在向表添加列，该列将替换另一列，但没有适当的参数允许此操作。
- en: New in version 2.0.0b4.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0b4 中新增。
- en: '**Class signature**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.DuplicateColumnError`](#sqlalchemy.exc.DuplicateColumnError
    "sqlalchemy.exc.DuplicateColumnError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.DuplicateColumnError`](#sqlalchemy.exc.DuplicateColumnError
    "sqlalchemy.exc.DuplicateColumnError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: helper which adds ‘code’ as an attribute and ‘_code_str’ as a method
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 ‘code’ 作为属性和 ‘_code_str’ 作为方法的助手
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Raised when a schema name is beyond the max character limit
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当模式名称超出最大字符限制时引发
- en: '**Class signature**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.IdentifierError`](#sqlalchemy.exc.IdentifierError "sqlalchemy.exc.IdentifierError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.IdentifierError`](#sqlalchemy.exc.IdentifierError "sqlalchemy.exc.IdentifierError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: An object that tracks state encountered an illegal state change of some kind.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪状态的对象遇到了某种类型的非法状态改变。
- en: New in version 2.0.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '**Class signature**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.IllegalStateChangeError`](#sqlalchemy.exc.IllegalStateChangeError
    "sqlalchemy.exc.IllegalStateChangeError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.IllegalStateChangeError`](#sqlalchemy.exc.IllegalStateChangeError
    "sqlalchemy.exc.IllegalStateChangeError")（[`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")）
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Wraps a DB-API IntegrityError.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 包装了一个 DB-API IntegrityError。
- en: '**Class signature**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.IntegrityError`](#sqlalchemy.exc.IntegrityError "sqlalchemy.exc.IntegrityError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.IntegrityError`](#sqlalchemy.exc.IntegrityError "sqlalchemy.exc.IntegrityError")（[`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError
    "sqlalchemy.exc.DatabaseError")）
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Wraps a DB-API InterfaceError.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 包装了一个 DB-API InterfaceError。
- en: '**Class signature**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.InterfaceError`](#sqlalchemy.exc.InterfaceError "sqlalchemy.exc.InterfaceError")
    ([`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError"))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.InterfaceError`](#sqlalchemy.exc.InterfaceError "sqlalchemy.exc.InterfaceError")（[`sqlalchemy.exc.DBAPIError`](#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")）
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Wraps a DB-API InternalError.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 包装了一个 DB-API InternalError。
- en: '**Class signature**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.InternalError`](#sqlalchemy.exc.InternalError "sqlalchemy.exc.InternalError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.InternalError`](#sqlalchemy.exc.InternalError "sqlalchemy.exc.InternalError")（[`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError
    "sqlalchemy.exc.DatabaseError"))
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: SQLAlchemy was asked to do something it can’t do.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 被要求执行一些它无法执行的操作。
- en: This error generally corresponds to runtime state errors.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误通常对应于运行时状态错误。
- en: '**Class signature**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")（[`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")）
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Raised when the connection pool should invalidate all stale connections.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接池应该使所有陈旧连接无效时引发。
- en: A subclass of [`DisconnectionError`](#sqlalchemy.exc.DisconnectionError "sqlalchemy.exc.DisconnectionError")
    that indicates that the disconnect situation encountered on the connection probably
    means the entire pool should be invalidated, as the database has been restarted.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`DisconnectionError`](#sqlalchemy.exc.DisconnectionError "sqlalchemy.exc.DisconnectionError")的子类，表示在连接上遇到的断开情况可能意味着整个池应该无效，因为数据库已重新启动。
- en: This exception will be handled otherwise the same way as [`DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"), allowing three attempts to reconnect before
    giving up.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此异常将以与[`DisconnectionError`](#sqlalchemy.exc.DisconnectionError "sqlalchemy.exc.DisconnectionError")相同的方式处理，允许在放弃之前尝试三次重新连接。
- en: New in version 1.2.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 版本中的新功能。
- en: '**Class signature**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.InvalidatePoolError`](#sqlalchemy.exc.InvalidatePoolError
    "sqlalchemy.exc.InvalidatePoolError") ([`sqlalchemy.exc.DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"))
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.InvalidatePoolError`](#sqlalchemy.exc.InvalidatePoolError
    "sqlalchemy.exc.InvalidatePoolError")（[`sqlalchemy.exc.DisconnectionError`](#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")）
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: indicates an API that is in ‘legacy’ status, a long term deprecation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表示处于“遗留”状态的 API，长期弃用。
- en: '**Class signature**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.LegacyAPIWarning`](#sqlalchemy.exc.LegacyAPIWarning "sqlalchemy.exc.LegacyAPIWarning")
    ([`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning"))
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.LegacyAPIWarning`](#sqlalchemy.exc.LegacyAPIWarning "sqlalchemy.exc.LegacyAPIWarning")（[`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning")）
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Error raised by the async greenlet await_ if called while not inside the greenlet
    spawn context.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在不在 greenlet spawn 上下文中调用 async greenlet await_ 时引发的错误。
- en: '**Class signature**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.MissingGreenlet`](#sqlalchemy.exc.MissingGreenlet "sqlalchemy.exc.MissingGreenlet")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.MissingGreenlet`](#sqlalchemy.exc.MissingGreenlet "sqlalchemy.exc.MissingGreenlet")（[`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")）
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Subtype of RemovedIn20Warning to indicate an API that moved only.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指示仅移动的 API 的 RemovedIn20Warning 子类型。
- en: '**Class signature**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.MovedIn20Warning`](#sqlalchemy.exc.MovedIn20Warning "sqlalchemy.exc.MovedIn20Warning")
    ([`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning"))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.MovedIn20Warning`](#sqlalchemy.exc.MovedIn20Warning "sqlalchemy.exc.MovedIn20Warning")
    ([`sqlalchemy.exc.Base20DeprecationWarning`](#sqlalchemy.exc.Base20DeprecationWarning
    "sqlalchemy.exc.Base20DeprecationWarning"))
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A single database result was required but more than one were found.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 需要单个数据库结果，但找到多个结果。
- en: 'Changed in version 1.4: This exception is now part of the `sqlalchemy.exc`
    module in Core, moved from the ORM. The symbol remains importable from `sqlalchemy.orm.exc`.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：此异常现在是Core中`sqlalchemy.exc`模块的一部分，已从ORM中移动。该符号仍然可以从`sqlalchemy.orm.exc`中导入。
- en: '**Class signature**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.MultipleResultsFound`](#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.MultipleResultsFound`](#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Raised when no foreign keys can be located between two selectables during a
    join.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接期间无法找到两个可选择对象之间的外键时引发。
- en: '**Class signature**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoForeignKeysError`](#sqlalchemy.exc.NoForeignKeysError
    "sqlalchemy.exc.NoForeignKeysError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.NoForeignKeysError`](#sqlalchemy.exc.NoForeignKeysError
    "sqlalchemy.exc.NoForeignKeysError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A subject passed to `sqlalchemy.inspection.inspect()` produced no context for
    inspection.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`sqlalchemy.inspection.inspect()`的主题未产生检查的上下文。
- en: '**Class signature**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoInspectionAvailable`](#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.NoInspectionAvailable`](#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Raised by `ForeignKey` to indicate a reference cannot be resolved.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由`ForeignKey`引发，表示无法解析引用。
- en: '**Class signature**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError "sqlalchemy.exc.NoReferenceError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError "sqlalchemy.exc.NoReferenceError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Raised by `ForeignKey` when the referred `Column` cannot be located.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当所引用的`Column`无法找到时，由`ForeignKey`引发。
- en: '**Class signature**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoReferencedColumnError`](#sqlalchemy.exc.NoReferencedColumnError
    "sqlalchemy.exc.NoReferencedColumnError") ([`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError"))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.NoReferencedColumnError`](#sqlalchemy.exc.NoReferencedColumnError
    "sqlalchemy.exc.NoReferencedColumnError") ([`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError"))
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Raised by `ForeignKey` when the referred `Table` cannot be located.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当所引用的`Table`无法找到时，由`ForeignKey`引发。
- en: '**Class signature**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoReferencedTableError`](#sqlalchemy.exc.NoReferencedTableError
    "sqlalchemy.exc.NoReferencedTableError") ([`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError"))
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.NoReferencedTableError`](#sqlalchemy.exc.NoReferencedTableError
    "sqlalchemy.exc.NoReferencedTableError") ([`sqlalchemy.exc.NoReferenceError`](#sqlalchemy.exc.NoReferenceError
    "sqlalchemy.exc.NoReferenceError"))
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: A database result was required but none was found.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 需要数据库结果，但未找到任何结果。
- en: 'Changed in version 1.4: This exception is now part of the `sqlalchemy.exc`
    module in Core, moved from the ORM. The symbol remains importable from `sqlalchemy.orm.exc`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：此异常现在是Core中`sqlalchemy.exc`模块的一部分，已从ORM中移动。该符号仍然可以从`sqlalchemy.orm.exc`中导入。
- en: '**Class signature**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoResultFound`](#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.exc.NoResultFound`](#sqlalchemy.exc.NoResultFound "sqlalchemy.exc.NoResultFound")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: A nonexistent column is requested from a `Row`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请求了`Row`中不存在的列。
- en: '**Class signature**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoSuchColumnError`](#sqlalchemy.exc.NoSuchColumnError
    "sqlalchemy.exc.NoSuchColumnError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"), `builtins.KeyError`)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.NoSuchColumnError`](#sqlalchemy.exc.NoSuchColumnError "sqlalchemy.exc.NoSuchColumnError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"),
    `builtins.KeyError`)
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Raised when a dynamically-loaded module (usually a database dialect) of a particular
    name cannot be located.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当找不到特定名称的动态加载模块（通常是数据库方言）时引发。
- en: '**Class signature**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoSuchModuleError`](#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.NoSuchModuleError`](#sqlalchemy.exc.NoSuchModuleError "sqlalchemy.exc.NoSuchModuleError")
    ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError"))
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Table does not exist or is not visible to a connection.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 表不存在或对连接不可见。
- en: '**Class signature**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NoSuchTableError`](#sqlalchemy.exc.NoSuchTableError "sqlalchemy.exc.NoSuchTableError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.NoSuchTableError`](#sqlalchemy.exc.NoSuchTableError "sqlalchemy.exc.NoSuchTableError")
    ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Wraps a DB-API NotSupportedError.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 封装了一个 DB-API NotSupportedError。
- en: '**Class signature**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.NotSupportedError`](#sqlalchemy.exc.NotSupportedError
    "sqlalchemy.exc.NotSupportedError") ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError
    "sqlalchemy.exc.DatabaseError"))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.NotSupportedError`](#sqlalchemy.exc.NotSupportedError "sqlalchemy.exc.NotSupportedError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Raised when an object is passed to .execute() that can’t be executed as SQL.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给 `.execute()` 的对象无法作为 SQL 执行时引发。
- en: '**Class signature**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.ObjectNotExecutableError`](#sqlalchemy.exc.ObjectNotExecutableError
    "sqlalchemy.exc.ObjectNotExecutableError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.ObjectNotExecutableError`](#sqlalchemy.exc.ObjectNotExecutableError
    "sqlalchemy.exc.ObjectNotExecutableError") ([`sqlalchemy.exc.ArgumentError`](#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError"))
- en: '[PRE42]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Wraps a DB-API OperationalError.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 封装了一个 DB-API OperationalError。
- en: '**Class signature**'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.OperationalError`](#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.OperationalError`](#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: A transaction has failed and needs to be rolled back before continuing.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 事务失败，需要在继续之前回滚。
- en: New in version 1.4.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 新增。
- en: '**Class signature**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.PendingRollbackError`](#sqlalchemy.exc.PendingRollbackError
    "sqlalchemy.exc.PendingRollbackError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.PendingRollbackError`](#sqlalchemy.exc.PendingRollbackError
    "sqlalchemy.exc.PendingRollbackError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE45]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Wraps a DB-API ProgrammingError.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 封装了一个 DB-API ProgrammingError。
- en: '**Class signature**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.ProgrammingError`](#sqlalchemy.exc.ProgrammingError "sqlalchemy.exc.ProgrammingError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.ProgrammingError`](#sqlalchemy.exc.ProgrammingError "sqlalchemy.exc.ProgrammingError")
    ([`sqlalchemy.exc.DatabaseError`](#sqlalchemy.exc.DatabaseError "sqlalchemy.exc.DatabaseError"))
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: An operation was requested from a connection, cursor, or other object that’s
    in a closed state.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从已关闭状态的连接、游标或其他对象请求了操作。
- en: '**Class signature**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.ResourceClosedError`](#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.ResourceClosedError`](#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE47]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Issued for usage of deprecated APIs.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 用于废弃的 API 的使用。
- en: '**Class signature**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning") ([`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode
    "sqlalchemy.exc.HasDescriptionCode"), `builtins.DeprecationWarning`)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning")（[`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode
    "sqlalchemy.exc.HasDescriptionCode")，`builtins.DeprecationWarning`）
- en: '[PRE48]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Indicates the version that started raising this deprecation warning
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 表明开始引发此弃用警告的版本
- en: '[PRE49]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: A similar warning as [`SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning"), this warning is not used in modern versions
    of SQLAlchemy.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`SADeprecationWarning`](#sqlalchemy.exc.SADeprecationWarning "sqlalchemy.exc.SADeprecationWarning")类似的警告，此警告在现代版本的SQLAlchemy中不使用。
- en: '**Class signature**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.SAPendingDeprecationWarning`](#sqlalchemy.exc.SAPendingDeprecationWarning
    "sqlalchemy.exc.SAPendingDeprecationWarning") (`builtins.PendingDeprecationWarning`)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.SAPendingDeprecationWarning`](#sqlalchemy.exc.SAPendingDeprecationWarning
    "sqlalchemy.exc.SAPendingDeprecationWarning")（`builtins.PendingDeprecationWarning`）
- en: '[PRE50]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Indicates the version that started raising this deprecation warning
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 表明开始引发此弃用警告的版本
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: warning for a condition detected during tests that is non-fatal
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试期间检测到的非致命条件的警告
- en: Currently outside of SAWarning so that we can work around tools like Alembic
    doing the wrong thing with warnings.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不在SAWarning之外，以便我们可以解决像Alembic这样的工具在警告方面做错事的问题。
- en: '**Class signature**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.SATestSuiteWarning`](#sqlalchemy.exc.SATestSuiteWarning
    "sqlalchemy.exc.SATestSuiteWarning") (`builtins.Warning`)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.SATestSuiteWarning`](#sqlalchemy.exc.SATestSuiteWarning "sqlalchemy.exc.SATestSuiteWarning")（`builtins.Warning`）
- en: '[PRE52]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Issued at runtime.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时发出。
- en: '**Class signature**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.SAWarning`](#sqlalchemy.exc.SAWarning "sqlalchemy.exc.SAWarning")
    ([`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode "sqlalchemy.exc.HasDescriptionCode"),
    `builtins.RuntimeWarning`)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.SAWarning`](#sqlalchemy.exc.SAWarning "sqlalchemy.exc.SAWarning")（[`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode
    "sqlalchemy.exc.HasDescriptionCode")，`builtins.RuntimeWarning`）
- en: '[PRE53]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Generic error class.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通用错误类。
- en: '**Class signature**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError")
    ([`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode "sqlalchemy.exc.HasDescriptionCode"),
    `builtins.Exception`)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError")（[`sqlalchemy.exc.HasDescriptionCode`](#sqlalchemy.exc.HasDescriptionCode
    "sqlalchemy.exc.HasDescriptionCode")，`builtins.Exception`）
- en: '[PRE54]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: An error occurred during execution of a SQL statement.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行SQL语句期间发生错误。
- en: '[`StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    wraps the exception raised during execution, and features [`statement`](#sqlalchemy.exc.StatementError.statement
    "sqlalchemy.exc.StatementError.statement") and [`params`](#sqlalchemy.exc.StatementError.params
    "sqlalchemy.exc.StatementError.params") attributes which supply context regarding
    the specifics of the statement which had an issue.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")封装了执行过程中引发的异常，并具有[`statement`](#sqlalchemy.exc.StatementError.statement
    "sqlalchemy.exc.StatementError.statement")和[`params`](#sqlalchemy.exc.StatementError.params
    "sqlalchemy.exc.StatementError.params")属性，提供有关出现问题的语句的具体情况的上下文。'
- en: The wrapped exception object is available in the [`orig`](#sqlalchemy.exc.StatementError.orig
    "sqlalchemy.exc.StatementError.orig") attribute.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 封装的异常对象可在[`orig`](#sqlalchemy.exc.StatementError.orig "sqlalchemy.exc.StatementError.orig")属性中找到。
- en: '**Class signature**'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.exc.StatementError`](#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")（[`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError
    "sqlalchemy.exc.SQLAlchemyError")）
- en: '[PRE55]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: multi parameter passed to repr_params(). None is meaningful.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`repr_params()`的多个参数。`None`是有意义的。
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The original exception that was thrown.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 被抛出的原始异常。
- en: '[PRE58]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The parameter list being used when this exception occurred.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生此异常时使用的参数列表。
- en: '[PRE59]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The string SQL statement being invoked when this exception occurred.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生此异常时调用的字符串SQL语句。
- en: '[PRE60]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Raised when a connection pool times out on getting a connection.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接池在获取连接时超时时引发。
- en: '**Class signature**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.TimeoutError`](#sqlalchemy.exc.TimeoutError "sqlalchemy.exc.TimeoutError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.TimeoutError`](#sqlalchemy.exc.TimeoutError "sqlalchemy.exc.TimeoutError")
    ([`sqlalchemy.exc.SQLAlchemyError`](#sqlalchemy.exc.SQLAlchemyError "sqlalchemy.exc.SQLAlchemyError"))
- en: '[PRE61]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: SQL was attempted without a database connection to execute it on.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试执行 SQL 但没有数据库连接。
- en: '**Class signature**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.UnboundExecutionError`](#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.UnboundExecutionError`](#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE62]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Table exists but can’t be reflected for some reason.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 表存在，但由于某种原因无法反映。
- en: New in version 1.2.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版本新增。
- en: '**Class signature**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.UnreflectableTableError`](#sqlalchemy.exc.UnreflectableTableError
    "sqlalchemy.exc.UnreflectableTableError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.UnreflectableTableError`](#sqlalchemy.exc.UnreflectableTableError
    "sqlalchemy.exc.UnreflectableTableError") ([`sqlalchemy.exc.InvalidRequestError`](#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"))
- en: '[PRE63]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Raised when an operation is not supported by the given compiler.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作不受给定编译器支持时引发。
- en: See also
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 SQL 表达式渲染为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[Compiler StrSQLCompiler can’t render element of type <element type>](../errors.html#error-l7de)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[编译器 StrSQLCompiler 无法渲染类型为 <element type> 的元素](../errors.html#error-l7de)'
- en: '**Class signature**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.exc.UnsupportedCompilationError`](#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") ([`sqlalchemy.exc.CompileError`](#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError"))
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.exc.UnsupportedCompilationError`](#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") ([`sqlalchemy.exc.CompileError`](#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError"))
- en: '[PRE64]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
