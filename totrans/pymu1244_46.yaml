- en: TextWriter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/textwriter.html](https://pymupdf.readthedocs.io/en/latest/textwriter.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**This class is for PDF only.**'
  prefs: []
  type: TYPE_NORMAL
- en: New in v1.16.18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This class represents a MuPDF *text* object. The basic idea is to **decouple
    (1) text preparation, and (2) text output** to PDF pages.
  prefs: []
  type: TYPE_NORMAL
- en: During **preparation**, a text writer stores any number of text pieces (“spans”)
    together with their positions and individual font information. The **output**
    of the writer’s prepared content may happen multiple times to any PDF page with
    a compatible page size.
  prefs: []
  type: TYPE_NORMAL
- en: 'A text writer is an elegant alternative to methods [`Page.insert_text()`](page.html#Page.insert_text
    "Page.insert_text") and friends:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved text positioning:** Choose any point where insertion of text should
    start. Storing text returns the “cursor position” after the *last character* of
    the span.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Free font choice:** Each text span has its own font and [`fontsize`](glossary.html#fontsize
    "fontsize"). This lets you easily switch when composing a larger text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic fallback fonts:** If a character is not supported by the chosen
    font, alternative fonts are automatically searched. This significantly reduces
    the risk of seeing unprintable symbols in the output (“TOFUs” – looking like a
    small rectangle). PyMuPDF now also comes with the **universal font “Droid Sans
    Fallback Regular”**, which supports **all Latin** characters (including Cyrillic
    and Greek), and **all CJK** characters (Chinese, Japanese, Korean).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cyrillic and Greek Support:** The [PDF Base 14 Fonts](app3.html#base-14-fonts)
    have integrated support of Cyrillic and Greek characters **without specifying
    encoding.** Your text may be a mixture of Latin, Greek and Cyrillic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transparency support:** Parameter *opacity* is supported. This offers a handy
    way to create watermark-style text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Justified text:** Supported for any font – not just simple fonts as in [`Page.insert_textbox()`](page.html#Page.insert_textbox
    "Page.insert_textbox").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusability:** A TextWriter object exists independent from PDF pages. It
    can be written multiple times, either to the same or to other pages, in the same
    or in different PDFs, choosing different colors or transparency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using this object entails three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When **created**, a TextWriter requires a fixed **page rectangle** in relation
    to which it calculates text positions. A text writer can write to pages of this
    size only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store text in the TextWriter using methods [`TextWriter.append()`](#TextWriter.append
    "TextWriter.append"), [`TextWriter.appendv()`](#TextWriter.appendv "TextWriter.appendv")
    and [`TextWriter.fill_textbox()`](#TextWriter.fill_textbox "TextWriter.fill_textbox")
    as often as is desired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the TextWriter object on some PDF page(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Starting with version 1.17.0, TextWriters **do support** text rotation via the
    *morph* parameter of [`TextWriter.write_text()`](#TextWriter.write_text "TextWriter.write_text").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There also exists [`Page.write_text()`](page.html#Page.write_text "Page.write_text")
    which combines one or more TextWriters and jointly writes them to a given rectangle
    and with a given rotation angle – much like [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`append()`](#TextWriter.append "TextWriter.append") | Add text in horizontal
    write mode |'
  prefs: []
  type: TYPE_TB
- en: '| [`appendv()`](#TextWriter.appendv "TextWriter.appendv") | Add text in vertical
    write mode |'
  prefs: []
  type: TYPE_TB
- en: '| [`fill_textbox()`](#TextWriter.fill_textbox "TextWriter.fill_textbox") |
    Fill rectangle (horizontal write mode) |'
  prefs: []
  type: TYPE_TB
- en: '| [`write_text()`](#TextWriter.write_text "TextWriter.write_text") | Output
    TextWriter to a PDF page |'
  prefs: []
  type: TYPE_TB
- en: '| [`color`](#TextWriter.color "TextWriter.color") | Text color (can be changed)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`last_point`](#TextWriter.last_point "TextWriter.last_point") | Last written
    character ends here |'
  prefs: []
  type: TYPE_TB
- en: '| [`opacity`](#TextWriter.opacity "TextWriter.opacity") | Text opacity (can
    be changed) |'
  prefs: []
  type: TYPE_TB
- en: '| [`rect`](#TextWriter.rect "TextWriter.rect") | Page rectangle used by this
    TextWriter |'
  prefs: []
  type: TYPE_TB
- en: '| [`text_rect`](#TextWriter.text_rect "TextWriter.text_rect") | Area occupied
    so far |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect-like*) – rectangle internally used for text positioning computations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – sets the transparency for the text to store here. Values
    outside the interval `[0, 1)` will be ignored. A value of e.g. 0.5 means 50% transparency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**color** (*float**,**sequ*) – the color of the text. All colors are specified
    as floats *0 <= color <= 1*. A single float represents some gray level, a sequence
    implies the colorspace via its length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Changed in v1.18.9*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Changed in v1.18.15*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add some new text in horizontal writing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pos** (*point_like*) – start position of the text, the bottom left point
    of the first character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – a string of arbitrary length. It will be written starting
    at position “pos”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**font** – a [Font](font.html#font). If omitted, `pymupdf.Font("helv")` will
    be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize"),
    a positive number, default 11.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – the language to use, e.g. “en” for English. Meaningful
    values should be compliant with the ISO 639 standards 1, 2, 3 or 5\. Reserved
    for future use: currently has no effect as far as we know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**right_to_left** (*bool*) – *(New in v1.18.9)* whether the text should be
    written from right to left. Applicable for languages like Arabian or Hebrew. Default
    is *False*. If *True*, any Latin parts within the text will automatically converted.
    There are no other consequences, i.e. [`TextWriter.last_point`](#TextWriter.last_point
    "TextWriter.last_point") will still be the rightmost character, and there neither
    is any alignment taking place. Hence you may want to use [`TextWriter.fill_textbox()`](#TextWriter.fill_textbox
    "TextWriter.fill_textbox") instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**small_caps** (*bool*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*(New in v1.18.15)* look for the character’s Small Capital version in the font.
    If present, take that value instead. Otherwise the original character (this font
    or the fallback font) will be taken. The fallback font will never return small
    caps. For example, this snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'will produce this PDF text:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![_images/img-smallcaps.jpg](../Images/7774f3a05833e624673b6a130b5ebccd.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`text_rect`](#TextWriter.text_rect "TextWriter.text_rect") and [`last_point`](#TextWriter.last_point
    "TextWriter.last_point"). *(Changed in v1.18.0:)* Raises an exception for an unsupported
    font – checked via [`Font.is_writable`](font.html#Font.is_writable "Font.is_writable").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Changed in v1.18.15*'
  prefs: []
  type: TYPE_NORMAL
- en: Add some new text in vertical, top-to-bottom writing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pos** (*point_like*) – start position of the text, the bottom left point
    of the first character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – a string. It will be written starting at position “pos”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**font** – a [Font](font.html#font). If omitted, `pymupdf.Font("helv")` will
    be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize"),
    a positive float, default 11.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – the language to use, e.g. “en” for English. Meaningful
    values should be compliant with the ISO 639 standards 1, 2, 3 or 5\. Reserved
    for future use: currently has no effect as far as we know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**small_caps** (*bool*) – *(New in v1.18.15)* see [`append()`](#TextWriter.append
    "TextWriter.append").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`text_rect`](#TextWriter.text_rect "TextWriter.text_rect") and [`last_point`](#TextWriter.last_point
    "TextWriter.last_point"). *(Changed in v1.18.0:)* Raises an exception for an unsupported
    font – checked via [`Font.is_writable`](font.html#Font.is_writable "Font.is_writable").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in 1.17.3: New parameter `pos` to specify where to start writing within
    rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.9: Return list of lines which do not fit in rectangle. Support
    writing right-to-left (e.g. Arabian, Hebrew).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.15: Prefer small caps if supported by the font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fill a given rectangle with text in horizontal writing mode. This is a convenience
    method to use as an alternative for [`append()`](#TextWriter.append "TextWriter.append").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the area to fill. No part of the text will appear
    outside of this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str**,**sequ*) – the text. Can be specified as a (UTF-8) string
    or a list / tuple of strings. A string will first be converted to a list using
    *splitlines()*. Every list item will begin on a new line (forced line breaks).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pos** (*point_like*) – *(new in v1.17.3)* start storing at this point. Default
    is a point near rectangle top-left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**font** – the [Font](font.html#font), default `pymupdf.Font("helv")`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – text alignment. Use one of TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER,
    TEXT_ALIGN_RIGHT or TEXT_ALIGN_JUSTIFY.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**right_to_left** (*bool*) – *(New in v1.18.9)* whether the text should be
    written from right to left. Applicable for languages like Arabian or Hebrew. Default
    is *False*. If *True*, any Latin parts are automatically reverted. You must still
    set the alignment (if you want right alignment), it does not happen automatically
    – the other alignment options remain available as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**warn** (*bool*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on text overflow do nothing, warn, or raise an exception. Overflow text will
    never be written. **Changed in v1.18.9:**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Default is *None*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of overflow lines will be returned.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**small_caps** (*bool*) – *(New in v1.18.15)* see [`append()`](#TextWriter.append
    "TextWriter.append").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '*New in v1.18.9* – List of lines that did not fit in the rectangle. Each item
    is a tuple `(text, length)` containing a string and its length (on the page).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Use these methods as often as is required – there is no technical limit (except
    memory constraints of your system). You can also mix [`append()`](#TextWriter.append
    "TextWriter.append") and text boxes and have multiple of both. Text positioning
    is exclusively controlled by the insertion point. Therefore there is no need to
    adhere to any order. *(Changed in v1.18.0:)* Raise an exception for an unsupported
    font – checked via [`Font.is_writable`](font.html#Font.is_writable "Font.is_writable").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Write the TextWriter text to a page, which is the only mandatory parameter.
    The other parameters can be used to temporarily override the values used when
    the TextWriter was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**page** – write to this [Page](page.html#page).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – override the value of the TextWriter for this output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**color** (*sequ*) – override the value of the TextWriter for this output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**morph** (*sequ*) – modify the text appearance by applying a matrix to it.
    If provided, this must be a sequence *(fixpoint, matrix)* with a point-like *fixpoint*
    and a matrix-like *matrix*. A typical example is rotating the text around *fixpoint*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put in foreground (default) or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – *(new in v1.18.4)* the [`xref`](glossary.html#xref "xref")
    of an [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD "OCMD").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**render_mode** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The PDF `Tr` operator value. Values: 0 (default), 1, 2, 3 (invisible).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![_images/img-rendermode.jpg](../Images/68afc67e63136e95b67c5e79fab5037b.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The area currently occupied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The “cursor position” – a [Point](point.html#point) – after the last written
    character (its bottom-right).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The text opacity (modifiable).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The text color (modifiable).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float,tuple
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The page rectangle for which this TextWriter was created. Must not be modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To see some demo scripts dealing with TextWriter, have a look at [this](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/textwriter)
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Opacity and color apply to **all the text** in this object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need different colors / transparency, you must create a separate TextWriter.
    Whenever you determine the color should change, simply append the text to the
    respective TextWriter using the previously returned `last_point` as position for
    the new text span.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Appending items or text boxes can occur in arbitrary order: only the position
    parameter controls where text appears.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Font and [`fontsize`](glossary.html#fontsize "fontsize") can freely vary within
    the same TextWriter. This can be used to let text with different properties appear
    on the same displayed line: just specify *pos* accordingly, and e.g. set it to
    `last_point` of the previously added item.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the *pos* argument of [`TextWriter.fill_textbox()`](#TextWriter.fill_textbox
    "TextWriter.fill_textbox") to set the position of the first text character. This
    allows filling the same textbox with contents from different [TextWriter](#textwriter)
    objects, thus allowing for multiple colors, opacities, etc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MuPDF does not support all fonts with this feature, e.g. no Type3 fonts. Starting
    with v1.18.0 this can be checked via the font attribute [`Font.is_writable`](font.html#Font.is_writable
    "Font.is_writable"). This attribute is also checked when using [TextWriter](#textwriter)
    methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
