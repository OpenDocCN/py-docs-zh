- en: Relationships API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/relationship_api.html](https://docs.sqlalchemy.org/en/20/orm/relationship_api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [backref](#sqlalchemy.orm.backref)(name, **kwargs) | When using the [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") parameter, provides specific parameters to be used
    when the new [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    is generated. |'
  prefs: []
  type: TYPE_TB
- en: '| [dynamic_loader](#sqlalchemy.orm.dynamic_loader)([argument], **kw) | Construct
    a dynamically-loading mapper property. |'
  prefs: []
  type: TYPE_TB
- en: '| [foreign](#sqlalchemy.orm.foreign)(expr) | Annotate a portion of a primaryjoin
    expression with a ‘foreign’ annotation. |'
  prefs: []
  type: TYPE_TB
- en: '| [relationship](#sqlalchemy.orm.relationship)([argument, secondary], *, [uselist,
    collection_class, primaryjoin, secondaryjoin, back_populates, order_by, backref,
    overlaps, post_update, cascade, viewonly, init, repr, default, default_factory,
    compare, kw_only, lazy, passive_deletes, passive_updates, active_history, enable_typechecks,
    foreign_keys, remote_side, join_depth, comparator_factory, single_parent, innerjoin,
    distinct_target_key, load_on_pending, query_class, info, omit_join, sync_backref],
    **kw) | Provide a relationship between two mapped classes. |'
  prefs: []
  type: TYPE_TB
- en: '| [remote](#sqlalchemy.orm.remote)(expr) | Annotate a portion of a primaryjoin
    expression with a ‘remote’ annotation. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Provide a relationship between two mapped classes.
  prefs: []
  type: TYPE_NORMAL
- en: This corresponds to a parent-child or associative table relationship. The constructed
    class is an instance of [`Relationship`](internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - tutorial introduction to [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Configuration](relationships.html) - narrative documentation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`argument` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This parameter refers to the class that is to be related. It accepts several
    forms, including a direct reference to the target class itself, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance for the target class, a Python callable / lambda
    that will return a reference to the class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") when called, and finally a string name for the class,
    which will be resolved from the [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") in use in order to locate the class, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`relationship.argument`](#sqlalchemy.orm.relationship.params.argument
    "sqlalchemy.orm.relationship") may also be omitted from the [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct entirely, and instead placed inside a
    [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped") annotation
    on the left side, which should include a Python collection type if the relationship
    is expected to be a collection, such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or for a many-to-one or one-to-one relationship:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Defining Mapped Properties with Declarative](declarative_config.html#orm-declarative-properties)
    - further detail on relationship configuration when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`secondary` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a many-to-many relationship, specifies the intermediary table, and is typically
    an instance of [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    In less common circumstances, the argument may also be specified as an [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct, or even a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary "sqlalchemy.orm.relationship")
    may also be passed as a callable function which is evaluated at mapper initialization
    time. When using Declarative, it may also be a string argument noting the name
    of a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that is present in the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection associated with the parent-mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") keyword argument is typically applied in the case
    where the intermediary [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is not otherwise expressed in any direct class mapping.
    If the “secondary” table is also explicitly mapped elsewhere (e.g. as in [Association
    Object](basic_relationships.html#association-pattern)), one should consider applying
    the [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly "sqlalchemy.orm.relationship")
    flag so that this [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    is not used for persistence operations which may conflict with those of the association
    object pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Many To Many](basic_relationships.html#relationships-many-to-many) - Reference
    example of “many to many”.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Self-Referential Many-to-Many Relationship](join_conditions.html#self-referential-many-to-many)
    - Specifics on using many-to-many in a self-referential case.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Many-to-Many Relationships](extensions/declarative/relationships.html#declarative-many-to-many)
    - Additional options when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Association Object](basic_relationships.html#association-pattern) - an alternative
    to [`relationship.secondary`](#sqlalchemy.orm.relationship.params.secondary "sqlalchemy.orm.relationship")
    when composing association table relationships, allowing additional attributes
    to be specified on the association table.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Composite “Secondary” Joins](join_conditions.html#composite-secondary-join)
    - a lesser-used pattern which in some cases can enable complex [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") SQL conditions to be used.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`active_history=False` – When `True`, indicates that the “previous” value for
    a many-to-one reference should be loaded when replaced, if not already loaded.
    Normally, history tracking logic for simple many-to-ones only needs to be aware
    of the “new” value in order to perform a flush. This flag is available for applications
    that make use of [`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") which also need to know the “previous”
    value of the attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backref` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reference to a string relationship name, or a [`backref()`](#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") construct, which will be used to automatically generate
    a new [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the related class, which then refers to this one using a bi-directional [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In modern Python, explicit use of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") with [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") should be preferred, as it is more robust in terms
    of mapper configuration as well as more conceptually straightforward. It also
    integrates with new [**PEP 484**](https://peps.python.org/pep-0484/) typing features
    introduced in SQLAlchemy 2.0 which is not possible with dynamically generated
    attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using the legacy ‘backref’ relationship parameter](backref.html#relationships-backref)
    - notes on using [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial),
    presents an overview of bi-directional relationship configuration and behaviors
    using [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`backref()`](#sqlalchemy.orm.backref "sqlalchemy.orm.backref") - allows control
    over [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    configuration when using [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`back_populates` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates the name of a [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the related class that will be synchronized with this one. It is usually expected
    that the [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    on the related class also refer to this one. This allows objects on both sides
    of each [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    to synchronize in-Python state changes and also provides directives to the [unit
    of work](../glossary.html#term-unit-of-work) flush process how changes along these
    relationships should be persisted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial),
    presents an overview of bi-directional relationship configuration and behaviors.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Basic Relationship Patterns](basic_relationships.html#relationship-patterns)
    - includes many examples of [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")
    - legacy form which allows more succinct configuration, but does not support explicit
    typing'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`overlaps` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string name or comma-delimited set of names of other relationships on either
    this mapper, a descendant mapper, or a target mapper with which this relationship
    may write to the same foreign keys upon persistence. The only effect this has
    is to eliminate the warning that this relationship will conflict with another
    upon persistence. This is used for such relationships that are truly capable of
    conflicting with each other on write, but the application will ensure that no
    such conflicts occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[relationship X will copy column Q to column P, which conflicts with relationship(s):
    ‘Y’](../errors.html#error-qzyx) - usage example'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cascade` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A comma-separated list of cascade rules which determines how Session operations
    should be “cascaded” from parent to child. This defaults to `False`, which means
    the default cascade should be used - this default cascade is `"save-update, merge"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The available cascades are `save-update`, `merge`, `expunge`, `delete`, `delete-orphan`,
    and `refresh-expire`. An additional option, `all` indicates shorthand for `"save-update,
    merge, refresh-expire, expunge, delete"`, and is often used as in `"all, delete-orphan"`
    to indicate that related objects should follow along with the parent object in
    all cases, and be deleted when de-associated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Cascades](cascades.html#unitofwork-cascades) - Full detail on each of the
    available cascade options.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cascade_backrefs=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy; this flag is always False.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: “cascade_backrefs” functionality has been removed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`collection_class` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class or callable that returns a new list-holding object. will be used in
    place of a plain list for storing elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Customizing Collection Access](collection_api.html#custom-collections) - Introductory
    documentation and examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`comparator_factory` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class which extends `Comparator` which provides custom SQL clause generation
    for comparison operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    - some detail on redefining comparators at this level.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Operator Customization](mapped_attributes.html#custom-comparators) - Brief
    intro to this feature.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`distinct_target_key=None` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicate if a “subquery” eager load should apply the DISTINCT keyword to the
    innermost SELECT statement. When left as `None`, the DISTINCT keyword will be
    applied in those cases when the target columns do not comprise the full primary
    key of the target table. When set to `True`, the DISTINCT keyword is applied to
    the innermost SELECT unconditionally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It may be desirable to set this flag to False when the DISTINCT is reducing
    performance of the innermost subquery beyond that of what duplicate innermost
    rows may be causing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Relationship Loading Techniques](queryguide/relationships.html) - includes
    an introduction to subquery eager loading.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`doc` – Docstring which will be applied to the resulting descriptor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`foreign_keys` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of columns which are to be used as “foreign key” columns, or columns
    which refer to the value in a remote column, within the context of this [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") object’s [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition. That is, if the [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition of this [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is `a.id == b.a_id`, and the values in `b.a_id`
    are required to be present in `a.id`, then the “foreign key” column of this [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is `b.a_id`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In normal cases, the [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") parameter is **not required.** [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will automatically determine which columns in the
    [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin "sqlalchemy.orm.relationship")
    condition are to be considered “foreign key” columns based on those [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that specify [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), or are otherwise listed as referencing columns
    in a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") construct. [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") is only needed when:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is more than one way to construct a join from the local table to the remote
    table, as there are multiple foreign key references present. Setting `foreign_keys`
    will limit the [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    to consider just those columns specified here as “foreign”.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    being mapped does not actually have [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") or [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") constructs present, often because the
    table was reflected from a database that does not support foreign key reflection
    (MySQL MyISAM).
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") argument is used to construct a non-standard join
    condition, which makes use of columns or expressions that do not normally refer
    to their “parent” column, such as a join condition expressed by a complex comparison
    using a SQL function.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: The [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    construct will raise informative error messages that suggest the use of the [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") parameter when presented with an ambiguous condition.
    In typical cases, if [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    doesn’t raise any exceptions, the [`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") parameter is usually not needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.foreign_keys`](#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Handling Multiple Join Paths](join_conditions.html#relationship-foreign-keys)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`foreign()`](#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign") - allows direct
    annotation of the “foreign” columns within a [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – Optional data dictionary which will be populated into the [`MapperProperty.info`](internals.html#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") attribute of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerjoin=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, joined eager loads will use an inner join to join against related
    tables instead of an outer join. The purpose of this option is generally one of
    performance, as inner joins generally perform better than outer joins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag can be set to `True` when the relationship references an object via
    many-to-one using local foreign keys that are not nullable, or when the reference
    is one-to-one or a collection that is guaranteed to have one or at least one entry.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The option supports the same “nested” and “unnested” options as that of [`joinedload.innerjoin`](queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload"). See that flag for details on nested / unnested behaviors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`joinedload.innerjoin`](queryguide/relationships.html#sqlalchemy.orm.joinedload.params.innerjoin
    "sqlalchemy.orm.joinedload") - the option as specified by loader option, including
    detail on nesting behavior.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[What Kind of Loading to Use ?](queryguide/relationships.html#what-kind-of-loading)
    - Discussion of some details of various loader options.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join_depth` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When non-`None`, an integer value indicating how many levels deep “eager” loaders
    should join on a self-referring or cyclical relationship. The number counts how
    many times the same Mapper shall be present in the loading condition along a particular
    join branch. When left at its default of `None`, eager loaders will stop chaining
    when they encounter a the same target mapper which is already higher up in the
    chain. This option applies both to joined- and subquery- eager loaders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Self-Referential Eager Loading](self_referential.html#self-referential-eager-loading)
    - Introductory documentation and examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`lazy=''select''` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'specifies How the related items should be loaded. Default value is `select`.
    Values include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`select` - items should be loaded lazily when the property is first accessed,
    using a separate SELECT statement, or identity map fetch for simple many-to-one
    references.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`immediate` - items should be loaded as the parents are loaded, using a separate
    SELECT statement, or identity map fetch for simple many-to-one references.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joined` - items should be loaded “eagerly” in the same query as that of the
    parent, using a JOIN or LEFT OUTER JOIN. Whether the join is “outer” or not is
    determined by the [`relationship.innerjoin`](#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") parameter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subquery` - items should be loaded “eagerly” as the parents are loaded, using
    one additional SQL statement, which issues a JOIN to a subquery of the original
    statement, for each collection requested.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectin` - items should be loaded “eagerly” as the parents are loaded, using
    one or more additional SQL statements, which issues a JOIN to the immediate parent
    object, specifying primary key identifiers using an IN clause.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noload` - no loading should occur at any time. The related collection will
    remain empty. The `noload` strategy is not recommended for general use. For a
    general use “never load” approach, see [Write Only Relationships](large_collections.html#write-only-relationship)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise` - lazy loading is disallowed; accessing the attribute, if its value
    were not already loaded via eager loading, will raise an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"). This strategy can be used when objects
    are to be detached from their attached [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") after they are loaded.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise_on_sql` - lazy loading that emits SQL is disallowed; accessing the attribute,
    if its value were not already loaded via eager loading, will raise an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError"), `if the lazy load needs to emit SQL`. If
    the lazy load can pull the related value from the identity map or determine that
    it should be None, the value is loaded. This strategy can be used when objects
    will remain associated with the attached [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), however additional SELECT statements should be blocked.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`write_only` - the attribute will be configured with a special “virtual collection”
    that may receive [`WriteOnlyCollection.add()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.add
    "sqlalchemy.orm.WriteOnlyCollection.add") and [`WriteOnlyCollection.remove()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.remove
    "sqlalchemy.orm.WriteOnlyCollection.remove") commands to add or remove individual
    objects, but will not under any circumstances load or iterate the full set of
    objects from the database directly. Instead, methods such as [`WriteOnlyCollection.select()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.select
    "sqlalchemy.orm.WriteOnlyCollection.select"), [`WriteOnlyCollection.insert()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.insert
    "sqlalchemy.orm.WriteOnlyCollection.insert"), [`WriteOnlyCollection.update()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.update
    "sqlalchemy.orm.WriteOnlyCollection.update") and [`WriteOnlyCollection.delete()`](large_collections.html#sqlalchemy.orm.WriteOnlyCollection.delete
    "sqlalchemy.orm.WriteOnlyCollection.delete") are provided which generate SQL constructs
    that may be used to load and modify rows in bulk. Used for large collections that
    are never appropriate to load at once into memory.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `write_only` loader style is configured automatically when the [`WriteOnlyMapped`](large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") annotation is provided on the left hand side
    within a Declarative mapping. See the section [Write Only Relationships](large_collections.html#write-only-relationship)
    for examples.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Write Only Relationships](large_collections.html#write-only-relationship)
    - in the [ORM Querying Guide](queryguide/index.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`dynamic` - the attribute will return a pre-configured [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object for all read operations, onto which further filtering
    operations can be applied before iterating the results.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dynamic` loader style is configured automatically when the [`DynamicMapped`](large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") annotation is provided on the left hand side within
    a Declarative mapping. See the section [Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    for examples.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The “dynamic” lazy loader strategy is the legacy form of what is now the “write_only”
    strategy described in the section [Write Only Relationships](large_collections.html#write-only-relationship).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    - in the [ORM Querying Guide](queryguide/index.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Write Only Relationships](large_collections.html#write-only-relationship)
    - more generally useful approach for large collections that should not fully load
    into memory'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: True - a synonym for ‘select’
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: False - a synonym for ‘joined’
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: None - a synonym for ‘noload’
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Relationship Loading Techniques](queryguide/relationships.html#orm-queryguide-relationship-loaders)
    - Full documentation on relationship loader configuration in the [ORM Querying
    Guide](queryguide/index.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`load_on_pending=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates loading behavior for transient or pending parent objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When set to `True`, causes the lazy-loader to issue a query for a parent object
    that is not persistent, meaning it has never been flushed. This may take effect
    for a pending object when autoflush is disabled, or for a transient object that
    has been “attached” to a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    but is not part of its pending collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`relationship.load_on_pending`](#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") flag does not improve behavior when the ORM is
    used normally - object references should be constructed at the object level, not
    at the foreign key level, so that they are present in an ordinary way before a
    flush proceeds. This flag is not not intended for general use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.enable_relationship_loading()`](session_api.html#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") - this method establishes
    “load on pending” behavior for the whole object, and also allows loading on objects
    that remain transient or detached.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`order_by` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates the ordering that should be applied when loading these items. [`relationship.order_by`](#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship") is expected to refer to one of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects to which the target class is mapped, or the
    attribute itself bound to the target class which refers to the column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.order_by`](#sqlalchemy.orm.relationship.params.order_by "sqlalchemy.orm.relationship")
    may also be passed as a callable function which is evaluated at mapper initialization
    time, and may be passed as a Python-evaluable string when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`passive_deletes=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates loading behavior during delete operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value of True indicates that unloaded child items should not be loaded during
    a delete operation on the parent. Normally, when a parent item is deleted, all
    child items are loaded so that they can either be marked as deleted, or have their
    foreign key to the parent set to NULL. Marking this flag as True usually implies
    an ON DELETE <CASCADE|SET NULL> rule is in place which will handle updating/deleting
    child rows on the database side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Additionally, setting the flag to the string value ‘all’ will disable the “nulling
    out” of the child foreign keys, when the parent object is deleted and there is
    no delete or delete-orphan cascade enabled. This is typically used when a triggering
    or error raise scenario is in place on the database side. Note that the foreign
    key attributes on in-session child objects will not be changed after a flush occurs
    so this is a very special use-case setting. Additionally, the “nulling out” will
    still occur if the child object is de-associated with the parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using foreign key ON DELETE cascade with ORM relationships](cascades.html#passive-deletes)
    - Introductory documentation and examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`passive_updates=True` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates the persistence behavior to take when a referenced primary key value
    changes in place, indicating that the referencing foreign key columns will also
    need their value changed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When True, it is assumed that `ON UPDATE CASCADE` is configured on the foreign
    key in the database, and that the database will handle propagation of an UPDATE
    from a source column to dependent rows. When False, the SQLAlchemy [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct will attempt to emit its own UPDATE statements
    to modify related targets. However note that SQLAlchemy **cannot** emit an UPDATE
    for more than one level of cascade. Also, setting this flag to False is not compatible
    in the case where the database is in fact enforcing referential integrity, unless
    those constraints are explicitly “deferred”, if the target backend supports it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is highly advised that an application which is employing mutable primary
    keys keeps `passive_updates` set to True, and instead uses the referential integrity
    features of the database itself in order to handle the change efficiently and
    fully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Mutable Primary Keys / Update Cascades](relationship_persistence.html#passive-updates)
    - Introductory documentation and examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mapper.passive_updates` - a similar flag which takes effect for joined-table
    inheritance mappings.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`post_update` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This indicates that the relationship should be handled by a second UPDATE statement
    after an INSERT or before a DELETE. This flag is used to handle saving bi-directional
    dependencies between two individual rows (i.e. each row references the other),
    where it would otherwise be impossible to INSERT or DELETE both rows fully since
    one row exists before the other. Use this flag when a particular mapping arrangement
    will incur two rows that are dependent on each other, such as a table that has
    a one-to-many relationship to a set of child rows, and also has a column that
    references a single child row within that list (i.e. both tables contain a foreign
    key to each other). If a flush operation returns an error that a “cyclical dependency”
    was detected, this is a cue that you might want to use [`relationship.post_update`](#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") to “break” the cycle.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Rows that point to themselves / Mutually Dependent Rows](relationship_persistence.html#post-update)
    - Introductory documentation and examples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`primaryjoin` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A SQL expression that will be used as the primary join of the child object against
    the parent object, or in a many-to-many relationship the join of the parent object
    to the association table. By default, this value is computed based on the foreign
    key relationships of the parent and child tables (or association table).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Specifying Alternate Join Conditions](join_conditions.html#relationship-primaryjoin)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`remote_side` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used for self-referential relationships, indicates the column or list of columns
    that form the “remote side” of the relationship.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Adjacency List Relationships](self_referential.html#self-referential) - in-depth
    explanation of how [`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") is used to configure self-referential relationships.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`remote()`](#sqlalchemy.orm.remote "sqlalchemy.orm.remote") - an annotation
    function that accomplishes the same purpose as [`relationship.remote_side`](#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship"), typically when a custom [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition is used.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query_class` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    subclass that will be used internally by the `AppenderQuery` returned by a “dynamic”
    relationship, that is, a relationship that specifies `lazy="dynamic"` or was otherwise
    constructed using the [`dynamic_loader()`](#sqlalchemy.orm.dynamic_loader "sqlalchemy.orm.dynamic_loader")
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    - Introduction to “dynamic” relationship loaders.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`secondaryjoin` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A SQL expression that will be used as the join of an association table to the
    child object. By default, this value is computed based on the foreign key relationships
    of the association and child tables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.secondaryjoin`](#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship") may also be passed as a callable function which
    is evaluated at mapper initialization time, and may be passed as a Python-evaluable
    string when using Declarative.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When passed as a Python-evaluable string, the argument is interpreted using
    Python’s `eval()` function. **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**. See
    [Evaluation of relationship arguments](extensions/declarative/relationships.html#declarative-relationship-eval)
    for details on declarative evaluation of [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Specifying Alternate Join Conditions](join_conditions.html#relationship-primaryjoin)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`single_parent` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, installs a validator which will prevent objects from being associated
    with more than one parent at a time. This is used for many-to-one or many-to-many
    relationships that should be treated either as one-to-one or one-to-many. Its
    usage is optional, except for [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs which are many-to-one or many-to-many
    and also specify the `delete-orphan` cascade option. The [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct itself will raise an error instructing
    when this option is required.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Cascades](cascades.html#unitofwork-cascades) - includes detail on when the
    [`relationship.single_parent`](#sqlalchemy.orm.relationship.params.single_parent
    "sqlalchemy.orm.relationship") flag may be appropriate.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`uselist` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A boolean that indicates if this property should be loaded as a list or a scalar.
    In most cases, this value is determined automatically by [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") at mapper configuration time. When using explicit
    [`Mapped`](internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped") annotations,
    [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist "sqlalchemy.orm.relationship")
    may be derived from the whether or not the annotation within [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") contains a collection class. Otherwise, [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") may be derived from the type and direction of the
    relationship - one to many forms a list, many to one forms a scalar, many to many
    is a list. If a scalar is desired where normally a list would be present, such
    as a bi-directional one-to-one relationship, use an appropriate [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation or set [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") to False.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist "sqlalchemy.orm.relationship")
    flag is also available on an existing [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct as a read-only attribute, which can be
    used to determine if this [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    deals with collections or scalar attributes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[One To One](basic_relationships.html#relationships-one-to-one) - Introduction
    to the “one to one” relationship pattern, which is typically when an alternate
    setting for [`relationship.uselist`](#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") is involved.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`viewonly=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When set to `True`, the relationship is used only for loading objects, and not
    for any persistence operation. A [`relationship()`](#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which specifies [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") can work with a wider range of SQL operations within
    the [`relationship.primaryjoin`](#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition, including operations that feature the
    use of a variety of comparison operators as well as SQL functions such as [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast"). The [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") flag is also of general use when defining any kind
    of [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    that doesn’t represent the full set of related objects, to prevent modifications
    of the collection from resulting in persistence operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Notes on using the viewonly relationship parameter](join_conditions.html#relationship-viewonly-notes)
    - more details on best practices when using [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sync_backref` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A boolean that enables the events used to synchronize the in-Python attributes
    when this relationship is target of either [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") or [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Defaults to `None`, which indicates that an automatic value should be selected
    based on the value of the [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") flag. When left at its default, changes in state
    will be back-populated only if neither sides of a relationship is viewonly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.17.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: - A relationship that specifies [`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") automatically implies that [`relationship.sync_backref`](#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") is `False`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`relationship.viewonly`](#sqlalchemy.orm.relationship.params.viewonly "sqlalchemy.orm.relationship")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`omit_join` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows manual control over the “selectin” automatic join optimization. Set to
    `False` to disable the “omit join” feature added in SQLAlchemy 1.3; or leave as
    `None` to leave automatic optimization in place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag may only be set to `False`. It is not necessary to set it to `True`
    as the “omit_join” optimization is automatically detected; if it is not detected,
    then the optimization is not supported.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.11: setting `omit_join` to True will now emit a warning
    as this was not the intended use of this flag.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`init` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repr` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__repr__()` method as
    generated by the dataclass process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_factory` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compare` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`kw_only` – Specific to [Declarative Dataclass Mapping](dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When using the [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") parameter, provides specific parameters to be used
    when the new [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The [`relationship.backref`](#sqlalchemy.orm.relationship.params.backref "sqlalchemy.orm.relationship")
    parameter is generally considered to be legacy; for modern applications, using
    explicit [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    constructs linked together using the [`relationship.back_populates`](#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") parameter should be preferred.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using the legacy ‘backref’ relationship parameter](backref.html#relationships-backref)
    - background on backrefs'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Construct a dynamically-loading mapper property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is essentially the same as using the `lazy=''dynamic''` argument with
    [`relationship()`](#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See the section [Dynamic Relationship Loaders](large_collections.html#dynamic-relationship)
    for more details on dynamic loading.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Annotate a portion of a primaryjoin expression with a ‘foreign’ annotation.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)
    for a description of use.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`remote()`](#sqlalchemy.orm.remote "sqlalchemy.orm.remote")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Annotate a portion of a primaryjoin expression with a ‘remote’ annotation.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)
    for a description of use.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Creating Custom Foreign Conditions](join_conditions.html#relationship-custom-foreign)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`foreign()`](#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign")'
  prefs: []
  type: TYPE_NORMAL
