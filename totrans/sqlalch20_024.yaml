- en: Changing Attribute Behavior
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改属性行为
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapped_attributes.html](https://docs.sqlalchemy.org/en/20/orm/mapped_attributes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/mapped_attributes.html](https://docs.sqlalchemy.org/en/20/orm/mapped_attributes.html)
- en: This section will discuss features and techniques used to modify the behavior
    of ORM mapped attributes, including those mapped with [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), and others.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论用于修改ORM映射属性行为的特性和技术，包括那些使用[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")、[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")等映射的属性。
- en: '## Simple Validators'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 简单的验证器'
- en: 'A quick way to add a “validation” routine to an attribute is to use the [`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") decorator. An attribute validator can raise an exception,
    halting the process of mutating the attribute’s value, or can change the given
    value into something different. Validators, like all attribute extensions, are
    only called by normal userland code; they are not issued when the ORM is populating
    the object:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速添加“验证”程序到属性的方法是使用[`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")装饰器。属性验证器可以引发异常，停止突变属性值的过程，或者可以将给定值更改为其他值。像所有属性扩展一样，验证器仅在普通用户代码中调用；在ORM填充对象时，它们不会被调用：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Validators also receive collection append events, when items are added to a
    collection:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当向集合添加项目时，验证器还会接收集合追加事件：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The validation function by default does not get emitted for collection remove
    events, as the typical expectation is that a value being discarded doesn’t require
    validation. However, [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    supports reception of these events by specifying `include_removes=True` to the
    decorator. When this flag is set, the validation function must receive an additional
    boolean argument which if `True` indicates that the operation is a removal:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 验证函数默认不会为集合移除事件发出，因为典型的期望是被丢弃的值不需要验证。然而，[`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates")支持通过向装饰器指定`include_removes=True`来接收这些事件。当设置了此标志时，验证函数必须接收一个额外的布尔参数，如果为`True`，则表示操作是一个移除：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The case where mutually dependent validators are linked via a backref can also
    be tailored, using the `include_backrefs=False` option; this option, when set
    to `False`, prevents a validation function from emitting if the event occurs as
    a result of a backref:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反向引用链接的相互依赖验证器的情况也可以进行定制，使用`include_backrefs=False`选项；当设置为`False`时，此选项会阻止验证函数在由反向引用导致的事件发生时发出：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Above, if we were to assign to `Address.user` as in `some_address.user = some_user`,
    the `validate_address()` function would *not* be emitted, even though an append
    occurs to `some_user.addresses` - the event is caused by a backref.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，如果我们像这样分配到`Address.user`，如`some_address.user = some_user`，那么`validate_address()`函数将*不会*被发出，即使`some_user.addresses`中发生了追加
    - 该事件是由反向引用引起的。
- en: Note that the [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    decorator is a convenience function built on top of attribute events. An application
    that requires more control over configuration of attribute change behavior can
    make use of this system, described at [`AttributeEvents`](events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")装饰器是建立在属性事件之上的方便函数。需要更多控制属性更改行为配置的应用程序可以利用此系统，详见[`AttributeEvents`](events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents")。
- en: '| Object Name | Description |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [validates](#sqlalchemy.orm.validates)(*names, [include_removes, include_backrefs])
    | Decorate a method as a ‘validator’ for one or more named properties. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [validates](#sqlalchemy.orm.validates)(*names, [include_removes, include_backrefs])
    | 将方法装饰为一个或多个命名属性的“验证器”。 |'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Decorate a method as a ‘validator’ for one or more named properties.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法装饰为一个或多个命名属性的“验证器”。
- en: Designates a method as a validator, a method which receives the name of the
    attribute as well as a value to be assigned, or in the case of a collection, the
    value to be added to the collection. The function can then raise validation exceptions
    to halt the process from continuing (where Python’s built-in `ValueError` and
    `AssertionError` exceptions are reasonable choices), or can modify or replace
    the value before proceeding. The function should otherwise return the given value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法指定为验证器，该方法接收属性的名称以及要分配的值，或者在集合的情况下，要添加到集合的值。然后，函数可以引发验证异常以阻止进程继续（在这种情况下，Python的内置`ValueError`和`AssertionError`异常是合理的选择），或者可以在继续之前修改或替换值。否则，该函数应返回给定的值。
- en: Note that a validator for a collection **cannot** issue a load of that collection
    within the validation routine - this usage raises an assertion to avoid recursion
    overflows. This is a reentrant condition which is not supported.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，集合的验证器**不能**在验证过程中发出该集合的加载操作 - 这种用法会引发断言以避免递归溢出。这是一种不支持的可重入条件。
- en: 'Parameters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*names` – list of attribute names to be validated.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*names` – 要验证的属性名称列表。'
- en: '`include_removes` – if True, “remove” events will be sent as well - the validation
    function must accept an additional argument “is_remove” which will be a boolean.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_removes` – 如果为True，则也将发送“remove”事件 - 验证函数必须接受一个额外参数“is_remove”，其值为布尔值。'
- en: '`include_backrefs` –'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_backrefs` –'
- en: defaults to `True`; if `False`, the validation function will not emit if the
    originator is an attribute event related via a backref. This can be used for bi-directional
    [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates") usage where
    only one validator should emit per attribute operation.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为`True`；如果为`False`，则验证函数不会在原始操作者是通过backref相关的属性事件时发出。这可用于双向[`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates")使用，其中每个属性操作只应发出一个验证器。
- en: 'Changed in version 2.0.16: This paramter inadvertently defaulted to `False`
    for releases 2.0.0 through 2.0.15\. Its correct default of `True` is restored
    in 2.0.16.'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0.16开始更改：此参数在版本2.0.0到2.0.15中无意中默认为`False`。在2.0.16中恢复了其正确的默认值为`True`。
- en: See also
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Simple Validators](#simple-validators) - usage examples for [`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates")'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[简单验证器](#simple-validators) - [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")的使用示例'
- en: Using Custom Datatypes at the Core Level
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在核心级别使用自定义数据类型
- en: A non-ORM means of affecting the value of a column in a way that suits converting
    data between how it is represented in Python, vs. how it is represented in the
    database, can be achieved by using a custom datatype that is applied to the mapped
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata. This is more common in the case of some style of encoding / decoding
    that occurs both as data goes to the database and as it is returned; read more
    about this in the Core documentation at [Augmenting Existing Types](../core/custom_types.html#types-typedecorator).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 影响列值的非ORM方式，以适合在Python中的表示方式与在数据库中的表示方式之间转换数据，可以通过使用应用于映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据的自定义数据类型来实现。这在一些编码/解码风格在数据进入数据库和返回时都会发生的情况下更为常见；在Core文档的[扩充现有类型](../core/custom_types.html#types-typedecorator)中了解更多信息。
- en: '## Using Descriptors and Hybrids'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用描述符和混合体'
- en: 'A more comprehensive way to produce modified behavior for an attribute is to
    use [descriptors](../glossary.html#term-descriptors). These are commonly used
    in Python using the `property()` function. The standard SQLAlchemy technique for
    descriptors is to create a plain descriptor, and to have it read/write from a
    mapped attribute with a different name. Below we illustrate this using Python
    2.6-style properties:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 影响属性的修改行为的更全面的方法是使用[描述符](../glossary.html#term-descriptors)。这在Python中通常使用`property()`函数。描述符的标准SQLAlchemy技术是创建一个普通的描述符，并从具有不同名称的映射属性读取/写入。下面我们使用Python
    2.6风格的属性进行说明：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The approach above will work, but there’s more we can add. While our `EmailAddress`
    object will shuttle the value through the `email` descriptor and into the `_email`
    mapped attribute, the class level `EmailAddress.email` attribute does not have
    the usual expression semantics usable with [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"). To provide these, we instead use the [`hybrid`](extensions/hybrid.html#module-sqlalchemy.ext.hybrid
    "sqlalchemy.ext.hybrid") extension as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法可以工作，但我们可以添加更多内容。虽然我们的 `EmailAddress` 对象将通过 `email` 描述符将值传递到 `_email` 映射属性中，但类级别的
    `EmailAddress.email` 属性没有通常的表达式语义可用于 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。为了提供这些，我们可以使用 [`hybrid`](extensions/hybrid.html#module-sqlalchemy.ext.hybrid
    "sqlalchemy.ext.hybrid") 扩展，如下所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `.email` attribute, in addition to providing getter/setter behavior when
    we have an instance of `EmailAddress`, also provides a SQL expression when used
    at the class level, that is, from the `EmailAddress` class directly:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`.email` 属性除了在有 `EmailAddress` 实例时提供 getter/setter 行为外，还在类级别使用时提供 SQL 表达式，即直接从
    `EmailAddress` 类中使用时：'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") also allows us to change the behavior
    of the attribute, including defining separate behaviors when the attribute is
    accessed at the instance level versus at the class/expression level, using the
    [`hybrid_property.expression()`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") modifier. Such as, if we wanted
    to add a host name automatically, we might define two sets of string manipulation
    logic:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 还允许我们更改属性的行为，包括在实例级别与类/表达式级别访问属性时定义不同的行为，使用
    [`hybrid_property.expression()`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") 修饰符。例如，如果我们想要自动添加主机名，我们可以定义两组字符串操作逻辑：'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Above, accessing the `email` property of an instance of `EmailAddress` will
    return the value of the `_email` attribute, removing or adding the hostname `@example.com`
    from the value. When we query against the `email` attribute, a SQL function is
    rendered which produces the same effect:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，访问 `EmailAddress` 实例的 `email` 属性将返回 `_email` 属性的值，从值中移除或添加主机名 `@example.com`。当我们针对
    `email` 属性进行查询时，会呈现一个产生相同效果的 SQL 函数：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Read more about Hybrids at [Hybrid Attributes](extensions/hybrid.html).  ##
    Synonyms'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '阅读更多关于混合属性的信息请参阅 [混合属性](extensions/hybrid.html)。 ## 同义词'
- en: Synonyms are a mapper-level construct that allow any attribute on a class to
    “mirror” another attribute that is mapped.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同义词是一个映射器级别的构造，允许类上的任何属性“镜像”另一个映射的属性。
- en: 'In the most basic sense, the synonym is an easy way to make a certain attribute
    available by an additional name:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从最基本的角度来看，同义词是一种使某个属性通过额外的名称轻松可用的方式：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The above class `MyClass` has two attributes, `.job_status` and `.status` that
    will behave as one attribute, both at the expression level:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 `MyClass` 类具有两个属性，`.job_status` 和 `.status`，它们将作为一个属性在表达式级别上行为一致：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'and at the instance level:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 并在实例级别：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") can be used
    for any kind of mapped attribute that subclasses [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), including mapped columns and relationships,
    as well as synonyms themselves.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") 可用于任何类型的映射属性，包括映射列和关系，以及同义词本身，它们都是
    [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    的子类。'
- en: 'Beyond a simple mirror, [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    can also be made to reference a user-defined [descriptor](../glossary.html#term-descriptor).
    We can supply our `status` synonym with a `@property`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的镜像外，[`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") 还可以被设置为引用用户定义的
    [描述符](../glossary.html#term-descriptor)。我们可以用 `@property` 来提供我们的 `status` 同义词：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When using Declarative, the above pattern can be expressed more succinctly
    using the [`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")
    decorator:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Declarative 时，可以更简洁地使用 [`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for
    "sqlalchemy.orm.synonym_for") 装饰器表达上述模式：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: While the [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") is
    useful for simple mirroring, the use case of augmenting attribute behavior with
    descriptors is better handled in modern usage using the [hybrid attribute](#mapper-hybrids)
    feature, which is more oriented towards Python descriptors. Technically, a [`synonym()`](#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") can do everything that a [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") can do, as it also supports injection
    of custom SQL capabilities, but the hybrid is more straightforward to use in more
    complex situations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") 对于简单的镜像很有用，但是使用描述符增强属性行为的用例更好地使用了现代用法中的
    [混合属性](#mapper-hybrids) 功能，后者更加面向 Python 描述符。 从技术上讲，[`synonym()`](#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") 可以做到与 [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 相同的所有事情，因为它还支持注入自定义 SQL 功能，但是混合属性在更复杂的情况下更容易使用。
- en: '| Object Name | Description |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [synonym](#sqlalchemy.orm.synonym)(name, *, [map_column, descriptor, comparator_factory,
    init, repr, default, default_factory, compare, kw_only, info, doc]) | Denote an
    attribute name as a synonym to a mapped property, in that the attribute will mirror
    the value and expression behavior of another attribute. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [同义词](#sqlalchemy.orm.synonym)(name, *, [map_column, descriptor, comparator_factory,
    init, repr, default, default_factory, compare, kw_only, info, doc]) | 将属性名称标记为映射属性的同义词，即属性将反映另一个属性的值和表达行为。
    |'
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Denote an attribute name as a synonym to a mapped property, in that the attribute
    will mirror the value and expression behavior of another attribute.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性名称标记为映射属性的同义词，即属性将反映另一个属性的值和表达行为。
- en: 'e.g.:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Parameters:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – the name of the existing mapped property. This can refer to the string
    name ORM-mapped attribute configured on the class, including column-bound attributes
    and relationships.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 现有映射属性的名称。这可以是配置在类上的字符串名称 ORM 映射属性，包括列绑定属性和关系。'
- en: '`descriptor` – a Python [descriptor](../glossary.html#term-descriptor) that
    will be used as a getter (and potentially a setter) when this attribute is accessed
    at the instance level.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`descriptor` – 当在实例级别访问此属性时将用作 getter（和可能的 setter）的 Python [descriptor](../glossary.html#term-descriptor)。'
- en: '`map_column` –'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map_column` –'
- en: '**For classical mappings and mappings against an existing Table object only**.
    if `True`, the [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    construct will locate the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object upon the mapped table that would normally be
    associated with the attribute name of this synonym, and produce a new [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") that instead maps this [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to the alternate name given as the “name” argument
    of the synonym; in this way, the usual step of redefining the mapping of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to be under a different name is unnecessary. This
    is usually intended to be used when a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is to be replaced with an attribute that also uses
    a descriptor, that is, in conjunction with the [`synonym.descriptor`](#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym") parameter:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**仅适用于经典映射和映射到现有 Table 对象的情况**。 如果为 `True`，[`synonym()`](#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") 构造将定位到与此同义词的属性名称通常关联的映射表上的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，并生成一个新的 [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")，将此 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 映射到作为“name”参数给定的替代名称；这样，重新定义将 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的映射放在不同名称下的常规步骤是不必要的。这通常用于当 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 要替换为也使用描述符的属性时，即与 [`synonym.descriptor`](#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym") 参数一起使用：'
- en: '[PRE17]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Above, the attribute named `_job_status` is automatically mapped to the `job_status`
    column:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述，名为 `_job_status` 的属性自动映射到 `job_status` 列：
- en: '[PRE18]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When using Declarative, in order to provide a descriptor in conjunction with
    a synonym, use the `sqlalchemy.ext.declarative.synonym_for()` helper. However,
    note that the [hybrid properties](#mapper-hybrids) feature should usually be preferred,
    particularly when redefining attribute behavior.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用Declarative时，为了在同义词中提供一个描述符，请使用`sqlalchemy.ext.declarative.synonym_for()`辅助程序。但是，请注意，通常应优先选择[混合属性](#mapper-hybrids)功能，特别是在重新定义属性行为时。
- en: '`info` – Optional data dictionary which will be populated into the `InspectionAttr.info`
    attribute of this object.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 将填充到此对象的`InspectionAttr.info`属性中的可选数据字典。'
- en: '`comparator_factory` –'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comparator_factory` –'
- en: A subclass of [`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") that will provide custom comparison behavior
    at the SQL expression level.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")的子类，将在SQL表达式级别提供自定义比较行为。
- en: Note
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the use case of providing an attribute which redefines both Python-level
    and SQL-expression level behavior of an attribute, please refer to the Hybrid
    attribute introduced at [Using Descriptors and Hybrids](#mapper-hybrids) for a
    more effective technique.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于提供重新定义属性的Python级别和SQL表达式级别行为的用例，请参考[使用描述符和混合属性](#mapper-hybrids)中介绍的混合属性，以获得更有效的技术。
- en: See also
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synonyms](#synonyms) - Overview of synonyms'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[同义词](#synonyms) - 同义词概述'
- en: '[`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")
    - a helper oriented towards Declarative'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")
    - 面向Declarative的辅助程序'
- en: '[Using Descriptors and Hybrids](#mapper-hybrids) - The Hybrid Attribute extension
    provides an updated approach to augmenting attribute behavior more flexibly than
    can be achieved with synonyms.  ## Operator Customization'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用描述符和混合属性](#mapper-hybrids) - 混合属性扩展提供了一种更新的方法，比使用同义词更灵活地增强属性行为。## 操作符定制'
- en: The “operators” used by the SQLAlchemy ORM and Core expression language are
    fully customizable. For example, the comparison expression `User.name == 'ed'`
    makes usage of an operator built into Python itself called `operator.eq` - the
    actual SQL construct which SQLAlchemy associates with such an operator can be
    modified. New operations can be associated with column expressions as well. The
    operators which take place for column expressions are most directly redefined
    at the type level - see the section [Redefining and Creating New Operators](../core/custom_types.html#types-operators)
    for a description.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM和Core表达式语言使用的“操作符”是完全可定制的。例如，比较表达式`User.name == 'ed'`使用了Python本身内置的名为`operator.eq`的操作符
    - SQLAlchemy将与此类操作符关联的实际SQL构造可以进行修改。新操作也可以与列表达式关联。列表达式发生的操作符最直接在类型级别重新定义 - 请参阅[Redefining
    and Creating New Operators](../core/custom_types.html#types-operators)部分进行描述。
- en: 'ORM level functions like [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), and [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") also provide for operator redefinition at the ORM
    level, by passing a [`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") subclass to the `comparator_factory` argument
    of each function. Customization of operators at this level is a rare use case.
    See the documentation at [`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") for an overview.  ## Simple Validators'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ORM级别的函数，如[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")，[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")和[`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")还提供了在ORM级别重新定义操作符的功能，通过将[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")子类传递给每个函数的`comparator_factory`参数。在这个级别上定制操作符是一个罕见的用例。请参阅[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")的文档以获取概述。## 简单验证器
- en: 'A quick way to add a “validation” routine to an attribute is to use the [`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") decorator. An attribute validator can raise an exception,
    halting the process of mutating the attribute’s value, or can change the given
    value into something different. Validators, like all attribute extensions, are
    only called by normal userland code; they are not issued when the ORM is populating
    the object:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将“验证”程序快速添加到属性的一种方法是使用 [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    装饰器。属性验证器可以引发异常，从而停止变异属性值的过程，或者可以将给定值更改为其他内容。验证器，如所有属性扩展一样，仅在正常用户代码中调用；当ORM正在填充对象时，不会发出它们：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Validators also receive collection append events, when items are added to a
    collection:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目被添加到集合时，验证器也会收到集合追加事件：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The validation function by default does not get emitted for collection remove
    events, as the typical expectation is that a value being discarded doesn’t require
    validation. However, [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    supports reception of these events by specifying `include_removes=True` to the
    decorator. When this flag is set, the validation function must receive an additional
    boolean argument which if `True` indicates that the operation is a removal:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，验证函数不会为集合删除事件发出，因为典型的期望是被丢弃的值不需要验证。但是，[`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") 通过将 `include_removes=True` 指定给装饰器来支持接收这些事件。当设置了此标志时，验证函数必须接收一个额外的布尔参数，如果为
    `True`，则表示该操作是一个删除操作：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The case where mutually dependent validators are linked via a backref can also
    be tailored, using the `include_backrefs=False` option; this option, when set
    to `False`, prevents a validation function from emitting if the event occurs as
    a result of a backref:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `include_backrefs=False` 选项，还可以针对通过反向引用链接的相互依赖验证器的情况进行定制；当设置为 `False` 时，该选项将阻止验证函数在事件发生时由于反向引用而发出：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Above, if we were to assign to `Address.user` as in `some_address.user = some_user`,
    the `validate_address()` function would *not* be emitted, even though an append
    occurs to `some_user.addresses` - the event is caused by a backref.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，如果我们像这样分配给 `Address.user`：`some_address.user = some_user`，即使向 `some_user.addresses`
    追加了一个元素，也不会触发 `validate_address()` 函数 - 事件是由一个反向引用引起的。
- en: Note that the [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    decorator is a convenience function built on top of attribute events. An application
    that requires more control over configuration of attribute change behavior can
    make use of this system, described at [`AttributeEvents`](events.html#sqlalchemy.orm.AttributeEvents
    "sqlalchemy.orm.AttributeEvents").
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates") 装饰器是在属性事件之上构建的一个方便函数。需要更多控制属性更改行为配置的应用程序可以使用此系统，该系统在
    [`AttributeEvents`](events.html#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    中描述。
- en: '| Object Name | Description |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [validates](#sqlalchemy.orm.validates)(*names, [include_removes, include_backrefs])
    | Decorate a method as a ‘validator’ for one or more named properties. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [验证](#sqlalchemy.orm.validates)(*names, [include_removes, include_backrefs])
    | 将方法装饰为一个或多个命名属性的“验证器”。 |'
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Decorate a method as a ‘validator’ for one or more named properties.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法装饰为一个或多个命名属性的“验证器”。
- en: Designates a method as a validator, a method which receives the name of the
    attribute as well as a value to be assigned, or in the case of a collection, the
    value to be added to the collection. The function can then raise validation exceptions
    to halt the process from continuing (where Python’s built-in `ValueError` and
    `AssertionError` exceptions are reasonable choices), or can modify or replace
    the value before proceeding. The function should otherwise return the given value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 指定一个方法作为验证器，该方法接收属性的名称以及要分配的值，或者在集合的情况下，要添加到集合的值。该函数然后可以引发验证异常以阻止继续处理过程（在这种情况下，Python的内置`ValueError`和`AssertionError`异常是合理的选择），或者可以修改或替换值然后继续。该函数否则应返回给定的值。
- en: Note that a validator for a collection **cannot** issue a load of that collection
    within the validation routine - this usage raises an assertion to avoid recursion
    overflows. This is a reentrant condition which is not supported.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，集合的验证器**不能**在验证例程中发出该集合的加载 - 这种用法会引发一个断言以避免递归溢出。这是一个不支持的可重入条件。
- en: 'Parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*names` – list of attribute names to be validated.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*names` – 要验证的属性名称列表。'
- en: '`include_removes` – if True, “remove” events will be sent as well - the validation
    function must accept an additional argument “is_remove” which will be a boolean.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_removes` – 如果为 True，则“remove”事件也将发送 - 验证函数必须接受一个额外的参数“is_remove”，它将是一个布尔值。'
- en: '`include_backrefs` –'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_backrefs` –'
- en: defaults to `True`; if `False`, the validation function will not emit if the
    originator is an attribute event related via a backref. This can be used for bi-directional
    [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates") usage where
    only one validator should emit per attribute operation.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为`True`；如果为`False`，则验证函数在原始生成器是通过 backref 相关的属性事件时不会发出。这可用于双向 [`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") 用法，其中每个属性操作只应发出一个验证器。
- en: 'Changed in version 2.0.16: This paramter inadvertently defaulted to `False`
    for releases 2.0.0 through 2.0.15\. Its correct default of `True` is restored
    in 2.0.16.'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0.16 开始更改：此参数意外地在 2.0.0 至 2.0.15 版本中默认为 `False`。在 2.0.16 版本中恢复了其正确的默认值为`True`。
- en: See also
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Simple Validators](#simple-validators) - usage examples for [`validates()`](#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates")'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[简单验证器](#simple-validators) - [`validates()`](#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    的用法示例'
- en: Using Custom Datatypes at the Core Level
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在核心级别使用自定义数据类型
- en: A non-ORM means of affecting the value of a column in a way that suits converting
    data between how it is represented in Python, vs. how it is represented in the
    database, can be achieved by using a custom datatype that is applied to the mapped
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    metadata. This is more common in the case of some style of encoding / decoding
    that occurs both as data goes to the database and as it is returned; read more
    about this in the Core documentation at [Augmenting Existing Types](../core/custom_types.html#types-typedecorator).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用应用于映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    元数据的自定义数据类型，可以以适合在 Python 中的表示方式与在数据库中的表示方式之间转换数据的方式来影响列的值的非 ORM 方法。这在某些编码/解码样式在数据进入数据库和返回时都发生的情况下更为常见；在核心文档中阅读更多关于此的内容，参见[扩充现有类型](../core/custom_types.html#types-typedecorator)。
- en: '## Using Descriptors and Hybrids'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用描述符和混合类型'
- en: 'A more comprehensive way to produce modified behavior for an attribute is to
    use [descriptors](../glossary.html#term-descriptors). These are commonly used
    in Python using the `property()` function. The standard SQLAlchemy technique for
    descriptors is to create a plain descriptor, and to have it read/write from a
    mapped attribute with a different name. Below we illustrate this using Python
    2.6-style properties:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 产生修改后的属性行为的更全面的方法是使用[描述符](../glossary.html#term-descriptors)。在 Python 中，通常使用
    `property()` 函数来使用这些。描述符的标准 SQLAlchemy 技术是创建一个普通描述符，并从具有不同名称的映射属性读取/写入。下面我们使用
    Python 2.6 风格的属性来说明这一点：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The approach above will work, but there’s more we can add. While our `EmailAddress`
    object will shuttle the value through the `email` descriptor and into the `_email`
    mapped attribute, the class level `EmailAddress.email` attribute does not have
    the usual expression semantics usable with [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"). To provide these, we instead use the [`hybrid`](extensions/hybrid.html#module-sqlalchemy.ext.hybrid
    "sqlalchemy.ext.hybrid") extension as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法可行，但我们还可以添加更多内容。虽然我们的`EmailAddress`对象将值通过`email`描述符传递到`_email`映射属性中，但类级别的`EmailAddress.email`属性不具有通常可用于[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")的表达语义。为了提供这些功能，我们使用 [`hybrid`](extensions/hybrid.html#module-sqlalchemy.ext.hybrid
    "sqlalchemy.ext.hybrid") 扩展，如下所示：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `.email` attribute, in addition to providing getter/setter behavior when
    we have an instance of `EmailAddress`, also provides a SQL expression when used
    at the class level, that is, from the `EmailAddress` class directly:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`.email` 属性除了在我们有`EmailAddress`实例时提供 getter/setter 行为外，在类级别使用时也提供了一个 SQL 表达式，即直接从`EmailAddress`类中：'
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") also allows us to change the behavior
    of the attribute, including defining separate behaviors when the attribute is
    accessed at the instance level versus at the class/expression level, using the
    [`hybrid_property.expression()`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression") modifier. Such as, if we wanted
    to add a host name automatically, we might define two sets of string manipulation
    logic:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")还允许我们更改属性的行为，包括在实例级别与类/表达式级别访问属性时定义不同的行为，使用[`hybrid_property.expression()`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.expression
    "sqlalchemy.ext.hybrid.hybrid_property.expression")修饰符。例如，如果我们想要自动添加主机名，我们可能会定义两组字符串操作逻辑：'
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Above, accessing the `email` property of an instance of `EmailAddress` will
    return the value of the `_email` attribute, removing or adding the hostname `@example.com`
    from the value. When we query against the `email` attribute, a SQL function is
    rendered which produces the same effect:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，访问`EmailAddress`实例的`email`属性将返回`_email`属性的值，从值中删除或添加主机名`@example.com`。当我们针对`email`属性进行查询时，将呈现出一个产生相同效果的SQL函数：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Read more about Hybrids at [Hybrid Attributes](extensions/hybrid.html).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在[混合属性](extensions/hybrid.html)中阅读更多内容。
- en: '## Synonyms'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '## 同义词'
- en: Synonyms are a mapper-level construct that allow any attribute on a class to
    “mirror” another attribute that is mapped.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 同义词是一个映射级别的构造，允许类上的任何属性“镜像”另一个被映射的属性。
- en: 'In the most basic sense, the synonym is an easy way to make a certain attribute
    available by an additional name:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从最基本的意义上讲，同义词是一种简单的方式，通过额外的名称使某个属性可用：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The above class `MyClass` has two attributes, `.job_status` and `.status` that
    will behave as one attribute, both at the expression level:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`MyClass`类有两个属性，`.job_status`和`.status`，它们将作为一个属性行为，无论在表达式级别还是在实例级别：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'and at the instance level:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例级别上：
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") can be used
    for any kind of mapped attribute that subclasses [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), including mapped columns and relationships,
    as well as synonyms themselves.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")可以用于任何一种映射属性，包括映射列和关系，以及同义词本身，这些属性都是[`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")的子类。'
- en: 'Beyond a simple mirror, [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    can also be made to reference a user-defined [descriptor](../glossary.html#term-descriptor).
    We can supply our `status` synonym with a `@property`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的镜像之外，[`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")还可以引用用户定义的[描述符](../glossary.html#term-descriptor)。我们可以用`@property`来提供我们的`status`同义词：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When using Declarative, the above pattern can be expressed more succinctly
    using the [`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")
    decorator:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用声明性时，可以使用[`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")装饰器更简洁地表达上述模式：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: While the [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym") is
    useful for simple mirroring, the use case of augmenting attribute behavior with
    descriptors is better handled in modern usage using the [hybrid attribute](#mapper-hybrids)
    feature, which is more oriented towards Python descriptors. Technically, a [`synonym()`](#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") can do everything that a [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") can do, as it also supports injection
    of custom SQL capabilities, but the hybrid is more straightforward to use in more
    complex situations.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")对于简单的镜像很有用，但是使用描述符增强属性行为的用例更好地在现代使用中使用[混合属性](#mapper-hybrids)特性来处理，后者更加面向Python描述符。从技术上讲，一个[`synonym()`](#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")可以做任何一个[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")能做的事情，因为它也支持注入自定义SQL功能，但是在更复杂的情况下混合属性更容易使用。
- en: '| Object Name | Description |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [synonym](#sqlalchemy.orm.synonym)(name, *, [map_column, descriptor, comparator_factory,
    init, repr, default, default_factory, compare, kw_only, info, doc]) | Denote an
    attribute name as a synonym to a mapped property, in that the attribute will mirror
    the value and expression behavior of another attribute. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [synonym](#sqlalchemy.orm.synonym)(name, *, [map_column, descriptor, comparator_factory,
    init, repr, default, default_factory, compare, kw_only, info, doc]) | 将一个属性名表示为映射属性的同义词，即该属性将反映另一个属性的值和表达式行为。
    |'
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Denote an attribute name as a synonym to a mapped property, in that the attribute
    will mirror the value and expression behavior of another attribute.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个属性名表示为映射属性的同义词，即该属性将反映另一个属性的值和表达式行为。
- en: 'e.g.:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Parameters:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – the name of the existing mapped property. This can refer to the string
    name ORM-mapped attribute configured on the class, including column-bound attributes
    and relationships.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 现有映射属性的名称。这可以引用在类上配置的ORM映射属性的字符串名称，包括列绑定属性和关系。'
- en: '`descriptor` – a Python [descriptor](../glossary.html#term-descriptor) that
    will be used as a getter (and potentially a setter) when this attribute is accessed
    at the instance level.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`descriptor` – 一个Python [描述符](../glossary.html#term-descriptor)，当访问此属性时将用作getter（和可能的setter）。'
- en: '`map_column` –'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map_column` –'
- en: '**For classical mappings and mappings against an existing Table object only**.
    if `True`, the [`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    construct will locate the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object upon the mapped table that would normally be
    associated with the attribute name of this synonym, and produce a new [`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") that instead maps this [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to the alternate name given as the “name” argument
    of the synonym; in this way, the usual step of redefining the mapping of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") to be under a different name is unnecessary. This
    is usually intended to be used when a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is to be replaced with an attribute that also uses
    a descriptor, that is, in conjunction with the [`synonym.descriptor`](#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym") parameter:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**仅适用于传统映射和对现有表对象的映射**。如果为`True`，则[`synonym()`](#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")构造将定位到在此同义词的属性名称通常与该同义词的属性名称相关联的映射表上的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，并生成一个新的[`ColumnProperty`](internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")，该属性将此[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")映射到作为同义词的“name”参数给定的替代名称；通过这种方式，重新定义[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的映射为不同名称的步骤是不必要的。这通常用于当[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")要被替换为也使用描述符的属性时，也就是与[`synonym.descriptor`](#sqlalchemy.orm.synonym.params.descriptor
    "sqlalchemy.orm.synonym")参数结合使用时：'
- en: '[PRE36]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Above, the attribute named `_job_status` is automatically mapped to the `job_status`
    column:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，名为`_job_status`的属性会自动映射到`job_status`列：
- en: '[PRE37]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When using Declarative, in order to provide a descriptor in conjunction with
    a synonym, use the `sqlalchemy.ext.declarative.synonym_for()` helper. However,
    note that the [hybrid properties](#mapper-hybrids) feature should usually be preferred,
    particularly when redefining attribute behavior.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用声明式时，为了与同义词结合使用提供描述符，请使用`sqlalchemy.ext.declarative.synonym_for()`助手。但是，请注意，通常应优选[混合属性](#mapper-hybrids)功能，特别是在重新定义属性行为时。
- en: '`info` – Optional data dictionary which will be populated into the `InspectionAttr.info`
    attribute of this object.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选的数据字典，将填充到此对象的`InspectionAttr.info`属性中。'
- en: '`comparator_factory` –'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comparator_factory` –'
- en: A subclass of [`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") that will provide custom comparison behavior
    at the SQL expression level.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")的子类，将在SQL表达式级别提供自定义比较行为。'
- en: Note
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For the use case of providing an attribute which redefines both Python-level
    and SQL-expression level behavior of an attribute, please refer to the Hybrid
    attribute introduced at [Using Descriptors and Hybrids](#mapper-hybrids) for a
    more effective technique.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于提供重新定义属性的 Python 级别和 SQL 表达式级别行为的用例，请参阅[使用描述符和混合](#mapper-hybrids)中介绍的混合属性，这是一种更有效的技术。
- en: See also
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synonyms](#synonyms) - Overview of synonyms'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[同义词](#synonyms) - 同义词概述'
- en: '[`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")
    - a helper oriented towards Declarative'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`synonym_for()`](mapping_api.html#sqlalchemy.orm.synonym_for "sqlalchemy.orm.synonym_for")
    - 一种面向声明式的辅助工具'
- en: '[Using Descriptors and Hybrids](#mapper-hybrids) - The Hybrid Attribute extension
    provides an updated approach to augmenting attribute behavior more flexibly than
    can be achieved with synonyms.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用描述符和混合](#mapper-hybrids) - 混合属性扩展提供了一种更新的方法，可以更灵活地增强属性行为，比同义词更有效。'
- en: '## Operator Customization'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '## 运算符定制'
- en: The “operators” used by the SQLAlchemy ORM and Core expression language are
    fully customizable. For example, the comparison expression `User.name == 'ed'`
    makes usage of an operator built into Python itself called `operator.eq` - the
    actual SQL construct which SQLAlchemy associates with such an operator can be
    modified. New operations can be associated with column expressions as well. The
    operators which take place for column expressions are most directly redefined
    at the type level - see the section [Redefining and Creating New Operators](../core/custom_types.html#types-operators)
    for a description.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM 和 Core 表达式语言使用的“运算符”是完全可定制的。例如，比较表达式 `User.name == 'ed'` 使用了
    Python 本身内置的名为 `operator.eq` 的运算符 - SQLAlchemy 关联的实际 SQL 构造可以被修改。新的操作也可以与列表达式关联起来。最直接重新定义列表达式的运算符的方法是在类型级别进行
    - 详细信息请参阅[重新定义和创建新的运算符](../core/custom_types.html#types-operators)。
- en: ORM level functions like [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), and [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") also provide for operator redefinition at the ORM
    level, by passing a [`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") subclass to the `comparator_factory` argument
    of each function. Customization of operators at this level is a rare use case.
    See the documentation at [`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") for an overview.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 级别的函数如[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")和[`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")还提供了在 ORM 级别重新定义运算符的功能，方法是将[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")子类传递给每个函数的`comparator_factory`参数。在这个级别定制运算符的情况很少见。详细信息请参阅[`PropComparator`](internals.html#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")的文档概述。
