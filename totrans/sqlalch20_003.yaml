- en: Establishing Connectivity - the Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/engine.html](https://docs.sqlalchemy.org/en/20/tutorial/engine.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Welcome ORM and Core readers alike!**'
  prefs: []
  type: TYPE_NORMAL
- en: Every SQLAlchemy application that connects to a database needs to use an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This short section is for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: The start of any SQLAlchemy application is an object called the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This object acts as a central source of connections
    to a particular database, providing both a factory as well as a holding space
    called a [connection pool](../core/pooling.html) for these database connections.
    The engine is typically a global object created just once for a particular database
    server, and is configured using a URL string which will describe how it should
    connect to the database host or backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this tutorial we will use an in-memory-only SQLite database. This is an
    easy way to test things without needing to have an actual pre-existing database
    set up. The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    is created by using the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The main argument to [`create_engine`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is a string URL, above passed as the string `"sqlite+pysqlite:///:memory:"`.
    This string indicates to the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") three important facts:'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of database are we communicating with? This is the `sqlite` portion
    above, which links in SQLAlchemy to an object known as the [dialect](../glossary.html#term-dialect).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What [DBAPI](../glossary.html#term-DBAPI) are we using? The Python [DBAPI](../glossary.html#term-DBAPI)
    is a third party driver that SQLAlchemy uses to interact with a particular database.
    In this case, we’re using the name `pysqlite`, which in modern Python use is the
    [sqlite3](https://docs.python.org/library/sqlite3.html) standard library interface
    for SQLite. If omitted, SQLAlchemy will use a default [DBAPI](../glossary.html#term-DBAPI)
    for the particular database selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we locate the database? In this case, our URL includes the phrase `/:memory:`,
    which is an indicator to the `sqlite3` module that we will be using an **in-memory-only**
    database. This kind of database is perfect for experimenting as it does not require
    any server nor does it need to create new files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have also specified a parameter [`create_engine.echo`](../core/engines.html#sqlalchemy.create_engine.params.echo
    "sqlalchemy.create_engine"), which will instruct the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to log all of the SQL it emits to a Python logger
    that will write to standard out. This flag is a shorthand way of setting up [Python
    logging more formally](../core/engines.html#dbengine-logging) and is useful for
    experimentation in scripts. Many of the SQL examples will include this SQL logging
    output beneath a `[SQL]` link that when clicked, will reveal the full SQL interaction.
  prefs: []
  type: TYPE_NORMAL
