- en: What’s new in SQLAlchemy 0.5?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLAlchemy 0.5中有什么新功能？
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/migration_05.html](https://docs.sqlalchemy.org/en/20/changelog/migration_05.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/migration_05.html](https://docs.sqlalchemy.org/en/20/changelog/migration_05.html)
- en: About this Document
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本文档
- en: This document describes changes between SQLAlchemy version 0.4, last released
    October 12, 2008, and SQLAlchemy version 0.5, last released January 16, 2010.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档描述了SQLAlchemy版本0.4（最后发布于2008年10月12日）与SQLAlchemy版本0.5（最后发布于2010年1月16日）之间的变化。
- en: 'Document date: August 4, 2009'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 文档日期：2009年8月4日
- en: This guide documents API changes which affect users migrating their applications
    from the 0.4 series of SQLAlchemy to 0.5\. It’s also recommended for those working
    from [Essential SQLAlchemy](https://oreilly.com/catalog/9780596516147/), which
    only covers 0.4 and seems to even have some old 0.3isms in it. Note that SQLAlchemy
    0.5 removes many behaviors which were deprecated throughout the span of the 0.4
    series, and also deprecates more behaviors specific to 0.4.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南记录了影响用户从SQLAlchemy 0.4系列迁移到0.5系列的API更改。对于那些从[Essential SQLAlchemy](https://oreilly.com/catalog/9780596516147/)开始工作的人也是推荐的，该书只涵盖了0.4版本，甚至在其中有一些旧的0.3版本的内容。请注意，SQLAlchemy
    0.5删除了在整个0.4系列中已弃用的许多行为，并且还弃用了更多与0.4特定的行为。
- en: Major Documentation Changes
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要文档更改
- en: Some sections of the documentation have been completely rewritten and can serve
    as an introduction to new ORM features. The `Query` and `Session` objects in particular
    have some distinct differences in API and behavior which fundamentally change
    many of the basic ways things are done, particularly with regards to constructing
    highly customized ORM queries and dealing with stale session state, commits and
    rollbacks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的一些部分已经完全重写，可以作为新ORM功能的介绍。特别是`Query`和`Session`对象在API和行为上有一些明显的区别，这些区别从根本上改变了许多基本操作的方式，特别是构建高度定制的ORM查询和处理过时的会话状态、提交和回滚。
- en: '[ORM Tutorial](https://www.sqlalchemy.org/docs/05/ormtutorial.html)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ORM教程](https://www.sqlalchemy.org/docs/05/ormtutorial.html)'
- en: '[Session Documentation](https://www.sqlalchemy.org/docs/05/session.html)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[会话文档](https://www.sqlalchemy.org/docs/05/session.html)'
- en: Deprecations Source
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用来源
- en: Another source of information is documented within a series of unit tests illustrating
    up to date usages of some common `Query` patterns; this file can be viewed at
    [source:sqlalchemy/trunk/test/orm/test_deprecations.py].
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个信息源记录在一系列单元测试中，展示了一些常见`Query`模式的最新用法；此文件可在[source:sqlalchemy/trunk/test/orm/test_deprecations.py]中查看。
- en: Requirements Changes
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求更改
- en: Python 2.4 or higher is required. The SQLAlchemy 0.4 line is the last version
    with Python 2.3 support.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要Python 2.4或更高版本。SQLAlchemy 0.4系列是最后一个支持Python 2.3的版本。
- en: Object Relational Mapping
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象关系映射
- en: '**Column level expressions within Query.** - as detailed in the [tutorial](https://www.sqlalchemy.org/docs/05/ormtutorial.html),
    `Query` has the capability to create specific SELECT statements, not just those
    against full rows:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Query中的列级表达式。** - 如[教程](https://www.sqlalchemy.org/docs/05/ormtutorial.html)中所述，`Query`具有创建特定SELECT语句的能力，而不仅仅是针对完整行的语句：'
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The tuples returned by any multi-column/entity query are *named*’ tuples:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何多列/实体查询返回的元组都是*命名*元组：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Query` has a `statement` accessor, as well as a `subquery()` method which
    allow `Query` to be used to create more complex combinations:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Query`具有`statement`访问器，以及一个`subquery()`方法，允许`Query`用于创建更复杂的组合：'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Explicit ORM aliases are recommended for aliased joins** - The `aliased()`
    function produces an “alias” of a class, which allows fine-grained control of
    aliases in conjunction with ORM queries. While a table-level alias (i.e. `table.alias()`)
    is still usable, an ORM level alias retains the semantics of the ORM mapped object
    which is significant for inheritance mappings, options, and other scenarios. E.g.:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建议使用显式ORM别名进行别名连接** - `aliased()`函数生成一个类的“别名”，允许在ORM查询中与别名进行细粒度控制。虽然仍然可以使用表级别的别名（即`table.alias()`），但ORM级别的别名保留了ORM映射对象的语义，这对于继承映射、选项和其他场景非常重要。例如：'
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**query.join() greatly enhanced.** - You can now specify the target and ON
    clause for a join in multiple ways. A target class alone can be provided where
    SQLA will attempt to form a join to it via foreign key in the same way as `table.join(someothertable)`.
    A target and an explicit ON condition can be provided, where the ON condition
    can be a `relation()` name, an actual class descriptor, or a SQL expression. Or
    the old way of just a `relation()` name or class descriptor works too. See the
    ORM tutorial which has several examples.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**query.join()功能大大增强。** - 您现在可以通过多种方式指定连接的目标和ON子句。可以仅提供目标类，SQLA将尝试通过相同的外键形式连接到它，就像`table.join(someothertable)`一样。还可以提供目标和显式的ON条件，其中ON条件可以是`relation()`名称，实际类描述符或SQL表达式。或者也可以像以前那样只提供`relation()`名称或类描述符。请参阅ORM教程，其中有几个示例。'
- en: '**Declarative is recommended for applications which don’t require (and don’t
    prefer) abstraction between tables and mappers** - The [/docs/05/reference/ext/declarative.html
    Declarative] module, which is used to combine the expression of `Table`, `mapper()`,
    and user defined class objects together, is highly recommended as it simplifies
    application configuration, ensures the “one mapper per class” pattern, and allows
    the full range of configuration available to distinct `mapper()` calls. Separate
    `mapper()` and `Table` usage is now referred to as “classical SQLAlchemy usage”
    and of course is freely mixable with declarative.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建议使用声明性用于不需要（且不喜欢）表和映射器之间抽象的应用程序** - [/docs/05/reference/ext/declarative.html
    声明性]模块用于将`Table`、`mapper()`和用户定义的类对象的表达结合在一起，强烈建议使用它，因为它简化了应用程序配置，确保了“每个类一个映射器”的模式，并允许对不同的`mapper()`调用提供完整的配置范围。将`mapper()`和`Table`的使用分开现在被称为“经典SQLAlchemy使用方式”，当然可以与声明性混合使用。'
- en: '**The .c. attribute has been removed** from classes (i.e. `MyClass.c.somecolumn`).
    As is the case in 0.4, class- level properties are usable as query elements, i.e.
    `Class.c.propname` is now superseded by `Class.propname`, and the `c` attribute
    continues to remain on `Table` objects where they indicate the namespace of `Column`
    objects present on the table.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已从类中删除了`.c.`属性**（即`MyClass.c.somecolumn`）。与0.4版本一样，类级别的属性可用作查询元素，即`Class.c.propname`现在被`Class.propname`所取代，并且`c`属性仍然保留在`Table`对象上，其中它们指示存在于表上的`Column`对象的命名空间。'
- en: 'To get at the Table for a mapped class (if you didn’t keep it around already):'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获取映射类的表（如果您之前没有保留它）：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Iterate through columns:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迭代遍历列：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Work with a specific column:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用特定列进行操作：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The class-bound descriptors support the full set of Column operators as well
    as the documented relation-oriented operators like `has()`, `any()`, `contains()`,
    etc.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类绑定描述符支持完整的Column运算符集，以及文档化的与关系有关的运算符，如`has()`、`any()`、`contains()`等。
- en: The reason for the hard removal of `.c.` is that in 0.5, class-bound descriptors
    carry potentially different meaning, as well as information regarding class mappings,
    versus plain `Column` objects - and there are use cases where you’d specifically
    want to use one or the other. Generally, using class-bound descriptors invokes
    a set of mapping/polymorphic aware translations, and using table- bound columns
    does not. In 0.4, these translations were applied across the board to all expressions,
    but 0.5 differentiates completely between columns and mapped descriptors, only
    applying translations to the latter. So in many cases, particularly when dealing
    with joined table inheritance configurations as well as when using `query(<columns>)`,
    `Class.propname` and `table.c.colname` are not interchangeable.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除`.c.`的原因是，在0.5版本中，类绑定描述符可能具有不同的含义，以及关于类映射的信息，与普通的`Column`对象不同-并且存在一些情况，您会特别想要使用其中之一。通常，使用类绑定描述符会调用一组映射/多态感知的转换，而使用表绑定列则不会。在0.4版本中，这些转换适用于所有表达式，但是0.5版本完全区分列和映射描述符，仅将转换应用于后者。因此，在许多情况下，特别是在处理连接的表继承配置以及使用`query(<columns>)`时，`Class.propname`和`table.c.colname`不可互换。
- en: For example, `session.query(users.c.id, users.c.name)` is different versus `session.query(User.id,
    User.name)`; in the latter case, the `Query` is aware of the mapper in use and
    further mapper-specific operations like `query.join(<propname>)`, `query.with_parent()`
    etc. may be used, but in the former case cannot. Additionally, in polymorphic
    inheritance scenarios, the class-bound descriptors refer to the columns present
    in the polymorphic selectable in use, not necessarily the table column which directly
    corresponds to the descriptor. For example, a set of classes related by joined-table
    inheritance to the `person` table along the `person_id` column of each table will
    all have their `Class.person_id` attribute mapped to the `person_id` column in
    `person`, and not their subclass table. Version 0.4 would map this behavior onto
    table-bound `Column` objects automatically. In 0.5, this automatic conversion
    has been removed, so that you in fact *can* use table-bound columns as a means
    to override the translations which occur with polymorphic querying; this allows
    `Query` to be able to create optimized selects among joined-table or concrete-table
    inheritance setups, as well as portable subqueries, etc.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`session.query(users.c.id, users.c.name)`与`session.query(User.id, User.name)`是不同的；在后一种情况下，`Query`知道正在使用的映射器，并且可以使用进一步的映射器特定操作，如`query.join(<propname>)`，`query.with_parent()`等，但在前一种情况下不行。此外，在多态继承场景中，类绑定描述符指的是多态可选择使用的列，而不一定是直接对应描述符的表列。例如，一组类通过连接表继承与`person`表相关联，每个表的`person_id`列都将其`Class.person_id`属性映射到`person`中的`person_id`列，而不是其子类表。版本0.4会自动将此行为映射到表绑定的`Column`对象上。在0.5中，已移除了此自动转换，因此实际上*可以*使用表绑定列来覆盖多态查询时发生的转换；这使得`Query`能够在连接表或具体表继承设置中创建优化的选择，以及可移植的子查询等。
- en: '**Session Now Synchronizes Automatically with Transactions.** Session now synchronizes
    against the transaction automatically by default, including autoflush and autoexpire.
    A transaction is present at all times unless disabled using the `autocommit` option.
    When all three flags are set to their default, the Session recovers gracefully
    after rollbacks and it’s very difficult to get stale data into the session. See
    the new Session documentation for details.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话现在与事务自动同步。** 会话现在默认情况下自动与事务同步，包括自动刷新和自动过期。除非使用`autocommit`选项禁用，否则始终存在事务。当所有三个标志都设置为默认值时，会话在回滚后能够优雅地恢复，并且很难将过时数据导入会话中。详细信息请参阅新的会话文档。'
- en: '**Implicit Order By Is Removed**. This will impact ORM users who rely upon
    SA’s “implicit ordering” behavior, which states that all Query objects which don’t
    have an `order_by()` will ORDER BY the “id” or “oid” column of the primary mapped
    table, and all lazy/eagerly loaded collections apply a similar ordering. In 0.5,
    automatic ordering must be explicitly configured on `mapper()` and `relation()`
    objects (if desired), or otherwise when using `Query`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐式排序已移除**。这将影响依赖于SA的“隐式排序”行为的ORM用户，该行为规定所有没有`order_by()`的Query对象将按照主映射表的“id”或“oid”列进行排序，并且所有延迟/急切加载的集合都应用类似的排序。在0.5中，必须显式配置`mapper()`和`relation()`对象上的自动排序（如果需要），或者在使用`Query`时。'
- en: 'To convert an 0.4 mapping to 0.5, such that its ordering behavior will be extremely
    similar to 0.4 or previous, use the `order_by` setting on `mapper()` and `relation()`:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将0.4映射转换为0.5，使其排序行为与0.4或之前的版本极为相似，请在`mapper()`和`relation()`上使用`order_by`设置：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To set ordering on a backref, use the `backref()` function:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在backref上设置排序，请使用`backref()`函数：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using declarative ? To help with the new `order_by` requirement, `order_by`
    and friends can now be set using strings which are evaluated in Python later on
    (this works **only** with declarative, not plain mappers):'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用声明式？为了帮助满足新的`order_by`要求，现在可以使用稍后在Python中评估的字符串来设置`order_by`和相关内容（这仅适用于声明式，而不是普通的映射器）：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It’s generally a good idea to set `order_by` on `relation()s` which load list-based
    collections of items, since that ordering cannot otherwise be affected. Other
    than that, the best practice is to use `Query.order_by()` to control ordering
    of the primary entities being loaded.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常在加载基于列表的项目集合的`relation()`上设置`order_by`是一个好主意，因为否则无法影响排序。除此之外，最佳实践是使用`Query.order_by()`来控制加载的主要实体的排序。
- en: '**Session is now autoflush=True/autoexpire=True/autocommit=False.** - To set
    it up, just call `sessionmaker()` with no arguments. The name `transactional=True`
    is now `autocommit=False`. Flushes occur upon each query issued (disable with
    `autoflush=False`), within each `commit()` (as always), and before each `begin_nested()`
    (so rolling back to the SAVEPOINT is meaningful). All objects are expired after
    each `commit()` and after each `rollback()`. After rollback, pending objects are
    expunged, deleted objects move back to persistent. These defaults work together
    very nicely and there’s really no more need for old techniques like `clear()`
    (which is renamed to `expunge_all()` as well).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Session现在是autoflush=True/autoexpire=True/autocommit=False。** - 要设置它，只需调用`sessionmaker()`而不带任何参数。现在`transactional=True`的名称是`autocommit=False`。刷新发生在每次查询时（可通过`autoflush=False`禁用），在每次`commit()`之前（一如既往），以及在每次`begin_nested()`之前（因此回滚到SAVEPOINT是有意义的）。所有对象在每次`commit()`和每次`rollback()`后都会过期。回滚后，待定对象被清除，删除的对象移回持久状态。这些默认设置非常好地协同工作，实际上不再需要像`clear()`这样的旧技术（也已重命名为`expunge_all()`）。'
- en: 'P.S.: sessions are now reusable after a `rollback()`. Scalar and collection
    attribute changes, adds and deletes are all rolled back.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'P.S.: 在`rollback()`后，会话现在是可重用的。标量和集合属性的更改、添加和删除都会被回滚。'
- en: '**session.add() replaces session.save(), session.update(), session.save_or_update().**
    - the `session.add(someitem)` and `session.add_all([list of items])` methods replace
    `save()`, `update()`, and `save_or_update()`. Those methods will remain deprecated
    throughout 0.5.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**session.add()取代了session.save()、session.update()、session.save_or_update()。**
    - `session.add(someitem)`和`session.add_all([list of items])`方法取代了`save()`、`update()`和`save_or_update()`。这些方法将在整个0.5版本中继续被弃用。'
- en: '**backref configuration made less verbose.** - The `backref()` function now
    uses the `primaryjoin` and `secondaryjoin` arguments of the forwards-facing `relation()`
    when they are not explicitly stated. It’s no longer necessary to specify `primaryjoin`/`secondaryjoin`
    in both directions separately.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**backref配置更简洁。** - `backref()`函数现在在未明确声明时使用前向`relation()`的`primaryjoin`和`secondaryjoin`参数。在两个方向上分别指定`primaryjoin`/`secondaryjoin`不再必要。'
- en: '**Simplified polymorphic options.** - The ORM’s “polymorphic load” behavior
    has been simplified. In 0.4, mapper() had an argument called `polymorphic_fetch`
    which could be configured as `select` or `deferred`. This option is removed; the
    mapper will now just defer any columns which were not present in the SELECT statement.
    The actual SELECT statement used is controlled by the `with_polymorphic` mapper
    argument (which is also in 0.4 and replaces `select_table`), as well as the `with_polymorphic()`
    method on `Query` (also in 0.4).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的多态选项。** - ORM的“多态加载”行为已经简化。在0.4版本中，mapper()有一个名为`polymorphic_fetch`的参数，可以配置为`select`或`deferred`。此选项已被移除；现在映射器将仅推迟未包含在SELECT语句中的任何列。实际使用的SELECT语句由`with_polymorphic`映射器参数控制（在0.4中也有，替代了`select_table`），以及`Query`上的`with_polymorphic()`方法（同样在0.4中）。'
- en: An improvement to the deferred loading of inheriting classes is that the mapper
    now produces the “optimized” version of the SELECT statement in all cases; that
    is, if class B inherits from A, and several attributes only present on class B
    have been expired, the refresh operation will only include B’s table in the SELECT
    statement and will not JOIN to A.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对继承类的延迟加载进行了改进，现在映射器在所有情况下都会生成“优化”版本的SELECT语句；也就是说，如果类B继承自A，并且类B上的几个属性已过期，刷新操作将只包括B的表在SELECT语句中，不会JOIN到A。
- en: The `execute()` method on `Session` converts plain strings into `text()` constructs,
    so that bind parameters may all be specified as “:bindname” without needing to
    call `text()` explicitly. If “raw” SQL is desired here, use `session.connection().execute("raw
    text")`.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Session`上的`execute()`方法将普通字符串转换为`text()`构造，以便所有绑定参数都可以指定为“:bindname”而无需显式调用`text()`。如果需要“原始”SQL，请使用`session.connection().execute("raw
    text")`。'
- en: '`session.Query().iterate_instances()` has been renamed to just `instances()`.
    The old `instances()` method returning a list instead of an iterator no longer
    exists. If you were relying on that behavior, you should use `list(your_query.instances())`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query().iterate_instances()`已重命名为`instances()`。旧的返回列表而不是迭代器的`instances()`方法已不复存在。如果你依赖于该行为，应该使用`list(your_query.instances())`。'
- en: Extending the ORM
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展ORM
- en: 'In 0.5 we’re moving forward with more ways to modify and extend the ORM. Heres
    a summary:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在0.5版本中，我们将继续提供更多修改和扩展ORM的方法。以下是摘要：
- en: '**MapperExtension.** - This is the classic extension class, which remains.
    Methods which should rarely be needed are `create_instance()` and `populate_instance()`.
    To control the initialization of an object when it’s loaded from the database,
    use the `reconstruct_instance()` method, or more easily the `@reconstructor` decorator
    described in the documentation.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MapperExtension.** - 这是经典的扩展类，仍然存在。很少需要的方法是`create_instance()`和`populate_instance()`。要控制从数据库加载对象时的初始化，使用`reconstruct_instance()`方法，或者更容易地使用文档中描述的`@reconstructor`装饰器。'
- en: '**SessionExtension.** - This is an easy to use extension class for session
    events. In particular, it provides `before_flush()`, `after_flush()` and `after_flush_postexec()`
    methods. This usage is recommended over `MapperExtension.before_XXX` in many cases
    since within `before_flush()` you can modify the flush plan of the session freely,
    something which cannot be done from within `MapperExtension`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SessionExtension.** - 这是一个易于使用的会话事件扩展类。特别是，它提供了`before_flush()`、`after_flush()`和`after_flush_postexec()`方法。在许多情况下，推荐使用这种用法，而不是`MapperExtension.before_XXX`，因为在`before_flush()`中，您可以自由修改会话的刷新计划，这是无法从`MapperExtension`中完成的。'
- en: '**AttributeExtension.** - This class is now part of the public API, and allows
    the interception of userland events on attributes, including attribute set and
    delete operations, and collection appends and removes. It also allows the value
    to be set or appended to be modified. The `@validates` decorator, described in
    the documentation, provides a quick way to mark any mapped attributes as being
    “validated” by a particular class method.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AttributeExtension.** - 这个类现在是公共API的一部分，允许拦截属性上的用户事件，包括属性设置和删除操作，以及集合追加和删除。它还允许修改要设置或追加的值。文档中描述的`@validates`装饰器提供了一种快速的方式，将任何映射属性标记为特定类方法“验证”。'
- en: '**Attribute Instrumentation Customization.** - An API is provided for ambitious
    efforts to entirely replace SQLAlchemy’s attribute instrumentation, or just to
    augment it in some cases. This API was produced for the purposes of the Trellis
    toolkit, but is available as a public API. Some examples are provided in the distribution
    in the `/examples/custom_attributes` directory.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Attribute Instrumentation Customization.** - 提供了一个API，用于雄心勃勃地完全替换SQLAlchemy的属性检测，或者仅在某些情况下进行增强。这个API是为Trellis工具包而制作的，但作为公共API可用。在分发的`/examples/custom_attributes`目录中提供了一些示例。'
- en: Schema/Types
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式/类型
- en: '**String with no length no longer generates TEXT, it generates VARCHAR** -
    The `String` type no longer magically converts into a `Text` type when specified
    with no length. This only has an effect when CREATE TABLE is issued, as it will
    issue `VARCHAR` with no length parameter, which is not valid on many (but not
    all) databases. To create a TEXT (or CLOB, i.e. unbounded string) column, use
    the `Text` type.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**String with no length no longer generates TEXT, it generates VARCHAR** -
    当未指定长度时，`String`类型不再神奇地转换为`Text`类型。这只在发出CREATE TABLE时才会生效，因为它将发出没有长度参数的`VARCHAR`，这在许多（但不是所有）数据库上是无效的。要创建TEXT（或CLOB，即无界字符串）列，请使用`Text`类型。'
- en: '**PickleType() with mutable=True requires an __eq__() method** - The `PickleType`
    type needs to compare values when mutable=True. The method of comparing `pickle.dumps()`
    is inefficient and unreliable. If an incoming object does not implement `__eq__()`
    and is also not `None`, the `dumps()` comparison is used but a warning is raised.
    For types which implement `__eq__()` which includes all dictionaries, lists, etc.,
    comparison will use `==` and is now reliable by default.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PickleType() with mutable=True requires an __eq__() method** - 当`PickleType`类型的`mutable=True`时，需要比较值。比较`pickle.dumps()`的方法效率低下且不可靠。如果传入对象没有实现`__eq__()`，并且也不是`None`，则使用`dumps()`进行比较，但会发出警告。对于实现`__eq__()`的类型，包括所有字典、列表等，比较将使用`==`，默认情况下是可靠的。'
- en: '**convert_bind_param() and convert_result_value() methods of TypeEngine/TypeDecorator
    are removed.** - The O’Reilly book unfortunately documented these methods even
    though they were deprecated post 0.3\. For a user-defined type which subclasses
    `TypeEngine`, the `bind_processor()` and `result_processor()` methods should be
    used for bind/result processing. Any user defined type, whether extending `TypeEngine`
    or `TypeDecorator`, which uses the old 0.3 style can be easily adapted to the
    new style using the following adapter:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeEngine/TypeDecorator 的 `convert_bind_param()` 和 `convert_result_value()`
    方法已移除。** - 不幸的是，O’Reilly 书籍在 0.3 之后弃用了这些方法，但仍然对其进行了文档记录。对于一个子类化 `TypeEngine` 的用户定义类型，应该使用
    `bind_processor()` 和 `result_processor()` 方法进行绑定/结果处理。任何用户定义类型，无论是扩展 `TypeEngine`
    还是 `TypeDecorator`，只要使用旧的 0.3 风格，都可以通过以下适配器轻松地调整为新风格：'
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To use the above mixin:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用上述混合项：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `quote` flag on `Column` and `Table` as well as the `quote_schema` flag
    on `Table` now control quoting both positively and negatively. The default is
    `None`, meaning let regular quoting rules take effect. When `True`, quoting is
    forced on. When `False`, quoting is forced off.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Column` 和 `Table` 上的 `quote` 标志以及 `Table` 上的 `quote_schema` 标志现在控制引用方式，包括正面和负面。默认值为
    `None`，表示让常规的引用规则生效。当为 `True` 时，强制引用。当为 `False` 时，强制不引用。'
- en: Column `DEFAULT` value DDL can now be more conveniently specified with `Column(...,
    server_default='val')`, deprecating `Column(..., PassiveDefault('val'))`. `default=`
    is now exclusively for Python-initiated default values, and can coexist with server_default.
    A new `server_default=FetchedValue()` replaces the `PassiveDefault('')` idiom
    for marking columns as subject to influence from external triggers and has no
    DDL side effects.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以更方便地使用 `Column(..., server_default='val')` 指定列 `DEFAULT` 值的 DDL，废弃了 `Column(...,
    PassiveDefault('val'))`。`default=` 现在仅用于 Python 初始化的默认值，并且可以与 `server_default`
    共存。新的 `server_default=FetchedValue()` 取代了标记列受外部触发器影响的 `PassiveDefault('')` 习惯用法，没有
    DDL 的副作用。
- en: SQLite’s `DateTime`, `Time` and `Date` types now **only accept datetime objects,
    not strings** as bind parameter input. If you’d like to create your own “hybrid”
    type which accepts strings and returns results as date objects (from whatever
    format you’d like), create a `TypeDecorator` that builds on `String`. If you only
    want string-based dates, just use `String`.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 的 `DateTime`、`Time` 和 `Date` 类型现在**仅接受 datetime 对象，而不接受字符串**作为绑定参数输入。如果想要创建自己的“混合”类型，它接受字符串并将结果返回为日期对象（可以是任何格式），则创建一个基于
    `String` 的 `TypeDecorator`。如果只想要基于字符串的日期，只需使用 `String`。
- en: 'Additionally, the `DateTime` and `Time` types, when used with SQLite, now represent
    the “microseconds” field of the Python `datetime.datetime` object in the same
    manner as `str(datetime)` - as fractional seconds, not a count of microseconds.
    That is:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，当与 SQLite 一起使用时，`DateTime` 和 `Time` 类型现在以与 `str(datetime)` 相同的方式表示 Python
    `datetime.datetime` 对象的 “微秒” 字段，即作为小数秒，而不是微秒的计数。也就是说：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So if an existing SQLite file-based database intends to be used across 0.4
    and 0.5, you either have to upgrade the datetime columns to store the new format
    (NOTE: please test this, I’m pretty sure its correct):'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，如果现有的基于文件的 SQLite 数据库打算在 0.4 和 0.5 之间使用，您必须将 datetime 列升级为存储新格式（注意：请测试此功能，我相信它是正确的）：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'or, enable “legacy” mode as follows:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，可以按以下方式启用“传统”模式：
- en: '[PRE14]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Connection Pool no longer threadlocal by default
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池默认不再是线程本地的
- en: 0.4 has an unfortunate default setting of “pool_threadlocal=True”, leading to
    surprise behavior when, for example, using multiple Sessions within a single thread.
    This flag is now off in 0.5\. To re-enable 0.4’s behavior, specify `pool_threadlocal=True`
    to `create_engine()`, or alternatively use the “threadlocal” strategy via `strategy="threadlocal"`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 0.4 版本不幸默认设置为 “pool_threadlocal=True”，导致在单个线程中使用多个 Sessions 时出现意外行为。此标志在 0.5
    版本中默认关闭。要重新启用 0.4 版本的行为，请在 `create_engine()` 中指定 `pool_threadlocal=True`，或者通过
    `strategy="threadlocal"` 使用 “threadlocal” 策略。
- en: '*args Accepted, *args No Longer Accepted'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*args 被接受，*args 不再被接受'
- en: The policy with `method(\*args)` vs. `method([args])` is, if the method accepts
    a variable-length set of items which represent a fixed structure, it takes `\*args`.
    If the method accepts a variable-length set of items that are data-driven, it
    takes `[args]`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`method(\*args)` 和 `method([args])` 的策略是，如果方法接受一个表示固定结构的可变长度项集合，则采用 `\*args`。如果方法接受一个数据驱动的可变长度项集合，则采用
    `[args]`。'
- en: 'The various Query.options() functions `eagerload()`, `eagerload_all()`, `lazyload()`,
    `contains_eager()`, `defer()`, `undefer()` all accept variable-length `\*keys`
    as their argument now, which allows a path to be formulated using descriptors,
    ie.:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种 Query.options() 函数 `eagerload()`, `eagerload_all()`, `lazyload()`, `contains_eager()`,
    `defer()`, `undefer()` 现在都接受可变长度的 `\*keys` 作为参数，这允许使用描述符来制定路径，例如：
- en: '[PRE15]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A single array argument is still accepted for backwards compatibility.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了向后兼容性，仍然接受单个数组参数。
- en: 'Similarly, the `Query.join()` and `Query.outerjoin()` methods accept a variable
    length *args, with a single array accepted for backwards compatibility:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，`Query.join()` 和 `Query.outerjoin()` 方法现在接受可变长度的 *args，为了向后兼容性，现在只接受单个数组：
- en: '[PRE16]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: the `in_()` method on columns and similar only accepts a list argument now.
    It no longer accepts `\*args`.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列上的 `in_()` 方法和类似方法现在只接受列表参数。不再接受 `\*args`。
- en: Removed
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已移除
- en: '**entity_name** - This feature was always problematic and rarely used. 0.5’s
    more deeply fleshed out use cases revealed further issues with `entity_name` which
    led to its removal. If different mappings are required for a single class, break
    the class into separate subclasses and map them separately. An example of this
    is at [wiki:UsageRecipes/EntityName]. More information regarding rationale is
    described at https://groups.google.c om/group/sqlalchemy/browse_thread/thread/9e23a0641a88b96d?
    hl=en .'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**entity_name** - 这个特性一直存在问题，很少被使用。0.5 版本更深入地揭示了 `entity_name` 的问题，导致其被移除。如果需要为单个类使用不同的映射，将类拆分为单独的子类并分别映射它们。一个示例在
    [wiki:UsageRecipes/EntityName] 中。有关背景的更多信息请参阅 https://groups.google.c om/group/sqlalchemy/browse_thread/thread/9e23a0641a88b96d?
    hl=en 。'
- en: '**get()/load() cleanup**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**get()/load() 清理**'
- en: The `load()` method has been removed. Its functionality was kind of arbitrary
    and basically copied from Hibernate, where it’s also not a particularly meaningful
    method.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load()` 方法已被移除。它的功能有点随意，基本上是从 Hibernate 复制过来的，在那里也不是一个特别有意义的方法。'
- en: 'To get equivalent functionality:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获得等效功能：
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`Session.get(cls, id)` and `Session.load(cls, id)` have been removed. `Session.get()`
    is redundant vs. `session.query(cls).get(id)`.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Session.get(cls, id)` 和 `Session.load(cls, id)` 已被移除。`Session.get()` 与 `session.query(cls).get(id)`
    是多余的。'
- en: '`MapperExtension.get()` is also removed (as is `MapperExtension.load()`). To
    override the functionality of `Query.get()`, use a subclass:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MapperExtension.get()` 也已被移除（`MapperExtension.load()` 也是）。要覆盖 `Query.get()`
    的功能，使用子类：'
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`sqlalchemy.orm.relation()`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.relation()`'
- en: 'The following deprecated keyword arguments have been removed:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下列已弃用的关键字参数已被移除：
- en: foreignkey, association, private, attributeext, is_backref
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: foreignkey, association, private, attributeext, is_backref
- en: In particular, `attributeext` is replaced with `extension` - the `AttributeExtension`
    class is now in the public API.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特别地，`attributeext` 被替换为 `extension` - `AttributeExtension` 类现在在公共 API 中。
- en: '`session.Query()`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query()`'
- en: 'The following deprecated functions have been removed:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下列已弃用的函数已被移除：
- en: list, scalar, count_by, select_whereclause, get_by, select_by, join_by, selectfirst,
    selectone, select, execute, select_statement, select_text, join_to, join_via,
    selectfirst_by, selectone_by, apply_max, apply_min, apply_avg, apply_sum
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: list, scalar, count_by, select_whereclause, get_by, select_by, join_by, selectfirst,
    selectone, select, execute, select_statement, select_text, join_to, join_via,
    selectfirst_by, selectone_by, apply_max, apply_min, apply_avg, apply_sum
- en: 'Additionally, the `id` keyword argument to `join()`, `outerjoin()`, `add_entity()`
    and `add_column()` has been removed. To target table aliases in `Query` to result
    columns, use the `aliased` construct:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，`join()`、`outerjoin()`、`add_entity()` 和 `add_column()` 的 `id` 关键字参数已被移除。要将
    `Query` 中的表别名定位到结果列，使用 `aliased` 构造：
- en: '[PRE19]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`sqlalchemy.orm.Mapper`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.Mapper`'
- en: instances()
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: instances()
- en: get_session() - this method was not very noticeable, but had the effect of associating
    lazy loads with a particular session even if the parent object was entirely detached,
    when an extension such as `scoped_session()` or the old `SessionContextExt` was
    used. It’s possible that some applications which relied upon this behavior will
    no longer work as expected; but the better programming practice here is to always
    ensure objects are present within sessions if database access from their attributes
    are required.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: get_session() - 这个方法并不是很显著，但会将延迟加载与特定会话关联起来，即使父对象完全分离，当使用 `scoped_session()`
    或旧的 `SessionContextExt` 等扩展时。有些应用程序可能依赖于这种行为，但现在可能不再按预期工作；但更好的编程实践是始终确保对象在会话中存在，如果需要从它们的属性访问数据库。
- en: '`mapper(MyClass, mytable)`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper(MyClass, mytable)`'
- en: Mapped classes no are longer instrumented with a “c” class attribute; e.g. `MyClass.c`
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类不再使用“c”类属性进行仪器化; 例如`MyClass.c`
- en: '`sqlalchemy.orm.collections`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.collections`'
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _prepare_instrumentation别名prepare_instrumentation已被移除。
- en: '`sqlalchemy.orm`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm`'
- en: Removed the `EXT_PASS` alias of `EXT_CONTINUE`.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了`EXT_PASS`别名`EXT_CONTINUE`。
- en: '`sqlalchemy.engine`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.engine`'
- en: The alias from `DefaultDialect.preexecute_sequences` to `.preexecute_pk_sequences`
    has been removed.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`DefaultDialect.preexecute_sequences`到`.preexecute_pk_sequences`的别名已被移除。
- en: The deprecated engine_descriptors() function has been removed.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除了弃用的engine_descriptors()函数。
- en: '`sqlalchemy.ext.activemapper`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.activemapper`'
- en: Module removed.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.ext.assignmapper`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.assignmapper`'
- en: Module removed.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.ext.associationproxy`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.associationproxy`'
- en: Pass-through of keyword args on the proxy’s `.append(item, \**kw)` has been
    removed and is now simply `.append(item)`
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代理的`.append(item, \**kw)`上的关键字参数传递已被移除，现在只是`.append(item)`
- en: '`sqlalchemy.ext.selectresults`, `sqlalchemy.mods.selectresults`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.selectresults`，`sqlalchemy.mods.selectresults`'
- en: Modules removed.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.ext.declarative`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.declarative`'
- en: '`declared_synonym()` removed.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`declared_synonym()`已移除。'
- en: '`sqlalchemy.ext.sessioncontext`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.sessioncontext`'
- en: Module removed.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.log`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.log`'
- en: The `SADeprecationWarning` alias to `sqlalchemy.exc.SADeprecationWarning` has
    been removed.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SADeprecationWarning`别名`sqlalchemy.exc.SADeprecationWarning`已被移除。'
- en: '`sqlalchemy.exc`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.exc`'
- en: '`exc.AssertionError` has been removed and usage replaced by the Python built-in
    of the same name.'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`exc.AssertionError`已移除，使用被Python内置的同名替换。'
- en: '`sqlalchemy.databases.mysql`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.databases.mysql`'
- en: The deprecated `get_version_info` dialect method has been removed.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用的`get_version_info`方言方法已被移除。
- en: Renamed or Moved
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重命名或移动
- en: '`sqlalchemy.exceptions` is now `sqlalchemy.exc`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.exceptions`现在是`sqlalchemy.exc`'
- en: The module may still be imported under the old name until 0.6.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该模块在0.6之前仍可使用旧名称导入。
- en: '`FlushError`, `ConcurrentModificationError`, `UnmappedColumnError` -> sqlalchemy.orm.exc'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushError`，`ConcurrentModificationError`，`UnmappedColumnError` -> sqlalchemy.orm.exc'
- en: These exceptions moved to the orm package. Importing ‘sqlalchemy.orm’ will install
    aliases in sqlalchemy.exc for compatibility until 0.6.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些异常已移至orm包。导入`sqlalchemy.orm`将在0.6之前为兼容性安装sqlalchemy.exc的别名。
- en: '`sqlalchemy.logging` -> `sqlalchemy.log`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.logging` -> `sqlalchemy.log`'
- en: This internal module was renamed. No longer needs to be special cased when packaging
    SA with py2app and similar tools that scan imports.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此内部模块已重命名。在使用py2app等扫描导入的工具打包SA时，不再需要特殊处理。
- en: '`session.Query().iterate_instances()` -> `session.Query().instances()`.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query().iterate_instances()` -> `session.Query().instances()`.'
- en: Deprecated
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已弃用
- en: '`Session.save()`, `Session.update()`, `Session.save_or_update()`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Session.save()`，`Session.update()`，`Session.save_or_update()`'
- en: All three replaced by `Session.add()`
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有三个被`Session.add()`替换
- en: '`sqlalchemy.PassiveDefault`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.PassiveDefault`'
- en: Use `Column(server_default=...)` Translates to sqlalchemy.DefaultClause() under
    the hood.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`Column(server_default=...)`在底层转换为`sqlalchemy.DefaultClause()`。
- en: '`session.Query().iterate_instances()`. It has been renamed to `instances()`.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query().iterate_instances()`。已重命名为`instances()`.'
- en: Major Documentation Changes
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要文档更改
- en: Some sections of the documentation have been completely rewritten and can serve
    as an introduction to new ORM features. The `Query` and `Session` objects in particular
    have some distinct differences in API and behavior which fundamentally change
    many of the basic ways things are done, particularly with regards to constructing
    highly customized ORM queries and dealing with stale session state, commits and
    rollbacks.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的一些部分已被完全重写，可以作为新ORM功能的介绍。特别是`Query`和`Session`对象在API和行为上有一些明显的差异，这些差异从根本上改变了许多基本操作的方式，特别是构建高度定制的ORM查询和处理过时的会话状态、提交和回滚。
- en: '[ORM Tutorial](https://www.sqlalchemy.org/docs/05/ormtutorial.html)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ORM教程](https://www.sqlalchemy.org/docs/05/ormtutorial.html)'
- en: '[Session Documentation](https://www.sqlalchemy.org/docs/05/session.html)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[会话文档](https://www.sqlalchemy.org/docs/05/session.html)'
- en: Deprecations Source
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用来源
- en: Another source of information is documented within a series of unit tests illustrating
    up to date usages of some common `Query` patterns; this file can be viewed at
    [source:sqlalchemy/trunk/test/orm/test_deprecations.py].
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个信息来源在一系列单元测试中记录了一些常见`Query`模式的最新用法；此文件可在[source:sqlalchemy/trunk/test/orm/test_deprecations.py]中查看。
- en: Requirements Changes
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求更改
- en: Python 2.4 or higher is required. The SQLAlchemy 0.4 line is the last version
    with Python 2.3 support.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.4 或更高版本是必需的。SQLAlchemy 0.4 系列是最后一个支持 Python 2.3 的版本。
- en: Object Relational Mapping
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象关系映射
- en: '**Column level expressions within Query.** - as detailed in the [tutorial](https://www.sqlalchemy.org/docs/05/ormtutorial.html),
    `Query` has the capability to create specific SELECT statements, not just those
    against full rows:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Query 中的列级表达式。** - 如 [教程](https://www.sqlalchemy.org/docs/05/ormtutorial.html)
    中详细说明的，`Query` 具有创建特定 SELECT 语句的能力，而不仅仅是针对完整行的语句：'
- en: '[PRE20]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The tuples returned by any multi-column/entity query are *named*’ tuples:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何多列/实体查询返回的元组都是*命名*元组：
- en: '[PRE21]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`Query` has a `statement` accessor, as well as a `subquery()` method which
    allow `Query` to be used to create more complex combinations:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Query` 有一个 `statement` 访问器，以及一个 `subquery()` 方法，允许 `Query` 用于创建更复杂的组合：'
- en: '[PRE22]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Explicit ORM aliases are recommended for aliased joins** - The `aliased()`
    function produces an “alias” of a class, which allows fine-grained control of
    aliases in conjunction with ORM queries. While a table-level alias (i.e. `table.alias()`)
    is still usable, an ORM level alias retains the semantics of the ORM mapped object
    which is significant for inheritance mappings, options, and other scenarios. E.g.:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐使用显式 ORM 别名进行别名连接** - `aliased()` 函数生成一个类的“别名”，允许与 ORM 查询一起对别名进行精细控制。虽然仍然可以使用表级别的别名（即
    `table.alias()`），但 ORM 级别的别名保留了 ORM 映射对象的语义，这对于继承映射、选项和其他场景非常重要。例如：'
- en: '[PRE23]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**query.join() greatly enhanced.** - You can now specify the target and ON
    clause for a join in multiple ways. A target class alone can be provided where
    SQLA will attempt to form a join to it via foreign key in the same way as `table.join(someothertable)`.
    A target and an explicit ON condition can be provided, where the ON condition
    can be a `relation()` name, an actual class descriptor, or a SQL expression. Or
    the old way of just a `relation()` name or class descriptor works too. See the
    ORM tutorial which has several examples.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**query.join() 大大增强。** - 现在可以以多种方式指定连接的目标和 ON 子句。可以仅提供目标类，SQLA 将尝试通过外键以与 `table.join(someothertable)`
    相同的方式与其形成连接。也可以提供目标和显式的 ON 条件，其中 ON 条件可以是 `relation()` 名称、实际类描述符或 SQL 表达式。或者仍然可以使用旧的仅
    `relation()` 名称或类描述符的方式。请参阅 ORM 教程，其中有几个示例。'
- en: '**Declarative is recommended for applications which don’t require (and don’t
    prefer) abstraction between tables and mappers** - The [/docs/05/reference/ext/declarative.html
    Declarative] module, which is used to combine the expression of `Table`, `mapper()`,
    and user defined class objects together, is highly recommended as it simplifies
    application configuration, ensures the “one mapper per class” pattern, and allows
    the full range of configuration available to distinct `mapper()` calls. Separate
    `mapper()` and `Table` usage is now referred to as “classical SQLAlchemy usage”
    and of course is freely mixable with declarative.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐为不需要（也不偏好）表和映射器之间抽象的应用程序使用声明式** - [/docs/05/reference/ext/declarative.html
    声明式] 模块，用于将 `Table`、`mapper()` 和用户定义的类对象的表达式结合在一起，强烈推荐，因为它简化了应用程序配置，确保了“每个类一个映射器”的模式，并允许对不同的
    `mapper()` 调用可用的完整配置范围。现在将单独使用 `mapper()` 和 `Table` 称为“经典 SQLAlchemy 使用”，当然可以与声明式自由混合使用。'
- en: '**The .c. attribute has been removed** from classes (i.e. `MyClass.c.somecolumn`).
    As is the case in 0.4, class- level properties are usable as query elements, i.e.
    `Class.c.propname` is now superseded by `Class.propname`, and the `c` attribute
    continues to remain on `Table` objects where they indicate the namespace of `Column`
    objects present on the table.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已从类中删除 .c. 属性**（即 `MyClass.c.somecolumn`）。与 0.4 版本一样，类级别的属性可用作查询元素，即 `Class.c.propname`
    现在被 `Class.propname` 取代，`c` 属性仍然保留在表对象上，其中它们指示表上存在的 `Column` 对象的命名空间。'
- en: 'To get at the Table for a mapped class (if you didn’t keep it around already):'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获取映射类的表（如果您之前没有保留它）：
- en: '[PRE24]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Iterate through columns:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过列进行迭代：
- en: '[PRE25]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Work with a specific column:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用特定列：
- en: '[PRE26]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The class-bound descriptors support the full set of Column operators as well
    as the documented relation-oriented operators like `has()`, `any()`, `contains()`,
    etc.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类绑定描述符支持完整的列运算符以及文档化的关系导向运算符，如 `has()`、`any()`、`contains()` 等。
- en: The reason for the hard removal of `.c.` is that in 0.5, class-bound descriptors
    carry potentially different meaning, as well as information regarding class mappings,
    versus plain `Column` objects - and there are use cases where you’d specifically
    want to use one or the other. Generally, using class-bound descriptors invokes
    a set of mapping/polymorphic aware translations, and using table- bound columns
    does not. In 0.4, these translations were applied across the board to all expressions,
    but 0.5 differentiates completely between columns and mapped descriptors, only
    applying translations to the latter. So in many cases, particularly when dealing
    with joined table inheritance configurations as well as when using `query(<columns>)`,
    `Class.propname` and `table.c.colname` are not interchangeable.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除`.c.`的原因是在0.5中，类绑定的描述符可能具有不同的含义，以及关于类映射的信息，与普通的`Column`对象不同-并且存在一些情况下，您可能希望明确使用其中之一。通常，使用类绑定的描述符会调用一组映射/多态感知的转换，而使用表绑定的列则不会。在0.4中，这些转换适用于所有表达式，但是0.5完全区分列和映射描述符，仅对后者应用转换。因此，在许多情况下，特别是在处理连接表继承配置以及使用`query(<columns>)`时，`Class.propname`和`table.c.colname`是不可互换的。
- en: For example, `session.query(users.c.id, users.c.name)` is different versus `session.query(User.id,
    User.name)`; in the latter case, the `Query` is aware of the mapper in use and
    further mapper-specific operations like `query.join(<propname>)`, `query.with_parent()`
    etc. may be used, but in the former case cannot. Additionally, in polymorphic
    inheritance scenarios, the class-bound descriptors refer to the columns present
    in the polymorphic selectable in use, not necessarily the table column which directly
    corresponds to the descriptor. For example, a set of classes related by joined-table
    inheritance to the `person` table along the `person_id` column of each table will
    all have their `Class.person_id` attribute mapped to the `person_id` column in
    `person`, and not their subclass table. Version 0.4 would map this behavior onto
    table-bound `Column` objects automatically. In 0.5, this automatic conversion
    has been removed, so that you in fact *can* use table-bound columns as a means
    to override the translations which occur with polymorphic querying; this allows
    `Query` to be able to create optimized selects among joined-table or concrete-table
    inheritance setups, as well as portable subqueries, etc.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`session.query(users.c.id, users.c.name)`与`session.query(User.id, User.name)`是不同的；在后一种情况下，`Query`知道正在使用的映射器，并且可以使用进一步的映射器特定操作，如`query.join(<propname>)`，`query.with_parent()`等，但在前一种情况下则不行。此外，在多态继承场景中，类绑定的描述符指的是多态可选择的列，而不一定是直接对应描述符的表列。例如，一组通过连接表继承到`person`表的类，每个表的`person_id`列都将其`Class.person_id`属性映射到`person`中的`person_id`列，而不是其子类表。版本0.4会自动将此行为映射到表绑定的`Column`对象上。在0.5中，这种自动转换已被移除，因此实际上*可以*使用表绑定的列来覆盖多态查询时发生的转换；这使得`Query`能够在连接表或具体表继承设置中创建优化的选择，以及可移植的子查询等。
- en: '**Session Now Synchronizes Automatically with Transactions.** Session now synchronizes
    against the transaction automatically by default, including autoflush and autoexpire.
    A transaction is present at all times unless disabled using the `autocommit` option.
    When all three flags are set to their default, the Session recovers gracefully
    after rollbacks and it’s very difficult to get stale data into the session. See
    the new Session documentation for details.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话现在与事务自动同步。** 会话现在默认自动与事务同步，包括自动刷新和自动过期。除非使用`autocommit`选项禁用，否则始终存在事务。当所有三个标志都设置为默认值时，会话在回滚后能够优雅地恢复，并且很难将过时数据输入会话。有关详细信息，请参阅新的会话文档。'
- en: '**Implicit Order By Is Removed**. This will impact ORM users who rely upon
    SA’s “implicit ordering” behavior, which states that all Query objects which don’t
    have an `order_by()` will ORDER BY the “id” or “oid” column of the primary mapped
    table, and all lazy/eagerly loaded collections apply a similar ordering. In 0.5,
    automatic ordering must be explicitly configured on `mapper()` and `relation()`
    objects (if desired), or otherwise when using `Query`.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐式排序已移除**。这将影响依赖SA的“隐式排序”行为的ORM用户，该行为规定所有没有`order_by()`的Query对象将按照主映射表的“id”或“oid”列进行排序，并且所有延迟/急切加载的集合都会应用类似的排序。在0.5版本中，必须在`mapper()`和`relation()`对象上明确配置自动排序（如果需要），或者在使用`Query`时进行配置。'
- en: 'To convert an 0.4 mapping to 0.5, such that its ordering behavior will be extremely
    similar to 0.4 or previous, use the `order_by` setting on `mapper()` and `relation()`:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将0.4映射转换为0.5，使其排序行为与0.4或之前的版本极为相似，请在`mapper()`和`relation()`上使用`order_by`设置：
- en: '[PRE27]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To set ordering on a backref, use the `backref()` function:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在`backref`上设置排序，使用`backref()`函数：
- en: '[PRE28]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using declarative ? To help with the new `order_by` requirement, `order_by`
    and friends can now be set using strings which are evaluated in Python later on
    (this works **only** with declarative, not plain mappers):'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用声明式？为了帮助新的`order_by`要求，现在可以使用稍后在Python中评估的字符串来设置`order_by`和相关内容（这仅适用于声明式，而不是普通映射器）：
- en: '[PRE29]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It’s generally a good idea to set `order_by` on `relation()s` which load list-based
    collections of items, since that ordering cannot otherwise be affected. Other
    than that, the best practice is to use `Query.order_by()` to control ordering
    of the primary entities being loaded.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常在加载基于列表的项目集合的`relation()`上设置`order_by`是个好主意，因为否则无法影响排序。除此之外，最佳实践是使用`Query.order_by()`来控制加载的主要实体的排序。
- en: '**Session is now autoflush=True/autoexpire=True/autocommit=False.** - To set
    it up, just call `sessionmaker()` with no arguments. The name `transactional=True`
    is now `autocommit=False`. Flushes occur upon each query issued (disable with
    `autoflush=False`), within each `commit()` (as always), and before each `begin_nested()`
    (so rolling back to the SAVEPOINT is meaningful). All objects are expired after
    each `commit()` and after each `rollback()`. After rollback, pending objects are
    expunged, deleted objects move back to persistent. These defaults work together
    very nicely and there’s really no more need for old techniques like `clear()`
    (which is renamed to `expunge_all()` as well).'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话现在是autoflush=True/autoexpire=True/autocommit=False。** - 要设置它，只需调用`sessionmaker()`而不带参数。现在`transactional=True`的名称是`autocommit=False`。刷新发生在每个查询发出时（使用`autoflush=False`禁用），在每个`commit()`之前（一如既往），以及在每个`begin_nested()`之前（因此回滚到SAVEPOINT是有意义的）。在每个`commit()`和每个`rollback()`之后，所有对象都会过期。回滚后，待处理对象被清除，删除的对象移回持久状态。这些默认设置非常好地配合在一起，实际上不再需要像`clear()`这样的旧技术（也更名为`expunge_all()`）。'
- en: 'P.S.: sessions are now reusable after a `rollback()`. Scalar and collection
    attribute changes, adds and deletes are all rolled back.'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注：在`rollback()`后，会话现在是可重用的。标量和集合属性的更改、添加和删除都会被回滚。
- en: '**session.add() replaces session.save(), session.update(), session.save_or_update().**
    - the `session.add(someitem)` and `session.add_all([list of items])` methods replace
    `save()`, `update()`, and `save_or_update()`. Those methods will remain deprecated
    throughout 0.5.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**session.add()取代session.save()、session.update()、session.save_or_update()。**
    - `session.add(someitem)`和`session.add_all([list of items])`方法取代了`save()`、`update()`和`save_or_update()`。这些方法将在整个0.5版本中继续被弃用。'
- en: '**backref configuration made less verbose.** - The `backref()` function now
    uses the `primaryjoin` and `secondaryjoin` arguments of the forwards-facing `relation()`
    when they are not explicitly stated. It’s no longer necessary to specify `primaryjoin`/`secondaryjoin`
    in both directions separately.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**backref配置更简洁。** - 当前`backref()`函数在未明确说明时，现在使用前向`relation()`的`primaryjoin`和`secondaryjoin`参数。不再需要在两个方向分别指定`primaryjoin`/`secondaryjoin`。'
- en: '**Simplified polymorphic options.** - The ORM’s “polymorphic load” behavior
    has been simplified. In 0.4, mapper() had an argument called `polymorphic_fetch`
    which could be configured as `select` or `deferred`. This option is removed; the
    mapper will now just defer any columns which were not present in the SELECT statement.
    The actual SELECT statement used is controlled by the `with_polymorphic` mapper
    argument (which is also in 0.4 and replaces `select_table`), as well as the `with_polymorphic()`
    method on `Query` (also in 0.4).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化多态选项。** - ORM的“多态加载”行为已经简化。在0.4版本中，`mapper()`有一个名为`polymorphic_fetch`的参数，可以配置为`select`或`deferred`。此选项已被移除；现在映射器将仅推迟未在SELECT语句中出现的任何列。实际使用的SELECT语句由`with_polymorphic`映射器参数控制（在0.4中也有，替换了`select_table`），以及`Query`上的`with_polymorphic()`方法（在0.4中也有）。'
- en: An improvement to the deferred loading of inheriting classes is that the mapper
    now produces the “optimized” version of the SELECT statement in all cases; that
    is, if class B inherits from A, and several attributes only present on class B
    have been expired, the refresh operation will only include B’s table in the SELECT
    statement and will not JOIN to A.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于继承类的延迟加载的改进是，映射器现在在所有情况下都生成“优化”版本的SELECT语句；也就是说，如果类B从A继承，并且在类B上已经过期了几个属性，则刷新操作将仅在SELECT语句中包含B的表，并且不会JOIN到A。
- en: The `execute()` method on `Session` converts plain strings into `text()` constructs,
    so that bind parameters may all be specified as “:bindname” without needing to
    call `text()` explicitly. If “raw” SQL is desired here, use `session.connection().execute("raw
    text")`.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Session` 上的 `execute()` 方法将普通字符串转换为 `text()` 结构，以便可以将绑定参数全部指定为“:bindname”而不需要显式调用
    `text()`。如果需要“原始”SQL，请使用 `session.connection().execute("raw text")`。'
- en: '`session.Query().iterate_instances()` has been renamed to just `instances()`.
    The old `instances()` method returning a list instead of an iterator no longer
    exists. If you were relying on that behavior, you should use `list(your_query.instances())`.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query().iterate_instances()` 已重命名为 `instances()`。旧的 `instances()`
    方法不再返回列表而是返回迭代器。如果您依赖该行为，则应使用 `list(your_query.instances())`。'
- en: Extending the ORM
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展ORM
- en: 'In 0.5 we’re moving forward with more ways to modify and extend the ORM. Heres
    a summary:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在0.5版本中，我们正在以更多的方式修改和扩展ORM。以下是摘要：
- en: '**MapperExtension.** - This is the classic extension class, which remains.
    Methods which should rarely be needed are `create_instance()` and `populate_instance()`.
    To control the initialization of an object when it’s loaded from the database,
    use the `reconstruct_instance()` method, or more easily the `@reconstructor` decorator
    described in the documentation.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MapperExtension.** - 这是经典的扩展类，仍然存在。很少需要的方法是 `create_instance()` 和 `populate_instance()`。要控制从数据库加载对象时的初始化，请使用
    `reconstruct_instance()` 方法，或者更容易地使用文档中描述的 `@reconstructor` 装饰器。'
- en: '**SessionExtension.** - This is an easy to use extension class for session
    events. In particular, it provides `before_flush()`, `after_flush()` and `after_flush_postexec()`
    methods. This usage is recommended over `MapperExtension.before_XXX` in many cases
    since within `before_flush()` you can modify the flush plan of the session freely,
    something which cannot be done from within `MapperExtension`.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SessionExtension.** - 这是一个易于使用的会话事件扩展类。特别是，它提供了 `before_flush()`、`after_flush()`
    和 `after_flush_postexec()` 方法。在许多情况下，推荐使用这种用法而不是 `MapperExtension.before_XXX`，因为在
    `before_flush()` 中，您可以自由地修改会话的刷新计划，而这在 `MapperExtension` 中无法做到。'
- en: '**AttributeExtension.** - This class is now part of the public API, and allows
    the interception of userland events on attributes, including attribute set and
    delete operations, and collection appends and removes. It also allows the value
    to be set or appended to be modified. The `@validates` decorator, described in
    the documentation, provides a quick way to mark any mapped attributes as being
    “validated” by a particular class method.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AttributeExtension.** - 此类现在是公共API的一部分，并允许拦截属性上的用户事件，包括属性设置和删除操作以及集合附加和删除操作。它还允许修改要设置或附加的值。在文档中描述的
    `@validates` 装饰器提供了一种快速的方式，可以将任何映射属性标记为特定类方法“验证”的方法。'
- en: '**Attribute Instrumentation Customization.** - An API is provided for ambitious
    efforts to entirely replace SQLAlchemy’s attribute instrumentation, or just to
    augment it in some cases. This API was produced for the purposes of the Trellis
    toolkit, but is available as a public API. Some examples are provided in the distribution
    in the `/examples/custom_attributes` directory.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性仪器定制。** - 为了完全替换SQLAlchemy的属性仪器，或者仅在某些情况下对其进行增强，提供了一个API。此API是为了Trellis工具包而制作的，但作为公共API提供。在分发目录中的
    `/examples/custom_attributes` 中提供了一些示例。'
- en: Schema/Types
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构/类型
- en: '**String with no length no longer generates TEXT, it generates VARCHAR** -
    The `String` type no longer magically converts into a `Text` type when specified
    with no length. This only has an effect when CREATE TABLE is issued, as it will
    issue `VARCHAR` with no length parameter, which is not valid on many (but not
    all) databases. To create a TEXT (or CLOB, i.e. unbounded string) column, use
    the `Text` type.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有长度的字符串不再生成TEXT，而是生成VARCHAR** - 当未指定长度时，`String` 类型不再神奇地转换为 `Text` 类型。这仅在发出CREATE
    TABLE时才会生效，因为它将发出不带长度参数的 `VARCHAR`，这在许多（但不是所有）数据库上都是无效的。要创建TEXT（或CLOB，即无界限的字符串）列，请使用
    `Text` 类型。'
- en: '**PickleType() with mutable=True requires an __eq__() method** - The `PickleType`
    type needs to compare values when mutable=True. The method of comparing `pickle.dumps()`
    is inefficient and unreliable. If an incoming object does not implement `__eq__()`
    and is also not `None`, the `dumps()` comparison is used but a warning is raised.
    For types which implement `__eq__()` which includes all dictionaries, lists, etc.,
    comparison will use `==` and is now reliable by default.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PickleType() with mutable=True需要一个__eq__()方法** - `PickleType`类型在mutable=True时需要比较值。使用`pickle.dumps()`进行比较的方法效率低下且不可靠。如果传入对象没有实现`__eq__()`并且也不是`None`，则使用`dumps()`比较，但会发出警告。对于实现`__eq__()`的类型，包括所有字典、列表等，比较将使用`==`，现在默认情况下是可靠的。'
- en: '**convert_bind_param() and convert_result_value() methods of TypeEngine/TypeDecorator
    are removed.** - The O’Reilly book unfortunately documented these methods even
    though they were deprecated post 0.3\. For a user-defined type which subclasses
    `TypeEngine`, the `bind_processor()` and `result_processor()` methods should be
    used for bind/result processing. Any user defined type, whether extending `TypeEngine`
    or `TypeDecorator`, which uses the old 0.3 style can be easily adapted to the
    new style using the following adapter:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeEngine/TypeDecorator的convert_bind_param()和convert_result_value()方法已移除。**
    - O’Reilly书籍不幸地记录了这些方法，尽管它们在0.3版本后已被弃用。对于一个继承`TypeEngine`的用户定义类型，应该使用`bind_processor()`和`result_processor()`方法进行绑定/结果处理。任何用户定义的类型，无论是扩展`TypeEngine`还是`TypeDecorator`，只要使用旧的0.3风格，都可以通过以下适配器轻松地适应新风格：'
- en: '[PRE30]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To use the above mixin:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用上述mixin：
- en: '[PRE31]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `quote` flag on `Column` and `Table` as well as the `quote_schema` flag
    on `Table` now control quoting both positively and negatively. The default is
    `None`, meaning let regular quoting rules take effect. When `True`, quoting is
    forced on. When `False`, quoting is forced off.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Column`和`Table`上的`quote`标志以及`Table`上的`quote_schema`标志现在控制引号的正面和负面。默认值为`None`，表示让常规引号规则生效。当为`True`时，强制引号。当为`False`时，强制不引号。'
- en: Column `DEFAULT` value DDL can now be more conveniently specified with `Column(...,
    server_default='val')`, deprecating `Column(..., PassiveDefault('val'))`. `default=`
    is now exclusively for Python-initiated default values, and can coexist with server_default.
    A new `server_default=FetchedValue()` replaces the `PassiveDefault('')` idiom
    for marking columns as subject to influence from external triggers and has no
    DDL side effects.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列`DEFAULT`值DDL现在可以更方便地使用`Column(..., server_default='val')`来指定，废弃了`Column(...,
    PassiveDefault('val'))`。`default=`现在专门用于Python发起的默认值，并且可以与server_default共存。一个新的`server_default=FetchedValue()`取代了`PassiveDefault('')`的习惯用法，用于标记受外部触发器影响的列，并且没有DDL副作用。
- en: SQLite’s `DateTime`, `Time` and `Date` types now **only accept datetime objects,
    not strings** as bind parameter input. If you’d like to create your own “hybrid”
    type which accepts strings and returns results as date objects (from whatever
    format you’d like), create a `TypeDecorator` that builds on `String`. If you only
    want string-based dates, just use `String`.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite的`DateTime`、`Time`和`Date`类型现在**只接受datetime对象，而不是字符串**作为绑定参数输入。如果您想创建自己的“混合”类型，接受字符串并将结果返回为日期对象（以您喜欢的任何格式），请创建一个基于`String`的`TypeDecorator`。如果您只想要基于字符串的日期，只需使用`String`。
- en: 'Additionally, the `DateTime` and `Time` types, when used with SQLite, now represent
    the “microseconds” field of the Python `datetime.datetime` object in the same
    manner as `str(datetime)` - as fractional seconds, not a count of microseconds.
    That is:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，当与SQLite一起使用时，`DateTime`和`Time`类型现在以与`str(datetime)`相同的方式表示Python `datetime.datetime`对象的“微秒”字段
    - 作为分数秒，而不是微秒计数。也就是说：
- en: '[PRE32]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'So if an existing SQLite file-based database intends to be used across 0.4
    and 0.5, you either have to upgrade the datetime columns to store the new format
    (NOTE: please test this, I’m pretty sure its correct):'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，如果现有的基于文件的SQLite数据库打算在0.4和0.5之间使用，您必须将datetime列升级为存储新格式（注意：请测试这一点，我相当确定是正确的）：
- en: '[PRE33]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'or, enable “legacy” mode as follows:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，按如下方式启用“legacy”模式：
- en: '[PRE34]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Connection Pool no longer threadlocal by default
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池默认不再是线程本地的。
- en: 0.4 has an unfortunate default setting of “pool_threadlocal=True”, leading to
    surprise behavior when, for example, using multiple Sessions within a single thread.
    This flag is now off in 0.5\. To re-enable 0.4’s behavior, specify `pool_threadlocal=True`
    to `create_engine()`, or alternatively use the “threadlocal” strategy via `strategy="threadlocal"`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 0.4版本的默认设置“pool_threadlocal=True”导致意外行为，例如在单个线程中使用多个会话时。在0.5中，此标志已关闭。要重新启用0.4的行为，请在`create_engine()`中指定`pool_threadlocal=True`，或者通过`strategy="threadlocal"`使用“threadlocal”策略。
- en: '*args Accepted, *args No Longer Accepted'
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*args 被接受，*args 不再被接受'
- en: The policy with `method(\*args)` vs. `method([args])` is, if the method accepts
    a variable-length set of items which represent a fixed structure, it takes `\*args`.
    If the method accepts a variable-length set of items that are data-driven, it
    takes `[args]`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`method(\*args)` vs. `method([args])` 的策略是，如果方法接受代表固定结构的可变长度项目集合，则使用`\*args`。如果方法接受数据驱动的可变长度项目集合，则使用`[args]`。'
- en: 'The various Query.options() functions `eagerload()`, `eagerload_all()`, `lazyload()`,
    `contains_eager()`, `defer()`, `undefer()` all accept variable-length `\*keys`
    as their argument now, which allows a path to be formulated using descriptors,
    ie.:'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种Query.options()函数`eagerload()`，`eagerload_all()`，`lazyload()`，`contains_eager()`，`defer()`，`undefer()`现在都接受可变长度的`\*keys`作为参数，这允许使用描述符制定路径，例如：
- en: '[PRE35]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A single array argument is still accepted for backwards compatibility.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了向后兼容，仍然接受单个数组参数。
- en: 'Similarly, the `Query.join()` and `Query.outerjoin()` methods accept a variable
    length *args, with a single array accepted for backwards compatibility:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，`Query.join()` 和 `Query.outerjoin()` 方法接受可变长度的*args，向后兼容仍然接受单个数组：
- en: '[PRE36]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: the `in_()` method on columns and similar only accepts a list argument now.
    It no longer accepts `\*args`.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_()` 方法现在只接受列表参数，不再接受`\*args`。'
- en: Removed
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已移除
- en: '**entity_name** - This feature was always problematic and rarely used. 0.5’s
    more deeply fleshed out use cases revealed further issues with `entity_name` which
    led to its removal. If different mappings are required for a single class, break
    the class into separate subclasses and map them separately. An example of this
    is at [wiki:UsageRecipes/EntityName]. More information regarding rationale is
    described at https://groups.google.c om/group/sqlalchemy/browse_thread/thread/9e23a0641a88b96d?
    hl=en .'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**entity_name** - 这个特性一直存在问题，很少被使用。0.5更深入地揭示了`entity_name`存在的问题，因此被移除。如果需要为单个类使用不同的映射，将类拆分为单独的子类并分别映射它们。一个示例在[wiki:UsageRecipes/EntityName]中。有关原因的更多信息请参见https://groups.google.c
    om/group/sqlalchemy/browse_thread/thread/9e23a0641a88b96d? hl=en 。'
- en: '**get()/load() cleanup**'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**get()/load() 清理**'
- en: The `load()` method has been removed. Its functionality was kind of arbitrary
    and basically copied from Hibernate, where it’s also not a particularly meaningful
    method.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load()` 方法已被移除。其功能有点随意，基本上是从Hibernate复制过来的，在那里也不是一个特别有意义的方法。'
- en: 'To get equivalent functionality:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获得等效功能：
- en: '[PRE37]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`Session.get(cls, id)` and `Session.load(cls, id)` have been removed. `Session.get()`
    is redundant vs. `session.query(cls).get(id)`.'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Session.get(cls, id)` 和 `Session.load(cls, id)` 已被移除。`Session.get()` 与 `session.query(cls).get(id)`
    是冗余的。'
- en: '`MapperExtension.get()` is also removed (as is `MapperExtension.load()`). To
    override the functionality of `Query.get()`, use a subclass:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MapperExtension.get()` 也被移除（`MapperExtension.load()`也是）。要重写`Query.get()`的功能，使用一个子类：'
- en: '[PRE38]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`sqlalchemy.orm.relation()`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.relation()`'
- en: 'The following deprecated keyword arguments have been removed:'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下列已弃用的关键字参数已被移除：
- en: foreignkey, association, private, attributeext, is_backref
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键，关联，私有，属性扩展，is_backref
- en: In particular, `attributeext` is replaced with `extension` - the `AttributeExtension`
    class is now in the public API.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特别是，`attributeext` 被替换为 `extension` - `AttributeExtension` 类现在在公共API中。
- en: '`session.Query()`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query()`'
- en: 'The following deprecated functions have been removed:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下列已弃用的函数已被移除：
- en: list, scalar, count_by, select_whereclause, get_by, select_by, join_by, selectfirst,
    selectone, select, execute, select_statement, select_text, join_to, join_via,
    selectfirst_by, selectone_by, apply_max, apply_min, apply_avg, apply_sum
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列表，标量，count_by，select_whereclause，get_by，select_by，join_by，selectfirst，selectone，select，execute，select_statement，select_text，join_to，join_via，selectfirst_by，selectone_by，apply_max，apply_min，apply_avg，apply_sum
- en: 'Additionally, the `id` keyword argument to `join()`, `outerjoin()`, `add_entity()`
    and `add_column()` has been removed. To target table aliases in `Query` to result
    columns, use the `aliased` construct:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，已移除了`join()`、`outerjoin()`、`add_entity()`和`add_column()`中的`id`关键字参数。要将`Query`中的目标表别名指向结果列，请使用`aliased`构造：
- en: '[PRE39]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`sqlalchemy.orm.Mapper`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.Mapper`'
- en: instances()
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: instances()
- en: get_session() - this method was not very noticeable, but had the effect of associating
    lazy loads with a particular session even if the parent object was entirely detached,
    when an extension such as `scoped_session()` or the old `SessionContextExt` was
    used. It’s possible that some applications which relied upon this behavior will
    no longer work as expected; but the better programming practice here is to always
    ensure objects are present within sessions if database access from their attributes
    are required.
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: get_session() - 此方法可能不太显著，但其效果是将延迟加载与特定会话关联，即使父对象完全分离，当使用`scoped_session()`或旧的`SessionContextExt`等扩展时。一些依赖于此行为的应用程序可能不再按预期工作；但���好的编程实践是始终确保对象存在于会话中，如果需要从其属性访问数据库。
- en: '`mapper(MyClass, mytable)`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper(MyClass, mytable)`'
- en: Mapped classes no are longer instrumented with a “c” class attribute; e.g. `MyClass.c`
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类不再使用“c”类属性进行检测；例如`MyClass.c`
- en: '`sqlalchemy.orm.collections`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.collections`'
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`_prepare_instrumentation`别名已移除。'
- en: '`sqlalchemy.orm`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm`'
- en: Removed the `EXT_PASS` alias of `EXT_CONTINUE`.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除`EXT_PASS`别名的`EXT_CONTINUE`。
- en: '`sqlalchemy.engine`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.engine`'
- en: The alias from `DefaultDialect.preexecute_sequences` to `.preexecute_pk_sequences`
    has been removed.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`DefaultDialect.preexecute_sequences`到`.preexecute_pk_sequences`的别名已移除。
- en: The deprecated engine_descriptors() function has been removed.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除不推荐使用的`engine_descriptors()`函数。
- en: '`sqlalchemy.ext.activemapper`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.activemapper`'
- en: Module removed.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.ext.assignmapper`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.assignmapper`'
- en: Module removed.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.ext.associationproxy`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.associationproxy`'
- en: Pass-through of keyword args on the proxy’s `.append(item, \**kw)` has been
    removed and is now simply `.append(item)`
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在代理的`.append(item, \**kw)`上的关键字参数传递已移除，现在简单地是`.append(item)`
- en: '`sqlalchemy.ext.selectresults`, `sqlalchemy.mods.selectresults`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.selectresults`、`sqlalchemy.mods.selectresults`'
- en: Modules removed.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.ext.declarative`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.declarative`'
- en: '`declared_synonym()` removed.'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`declared_synonym()`已移除。'
- en: '`sqlalchemy.ext.sessioncontext`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.sessioncontext`'
- en: Module removed.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模块已移除。
- en: '`sqlalchemy.log`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.log`'
- en: The `SADeprecationWarning` alias to `sqlalchemy.exc.SADeprecationWarning` has
    been removed.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SADeprecationWarning`别名到`sqlalchemy.exc.SADeprecationWarning`的移除。'
- en: '`sqlalchemy.exc`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.exc`'
- en: '`exc.AssertionError` has been removed and usage replaced by the Python built-in
    of the same name.'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`exc.AssertionError`已移除，使用替代名称相同的Python内置函数。'
- en: '`sqlalchemy.databases.mysql`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.databases.mysql`'
- en: The deprecated `get_version_info` dialect method has been removed.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除不推荐使用的`get_version_info`方言方法。
- en: Renamed or Moved
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已更名或移动
- en: '`sqlalchemy.exceptions` is now `sqlalchemy.exc`'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.exceptions`现在是`sqlalchemy.exc`'
- en: The module may still be imported under the old name until 0.6.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该模块仍可在0.6版本之前使用旧名称导入。
- en: '`FlushError`, `ConcurrentModificationError`, `UnmappedColumnError` -> sqlalchemy.orm.exc'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushError`、`ConcurrentModificationError`、`UnmappedColumnError` -> sqlalchemy.orm.exc'
- en: These exceptions moved to the orm package. Importing ‘sqlalchemy.orm’ will install
    aliases in sqlalchemy.exc for compatibility until 0.6.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些异常已移至orm包。导入‘sqlalchemy.orm’将在0.6版本之前为兼容性安装sqlalchemy.exc的别名。
- en: '`sqlalchemy.logging` -> `sqlalchemy.log`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.logging` -> `sqlalchemy.log`'
- en: This internal module was renamed. No longer needs to be special cased when packaging
    SA with py2app and similar tools that scan imports.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此内部模块已更名。在打包SA与py2app等扫描导入工具时不再需要特殊处理。
- en: '`session.Query().iterate_instances()` -> `session.Query().instances()`.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query().iterate_instances()` -> `session.Query().instances()`.'
- en: Deprecated
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已弃用
- en: '`Session.save()`, `Session.update()`, `Session.save_or_update()`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Session.save()`、`Session.update()`、`Session.save_or_update()`'
- en: All three replaced by `Session.add()`
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以上三个被`Session.add()`替代
- en: '`sqlalchemy.PassiveDefault`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlalchemy.PassiveDefault`'
- en: Use `Column(server_default=...)` Translates to sqlalchemy.DefaultClause() under
    the hood.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`Column(server_default=...)`在底层转换为sqlalchemy.DefaultClause()。
- en: '`session.Query().iterate_instances()`. It has been renamed to `instances()`.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.Query().iterate_instances()`。已更名为`instances()`.'
