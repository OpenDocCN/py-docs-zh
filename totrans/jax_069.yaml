- en: Omnistaging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全面暂存
- en: 原文：[`jax.readthedocs.io/en/latest/jep/4410-omnistaging.html`](https://jax.readthedocs.io/en/latest/jep/4410-omnistaging.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jep/4410-omnistaging.html`](https://jax.readthedocs.io/en/latest/jep/4410-omnistaging.html)
- en: '*mattjj@* *Sept 25 2020*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*mattjj@* *Sept 25 2020*'
- en: This is more of an upgrade guide than a design doc.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这更像是升级指南而不是设计文档。
- en: Contents
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: tl;dr
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简而言之
- en: What is “omnistaging” and why is it useful?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “全面暂存”是什么以及其有何用处？
- en: What issues can arise when omnistaging is switched on?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开启全面暂存可能导致哪些问题？
- en: Using `jax.numpy` for shape computations
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `jax.numpy` 进行形状计算
- en: Side-effects
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副作用
- en: Small numerical differences based on XLA optimizations
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 XLA 优化的小数值差异
- en: Dependence on JAX internal APIs that changed
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于已更改的 JAX 内部 API
- en: Triggering XLA compile time bugs
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发 XLA 编译时错误
- en: tl;dr
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简而言之
- en: What’s going on?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: A change to JAX’s tracing infrastructure called “omnistaging” ([google/jax#3370](https://github.com/google/jax/pull/3370))
    was switched on in jax==0.2.0\. This change improves memory performance, trace
    execution time, and simplifies jax internals, but may cause some existing code
    to break. Breakage is usually a result of buggy code, so long-term it’s best to
    fix the bugs, but omnistaging can also be disabled as a temporary workaround.
    And we’re happy to help you with fixes!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的跟踪基础设施发生的名为“全面暂存”（[google/jax#3370](https://github.com/google/jax/pull/3370)）在
    jax==0.2.0 中启用。此更改改善了内存性能、跟踪执行时间并简化了 jax 内部，但可能导致某些现有代码出现问题。通常情况下，问题是由于有 bug 的代码引起的，因此从长远来看最好修复这些
    bug，但全面暂存也可以作为临时解决方法禁用。我们乐意帮助您进行修复！
- en: How do I know if omnistaging broke my code?
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何知道全面暂存破坏了我的代码？
- en: The easiest way to tell if omnistaging is responsible is to disable omnistaging
    and see if the issues go away. See the What issues can arise when omnistaging
    is switched on? section below.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 判断全面暂存是否负责的最简单方法是禁用全面暂存并查看问题是否消失。请参阅下面的“开启全面暂存可能导致哪些问题？”部分。
- en: How can I disable omnistaging for now?
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何暂时禁用全面暂存？
- en: '*Note: this applies to JAX versions 0.2.0 through 0.2.11; omnistaging cannot
    be disabled in JAX versions 0.2.12 and higher*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：这适用于 JAX 版本 0.2.0 到 0.2.11；在 JAX 版本 0.2.12 及更高版本中无法禁用全面暂存*'
- en: It is temporarily possible to disable omnistaging by
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时可以通过以下方式禁用全面暂存
- en: setting the shell environment variable `JAX_OMNISTAGING` to something falsey;
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 shell 环境变量 `JAX_OMNISTAGING` 设置为 falsey；
- en: setting the boolean flag `jax_omnistaging` to something falsey if your code
    parses flags with absl;
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的代码使用 absl 解析标志，则将布尔标志 `jax_omnistaging` 设置为 falsey；
- en: 'using this statement near the top of your main file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主文件顶部附近使用此语句：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How do I fix bugs exposed by omnistaging?
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何修复全面暂存暴露的错误？
- en: By far the most common issue with omnistaging is using `jax.numpy` to compute
    shape values or other trace-time constants. See the code block below for a quick
    example, and for full details along with other issues see the section What issues
    can arise when omnistaging is switched on?.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 全面暂存最常见的问题远远超过了使用 `jax.numpy` 计算形状值或其他跟踪时间常量。请参阅下面的代码块，快速了解示例，并详细了解其他问题，请参阅“开启全面暂存可能导致哪些问题？”部分。
- en: 'Instead of this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在改为：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'do this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请执行以下操作：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Instead of thinking of `jax.numpy` as a drop-in replacement for `numpy`, it’s
    now better to think of using `jax.numpy` operations only when you want to perform
    a computation on an accelerator (like your GPU).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不再将 `jax.numpy` 视为 `numpy` 的可替代品，现在最好仅在需要在加速器（如 GPU）上执行计算时才考虑使用 `jax.numpy`
    操作。
- en: What is “omnistaging” and why is it useful?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “全面暂存”是什么以及其有何用处？
- en: Omnistaging is the name for a JAX core upgrade aimed at staging out more computation
    from op-by-op Python to XLA, and avoiding any “trace-time constant folding” in
    `jit`, `pmap`, and control flow primitives. As a result, omnistaging improves
    JAX’s memory performance (sometimes dramatically) both by reducing fragmentation
    during tracing and by producing fewer large compile-time constants for XLA. It
    can also improve tracing performance by eliminating op-by-op execution at tracing
    time. Further, omnistaging simplifies JAX core internals, fixing many outstanding
    bugs and setting the stage for important upcoming features.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 全面暂存是 JAX 核心升级的名称，旨在从逐操作的 Python 到 XLA 分阶段进行计算，并避免在 `jit`、`pmap` 和控制流原语中进行“跟踪时间常量折叠”。因此，全面暂存通过减少跟踪过程中的碎片化和生成更少的
    XLA 编译时常量（有时会显著降低）来改善 JAX 的内存性能。它还可以通过在跟踪时间消除逐操作执行来改善跟踪性能。此外，全面暂存简化了 JAX 核心内部结构，修复了许多未解决的
    bug，并为重要的即将推出的功能铺平了道路。
- en: The name “omnistaging” means staging out everything possible.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 名称“全面暂存”意味着尽可能分阶段输出所有内容。
- en: Toy example
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 玩具示例
- en: JAX transformations like `jit` and `pmap` stage out computations to XLA. That
    is, we apply them to functions comprising multiple primitive operations so that
    rather being executed one at a time from Python the operations are all part of
    one end-to-end optimized XLA computation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 像`jit`和`pmap`这样的JAX变换将计算分阶段到XLA。也就是说，我们将它们应用于由多个原始操作组成的函数，使得这些操作不再从Python中逐个执行，而是作为一个端到端优化的XLA计算的一部分。
- en: 'But exactly which operations get staged out? Until omnistaging, JAX staged
    out computation based on data dependence only. Here’s an example function, followed
    by the XLA HLO program it stages out *before* the omnistaging change:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但确切地说哪些操作被分阶段了？在全阶段之前，JAX仅基于数据依赖性分阶段计算。这里有一个示例函数，后面是它在全阶段更改*之前*分阶段的XLA HLO程序：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the `add` operation is not staged out. Instead, we only see a multiply.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`add`操作没有被分阶段。相反，我们只看到一个乘法。
- en: 'Here’s the HLO generated from this function *after* the omnistaging change:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从这个函数生成的HLO，在全阶段更改*之后*：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Slightly less toy example
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 稍微不那么玩具的示例
- en: 'Here’s a less toy example which can arise in practice when we want to create
    boolean masks:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是在实践中可能出现的一个不那么玩具的示例，当我们想要创建布尔掩码时：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Before* omnistaging:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*在*全阶段之前：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `select` operation is staged out, but the operations for constructing the
    constant `mask` are not. Rather than being staged out, the operations that construct
    `mask` are executed op-by-op at Python tracing time, and XLA only sees a compile
    time constant `constant.1` representing the value of `mask`. That’s unfortunate,
    because if we had staged out the operations for constructing `mask`, XLA could
    have fused them into the `select` and avoided materializing the result at all.
    As a result we end up wasting memory with a potentially-large constant, wasting
    time dispatching multiple un-fused op-by-op XLA computations, and potentially
    even fragmenting memory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`操作被分阶段了，但用于构建常量`mask`的操作却没有。而不是被分阶段，构建`mask`的操作在Python追踪时逐个操作地执行，并且XLA只看到一个编译时常量`constant.1`，表示`mask`的值。这是不幸的，因为如果我们已经分阶段了构建`mask`的操作，XLA可以将它们融合到`select`中，并避免完全实现结果。因此，我们最终会浪费内存，因为一个可能很大的常量，浪费时间分派多个未融合的逐个操作的XLA计算，甚至可能会导致内存碎片化。'
- en: (The `broadcast` that corresponds to the construction of the zeros array for
    `jnp.zeros_like(x)` is staged out because JAX is lazy about very simple expressions
    from [google/jax#1668](https://github.com/google/jax/pull/1668). After omnistaging,
    we can remove that lazy sublanguage and simplify JAX internals.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: （与为`jnp.zeros_like(x)`构建零数组的广播相对应的操作被分阶段，因为JAX对来自[google/jax#1668](https://github.com/google/jax/pull/1668)的非常简单表达式很懒惰。在全阶段之后，我们可以去掉那个懒惰的子语言，并简化JAX内部。）
- en: The reason the creation of `mask` is not staged out is that, before omnistaging,
    `jit` operates based on data dependence. That is, `jit` stages out only those
    operations in a function that have a data dependence on an argument. Control flow
    primitives and `pmap` behave similarly. In the case of `select_tril`, the operations
    to construct the constant `mask` do not have a data dependence on the argument
    x, so they are not staged out; only the `lax.select` call has a data dependence.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`mask`的原因不被分阶段的原因是，在全阶段之前，`jit`基于数据依赖性运行。也就是说，`jit`仅分阶段一个函数中对参数有数据依赖性的操作。控制流基元和`pmap`的行为类似。在`select_tril`的情况下，用于构建常量`mask`的操作与参数x没有数据依赖关系，因此它们不会被分阶段；只有`lax.select`调用具有数据依赖性。
- en: With omnistaging all `jax.numpy` calls in the dynamic context of a `jit`-transformed
    function are staged out to XLA. That is, after omnistaging the computation XLA
    sees for `select_tril` is
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用全阶段后，`jit`转换函数的动态上下文中的所有`jax.numpy`调用都被分阶段到XLA。也就是说，在全阶段后，`select_tril`的计算XLA看到的是
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What issues can arise when omnistaging is switched on?
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当全阶段打开时可能会出现哪些问题？
- en: As a consequence of staging out all `jax.numpy` operations from Python to XLA
    when in the dynamic context of a `jit` or `pmap`, some code that worked previously
    can start raising loud errors. As explained below, these behaviors were already
    buggy before omnistaging, but omnistaging makes them into hard errors.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`jit`或`pmap`的动态上下文中，从Python到XLA分阶段所有`jax.numpy`操作的结果，一些之前正常工作的代码可能会开始引发大声的错误。正如下文所解释的那样，这些行为在全阶段之前已经存在bug，但全阶段将它们变成了严格的错误。
- en: Using `jax.numpy` for shape computations
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`jax.numpy`进行形状计算
- en: Example
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Error message
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 错误消息
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Explanation
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解释
- en: With omnistaging, we can’t use `jax.numpy` for shape computations as in the
    use of `jnp.prod` above because in the dynamic context of a jit function those
    operations will be staged out of Python as values to be computed at execution
    time, yet we need them to be compile-time (and hence trace-time) constants.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在全面化下，我们不能像上面使用`jnp.prod`一样在 jit 函数的动态上下文中使用`jax.numpy`进行形状计算，因为这些操作将被分阶段为在执行时计算的值，但我们需要它们是编译时常量（因此是跟踪时常量）。
- en: 'Before omnistaging, this code wouldn’t have raised an error, but it was a common
    performance bug: the `jnp.prod` computation would have been executed on the device
    at tracing time, meaning extra compilation, transfers, synchronization, allocations,
    and potentially memory fragmentation.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在全面化之前，这段代码不会引发错误，但这是一个常见的性能 bug：`jnp.prod`计算将在跟踪时间在设备上执行，意味着额外的编译、传输、同步、分配和潜在的内存碎片化。
- en: Solution
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解决方案
- en: The solution is simply to use the original `numpy` for shape calculations like
    these. Not only do we avoid the error, but also we keep the computations on the
    host (and with lower overheads).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方法很简单，就是像这样的形状计算使用原始的`numpy`。这不仅避免了错误，还将计算保持在主机上（并且开销更低）。
- en: This issue was common enough in code that we tried to make the error message
    especially good. In addition to the stack trace showing where an abstract tracer
    value caused a problem (the `jnp.reshape` line in the full stack trace, on omni.py:10),
    we also explain why this value became a tracer in the first place by pointing
    to the upstream primitive operation that caused it to become an abstract tracer
    (the `reduce_prod` from `jnp.prod` on omni.py:9) and to which `jit`-decorated
    function the tracer belongs (`ex1` on omni.py:6).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，这个问题很常见，我们努力使错误消息尤其好。除了堆栈跟踪显示抽象跟踪器值导致问题的位置（完整堆栈跟踪中的`jnp.reshape`行，在 omni.py:10），我们还解释了这个值首先变成跟踪器的原因，指向导致它成为抽象跟踪器的上游原始操作（来自`jnp.prod`中的`reduce_prod`，在
    omni.py:9），以及跟踪器属于哪个带`jit`装饰的函数（在 omni.py:6中的`ex1`）。
- en: Side-effects
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 副作用
- en: Example
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'That last call has repeated randomness but no hard error, because we aren’t
    re-executing the Python. But if we look at `key`, we see an escaped tracer *when
    omnistaging is on*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个调用具有重复的随机性，但没有硬错误，因为我们没有重新执行 Python。但是如果我们查看`key`，我们会看到一个逃逸的跟踪器*开启全面化时*：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Before omnistaging, the `random.split` call would not be staged out and so we
    wouldn’t get an escaped tracer. The code would still be buggy in that the jitted
    function wouldn’t be reproducing the semantics of the original function (because
    of the repeated use of the same PRNG key), ultimately due to the side effect.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在全面化之前，`random.split`调用不会被分阶段处理，因此我们不会得到逃逸的跟踪器。由于重复使用相同的 PRNG 密钥，代码仍然存在 bug，即编译函数无法复制原始函数的语义（因为有副作用）。
- en: 'With omnistaging on, if we touch `key` again, we’ll get an escaped tracer error:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在开启全面化时，如果再次触及`key`，将会得到一个逃逸的跟踪器错误：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Error message
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 错误消息
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Explanation
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解释
- en: The second largest category of omnistaging issues we found had to do with side-effecting
    code. This code already voided the JAX warranty by transforming effectful functions,
    but due to pre-omnistaging “trace-time constant folding” behavior, some side effecting
    functions could nevertheless behave correctly. Omnistaging catches more of these
    errors.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现的次大类全面化问题与副作用代码有关。这些代码通过转换有副作用的函数已经使 JAX 的保证失效，但由于预全面化的“跟踪时间常数折叠”行为，一些有副作用的函数仍然可能表现正确。全面化能更多地捕捉这些错误。
- en: Solution
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解决方案
- en: The solution is to identify JAX-transformed functions that rely on side effects,
    and to rewrite them not to be effectful.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方法是识别依赖副作用的 JAX 转换函数，并重新编写它们以避免有副作用。
- en: Small numerical differences based on XLA optimizations
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于 XLA 优化的小数值差异
- en: Because with omnistaging more computations are being staged out to XLA, rather
    than some being executed at trace time, that can have the effect of reordering
    floating point operations. As a result, we’ve seen numerical behaviors change
    in a way that causes tests with overly tight tolerances to fail when omnistaging
    is switched on.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在全面化下，更多的计算被分阶段到 XLA，而不是在跟踪时间执行，这可能导致浮点运算的重新排序。结果是，我们看到数值行为以一种导致测试在开启全面化时失败的方式改变，因为它们对于过紧容差的测试失败。
- en: Dependence on JAX internal APIs that changed
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖于 JAX 内部 API 的变化
- en: Omnistaging involved some big revisions to JAX’s core code, including removing
    or changing internal functions. Any code that relies on such internal JAX APIs
    can break when omnistaging is switched on, either with build errors (from pytype)
    or runtime errors.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Omnistaging 涉及对 JAX 核心代码进行了一些重大修改，包括删除或更改内部函数。任何依赖这些内部 JAX API 的代码，在 omnistaging
    打开时都可能会出现问题，可能是构建错误（来自 pytype）或运行时错误。
- en: Triggering XLA compile time bugs
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发 XLA 编译时错误
- en: Because omnistaging involves staging out more code to XLA, we’ve seen it trigger
    pre-existing XLA compile-time bugs on some backends. The best thing to do with
    these is to report them so we can work with the XLA teams on fixes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 omnistaging 涉及将更多代码分阶段传递给 XLA，我们发现它可能会在某些后端触发现有的 XLA 编译时错误。对于这些问题，最好的做法是报告它们，以便我们与
    XLA 团队合作进行修复。
