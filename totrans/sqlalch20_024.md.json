["```py\nfrom sqlalchemy.orm import validates\n\nclass EmailAddress(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n        if \"@\" not in address:\n            raise ValueError(\"failed simple email validation\")\n        return address\n```", "```py\nfrom sqlalchemy.orm import validates\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n\n    @validates(\"addresses\")\n    def validate_address(self, key, address):\n        if \"@\" not in address.email:\n            raise ValueError(\"failed simplified email validation\")\n        return address\n```", "```py\nfrom sqlalchemy.orm import validates\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n\n    @validates(\"addresses\", include_removes=True)\n    def validate_address(self, key, address, is_remove):\n        if is_remove:\n            raise ValueError(\"not allowed to remove items from the collection\")\n        else:\n            if \"@\" not in address.email:\n                raise ValueError(\"failed simplified email validation\")\n            return address\n```", "```py\nfrom sqlalchemy.orm import validates\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\", backref=\"user\")\n\n    @validates(\"addresses\", include_backrefs=False)\n    def validate_address(self, key, address):\n        if \"@\" not in address:\n            raise ValueError(\"failed simplified email validation\")\n        return address\n```", "```py\nfunction sqlalchemy.orm.validates(*names: str, include_removes: bool = False, include_backrefs: bool = True) \u2192 Callable[[_Fn], _Fn]\n```", "```py\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    # name the attribute with an underscore,\n    # different from the column name\n    _email = mapped_column(\"email\", String)\n\n    # then create an \".email\" attribute\n    # to get/set \"._email\"\n    @property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        self._email = email\n```", "```py\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    _email = mapped_column(\"email\", String)\n\n    @hybrid_property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        self._email = email\n```", "```py\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import select\n\nsession = Session()\n\naddress = session.scalars(\n    select(EmailAddress).where(EmailAddress.email == \"address@example.com\")\n).one()\nSELECT  address.email  AS  address_email,  address.id  AS  address_id\nFROM  address\nWHERE  address.email  =  ?\n('address@example.com',)\naddress.email = \"otheraddress@example.com\"\nsession.commit()\nUPDATE  address  SET  email=?  WHERE  address.id  =  ?\n('otheraddress@example.com',  1)\nCOMMIT \n```", "```py\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    _email = mapped_column(\"email\", String)\n\n    @hybrid_property\n    def email(self):\n  \"\"\"Return the value of _email up until the last twelve\n characters.\"\"\"\n\n        return self._email[:-12]\n\n    @email.setter\n    def email(self, email):\n  \"\"\"Set the value of _email, tacking on the twelve character\n value @example.com.\"\"\"\n\n        self._email = email + \"@example.com\"\n\n    @email.expression\n    def email(cls):\n  \"\"\"Produce a SQL expression that represents the value\n of the _email column, minus the last twelve characters.\"\"\"\n\n        return func.substr(cls._email, 0, func.length(cls._email) - 12)\n```", "```py\naddress = session.scalars(\n    select(EmailAddress).where(EmailAddress.email == \"address\")\n).one()\nSELECT  address.email  AS  address_email,  address.id  AS  address_id\nFROM  address\nWHERE  substr(address.email,  ?,  length(address.email)  -  ?)  =  ?\n(0,  12,  'address') \n```", "```py\nfrom sqlalchemy.orm import synonym\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    job_status = mapped_column(String(50))\n\n    status = synonym(\"job_status\")\n```", "```py\n>>> print(MyClass.job_status == \"some_status\")\nmy_table.job_status  =  :job_status_1\n>>> print(MyClass.status == \"some_status\")\nmy_table.job_status  =  :job_status_1 \n```", "```py\n>>> m1 = MyClass(status=\"x\")\n>>> m1.status, m1.job_status\n('x', 'x')\n\n>>> m1.job_status = \"y\"\n>>> m1.status, m1.job_status\n('y', 'y')\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    status = mapped_column(String(50))\n\n    @property\n    def job_status(self):\n        return \"Status: \" + self.status\n\n    job_status = synonym(\"status\", descriptor=job_status)\n```", "```py\nfrom sqlalchemy.ext.declarative import synonym_for\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    status = mapped_column(String(50))\n\n    @synonym_for(\"status\")\n    @property\n    def job_status(self):\n        return \"Status: \" + self.status\n```", "```py\nfunction sqlalchemy.orm.synonym(name: str, *, map_column: bool | None = None, descriptor: Any | None = None, comparator_factory: Type[PropComparator[_T]] | None = None, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: _NoArg | _T = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, info: _InfoType | None = None, doc: str | None = None) \u2192 Synonym[Any]\n```", "```py\nclass MyClass(Base):\n    __tablename__ = 'my_table'\n\n    id = Column(Integer, primary_key=True)\n    job_status = Column(String(50))\n\n    status = synonym(\"job_status\")\n```", "```py\n    my_table = Table(\n        \"my_table\", metadata,\n        Column('id', Integer, primary_key=True),\n        Column('job_status', String(50))\n    )\n\n    class MyClass:\n        @property\n        def _job_status_descriptor(self):\n            return \"Status: %s\" % self._job_status\n\n    mapper(\n        MyClass, my_table, properties={\n            \"job_status\": synonym(\n                \"_job_status\", map_column=True,\n                descriptor=MyClass._job_status_descriptor)\n        }\n    )\n    ```", "```py\n    >>> j1 = MyClass()\n    >>> j1._job_status = \"employed\"\n    >>> j1.job_status\n    Status: employed\n    ```", "```py\nfrom sqlalchemy.orm import validates\n\nclass EmailAddress(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n        if \"@\" not in address:\n            raise ValueError(\"failed simple email validation\")\n        return address\n```", "```py\nfrom sqlalchemy.orm import validates\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n\n    @validates(\"addresses\")\n    def validate_address(self, key, address):\n        if \"@\" not in address.email:\n            raise ValueError(\"failed simplified email validation\")\n        return address\n```", "```py\nfrom sqlalchemy.orm import validates\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n\n    @validates(\"addresses\", include_removes=True)\n    def validate_address(self, key, address, is_remove):\n        if is_remove:\n            raise ValueError(\"not allowed to remove items from the collection\")\n        else:\n            if \"@\" not in address.email:\n                raise ValueError(\"failed simplified email validation\")\n            return address\n```", "```py\nfrom sqlalchemy.orm import validates\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\", backref=\"user\")\n\n    @validates(\"addresses\", include_backrefs=False)\n    def validate_address(self, key, address):\n        if \"@\" not in address:\n            raise ValueError(\"failed simplified email validation\")\n        return address\n```", "```py\nfunction sqlalchemy.orm.validates(*names: str, include_removes: bool = False, include_backrefs: bool = True) \u2192 Callable[[_Fn], _Fn]\n```", "```py\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    # name the attribute with an underscore,\n    # different from the column name\n    _email = mapped_column(\"email\", String)\n\n    # then create an \".email\" attribute\n    # to get/set \"._email\"\n    @property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        self._email = email\n```", "```py\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    _email = mapped_column(\"email\", String)\n\n    @hybrid_property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        self._email = email\n```", "```py\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import select\n\nsession = Session()\n\naddress = session.scalars(\n    select(EmailAddress).where(EmailAddress.email == \"address@example.com\")\n).one()\nSELECT  address.email  AS  address_email,  address.id  AS  address_id\nFROM  address\nWHERE  address.email  =  ?\n('address@example.com',)\naddress.email = \"otheraddress@example.com\"\nsession.commit()\nUPDATE  address  SET  email=?  WHERE  address.id  =  ?\n('otheraddress@example.com',  1)\nCOMMIT \n```", "```py\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    _email = mapped_column(\"email\", String)\n\n    @hybrid_property\n    def email(self):\n  \"\"\"Return the value of _email up until the last twelve\n characters.\"\"\"\n\n        return self._email[:-12]\n\n    @email.setter\n    def email(self, email):\n  \"\"\"Set the value of _email, tacking on the twelve character\n value @example.com.\"\"\"\n\n        self._email = email + \"@example.com\"\n\n    @email.expression\n    def email(cls):\n  \"\"\"Produce a SQL expression that represents the value\n of the _email column, minus the last twelve characters.\"\"\"\n\n        return func.substr(cls._email, 0, func.length(cls._email) - 12)\n```", "```py\naddress = session.scalars(\n    select(EmailAddress).where(EmailAddress.email == \"address\")\n).one()\nSELECT  address.email  AS  address_email,  address.id  AS  address_id\nFROM  address\nWHERE  substr(address.email,  ?,  length(address.email)  -  ?)  =  ?\n(0,  12,  'address') \n```", "```py\nfrom sqlalchemy.orm import synonym\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    job_status = mapped_column(String(50))\n\n    status = synonym(\"job_status\")\n```", "```py\n>>> print(MyClass.job_status == \"some_status\")\nmy_table.job_status  =  :job_status_1\n>>> print(MyClass.status == \"some_status\")\nmy_table.job_status  =  :job_status_1 \n```", "```py\n>>> m1 = MyClass(status=\"x\")\n>>> m1.status, m1.job_status\n('x', 'x')\n\n>>> m1.job_status = \"y\"\n>>> m1.status, m1.job_status\n('y', 'y')\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    status = mapped_column(String(50))\n\n    @property\n    def job_status(self):\n        return \"Status: \" + self.status\n\n    job_status = synonym(\"status\", descriptor=job_status)\n```", "```py\nfrom sqlalchemy.ext.declarative import synonym_for\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    status = mapped_column(String(50))\n\n    @synonym_for(\"status\")\n    @property\n    def job_status(self):\n        return \"Status: \" + self.status\n```", "```py\nfunction sqlalchemy.orm.synonym(name: str, *, map_column: bool | None = None, descriptor: Any | None = None, comparator_factory: Type[PropComparator[_T]] | None = None, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: _NoArg | _T = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, info: _InfoType | None = None, doc: str | None = None) \u2192 Synonym[Any]\n```", "```py\nclass MyClass(Base):\n    __tablename__ = 'my_table'\n\n    id = Column(Integer, primary_key=True)\n    job_status = Column(String(50))\n\n    status = synonym(\"job_status\")\n```", "```py\n    my_table = Table(\n        \"my_table\", metadata,\n        Column('id', Integer, primary_key=True),\n        Column('job_status', String(50))\n    )\n\n    class MyClass:\n        @property\n        def _job_status_descriptor(self):\n            return \"Status: %s\" % self._job_status\n\n    mapper(\n        MyClass, my_table, properties={\n            \"job_status\": synonym(\n                \"_job_status\", map_column=True,\n                descriptor=MyClass._job_status_descriptor)\n        }\n    )\n    ```", "```py\n    >>> j1 = MyClass()\n    >>> j1._job_status = \"employed\"\n    >>> j1.job_status\n    Status: employed\n    ```"]