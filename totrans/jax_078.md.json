["```py\ndevices = jax.devices()  # 8 devices\n\n@partial(shmap, mesh=Mesh(devices, ('batch',)),\n         in_specs=(P(None, None), P('batch', None)),\n         out_specs=P())\ndef loss(params, batch):\n  inputs, targets = batch\n  predictions = predict(params, inputs)\n  local_loss = jnp.mean(jnp.sum(predictions - targets, -1))\n  global_loss = lax.pmean(local_loss, 'batch'))\n  return global_loss \n```", "```py\n# Example 1: shmap involving psum and unmapped output with inefficient transpose\nf1 = shmap(lambda x: psum(g(x), 'i'),\n           in_specs=P('i'), out_specs=P()) \n```", "```py\n# An efficient \"transpose\" of Example 1 (but don't transpose this again!)\nÂ¿f1_transpose? = shmap(t(g), in_specs=P(), out_specs=P('i')) \n```", "```py\n# The transpose we currently get for Example 1 (which is fine to transpose again)\nt(f1) = shmap(lambda ybar: t(g)(psum(ybar / 8, 'i')),\n              in_specs=P(), out_specs=P('i')) \n```", "```py\n# Example 2: shmap involving psum and *mapped* output with efficient transpose\nf2 = shmap(lambda x, y: psum(g(x), 'i') * y,\n          in_specs=(P('i'), P('i')), out_specs=P('i'))\n\n# The transpose we currently get for Example 2 is efficient\nt(f2, 0) = shmap(lambda y, zbar: t(g)(psum(zbar * y, 'i')),\n                in_specs=(P('i'), P('i')), out_specs=P('i')) \n```", "```py\n# Example 3: cursed identity\ncursed_identity = shmap(lambda x: x, P(), P())\n\n# Currently we get these inefficient transposes\nt(cursed_identity) = shmap(lambda x: psum(x / 8, 'i'), P(), P())\nt(t(cursed_identity)) = shmap(lambda x: psum(psum(x / 8 / 8, 'i'), 'i')), P(), P())\n... \n```", "```py\n# Example 4: all_gather to an unmapped output\nf4 = shmap(lambda x: all_gather(x, 'i'), P('i'), P())\n\n# Currently we get this inefficient transpose\nt(f4) = shmap(lambda ybar: psum_scatter(ybar / 8, 'i'), P(), P('i')) \n```", "```py\n# Example 5: all_gather to a mapped output\nf5 = shmap(lambda x, y: all_gather(x, 'i') * y,\n           in_specs=(P('i'), P('i')), out_specs=P('i'))\n\n# Currently we get this efficient transpose\nt(f5, 0) = shmap(lambda y, zbar: psum_scatter(zbar * y, 'i'),\n                 in_specs=(P('i'), P('i')), out_specs=P('i')) \n```", "```py\n# Example 4 again\nf4 = shmap(lambda x: all_gather(x, 'i'), P('i'), P())\n\n# Why didn't we just write it like this?\nf4_better = shmap(lambda x: x, P('i'), P('i')) \n```", "```py\n# Example 1 again\nf1 = shmap(lambda x: psum(g(x), 'i'),\n           in_specs=P('i'), out_specs=P())\n\n# What if we could write an output sum like this?\nf1_better = shmap(g, in_specs=P('i'), out_specs=P(sum='i'))  # sum='i' means sum over that axis\n\n# Then it could transpose like this:\nt(f1_better) = shmap(t(g), in_specs=P(), out_specs=P('i'))\nt(t(f1_better)) = shmap(t(t(g)), in_specs=P('i'), P(sum='i')) \n```", "```py\n# Example 3 again\ncursed_identity = shmap(lambda x: x, P(), P())\n\n# How it would transpose with the P-sum partial solution:\nt(cursed_identity) = shmap(lambda x: x / 8, P(), P(sum='i'))\nt(t(cursed_identity)) = shmap(lambda x: x / 8, P(), P(sum='i')) \n```", "```py\nshaped_array ::= <dtype>[<int_literal>, ...]<device_variance_type>\ndevice_variance_type ::= {<axis_name>, ...} \n```", "```py\n# Example 1 again\nf1 = shmap(lambda x: psum(g(x), 'i'),\n           in_specs=P('i'), out_specs=P())\n\n# Example 1 with intermediate device variance types annotated\n@partial(shmap, in_specs=P('i'), out_specs=P())\ndef f1(x: f32[3,4]{i}):\n  w:f32[]{i} = g(x)\n  y:f32[]{} = psum(w, 'i')\n  return y \n```", "```py\n# Example 1 transpose using device variance types (go ahead and transpose this again!)\nt(f1) = shmap(lambda ybar: t(g)(pbroadcast(ybar, 'i')),\n              in_specs=P(), out_specs=P('i'))\n\n# Example 1 transpose with intermediate device variance types annotated\n@partial(shmap, in_specs=P('i'), out_specs=P())\ndef f1_transpose(ybar: f32[]):\n  wbar:f32[]{i} = pbroadcast(ybar, 'i')\n  xbar:f32[3,4]{i} = transpose(g)(wbar)\n  return xbar \n```", "```py\n# Example 2 rewritten with explicit pbroadcast\nf2 = shmap(lambda x, y: pbroadcast(psum(g(x), 'i'), 'i') * y,\n           in_specs=(P('i'), P('i')), out_specs=P('i'))\n\n# Example 2 transpose using device variance types\nt(f2, 0) = shmap(lambda y, zbar: t(g)(pbroadcast(psum(zbar * y, 'i'), 'i')),\n                 in_specs=(P('i'), P('i')), out_specs=P('i'))\n\n# Example 3 again\ncursed_identity = shmap(lambda x: x, P(), P())\n# Notice here the body is `f32[...] -> f32[...]`, i.e. no device varying type.\n\n# Example 3 transpose using device variance types\nt(cursed_identity) = shmap(lambda x: x, P(), P())\nt(t(cursed_identity)) = shmap(lambda x: x, P(), P()) \n```", "```py\n# Example 4 rewritten with explicit all_reduce_invariant\nf4 = shmap(lambda x: all_gather_invariant(x, 'i'), P('i'), P())\n\n# Example 4 with intermediate device variance types annotated\n@partial(shmap, P('i'), P())\ndef f4(x:f32[1]{i}):\n  y:f32[8]{} = all_gather_invariant(x, 'i')\n  return y\n\n# Example 4 transpose with intermediate device variance types annotated\n@partial(shmap, in_specs=P(), out_specs=P('i'))\ndef f4_transpose(ybar:f32[8]):\n  xbar:f32[1]{i} = pscatter(ybar, 'i')\n  return xbar \n```", "```py\n# Example 5 with intermediate device variance types annotated\n@partial(shmap, in_specs=(P('i'), P('i')), out_specs=P('i'))\ndef f5(x:f32[1]{i}, y:f32[8]{i}):\n  z:f32[8]{i} = all_gather(x, 'i')\n  w:f32[8]{i} = z * y\n  return w\n\n# Transpose with respect to first argument\n@partial(shmap, in_specs=(P('i'), P('i')), out_specs=P('i'))\ndef f5_transpose(y:f32[8]{i}, wbar:f32[8]{i}):\n  zbar:f32[8]{i} = wbar * y\n  xbar:f32[1]{i} = psum_scatter(zbar, 'i')\n  return xbar \n```"]