["```py\nclass Order(Base):\n    __tablename__ = \"order\"\n\n    items = relationship(\"Item\", cascade=\"all, delete-orphan\")\n    customer = relationship(\"User\", cascade=\"save-update\")\n```", "```py\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    order = relationship(\n        \"Order\", backref=backref(\"items\", cascade=\"all, delete-orphan\")\n    )\n```", "```py\n>>> user1 = User()\n>>> address1, address2 = Address(), Address()\n>>> user1.addresses = [address1, address2]\n```", "```py\n>>> sess = Session()\n>>> sess.add(user1)\n>>> address1 in sess\nTrue\n```", "```py\n>>> address3 = Address()\n>>> user1.addresses.append(address3)\n>>> address3 in sess\nTrue\n```", "```py\n>>> user1 = sess1.scalars(select(User).filter_by(id=1)).first()\n>>> address1 = user1.addresses[0]\n>>> sess1.close()  # user1, address1 no longer associated with sess1\n>>> user1.addresses.remove(address1)  # address1 no longer associated with user1\n>>> sess2 = Session()\n>>> sess2.add(user1)  # ... but it still gets added to the new session,\n>>> address1 in sess2  # because it's still \"pending\" for flush\nTrue\n```", "```py\nmapper_registry.map_imperatively(\n    Order,\n    order_table,\n    properties={\"items\": relationship(Item, back_populates=\"order\")},\n)\n\nmapper_registry.map_imperatively(\n    Item,\n    item_table,\n    properties={\"order\": relationship(Order, back_populates=\"items\")},\n)\n```", "```py\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> o1.items.append(i1)\n>>> o1 is i1.order\nTrue\n>>> i1 in session\nTrue\n```", "```py\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> i1.order = o1\n>>> i1 in order.items\nTrue\n>>> i1 in session\nFalse\n```", "```py\n>>> session.add(i1)\n```", "```py\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\", cascade=\"all, delete\")\n```", "```py\n>>> user1 = sess1.scalars(select(User).filter_by(id=1)).first()\n>>> address1, address2 = user1.addresses\n```", "```py\n>>> sess.delete(user1)\n>>> sess.commit()\nDELETE  FROM  address  WHERE  address.id  =  ?\n((1,),  (2,))\nDELETE  FROM  user  WHERE  user.id  =  ?\n(1,)\nCOMMIT \n```", "```py\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n```", "```py\n>>> sess.delete(user1)\n>>> sess.commit()\nUPDATE  address  SET  user_id=?  WHERE  address.id  =  ?\n(None,  1)\nUPDATE  address  SET  user_id=?  WHERE  address.id  =  ?\n(None,  2)\nDELETE  FROM  user  WHERE  user.id  =  ?\n(1,)\nCOMMIT \n```", "```py\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        back_populates=\"parent\",\n        cascade=\"all, delete\",\n        passive_deletes=True,\n    )\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"parent.id\", ondelete=\"CASCADE\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```", "```py\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\", ondelete=\"CASCADE\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\", ondelete=\"CASCADE\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n        passive_deletes=True,\n    )\n```", "```py\n>>> address = user.addresses[1]\n>>> session.delete(address)\n>>> session.flush()\n>>> address in user.addresses\nTrue\n```", "```py\n>>> session.commit()\n>>> address in user.addresses\nFalse\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    # ...\n\n    addresses = relationship(\"Address\", cascade=\"all, delete-orphan\")\n\n# ...\n\ndel user.addresses[1]\nsession.flush()\n```", "```py\nclass User(Base):\n    # ...\n\n    preference = relationship(\n        \"Preference\", cascade=\"all, delete-orphan\", single_parent=True\n    )\n```", "```py\nsome_user.preference = None\nsession.flush()  # will delete the Preference object\n```", "```py\n>>> user1 = User()\n>>> address1, address2 = Address(), Address()\n>>> user1.addresses = [address1, address2]\n```", "```py\n>>> sess = Session()\n>>> sess.add(user1)\n>>> address1 in sess\nTrue\n```", "```py\n>>> address3 = Address()\n>>> user1.addresses.append(address3)\n>>> address3 in sess\nTrue\n```", "```py\n>>> user1 = sess1.scalars(select(User).filter_by(id=1)).first()\n>>> address1 = user1.addresses[0]\n>>> sess1.close()  # user1, address1 no longer associated with sess1\n>>> user1.addresses.remove(address1)  # address1 no longer associated with user1\n>>> sess2 = Session()\n>>> sess2.add(user1)  # ... but it still gets added to the new session,\n>>> address1 in sess2  # because it's still \"pending\" for flush\nTrue\n```", "```py\nmapper_registry.map_imperatively(\n    Order,\n    order_table,\n    properties={\"items\": relationship(Item, back_populates=\"order\")},\n)\n\nmapper_registry.map_imperatively(\n    Item,\n    item_table,\n    properties={\"order\": relationship(Order, back_populates=\"items\")},\n)\n```", "```py\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> o1.items.append(i1)\n>>> o1 is i1.order\nTrue\n>>> i1 in session\nTrue\n```", "```py\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> i1.order = o1\n>>> i1 in order.items\nTrue\n>>> i1 in session\nFalse\n```", "```py\n>>> session.add(i1)\n```", "```py\nmapper_registry.map_imperatively(\n    Order,\n    order_table,\n    properties={\"items\": relationship(Item, back_populates=\"order\")},\n)\n\nmapper_registry.map_imperatively(\n    Item,\n    item_table,\n    properties={\"order\": relationship(Order, back_populates=\"items\")},\n)\n```", "```py\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> o1.items.append(i1)\n>>> o1 is i1.order\nTrue\n>>> i1 in session\nTrue\n```", "```py\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> i1.order = o1\n>>> i1 in order.items\nTrue\n>>> i1 in session\nFalse\n```", "```py\n>>> session.add(i1)\n```", "```py\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\", cascade=\"all, delete\")\n```", "```py\n>>> user1 = sess1.scalars(select(User).filter_by(id=1)).first()\n>>> address1, address2 = user1.addresses\n```", "```py\n>>> sess.delete(user1)\n>>> sess.commit()\nDELETE  FROM  address  WHERE  address.id  =  ?\n((1,),  (2,))\nDELETE  FROM  user  WHERE  user.id  =  ?\n(1,)\nCOMMIT \n```", "```py\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n```", "```py\n>>> sess.delete(user1)\n>>> sess.commit()\nUPDATE  address  SET  user_id=?  WHERE  address.id  =  ?\n(None,  1)\nUPDATE  address  SET  user_id=?  WHERE  address.id  =  ?\n(None,  2)\nDELETE  FROM  user  WHERE  user.id  =  ?\n(1,)\nCOMMIT \n```", "```py\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        back_populates=\"parent\",\n        cascade=\"all, delete\",\n        passive_deletes=True,\n    )\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"parent.id\", ondelete=\"CASCADE\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```", "```py\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\", ondelete=\"CASCADE\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\", ondelete=\"CASCADE\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n        passive_deletes=True,\n    )\n```", "```py\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n    )\n```", "```py\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        back_populates=\"parent\",\n        cascade=\"all, delete\",\n        passive_deletes=True,\n    )\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"parent.id\", ondelete=\"CASCADE\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```", "```py\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\", ondelete=\"CASCADE\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\", ondelete=\"CASCADE\")),\n)\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n        passive_deletes=True,\n    )\n```", "```py\n>>> address = user.addresses[1]\n>>> session.delete(address)\n>>> session.flush()\n>>> address in user.addresses\nTrue\n```", "```py\n>>> session.commit()\n>>> address in user.addresses\nFalse\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    # ...\n\n    addresses = relationship(\"Address\", cascade=\"all, delete-orphan\")\n\n# ...\n\ndel user.addresses[1]\nsession.flush()\n```", "```py\nclass User(Base):\n    # ...\n\n    preference = relationship(\n        \"Preference\", cascade=\"all, delete-orphan\", single_parent=True\n    )\n```", "```py\nsome_user.preference = None\nsession.flush()  # will delete the Preference object\n```"]