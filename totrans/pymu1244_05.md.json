["```py\nimport pymupdf\n\ndoc = pymupdf.open(\"a.pdf\") # open a document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"a.pdf\") # open a document\nout = open(\"output.txt\", \"wb\") # create a text output\nfor page in doc: # iterate the document pages\n    text = page.get_text().encode(\"utf8\") # get plain text (is in UTF-8)\n    out.write(text) # write text of page\n    out.write(bytes((12,))) # write page delimiter (form feed 0x0C)\nout.close() \n```", "```py\ntp = page.get_textpage_ocr()\ntext = page.get_text(textpage=tp) \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n    image_list = page.get_images()\n\n    # print the number of images found on the page\n    if image_list:\n        print(f\"Found {len(image_list)} images on page {page_index}\")\n    else:\n        print(\"No images found on page\", page_index)\n\n    for image_index, img in enumerate(image_list, start=1): # enumerate the image list\n        xref = img[0] # get the XREF of the image\n        pix = pymupdf.Pixmap(doc, xref) # create a Pixmap\n\n        if pix.n - pix.alpha > 3: # CMYK: convert to RGB first\n            pix = pymupdf.Pixmap(pymupdf.csRGB, pix)\n\n        pix.save(\"page_%s-image_%s.png\" % (page_index, image_index)) # save the image as png\n        pix = None \n```", "```py\ndoc = pymupdf.open(\"some.file\")\npage = doc[0]\npaths = page.get_drawings() \n```", "```py\nimport pymupdf\n\ndoc_a = pymupdf.open(\"a.pdf\") # open the 1st document\ndoc_b = pymupdf.open(\"b.pdf\") # open the 2nd document\n\ndoc_a.insert_pdf(doc_b) # merge the docs\ndoc_a.save(\"a+b.pdf\") # save the merged document with a new filename \n```", "```py\nimport pymupdf\n\ndoc_a = pymupdf.open(\"a.pdf\") # open the 1st document\ndoc_b = pymupdf.open(\"b.svg\") # open the 2nd document\n\ndoc_a.insert_file(doc_b) # merge the docs\ndoc_a.save(\"a+b.pdf\") # save the merged document with a new filename \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"document.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n\n    # insert an image watermark from a file name to fit the page bounds\n    page.insert_image(page.bound(),filename=\"watermark.png\", overlay=False)\n\ndoc.save(\"watermarked-document.pdf\") # save the document with a new filename \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"document.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n\n    # insert an image logo from a file name at the top left of the document\n    page.insert_image(pymupdf.Rect(0,0,50,50),filename=\"my-logo.png\")\n\ndoc.save(\"logo-document.pdf\") # save the document with a new filename \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\npage.set_rotation(90) # rotate the page\ndoc.save(\"rotated-page-1.pdf\") \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\npage.set_cropbox(pymupdf.Rect(100, 100, 400, 400)) # set a cropbox for the page\ndoc.save(\"cropped-page-1.pdf\") \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open main document\nattachment = pymupdf.open(\"my-attachment.pdf\") # open document you want to attach\n\npage = doc[0] # get the 1st page of the document\npoint = pymupdf.Point(100, 100) # create the point where you want to add the attachment\nattachment_data = attachment.tobytes() # get the document byte data as a buffer\n\n# add the file annotation with the point, data and the file name\nfile_annotation = page.add_file_annot(point, attachment_data, \"attachment.pdf\")\n\ndoc.save(\"document-with-attachment.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open main document\nembedded_doc = pymupdf.open(\"my-embed.pdf\") # open document you want to embed\n\nembedded_data = embedded_doc.tobytes() # get the document byte data as a buffer\n\n# embed with the file name and the data\ndoc.embfile_add(\"my-embedded_file.pdf\", embedded_data)\n\ndoc.save(\"document-with-embed.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.delete_page(0) # delete the 1st page of the document\ndoc.save(\"test-deleted-page-one.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.delete_pages(from_page=9, to_page=14) # delete a page range from the document\ndoc.save(\"test-deleted-pages.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.move_page(1,0) # move the 2nd page of the document to the start of the document\ndoc.save(\"test-page-moved.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.copy_page(0) # copy the 1st page and puts it at the end of the document\ndoc.save(\"test-page-copied.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.select([0, 1]) # select the 1st & 2nd page of the document\ndoc.save(\"just-page-one-and-two.pdf\") # save the document \n```", "```py\ndoc.select([1, 1, 1, 5, 4, 9, 9, 9, 0, 2, 2, 2]) \n```", "```py\np_even = [p in range(doc.page_count) if p % 2 == 0]\np_odd  = [p in range(doc.page_count) if p % 2 == 1] \n```", "```py\ndoc.select(p_even) # only the even pages left over\ndoc.save(\"even.pdf\") # save the \"even\" PDF\ndoc.close() # recycle the file\ndoc = pymupdf.open(doc.name) # re-open\ndoc.select(p_odd) # and do the same with the odd pages\ndoc.save(\"odd.pdf\") \n```", "```py\nlastPage = doc.page_count - 1\nfor i in range(lastPage):\n    doc.move_page(lastPage, i) # move current last page to the front \n```", "```py\npage_count = len(doc)\nfor i in range(page_count):\n    doc.copy_page(i) # copy this page to after last page \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(...) # some new or existing PDF document\npage = doc.new_page(-1, # insertion point: end of document\n                    width = 595, # page dimension: A4 portrait\n                    height = 842)\ndoc.save(\"doc-with-new-blank-page.pdf\") # save the document \n```", "```py\nw, h = pymupdf.paper_size(\"letter-l\")  # 'Letter' landscape\npage = doc.new_page(width = w, height = h) \n```", "```py\ndoc = pymupdf.open()\ndoc.new_page()\ndoc.save(\"A4.pdf\") \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(...)  # some new or existing PDF document\nn = doc.insert_page(-1, # default insertion point\n                    text = \"The quick brown fox jumped over the lazy dog\",\n                    fontsize = 11,\n                    width = 595,\n                    height = 842,\n                    fontname = \"Helvetica\", # default font\n                    fontfile = None, # any font file name\n                    color = (0, 0, 0)) # text color (RGB) \n```", "```py\nimport pymupdf\n\nsrc = pymupdf.open(\"test.pdf\")\ndoc = pymupdf.open()  # empty output PDF\n\nfor spage in src:  # for each page in input\n    r = spage.rect  # input page rectangle\n    d = pymupdf.Rect(spage.cropbox_position,  # CropBox displacement if not\n                  spage.cropbox_position)  # starting at (0, 0)\n    #--------------------------------------------------------------------------\n    # example: cut input page into 2 x 2 parts\n    #--------------------------------------------------------------------------\n    r1 = r / 2  # top left rect\n    r2 = r1 + (r1.width, 0, r1.width, 0)  # top right rect\n    r3 = r1 + (0, r1.height, 0, r1.height)  # bottom left rect\n    r4 = pymupdf.Rect(r1.br, r.br)  # bottom right rect\n    rect_list = [r1, r2, r3, r4]  # put them in a list\n\n    for rx in rect_list:  # run thru rect list\n        rx += d  # add the CropBox displacement\n        page = doc.new_page(-1,  # new output page with rx dimensions\n                           width = rx.width,\n                           height = rx.height)\n        page.show_pdf_page(\n                page.rect,  # fill all new page with the image\n                src,  # input document\n                spage.number,  # input page number\n                clip = rx,  # which part to use of input page\n            )\n\n# that's it, save output file\ndoc.save(\"poster-\" + src.name,\n         garbage=3,  # eliminate duplicate objects\n         deflate=True,  # compress stuff where possible\n) \n```", "```py\nimport pymupdf\n\nsrc = pymupdf.open(\"test.pdf\")\ndoc = pymupdf.open()  # empty output PDF\n\nwidth, height = pymupdf.paper_size(\"a4\")  # A4 portrait output page format\nr = pymupdf.Rect(0, 0, width, height)\n\n# define the 4 rectangles per page\nr1 = r / 2  # top left rect\nr2 = r1 + (r1.width, 0, r1.width, 0)  # top right\nr3 = r1 + (0, r1.height, 0, r1.height)  # bottom left\nr4 = pymupdf.Rect(r1.br, r.br)  # bottom right\n\n# put them in a list\nr_tab = [r1, r2, r3, r4]\n\n# now copy input pages to output\nfor spage in src:\n    if spage.number % 4 == 0:  # create new output page\n        page = doc.new_page(-1,\n                      width = width,\n                      height = height)\n    # insert input page into the correct rectangle\n    page.show_pdf_page(r_tab[spage.number % 4],  # select output rect\n                     src,  # input document\n                     spage.number)  # input page number\n\n# by all means, save new file using garbage collection and compression\ndoc.save(\"4up.pdf\", garbage=3, deflate=True) \n```", "```py\nimport pymupdf\n\ntext = \"some secret information\" # keep this data secret\nperm = int(\n    pymupdf.PDF_PERM_ACCESSIBILITY # always use this\n    | pymupdf.PDF_PERM_PRINT # permit printing\n    | pymupdf.PDF_PERM_COPY # permit copying\n    | pymupdf.PDF_PERM_ANNOTATE # permit annotations\n)\nowner_pass = \"owner\" # owner password\nuser_pass = \"user\" # user password\nencrypt_meth = pymupdf.PDF_ENCRYPT_AES_256 # strongest algorithm\ndoc = pymupdf.open() # empty pdf\npage = doc.new_page() # empty page\npage.insert_text((50, 72), text) # insert the data\ndoc.save(\n    \"secret.pdf\",\n    encryption=encrypt_meth, # set the encryption method\n    owner_pw=owner_pass, # set the owner password\n    user_pw=user_pass, # set the user password\n    permissions=perm, # set permissions\n) \n```", "```py\nimport pymupdf\nfrom pprint import pprint\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\ntabs = page.find_tables() # locate and extract any tables on page\nprint(f\"{len(tabs.tables)} found on {page}\") # display number of found tables\n\nif tabs.tables:  # at least one table found?\n   pprint(tabs[0].extract())  # print content of first table \n```", "```py\nimport pymupdf\n\nfor page in doc: # iterate the document pages\n    link = page.first_link  # a `Link` object or `None`\n\n    while link: # iterate over the links on page\n        # do something with the link, then:\n        link = link.next # get next link, last one has `None` in its `next` \n```", "```py\nimport pymupdf\n\nfor page in doc:\n    for annot in page.annots():\n        print(f'Annotation on page: {page.number} with type: {annot.type} and rect: {annot.rect}') \n```", "```py\nimport pymupdf\n\n# Open the PDF document\ndoc = pymupdf.open('test.pdf')\n\n# Iterate over each page of the document\nfor page in doc:\n    # Find all instances of \"Jane Doe\" on the current page\n    instances = page.search_for(\"Jane Doe\")\n\n    # Redact each instance of \"Jane Doe\" on the current page\n    for inst in instances:\n        page.add_redact_annot(inst)\n\n    # Apply the redactions to the current page\n    page.apply_redactions()\n\n# Save the modified document\ndoc.save('redacted_document.pdf')\n\n# Close the document\ndoc.close() \n```", "```py\nimport pymupdf\n\n# Open the PDF document\ndoc = pymupdf.open('test.pdf')\n\n# Get the first page\npage = doc[0]\n\n# Add an area to redact\nrect = [0,0,200,200]\n\n# Add a redacction annotation which will have a red fill color\npage.add_redact_annot(rect, fill=(1,0,0))\n\n# Apply the redactions to the current page, but ignore vector graphics\npage.apply_redactions(graphics=0)\n\n# Save the modified document\ndoc.save('redactied_document.pdf')\n\n# Close the document\ndoc.close() \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"a.pdf\") # open a document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"a.pdf\") # open a document\nout = open(\"output.txt\", \"wb\") # create a text output\nfor page in doc: # iterate the document pages\n    text = page.get_text().encode(\"utf8\") # get plain text (is in UTF-8)\n    out.write(text) # write text of page\n    out.write(bytes((12,))) # write page delimiter (form feed 0x0C)\nout.close() \n```", "```py\ntp = page.get_textpage_ocr()\ntext = page.get_text(textpage=tp) \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n    image_list = page.get_images()\n\n    # print the number of images found on the page\n    if image_list:\n        print(f\"Found {len(image_list)} images on page {page_index}\")\n    else:\n        print(\"No images found on page\", page_index)\n\n    for image_index, img in enumerate(image_list, start=1): # enumerate the image list\n        xref = img[0] # get the XREF of the image\n        pix = pymupdf.Pixmap(doc, xref) # create a Pixmap\n\n        if pix.n - pix.alpha > 3: # CMYK: convert to RGB first\n            pix = pymupdf.Pixmap(pymupdf.csRGB, pix)\n\n        pix.save(\"page_%s-image_%s.png\" % (page_index, image_index)) # save the image as png\n        pix = None \n```", "```py\ndoc = pymupdf.open(\"some.file\")\npage = doc[0]\npaths = page.get_drawings() \n```", "```py\nimport pymupdf\n\ndoc_a = pymupdf.open(\"a.pdf\") # open the 1st document\ndoc_b = pymupdf.open(\"b.pdf\") # open the 2nd document\n\ndoc_a.insert_pdf(doc_b) # merge the docs\ndoc_a.save(\"a+b.pdf\") # save the merged document with a new filename \n```", "```py\nimport pymupdf\n\ndoc_a = pymupdf.open(\"a.pdf\") # open the 1st document\ndoc_b = pymupdf.open(\"b.svg\") # open the 2nd document\n\ndoc_a.insert_file(doc_b) # merge the docs\ndoc_a.save(\"a+b.pdf\") # save the merged document with a new filename \n```", "```py\nimport pymupdf\n\ndoc_a = pymupdf.open(\"a.pdf\") # open the 1st document\ndoc_b = pymupdf.open(\"b.svg\") # open the 2nd document\n\ndoc_a.insert_file(doc_b) # merge the docs\ndoc_a.save(\"a+b.pdf\") # save the merged document with a new filename \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"document.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n\n    # insert an image watermark from a file name to fit the page bounds\n    page.insert_image(page.bound(),filename=\"watermark.png\", overlay=False)\n\ndoc.save(\"watermarked-document.pdf\") # save the document with a new filename \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"document.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n\n    # insert an image logo from a file name at the top left of the document\n    page.insert_image(pymupdf.Rect(0,0,50,50),filename=\"my-logo.png\")\n\ndoc.save(\"logo-document.pdf\") # save the document with a new filename \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\npage.set_rotation(90) # rotate the page\ndoc.save(\"rotated-page-1.pdf\") \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\npage.set_cropbox(pymupdf.Rect(100, 100, 400, 400)) # set a cropbox for the page\ndoc.save(\"cropped-page-1.pdf\") \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open main document\nattachment = pymupdf.open(\"my-attachment.pdf\") # open document you want to attach\n\npage = doc[0] # get the 1st page of the document\npoint = pymupdf.Point(100, 100) # create the point where you want to add the attachment\nattachment_data = attachment.tobytes() # get the document byte data as a buffer\n\n# add the file annotation with the point, data and the file name\nfile_annotation = page.add_file_annot(point, attachment_data, \"attachment.pdf\")\n\ndoc.save(\"document-with-attachment.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open main document\nembedded_doc = pymupdf.open(\"my-embed.pdf\") # open document you want to embed\n\nembedded_data = embedded_doc.tobytes() # get the document byte data as a buffer\n\n# embed with the file name and the data\ndoc.embfile_add(\"my-embedded_file.pdf\", embedded_data)\n\ndoc.save(\"document-with-embed.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.delete_page(0) # delete the 1st page of the document\ndoc.save(\"test-deleted-page-one.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.delete_pages(from_page=9, to_page=14) # delete a page range from the document\ndoc.save(\"test-deleted-pages.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.move_page(1,0) # move the 2nd page of the document to the start of the document\ndoc.save(\"test-page-moved.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.copy_page(0) # copy the 1st page and puts it at the end of the document\ndoc.save(\"test-page-copied.pdf\") # save the document \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.select([0, 1]) # select the 1st & 2nd page of the document\ndoc.save(\"just-page-one-and-two.pdf\") # save the document \n```", "```py\ndoc.select([1, 1, 1, 5, 4, 9, 9, 9, 0, 2, 2, 2]) \n```", "```py\np_even = [p in range(doc.page_count) if p % 2 == 0]\np_odd  = [p in range(doc.page_count) if p % 2 == 1] \n```", "```py\ndoc.select(p_even) # only the even pages left over\ndoc.save(\"even.pdf\") # save the \"even\" PDF\ndoc.close() # recycle the file\ndoc = pymupdf.open(doc.name) # re-open\ndoc.select(p_odd) # and do the same with the odd pages\ndoc.save(\"odd.pdf\") \n```", "```py\nlastPage = doc.page_count - 1\nfor i in range(lastPage):\n    doc.move_page(lastPage, i) # move current last page to the front \n```", "```py\npage_count = len(doc)\nfor i in range(page_count):\n    doc.copy_page(i) # copy this page to after last page \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(...) # some new or existing PDF document\npage = doc.new_page(-1, # insertion point: end of document\n                    width = 595, # page dimension: A4 portrait\n                    height = 842)\ndoc.save(\"doc-with-new-blank-page.pdf\") # save the document \n```", "```py\nw, h = pymupdf.paper_size(\"letter-l\")  # 'Letter' landscape\npage = doc.new_page(width = w, height = h) \n```", "```py\ndoc = pymupdf.open()\ndoc.new_page()\ndoc.save(\"A4.pdf\") \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open(...)  # some new or existing PDF document\nn = doc.insert_page(-1, # default insertion point\n                    text = \"The quick brown fox jumped over the lazy dog\",\n                    fontsize = 11,\n                    width = 595,\n                    height = 842,\n                    fontname = \"Helvetica\", # default font\n                    fontfile = None, # any font file name\n                    color = (0, 0, 0)) # text color (RGB) \n```", "```py\nimport pymupdf\n\nsrc = pymupdf.open(\"test.pdf\")\ndoc = pymupdf.open()  # empty output PDF\n\nfor spage in src:  # for each page in input\n    r = spage.rect  # input page rectangle\n    d = pymupdf.Rect(spage.cropbox_position,  # CropBox displacement if not\n                  spage.cropbox_position)  # starting at (0, 0)\n    #--------------------------------------------------------------------------\n    # example: cut input page into 2 x 2 parts\n    #--------------------------------------------------------------------------\n    r1 = r / 2  # top left rect\n    r2 = r1 + (r1.width, 0, r1.width, 0)  # top right rect\n    r3 = r1 + (0, r1.height, 0, r1.height)  # bottom left rect\n    r4 = pymupdf.Rect(r1.br, r.br)  # bottom right rect\n    rect_list = [r1, r2, r3, r4]  # put them in a list\n\n    for rx in rect_list:  # run thru rect list\n        rx += d  # add the CropBox displacement\n        page = doc.new_page(-1,  # new output page with rx dimensions\n                           width = rx.width,\n                           height = rx.height)\n        page.show_pdf_page(\n                page.rect,  # fill all new page with the image\n                src,  # input document\n                spage.number,  # input page number\n                clip = rx,  # which part to use of input page\n            )\n\n# that's it, save output file\ndoc.save(\"poster-\" + src.name,\n         garbage=3,  # eliminate duplicate objects\n         deflate=True,  # compress stuff where possible\n) \n```", "```py\nimport pymupdf\n\nsrc = pymupdf.open(\"test.pdf\")\ndoc = pymupdf.open()  # empty output PDF\n\nwidth, height = pymupdf.paper_size(\"a4\")  # A4 portrait output page format\nr = pymupdf.Rect(0, 0, width, height)\n\n# define the 4 rectangles per page\nr1 = r / 2  # top left rect\nr2 = r1 + (r1.width, 0, r1.width, 0)  # top right\nr3 = r1 + (0, r1.height, 0, r1.height)  # bottom left\nr4 = pymupdf.Rect(r1.br, r.br)  # bottom right\n\n# put them in a list\nr_tab = [r1, r2, r3, r4]\n\n# now copy input pages to output\nfor spage in src:\n    if spage.number % 4 == 0:  # create new output page\n        page = doc.new_page(-1,\n                      width = width,\n                      height = height)\n    # insert input page into the correct rectangle\n    page.show_pdf_page(r_tab[spage.number % 4],  # select output rect\n                     src,  # input document\n                     spage.number)  # input page number\n\n# by all means, save new file using garbage collection and compression\ndoc.save(\"4up.pdf\", garbage=3, deflate=True) \n```", "```py\nimport pymupdf\n\ntext = \"some secret information\" # keep this data secret\nperm = int(\n    pymupdf.PDF_PERM_ACCESSIBILITY # always use this\n    | pymupdf.PDF_PERM_PRINT # permit printing\n    | pymupdf.PDF_PERM_COPY # permit copying\n    | pymupdf.PDF_PERM_ANNOTATE # permit annotations\n)\nowner_pass = \"owner\" # owner password\nuser_pass = \"user\" # user password\nencrypt_meth = pymupdf.PDF_ENCRYPT_AES_256 # strongest algorithm\ndoc = pymupdf.open() # empty pdf\npage = doc.new_page() # empty page\npage.insert_text((50, 72), text) # insert the data\ndoc.save(\n    \"secret.pdf\",\n    encryption=encrypt_meth, # set the encryption method\n    owner_pw=owner_pass, # set the owner password\n    user_pw=user_pass, # set the user password\n    permissions=perm, # set permissions\n) \n```", "```py\nimport pymupdf\nfrom pprint import pprint\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\ntabs = page.find_tables() # locate and extract any tables on page\nprint(f\"{len(tabs.tables)} found on {page}\") # display number of found tables\n\nif tabs.tables:  # at least one table found?\n   pprint(tabs[0].extract())  # print content of first table \n```", "```py\nimport pymupdf\n\nfor page in doc: # iterate the document pages\n    link = page.first_link  # a `Link` object or `None`\n\n    while link: # iterate over the links on page\n        # do something with the link, then:\n        link = link.next # get next link, last one has `None` in its `next` \n```", "```py\nimport pymupdf\n\nfor page in doc:\n    for annot in page.annots():\n        print(f'Annotation on page: {page.number} with type: {annot.type} and rect: {annot.rect}') \n```", "```py\nimport pymupdf\n\n# Open the PDF document\ndoc = pymupdf.open('test.pdf')\n\n# Iterate over each page of the document\nfor page in doc:\n    # Find all instances of \"Jane Doe\" on the current page\n    instances = page.search_for(\"Jane Doe\")\n\n    # Redact each instance of \"Jane Doe\" on the current page\n    for inst in instances:\n        page.add_redact_annot(inst)\n\n    # Apply the redactions to the current page\n    page.apply_redactions()\n\n# Save the modified document\ndoc.save('redacted_document.pdf')\n\n# Close the document\ndoc.close() \n```", "```py\nimport pymupdf\n\n# Open the PDF document\ndoc = pymupdf.open('test.pdf')\n\n# Get the first page\npage = doc[0]\n\n# Add an area to redact\nrect = [0,0,200,200]\n\n# Add a redacction annotation which will have a red fill color\npage.add_redact_annot(rect, fill=(1,0,0))\n\n# Apply the redactions to the current page, but ignore vector graphics\npage.apply_redactions(graphics=0)\n\n# Save the modified document\ndoc.save('redactied_document.pdf')\n\n# Close the document\ndoc.close() \n```"]