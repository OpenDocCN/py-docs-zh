["```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(MappedAsDataclass, DeclarativeBase):\n  \"\"\"subclasses will be converted to dataclasses\"\"\"\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(MappedAsDataclass, Base):\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(MappedAsDataclass, Base, repr=False, unsafe_hash=True):\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nreg = registry()\n\n@reg.mapped_as_dataclass(unsafe_hash=True)\nclass User:\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(default=None)\n\n# 'fullname' is optional keyword argument\nu1 = User(\"name\")\n```", "```py\nfrom datetime import datetime\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(\n        insert_default=func.utc_timestamp(), default=None\n    )\n```", "```py\n>>> with Session(e) as session:\n...     session.add(User())\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (created_at)  VALUES  (utc_timestamp())\n[generated  in  0.00010s]  ()\nCOMMIT \n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\n# typing tools will ignore init=False here\nintpk = Annotated[int, mapped_column(init=False, primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n    id: Mapped[intpk]\n\n# typing error: Argument missing for parameter \"id\"\nu1 = User()\n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    # init=False and other pep-681 arguments must be inline\n    id: Mapped[intpk] = mapped_column(init=False)\n\nu1 = User()\n```", "```py\nclass Mixin(MappedAsDataclass):\n    create_user: Mapped[int] = mapped_column()\n    update_user: Mapped[Optional[int]] = mapped_column(default=None, init=False)\n\nclass Base(DeclarativeBase, MappedAsDataclass):\n    pass\n\nclass User(Base, Mixin):\n    __tablename__ = \"sys_user\"\n\n    uid: Mapped[str] = mapped_column(\n        String(50), init=False, default_factory=uuid4, primary_key=True\n    )\n    username: Mapped[str] = mapped_column()\n    email: Mapped[str] = mapped_column()\n```", "```py\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass Parent:\n    __tablename__ = \"parent\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        default_factory=list, back_populates=\"parent\"\n    )\n\n@reg.mapped_as_dataclass\nclass Child:\n    __tablename__ = \"child\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n    parent: Mapped[\"Parent\"] = relationship(default=None)\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass Data:\n    __tablename__ = \"data\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    status: Mapped[str]\n\n    ctrl_one: Optional[str] = None\n    ctrl_two: Optional[str] = None\n```", "```py\nd1 = Data(status=\"s1\", ctrl_one=\"ctrl1\", ctrl_two=\"ctrl2\")\n```", "```py\nfrom dataclasses import InitVar\nfrom typing import Optional\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n\n    password: InitVar[str]\n    repeat_password: InitVar[str]\n\n    password_hash: Mapped[str] = mapped_column(init=False, nullable=False)\n\n    def __post_init__(self, password: str, repeat_password: str):\n        if password != repeat_password:\n            raise ValueError(\"passwords do not match\")\n\n        self.password_hash = your_crypt_function_here(password)\n```", "```py\n>>> u1 = User(name=\"some_user\", password=\"xyz\", repeat_password=\"xyz\")\n>>> u1.password_hash\n'$6$9ppc... (example crypted string....)'\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\nfrom sqlalchemy.orm import registry\n\nclass Base(\n    MappedAsDataclass,\n    DeclarativeBase,\n    dataclass_callable=pydantic.dataclasses.dataclass,\n):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table\nfrom sqlalchemy.orm import registry, relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str] = None\n    nickname: Optional[str] = None\n    addresses: List[Address] = field(default_factory=list)\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\n            \"addresses\": relationship(\"Address\"),\n        }\n    }\n\n@mapper_registry.mapped\n@dataclass\nclass Address:\n    __table__ = Table(\n        \"address\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n        Column(\"email_address\", String(50)),\n    )\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: Optional[str] = None\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import registry, relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    name: str = field(default=None, metadata={\"sa\": Column(String(50))})\n    fullname: str = field(default=None, metadata={\"sa\": Column(String(50))})\n    nickname: str = field(default=None, metadata={\"sa\": Column(String(12))})\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": relationship(\"Address\")}\n    )\n\n@mapper_registry.mapped\n@dataclass\nclass Address:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(init=False, metadata={\"sa\": Column(ForeignKey(\"user.id\"))})\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n```", "```py\nclass RefTargetMixin:\n    @declared_attr\n    def target_id(cls):\n        return Column(\"target_id\", ForeignKey(\"target.id\"))\n\n    @declared_attr\n    def target(cls):\n        return relationship(\"Target\")\n```", "```py\n@dataclass\nclass UserMixin:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": lambda: relationship(\"Address\")}\n    )\n\n@dataclass\nclass AddressMixin:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(\n        init=False, metadata={\"sa\": lambda: Column(ForeignKey(\"user.id\"))}\n    )\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n\n@mapper_registry.mapped\nclass User(UserMixin):\n    pass\n\n@mapper_registry.mapped\nclass Address(AddressMixin):\n    pass\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\nfrom typing import List\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@dataclass\nclass User:\n    id: int = field(init=False)\n    name: str = None\n    fullname: str = None\n    nickname: str = None\n    addresses: List[Address] = field(default_factory=list)\n\n@dataclass\nclass Address:\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: str = None\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\n\nfrom attrs import define\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@define(slots=False)\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"FullName\", String(50), key=\"fullname\"),\n        Column(\"nickname\", String(12)),\n    )\n    id: Mapped[int]\n    name: Mapped[str]\n    fullname: Mapped[str]\n    nickname: Mapped[str]\n    addresses: Mapped[List[Address]]\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\n            \"addresses\": relationship(\"Address\"),\n        }\n    }\n\n@mapper_registry.mapped\n@define(slots=False)\nclass Address:\n    __table__ = Table(\n        \"address\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n        Column(\"email_address\", String(50)),\n    )\n    id: Mapped[int]\n    user_id: Mapped[int]\n    email_address: Mapped[Optional[str]]\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom attrs import define\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@define(slots=False)\nclass User:\n    id: int\n    name: str\n    fullname: str\n    nickname: str\n    addresses: List[Address]\n\n@define(slots=False)\nclass Address:\n    id: int\n    user_id: int\n    email_address: Optional[str]\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(MappedAsDataclass, DeclarativeBase):\n  \"\"\"subclasses will be converted to dataclasses\"\"\"\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(MappedAsDataclass, Base):\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(MappedAsDataclass, Base, repr=False, unsafe_hash=True):\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nreg = registry()\n\n@reg.mapped_as_dataclass(unsafe_hash=True)\nclass User:\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(default=None)\n\n# 'fullname' is optional keyword argument\nu1 = User(\"name\")\n```", "```py\nfrom datetime import datetime\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(\n        insert_default=func.utc_timestamp(), default=None\n    )\n```", "```py\n>>> with Session(e) as session:\n...     session.add(User())\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (created_at)  VALUES  (utc_timestamp())\n[generated  in  0.00010s]  ()\nCOMMIT \n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\n# typing tools will ignore init=False here\nintpk = Annotated[int, mapped_column(init=False, primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n    id: Mapped[intpk]\n\n# typing error: Argument missing for parameter \"id\"\nu1 = User()\n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    # init=False and other pep-681 arguments must be inline\n    id: Mapped[intpk] = mapped_column(init=False)\n\nu1 = User()\n```", "```py\nclass Mixin(MappedAsDataclass):\n    create_user: Mapped[int] = mapped_column()\n    update_user: Mapped[Optional[int]] = mapped_column(default=None, init=False)\n\nclass Base(DeclarativeBase, MappedAsDataclass):\n    pass\n\nclass User(Base, Mixin):\n    __tablename__ = \"sys_user\"\n\n    uid: Mapped[str] = mapped_column(\n        String(50), init=False, default_factory=uuid4, primary_key=True\n    )\n    username: Mapped[str] = mapped_column()\n    email: Mapped[str] = mapped_column()\n```", "```py\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass Parent:\n    __tablename__ = \"parent\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        default_factory=list, back_populates=\"parent\"\n    )\n\n@reg.mapped_as_dataclass\nclass Child:\n    __tablename__ = \"child\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n    parent: Mapped[\"Parent\"] = relationship(default=None)\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass Data:\n    __tablename__ = \"data\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    status: Mapped[str]\n\n    ctrl_one: Optional[str] = None\n    ctrl_two: Optional[str] = None\n```", "```py\nd1 = Data(status=\"s1\", ctrl_one=\"ctrl1\", ctrl_two=\"ctrl2\")\n```", "```py\nfrom dataclasses import InitVar\nfrom typing import Optional\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n\n    password: InitVar[str]\n    repeat_password: InitVar[str]\n\n    password_hash: Mapped[str] = mapped_column(init=False, nullable=False)\n\n    def __post_init__(self, password: str, repeat_password: str):\n        if password != repeat_password:\n            raise ValueError(\"passwords do not match\")\n\n        self.password_hash = your_crypt_function_here(password)\n```", "```py\n>>> u1 = User(name=\"some_user\", password=\"xyz\", repeat_password=\"xyz\")\n>>> u1.password_hash\n'$6$9ppc... (example crypted string....)'\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\nfrom sqlalchemy.orm import registry\n\nclass Base(\n    MappedAsDataclass,\n    DeclarativeBase,\n    dataclass_callable=pydantic.dataclasses.dataclass,\n):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(MappedAsDataclass, Base, repr=False, unsafe_hash=True):\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nreg = registry()\n\n@reg.mapped_as_dataclass(unsafe_hash=True)\nclass User:\n  \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(default=None)\n\n# 'fullname' is optional keyword argument\nu1 = User(\"name\")\n```", "```py\nfrom datetime import datetime\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(\n        insert_default=func.utc_timestamp(), default=None\n    )\n```", "```py\n>>> with Session(e) as session:\n...     session.add(User())\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (created_at)  VALUES  (utc_timestamp())\n[generated  in  0.00010s]  ()\nCOMMIT \n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\n# typing tools will ignore init=False here\nintpk = Annotated[int, mapped_column(init=False, primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n    id: Mapped[intpk]\n\n# typing error: Argument missing for parameter \"id\"\nu1 = User()\n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    # init=False and other pep-681 arguments must be inline\n    id: Mapped[intpk] = mapped_column(init=False)\n\nu1 = User()\n```", "```py\nfrom datetime import datetime\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(\n        insert_default=func.utc_timestamp(), default=None\n    )\n```", "```py\n>>> with Session(e) as session:\n...     session.add(User())\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  user_account  (created_at)  VALUES  (utc_timestamp())\n[generated  in  0.00010s]  ()\nCOMMIT \n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\n# typing tools will ignore init=False here\nintpk = Annotated[int, mapped_column(init=False, primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n    id: Mapped[intpk]\n\n# typing error: Argument missing for parameter \"id\"\nu1 = User()\n```", "```py\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    # init=False and other pep-681 arguments must be inline\n    id: Mapped[intpk] = mapped_column(init=False)\n\nu1 = User()\n```", "```py\nclass Mixin(MappedAsDataclass):\n    create_user: Mapped[int] = mapped_column()\n    update_user: Mapped[Optional[int]] = mapped_column(default=None, init=False)\n\nclass Base(DeclarativeBase, MappedAsDataclass):\n    pass\n\nclass User(Base, Mixin):\n    __tablename__ = \"sys_user\"\n\n    uid: Mapped[str] = mapped_column(\n        String(50), init=False, default_factory=uuid4, primary_key=True\n    )\n    username: Mapped[str] = mapped_column()\n    email: Mapped[str] = mapped_column()\n```", "```py\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass Parent:\n    __tablename__ = \"parent\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        default_factory=list, back_populates=\"parent\"\n    )\n\n@reg.mapped_as_dataclass\nclass Child:\n    __tablename__ = \"child\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n    parent: Mapped[\"Parent\"] = relationship(default=None)\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass Data:\n    __tablename__ = \"data\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    status: Mapped[str]\n\n    ctrl_one: Optional[str] = None\n    ctrl_two: Optional[str] = None\n```", "```py\nd1 = Data(status=\"s1\", ctrl_one=\"ctrl1\", ctrl_two=\"ctrl2\")\n```", "```py\nfrom dataclasses import InitVar\nfrom typing import Optional\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n\n    password: InitVar[str]\n    repeat_password: InitVar[str]\n\n    password_hash: Mapped[str] = mapped_column(init=False, nullable=False)\n\n    def __post_init__(self, password: str, repeat_password: str):\n        if password != repeat_password:\n            raise ValueError(\"passwords do not match\")\n\n        self.password_hash = your_crypt_function_here(password)\n```", "```py\n>>> u1 = User(name=\"some_user\", password=\"xyz\", repeat_password=\"xyz\")\n>>> u1.password_hash\n'$6$9ppc... (example crypted string....)'\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\nfrom sqlalchemy.orm import registry\n\nclass Base(\n    MappedAsDataclass,\n    DeclarativeBase,\n    dataclass_callable=pydantic.dataclasses.dataclass,\n):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table\nfrom sqlalchemy.orm import registry, relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str] = None\n    nickname: Optional[str] = None\n    addresses: List[Address] = field(default_factory=list)\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\n            \"addresses\": relationship(\"Address\"),\n        }\n    }\n\n@mapper_registry.mapped\n@dataclass\nclass Address:\n    __table__ = Table(\n        \"address\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n        Column(\"email_address\", String(50)),\n    )\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: Optional[str] = None\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import registry, relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    name: str = field(default=None, metadata={\"sa\": Column(String(50))})\n    fullname: str = field(default=None, metadata={\"sa\": Column(String(50))})\n    nickname: str = field(default=None, metadata={\"sa\": Column(String(12))})\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": relationship(\"Address\")}\n    )\n\n@mapper_registry.mapped\n@dataclass\nclass Address:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(init=False, metadata={\"sa\": Column(ForeignKey(\"user.id\"))})\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n```", "```py\nclass RefTargetMixin:\n    @declared_attr\n    def target_id(cls):\n        return Column(\"target_id\", ForeignKey(\"target.id\"))\n\n    @declared_attr\n    def target(cls):\n        return relationship(\"Target\")\n```", "```py\n@dataclass\nclass UserMixin:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": lambda: relationship(\"Address\")}\n    )\n\n@dataclass\nclass AddressMixin:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(\n        init=False, metadata={\"sa\": lambda: Column(ForeignKey(\"user.id\"))}\n    )\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n\n@mapper_registry.mapped\nclass User(UserMixin):\n    pass\n\n@mapper_registry.mapped\nclass Address(AddressMixin):\n    pass\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\nfrom typing import List\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@dataclass\nclass User:\n    id: int = field(init=False)\n    name: str = None\n    fullname: str = None\n    nickname: str = None\n    addresses: List[Address] = field(default_factory=list)\n\n@dataclass\nclass Address:\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: str = None\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table\nfrom sqlalchemy.orm import registry, relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str] = None\n    nickname: Optional[str] = None\n    addresses: List[Address] = field(default_factory=list)\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\n            \"addresses\": relationship(\"Address\"),\n        }\n    }\n\n@mapper_registry.mapped\n@dataclass\nclass Address:\n    __table__ = Table(\n        \"address\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n        Column(\"email_address\", String(50)),\n    )\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: Optional[str] = None\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import registry, relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    name: str = field(default=None, metadata={\"sa\": Column(String(50))})\n    fullname: str = field(default=None, metadata={\"sa\": Column(String(50))})\n    nickname: str = field(default=None, metadata={\"sa\": Column(String(12))})\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": relationship(\"Address\")}\n    )\n\n@mapper_registry.mapped\n@dataclass\nclass Address:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(init=False, metadata={\"sa\": Column(ForeignKey(\"user.id\"))})\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n```", "```py\nclass RefTargetMixin:\n    @declared_attr\n    def target_id(cls):\n        return Column(\"target_id\", ForeignKey(\"target.id\"))\n\n    @declared_attr\n    def target(cls):\n        return relationship(\"Target\")\n```", "```py\n@dataclass\nclass UserMixin:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": lambda: relationship(\"Address\")}\n    )\n\n@dataclass\nclass AddressMixin:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(\n        init=False, metadata={\"sa\": lambda: Column(ForeignKey(\"user.id\"))}\n    )\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n\n@mapper_registry.mapped\nclass User(UserMixin):\n    pass\n\n@mapper_registry.mapped\nclass Address(AddressMixin):\n    pass\n```", "```py\nclass RefTargetMixin:\n    @declared_attr\n    def target_id(cls):\n        return Column(\"target_id\", ForeignKey(\"target.id\"))\n\n    @declared_attr\n    def target(cls):\n        return relationship(\"Target\")\n```", "```py\n@dataclass\nclass UserMixin:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": lambda: relationship(\"Address\")}\n    )\n\n@dataclass\nclass AddressMixin:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(\n        init=False, metadata={\"sa\": lambda: Column(ForeignKey(\"user.id\"))}\n    )\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n\n@mapper_registry.mapped\nclass User(UserMixin):\n    pass\n\n@mapper_registry.mapped\nclass Address(AddressMixin):\n    pass\n```", "```py\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom dataclasses import field\nfrom typing import List\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@dataclass\nclass User:\n    id: int = field(init=False)\n    name: str = None\n    fullname: str = None\n    nickname: str = None\n    addresses: List[Address] = field(default_factory=list)\n\n@dataclass\nclass Address:\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: str = None\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\n\nfrom attrs import define\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@define(slots=False)\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"FullName\", String(50), key=\"fullname\"),\n        Column(\"nickname\", String(12)),\n    )\n    id: Mapped[int]\n    name: Mapped[str]\n    fullname: Mapped[str]\n    nickname: Mapped[str]\n    addresses: Mapped[List[Address]]\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\n            \"addresses\": relationship(\"Address\"),\n        }\n    }\n\n@mapper_registry.mapped\n@define(slots=False)\nclass Address:\n    __table__ = Table(\n        \"address\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n        Column(\"email_address\", String(50)),\n    )\n    id: Mapped[int]\n    user_id: Mapped[int]\n    email_address: Mapped[Optional[str]]\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom attrs import define\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@define(slots=False)\nclass User:\n    id: int\n    name: str\n    fullname: str\n    nickname: str\n    addresses: List[Address]\n\n@define(slots=False)\nclass Address:\n    id: int\n    user_id: int\n    email_address: Optional[str]\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\n\nfrom attrs import define\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@mapper_registry.mapped\n@define(slots=False)\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"FullName\", String(50), key=\"fullname\"),\n        Column(\"nickname\", String(12)),\n    )\n    id: Mapped[int]\n    name: Mapped[str]\n    fullname: Mapped[str]\n    nickname: Mapped[str]\n    addresses: Mapped[List[Address]]\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\n            \"addresses\": relationship(\"Address\"),\n        }\n    }\n\n@mapper_registry.mapped\n@define(slots=False)\nclass Address:\n    __table__ = Table(\n        \"address\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n        Column(\"email_address\", String(50)),\n    )\n    id: Mapped[int]\n    user_id: Mapped[int]\n    email_address: Mapped[Optional[str]]\n```", "```py\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom attrs import define\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n@define(slots=False)\nclass User:\n    id: int\n    name: str\n    fullname: str\n    nickname: str\n    addresses: List[Address]\n\n@define(slots=False)\nclass Address:\n    id: int\n    user_id: int\n    email_address: Optional[str]\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```"]