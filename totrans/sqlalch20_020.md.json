["```py\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    firstname: Mapped[str] = mapped_column(String(50))\n    lastname: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[str] = column_property(firstname + \" \" + lastname)\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n    address_statistics: Mapped[Optional[str]] = mapped_column(Text, deferred=True)\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\n# mapping attributes using declarative with imperative table\n# i.e. __table__\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table, Text\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import deferred\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __table__ = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"firstname\", String(50)),\n        Column(\"lastname\", String(50)),\n    )\n\n    fullname = column_property(__table__.c.firstname + \" \" + __table__.c.lastname)\n\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __table__ = Table(\n        \"address\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", ForeignKey(\"user.id\")),\n        Column(\"email_address\", String),\n        Column(\"address_statistics\", Text),\n    )\n\n    address_statistics = deferred(__table__.c.address_statistics)\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n```", "```py\nclass GroupUsers(Base):\n    __tablename__ = \"group_users\"\n\n    user_id = mapped_column(String(40))\n    group_id = mapped_column(String(40))\n\n    __mapper_args__ = {\"primary_key\": [user_id, group_id]}\n```", "```py\nfrom datetime import datetime\n\nclass Widget(Base):\n    __tablename__ = \"widgets\"\n\n    id = mapped_column(Integer, primary_key=True)\n    timestamp = mapped_column(DateTime, nullable=False)\n\n    __mapper_args__ = {\n        \"version_id_col\": timestamp,\n        \"version_id_generator\": lambda v: datetime.now(),\n    }\n```", "```py\nclass Person(Base):\n    __tablename__ = \"person\"\n\n    person_id = mapped_column(Integer, primary_key=True)\n    type = mapped_column(String, nullable=False)\n\n    __mapper_args__ = dict(\n        polymorphic_on=type,\n        polymorphic_identity=\"person\",\n    )\n\nclass Employee(Person):\n    __mapper_args__ = dict(\n        polymorphic_identity=\"employee\",\n    )\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import select\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\n\nclass ExcludeColsWFlag:\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\n            \"exclude_properties\": [\n                column.key\n                for column in cls.__table__.c\n                if column.info.get(\"exclude\", False)\n            ]\n        }\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(ExcludeColsWFlag, Base):\n    __tablename__ = \"some_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    data = mapped_column(String)\n    not_needed = mapped_column(String, info={\"exclude\": True})\n```", "```py\nclass MyClass(Base):\n    @classmethod\n    def __declare_last__(cls):\n  \"\"\" \"\"\"\n        # do something with mappings\n```", "```py\nclass MyClass(Base):\n    @classmethod\n    def __declare_first__(cls):\n  \"\"\" \"\"\"\n        # do something before mappings are configured\n```", "```py\nreg = registry()\n\nclass BaseOne:\n    metadata = MetaData()\n\nclass BaseTwo:\n    metadata = MetaData()\n\n@reg.mapped\nclass ClassOne:\n    __tablename__ = \"t1\"  # will use reg.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n@reg.mapped\nclass ClassTwo(BaseOne):\n    __tablename__ = \"t1\"  # will use BaseOne.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n@reg.mapped\nclass ClassThree(BaseTwo):\n    __tablename__ = \"t1\"  # will use BaseTwo.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n```", "```py\nclass SomeAbstractBase(Base):\n    __abstract__ = True\n\n    def some_helpful_method(self):\n  \"\"\" \"\"\"\n\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\"helpful mapper arguments\": True}\n\nclass MyMappedClass(SomeAbstractBase):\n    pass\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass DefaultBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n\nclass OtherBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n```", "```py\nDefaultBase.metadata.create_all(some_engine)\nOtherBase.metadata.create_all(some_other_engine)\n```", "```py\nclass MyMixin:\n    @classmethod\n    def __table_cls__(cls, name, metadata_obj, *arg, **kw):\n        return Table(f\"my_{name}\", metadata_obj, *arg, **kw)\n```", "```py\nclass AutoTable:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__\n\n    @classmethod\n    def __table_cls__(cls, *arg, **kw):\n        for obj in arg[1:]:\n            if (isinstance(obj, Column) and obj.primary_key) or isinstance(\n                obj, PrimaryKeyConstraint\n            ):\n                return Table(*arg, **kw)\n\n        return None\n\nclass Person(AutoTable, Base):\n    id = mapped_column(Integer, primary_key=True)\n\nclass Employee(Person):\n    employee_name = mapped_column(String)\n```", "```py\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    firstname: Mapped[str] = mapped_column(String(50))\n    lastname: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[str] = column_property(firstname + \" \" + lastname)\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n    address_statistics: Mapped[Optional[str]] = mapped_column(Text, deferred=True)\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\n# mapping attributes using declarative with imperative table\n# i.e. __table__\n\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table, Text\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import deferred\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __table__ = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"firstname\", String(50)),\n        Column(\"lastname\", String(50)),\n    )\n\n    fullname = column_property(__table__.c.firstname + \" \" + __table__.c.lastname)\n\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __table__ = Table(\n        \"address\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", ForeignKey(\"user.id\")),\n        Column(\"email_address\", String),\n        Column(\"address_statistics\", Text),\n    )\n\n    address_statistics = deferred(__table__.c.address_statistics)\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n```", "```py\nclass GroupUsers(Base):\n    __tablename__ = \"group_users\"\n\n    user_id = mapped_column(String(40))\n    group_id = mapped_column(String(40))\n\n    __mapper_args__ = {\"primary_key\": [user_id, group_id]}\n```", "```py\nfrom datetime import datetime\n\nclass Widget(Base):\n    __tablename__ = \"widgets\"\n\n    id = mapped_column(Integer, primary_key=True)\n    timestamp = mapped_column(DateTime, nullable=False)\n\n    __mapper_args__ = {\n        \"version_id_col\": timestamp,\n        \"version_id_generator\": lambda v: datetime.now(),\n    }\n```", "```py\nclass Person(Base):\n    __tablename__ = \"person\"\n\n    person_id = mapped_column(Integer, primary_key=True)\n    type = mapped_column(String, nullable=False)\n\n    __mapper_args__ = dict(\n        polymorphic_on=type,\n        polymorphic_identity=\"person\",\n    )\n\nclass Employee(Person):\n    __mapper_args__ = dict(\n        polymorphic_identity=\"employee\",\n    )\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import select\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\n\nclass ExcludeColsWFlag:\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\n            \"exclude_properties\": [\n                column.key\n                for column in cls.__table__.c\n                if column.info.get(\"exclude\", False)\n            ]\n        }\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(ExcludeColsWFlag, Base):\n    __tablename__ = \"some_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    data = mapped_column(String)\n    not_needed = mapped_column(String, info={\"exclude\": True})\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import select\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\n\nclass ExcludeColsWFlag:\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\n            \"exclude_properties\": [\n                column.key\n                for column in cls.__table__.c\n                if column.info.get(\"exclude\", False)\n            ]\n        }\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(ExcludeColsWFlag, Base):\n    __tablename__ = \"some_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    data = mapped_column(String)\n    not_needed = mapped_column(String, info={\"exclude\": True})\n```", "```py\nclass MyClass(Base):\n    @classmethod\n    def __declare_last__(cls):\n  \"\"\" \"\"\"\n        # do something with mappings\n```", "```py\nclass MyClass(Base):\n    @classmethod\n    def __declare_first__(cls):\n  \"\"\" \"\"\"\n        # do something before mappings are configured\n```", "```py\nreg = registry()\n\nclass BaseOne:\n    metadata = MetaData()\n\nclass BaseTwo:\n    metadata = MetaData()\n\n@reg.mapped\nclass ClassOne:\n    __tablename__ = \"t1\"  # will use reg.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n@reg.mapped\nclass ClassTwo(BaseOne):\n    __tablename__ = \"t1\"  # will use BaseOne.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n@reg.mapped\nclass ClassThree(BaseTwo):\n    __tablename__ = \"t1\"  # will use BaseTwo.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n```", "```py\nclass SomeAbstractBase(Base):\n    __abstract__ = True\n\n    def some_helpful_method(self):\n  \"\"\" \"\"\"\n\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\"helpful mapper arguments\": True}\n\nclass MyMappedClass(SomeAbstractBase):\n    pass\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass DefaultBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n\nclass OtherBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n```", "```py\nDefaultBase.metadata.create_all(some_engine)\nOtherBase.metadata.create_all(some_other_engine)\n```", "```py\nclass MyMixin:\n    @classmethod\n    def __table_cls__(cls, name, metadata_obj, *arg, **kw):\n        return Table(f\"my_{name}\", metadata_obj, *arg, **kw)\n```", "```py\nclass AutoTable:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__\n\n    @classmethod\n    def __table_cls__(cls, *arg, **kw):\n        for obj in arg[1:]:\n            if (isinstance(obj, Column) and obj.primary_key) or isinstance(\n                obj, PrimaryKeyConstraint\n            ):\n                return Table(*arg, **kw)\n\n        return None\n\nclass Person(AutoTable, Base):\n    id = mapped_column(Integer, primary_key=True)\n\nclass Employee(Person):\n    employee_name = mapped_column(String)\n```", "```py\nclass MyClass(Base):\n    @classmethod\n    def __declare_last__(cls):\n  \"\"\" \"\"\"\n        # do something with mappings\n```", "```py\nclass MyClass(Base):\n    @classmethod\n    def __declare_first__(cls):\n  \"\"\" \"\"\"\n        # do something before mappings are configured\n```", "```py\nreg = registry()\n\nclass BaseOne:\n    metadata = MetaData()\n\nclass BaseTwo:\n    metadata = MetaData()\n\n@reg.mapped\nclass ClassOne:\n    __tablename__ = \"t1\"  # will use reg.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n@reg.mapped\nclass ClassTwo(BaseOne):\n    __tablename__ = \"t1\"  # will use BaseOne.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n@reg.mapped\nclass ClassThree(BaseTwo):\n    __tablename__ = \"t1\"  # will use BaseTwo.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n```", "```py\nclass SomeAbstractBase(Base):\n    __abstract__ = True\n\n    def some_helpful_method(self):\n  \"\"\" \"\"\"\n\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\"helpful mapper arguments\": True}\n\nclass MyMappedClass(SomeAbstractBase):\n    pass\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass DefaultBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n\nclass OtherBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n```", "```py\nDefaultBase.metadata.create_all(some_engine)\nOtherBase.metadata.create_all(some_other_engine)\n```", "```py\nclass MyMixin:\n    @classmethod\n    def __table_cls__(cls, name, metadata_obj, *arg, **kw):\n        return Table(f\"my_{name}\", metadata_obj, *arg, **kw)\n```", "```py\nclass AutoTable:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__\n\n    @classmethod\n    def __table_cls__(cls, *arg, **kw):\n        for obj in arg[1:]:\n            if (isinstance(obj, Column) and obj.primary_key) or isinstance(\n                obj, PrimaryKeyConstraint\n            ):\n                return Table(*arg, **kw)\n\n        return None\n\nclass Person(AutoTable, Base):\n    id = mapped_column(Integer, primary_key=True)\n\nclass Employee(Person):\n    employee_name = mapped_column(String)\n```"]