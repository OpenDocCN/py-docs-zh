- en: jax.sharding module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.sharding.html`](https://jax.readthedocs.io/en/latest/jax.sharding.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Classes'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Describes how a `jax.Array` is laid out across devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices in the `Sharding` that are addressable by the current process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A mapping from addressable devices to the slice of array data each contains.
  prefs: []
  type: TYPE_NORMAL
- en: '`addressable_devices_indices_map` contains that part of `device_indices_map`
    that applies to the addressable devices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …] | None]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices that this `Sharding` spans.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns a mapping from devices to the array slices each contains.
  prefs: []
  type: TYPE_NORMAL
- en: The mapping includes all global devices, i.e., including non-addressable devices
    from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if two shardings are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Two shardings are equivalent if they place the same logical array shards on
    the same devices.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a `NamedSharding` may be equivalent to a `PositionalSharding` if
    both place the same shards of the array on the same devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**self** (*Sharding*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**other** (*Sharding*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ndim** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully addressable?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully replicated?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns the memory kind of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Returns the shape of the data on each device.
  prefs: []
  type: TYPE_NORMAL
- en: The shard shape returned by this function is calculated from `global_shape`
    and the properties of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.12)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), …]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new Sharding instance with the specified memory kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sharding*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: `Sharding`'
  prefs: []
  type: TYPE_NORMAL
- en: A `Sharding` that places its data on a single device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**device** – A single `Device`.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices that this `Sharding` spans.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns a mapping from devices to the array slices each contains.
  prefs: []
  type: TYPE_NORMAL
- en: The mapping includes all global devices, i.e., including non-addressable devices
    from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully addressable?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully replicated?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns the memory kind of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new Sharding instance with the specified memory kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*SingleDeviceSharding*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: `Sharding`'
  prefs: []
  type: TYPE_NORMAL
- en: A `NamedSharding` expresses sharding using named axes.
  prefs: []
  type: TYPE_NORMAL
- en: A `NamedSharding` is a pair of a `Mesh` of devices and `PartitionSpec` which
    describes how to shard an array across that mesh.
  prefs: []
  type: TYPE_NORMAL
- en: A `Mesh` is a multidimensional NumPy array of JAX devices, where each axis of
    the mesh has a name, e.g. `'x'` or `'y'`.
  prefs: []
  type: TYPE_NORMAL
- en: A `PartitionSpec` is a tuple, whose elements can be a `None`, a mesh axis, or
    a tuple of mesh axes. Each element describes how an input dimension is partitioned
    across zero or more mesh dimensions. For example, `PartitionSpec('x', 'y')` says
    that the first dimension of data is sharded across `x` axis of the mesh, and the
    second dimension is sharded across `y` axis of the mesh.
  prefs: []
  type: TYPE_NORMAL
- en: The Distributed arrays and automatic parallelization ([`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#namedsharding-gives-a-way-to-express-shardings-with-names`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#namedsharding-gives-a-way-to-express-shardings-with-names))
    tutorial has more details and diagrams that explain how `Mesh` and `PartitionSpec`
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mesh** – A `jax.sharding.Mesh` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**spec** – A `jax.sharding.PartitionSpec` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices in the `Sharding` that are addressable by the current process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices that this `Sharding` spans.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully addressable?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully replicated?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns the memory kind of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: (self) -> object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: (self) -> object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new Sharding instance with the specified memory kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*NamedSharding*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: `Sharding`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**devices** (*Sequence**[**xc.Device**]* *|* *np.ndarray*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**memory_kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *|* *None*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices that this `Sharding` spans.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully addressable?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully replicated?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Returns the memory kind of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new Sharding instance with the specified memory kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*PositionalSharding*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: `Sharding`'
  prefs: []
  type: TYPE_NORMAL
- en: Describes a sharding used by `jax.pmap()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Creates a `PmapSharding` which matches the default placement used by `jax.pmap()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – The shape of the input array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sharded_dim** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – Dimension the input array is sharded on. Defaults to 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**devices** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")**[*Device**]* *|* *None*) – Optional sequence of devices
    to use. If omitted, the implicit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**used** (*device order used by pmap is*) – `jax.local_devices()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**of** (*which is the order*) – `jax.local_devices()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*PmapSharding*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices that this `Sharding` spans.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: (self) -> ndarray
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Returns a mapping from devices to the array slices each contains.
  prefs: []
  type: TYPE_NORMAL
- en: The mapping includes all global devices, i.e., including non-addressable devices
    from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Mapping*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")[*Device*, [tuple](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), …]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if two shardings are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Two shardings are equivalent if they place the same logical array shards on
    the same devices.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a `NamedSharding` may be equivalent to a `PositionalSharding` if
    both place the same shards of the array on the same devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**self** (*PmapSharding*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**other** (*PmapSharding*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ndim** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully addressable?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully replicated?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Returns the memory kind of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Returns the shape of the data on each device.
  prefs: []
  type: TYPE_NORMAL
- en: The shard shape returned by this function is calculated from `global_shape`
    and the properties of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**global_shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.12)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), …]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: (self) -> jax::ShardingSpec
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new Sharding instance with the specified memory kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: `Sharding`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The set of devices that this `Sharding` spans.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-controller JAX, the set of devices is global, i.e., includes non-addressable
    devices from other processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully addressable?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully addressable if the current process can address all of the
    devices named in the `Sharding`. `is_fully_addressable` is equivalent to “is_local”
    in multi-process JAX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Is this sharding fully replicated?
  prefs: []
  type: TYPE_NORMAL
- en: A sharding is fully replicated if each device has a complete copy of the entire
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Returns the memory kind of the sharding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new Sharding instance with the specified memory kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kind** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*GSPMDSharding*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Tuple describing how to partition an array across a mesh of devices.
  prefs: []
  type: TYPE_NORMAL
- en: Each element is either `None`, a string, or a tuple of strings. See the documentation
    of `jax.sharding.NamedSharding` for more details.
  prefs: []
  type: TYPE_NORMAL
- en: This class exists so JAX’s pytree utilities can distinguish a partition specifications
    from tuples that should be treated as pytrees.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Declare the hardware resources available in the scope of this manager.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, all `axis_names` become valid resource names inside the managed
    block and can be used e.g. in the `in_axis_resources` argument of `jax.experimental.pjit.pjit()`.
    Also see JAX’s multi-process programming model ([`jax.readthedocs.io/en/latest/multi_process.html`](https://jax.readthedocs.io/en/latest/multi_process.html))
    and the Distributed arrays and automatic parallelization tutorial ([`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html))
  prefs: []
  type: TYPE_NORMAL
- en: If you are compiling in multiple threads, make sure that the `with Mesh` context
    manager is inside the function that the threads will execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**devices** ([*ndarray*](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0)")) – A NumPy ndarray object containing JAX device objects (as
    obtained e.g. from `jax.devices()`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis_names** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*,* *...**]*) – A sequence of resource axis names to be assigned
    to the dimensions of the `devices` argument. Its length should match the rank
    of `devices`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
