- en: jax.scipy module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.scipy.html`](https://jax.readthedocs.io/en/latest/jax.scipy.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## jax.scipy.cluster'
  prefs: []
  type: TYPE_NORMAL
- en: '| `vq`(obs, code_book[, check_finite]) | Assign codes from a code book to a
    set of observations. |  ## jax.scipy.fft'
  prefs: []
  type: TYPE_NORMAL
- en: '| `dct`(x[, type, n, axis, norm]) | Computes the discrete cosine transform
    of the input |'
  prefs: []
  type: TYPE_TB
- en: '| `dctn`(x[, type, s, axes, norm]) | Computes the multidimensional discrete
    cosine transform of the input |'
  prefs: []
  type: TYPE_TB
- en: '| `idct`(x[, type, n, axis, norm]) | Computes the inverse discrete cosine transform
    of the input |'
  prefs: []
  type: TYPE_TB
- en: '| `idctn`(x[, type, s, axes, norm]) | Computes the multidimensional inverse
    discrete cosine transform of the input |  ## jax.scipy.integrate'
  prefs: []
  type: TYPE_NORMAL
- en: '| `trapezoid`(y[, x, dx, axis]) | Integrate along the given axis using the
    composite trapezoidal rule. |  ## jax.scipy.interpolate'
  prefs: []
  type: TYPE_NORMAL
- en: '| `RegularGridInterpolator`(points, values[, ...]) | Interpolate points on
    a regular rectangular grid. |  ## jax.scipy.linalg'
  prefs: []
  type: TYPE_NORMAL
- en: '| `block_diag`(*arrs) | Create a block diagonal matrix from input arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `cho_factor`(a[, lower, overwrite_a, check_finite]) | Factorization for Cholesky-based
    linear solves |'
  prefs: []
  type: TYPE_TB
- en: '| `cho_solve`(c_and_lower, b[, overwrite_b, ...]) | Solve a linear system using
    a Cholesky factorization |'
  prefs: []
  type: TYPE_TB
- en: '| `cholesky`(a[, lower, overwrite_a, check_finite]) | Compute the Cholesky
    decomposition of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| `det`(a[, overwrite_a, check_finite]) | Compute the determinant of a matrix
    |'
  prefs: []
  type: TYPE_TB
- en: '| `eigh`() | Compute eigenvalues and eigenvectors for a Hermitian matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `eigh_tridiagonal`(d, e, *[, eigvals_only, ...]) | Solve the eigenvalue problem
    for a symmetric real tridiagonal matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `expm`(A, *[, upper_triangular, max_squarings]) | Compute the matrix exponential
    |'
  prefs: []
  type: TYPE_TB
- en: '| `expm_frechet`() | Compute the Frechet derivative of the matrix exponential.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `funm`(A, func[, disp]) | Evaluate a matrix-valued function |'
  prefs: []
  type: TYPE_TB
- en: '| `hessenberg`() | Compute the Hessenberg form of the matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `hilbert`(n) | Create a Hilbert matrix of order n. |'
  prefs: []
  type: TYPE_TB
- en: '| `inv`(a[, overwrite_a, check_finite]) | Return the inverse of a square matrix
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lu`() | Compute the LU decomposition |'
  prefs: []
  type: TYPE_TB
- en: '| `lu_factor`(a[, overwrite_a, check_finite]) | Factorization for LU-based
    linear solves |'
  prefs: []
  type: TYPE_TB
- en: '| `lu_solve`(lu_and_piv, b[, trans, ...]) | Solve a linear system using an
    LU factorization |'
  prefs: []
  type: TYPE_TB
- en: '| `polar`(a[, side, method, eps, max_iterations]) | Computes the polar decomposition.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `qr`() | Compute the QR decomposition of an array |'
  prefs: []
  type: TYPE_TB
- en: '| `rsf2csf`(T, Z[, check_finite]) | Convert real Schur form to complex Schur
    form. |'
  prefs: []
  type: TYPE_TB
- en: '| `schur`(a[, output]) | Compute the Schur decomposition |'
  prefs: []
  type: TYPE_TB
- en: '| `solve`(a, b[, lower, overwrite_a, ...]) | Solve a linear system of equations
    |'
  prefs: []
  type: TYPE_TB
- en: '| `solve_triangular`(a, b[, trans, lower, ...]) | Solve a triangular linear
    system of equations |'
  prefs: []
  type: TYPE_TB
- en: '| `sqrtm`(A[, blocksize]) | Compute the matrix square root |'
  prefs: []
  type: TYPE_TB
- en: '| `svd`() | Compute the singular value decomposition. |'
  prefs: []
  type: TYPE_TB
- en: '| `toeplitz`(c[, r]) | Construct a Toeplitz matrix |  ## jax.scipy.ndimage'
  prefs: []
  type: TYPE_NORMAL
- en: '| `map_coordinates`(input, coordinates, order[, ...]) | Map the input array
    to new coordinates using interpolation. |  ## jax.scipy.optimize'
  prefs: []
  type: TYPE_NORMAL
- en: '| `minimize`(fun, x0[, args, tol, options]) | Minimization of scalar function
    of one or more variables. |'
  prefs: []
  type: TYPE_TB
- en: '| `OptimizeResults`(x, success, status, fun, ...) | Object holding optimization
    results. |  ## jax.scipy.signal'
  prefs: []
  type: TYPE_NORMAL
- en: '| `fftconvolve`(in1, in2[, mode, axes]) | Convolve two N-dimensional arrays
    using Fast Fourier Transform (FFT). |'
  prefs: []
  type: TYPE_TB
- en: '| `convolve`(in1, in2[, mode, method, precision]) | Convolution of two N-dimensional
    arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `convolve2d`(in1, in2[, mode, boundary, ...]) | Convolution of two 2-dimensional
    arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `correlate`(in1, in2[, mode, method, precision]) | Cross-correlation of two
    N-dimensional arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `correlate2d`(in1, in2[, mode, boundary, ...]) | Cross-correlation of two
    2-dimensional arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `csd`(x, y[, fs, window, nperseg, noverlap, ...]) | Estimate cross power
    spectral density (CSD) using Welch''s method. |'
  prefs: []
  type: TYPE_TB
- en: '| `detrend`(data[, axis, type, bp, overwrite_data]) | Remove linear or piecewise
    linear trends from data. |'
  prefs: []
  type: TYPE_TB
- en: '| `istft`(Zxx[, fs, window, nperseg, noverlap, ...]) | Perform the inverse
    short-time Fourier transform (ISTFT). |'
  prefs: []
  type: TYPE_TB
- en: '| `stft`(x[, fs, window, nperseg, noverlap, ...]) | Compute the short-time
    Fourier transform (STFT). |'
  prefs: []
  type: TYPE_TB
- en: '| `welch`(x[, fs, window, nperseg, noverlap, ...]) | Estimate power spectral
    density (PSD) using Welch''s method. |  ## jax.scipy.spatial.transform'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Rotation`(quat) | Rotation in 3 dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| `Slerp`(times, timedelta, rotations, rotvecs) | Spherical Linear Interpolation
    of Rotations. |  ## jax.scipy.sparse.linalg'
  prefs: []
  type: TYPE_NORMAL
- en: '| `bicgstab`(A, b[, x0, tol, atol, maxiter, M]) | Use Bi-Conjugate Gradient
    Stable iteration to solve `Ax = b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `cg`(A, b[, x0, tol, atol, maxiter, M]) | Use Conjugate Gradient iteration
    to solve `Ax = b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `gmres`(A, b[, x0, tol, atol, restart, ...]) | GMRES solves the linear system
    A x = b for x, given A and b. |  ## jax.scipy.special'
  prefs: []
  type: TYPE_NORMAL
- en: '| `bernoulli`(n) | Generate the first N Bernoulli numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `beta`() | The beta function |'
  prefs: []
  type: TYPE_TB
- en: '| `betainc`(a, b, x) | The regularized incomplete beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| `betaln`(a, b) | Natural log of the absolute value of the beta function |'
  prefs: []
  type: TYPE_TB
- en: '| `digamma`(x) | The digamma function |'
  prefs: []
  type: TYPE_TB
- en: '| `entr`(x) | The entropy function |'
  prefs: []
  type: TYPE_TB
- en: '| `erf`(x) | The error function |'
  prefs: []
  type: TYPE_TB
- en: '| `erfc`(x) | The complement of the error function |'
  prefs: []
  type: TYPE_TB
- en: '| `erfinv`(x) | The inverse of the error function |'
  prefs: []
  type: TYPE_TB
- en: '| `exp1`(x) | Exponential integral function. |'
  prefs: []
  type: TYPE_TB
- en: '| `expi` | Exponential integral function. |'
  prefs: []
  type: TYPE_TB
- en: '| `expit`(x) | The logistic sigmoid (expit) function |'
  prefs: []
  type: TYPE_TB
- en: '| `expn` | Generalized exponential integral function. |'
  prefs: []
  type: TYPE_TB
- en: '| `factorial`(n[, exact]) | Factorial function |'
  prefs: []
  type: TYPE_TB
- en: '| `gamma`(x) | The gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| `gammainc`(a, x) | The regularized lower incomplete gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| `gammaincc`(a, x) | The regularized upper incomplete gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| `gammaln`(x) | Natural log of the absolute value of the gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| `gammasgn`(x) | Sign of the gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| `hyp1f1` | The 1F1 hypergeometric function. |'
  prefs: []
  type: TYPE_TB
- en: '| `i0`(x) | Modified bessel function of zeroth order. |'
  prefs: []
  type: TYPE_TB
- en: '| `i0e`(x) | Exponentially scaled modified bessel function of zeroth order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `i1`(x) | Modified bessel function of first order. |'
  prefs: []
  type: TYPE_TB
- en: '| `i1e`(x) | Exponentially scaled modified bessel function of first order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `log_ndtr` | Log Normal distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logit` | The logit function |'
  prefs: []
  type: TYPE_TB
- en: '| `logsumexp`() | Log-sum-exp reduction. |'
  prefs: []
  type: TYPE_TB
- en: '| `lpmn`(m, n, z) | The associated Legendre functions (ALFs) of the first kind.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lpmn_values`(m, n, z, is_normalized) | The associated Legendre functions
    (ALFs) of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| `multigammaln`(a, d) | The natural log of the multivariate gamma function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ndtr`(x) | Normal distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `ndtri`(p) | The inverse of the CDF of the Normal distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `poch` | The Pochammer symbol. |'
  prefs: []
  type: TYPE_TB
- en: '| `polygamma`(n, x) | The polygamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| `spence`(x) | Spence''s function, also known as the dilogarithm for real
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| `sph_harm`(m, n, theta, phi[, n_max]) | Computes the spherical harmonics.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `xlog1py` | Compute x*log(1 + y), returning 0 for x=0. |'
  prefs: []
  type: TYPE_TB
- en: '| `xlogy` | Compute x*log(y), returning 0 for x=0. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeta` | The Hurwitz zeta function. |'
  prefs: []
  type: TYPE_TB
- en: '| `kl_div`(p, q) | The Kullback-Leibler divergence. |'
  prefs: []
  type: TYPE_TB
- en: '| `rel_entr`(p, q) | The relative entropy function. |  ## jax.scipy.stats'
  prefs: []
  type: TYPE_NORMAL
- en: '| `mode`(a[, axis, nan_policy, keepdims]) | Compute the mode (most common value)
    along an axis of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `rankdata`(a[, method, axis, nan_policy]) | Compute the rank of data along
    an array axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `sem`(a[, axis, ddof, nan_policy, keepdims]) | Compute the standard error
    of the mean. |'
  prefs: []
  type: TYPE_TB
- en: '### jax.scipy.stats.bernoulli'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(k, p[, loc]) | Bernoulli log probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(k, p[, loc]) | Bernoulli probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(k, p) | Bernoulli cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `ppf`(q, p) | Bernoulli percent point function. |  ### jax.scipy.stats.beta'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, a, b[, loc, scale]) | Beta log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, a, b[, loc, scale]) | Beta probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(x, a, b[, loc, scale]) | Beta cumulative distribution function |'
  prefs: []
  type: TYPE_TB
- en: '| `logcdf`(x, a, b[, loc, scale]) | Beta log cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x, a, b[, loc, scale]) | Beta distribution survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logsf`(x, a, b[, loc, scale]) | Beta distribution log survival function.
    |  ### jax.scipy.stats.betabinom'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(k, n, a, b[, loc]) | Beta-binomial log probability mass function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(k, n, a, b[, loc]) | Beta-binomial probability mass function. |  ###
    jax.scipy.stats.binom'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(k, n, p[, loc]) | Binomial log probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(k, n, p[, loc]) | Binomial probability mass function. |  ### jax.scipy.stats.cauchy'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x[, loc, scale]) | Cauchy log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x[, loc, scale]) | Cauchy probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(x[, loc, scale]) | Cauchy cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logcdf`(x[, loc, scale]) | Cauchy log cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x[, loc, scale]) | Cauchy distribution log survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logsf`(x[, loc, scale]) | Cauchy distribution log survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `isf`(q[, loc, scale]) | Cauchy distribution inverse survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `ppf`(q[, loc, scale]) | Cauchy distribution percent point function. |  ###
    jax.scipy.stats.chi2'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, df[, loc, scale]) | Chi-square log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, df[, loc, scale]) | Chi-square probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(x, df[, loc, scale]) | Chi-square cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logcdf`(x, df[, loc, scale]) | Chi-square log cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x, df[, loc, scale]) | Chi-square survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logsf`(x, df[, loc, scale]) | Chi-square log survival function. |  ### jax.scipy.stats.dirichlet'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, alpha) | Dirichlet log probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, alpha) | Dirichlet probability distribution function. |  ### jax.scipy.stats.expon'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x[, loc, scale]) | Exponential log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x[, loc, scale]) | Exponential probability distribution function. |  ###
    jax.scipy.stats.gamma'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, a[, loc, scale]) | Gamma log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, a[, loc, scale]) | Gamma probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(x, a[, loc, scale]) | Gamma cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logcdf`(x, a[, loc, scale]) | Gamma log cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x, a[, loc, scale]) | Gamma survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logsf`(x, a[, loc, scale]) | Gamma log survival function. |  ### jax.scipy.stats.gennorm'
  prefs: []
  type: TYPE_NORMAL
- en: '| `cdf`(x, beta) | Generalized normal cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logpdf`(x, beta) | Generalized normal log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, beta) | Generalized normal probability distribution function. |  ###
    jax.scipy.stats.geom'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(k, p[, loc]) | Geometric log probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(k, p[, loc]) | Geometric probability mass function. |  ### jax.scipy.stats.laplace'
  prefs: []
  type: TYPE_NORMAL
- en: '| `cdf`(x[, loc, scale]) | Laplace cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logpdf`(x[, loc, scale]) | Laplace log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x[, loc, scale]) | Laplace probability distribution function. |  ###
    jax.scipy.stats.logistic'
  prefs: []
  type: TYPE_NORMAL
- en: '| `cdf`(x[, loc, scale]) | Logistic cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `isf`(x[, loc, scale]) | Logistic distribution inverse survival function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logpdf`(x[, loc, scale]) | Logistic log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x[, loc, scale]) | Logistic probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `ppf`(x[, loc, scale]) | Logistic distribution percent point function. |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x[, loc, scale]) | Logistic distribution survival function. |  ### jax.scipy.stats.multinomial'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(x, n, p) | Multinomial log probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(x, n, p) | Multinomial probability mass function. |  ### jax.scipy.stats.multivariate_normal'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, mean, cov[, allow_singular]) | Multivariate normal log probability
    distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, mean, cov) | Multivariate normal probability distribution function.
    |  ### jax.scipy.stats.nbinom'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(k, n, p[, loc]) | Negative-binomial log probability mass function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(k, n, p[, loc]) | Negative-binomial probability mass function. |  ###
    jax.scipy.stats.norm'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x[, loc, scale]) | Normal log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x[, loc, scale]) | Normal probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(x[, loc, scale]) | Normal cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logcdf`(x[, loc, scale]) | Normal log cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ppf`(q[, loc, scale]) | Normal distribution percent point function. |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x[, loc, scale]) | Normal distribution survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logsf`(x[, loc, scale]) | Normal distribution log survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| `isf`(q[, loc, scale]) | Normal distribution inverse survival function. |  ###
    jax.scipy.stats.pareto'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, b[, loc, scale]) | Pareto log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, b[, loc, scale]) | Pareto probability distribution function. |  ###
    jax.scipy.stats.poisson'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpmf`(k, mu[, loc]) | Poisson log probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pmf`(k, mu[, loc]) | Poisson probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(k, mu[, loc]) | Poisson cumulative distribution function. |  ### jax.scipy.stats.t'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, df[, loc, scale]) | Student''s T log probability distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, df[, loc, scale]) | Student''s T probability distribution function.
    |  ### jax.scipy.stats.truncnorm'
  prefs: []
  type: TYPE_NORMAL
- en: '| `cdf`(x, a, b[, loc, scale]) | Truncated normal cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logcdf`(x, a, b[, loc, scale]) | Truncated normal log cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logpdf`(x, a, b[, loc, scale]) | Truncated normal log probability distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| `logsf`(x, a, b[, loc, scale]) | Truncated normal distribution log survival
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, a, b[, loc, scale]) | Truncated normal probability distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| `sf`(x, a, b[, loc, scale]) | Truncated normal distribution log survival
    function. |  ### jax.scipy.stats.uniform'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x[, loc, scale]) | Uniform log probability distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x[, loc, scale]) | Uniform probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `cdf`(x[, loc, scale]) | Uniform cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `ppf`(q[, loc, scale]) | Uniform distribution percent point function. |'
  prefs: []
  type: TYPE_TB
- en: jax.scipy.stats.gaussian_kde
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| `gaussian_kde`(dataset[, bw_method, weights]) | Gaussian Kernel Density Estimator
    |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.evaluate`(points) | Evaluate the Gaussian KDE on the given
    points. |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.integrate_gaussian`(mean, cov) | Integrate the distribution
    weighted by a Gaussian. |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.integrate_box_1d`(low, high) | Integrate the distribution over
    the given limits. |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.integrate_kde`(other) | Integrate the product of two Gaussian
    KDE distributions. |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.resample`(key[, shape]) | Randomly sample a dataset from the
    estimated pdf |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.pdf`(x) | Probability density function |'
  prefs: []
  type: TYPE_TB
- en: '| `gaussian_kde.logpdf`(x) | Log probability density function |'
  prefs: []
  type: TYPE_TB
- en: '### jax.scipy.stats.vonmises'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, kappa) | von Mises log probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, kappa) | von Mises probability distribution function. |  ### jax.scipy.stats.wrapcauchy'
  prefs: []
  type: TYPE_NORMAL
- en: '| `logpdf`(x, c) | Wrapped Cauchy log probability distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf`(x, c) | Wrapped Cauchy probability distribution function. |'
  prefs: []
  type: TYPE_TB
