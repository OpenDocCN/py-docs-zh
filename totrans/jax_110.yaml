- en: jax.scipy module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.scipy 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.scipy.html`](https://jax.readthedocs.io/en/latest/jax.scipy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.scipy.html`](https://jax.readthedocs.io/en/latest/jax.scipy.html)
- en: '## jax.scipy.cluster'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## jax.scipy.cluster'
- en: '| `vq`(obs, code_book[, check_finite]) | Assign codes from a code book to a
    set of observations. |  ## jax.scipy.fft'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '| `vq`(obs, code_book[, check_finite]) | 将观测值分配给代码簿中的代码。 |  ## jax.scipy.fft'
- en: '| `dct`(x[, type, n, axis, norm]) | Computes the discrete cosine transform
    of the input |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| `dct`(x[, type, n, axis, norm]) | 计算输入的离散余弦变换 |'
- en: '| `dctn`(x[, type, s, axes, norm]) | Computes the multidimensional discrete
    cosine transform of the input |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `dctn`(x[, type, s, axes, norm]) | 计算输入的多维离散余弦变换 |'
- en: '| `idct`(x[, type, n, axis, norm]) | Computes the inverse discrete cosine transform
    of the input |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `idct`(x[, type, n, axis, norm]) | 计算输入的离散余弦变换的逆变换 |'
- en: '| `idctn`(x[, type, s, axes, norm]) | Computes the multidimensional inverse
    discrete cosine transform of the input |  ## jax.scipy.integrate'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '| `idctn`(x[, type, s, axes, norm]) | 计算输入的多维离散余弦变换的逆变换 |  ## jax.scipy.integrate'
- en: '| `trapezoid`(y[, x, dx, axis]) | Integrate along the given axis using the
    composite trapezoidal rule. |  ## jax.scipy.interpolate'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '| `trapezoid`(y[, x, dx, axis]) | 使用复合梯形法则沿指定轴积分。 |  ## jax.scipy.interpolate'
- en: '| `RegularGridInterpolator`(points, values[, ...]) | Interpolate points on
    a regular rectangular grid. |  ## jax.scipy.linalg'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '| `RegularGridInterpolator`(points, values[, ...]) | 对正规矩形网格上的点进行插值。 |  ##
    jax.scipy.linalg'
- en: '| `block_diag`(*arrs) | Create a block diagonal matrix from input arrays. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `block_diag`(*arrs) | 从输入数组创建块对角矩阵。 |'
- en: '| `cho_factor`(a[, lower, overwrite_a, check_finite]) | Factorization for Cholesky-based
    linear solves |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `cho_factor`(a[, lower, overwrite_a, check_finite]) | 基于Cholesky的线性求解因式分解
    |'
- en: '| `cho_solve`(c_and_lower, b[, overwrite_b, ...]) | Solve a linear system using
    a Cholesky factorization |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `cho_solve`(c_and_lower, b[, overwrite_b, ...]) | 使用Cholesky分解解线性系统 |'
- en: '| `cholesky`(a[, lower, overwrite_a, check_finite]) | Compute the Cholesky
    decomposition of a matrix. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky`(a[, lower, overwrite_a, check_finite]) | 计算矩阵的Cholesky分解。 |'
- en: '| `det`(a[, overwrite_a, check_finite]) | Compute the determinant of a matrix
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `det`(a[, overwrite_a, check_finite]) | 计算矩阵的行列式 |'
- en: '| `eigh`() | Compute eigenvalues and eigenvectors for a Hermitian matrix |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `eigh`() | 计算Hermitian矩阵的特征值和特征向量 |'
- en: '| `eigh_tridiagonal`(d, e, *[, eigvals_only, ...]) | Solve the eigenvalue problem
    for a symmetric real tridiagonal matrix |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `eigh_tridiagonal`(d, e, *[, eigvals_only, ...]) | 解对称实三对角矩阵的特征值问题 |'
- en: '| `expm`(A, *[, upper_triangular, max_squarings]) | Compute the matrix exponential
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `expm`(A, *[, upper_triangular, max_squarings]) | 计算矩阵指数 |'
- en: '| `expm_frechet`() | Compute the Frechet derivative of the matrix exponential.
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `expm_frechet`() | 计算矩阵指数的Frechet导数 |'
- en: '| `funm`(A, func[, disp]) | Evaluate a matrix-valued function |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `funm`(A, func[, disp]) | 评估矩阵值函数 |'
- en: '| `hessenberg`() | Compute the Hessenberg form of the matrix |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `hessenberg`() | 计算矩阵的Hessenberg形式 |'
- en: '| `hilbert`(n) | Create a Hilbert matrix of order n. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `hilbert`(n) | 创建阶数为n的Hilbert矩阵。 |'
- en: '| `inv`(a[, overwrite_a, check_finite]) | Return the inverse of a square matrix
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `inv`(a[, overwrite_a, check_finite]) | 返回方阵的逆矩阵 |'
- en: '| `lu`() | Compute the LU decomposition |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `lu`() | 计算LU分解 |'
- en: '| `lu_factor`(a[, overwrite_a, check_finite]) | Factorization for LU-based
    linear solves |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `lu_factor`(a[, overwrite_a, check_finite]) | 基于LU的线性求解因式分解 |'
- en: '| `lu_solve`(lu_and_piv, b[, trans, ...]) | Solve a linear system using an
    LU factorization |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `lu_solve`(lu_and_piv, b[, trans, ...]) | 使用LU分解解线性系统 |'
- en: '| `polar`(a[, side, method, eps, max_iterations]) | Computes the polar decomposition.
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `polar`(a[, side, method, eps, max_iterations]) | 计算极分解 |'
- en: '| `qr`() | Compute the QR decomposition of an array |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `qr`() | 计算数组的QR分解 |'
- en: '| `rsf2csf`(T, Z[, check_finite]) | Convert real Schur form to complex Schur
    form. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `rsf2csf`(T, Z[, check_finite]) | 将实数舒尔形式转换为复数舒尔形式。 |'
- en: '| `schur`(a[, output]) | Compute the Schur decomposition |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `schur`(a[, output]) | 计算舒尔分解 |'
- en: '| `solve`(a, b[, lower, overwrite_a, ...]) | Solve a linear system of equations
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `solve`(a, b[, lower, overwrite_a, ...]) | 解线性方程组 |'
- en: '| `solve_triangular`(a, b[, trans, lower, ...]) | Solve a triangular linear
    system of equations |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `solve_triangular`(a, b[, trans, lower, ...]) | 解上（或下）三角线性方程组 |'
- en: '| `sqrtm`(A[, blocksize]) | Compute the matrix square root |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `sqrtm`(A[, blocksize]) | 计算矩阵的平方根 |'
- en: '| `svd`() | Compute the singular value decomposition. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `svd`() | 计算奇异值分解 |'
- en: '| `toeplitz`(c[, r]) | Construct a Toeplitz matrix |  ## jax.scipy.ndimage'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toeplitz`(c[, r]) | 构造Toeplitz矩阵 |  ## jax.scipy.ndimage'
- en: '| `map_coordinates`(input, coordinates, order[, ...]) | Map the input array
    to new coordinates using interpolation. |  ## jax.scipy.optimize'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '| `map_coordinates`(input, coordinates, order[, ...]) | 使用插值将输入数组映射到新坐标。 |  ##
    jax.scipy.optimize'
- en: '| `minimize`(fun, x0[, args, tol, options]) | Minimization of scalar function
    of one or more variables. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `minimize`(fun, x0[, args, tol, options]) | 最小化一个或多个变量的标量函数。 |'
- en: '| `OptimizeResults`(x, success, status, fun, ...) | Object holding optimization
    results. |  ## jax.scipy.signal'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| `OptimizeResults`(x, success, status, fun, ...) | 优化结果对象。 |  ## jax.scipy.signal'
- en: '| `fftconvolve`(in1, in2[, mode, axes]) | Convolve two N-dimensional arrays
    using Fast Fourier Transform (FFT). |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `fftconvolve`(in1, in2[, mode, axes]) | 使用快速傅里叶变换（FFT）卷积两个N维数组。 |'
- en: '| `convolve`(in1, in2[, mode, method, precision]) | Convolution of two N-dimensional
    arrays. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `convolve`(in1, in2[, mode, method, precision]) | 两个N维数组的卷积。 |'
- en: '| `convolve2d`(in1, in2[, mode, boundary, ...]) | Convolution of two 2-dimensional
    arrays. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `convolve2d`(in1, in2[, mode, boundary, ...]) | 两个二维数组的卷积。 |'
- en: '| `correlate`(in1, in2[, mode, method, precision]) | Cross-correlation of two
    N-dimensional arrays. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `correlate`(in1, in2[, mode, method, precision]) | 两个N维数组的互相关。 |'
- en: '| `correlate2d`(in1, in2[, mode, boundary, ...]) | Cross-correlation of two
    2-dimensional arrays. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `correlate2d`(in1, in2[, mode, boundary, ...]) | 两个二维数组的互相关。 |'
- en: '| `csd`(x, y[, fs, window, nperseg, noverlap, ...]) | Estimate cross power
    spectral density (CSD) using Welch''s method. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `csd`(x, y[, fs, window, nperseg, noverlap, ...]) | 使用Welch方法估计交叉功率谱密度（CSD）。
    |'
- en: '| `detrend`(data[, axis, type, bp, overwrite_data]) | Remove linear or piecewise
    linear trends from data. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `detrend`(data[, axis, type, bp, overwrite_data]) | 从数据中移除线性或分段线性趋势。 |'
- en: '| `istft`(Zxx[, fs, window, nperseg, noverlap, ...]) | Perform the inverse
    short-time Fourier transform (ISTFT). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `istft`(Zxx[, fs, window, nperseg, noverlap, ...]) | 执行逆短时傅里叶变换（ISTFT）。 |'
- en: '| `stft`(x[, fs, window, nperseg, noverlap, ...]) | Compute the short-time
    Fourier transform (STFT). |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `stft`(x[, fs, window, nperseg, noverlap, ...]) | 计算短时傅里叶变换（STFT）。 |'
- en: '| `welch`(x[, fs, window, nperseg, noverlap, ...]) | Estimate power spectral
    density (PSD) using Welch''s method. |  ## jax.scipy.spatial.transform'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '| `welch`(x[, fs, window, nperseg, noverlap, ...]) | 使用Welch方法估计功率谱密度（PSD）。
    |  ## jax.scipy.spatial.transform'
- en: '| `Rotation`(quat) | Rotation in 3 dimensions. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `Rotation`(quat) | 三维旋转。 |'
- en: '| `Slerp`(times, timedelta, rotations, rotvecs) | Spherical Linear Interpolation
    of Rotations. |  ## jax.scipy.sparse.linalg'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Slerp`(times, timedelta, rotations, rotvecs) | 球面线性插值旋转。 |  ## jax.scipy.sparse.linalg'
- en: '| `bicgstab`(A, b[, x0, tol, atol, maxiter, M]) | Use Bi-Conjugate Gradient
    Stable iteration to solve `Ax = b`. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `bicgstab`(A, b[, x0, tol, atol, maxiter, M]) | 使用双共轭梯度稳定迭代解决 `Ax = b`。 |'
- en: '| `cg`(A, b[, x0, tol, atol, maxiter, M]) | Use Conjugate Gradient iteration
    to solve `Ax = b`. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `cg`(A, b[, x0, tol, atol, maxiter, M]) | 使用共轭梯度法解决 `Ax = b`。 |'
- en: '| `gmres`(A, b[, x0, tol, atol, restart, ...]) | GMRES solves the linear system
    A x = b for x, given A and b. |  ## jax.scipy.special'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '| `gmres`(A, b[, x0, tol, atol, restart, ...]) | GMRES解决线性系统 `A x = b`，给定A和b。
    |  ## jax.scipy.special'
- en: '| `bernoulli`(n) | Generate the first N Bernoulli numbers. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `bernoulli`(n) | 生成前N个伯努利数。 |'
- en: '| `beta`() | The beta function |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `beta`() | 贝塔函数 |'
- en: '| `betainc`(a, b, x) | The regularized incomplete beta function. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `betainc`(a, b, x) | 正则化的不完全贝塔函数。 |'
- en: '| `betaln`(a, b) | Natural log of the absolute value of the beta function |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `betaln`(a, b) | 贝塔函数绝对值的自然对数 |'
- en: '| `digamma`(x) | The digamma function |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `digamma`(x) | Digamma函数 |'
- en: '| `entr`(x) | The entropy function |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `entr`(x) | 熵函数 |'
- en: '| `erf`(x) | The error function |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `erf`(x) | 误差函数 |'
- en: '| `erfc`(x) | The complement of the error function |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `erfc`(x) | 误差函数的补函数 |'
- en: '| `erfinv`(x) | The inverse of the error function |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `erfinv`(x) | 误差函数的反函数 |'
- en: '| `exp1`(x) | Exponential integral function. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `exp1`(x) | 指数积分函数。 |'
- en: '| `expi` | Exponential integral function. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `expi` | 指数积分函数。 |'
- en: '| `expit`(x) | The logistic sigmoid (expit) function |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `expit`(x) | 逻辑sigmoid（expit）函数 |'
- en: '| `expn` | Generalized exponential integral function. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `expn` | 广义指数积分函数。 |'
- en: '| `factorial`(n[, exact]) | Factorial function |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `factorial`(n[, exact]) | 阶乘函数 |'
- en: '| `gamma`(x) | The gamma function. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `gamma`(x) | 伽马函数。 |'
- en: '| `gammainc`(a, x) | The regularized lower incomplete gamma function. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `gammainc`(a, x) | 正则化的下不完全伽马函数。 |'
- en: '| `gammaincc`(a, x) | The regularized upper incomplete gamma function. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `gammaincc`(a, x) | 正则化的上不完全伽马函数。 |'
- en: '| `gammaln`(x) | Natural log of the absolute value of the gamma function. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `gammaln`(x) | 伽马函数绝对值的自然对数。 |'
- en: '| `gammasgn`(x) | Sign of the gamma function. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `gammasgn`(x) | 伽马函数的符号。 |'
- en: '| `hyp1f1` | The 1F1 hypergeometric function. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `hyp1f1` | 1F1超几何函数。 |'
- en: '| `i0`(x) | Modified bessel function of zeroth order. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `i0`(x) | 修改贝塞尔函数零阶。 |'
- en: '| `i0e`(x) | Exponentially scaled modified bessel function of zeroth order.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `i0e`(x) | 指数缩放的修改贝塞尔函数零阶。 |'
- en: '| `i1`(x) | Modified bessel function of first order. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `i1`(x) | 修改贝塞尔函数一阶。 |'
- en: '| `i1e`(x) | Exponentially scaled modified bessel function of first order.
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `i1e`(x) | 指数缩放的修改贝塞尔函数一阶。 |'
- en: '| `log_ndtr` | Log Normal distribution function. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `log_ndtr` | 对数正态分布函数。 |'
- en: '| `logit` | The logit function |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `logit` | 对数几率函数。 |'
- en: '| `logsumexp`() | Log-sum-exp reduction. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `logsumexp`() | 对数-总和-指数归约。 |'
- en: '| `lpmn`(m, n, z) | The associated Legendre functions (ALFs) of the first kind.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `lpmn`(m, n, z) | 第一类相关勒让德函数（ALFs）。 |'
- en: '| `lpmn_values`(m, n, z, is_normalized) | The associated Legendre functions
    (ALFs) of the first kind. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `lpmn_values`(m, n, z, is_normalized) | 第一类相关勒让德函数（ALFs）。 |'
- en: '| `multigammaln`(a, d) | The natural log of the multivariate gamma function.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `multigammaln`(a, d) | 多变量伽马函数的自然对数。 |'
- en: '| `ndtr`(x) | Normal distribution function. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `ndtr`(x) | 正态分布函数。 |'
- en: '| `ndtri`(p) | The inverse of the CDF of the Normal distribution function.
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `ndtri`(p) | 正态分布函数的反函数。 |'
- en: '| `poch` | The Pochammer symbol. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `poch` | Pochhammer 符号。 |'
- en: '| `polygamma`(n, x) | The polygamma function. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `polygamma`(n, x) | 多次伽马函数。 |'
- en: '| `spence`(x) | Spence''s function, also known as the dilogarithm for real
    values. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `spence`(x) | 斯宾斯函数，也称实数域下的二元对数函数。 |'
- en: '| `sph_harm`(m, n, theta, phi[, n_max]) | Computes the spherical harmonics.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `sph_harm`(m, n, theta, phi[, n_max]) | 计算球谐函数。 |'
- en: '| `xlog1py` | Compute x*log(1 + y), returning 0 for x=0. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `xlog1py` | 计算 x*log(1 + y)，当 x=0 时返回 0。 |'
- en: '| `xlogy` | Compute x*log(y), returning 0 for x=0. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `xlogy` | 计算 x*log(y)，当 x=0 时返回 0。 |'
- en: '| `zeta` | The Hurwitz zeta function. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `zeta` | 赫维茨 ζ 函数。 |'
- en: '| `kl_div`(p, q) | The Kullback-Leibler divergence. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `kl_div`(p, q) | 库尔巴克-莱布勒散度。 |'
- en: '| `rel_entr`(p, q) | The relative entropy function. |  ## jax.scipy.stats'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '| `rel_entr`(p, q) | 相对熵函数。 |  ## jax.scipy.stats'
- en: '| `mode`(a[, axis, nan_policy, keepdims]) | Compute the mode (most common value)
    along an axis of an array. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `mode`(a[, axis, nan_policy, keepdims]) | 计算数组沿轴的众数（最常见的值）。 |'
- en: '| `rankdata`(a[, method, axis, nan_policy]) | Compute the rank of data along
    an array axis. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `rankdata`(a[, method, axis, nan_policy]) | 计算数组沿轴的排名。 |'
- en: '| `sem`(a[, axis, ddof, nan_policy, keepdims]) | Compute the standard error
    of the mean. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `sem`(a[, axis, ddof, nan_policy, keepdims]) | 计算均值的标准误差。 |'
- en: '### jax.scipy.stats.bernoulli'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '### jax.scipy.stats.bernoulli'
- en: '| `logpmf`(k, p[, loc]) | Bernoulli log probability mass function. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(k, p[, loc]) | 伯努利对数概率质量函数。 |'
- en: '| `pmf`(k, p[, loc]) | Bernoulli probability mass function. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `pmf`(k, p[, loc]) | 伯努利概率质量函数。 |'
- en: '| `cdf`(k, p) | Bernoulli cumulative distribution function. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(k, p) | 伯努利累积分布函数。 |'
- en: '| `ppf`(q, p) | Bernoulli percent point function. |  ### jax.scipy.stats.beta'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '| `ppf`(q, p) | 伯努利百分位点函数。 |  ### jax.scipy.stats.beta'
- en: '| `logpdf`(x, a, b[, loc, scale]) | Beta log probability distribution function.
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, a, b[, loc, scale]) | Beta 对数概率分布函数。 |'
- en: '| `pdf`(x, a, b[, loc, scale]) | Beta probability distribution function. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x, a, b[, loc, scale]) | Beta 概率分布函数。 |'
- en: '| `cdf`(x, a, b[, loc, scale]) | Beta cumulative distribution function |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x, a, b[, loc, scale]) | Beta 累积分布函数。'
- en: '| `logcdf`(x, a, b[, loc, scale]) | Beta log cumulative distribution function.
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `logcdf`(x, a, b[, loc, scale]) | Beta 对数累积分布函数。 |'
- en: '| `sf`(x, a, b[, loc, scale]) | Beta distribution survival function. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `sf`(x, a, b[, loc, scale]) | Beta 分布生存函数。 |'
- en: '| `logsf`(x, a, b[, loc, scale]) | Beta distribution log survival function.
    |  ### jax.scipy.stats.betabinom'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '| `logsf`(x, a, b[, loc, scale]) | Beta 分布对数生存函数。 |  ### jax.scipy.stats.betabinom'
- en: '| `logpmf`(k, n, a, b[, loc]) | Beta-binomial log probability mass function.
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(k, n, a, b[, loc]) | Beta-二项式对数概率质量函数。 |'
- en: '| `pmf`(k, n, a, b[, loc]) | Beta-binomial probability mass function. |  ###
    jax.scipy.stats.binom'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pmf`(k, n, a, b[, loc]) | Beta-二项式概率质量函数。 |  ### jax.scipy.stats.binom'
- en: '| `logpmf`(k, n, p[, loc]) | Binomial log probability mass function. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(k, n, p[, loc]) | 二项式对数概率质量函数。 |'
- en: '| `pmf`(k, n, p[, loc]) | Binomial probability mass function. |  ### jax.scipy.stats.cauchy'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pmf`(k, n, p[, loc]) | 二项式概率质量函数。 |  ### jax.scipy.stats.cauchy'
- en: '| `logpdf`(x[, loc, scale]) | Cauchy log probability distribution function.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x[, loc, scale]) | 柯西对数概率分布函数。 |'
- en: '| `pdf`(x[, loc, scale]) | Cauchy probability distribution function. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x[, loc, scale]) | 柯西概率分布函数。 |'
- en: '| `cdf`(x[, loc, scale]) | Cauchy cumulative distribution function. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x[, loc, scale]) | 柯西累积分布函数。 |'
- en: '| `logcdf`(x[, loc, scale]) | Cauchy log cumulative distribution function.
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `logcdf`(x[, loc, scale]) | 柯西对数累积分布函数。 |'
- en: '| `sf`(x[, loc, scale]) | Cauchy distribution log survival function. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `sf`(x[, loc, scale]) | 柯西分布对数生存函数。 |'
- en: '| `logsf`(x[, loc, scale]) | Cauchy distribution log survival function. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `logsf`(x[, loc, scale]) | 柯西对数生存函数。 |'
- en: '| `isf`(q[, loc, scale]) | Cauchy distribution inverse survival function. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `isf`(q[, loc, scale]) | 柯西分布逆生存函数。 |'
- en: '| `ppf`(q[, loc, scale]) | Cauchy distribution percent point function. |  ###
    jax.scipy.stats.chi2'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '| `ppf`(q[, loc, scale]) | 柯西分布分位点函数。 |  ### jax.scipy.stats.chi2'
- en: '| `logpdf`(x, df[, loc, scale]) | Chi-square log probability distribution function.
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, df[, loc, scale]) | 卡方分布对数概率分布函数。 |'
- en: '| `pdf`(x, df[, loc, scale]) | Chi-square probability distribution function.
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x, df[, loc, scale]) | 卡方概率分布函数。 |'
- en: '| `cdf`(x, df[, loc, scale]) | Chi-square cumulative distribution function.
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x, df[, loc, scale]) | 卡方累积分布函数。 |'
- en: '| `logcdf`(x, df[, loc, scale]) | Chi-square log cumulative distribution function.
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `logcdf`(x, df[, loc, scale]) | 卡方对数累积分布函数。 |'
- en: '| `sf`(x, df[, loc, scale]) | Chi-square survival function. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `sf`(x, df[, loc, scale]) | 卡方生存函数。 |'
- en: '| `logsf`(x, df[, loc, scale]) | Chi-square log survival function. |  ### jax.scipy.stats.dirichlet'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '| `logsf`(x, df[, loc, scale]) | 卡方对数生存函数。 |  ### jax.scipy.stats.dirichlet'
- en: '| `logpdf`(x, alpha) | Dirichlet log probability distribution function. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, alpha) | 狄利克雷对数概率分布函数。 |'
- en: '| `pdf`(x, alpha) | Dirichlet probability distribution function. |  ### jax.scipy.stats.expon'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x, alpha) | 狄利克雷概率分布函数。 |  ### jax.scipy.stats.expon'
- en: '| `logpdf`(x[, loc, scale]) | Exponential log probability distribution function.
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x[, loc, scale]) | 指数对数概率分布函数。 |'
- en: '| `pdf`(x[, loc, scale]) | Exponential probability distribution function. |  ###
    jax.scipy.stats.gamma'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x[, loc, scale]) | 指数概率分布函数。 |  ### jax.scipy.stats.gamma'
- en: '| `logpdf`(x, a[, loc, scale]) | Gamma log probability distribution function.
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, a[, loc, scale]) | 伽玛对数概率分布函数。 |'
- en: '| `pdf`(x, a[, loc, scale]) | Gamma probability distribution function. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x, a[, loc, scale]) | 伽玛概率分布函数。 |'
- en: '| `cdf`(x, a[, loc, scale]) | Gamma cumulative distribution function. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x, a[, loc, scale]) | 伽玛累积分布函数。 |'
- en: '| `logcdf`(x, a[, loc, scale]) | Gamma log cumulative distribution function.
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `logcdf`(x, a[, loc, scale]) | 伽玛对数累积分布函数。 |'
- en: '| `sf`(x, a[, loc, scale]) | Gamma survival function. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `sf`(x, a[, loc, scale]) | 伽玛生存函数。 |'
- en: '| `logsf`(x, a[, loc, scale]) | Gamma log survival function. |  ### jax.scipy.stats.gennorm'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '| `logsf`(x, a[, loc, scale]) | 伽玛对数生存函数。 |  ### jax.scipy.stats.gennorm'
- en: '| `cdf`(x, beta) | Generalized normal cumulative distribution function. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x, beta) | 广义正态累积分布函数。 |'
- en: '| `logpdf`(x, beta) | Generalized normal log probability distribution function.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, beta) | 广义正态对数概率分布函数。 |'
- en: '| `pdf`(x, beta) | Generalized normal probability distribution function. |  ###
    jax.scipy.stats.geom'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x, beta) | 广义正态概率分布函数。 |  ### jax.scipy.stats.geom'
- en: '| `logpmf`(k, p[, loc]) | Geometric log probability mass function. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(k, p[, loc]) | 几何对数概率质量函数。 |'
- en: '| `pmf`(k, p[, loc]) | Geometric probability mass function. |  ### jax.scipy.stats.laplace'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pmf`(k, p[, loc]) | 几何概率质量函数。 |  ### jax.scipy.stats.laplace'
- en: '| `cdf`(x[, loc, scale]) | Laplace cumulative distribution function. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x[, loc, scale]) | 拉普拉斯累积分布函数。 |'
- en: '| `logpdf`(x[, loc, scale]) | Laplace log probability distribution function.
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x[, loc, scale]) | 拉普拉斯对数概率分布函数。 |'
- en: '| `pdf`(x[, loc, scale]) | Laplace probability distribution function. |  ###
    jax.scipy.stats.logistic'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x[, loc, scale]) | 拉普拉斯概率分布函数。 |  ### jax.scipy.stats.logistic'
- en: '| `cdf`(x[, loc, scale]) | Logistic cumulative distribution function. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x[, loc, scale]) | Logistic 累积分布函数。 |'
- en: '| `isf`(x[, loc, scale]) | Logistic distribution inverse survival function.
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `isf`(x[, loc, scale]) | Logistic 分布逆生存函数。 |'
- en: '| `logpdf`(x[, loc, scale]) | Logistic log probability distribution function.
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x[, loc, scale]) | Logistic 对数概率分布函数。 |'
- en: '| `pdf`(x[, loc, scale]) | Logistic probability distribution function. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x[, loc, scale]) | Logistic 概率分布函数。 |'
- en: '| `ppf`(x[, loc, scale]) | Logistic distribution percent point function. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `ppf`(x[, loc, scale]) | Logistic 分位点函数。 |'
- en: '| `sf`(x[, loc, scale]) | Logistic distribution survival function. |  ### jax.scipy.stats.multinomial'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '| `sf`(x[, loc, scale]) | Logistic 分布生存函数。 |  ### jax.scipy.stats.multinomial'
- en: '| `logpmf`(x, n, p) | Multinomial log probability mass function. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(x, n, p) | 多项式对数概率质量函数。 |'
- en: '| `pmf`(x, n, p) | Multinomial probability mass function. |  ### jax.scipy.stats.multivariate_normal'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pmf`(x, n, p) | 多项分布概率质量函数。 |  ### jax.scipy.stats.multivariate_normal'
- en: '| `logpdf`(x, mean, cov[, allow_singular]) | Multivariate normal log probability
    distribution function. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, mean, cov[, allow_singular]) | 多元正态分布对数概率分布函数。 |'
- en: '| `pdf`(x, mean, cov) | Multivariate normal probability distribution function.
    |  ### jax.scipy.stats.nbinom'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x, mean, cov) | 多元正态分布概率分布函数。 |  ### jax.scipy.stats.nbinom'
- en: '| `logpmf`(k, n, p[, loc]) | Negative-binomial log probability mass function.
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(k, n, p[, loc]) | 负二项分布对数概率质量函数。 |'
- en: '| `pmf`(k, n, p[, loc]) | Negative-binomial probability mass function. |  ###
    jax.scipy.stats.norm'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pmf`(k, n, p[, loc]) | 负二项分布概率质量函数。 |  ### jax.scipy.stats.norm'
- en: '| `logpdf`(x[, loc, scale]) | Normal log probability distribution function.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x[, loc, scale]) | 正态分布对数概率分布函数。 |'
- en: '| `pdf`(x[, loc, scale]) | Normal probability distribution function. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x[, loc, scale]) | 正态分布概率分布函数。 |'
- en: '| `cdf`(x[, loc, scale]) | Normal cumulative distribution function. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x[, loc, scale]) | 正态分布累积分布函数。 |'
- en: '| `logcdf`(x[, loc, scale]) | Normal log cumulative distribution function.
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `logcdf`(x[, loc, scale]) | 正态分布对数累积分布函数。 |'
- en: '| `ppf`(q[, loc, scale]) | Normal distribution percent point function. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `ppf`(q[, loc, scale]) | 正态分布百分点函数。 |'
- en: '| `sf`(x[, loc, scale]) | Normal distribution survival function. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `sf`(x[, loc, scale]) | 正态分布生存函数。 |'
- en: '| `logsf`(x[, loc, scale]) | Normal distribution log survival function. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `logsf`(x[, loc, scale]) | 正态分布对数生存函数。 |'
- en: '| `isf`(q[, loc, scale]) | Normal distribution inverse survival function. |  ###
    jax.scipy.stats.pareto'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '| `isf`(q[, loc, scale]) | 正态分布逆生存函数。 |  ### jax.scipy.stats.pareto'
- en: '| `logpdf`(x, b[, loc, scale]) | Pareto log probability distribution function.
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, b[, loc, scale]) | 帕累托对数概率分布函数。 |'
- en: '| `pdf`(x, b[, loc, scale]) | Pareto probability distribution function. |  ###
    jax.scipy.stats.poisson'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x, b[, loc, scale]) | 帕累托分布概率分布函数。 |  ### jax.scipy.stats.poisson'
- en: '| `logpmf`(k, mu[, loc]) | Poisson log probability mass function. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `logpmf`(k, mu[, loc]) | 泊松分布对数概率质量函数。 |'
- en: '| `pmf`(k, mu[, loc]) | Poisson probability mass function. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `pmf`(k, mu[, loc]) | 泊松分布概率质量函数。 |'
- en: '| `cdf`(k, mu[, loc]) | Poisson cumulative distribution function. |  ### jax.scipy.stats.t'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '| `cdf`(k, mu[, loc]) | 泊松分布累积分布函数。 |  ### jax.scipy.stats.t'
- en: '| `logpdf`(x, df[, loc, scale]) | Student''s T log probability distribution
    function. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, df[, loc, scale]) | 学生 t 分布对数概率分布函数。 |'
- en: '| `pdf`(x, df[, loc, scale]) | Student''s T probability distribution function.
    |  ### jax.scipy.stats.truncnorm'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x, df[, loc, scale]) | 学生 t 分布概率分布函数。 |  ### jax.scipy.stats.truncnorm'
- en: '| `cdf`(x, a, b[, loc, scale]) | Truncated normal cumulative distribution function.
    |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x, a, b[, loc, scale]) | 截断正态分布累积分布函数。 |'
- en: '| `logcdf`(x, a, b[, loc, scale]) | Truncated normal log cumulative distribution
    function. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `logcdf`(x, a, b[, loc, scale]) | 截断正态分布对数累积分布函数。 |'
- en: '| `logpdf`(x, a, b[, loc, scale]) | Truncated normal log probability distribution
    function. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, a, b[, loc, scale]) | 截断正态分布对数概率分布函数。 |'
- en: '| `logsf`(x, a, b[, loc, scale]) | Truncated normal distribution log survival
    function. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `logsf`(x, a, b[, loc, scale]) | 截断正态分布对数生存函数。 |'
- en: '| `pdf`(x, a, b[, loc, scale]) | Truncated normal probability distribution
    function. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x, a, b[, loc, scale]) | 截断正态分布概率分布函数。 |'
- en: '| `sf`(x, a, b[, loc, scale]) | Truncated normal distribution log survival
    function. |  ### jax.scipy.stats.uniform'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '| `sf`(x, a, b[, loc, scale]) | 截断正态分布对数生存函数。 |  ### jax.scipy.stats.uniform'
- en: '| `logpdf`(x[, loc, scale]) | Uniform log probability distribution function.
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x[, loc, scale]) | 均匀分布对数概率分布函数。 |'
- en: '| `pdf`(x[, loc, scale]) | Uniform probability distribution function. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x[, loc, scale]) | 均匀分布概率分布函数。 |'
- en: '| `cdf`(x[, loc, scale]) | Uniform cumulative distribution function. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `cdf`(x[, loc, scale]) | 均匀分布累积分布函数。 |'
- en: '| `ppf`(q[, loc, scale]) | Uniform distribution percent point function. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `ppf`(q[, loc, scale]) | 均匀分布百分点函数。 |'
- en: jax.scipy.stats.gaussian_kde
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jax.scipy.stats.gaussian_kde
- en: '| `gaussian_kde`(dataset[, bw_method, weights]) | Gaussian Kernel Density Estimator
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde`(dataset[, bw_method, weights]) | 高斯核密度估计器 |'
- en: '| `gaussian_kde.evaluate`(points) | Evaluate the Gaussian KDE on the given
    points. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.evaluate`(points) | 对给定点评估高斯核密度估计器。 |'
- en: '| `gaussian_kde.integrate_gaussian`(mean, cov) | Integrate the distribution
    weighted by a Gaussian. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.integrate_gaussian`(mean, cov) | 加权高斯积分分布。 |'
- en: '| `gaussian_kde.integrate_box_1d`(low, high) | Integrate the distribution over
    the given limits. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.integrate_box_1d`(low, high) | 在给定限制下积分分布。 |'
- en: '| `gaussian_kde.integrate_kde`(other) | Integrate the product of two Gaussian
    KDE distributions. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.integrate_kde`(other) | 集成两个高斯核密度估计分布的乘积。 |'
- en: '| `gaussian_kde.resample`(key[, shape]) | Randomly sample a dataset from the
    estimated pdf |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.resample`(key[, shape]) | 从估计的概率密度函数中随机采样数据集 |'
- en: '| `gaussian_kde.pdf`(x) | Probability density function |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.pdf`(x) | 概率密度函数 |'
- en: '| `gaussian_kde.logpdf`(x) | Log probability density function |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_kde.logpdf`(x) | 对数概率密度函数 |'
- en: '### jax.scipy.stats.vonmises'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '### jax.scipy.stats.vonmises'
- en: '| `logpdf`(x, kappa) | von Mises log probability distribution function. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, kappa) | von Mises 对数概率分布函数。 |'
- en: '| `pdf`(x, kappa) | von Mises probability distribution function. |  ### jax.scipy.stats.wrapcauchy'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pdf`(x, kappa) | von Mises 概率分布函数。 |  ### jax.scipy.stats.wrapcauchy'
- en: '| `logpdf`(x, c) | Wrapped Cauchy log probability distribution function. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `logpdf`(x, c) | Wrapped Cauchy 对数概率分布函数。 |'
- en: '| `pdf`(x, c) | Wrapped Cauchy probability distribution function. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`(x, c) | Wrapped Cauchy 概率分布函数。 |'
