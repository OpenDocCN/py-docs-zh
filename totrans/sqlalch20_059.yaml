- en: ORM Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/events.html](https://docs.sqlalchemy.org/en/20/orm/events.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ORM includes a wide variety of hooks available for subscription.
  prefs: []
  type: TYPE_NORMAL
- en: For an introduction to the most commonly used ORM events, see the section [Tracking
    queries, object and Session Changes with Events](session_events.html). The event
    system in general is discussed at [Events](../core/event.html). Non-ORM events
    such as those regarding connections and low-level statement execution are described
    in [Core Events](../core/events.html).
  prefs: []
  type: TYPE_NORMAL
- en: Session Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic event hooks are available at the level of the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. The types of things that are intercepted here
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Persistence Operations** - the ORM flush process that sends changes to the
    database can be extended using events that fire off at different parts of the
    flush, to augment or modify the data being sent to the database or to allow other
    things to happen when persistence occurs. Read more about persistence events at
    [Persistence Events](session_events.html#session-persistence-events).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object lifecycle events** - hooks when objects are added, persisted, deleted
    from sessions. Read more about these at [Object Lifecycle Events](session_events.html#session-lifecycle-events).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution Events** - Part of the [2.0 style](../glossary.html#term-2.0-style)
    execution model, all SELECT statements against ORM entities emitted, as well as
    bulk UPDATE and DELETE statements outside of the flush process, are intercepted
    from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method using the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") method. Read more about this event
    at [Execute Events](session_events.html#session-execute-events).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be sure to read the [Tracking queries, object and Session Changes with Events](session_events.html)
    chapter for context on these events.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [SessionEvents](#sqlalchemy.orm.SessionEvents) | Define events specific to
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    lifecycle. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Define events specific to [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The [`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    function will accept [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects as well as the return result of [`sessionmaker()`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`scoped_session()`](contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it accepts the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which will apply listeners to all [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`raw=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, the “target” argument passed to applicable event listener functions
    that work on individual objects will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.14.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`restore_load_context=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applies to the [`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") event. Restores the loader
    context of the object when the event hook is complete, so that ongoing eager load
    operations continue to target the object appropriately. A warning is emitted if
    the object is moved to a new loader context from within this event if this flag
    is not set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.14.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_attach()](#sqlalchemy.orm.SessionEvents.after_attach), [after_begin()](#sqlalchemy.orm.SessionEvents.after_begin),
    [after_bulk_delete()](#sqlalchemy.orm.SessionEvents.after_bulk_delete), [after_bulk_update()](#sqlalchemy.orm.SessionEvents.after_bulk_update),
    [after_commit()](#sqlalchemy.orm.SessionEvents.after_commit), [after_flush()](#sqlalchemy.orm.SessionEvents.after_flush),
    [after_flush_postexec()](#sqlalchemy.orm.SessionEvents.after_flush_postexec),
    [after_rollback()](#sqlalchemy.orm.SessionEvents.after_rollback), [after_soft_rollback()](#sqlalchemy.orm.SessionEvents.after_soft_rollback),
    [after_transaction_create()](#sqlalchemy.orm.SessionEvents.after_transaction_create),
    [after_transaction_end()](#sqlalchemy.orm.SessionEvents.after_transaction_end),
    [before_attach()](#sqlalchemy.orm.SessionEvents.before_attach), [before_commit()](#sqlalchemy.orm.SessionEvents.before_commit),
    [before_flush()](#sqlalchemy.orm.SessionEvents.before_flush), [deleted_to_detached()](#sqlalchemy.orm.SessionEvents.deleted_to_detached),
    [deleted_to_persistent()](#sqlalchemy.orm.SessionEvents.deleted_to_persistent),
    [detached_to_persistent()](#sqlalchemy.orm.SessionEvents.detached_to_persistent),
    [dispatch](#sqlalchemy.orm.SessionEvents.dispatch), [do_orm_execute()](#sqlalchemy.orm.SessionEvents.do_orm_execute),
    [loaded_as_persistent()](#sqlalchemy.orm.SessionEvents.loaded_as_persistent),
    [pending_to_persistent()](#sqlalchemy.orm.SessionEvents.pending_to_persistent),
    [pending_to_transient()](#sqlalchemy.orm.SessionEvents.pending_to_transient),
    [persistent_to_deleted()](#sqlalchemy.orm.SessionEvents.persistent_to_deleted),
    [persistent_to_detached()](#sqlalchemy.orm.SessionEvents.persistent_to_detached),
    [persistent_to_transient()](#sqlalchemy.orm.SessionEvents.persistent_to_transient),
    [transient_to_pending()](#sqlalchemy.orm.SessionEvents.transient_to_pending)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SessionEvents`](#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Execute after an instance is attached to a session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is called after an add, delete or merge.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As of 0.8, this event fires off *after* the item has been fully associated with
    the session, which is different than previous releases. For event handlers that
    require the object not yet be part of session state (such as handlers which may
    autoflush while the target object is not yet complete) consider the new [`before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach") event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Execute after a transaction is begun on a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This event is called within the process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") modifying its own internal state. To invoke SQL operations
    within this hook, use the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") provided to the event; do not run SQL operations
    using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object which will be used for SQL statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Event for after the legacy [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") method has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") event now accepts the arguments
    [`SessionEvents.after_bulk_delete.delete_context`](#sqlalchemy.orm.SessionEvents.after_bulk_delete.params.delete_context
    "sqlalchemy.orm.SessionEvents.after_bulk_delete"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**delete_context** –'
  prefs: []
  type: TYPE_NORMAL
- en: 'a “delete context” object which contains details about the update, including
    these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk DELETE operation.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Event for after the legacy [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") event now accepts the arguments
    [`SessionEvents.after_bulk_update.update_context`](#sqlalchemy.orm.SessionEvents.after_bulk_update.params.update_context
    "sqlalchemy.orm.SessionEvents.after_bulk_update"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**update_context** –'
  prefs: []
  type: TYPE_NORMAL
- en: 'an “update context” object which contains details about the update, including
    these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`values` The “values” dictionary that was passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk UPDATE operation.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Execute after a commit has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in an active transaction when the [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event is invoked, and therefore can
    not emit SQL. To emit SQL corresponding to every transaction, use the [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Execute after flush has completed, but before commit has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that the session’s state is still in pre-flush, i.e. ‘new’, ‘dirty’, and
    ‘deleted’ lists still show pre-flush state as well as the history settings on
    instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This event runs after the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has emitted SQL to modify the database, but **before**
    it has altered its internal state to reflect those changes, including that newly
    inserted objects are placed into the identity map. ORM operations emitted within
    this event such as loads of related items may produce new identity map entries
    that will immediately be replaced, sometimes causing confusing results. SQLAlchemy
    will emit a warning for this condition as of version 1.3.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Execute after flush has completed, and after the post-exec state occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will be when the ‘new’, ‘dirty’, and ‘deleted’ lists are in their final
    state. An actual commit() may or may not have occurred, depending on whether or
    not the flush started its own transaction or participated in a larger transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Execute after a real DBAPI rollback has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that this event only fires when the *actual* rollback against the database
    occurs - it does *not* fire each time the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method is called, if the underlying DBAPI transaction
    has already been rolled back. In many cases, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not be in an “active” state during this event,
    as the current transaction is not valid. To acquire a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which is active after the outermost rollback has proceeded,
    use the [`SessionEvents.after_soft_rollback()`](#sqlalchemy.orm.SessionEvents.after_soft_rollback
    "sqlalchemy.orm.SessionEvents.after_soft_rollback") event, checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Execute after any rollback has occurred, including “soft” rollbacks that don’t
    actually emit at the DBAPI level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This corresponds to both nested and outer rollbacks, i.e. the innermost rollback
    that calls the DBAPI’s rollback() method, as well as the enclosing rollback calls
    that only pop themselves from the transaction stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can be used to invoke SQL and [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") operations after an outermost rollback by first
    checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") transactional marker object which was just
    closed. The current [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") for the given [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is available via the `Session.transaction` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Execute when a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This event differs from [`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin
    "sqlalchemy.orm.SessionEvents.after_begin") in that it occurs for each [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") overall, as opposed to when transactions
    are begun on individual database connections. It is also invoked for nested transactions
    and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end") event (assuming normal operation
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Execute when the span of a [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") ends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This event differs from [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") in that it corresponds to all [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") objects in use, including those for nested
    transactions and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Execute before an instance is attached to a session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is called before an add, delete or merge causes the object to be part of
    the session.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Execute before commit is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Execute before flush process has started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instances` – Usually `None`, this is the collection of objects which can be
    passed to the [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") method (note this usage is deprecated).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “deleted to detached” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked when a deleted object is evicted from the session. The
    typical case when this occurs is when the transaction for a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in which the object was deleted is committed; the object
    moves from the deleted state to the detached state.
  prefs: []
  type: TYPE_NORMAL
- en: It is also invoked for objects that were deleted in a flush when the [`Session.expunge_all()`](session_api.html#sqlalchemy.orm.Session.expunge_all
    "sqlalchemy.orm.Session.expunge_all") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") events are called, as well as if the object is
    individually expunged from its deleted state via [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “deleted to persistent” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This transition occurs only when an object that’s been deleted successfully
    in a flush is restored due to a call to [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"). The event is not called under any other circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “detached to persistent” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call, as well as during the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") call if the object was not previously associated
    with the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (note that an object marked as “deleted” remains in the “persistent” state until
    the flush proceeds).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the object becomes persistent as part of a call to [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete"), the object is **not** yet marked as deleted
    when this event is called. To detect deleted objects, check the `deleted` flag
    sent to the [`SessionEvents.persistent_to_detached()`](#sqlalchemy.orm.SessionEvents.persistent_to_detached
    "sqlalchemy.orm.SessionEvents.persistent_to_detached") to event after the flush
    proceeds, or check the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection within the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") event if deleted objects need to
    be intercepted before the flush.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Intercept statement executions that occur on behalf of an ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked for all top-level SQL statements invoked from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as well as related methods such as [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") and [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar"). As of SQLAlchemy 1.4, all ORM queries that run
    through the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method as well as related methods [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") etc. will participate in this event. This event
    hook does **not** apply to the queries that are emitted internally within the
    ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook is triggered **for ORM
    statement executions only**, meaning those invoked via the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and similar methods on the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. It does **not** trigger for statements that
    are invoked by SQLAlchemy Core only, i.e. statements invoked directly using [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or otherwise originating from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object without any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") involved. To intercept **all** SQL executions regardless
    of whether the Core or ORM APIs are in use, see the event hooks at [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"), such as [`ConnectionEvents.before_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute").
  prefs: []
  type: TYPE_NORMAL
- en: Also, this event hook does **not** apply to queries that are emitted internally
    within the ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing);
    to intercept steps within the flush process, see the event hooks described at
    [Persistence Events](session_events.html#session-persistence-events) as well as
    [Mapper-level Flush Events](session_events.html#session-persistence-mapper).
  prefs: []
  type: TYPE_NORMAL
- en: This event is a `do_` event, meaning it has the capability to replace the operation
    that the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method normally performs. The intended use for
    this includes sharding and result-caching schemes which may seek to invoke the
    same statement across multiple database connections, returning a result that is
    merged from each of them, or which don’t invoke the statement at all, instead
    returning data from a cache.
  prefs: []
  type: TYPE_NORMAL
- en: The hook intends to replace the use of the `Query._execute_and_instances` method
    that could be subclassed prior to SQLAlchemy 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orm_execute_state** – an instance of [`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState") which contains all information about the current
    execution, as well as helper functions used to derive other commonly required
    information. See that object for details.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    - the object passed to the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event which contains all information
    about the statement to be invoked. It also provides an interface to extend the
    current statement, options, and parameters as well as an option that allows programmatic
    invocation of the statement at any point.'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Query Events](examples.html#examples-session-orm-events) - includes examples
    of using [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Dogpile Caching](examples.html#examples-caching) - an example of how to integrate
    Dogpile caching with the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") making use of the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Horizontal Sharding](examples.html#examples-sharding) - the Horizontal Sharding
    example / extension relies upon the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook to invoke a SQL statement
    on multiple backends and return a merged result.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “loaded as persistent” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked within the ORM loading process, and is invoked very similarly
    to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event. However, the event here is linkable to a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class or instance, rather than to a mapper or class
    hierarchy, and integrates with the other session lifecycle events smoothly. The
    object is guaranteed to be present in the session’s identity map when this event
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") parameter, which works in the same manner as that
    of [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents"), in order to resolve this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “pending to persistent”” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked within the flush process, and is similar to scanning the
    [`Session.new`](session_api.html#sqlalchemy.orm.Session.new "sqlalchemy.orm.Session.new")
    collection within the [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") event. However, in this case the object
    has already been moved to the persistent state when the event is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “pending to transient” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This less common transition occurs when an pending object that has not been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction, or when
    the [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge "sqlalchemy.orm.Session.expunge")
    method is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “persistent to deleted” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked when a persistent object’s identity is deleted from the
    database within a flush, however the object still remains associated with the
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    until the transaction completes.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction is rolled back, the object moves again to the persistent
    state, and the [`SessionEvents.deleted_to_persistent()`](#sqlalchemy.orm.SessionEvents.deleted_to_persistent
    "sqlalchemy.orm.SessionEvents.deleted_to_persistent") event is called. If the
    transaction is committed, the object becomes detached, which will emit the [`SessionEvents.deleted_to_detached()`](#sqlalchemy.orm.SessionEvents.deleted_to_detached
    "sqlalchemy.orm.SessionEvents.deleted_to_detached") event.
  prefs: []
  type: TYPE_NORMAL
- en: Note that while the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method is the primary public interface to mark
    an object as deleted, many objects get deleted due to cascade rules, which are
    not always determined until flush time. Therefore, there’s no way to catch every
    object that will be deleted until the flush has proceeded. the [`SessionEvents.persistent_to_deleted()`](#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event is therefore invoked
    at the end of a flush.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “persistent to detached” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is invoked when a persistent object is evicted from the session.
    There are many conditions that cause this to happen, including:'
  prefs: []
  type: TYPE_NORMAL
- en: using a method such as [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method, when the object was part of an INSERT
    statement for that session’s transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleted` – boolean. If True, indicates this object moved to the detached state
    because it was marked as deleted and flushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “persistent to transient” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This less common transition occurs when an pending object that has has been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “transient to pending” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: Mapper Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mapper event hooks encompass things that happen as related to individual or
    multiple [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects, which are the central configurational object that maps a user-defined
    class to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. Types of things which occur at the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Per-object persistence operations** - the most popular mapper hooks are the
    unit-of-work hooks such as [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update"), etc. These events are contrasted
    to the more coarse grained session-level events such as [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") in that they occur within the flush
    process on a per-object basis; while finer grained activity on an object is more
    straightforward, availability of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") features is limited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mapper configuration events** - the other major class of mapper hooks are
    those which occur as a class is mapped, as a mapper is finalized, and when sets
    of mappers are configured to refer to each other. These events include [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class"), [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") at the individual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level, and [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") at the level of collections of
    [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [MapperEvents](#sqlalchemy.orm.MapperEvents) | Define events specific to
    mappings. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Define events specific to mappings.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Available targets include:'
  prefs: []
  type: TYPE_NORMAL
- en: mapped classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapper events provide hooks into critical sections of the mapper, including
    those related to object instrumentation, object loading, and object persistence.
    In particular, the persistence methods [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), and [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") are popular places to augment the
    state being persisted - however, these methods operate with several significant
    restrictions. The user is encouraged to evaluate the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") and [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") methods as more flexible and user-friendly
    hooks in which to apply additional database state during a flush.
  prefs: []
  type: TYPE_NORMAL
- en: When using [`MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting mappers and/or the mappers of inheriting classes, as well as any mapper
    which is the target of this listener.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retval=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'when True, the user-defined event function must have a return value, the purpose
    of which is either to control subsequent event propagation, or to otherwise alter
    the operation in progress by the mapper. Possible return values are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sqlalchemy.orm.interfaces.EXT_CONTINUE` - continue event processing normally.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlalchemy.orm.interfaces.EXT_STOP` - cancel all subsequent event handlers
    in the chain.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: other values - the return value specified by specific listeners.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_configured()](#sqlalchemy.orm.MapperEvents.after_configured), [after_delete()](#sqlalchemy.orm.MapperEvents.after_delete),
    [after_insert()](#sqlalchemy.orm.MapperEvents.after_insert), [after_mapper_constructed()](#sqlalchemy.orm.MapperEvents.after_mapper_constructed),
    [after_update()](#sqlalchemy.orm.MapperEvents.after_update), [before_configured()](#sqlalchemy.orm.MapperEvents.before_configured),
    [before_delete()](#sqlalchemy.orm.MapperEvents.before_delete), [before_insert()](#sqlalchemy.orm.MapperEvents.before_insert),
    [before_mapper_configured()](#sqlalchemy.orm.MapperEvents.before_mapper_configured),
    [before_update()](#sqlalchemy.orm.MapperEvents.before_update), [dispatch](#sqlalchemy.orm.MapperEvents.dispatch),
    [instrument_class()](#sqlalchemy.orm.MapperEvents.instrument_class), [mapper_configured()](#sqlalchemy.orm.MapperEvents.mapper_configured)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Called after a series of mappers have been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, after the function has completed its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this event to the [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, which is called on a per-mapper
    basis while the configuration operation proceeds; unlike that event, when this
    event is invoked, all cross-configurations (e.g. backrefs) will also have been
    made available for any mappers that were pending. Also contrast to [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), which is invoked before the
    series of mappers has been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers have been affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after a DELETE statement has been emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class after their
    DELETE statements have been emitted at once in a previous step.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after an INSERT statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify in-Python-only state on the instance after an INSERT
    occurs, as well as to emit additional SQL statements on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class after their
    INSERT statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Receive a class and mapper when the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has been fully constructed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: This event is called after the initial constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") completes. This occurs after the [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event and after the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has done an initial pass of its arguments to generate
    its collection of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects, which are accessible via the [`Mapper.get_property()`](mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method and the [`Mapper.iterate_properties`](mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: This event differs from the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event in that it is invoked
    within the constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    rather than within the [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Currently, this event is the only
    one which is appropriate for handlers that wish to create additional mapped classes
    in response to the construction of this [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), which will be part of the same configure step when [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") next runs.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Versioning Objects](examples.html#examples-versioning) - an example which
    illustrates the use of the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event to create new mappers
    to record change-audit histories on objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after an UPDATE statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify in-Python-only state on the instance after an UPDATE
    occurs, as well as to emit additional SQL statements on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*, and for which no
    UPDATE statement has proceeded. An object is marked as dirty when any of its column-based
    attributes have a “set attribute” operation called or when any of its collections
    are modified. If, at update time, no column-based attributes have any net changes,
    no UPDATE statement will be issued. This means that an instance being sent to
    [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update "sqlalchemy.orm.MapperEvents.after_update")
    is *not* a guarantee that an UPDATE statement has been issued.
  prefs: []
  type: TYPE_NORMAL
- en: To detect if the column-based attributes on the object have net changes, and
    therefore resulted in an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class after their
    UPDATE statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Called before a series of mappers have been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, before the function has done any of its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Contrast this event to [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which is invoked after the series
    of mappers has been configured, as well as [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), which are both invoked on a
    per-mapper basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers are to be affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance before a DELETE statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class before their
    DELETE statements are emitted at once in a later step.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance before an INSERT statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify local, non-object related attributes on the instance
    before an INSERT occurs, as well as to emit additional SQL statements on the given
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class before their
    INSERT statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Called right before a specific mapper is to be configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: This event is intended to allow a specific mapper to be skipped during the configure
    step, by returning the `interfaces.EXT_SKIP` symbol which indicates to the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call that this particular mapper (or hierarchy
    of mappers, if `propagate=True` is used) should be skipped in the current configuration
    run. When one or more mappers are skipped, the he “new mappers” flag will remain
    set, meaning the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function will continue to be called when mappers
    are used, to continue to try to configure all available mappers.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison to the other configure-level events, [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), the :meth;`.MapperEvents.before_mapper_configured`
    event provides for a meaningful return value when it is registered with the `retval=True`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance before an UPDATE statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify local, non-object related attributes on the instance
    before an UPDATE occurs, as well as to emit additional SQL statements on the given
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*. An object is marked
    as dirty when any of its column-based attributes have a “set attribute” operation
    called or when any of its collections are modified. If, at update time, no column-based
    attributes have any net changes, no UPDATE statement will be issued. This means
    that an instance being sent to [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") is *not* a guarantee that an UPDATE
    statement will be issued, although you can affect the outcome here by modifying
    attributes so that a net change in value does exist.
  prefs: []
  type: TYPE_NORMAL
- en: To detect if the column-based attributes on the object have net changes, and
    will therefore generate an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class before their
    UPDATE statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Receive a class when the mapper is first constructed, before instrumentation
    is applied to the mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: This event is the earliest phase of mapper construction. Most attributes of
    the mapper are not yet initialized. To receive an event within initial mapper
    construction where basic state is available such as the [`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection, the [`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event may be a better
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'This listener can either be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class overall, or to any un-mapped class which serves
    as a base for classes that will be mapped (using the `propagate=True` flag):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_` – the mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Called when a specific mapper has completed its own configuration within the
    scope of the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event is invoked for each mapper
    that is encountered when the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function proceeds through the current list
    of not-yet-configured mappers. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  prefs: []
  type: TYPE_NORMAL
- en: When the event is called, the mapper should be in its final state, but **not
    including backrefs** that may be invoked from other mappers; they might still
    be pending within the configuration operation. Bidirectional relationships that
    are instead configured via the [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") argument *will* be fully available, since this
    style of relationship does not rely upon other possibly-not-configured mappers
    to know that they exist.
  prefs: []
  type: TYPE_NORMAL
- en: For an event that is guaranteed to have **all** mappers ready to go including
    backrefs that are defined only on other mappings, use the [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event; this event invokes only
    after all known mappings have been fully configured.
  prefs: []
  type: TYPE_NORMAL
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, unlike [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), is called for each mapper/class
    individually, and the mapper is passed to the event itself. It also is called
    exactly once for a particular mapper. The event is therefore useful for configurational
    steps that benefit from being invoked just once on a specific mapper basis, which
    don’t require that “backref” configurations are necessarily ready yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_` – the mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: Instance Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instance events are focused on the construction of ORM mapped instances, including
    when they are instantiated as [transient](../glossary.html#term-transient) objects,
    when they are loaded from the database and become [persistent](../glossary.html#term-persistent)
    objects, as well as when database refresh or expiration operations occur on the
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [InstanceEvents](#sqlalchemy.orm.InstanceEvents) | Define events specific
    to object lifecycle. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Define events specific to object lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Available targets include:'
  prefs: []
  type: TYPE_NORMAL
- en: mapped classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instance events are closely related to mapper events, but are more specific
    to the instance and its instrumentation, rather than its system of persistence.
  prefs: []
  type: TYPE_NORMAL
- en: When using [`InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting classes as well as the class which is the target of this listener.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restore_load_context=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applies to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") and [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") events. Restores the loader context of
    the object when the event hook is complete, so that ongoing eager load operations
    continue to target the object appropriately. A warning is emitted if the object
    is moved to a new loader context from within one of these events if this flag
    is not set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.14.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispatch](#sqlalchemy.orm.InstanceEvents.dispatch), [expire()](#sqlalchemy.orm.InstanceEvents.expire),
    [first_init()](#sqlalchemy.orm.InstanceEvents.first_init), [init()](#sqlalchemy.orm.InstanceEvents.init),
    [init_failure()](#sqlalchemy.orm.InstanceEvents.init_failure), [load()](#sqlalchemy.orm.InstanceEvents.load),
    [pickle()](#sqlalchemy.orm.InstanceEvents.pickle), [refresh()](#sqlalchemy.orm.InstanceEvents.refresh),
    [refresh_flush()](#sqlalchemy.orm.InstanceEvents.refresh_flush), [unpickle()](#sqlalchemy.orm.InstanceEvents.unpickle)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after its attributes or some subset have been expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: ‘keys’ is a list of attribute names. If None, the entire state was expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` – sequence of attribute names which were expired, or None if all attributes
    were expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Called when the first instance of a particular mapping is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: This event is called when the `__init__` method of a class is called the first
    time for that particular class. The event invokes before `__init__` actually proceeds
    as well as before the [`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init
    "sqlalchemy.orm.InstanceEvents.init") event is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Receive an instance when its constructor is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database; see the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") event in order to intercept a database load.
  prefs: []
  type: TYPE_NORMAL
- en: The event is called before the actual `__init__` constructor of the object is
    called. The `kwargs` dictionary may be modified in-place in order to affect what
    is passed to `__init__`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` – positional arguments passed to the `__init__` method. This is passed
    as a tuple and is currently immutable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` – keyword arguments passed to the `__init__` method. This structure
    *can* be altered in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.init_failure()`](#sqlalchemy.orm.InstanceEvents.init_failure
    "sqlalchemy.orm.InstanceEvents.init_failure")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Receive an instance when its constructor has been called, and raised an exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database.
  prefs: []
  type: TYPE_NORMAL
- en: The event is invoked after an exception raised by the `__init__` method is caught.
    After the event is invoked, the original exception is re-raised outwards, so that
    the construction of the object still raises an exception. The actual exception
    and stack trace raised should be present in `sys.exc_info()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` – positional arguments that were passed to the `__init__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` – keyword arguments that were passed to the `__init__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after it has been created via `__new__`, and after
    initial attribute population has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: This typically occurs when the instance is created based on incoming result
    rows, and is only called once for that instance’s lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: During a result-row load, this event is invoked when the first row received
    for this instance is processed. When using eager loading with collection-oriented
    attributes, the additional rows that are to be loaded / processed in order to
    load subsequent collection items have not occurred yet. This has the effect both
    that collections will not be fully loaded, as well as that if an operation occurs
    within this event handler that emits another database load operation for the object,
    the “loading context” for the object can change and interfere with the existing
    eager loaders still in progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of what can cause the “loading context” to change within the event
    handler include, but are not necessarily limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: accessing deferred attributes that weren’t part of the row, will trigger an
    “undefer” operation and refresh the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: accessing attributes on a joined-inheritance subclass that weren’t part of the
    row, will trigger a refresh operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As of SQLAlchemy 1.3.14, a warning is emitted when this occurs. The [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") option may be used on the event to prevent this
    warning; this will ensure that the existing loading context is maintained for
    the object after the event is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.3.14: Added [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") flags which apply to “on load” events, which will
    ensure that the loading context for an object is restored when the event hook
    is complete; a warning is emitted if the load context of the object changes without
    this flag being set.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event is also available in a class-method decorator format called [`reconstructor()`](mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress. This argument may be `None` if the load does
    not correspond to a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query"),
    such as during [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance when its associated state is being pickled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state_dict` – the dictionary returned by `__getstate__`, containing the state
    to be pickled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after one or more attributes have been refreshed
    from a query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Contrast this to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") method, which is invoked when the object
    is first loaded from a query.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") parameter, in order to resolve this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` – sequence of attribute names which were populated, or None if all
    column-mapped, non-deferred attributes were populated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after one or more attributes that contain a column-level
    default or onupdate handler have been refreshed during persistence of the object’s
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: This event is the same as [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") except it is invoked within the unit
    of work flush process, and includes only non-primary-key columns that have column
    level default or onupdate handlers, including Python callables as well as server
    side defaults and triggers which may be fetched via the RETURNING clause.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While the [`InstanceEvents.refresh_flush()`](#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") event is triggered for an object
    that was INSERTed as well as for an object that was UPDATEd, the event is geared
    primarily towards the UPDATE process; it is mostly an internal artifact that INSERT
    actions can also trigger this event, and note that **primary key columns for an
    INSERTed row are explicitly omitted** from this event. In order to intercept the
    newly INSERTed state of an object, the [`SessionEvents.pending_to_persistent()`](#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") and [`MapperEvents.after_insert()`](#sqlalchemy.orm.MapperEvents.after_insert
    "sqlalchemy.orm.MapperEvents.after_insert") are better choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` – sequence of attribute names which were populated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Server-Generated Defaults](persistence_techniques.html#orm-server-defaults)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](../core/defaults.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after its associated state has been unpickled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state_dict` – the dictionary sent to `__setstate__`, containing the state
    dictionary which was pickled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Attribute Events'
  prefs: []
  type: TYPE_NORMAL
- en: Attribute events are triggered as things occur on individual attributes of ORM
    mapped objects. These events form the basis for things like [custom validation
    functions](mapped_attributes.html#simple-validators) as well as [backref handlers](backref.html#relationships-backref).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Changing Attribute Behavior](mapped_attributes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AttributeEvents](#sqlalchemy.orm.AttributeEvents) | Define events for object
    attributes. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Define events for object attributes.
  prefs: []
  type: TYPE_NORMAL
- en: These are typically defined on the class-bound descriptor for the target class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to register a listener that will receive the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Listeners have the option to return a possibly modified version of the value,
    when the [`AttributeEvents.retval`](#sqlalchemy.orm.AttributeEvents.params.retval
    "sqlalchemy.orm.AttributeEvents") flag is passed to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") or [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"), such as below, illustrated using the [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: A validation function like the above can also raise an exception such as `ValueError`
    to halt the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AttributeEvents.propagate`](#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag is also important when applying listeners
    to mapped classes that also have mapped subclasses, as when using mapper inheritance
    patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The full list of modifiers available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") functions are below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`active_history=False` – When True, indicates that the “set” event would like
    to receive the “old” value being replaced unconditionally, even if this requires
    firing off database loads. Note that `active_history` can also be set directly
    via [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    and [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`propagate=False` – When True, the listener function will be established not
    just for the class attribute given, but for attributes of the same name on all
    current subclasses of that class, as well as all future subclasses of that class,
    using an additional listener that listens for instrumentation events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw=False` – When True, the “target” argument to the event will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retval=False` – when True, the user-defined event listening must return the
    “value” argument from the function. This gives the listening function the opportunity
    to change the value that is ultimately used for a “set” or “append” event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[append()](#sqlalchemy.orm.AttributeEvents.append), [append_wo_mutation()](#sqlalchemy.orm.AttributeEvents.append_wo_mutation),
    [bulk_replace()](#sqlalchemy.orm.AttributeEvents.bulk_replace), [dispatch](#sqlalchemy.orm.AttributeEvents.dispatch),
    [dispose_collection()](#sqlalchemy.orm.AttributeEvents.dispose_collection), [init_collection()](#sqlalchemy.orm.AttributeEvents.init_collection),
    [init_scalar()](#sqlalchemy.orm.AttributeEvents.init_scalar), [modified()](#sqlalchemy.orm.AttributeEvents.modified),
    [remove()](#sqlalchemy.orm.AttributeEvents.remove), [set()](#sqlalchemy.orm.AttributeEvents.set)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection append event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: The append event is invoked for each element as it is appended to the collection.
    This occurs for single-item appends as well as for a “bulk replace” operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value being appended. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection append event where the collection was not actually mutated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: This event differs from [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") in that it is fired off for de-duplicating
    collections such as sets and dictionaries, when the object already exists in the
    target collection. The event does not have a return value and the identity of
    the given object cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: The event is used for cascading objects into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when the collection has already been mutated via a backref
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value that would be appended if the object did not already exist
    in the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is defined for this event.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.15.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection ‘bulk replace’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked for a sequence of values as they are incoming to a bulk
    collection set operation, which can be modified in place before the values are
    treated as ORM objects. This is an “early hook” that runs before the bulk replace
    routine attempts to reconcile which objects are already present in the collection
    and which are being removed by the net replace operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is typical that this method be combined with use of the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event. When using both of these events,
    note that a bulk replace operation will invoke the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event for all new items, even after [`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") has been invoked for the collection
    as a whole. In order to determine if an [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event is part of a bulk replace, use
    the symbol `attributes.OP_BULK_REPLACE` to test the incoming initiator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – a sequence (e.g. a list) of the values being set. The handler can
    modify this list in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the sequence
    of keys used in the operation, typically only for a dictionary update. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Receive a ‘collection dispose’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is triggered for a collection-based attribute when a collection
    is replaced, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: The old collection received will contain its previous contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The collection passed to [`AttributeEvents.dispose_collection()`](#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection") will now have its contents
    before the dispose intact; previously, the collection would be empty.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Receive a ‘collection init’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: This event is triggered for a collection-based attribute, when the initial “empty
    collection” is first generated for a blank attribute, as well as for when the
    collection is replaced with a new one, such as via a set event.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., given that `User.addresses` is a relationship-based collection, the event
    is triggered here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'and also during replace operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collection` – the new collection. This will always be generated from what
    was specified as [`relationship.collection_class`](relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), and will always be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collection_adapter` – the [`CollectionAdapter`](collection_api.html#sqlalchemy.orm.collections.CollectionAdapter
    "sqlalchemy.orm.collections.CollectionAdapter") that will mediate internal access
    to the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") - “scalar” version of this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Receive a scalar “init” event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is invoked when an uninitialized, unpersisted scalar attribute is
    accessed, e.g. read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: The ORM’s default behavior when this occurs for an un-initialized attribute
    is to return the value `None`; note this differs from Python’s usual behavior
    of raising `AttributeError`. The event here can be used to customize what value
    is actually returned, with the assumption that the event listener would be mirroring
    a default generator that is configured on the Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object as well.
  prefs: []
  type: TYPE_NORMAL
- en: Since a default generator on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") might also produce a changing value such as a timestamp,
    the [`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event handler can also be used to
    **set** the newly returned value, so that a Core-level default generation function
    effectively fires off only once, but at the moment the attribute is accessed on
    the non-persisted object. Normally, no change to the object’s state is made when
    an uninitialized attribute is accessed (much older SQLAlchemy versions did in
    fact change the object’s state).
  prefs: []
  type: TYPE_NORMAL
- en: 'If a default generator on a column returned a particular constant, a handler
    might be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, we initialize the attribute `MyClass.some_attribute` to the value of
    `SOME_CONSTANT`. The above code includes the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: By setting the value `SOME_CONSTANT` in the given `dict_`, we indicate that
    this value is to be persisted to the database. This supersedes the use of `SOME_CONSTANT`
    in the default generator for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The `active_column_defaults.py` example given at
    [Attribute Instrumentation](examples.html#examples-instrumentation) illustrates
    using the same approach for a changing default, e.g. a timestamp generator. In
    this particular example, it is not strictly necessary to do this since `SOME_CONSTANT`
    would be part of the INSERT statement in either case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By establishing the `retval=True` flag, the value we return from the function
    will be returned by the attribute getter. Without this flag, the event is assumed
    to be a passive observer and the return value of our function is ignored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `propagate=True` flag is significant if the mapped class includes inheriting
    subclasses, which would also make use of this event listener. Without this flag,
    an inheriting subclass will not use our event handler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the above example, the attribute set event [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") as well as the related validation feature
    provided by [`validates`](mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    is **not** invoked when we apply our value to the given `dict_`. To have these
    events to invoke in response to our newly generated value, apply the value to
    the given object as a normal attribute set operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: When multiple listeners are set up, the generation of the value is “chained”
    from one listener to the next by passing the value returned by the previous listener
    that specifies `retval=True` as the `value` argument of the next listener.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value that is to be returned before this event listener were
    invoked. This value begins as the value `None`, however will be the return value
    of the previous event handler function if multiple listeners are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dict_` – the attribute dictionary of this mapped object. This is normally
    the `__dict__` of the object, but in all cases represents the destination that
    the attribute system uses to get at the actual value of this attribute. Placing
    the value in this dictionary has the effect that the value will be used in the
    INSERT statement generated by the unit of work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents.init_collection()`](#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") - collection version of this
    event'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Attribute Instrumentation](examples.html#examples-instrumentation) - see the
    `active_column_defaults.py` example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Receive a ‘modified’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: This event is triggered when the [`flag_modified()`](session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function is used to trigger a modify
    event on an attribute without any specific value being set.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection remove event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value being removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `del collection[some_key_or_index]`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is defined for this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Receive a scalar set event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value being set. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oldvalue` – the previous value being replaced. This may also be the symbol
    `NEVER_SET` or `NO_VALUE`. If the listener is registered with `active_history=True`,
    the previous value of the attribute will be loaded from the database if the existing
    value is currently unloaded or expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: Query Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [QueryEvents](#sqlalchemy.orm.QueryEvents) | Represent events within the
    construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Represent events within the construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    event methods are legacy as of SQLAlchemy 2.0, and only apply to direct use of
    the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. They are not used for [2.0 style](../glossary.html#term-2.0-style) statements.
    For events to intercept and modify 2.0 style ORM use, use the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    hooks are now superseded by the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[before_compile()](#sqlalchemy.orm.QueryEvents.before_compile), [before_compile_delete()](#sqlalchemy.orm.QueryEvents.before_compile_delete),
    [before_compile_update()](#sqlalchemy.orm.QueryEvents.before_compile_update),
    [dispatch](#sqlalchemy.orm.QueryEvents.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Receive the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object before it is composed into a core [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is superseded by the much more
    capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. In version 1.4, the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is **no longer used** for ORM-level
    attribute loads, such as loads of deferred or expired attributes as well as relationship
    loaders. See the new examples in [ORM Query Events](examples.html#examples-session-orm-events)
    which illustrate new ways of intercepting and modifying ORM queries for the most
    common purpose of adding arbitrary filter criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This event is intended to allow changes to the query given:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: The event should normally be listened with the `retval=True` parameter set,
    so that the modified query may be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event by default will disallow “baked”
    queries from caching a query, if the event hook returns a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. This affects both direct use of the baked query
    extension as well as its operation within lazy loaders and eager loaders for relationships.
    In order to re-establish the query being cached, apply the event adding the `bake_ok`
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: When `bake_ok` is set to True, the event hook will only be invoked once, and
    not called for subsequent invocations of a particular query that is being cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using the before_compile event](extensions/baked.html#baked-with-before-compile)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  prefs: []
  type: TYPE_NORMAL
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, this event should be configured
    with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “delete context” object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete_context` – a “delete context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_delete.delete_context`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.2.17.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  prefs: []
  type: TYPE_NORMAL
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, if the event is to be used
    to alter the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, it should be configured with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: The `.values` dictionary of the “update context” object can also be modified
    in place as illustrated above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “update context” object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_context` – an “update context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_update.update_context`. The object has
    a `.values` attribute in an UPDATE context which is the dictionary of parameters
    passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"). This dictionary can be modified to alter the VALUES
    clause of the resulting UPDATE statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.2.17.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '## Instrumentation Events'
  prefs: []
  type: TYPE_NORMAL
- en: Defines SQLAlchemy’s system of class instrumentation.
  prefs: []
  type: TYPE_NORMAL
- en: This module is usually not directly visible to user applications, but defines
    a large part of the ORM’s interactivity.
  prefs: []
  type: TYPE_NORMAL
- en: instrumentation.py deals with registration of end-user classes for state tracking.
    It interacts closely with state.py and attributes.py which establish per-instance
    and per-class-attribute instrumentation, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The class instrumentation system can be customized on a per-class or global
    basis using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") module, which provides the means to build and
    specify alternate instrumentation forms.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentationEvents](#sqlalchemy.orm.InstrumentationEvents) | Events related
    to class instrumentation events. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Events related to class instrumentation events.
  prefs: []
  type: TYPE_NORMAL
- en: The listeners here support being established against any new style class, that
    is any object that is a subclass of ‘type’. Events will then be fired off for
    events against that class. If the “propagate=True” flag is passed to event.listen(),
    the event will fire off for subclasses of that class as well.
  prefs: []
  type: TYPE_NORMAL
- en: The Python `type` builtin is also accepted as a target, which when used has
    the effect of events being emitted for all classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note the “propagate” flag here is defaulted to `True`, unlike the other class
    level events where it defaults to `False`. This means that new subclasses will
    also be the subject of these events, when a listener is established on a superclass.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[attribute_instrument()](#sqlalchemy.orm.InstrumentationEvents.attribute_instrument),
    [class_instrument()](#sqlalchemy.orm.InstrumentationEvents.class_instrument),
    [class_uninstrument()](#sqlalchemy.orm.InstrumentationEvents.class_uninstrument),
    [dispatch](#sqlalchemy.orm.InstrumentationEvents.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InstrumentationEvents`](#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents") (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Called when an attribute is instrumented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Called after the given class is instrumented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Called before the given class is uninstrumented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: Session Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic event hooks are available at the level of the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. The types of things that are intercepted here
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Persistence Operations** - the ORM flush process that sends changes to the
    database can be extended using events that fire off at different parts of the
    flush, to augment or modify the data being sent to the database or to allow other
    things to happen when persistence occurs. Read more about persistence events at
    [Persistence Events](session_events.html#session-persistence-events).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object lifecycle events** - hooks when objects are added, persisted, deleted
    from sessions. Read more about these at [Object Lifecycle Events](session_events.html#session-lifecycle-events).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution Events** - Part of the [2.0 style](../glossary.html#term-2.0-style)
    execution model, all SELECT statements against ORM entities emitted, as well as
    bulk UPDATE and DELETE statements outside of the flush process, are intercepted
    from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method using the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") method. Read more about this event
    at [Execute Events](session_events.html#session-execute-events).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be sure to read the [Tracking queries, object and Session Changes with Events](session_events.html)
    chapter for context on these events.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [SessionEvents](#sqlalchemy.orm.SessionEvents) | Define events specific to
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    lifecycle. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Define events specific to [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: The [`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    function will accept [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects as well as the return result of [`sessionmaker()`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`scoped_session()`](contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it accepts the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which will apply listeners to all [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`raw=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, the “target” argument passed to applicable event listener functions
    that work on individual objects will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.14.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`restore_load_context=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applies to the [`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent") event. Restores the loader
    context of the object when the event hook is complete, so that ongoing eager load
    operations continue to target the object appropriately. A warning is emitted if
    the object is moved to a new loader context from within this event if this flag
    is not set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.14.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_attach()](#sqlalchemy.orm.SessionEvents.after_attach), [after_begin()](#sqlalchemy.orm.SessionEvents.after_begin),
    [after_bulk_delete()](#sqlalchemy.orm.SessionEvents.after_bulk_delete), [after_bulk_update()](#sqlalchemy.orm.SessionEvents.after_bulk_update),
    [after_commit()](#sqlalchemy.orm.SessionEvents.after_commit), [after_flush()](#sqlalchemy.orm.SessionEvents.after_flush),
    [after_flush_postexec()](#sqlalchemy.orm.SessionEvents.after_flush_postexec),
    [after_rollback()](#sqlalchemy.orm.SessionEvents.after_rollback), [after_soft_rollback()](#sqlalchemy.orm.SessionEvents.after_soft_rollback),
    [after_transaction_create()](#sqlalchemy.orm.SessionEvents.after_transaction_create),
    [after_transaction_end()](#sqlalchemy.orm.SessionEvents.after_transaction_end),
    [before_attach()](#sqlalchemy.orm.SessionEvents.before_attach), [before_commit()](#sqlalchemy.orm.SessionEvents.before_commit),
    [before_flush()](#sqlalchemy.orm.SessionEvents.before_flush), [deleted_to_detached()](#sqlalchemy.orm.SessionEvents.deleted_to_detached),
    [deleted_to_persistent()](#sqlalchemy.orm.SessionEvents.deleted_to_persistent),
    [detached_to_persistent()](#sqlalchemy.orm.SessionEvents.detached_to_persistent),
    [dispatch](#sqlalchemy.orm.SessionEvents.dispatch), [do_orm_execute()](#sqlalchemy.orm.SessionEvents.do_orm_execute),
    [loaded_as_persistent()](#sqlalchemy.orm.SessionEvents.loaded_as_persistent),
    [pending_to_persistent()](#sqlalchemy.orm.SessionEvents.pending_to_persistent),
    [pending_to_transient()](#sqlalchemy.orm.SessionEvents.pending_to_transient),
    [persistent_to_deleted()](#sqlalchemy.orm.SessionEvents.persistent_to_deleted),
    [persistent_to_detached()](#sqlalchemy.orm.SessionEvents.persistent_to_detached),
    [persistent_to_transient()](#sqlalchemy.orm.SessionEvents.persistent_to_transient),
    [transient_to_pending()](#sqlalchemy.orm.SessionEvents.transient_to_pending)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SessionEvents`](#sqlalchemy.orm.SessionEvents "sqlalchemy.orm.SessionEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Execute after an instance is attached to a session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: This is called after an add, delete or merge.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As of 0.8, this event fires off *after* the item has been fully associated with
    the session, which is different than previous releases. For event handlers that
    require the object not yet be part of session state (such as handlers which may
    autoflush while the target object is not yet complete) consider the new [`before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach") event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_attach()`](#sqlalchemy.orm.SessionEvents.before_attach
    "sqlalchemy.orm.SessionEvents.before_attach")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Execute after a transaction is begun on a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This event is called within the process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") modifying its own internal state. To invoke SQL operations
    within this hook, use the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") provided to the event; do not run SQL operations
    using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object which will be used for SQL statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Event for after the legacy [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") method has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") event now accepts the arguments
    [`SessionEvents.after_bulk_delete.delete_context`](#sqlalchemy.orm.SessionEvents.after_bulk_delete.params.delete_context
    "sqlalchemy.orm.SessionEvents.after_bulk_delete"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**delete_context** –'
  prefs: []
  type: TYPE_NORMAL
- en: 'a “delete context” object which contains details about the update, including
    these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk DELETE operation.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Event for after the legacy [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") method has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 0.9: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") event now accepts the arguments
    [`SessionEvents.after_bulk_update.update_context`](#sqlalchemy.orm.SessionEvents.after_bulk_update.params.update_context
    "sqlalchemy.orm.SessionEvents.after_bulk_update"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.after_bulk_update()`](#sqlalchemy.orm.SessionEvents.after_bulk_update
    "sqlalchemy.orm.SessionEvents.after_bulk_update") method is a legacy event hook
    as of SQLAlchemy 2.0\. The event **does not participate** in [2.0 style](../glossary.html#term-2.0-style)
    invocations using [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") documented at [ORM UPDATE and DELETE with
    Custom WHERE Criteria](queryguide/dml.html#orm-queryguide-update-delete-where).
    For 2.0 style use, the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook will intercept these calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**update_context** –'
  prefs: []
  type: TYPE_NORMAL
- en: 'an “update context” object which contains details about the update, including
    these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` - the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    involved'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`query` -the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object that this update operation was called upon.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`values` The “values” dictionary that was passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") returned as a result of the bulk UPDATE operation.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the update_context no longer has a `QueryContext` object
    associated with it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_bulk_delete()`](#sqlalchemy.orm.SessionEvents.after_bulk_delete
    "sqlalchemy.orm.SessionEvents.after_bulk_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Execute after a commit has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in an active transaction when the [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") event is invoked, and therefore can
    not emit SQL. To emit SQL corresponding to every transaction, use the [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Execute after flush has completed, but before commit has been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Note that the session’s state is still in pre-flush, i.e. ‘new’, ‘dirty’, and
    ‘deleted’ lists still show pre-flush state as well as the history settings on
    instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This event runs after the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has emitted SQL to modify the database, but **before**
    it has altered its internal state to reflect those changes, including that newly
    inserted objects are placed into the identity map. ORM operations emitted within
    this event such as loads of related items may produce new identity map entries
    that will immediately be replaced, sometimes causing confusing results. SQLAlchemy
    will emit a warning for this condition as of version 1.3.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Execute after flush has completed, and after the post-exec state occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: This will be when the ‘new’, ‘dirty’, and ‘deleted’ lists are in their final
    state. An actual commit() may or may not have occurred, depending on whether or
    not the flush started its own transaction or participated in a larger transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Execute after a real DBAPI rollback has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Note that this event only fires when the *actual* rollback against the database
    occurs - it does *not* fire each time the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method is called, if the underlying DBAPI transaction
    has already been rolled back. In many cases, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not be in an “active” state during this event,
    as the current transaction is not valid. To acquire a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which is active after the outermost rollback has proceeded,
    use the [`SessionEvents.after_soft_rollback()`](#sqlalchemy.orm.SessionEvents.after_soft_rollback
    "sqlalchemy.orm.SessionEvents.after_soft_rollback") event, checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Execute after any rollback has occurred, including “soft” rollbacks that don’t
    actually emit at the DBAPI level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: This corresponds to both nested and outer rollbacks, i.e. the innermost rollback
    that calls the DBAPI’s rollback() method, as well as the enclosing rollback calls
    that only pop themselves from the transaction stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can be used to invoke SQL and [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") operations after an outermost rollback by first
    checking the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_transaction` – The [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") transactional marker object which was just
    closed. The current [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") for the given [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is available via the `Session.transaction` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Execute when a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: This event differs from [`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin
    "sqlalchemy.orm.SessionEvents.after_begin") in that it occurs for each [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") overall, as opposed to when transactions
    are begun on individual database connections. It is also invoked for nested transactions
    and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end") event (assuming normal operation
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Execute when the span of a [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") ends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: This event differs from [`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit") in that it corresponds to all [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") objects in use, including those for nested
    transactions and subtransactions, and is always matched by a corresponding [`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – the target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the target [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To detect if this is the outermost [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction"), as opposed to a “subtransaction” or a SAVEPOINT,
    test that the [`SessionTransaction.parent`](session_api.html#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") attribute is `None`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To detect if the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is a SAVEPOINT, use the [`SessionTransaction.nested`](session_api.html#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Execute before an instance is attached to a session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: This is called before an add, delete or merge causes the object to be part of
    the session.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Execute before commit is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.before_commit()`](#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") hook is *not* per-flush, that is,
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    can emit SQL to the database many times within the scope of a transaction. For
    interception of these events, use the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"), [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush"), or [`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec") events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_commit()`](#sqlalchemy.orm.SessionEvents.after_commit
    "sqlalchemy.orm.SessionEvents.after_commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_begin()`](#sqlalchemy.orm.SessionEvents.after_begin "sqlalchemy.orm.SessionEvents.after_begin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_create()`](#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_transaction_end()`](#sqlalchemy.orm.SessionEvents.after_transaction_end
    "sqlalchemy.orm.SessionEvents.after_transaction_end")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Execute before flush process has started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – The target [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instances` – Usually `None`, this is the collection of objects which can be
    passed to the [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") method (note this usage is deprecated).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush "sqlalchemy.orm.SessionEvents.after_flush")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.after_flush_postexec()`](#sqlalchemy.orm.SessionEvents.after_flush_postexec
    "sqlalchemy.orm.SessionEvents.after_flush_postexec")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “deleted to detached” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked when a deleted object is evicted from the session. The
    typical case when this occurs is when the transaction for a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in which the object was deleted is committed; the object
    moves from the deleted state to the detached state.
  prefs: []
  type: TYPE_NORMAL
- en: It is also invoked for objects that were deleted in a flush when the [`Session.expunge_all()`](session_api.html#sqlalchemy.orm.Session.expunge_all
    "sqlalchemy.orm.Session.expunge_all") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") events are called, as well as if the object is
    individually expunged from its deleted state via [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “deleted to persistent” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: This transition occurs only when an object that’s been deleted successfully
    in a flush is restored due to a call to [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"). The event is not called under any other circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “detached to persistent” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call, as well as during the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") call if the object was not previously associated
    with the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (note that an object marked as “deleted” remains in the “persistent” state until
    the flush proceeds).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the object becomes persistent as part of a call to [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete"), the object is **not** yet marked as deleted
    when this event is called. To detect deleted objects, check the `deleted` flag
    sent to the [`SessionEvents.persistent_to_detached()`](#sqlalchemy.orm.SessionEvents.persistent_to_detached
    "sqlalchemy.orm.SessionEvents.persistent_to_detached") to event after the flush
    proceeds, or check the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection within the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") event if deleted objects need to
    be intercepted before the flush.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Intercept statement executions that occur on behalf of an ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked for all top-level SQL statements invoked from the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as well as related methods such as [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") and [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar"). As of SQLAlchemy 1.4, all ORM queries that run
    through the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method as well as related methods [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), [`Session.scalar()`](session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") etc. will participate in this event. This event
    hook does **not** apply to the queries that are emitted internally within the
    ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook is triggered **for ORM
    statement executions only**, meaning those invoked via the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and similar methods on the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object. It does **not** trigger for statements that
    are invoked by SQLAlchemy Core only, i.e. statements invoked directly using [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") or otherwise originating from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object without any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") involved. To intercept **all** SQL executions regardless
    of whether the Core or ORM APIs are in use, see the event hooks at [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"), such as [`ConnectionEvents.before_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute").
  prefs: []
  type: TYPE_NORMAL
- en: Also, this event hook does **not** apply to queries that are emitted internally
    within the ORM flush process, i.e. the process described at [Flushing](session_basics.html#session-flushing);
    to intercept steps within the flush process, see the event hooks described at
    [Persistence Events](session_events.html#session-persistence-events) as well as
    [Mapper-level Flush Events](session_events.html#session-persistence-mapper).
  prefs: []
  type: TYPE_NORMAL
- en: This event is a `do_` event, meaning it has the capability to replace the operation
    that the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method normally performs. The intended use for
    this includes sharding and result-caching schemes which may seek to invoke the
    same statement across multiple database connections, returning a result that is
    merged from each of them, or which don’t invoke the statement at all, instead
    returning data from a cache.
  prefs: []
  type: TYPE_NORMAL
- en: The hook intends to replace the use of the `Query._execute_and_instances` method
    that could be subclassed prior to SQLAlchemy 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orm_execute_state** – an instance of [`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState") which contains all information about the current
    execution, as well as helper functions used to derive other commonly required
    information. See that object for details.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState`](session_api.html#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    - the object passed to the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event which contains all information
    about the statement to be invoked. It also provides an interface to extend the
    current statement, options, and parameters as well as an option that allows programmatic
    invocation of the statement at any point.'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Query Events](examples.html#examples-session-orm-events) - includes examples
    of using [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Dogpile Caching](examples.html#examples-caching) - an example of how to integrate
    Dogpile caching with the ORM [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") making use of the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Horizontal Sharding](examples.html#examples-sharding) - the Horizontal Sharding
    example / extension relies upon the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook to invoke a SQL statement
    on multiple backends and return a merged result.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “loaded as persistent” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked within the ORM loading process, and is invoked very similarly
    to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event. However, the event here is linkable to a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class or instance, rather than to a mapper or class
    hierarchy, and integrates with the other session lifecycle events smoothly. The
    object is guaranteed to be present in the session’s identity map when this event
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") parameter, which works in the same manner as that
    of [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents"), in order to resolve this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “pending to persistent”” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked within the flush process, and is similar to scanning the
    [`Session.new`](session_api.html#sqlalchemy.orm.Session.new "sqlalchemy.orm.Session.new")
    collection within the [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") event. However, in this case the object
    has already been moved to the persistent state when the event is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “pending to transient” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: This less common transition occurs when an pending object that has not been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction, or when
    the [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge "sqlalchemy.orm.Session.expunge")
    method is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “persistent to deleted” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked when a persistent object’s identity is deleted from the
    database within a flush, however the object still remains associated with the
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    until the transaction completes.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction is rolled back, the object moves again to the persistent
    state, and the [`SessionEvents.deleted_to_persistent()`](#sqlalchemy.orm.SessionEvents.deleted_to_persistent
    "sqlalchemy.orm.SessionEvents.deleted_to_persistent") event is called. If the
    transaction is committed, the object becomes detached, which will emit the [`SessionEvents.deleted_to_detached()`](#sqlalchemy.orm.SessionEvents.deleted_to_detached
    "sqlalchemy.orm.SessionEvents.deleted_to_detached") event.
  prefs: []
  type: TYPE_NORMAL
- en: Note that while the [`Session.delete()`](session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method is the primary public interface to mark
    an object as deleted, many objects get deleted due to cascade rules, which are
    not always determined until flush time. Therefore, there’s no way to catch every
    object that will be deleted until the flush has proceeded. the [`SessionEvents.persistent_to_deleted()`](#sqlalchemy.orm.SessionEvents.persistent_to_deleted
    "sqlalchemy.orm.SessionEvents.persistent_to_deleted") event is therefore invoked
    at the end of a flush.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “persistent to detached” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is invoked when a persistent object is evicted from the session.
    There are many conditions that cause this to happen, including:'
  prefs: []
  type: TYPE_NORMAL
- en: using a method such as [`Session.expunge()`](session_api.html#sqlalchemy.orm.Session.expunge
    "sqlalchemy.orm.Session.expunge") or [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method, when the object was part of an INSERT
    statement for that session’s transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleted` – boolean. If True, indicates this object moved to the detached state
    because it was marked as deleted and flushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “persistent to transient” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: This less common transition occurs when an pending object that has has been
    flushed is evicted from the session; this can occur when the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method rolls back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the “transient to pending” transition for a specific object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: This event is a specialization of the [`SessionEvents.after_attach()`](#sqlalchemy.orm.SessionEvents.after_attach
    "sqlalchemy.orm.SessionEvents.after_attach") event which is only invoked for this
    specific transition. It is invoked typically during the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session` – target [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance` – the ORM-mapped instance being operated upon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Object Lifecycle Events](session_events.html#session-lifecycle-events)'
  prefs: []
  type: TYPE_NORMAL
- en: Mapper Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mapper event hooks encompass things that happen as related to individual or
    multiple [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects, which are the central configurational object that maps a user-defined
    class to a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. Types of things which occur at the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Per-object persistence operations** - the most popular mapper hooks are the
    unit-of-work hooks such as [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update
    "sqlalchemy.orm.MapperEvents.after_update"), etc. These events are contrasted
    to the more coarse grained session-level events such as [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") in that they occur within the flush
    process on a per-object basis; while finer grained activity on an object is more
    straightforward, availability of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") features is limited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mapper configuration events** - the other major class of mapper hooks are
    those which occur as a class is mapped, as a mapper is finalized, and when sets
    of mappers are configured to refer to each other. These events include [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class"), [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") at the individual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") level, and [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") and [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") at the level of collections of
    [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [MapperEvents](#sqlalchemy.orm.MapperEvents) | Define events specific to
    mappings. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Define events specific to mappings.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'Available targets include:'
  prefs: []
  type: TYPE_NORMAL
- en: mapped classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapper events provide hooks into critical sections of the mapper, including
    those related to object instrumentation, object loading, and object persistence.
    In particular, the persistence methods [`MapperEvents.before_insert()`](#sqlalchemy.orm.MapperEvents.before_insert
    "sqlalchemy.orm.MapperEvents.before_insert"), and [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") are popular places to augment the
    state being persisted - however, these methods operate with several significant
    restrictions. The user is encouraged to evaluate the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") and [`SessionEvents.after_flush()`](#sqlalchemy.orm.SessionEvents.after_flush
    "sqlalchemy.orm.SessionEvents.after_flush") methods as more flexible and user-friendly
    hooks in which to apply additional database state during a flush.
  prefs: []
  type: TYPE_NORMAL
- en: When using [`MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting mappers and/or the mappers of inheriting classes, as well as any mapper
    which is the target of this listener.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retval=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'when True, the user-defined event function must have a return value, the purpose
    of which is either to control subsequent event propagation, or to otherwise alter
    the operation in progress by the mapper. Possible return values are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sqlalchemy.orm.interfaces.EXT_CONTINUE` - continue event processing normally.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlalchemy.orm.interfaces.EXT_STOP` - cancel all subsequent event handlers
    in the chain.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: other values - the return value specified by specific listeners.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_configured()](#sqlalchemy.orm.MapperEvents.after_configured), [after_delete()](#sqlalchemy.orm.MapperEvents.after_delete),
    [after_insert()](#sqlalchemy.orm.MapperEvents.after_insert), [after_mapper_constructed()](#sqlalchemy.orm.MapperEvents.after_mapper_constructed),
    [after_update()](#sqlalchemy.orm.MapperEvents.after_update), [before_configured()](#sqlalchemy.orm.MapperEvents.before_configured),
    [before_delete()](#sqlalchemy.orm.MapperEvents.before_delete), [before_insert()](#sqlalchemy.orm.MapperEvents.before_insert),
    [before_mapper_configured()](#sqlalchemy.orm.MapperEvents.before_mapper_configured),
    [before_update()](#sqlalchemy.orm.MapperEvents.before_update), [dispatch](#sqlalchemy.orm.MapperEvents.dispatch),
    [instrument_class()](#sqlalchemy.orm.MapperEvents.instrument_class), [mapper_configured()](#sqlalchemy.orm.MapperEvents.mapper_configured)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.MapperEvents`](#sqlalchemy.orm.MapperEvents "sqlalchemy.orm.MapperEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Called after a series of mappers have been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: The [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, after the function has completed its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this event to the [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, which is called on a per-mapper
    basis while the configuration operation proceeds; unlike that event, when this
    event is invoked, all cross-configurations (e.g. backrefs) will also have been
    made available for any mappers that were pending. Also contrast to [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), which is invoked before the
    series of mappers has been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers have been affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after a DELETE statement has been emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class after their
    DELETE statements have been emitted at once in a previous step.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after an INSERT statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify in-Python-only state on the instance after an INSERT
    occurs, as well as to emit additional SQL statements on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class after their
    INSERT statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Receive a class and mapper when the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has been fully constructed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: This event is called after the initial constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") completes. This occurs after the [`MapperEvents.instrument_class()`](#sqlalchemy.orm.MapperEvents.instrument_class
    "sqlalchemy.orm.MapperEvents.instrument_class") event and after the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") has done an initial pass of its arguments to generate
    its collection of [`MapperProperty`](internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects, which are accessible via the [`Mapper.get_property()`](mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method and the [`Mapper.iterate_properties`](mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: This event differs from the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event in that it is invoked
    within the constructor for [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    rather than within the [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Currently, this event is the only
    one which is appropriate for handlers that wish to create additional mapped classes
    in response to the construction of this [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), which will be part of the same configure step when [`registry.configure()`](mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") next runs.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Versioning Objects](examples.html#examples-versioning) - an example which
    illustrates the use of the [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") event to create new mappers
    to record change-audit histories on objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after an UPDATE statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify in-Python-only state on the instance after an UPDATE
    occurs, as well as to emit additional SQL statements on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*, and for which no
    UPDATE statement has proceeded. An object is marked as dirty when any of its column-based
    attributes have a “set attribute” operation called or when any of its collections
    are modified. If, at update time, no column-based attributes have any net changes,
    no UPDATE statement will be issued. This means that an instance being sent to
    [`MapperEvents.after_update()`](#sqlalchemy.orm.MapperEvents.after_update "sqlalchemy.orm.MapperEvents.after_update")
    is *not* a guarantee that an UPDATE statement has been issued.
  prefs: []
  type: TYPE_NORMAL
- en: To detect if the column-based attributes on the object have net changes, and
    therefore resulted in an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class after their
    UPDATE statements have been emitted at once in a previous step. In the extremely
    rare case that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: Called before a series of mappers have been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: The [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event is invoked each time the
    [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers "sqlalchemy.orm.configure_mappers")
    function is invoked, before the function has done any of its work. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can **only** be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class, and not to individual mappings or mapped classes.
    It is only invoked for all mappings as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Contrast this event to [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), which is invoked after the series
    of mappers has been configured, as well as [`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured") and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), which are both invoked on a
    per-mapper basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Theoretically this event is called once per application, but is actually called
    any time new mappers are to be affected by a [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call. If new mappings are constructed after
    existing ones have already been used, this event will likely be called again.
    To ensure that a particular event is only called once and no further, the `once=True`
    argument (new in 0.9.4) can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance before a DELETE statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to emit additional SQL statements on the given connection
    as well as to perform application specific bookkeeping related to a deletion event.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class before their
    DELETE statements are emitted at once in a later step.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit DELETE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being deleted. If the event is configured with
    `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance before an INSERT statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify local, non-object related attributes on the instance
    before an INSERT occurs, as well as to emit additional SQL statements on the given
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class before their
    INSERT statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object can be configured with `batch=False`, which will
    cause batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit INSERT statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Called right before a specific mapper is to be configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: This event is intended to allow a specific mapper to be skipped during the configure
    step, by returning the `interfaces.EXT_SKIP` symbol which indicates to the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call that this particular mapper (or hierarchy
    of mappers, if `propagate=True` is used) should be skipped in the current configuration
    run. When one or more mappers are skipped, the he “new mappers” flag will remain
    set, meaning the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function will continue to be called when mappers
    are used, to continue to try to configure all available mappers.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison to the other configure-level events, [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured"), [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), and [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured"), the :meth;`.MapperEvents.before_mapper_configured`
    event provides for a meaningful return value when it is registered with the `retval=True`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance before an UPDATE statement is emitted corresponding
    to that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: this event **only** applies to the [session flush operation](session_basics.html#session-flushing)
    and does **not** apply to the ORM DML operations described at [ORM-Enabled INSERT,
    UPDATE, and DELETE statements](queryguide/dml.html#orm-expression-update-delete).
    To intercept ORM DML events, use [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute").
  prefs: []
  type: TYPE_NORMAL
- en: This event is used to modify local, non-object related attributes on the instance
    before an UPDATE occurs, as well as to emit additional SQL statements on the given
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called for all instances that are marked as “dirty”, *even those
    which have no net changes to their column-based attributes*. An object is marked
    as dirty when any of its column-based attributes have a “set attribute” operation
    called or when any of its collections are modified. If, at update time, no column-based
    attributes have any net changes, no UPDATE statement will be issued. This means
    that an instance being sent to [`MapperEvents.before_update()`](#sqlalchemy.orm.MapperEvents.before_update
    "sqlalchemy.orm.MapperEvents.before_update") is *not* a guarantee that an UPDATE
    statement will be issued, although you can affect the outcome here by modifying
    attributes so that a net change in value does exist.
  prefs: []
  type: TYPE_NORMAL
- en: To detect if the column-based attributes on the object have net changes, and
    will therefore generate an UPDATE statement, use `object_session(instance).is_modified(instance,
    include_collections=False)`.
  prefs: []
  type: TYPE_NORMAL
- en: The event is often called for a batch of objects of the same class before their
    UPDATE statements are emitted at once in a later step. In the extremely rare case
    that this is not desirable, the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") can be configured with `batch=False`, which will cause
    batches of instances to be broken up into individual (and more poorly performing)
    event->persist->event steps.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Mapper-level flush events only allow **very limited operations**, on attributes
    local to the row being operated upon only, as well as allowing any SQL to be emitted
    on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). **Please read fully** the notes at [Mapper-level
    Flush Events](session_events.html#session-persistence-mapper) for guidelines on
    using these methods; generally, the [`SessionEvents.before_flush()`](#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") method should be preferred for general
    on-flush changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") being used to emit UPDATE statements for this
    instance. This provides a handle into the current transaction on the target database
    specific to this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target` – the mapped instance being persisted. If the event is configured
    with `raw=True`, this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is supported by this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Persistence Events](session_events.html#session-persistence-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Receive a class when the mapper is first constructed, before instrumentation
    is applied to the mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: This event is the earliest phase of mapper construction. Most attributes of
    the mapper are not yet initialized. To receive an event within initial mapper
    construction where basic state is available such as the [`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection, the [`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event may be a better
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'This listener can either be applied to the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class overall, or to any un-mapped class which serves
    as a base for classes that will be mapped (using the `propagate=True` flag):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_` – the mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_mapper_constructed()`](#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Called when a specific mapper has completed its own configuration within the
    scope of the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event is invoked for each mapper
    that is encountered when the [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") function proceeds through the current list
    of not-yet-configured mappers. [`configure_mappers()`](mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") is typically invoked automatically as mappings
    are first used, as well as each time new mappers have been made available and
    new mapper use is detected.
  prefs: []
  type: TYPE_NORMAL
- en: When the event is called, the mapper should be in its final state, but **not
    including backrefs** that may be invoked from other mappers; they might still
    be pending within the configuration operation. Bidirectional relationships that
    are instead configured via the [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") argument *will* be fully available, since this
    style of relationship does not rely upon other possibly-not-configured mappers
    to know that they exist.
  prefs: []
  type: TYPE_NORMAL
- en: For an event that is guaranteed to have **all** mappers ready to go including
    backrefs that are defined only on other mappings, use the [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") event; this event invokes only
    after all known mappings have been fully configured.
  prefs: []
  type: TYPE_NORMAL
- en: The [`MapperEvents.mapper_configured()`](#sqlalchemy.orm.MapperEvents.mapper_configured
    "sqlalchemy.orm.MapperEvents.mapper_configured") event, unlike [`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured"), is called for each mapper/class
    individually, and the mapper is passed to the event itself. It also is called
    exactly once for a particular mapper. The event is therefore useful for configurational
    steps that benefit from being invoked just once on a specific mapper basis, which
    don’t require that “backref” configurations are necessarily ready yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which is the target of this event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_` – the mapped class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_configured()`](#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.after_configured()`](#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperEvents.before_mapper_configured()`](#sqlalchemy.orm.MapperEvents.before_mapper_configured
    "sqlalchemy.orm.MapperEvents.before_mapper_configured")'
  prefs: []
  type: TYPE_NORMAL
- en: Instance Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instance events are focused on the construction of ORM mapped instances, including
    when they are instantiated as [transient](../glossary.html#term-transient) objects,
    when they are loaded from the database and become [persistent](../glossary.html#term-persistent)
    objects, as well as when database refresh or expiration operations occur on the
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [InstanceEvents](#sqlalchemy.orm.InstanceEvents) | Define events specific
    to object lifecycle. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Define events specific to object lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: 'Available targets include:'
  prefs: []
  type: TYPE_NORMAL
- en: mapped classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unmapped superclasses of mapped or to-be-mapped classes (using the `propagate=True`
    flag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class itself indicates listening for all mappers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instance events are closely related to mapper events, but are more specific
    to the instance and its instrumentation, rather than its system of persistence.
  prefs: []
  type: TYPE_NORMAL
- en: When using [`InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents"),
    several modifiers are available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate=False` – When True, the event listener should be applied to all
    inheriting classes as well as the class which is the target of this listener.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw=False` – When True, the “target” argument passed to applicable event listener
    functions will be the instance’s [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restore_load_context=False` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applies to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") and [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") events. Restores the loader context of
    the object when the event hook is complete, so that ongoing eager load operations
    continue to target the object appropriately. A warning is emitted if the object
    is moved to a new loader context from within one of these events if this flag
    is not set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.14.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispatch](#sqlalchemy.orm.InstanceEvents.dispatch), [expire()](#sqlalchemy.orm.InstanceEvents.expire),
    [first_init()](#sqlalchemy.orm.InstanceEvents.first_init), [init()](#sqlalchemy.orm.InstanceEvents.init),
    [init_failure()](#sqlalchemy.orm.InstanceEvents.init_failure), [load()](#sqlalchemy.orm.InstanceEvents.load),
    [pickle()](#sqlalchemy.orm.InstanceEvents.pickle), [refresh()](#sqlalchemy.orm.InstanceEvents.refresh),
    [refresh_flush()](#sqlalchemy.orm.InstanceEvents.refresh_flush), [unpickle()](#sqlalchemy.orm.InstanceEvents.unpickle)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InstanceEvents`](#sqlalchemy.orm.InstanceEvents "sqlalchemy.orm.InstanceEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after its attributes or some subset have been expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: ‘keys’ is a list of attribute names. If None, the entire state was expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` – sequence of attribute names which were expired, or None if all attributes
    were expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Called when the first instance of a particular mapping is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: This event is called when the `__init__` method of a class is called the first
    time for that particular class. The event invokes before `__init__` actually proceeds
    as well as before the [`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init
    "sqlalchemy.orm.InstanceEvents.init") event is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Receive an instance when its constructor is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database; see the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") event in order to intercept a database load.
  prefs: []
  type: TYPE_NORMAL
- en: The event is called before the actual `__init__` constructor of the object is
    called. The `kwargs` dictionary may be modified in-place in order to affect what
    is passed to `__init__`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` – positional arguments passed to the `__init__` method. This is passed
    as a tuple and is currently immutable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` – keyword arguments passed to the `__init__` method. This structure
    *can* be altered in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.init_failure()`](#sqlalchemy.orm.InstanceEvents.init_failure
    "sqlalchemy.orm.InstanceEvents.init_failure")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Receive an instance when its constructor has been called, and raised an exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: This method is only called during a userland construction of an object, in conjunction
    with the object’s constructor, e.g. its `__init__` method. It is not called when
    an object is loaded from the database.
  prefs: []
  type: TYPE_NORMAL
- en: The event is invoked after an exception raised by the `__init__` method is caught.
    After the event is invoked, the original exception is re-raised outwards, so that
    the construction of the object still raises an exception. The actual exception
    and stack trace raised should be present in `sys.exc_info()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` – positional arguments that were passed to the `__init__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` – keyword arguments that were passed to the `__init__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after it has been created via `__new__`, and after
    initial attribute population has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: This typically occurs when the instance is created based on incoming result
    rows, and is only called once for that instance’s lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: During a result-row load, this event is invoked when the first row received
    for this instance is processed. When using eager loading with collection-oriented
    attributes, the additional rows that are to be loaded / processed in order to
    load subsequent collection items have not occurred yet. This has the effect both
    that collections will not be fully loaded, as well as that if an operation occurs
    within this event handler that emits another database load operation for the object,
    the “loading context” for the object can change and interfere with the existing
    eager loaders still in progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of what can cause the “loading context” to change within the event
    handler include, but are not necessarily limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: accessing deferred attributes that weren’t part of the row, will trigger an
    “undefer” operation and refresh the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: accessing attributes on a joined-inheritance subclass that weren’t part of the
    row, will trigger a refresh operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As of SQLAlchemy 1.3.14, a warning is emitted when this occurs. The [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") option may be used on the event to prevent this
    warning; this will ensure that the existing loading context is maintained for
    the object after the event is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.3.14: Added [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") and [`SessionEvents.restore_load_context`](#sqlalchemy.orm.SessionEvents.params.restore_load_context
    "sqlalchemy.orm.SessionEvents") flags which apply to “on load” events, which will
    ensure that the loading context for an object is restored when the event hook
    is complete; a warning is emitted if the load context of the object changes without
    this flag being set.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")
    event is also available in a class-method decorator format called [`reconstructor()`](mapping_api.html#sqlalchemy.orm.reconstructor
    "sqlalchemy.orm.reconstructor").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress. This argument may be `None` if the load does
    not correspond to a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query"),
    such as during [`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.init()`](#sqlalchemy.orm.InstanceEvents.init "sqlalchemy.orm.InstanceEvents.init")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh "sqlalchemy.orm.InstanceEvents.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionEvents.loaded_as_persistent()`](#sqlalchemy.orm.SessionEvents.loaded_as_persistent
    "sqlalchemy.orm.SessionEvents.loaded_as_persistent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance when its associated state is being pickled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state_dict` – the dictionary returned by `__getstate__`, containing the state
    to be pickled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after one or more attributes have been refreshed
    from a query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Contrast this to the [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") method, which is invoked when the object
    is first loaded from a query.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This event is invoked within the loader process before eager loaders may have
    been completed, and the object’s state may not be complete. Additionally, invoking
    row-level refresh operations on the object will place the object into a new loader
    context, interfering with the existing load context. See the note on [`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load
    "sqlalchemy.orm.InstanceEvents.load") for background on making use of the [`InstanceEvents.restore_load_context`](#sqlalchemy.orm.InstanceEvents.params.restore_load_context
    "sqlalchemy.orm.InstanceEvents") parameter, in order to resolve this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – the [`QueryContext`](internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") corresponding to the current [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` – sequence of attribute names which were populated, or None if all
    column-mapped, non-deferred attributes were populated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceEvents.load()`](#sqlalchemy.orm.InstanceEvents.load "sqlalchemy.orm.InstanceEvents.load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after one or more attributes that contain a column-level
    default or onupdate handler have been refreshed during persistence of the object’s
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: This event is the same as [`InstanceEvents.refresh()`](#sqlalchemy.orm.InstanceEvents.refresh
    "sqlalchemy.orm.InstanceEvents.refresh") except it is invoked within the unit
    of work flush process, and includes only non-primary-key columns that have column
    level default or onupdate handlers, including Python callables as well as server
    side defaults and triggers which may be fetched via the RETURNING clause.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While the [`InstanceEvents.refresh_flush()`](#sqlalchemy.orm.InstanceEvents.refresh_flush
    "sqlalchemy.orm.InstanceEvents.refresh_flush") event is triggered for an object
    that was INSERTed as well as for an object that was UPDATEd, the event is geared
    primarily towards the UPDATE process; it is mostly an internal artifact that INSERT
    actions can also trigger this event, and note that **primary key columns for an
    INSERTed row are explicitly omitted** from this event. In order to intercept the
    newly INSERTed state of an object, the [`SessionEvents.pending_to_persistent()`](#sqlalchemy.orm.SessionEvents.pending_to_persistent
    "sqlalchemy.orm.SessionEvents.pending_to_persistent") and [`MapperEvents.after_insert()`](#sqlalchemy.orm.MapperEvents.after_insert
    "sqlalchemy.orm.MapperEvents.after_insert") are better choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush_context` – Internal [`UOWTransaction`](internals.html#sqlalchemy.orm.UOWTransaction
    "sqlalchemy.orm.UOWTransaction") object which handles the details of the flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` – sequence of attribute names which were populated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Maintaining Non-Mapped State Across Loads](mapping_styles.html#mapped-class-load-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Server-Generated Defaults](persistence_techniques.html#orm-server-defaults)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](../core/defaults.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Receive an object instance after its associated state has been unpickled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the mapped instance. If the event is configured with `raw=True`,
    this will instead be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") state-management object associated with the instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state_dict` – the dictionary sent to `__setstate__`, containing the state
    dictionary which was pickled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Attribute Events'
  prefs: []
  type: TYPE_NORMAL
- en: Attribute events are triggered as things occur on individual attributes of ORM
    mapped objects. These events form the basis for things like [custom validation
    functions](mapped_attributes.html#simple-validators) as well as [backref handlers](backref.html#relationships-backref).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Changing Attribute Behavior](mapped_attributes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AttributeEvents](#sqlalchemy.orm.AttributeEvents) | Define events for object
    attributes. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: Define events for object attributes.
  prefs: []
  type: TYPE_NORMAL
- en: These are typically defined on the class-bound descriptor for the target class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to register a listener that will receive the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'Listeners have the option to return a possibly modified version of the value,
    when the [`AttributeEvents.retval`](#sqlalchemy.orm.AttributeEvents.params.retval
    "sqlalchemy.orm.AttributeEvents") flag is passed to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") or [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"), such as below, illustrated using the [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: A validation function like the above can also raise an exception such as `ValueError`
    to halt the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AttributeEvents.propagate`](#sqlalchemy.orm.AttributeEvents.params.propagate
    "sqlalchemy.orm.AttributeEvents") flag is also important when applying listeners
    to mapped classes that also have mapped subclasses, as when using mapper inheritance
    patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: The full list of modifiers available to the [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for") functions are below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`active_history=False` – When True, indicates that the “set” event would like
    to receive the “old” value being replaced unconditionally, even if this requires
    firing off database loads. Note that `active_history` can also be set directly
    via [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    and [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`propagate=False` – When True, the listener function will be established not
    just for the class attribute given, but for attributes of the same name on all
    current subclasses of that class, as well as all future subclasses of that class,
    using an additional listener that listens for instrumentation events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw=False` – When True, the “target” argument to the event will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") management object, rather than the mapped instance
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retval=False` – when True, the user-defined event listening must return the
    “value” argument from the function. This gives the listening function the opportunity
    to change the value that is ultimately used for a “set” or “append” event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[append()](#sqlalchemy.orm.AttributeEvents.append), [append_wo_mutation()](#sqlalchemy.orm.AttributeEvents.append_wo_mutation),
    [bulk_replace()](#sqlalchemy.orm.AttributeEvents.bulk_replace), [dispatch](#sqlalchemy.orm.AttributeEvents.dispatch),
    [dispose_collection()](#sqlalchemy.orm.AttributeEvents.dispose_collection), [init_collection()](#sqlalchemy.orm.AttributeEvents.init_collection),
    [init_scalar()](#sqlalchemy.orm.AttributeEvents.init_scalar), [modified()](#sqlalchemy.orm.AttributeEvents.modified),
    [remove()](#sqlalchemy.orm.AttributeEvents.remove), [set()](#sqlalchemy.orm.AttributeEvents.set)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection append event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: The append event is invoked for each element as it is appended to the collection.
    This occurs for single-item appends as well as for a “bulk replace” operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value being appended. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection append event where the collection was not actually mutated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: This event differs from [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") in that it is fired off for de-duplicating
    collections such as sets and dictionaries, when the object already exists in the
    target collection. The event does not have a return value and the identity of
    the given object cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: The event is used for cascading objects into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when the collection has already been mutated via a backref
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value that would be appended if the object did not already exist
    in the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation, as well as be inspected for information about the source
    of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `collection[some_key_or_index] = value`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is defined for this event.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.15.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection ‘bulk replace’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: This event is invoked for a sequence of values as they are incoming to a bulk
    collection set operation, which can be modified in place before the values are
    treated as ORM objects. This is an “early hook” that runs before the bulk replace
    routine attempts to reconcile which objects are already present in the collection
    and which are being removed by the net replace operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is typical that this method be combined with use of the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event. When using both of these events,
    note that a bulk replace operation will invoke the [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event for all new items, even after [`AttributeEvents.bulk_replace()`](#sqlalchemy.orm.AttributeEvents.bulk_replace
    "sqlalchemy.orm.AttributeEvents.bulk_replace") has been invoked for the collection
    as a whole. In order to determine if an [`AttributeEvents.append()`](#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append") event is part of a bulk replace, use
    the symbol `attributes.OP_BULK_REPLACE` to test the incoming initiator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – a sequence (e.g. a list) of the values being set. The handler can
    modify this list in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the sequence
    of keys used in the operation, typically only for a dictionary update. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: Receive a ‘collection dispose’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is triggered for a collection-based attribute when a collection
    is replaced, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: The old collection received will contain its previous contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The collection passed to [`AttributeEvents.dispose_collection()`](#sqlalchemy.orm.AttributeEvents.dispose_collection
    "sqlalchemy.orm.AttributeEvents.dispose_collection") will now have its contents
    before the dispose intact; previously, the collection would be empty.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: Receive a ‘collection init’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: This event is triggered for a collection-based attribute, when the initial “empty
    collection” is first generated for a blank attribute, as well as for when the
    collection is replaced with a new one, such as via a set event.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., given that `User.addresses` is a relationship-based collection, the event
    is triggered here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: 'and also during replace operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collection` – the new collection. This will always be generated from what
    was specified as [`relationship.collection_class`](relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), and will always be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collection_adapter` – the [`CollectionAdapter`](collection_api.html#sqlalchemy.orm.collections.CollectionAdapter
    "sqlalchemy.orm.collections.CollectionAdapter") that will mediate internal access
    to the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") - “scalar” version of this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: Receive a scalar “init” event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is invoked when an uninitialized, unpersisted scalar attribute is
    accessed, e.g. read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: The ORM’s default behavior when this occurs for an un-initialized attribute
    is to return the value `None`; note this differs from Python’s usual behavior
    of raising `AttributeError`. The event here can be used to customize what value
    is actually returned, with the assumption that the event listener would be mirroring
    a default generator that is configured on the Core [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object as well.
  prefs: []
  type: TYPE_NORMAL
- en: Since a default generator on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") might also produce a changing value such as a timestamp,
    the [`AttributeEvents.init_scalar()`](#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event handler can also be used to
    **set** the newly returned value, so that a Core-level default generation function
    effectively fires off only once, but at the moment the attribute is accessed on
    the non-persisted object. Normally, no change to the object’s state is made when
    an uninitialized attribute is accessed (much older SQLAlchemy versions did in
    fact change the object’s state).
  prefs: []
  type: TYPE_NORMAL
- en: 'If a default generator on a column returned a particular constant, a handler
    might be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, we initialize the attribute `MyClass.some_attribute` to the value of
    `SOME_CONSTANT`. The above code includes the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: By setting the value `SOME_CONSTANT` in the given `dict_`, we indicate that
    this value is to be persisted to the database. This supersedes the use of `SOME_CONSTANT`
    in the default generator for the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). The `active_column_defaults.py` example given at
    [Attribute Instrumentation](examples.html#examples-instrumentation) illustrates
    using the same approach for a changing default, e.g. a timestamp generator. In
    this particular example, it is not strictly necessary to do this since `SOME_CONSTANT`
    would be part of the INSERT statement in either case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By establishing the `retval=True` flag, the value we return from the function
    will be returned by the attribute getter. Without this flag, the event is assumed
    to be a passive observer and the return value of our function is ignored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `propagate=True` flag is significant if the mapped class includes inheriting
    subclasses, which would also make use of this event listener. Without this flag,
    an inheriting subclass will not use our event handler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the above example, the attribute set event [`AttributeEvents.set()`](#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set") as well as the related validation feature
    provided by [`validates`](mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    is **not** invoked when we apply our value to the given `dict_`. To have these
    events to invoke in response to our newly generated value, apply the value to
    the given object as a normal attribute set operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: When multiple listeners are set up, the generation of the value is “chained”
    from one listener to the next by passing the value returned by the previous listener
    that specifies `retval=True` as the `value` argument of the next listener.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value that is to be returned before this event listener were
    invoked. This value begins as the value `None`, however will be the return value
    of the previous event handler function if multiple listeners are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dict_` – the attribute dictionary of this mapped object. This is normally
    the `__dict__` of the object, but in all cases represents the destination that
    the attribute system uses to get at the actual value of this attribute. Placing
    the value in this dictionary has the effect that the value will be used in the
    INSERT statement generated by the unit of work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents.init_collection()`](#sqlalchemy.orm.AttributeEvents.init_collection
    "sqlalchemy.orm.AttributeEvents.init_collection") - collection version of this
    event'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Attribute Instrumentation](examples.html#examples-instrumentation) - see the
    `active_column_defaults.py` example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: Receive a ‘modified’ event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: This event is triggered when the [`flag_modified()`](session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") function is used to trigger a modify
    event on an attribute without any specific value being set.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: Receive a collection remove event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value being removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the event is established using the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") parameter set to True, this will be the key
    used in the operation, such as `del collection[some_key_or_index]`. The parameter
    is not passed to the event at all if the the [`AttributeEvents.include_key`](#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents") was not used to set up the event; this is to
    allow backwards compatibility with existing event handlers that don’t include
    the `key` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: No return value is defined for this event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: Receive a scalar set event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the object instance receiving the event. If the listener is registered
    with `raw=True`, this will be the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – the value being set. If this listener is registered with `retval=True`,
    the listener function must return this value, or a new value which replaces it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oldvalue` – the previous value being replaced. This may also be the symbol
    `NEVER_SET` or `NO_VALUE`. If the listener is registered with `active_history=True`,
    the previous value of the attribute will be loaded from the database if the existing
    value is currently unloaded or expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` – An instance of `Event` representing the initiation of the event.
    May be modified from its original value by backref handlers in order to control
    chained event propagation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: if the event was registered with `retval=True`, the given value, or a new effective
    value, should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeEvents`](#sqlalchemy.orm.AttributeEvents "sqlalchemy.orm.AttributeEvents")
    - background on listener options such as propagation to subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: Query Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [QueryEvents](#sqlalchemy.orm.QueryEvents) | Represent events within the
    construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: Represent events within the construction of a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    event methods are legacy as of SQLAlchemy 2.0, and only apply to direct use of
    the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. They are not used for [2.0 style](../glossary.html#term-2.0-style) statements.
    For events to intercept and modify 2.0 style ORM use, use the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    hooks are now superseded by the [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[before_compile()](#sqlalchemy.orm.QueryEvents.before_compile), [before_compile_delete()](#sqlalchemy.orm.QueryEvents.before_compile_delete),
    [before_compile_update()](#sqlalchemy.orm.QueryEvents.before_compile_update),
    [dispatch](#sqlalchemy.orm.QueryEvents.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.QueryEvents`](#sqlalchemy.orm.QueryEvents "sqlalchemy.orm.QueryEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Receive the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object before it is composed into a core [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is superseded by the much more
    capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. In version 1.4, the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event is **no longer used** for ORM-level
    attribute loads, such as loads of deferred or expired attributes as well as relationship
    loaders. See the new examples in [ORM Query Events](examples.html#examples-session-orm-events)
    which illustrate new ways of intercepting and modifying ORM queries for the most
    common purpose of adding arbitrary filter criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This event is intended to allow changes to the query given:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: The event should normally be listened with the `retval=True` parameter set,
    so that the modified query may be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event by default will disallow “baked”
    queries from caching a query, if the event hook returns a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. This affects both direct use of the baked query
    extension as well as its operation within lazy loaders and eager loaders for relationships.
    In order to re-establish the query being cached, apply the event adding the `bake_ok`
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: When `bake_ok` is set to True, the event hook will only be invoked once, and
    not called for subsequent invocations of a particular query that is being cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using the before_compile event](extensions/baked.html#baked-with-before-compile)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.delete()`](queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  prefs: []
  type: TYPE_NORMAL
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, this event should be configured
    with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “delete context” object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete_context` – a “delete context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_delete.delete_context`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.2.17.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: Allow modifications to the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object within [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The [`QueryEvents.before_compile_update()`](#sqlalchemy.orm.QueryEvents.before_compile_update
    "sqlalchemy.orm.QueryEvents.before_compile_update") event is superseded by the
    much more capable [`SessionEvents.do_orm_execute()`](#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.'
  prefs: []
  type: TYPE_NORMAL
- en: Like the [`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event, if the event is to be used
    to alter the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, it should be configured with `retval=True`, and the modified [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object returned, as in
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: The `.values` dictionary of the “update context” object can also be modified
    in place as illustrated above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`query` – a [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    instance; this is also the `.query` attribute of the given “update context” object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_context` – an “update context” object which is the same kind of object
    as described in `QueryEvents.after_bulk_update.update_context`. The object has
    a `.values` attribute in an UPDATE context which is the dictionary of parameters
    passed to [`Query.update()`](queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update"). This dictionary can be modified to alter the VALUES
    clause of the resulting UPDATE statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.2.17.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile()`](#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryEvents.before_compile_delete()`](#sqlalchemy.orm.QueryEvents.before_compile_delete
    "sqlalchemy.orm.QueryEvents.before_compile_delete")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '## Instrumentation Events'
  prefs: []
  type: TYPE_NORMAL
- en: Defines SQLAlchemy’s system of class instrumentation.
  prefs: []
  type: TYPE_NORMAL
- en: This module is usually not directly visible to user applications, but defines
    a large part of the ORM’s interactivity.
  prefs: []
  type: TYPE_NORMAL
- en: instrumentation.py deals with registration of end-user classes for state tracking.
    It interacts closely with state.py and attributes.py which establish per-instance
    and per-class-attribute instrumentation, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The class instrumentation system can be customized on a per-class or global
    basis using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") module, which provides the means to build and
    specify alternate instrumentation forms.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentationEvents](#sqlalchemy.orm.InstrumentationEvents) | Events related
    to class instrumentation events. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Events related to class instrumentation events.
  prefs: []
  type: TYPE_NORMAL
- en: The listeners here support being established against any new style class, that
    is any object that is a subclass of ‘type’. Events will then be fired off for
    events against that class. If the “propagate=True” flag is passed to event.listen(),
    the event will fire off for subclasses of that class as well.
  prefs: []
  type: TYPE_NORMAL
- en: The Python `type` builtin is also accepted as a target, which when used has
    the effect of events being emitted for all classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note the “propagate” flag here is defaulted to `True`, unlike the other class
    level events where it defaults to `False`. This means that new subclasses will
    also be the subject of these events, when a listener is established on a superclass.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[attribute_instrument()](#sqlalchemy.orm.InstrumentationEvents.attribute_instrument),
    [class_instrument()](#sqlalchemy.orm.InstrumentationEvents.class_instrument),
    [class_uninstrument()](#sqlalchemy.orm.InstrumentationEvents.class_uninstrument),
    [dispatch](#sqlalchemy.orm.InstrumentationEvents.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InstrumentationEvents`](#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents") (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: Called when an attribute is instrumented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: Called after the given class is instrumented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: Called before the given class is uninstrumented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: To get at the [`ClassManager`](internals.html#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager"),
    use `manager_of_class()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
