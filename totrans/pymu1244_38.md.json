["```py\nclass Page\n```", "```py\nbound()\n```", "```py\nadd_caret_annot(point)\n```", "```py\nadd_text_annot(point, text, icon='Note')\n```", "```py\nadd_freetext_annot(rect, text, fontsize=12, fontname='helv', border_color=None, text_color=0, fill_color=1, rotate=0, align=TEXT_ALIGN_LEFT)\n```", "```py\nadd_file_annot(pos, buffer, filename, ufilename=None, desc=None, icon='PushPin')\n```", "```py\nadd_ink_annot(list)\n```", "```py\nadd_line_annot(p1, p2)\n```", "```py\nadd_rect_annot(rect)\n```", "```py\nadd_circle_annot(rect)\n```", "```py\nadd_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1, 1), text_color=(0, 0, 0), cross_out=True)\n```", "```py\n        page.insert_text(point,  # anywhere, but outside all redaction rectangles\n            \"something\",  # some non-empty string\n            fontname=\"newname\",  # new, unused reference name\n            fontfile=\"...\",  # desired font file\n            render_mode=3,  # makes the text invisible\n        )\n        page.add_redact_annot(..., fontname=\"newname\") \n        ```", "```py\napply_redactions(images=PDF_REDACT_IMAGE_PIXELS | 2, graphics=PDF_REDACT_LINE_ART_IF_TOUCHED | 2, text=PDF_REDACT_TEXT_REMOVE | 0)\n```", "```py\nadd_polyline_annot(points)\n```", "```py\nadd_polygon_annot(points)\n```", "```py\nadd_underline_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_strikeout_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_squiggly_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_highlight_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\n>>> # prefer quads=True in text searching for annotations!\n>>> quads = page.search_for(\"pymupdf\", quads=True)\n>>> page.add_highlight_annot(quads) \n```", "```py\ncluster_drawings(clip=None, drawings=None, x_tolerance=3, y_tolerance=3)\n```", "```py\nfind_tables(clip=None, strategy=None, vertical_strategy=None, horizontal_strategy=None, vertical_lines=None, horizontal_lines=None, snap_tolerance=None, snap_x_tolerance=None, snap_y_tolerance=None, join_tolerance=None, join_x_tolerance=None, join_y_tolerance=None, edge_min_length=3, min_words_vertical=3, min_words_horizontal=1, intersection_tolerance=None, intersection_x_tolerance=None, intersection_y_tolerance=None, text_tolerance=None, text_x_tolerance=None, text_y_tolerance=None, add_lines=None)\n```", "```py\nadd_stamp_annot(rect, stamp=0)\n```", "```py\nadd_widget(widget)\n```", "```py\ndelete_annot(annot)\n```", "```py\ndelete_widget(widget)\n```", "```py\ndelete_link(linkdict)\n```", "```py\ninsert_link(linkdict)\n```", "```py\nupdate_link(linkdict)\n```", "```py\nget_label()\n```", "```py\nget_links()\n```", "```py\nlinks(kinds=None)\n```", "```py\nannots(types=None)\n```", "```py\nIn [4]: xrefs = [annot.xref for annot in page.annots(types=[...])]\nIn [5]: for xref in xrefs:\n   ...:     annot = page.load_annot(xref)\n   ...:     annot.update()\n   ...:     page = doc.reload_page(page)\nIn [6]: \n```", "```py\nwidgets(types=None)\n```", "```py\nwrite_text(rect=None, writers=None, overlay=True, color=None, opacity=None, keep_proportion=True, rotate=0, oc=0)\n```", "```py\ninsert_text(point, text, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None, render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, overlay=True, oc=0)\n```", "```py\ninsert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None, render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, expandtabs=8, align=TEXT_ALIGN_LEFT, charwidths=None, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, oc=0, overlay=True)\n```", "```py\ninsert_htmlbox(rect, text, *, css=None, scale_low=0, archive=None, rotate=0, oc=0, opacity=1, overlay=True)\n```", "```py\ndraw_line(p1, p2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_zigzag(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_squiggle(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_circle(center, radius, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_oval(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_sector(center, point, angle, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, fullSector=True, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_polyline(points, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_bezier(p1, p2, p3, p4, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_curve(p1, p2, p3, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_rect(rect, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)\n```", "```py\ndraw_quad(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ninsert_font(fontname='helv', fontfile=None, fontbuffer=None, set_simple=False, encoding=TEXT_ENCODING_LATIN)\n```", "```py\ninsert_image(rect, *, alpha=-1, filename=None, height=0, keep_proportion=True, mask=None, oc=0, overlay=True, pixmap=None, rotate=0, stream=None, width=0, xref=0)\n```", "```py\n>>> doc = pymupdf.open(...)\n>>> rect = pymupdf.Rect(0, 0, 50, 50)       # put thumbnail in upper left corner\n>>> img = open(\"some.jpg\", \"rb\").read()  # an image file\n>>> img_xref = 0                         # first execution embeds the image\n>>> for page in doc:\n img_xref = page.insert_image(rect, stream=img,\n xref=img_xref,  2nd time reuses existing image\n )\n>>> doc.save(...) \n```", "```py\nreplace_image(xref, filename=None, pixmap=None, stream=None)\n```", "```py\ndelete_image(xref)\n```", "```py\nget_text(option, *, clip=None, flags=None, textpage=None, sort=False, delimiters=None)\n```", "```py\nget_textbox(rect, textpage=None)\n```", "```py\n>>> rl = page.search_for(\"currency:\")\n>>> page.get_textbox(rl[0])\n'Currency:'\n>>> \n```", "```py\nget_textpage(clip=None, flags=3)\n```", "```py\nget_textpage_ocr(flags=3, language='eng', dpi=72, full=False, tessdata=None)\n```", "```py\nget_drawings(extended=False)\n```", "```py\n+------+------+--------+------+--------+\n| line | lvl0 | lvl1   | lvl2 |  lvl3  |\n+------+------+--------+------+--------+\n|  0   | clip |        |      |        |\n|  1   |      | fill   |      |        |\n|  2   |      | group  |      |        |\n|  3   |      |        | clip |        |\n|  4   |      |        |      | stroke |\n|  5   |      |        | fill |        |  ends scope of clip in line 3\n|  6   |      | stroke |      |        |  ends scope of group in line 2\n|  7   |      | clip   |      |        |\n|  8   | fill |        |      |        |  ends scope of line 0\n+------+------+--------+------+--------+ \n```", "```py\nget_cdrawings(extended=False)\n```", "```py\nget_fonts(full=False)\n```", "```py\nget_images(full=False)\n```", "```py\nget_image_info(hashes=False, xrefs=False)\n```", "```py\nget_xobjects()\n```", "```py\nget_image_rects(item, transform=False)\n```", "```py\nget_image_bbox(item, transform=False)\n```", "```py\nget_svg_image(matrix=pymupdf.Identity, text_as_path=True)\n```", "```py\nget_pixmap(*, matrix=pymupdf.Identity, dpi=None, colorspace=pymupdf.csRGB, clip=None, alpha=False, annots=True)\n```", "```py\n    In [1]: import pymupdf\n    In [2]: doc=pymupdf.open(\"demo1.pdf\")\n    In [3]: page=doc[0]\n    In [4]: rotation = page.rotation\n    In [5]: cropbox = page.cropbox\n    In [6]: page.set_cropbox(page.mediabox)\n    In [7]: page.set_rotation(0)\n    In [8]: pix = page.get_pixmap()\n    In [9]: page.set_cropbox(cropbox)\n    In [10]: if rotation != 0:\n       ...:     page.set_rotation(rotation)\n       ...:\n    In [11]: \n    ```", "```py\nannot_names()\n```", "```py\nannot_xrefs()\n```", "```py\nload_annot(ident)\n```", "```py\nload_widget(xref)\n```", "```py\nload_links()\n```", "```py\nset_rotation(rotate)\n```", "```py\nremove_rotation()\n```", "```py\nshow_pdf_page(rect, docsrc, pno=0, keep_proportion=True, overlay=True, oc=0, rotate=0, clip=None)\n```", "```py\n>>> doc = pymupdf.open()  # new empty PDF\n>>> page=doc.new_page()  # new page in A4 format\n>>>\n>>> # upper half page\n>>> r1 = pymupdf.Rect(0, 0, page.rect.width, page.rect.height/2)\n>>>\n>>> # lower half page\n>>> r2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)\n>>>\n>>> src = pymupdf.open(\"PyMuPDF.pdf\")  # show page 0 of this\n>>>\n>>> page.show_pdf_page(r1, src, 0, rotate=90)\n>>> page.show_pdf_page(r2, src, 0, rotate=-90)\n>>> doc.save(\"show.pdf\") \n```", "```py\nnew_shape()\n```", "```py\nsearch_for(needle, *, clip=None, quads=False, flags=TEXT_DEHYPHENATE | TEXT_PRESERVE_WHITESPACE | TEXT_PRESERVE_LIGATURES | TEXT_MEDIABOX_CLIP, textpage=None)\n```", "```py\n>>> pattern = re.compile(r\"...\")  # the regex pattern\n>>> words = page.get_text(\"words\")  # extract words on page\n>>> matches = [w for w in words if pattern.search(w[4])] \n```", "```py\nset_mediabox(r)\n```", "```py\nset_cropbox(r)\n```", "```py\n>>> page = doc.new_page()\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> page.cropbox  # cropbox and mediabox still equal\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # now set cropbox to a part of the page\n>>> page.set_cropbox(pymupdf.Rect(100, 100, 400, 400))\n>>> # this will also change the \"rect\" property:\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 300.0, 300.0)\n>>>\n>>> # but mediabox remains unaffected\n>>> page.mediabox\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # revert CropBox change\n>>> # either set it to MediaBox\n>>> page.set_cropbox(page.mediabox)\n>>> # or 'refresh' MediaBox: will remove all other rectangles\n>>> page.set_mediabox(page.mediabox) \n```", "```py\nset_artbox(r)\n```", "```py\nset_bleedbox(r)\n```", "```py\nset_trimbox(r)\n```", "```py\nrotation\n```", "```py\ncropbox_position\n```", "```py\ncropbox\n```", "```py\nartbox\n```", "```py\nbleedbox\n```", "```py\ntrimbox\n```", "```py\nmediabox_size\n```", "```py\nmediabox\n```", "```py\ntransformation_matrix\n```", "```py\nrotation_matrix\n```", "```py\nderotation_matrix\n```", "```py\n>>> page.set_rotation(90)  # rotate an ISO A4 page\n>>> page.rect\nRect(0.0, 0.0, 842.0, 595.0)\n>>> p = pymupdf.Point(0, 0)  # where did top-left point land?\n>>> p * page.rotation_matrix\nPoint(842.0, 0.0)\n>>> \n```", "```py\nfirst_link\n```", "```py\nfirst_annot\n```", "```py\nfirst_widget\n```", "```py\nnumber\n```", "```py\nparent\n```", "```py\nrect\n```", "```py\nxref\n```", "```py\nclass Page\n```", "```py\nbound()\n```", "```py\nadd_caret_annot(point)\n```", "```py\nadd_text_annot(point, text, icon='Note')\n```", "```py\nadd_freetext_annot(rect, text, fontsize=12, fontname='helv', border_color=None, text_color=0, fill_color=1, rotate=0, align=TEXT_ALIGN_LEFT)\n```", "```py\nadd_file_annot(pos, buffer, filename, ufilename=None, desc=None, icon='PushPin')\n```", "```py\nadd_ink_annot(list)\n```", "```py\nadd_line_annot(p1, p2)\n```", "```py\nadd_rect_annot(rect)\n```", "```py\nadd_circle_annot(rect)\n```", "```py\nadd_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1, 1), text_color=(0, 0, 0), cross_out=True)\n```", "```py\n        page.insert_text(point,  # anywhere, but outside all redaction rectangles\n            \"something\",  # some non-empty string\n            fontname=\"newname\",  # new, unused reference name\n            fontfile=\"...\",  # desired font file\n            render_mode=3,  # makes the text invisible\n        )\n        page.add_redact_annot(..., fontname=\"newname\") \n        ```", "```py\napply_redactions(images=PDF_REDACT_IMAGE_PIXELS | 2, graphics=PDF_REDACT_LINE_ART_IF_TOUCHED | 2, text=PDF_REDACT_TEXT_REMOVE | 0)\n```", "```py\nadd_polyline_annot(points)\n```", "```py\nadd_polygon_annot(points)\n```", "```py\nadd_underline_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_strikeout_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_squiggly_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_highlight_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\n>>> # prefer quads=True in text searching for annotations!\n>>> quads = page.search_for(\"pymupdf\", quads=True)\n>>> page.add_highlight_annot(quads) \n```", "```py\ncluster_drawings(clip=None, drawings=None, x_tolerance=3, y_tolerance=3)\n```", "```py\nfind_tables(clip=None, strategy=None, vertical_strategy=None, horizontal_strategy=None, vertical_lines=None, horizontal_lines=None, snap_tolerance=None, snap_x_tolerance=None, snap_y_tolerance=None, join_tolerance=None, join_x_tolerance=None, join_y_tolerance=None, edge_min_length=3, min_words_vertical=3, min_words_horizontal=1, intersection_tolerance=None, intersection_x_tolerance=None, intersection_y_tolerance=None, text_tolerance=None, text_x_tolerance=None, text_y_tolerance=None, add_lines=None)\n```", "```py\nadd_stamp_annot(rect, stamp=0)\n```", "```py\nadd_widget(widget)\n```", "```py\ndelete_annot(annot)\n```", "```py\ndelete_widget(widget)\n```", "```py\ndelete_link(linkdict)\n```", "```py\ninsert_link(linkdict)\n```", "```py\nupdate_link(linkdict)\n```", "```py\nget_label()\n```", "```py\nget_links()\n```", "```py\nlinks(kinds=None)\n```", "```py\nannots(types=None)\n```", "```py\nIn [4]: xrefs = [annot.xref for annot in page.annots(types=[...])]\nIn [5]: for xref in xrefs:\n   ...:     annot = page.load_annot(xref)\n   ...:     annot.update()\n   ...:     page = doc.reload_page(page)\nIn [6]: \n```", "```py\nwidgets(types=None)\n```", "```py\nwrite_text(rect=None, writers=None, overlay=True, color=None, opacity=None, keep_proportion=True, rotate=0, oc=0)\n```", "```py\ninsert_text(point, text, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None, render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, overlay=True, oc=0)\n```", "```py\ninsert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None, render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, expandtabs=8, align=TEXT_ALIGN_LEFT, charwidths=None, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, oc=0, overlay=True)\n```", "```py\ninsert_htmlbox(rect, text, *, css=None, scale_low=0, archive=None, rotate=0, oc=0, opacity=1, overlay=True)\n```", "```py\ndraw_line(p1, p2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_zigzag(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_squiggle(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_circle(center, radius, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_oval(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_sector(center, point, angle, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, fullSector=True, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_polyline(points, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_bezier(p1, p2, p3, p4, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_curve(p1, p2, p3, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_rect(rect, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)\n```", "```py\ndraw_quad(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ninsert_font(fontname='helv', fontfile=None, fontbuffer=None, set_simple=False, encoding=TEXT_ENCODING_LATIN)\n```", "```py\ninsert_image(rect, *, alpha=-1, filename=None, height=0, keep_proportion=True, mask=None, oc=0, overlay=True, pixmap=None, rotate=0, stream=None, width=0, xref=0)\n```", "```py\n>>> doc = pymupdf.open(...)\n>>> rect = pymupdf.Rect(0, 0, 50, 50)       # put thumbnail in upper left corner\n>>> img = open(\"some.jpg\", \"rb\").read()  # an image file\n>>> img_xref = 0                         # first execution embeds the image\n>>> for page in doc:\n img_xref = page.insert_image(rect, stream=img,\n xref=img_xref,  2nd time reuses existing image\n )\n>>> doc.save(...) \n```", "```py\nreplace_image(xref, filename=None, pixmap=None, stream=None)\n```", "```py\ndelete_image(xref)\n```", "```py\nget_text(option, *, clip=None, flags=None, textpage=None, sort=False, delimiters=None)\n```", "```py\nget_textbox(rect, textpage=None)\n```", "```py\n>>> rl = page.search_for(\"currency:\")\n>>> page.get_textbox(rl[0])\n'Currency:'\n>>> \n```", "```py\nget_textpage(clip=None, flags=3)\n```", "```py\nget_textpage_ocr(flags=3, language='eng', dpi=72, full=False, tessdata=None)\n```", "```py\nget_drawings(extended=False)\n```", "```py\n+------+------+--------+------+--------+\n| line | lvl0 | lvl1   | lvl2 |  lvl3  |\n+------+------+--------+------+--------+\n|  0   | clip |        |      |        |\n|  1   |      | fill   |      |        |\n|  2   |      | group  |      |        |\n|  3   |      |        | clip |        |\n|  4   |      |        |      | stroke |\n|  5   |      |        | fill |        |  ends scope of clip in line 3\n|  6   |      | stroke |      |        |  ends scope of group in line 2\n|  7   |      | clip   |      |        |\n|  8   | fill |        |      |        |  ends scope of line 0\n+------+------+--------+------+--------+ \n```", "```py\nget_cdrawings(extended=False)\n```", "```py\nget_fonts(full=False)\n```", "```py\nget_images(full=False)\n```", "```py\nget_image_info(hashes=False, xrefs=False)\n```", "```py\nget_xobjects()\n```", "```py\nget_image_rects(item, transform=False)\n```", "```py\nget_image_bbox(item, transform=False)\n```", "```py\nget_svg_image(matrix=pymupdf.Identity, text_as_path=True)\n```", "```py\nget_pixmap(*, matrix=pymupdf.Identity, dpi=None, colorspace=pymupdf.csRGB, clip=None, alpha=False, annots=True)\n```", "```py\n    In [1]: import pymupdf\n    In [2]: doc=pymupdf.open(\"demo1.pdf\")\n    In [3]: page=doc[0]\n    In [4]: rotation = page.rotation\n    In [5]: cropbox = page.cropbox\n    In [6]: page.set_cropbox(page.mediabox)\n    In [7]: page.set_rotation(0)\n    In [8]: pix = page.get_pixmap()\n    In [9]: page.set_cropbox(cropbox)\n    In [10]: if rotation != 0:\n       ...:     page.set_rotation(rotation)\n       ...:\n    In [11]: \n    ```", "```py\nannot_names()\n```", "```py\nannot_xrefs()\n```", "```py\nload_annot(ident)\n```", "```py\nload_widget(xref)\n```", "```py\nload_links()\n```", "```py\nset_rotation(rotate)\n```", "```py\nremove_rotation()\n```", "```py\nshow_pdf_page(rect, docsrc, pno=0, keep_proportion=True, overlay=True, oc=0, rotate=0, clip=None)\n```", "```py\n>>> doc = pymupdf.open()  # new empty PDF\n>>> page=doc.new_page()  # new page in A4 format\n>>>\n>>> # upper half page\n>>> r1 = pymupdf.Rect(0, 0, page.rect.width, page.rect.height/2)\n>>>\n>>> # lower half page\n>>> r2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)\n>>>\n>>> src = pymupdf.open(\"PyMuPDF.pdf\")  # show page 0 of this\n>>>\n>>> page.show_pdf_page(r1, src, 0, rotate=90)\n>>> page.show_pdf_page(r2, src, 0, rotate=-90)\n>>> doc.save(\"show.pdf\") \n```", "```py\nnew_shape()\n```", "```py\nsearch_for(needle, *, clip=None, quads=False, flags=TEXT_DEHYPHENATE | TEXT_PRESERVE_WHITESPACE | TEXT_PRESERVE_LIGATURES | TEXT_MEDIABOX_CLIP, textpage=None)\n```", "```py\n>>> pattern = re.compile(r\"...\")  # the regex pattern\n>>> words = page.get_text(\"words\")  # extract words on page\n>>> matches = [w for w in words if pattern.search(w[4])] \n```", "```py\nset_mediabox(r)\n```", "```py\nset_cropbox(r)\n```", "```py\n>>> page = doc.new_page()\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> page.cropbox  # cropbox and mediabox still equal\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # now set cropbox to a part of the page\n>>> page.set_cropbox(pymupdf.Rect(100, 100, 400, 400))\n>>> # this will also change the \"rect\" property:\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 300.0, 300.0)\n>>>\n>>> # but mediabox remains unaffected\n>>> page.mediabox\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # revert CropBox change\n>>> # either set it to MediaBox\n>>> page.set_cropbox(page.mediabox)\n>>> # or 'refresh' MediaBox: will remove all other rectangles\n>>> page.set_mediabox(page.mediabox) \n```", "```py\nset_artbox(r)\n```", "```py\nset_bleedbox(r)\n```", "```py\nset_trimbox(r)\n```", "```py\nrotation\n```", "```py\ncropbox_position\n```", "```py\ncropbox\n```", "```py\nartbox\n```", "```py\nbleedbox\n```", "```py\ntrimbox\n```", "```py\nmediabox_size\n```", "```py\nmediabox\n```", "```py\ntransformation_matrix\n```", "```py\nrotation_matrix\n```", "```py\nderotation_matrix\n```", "```py\n>>> page.set_rotation(90)  # rotate an ISO A4 page\n>>> page.rect\nRect(0.0, 0.0, 842.0, 595.0)\n>>> p = pymupdf.Point(0, 0)  # where did top-left point land?\n>>> p * page.rotation_matrix\nPoint(842.0, 0.0)\n>>> \n```", "```py\nfirst_link\n```", "```py\nfirst_annot\n```", "```py\nfirst_widget\n```", "```py\nnumber\n```", "```py\nparent\n```", "```py\nrect\n```", "```py\nxref\n```", "```py\nadd_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1, 1), text_color=(0, 0, 0), cross_out=True)\n```", "```py\n        page.insert_text(point,  # anywhere, but outside all redaction rectangles\n            \"something\",  # some non-empty string\n            fontname=\"newname\",  # new, unused reference name\n            fontfile=\"...\",  # desired font file\n            render_mode=3,  # makes the text invisible\n        )\n        page.add_redact_annot(..., fontname=\"newname\") \n        ```", "```py\napply_redactions(images=PDF_REDACT_IMAGE_PIXELS | 2, graphics=PDF_REDACT_LINE_ART_IF_TOUCHED | 2, text=PDF_REDACT_TEXT_REMOVE | 0)\n```", "```py\nadd_polyline_annot(points)\n```", "```py\nadd_polygon_annot(points)\n```", "```py\nadd_underline_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_strikeout_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_squiggly_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\nadd_highlight_annot(quads=None, start=None, stop=None, clip=None)\n```", "```py\n>>> # prefer quads=True in text searching for annotations!\n>>> quads = page.search_for(\"pymupdf\", quads=True)\n>>> page.add_highlight_annot(quads) \n```", "```py\ncluster_drawings(clip=None, drawings=None, x_tolerance=3, y_tolerance=3)\n```", "```py\nfind_tables(clip=None, strategy=None, vertical_strategy=None, horizontal_strategy=None, vertical_lines=None, horizontal_lines=None, snap_tolerance=None, snap_x_tolerance=None, snap_y_tolerance=None, join_tolerance=None, join_x_tolerance=None, join_y_tolerance=None, edge_min_length=3, min_words_vertical=3, min_words_horizontal=1, intersection_tolerance=None, intersection_x_tolerance=None, intersection_y_tolerance=None, text_tolerance=None, text_x_tolerance=None, text_y_tolerance=None, add_lines=None)\n```", "```py\nadd_stamp_annot(rect, stamp=0)\n```", "```py\nadd_widget(widget)\n```", "```py\ndelete_annot(annot)\n```", "```py\ndelete_widget(widget)\n```", "```py\ndelete_link(linkdict)\n```", "```py\ninsert_link(linkdict)\n```", "```py\nupdate_link(linkdict)\n```", "```py\nget_label()\n```", "```py\nget_links()\n```", "```py\nlinks(kinds=None)\n```", "```py\nannots(types=None)\n```", "```py\nIn [4]: xrefs = [annot.xref for annot in page.annots(types=[...])]\nIn [5]: for xref in xrefs:\n   ...:     annot = page.load_annot(xref)\n   ...:     annot.update()\n   ...:     page = doc.reload_page(page)\nIn [6]: \n```", "```py\nwidgets(types=None)\n```", "```py\nwrite_text(rect=None, writers=None, overlay=True, color=None, opacity=None, keep_proportion=True, rotate=0, oc=0)\n```", "```py\ninsert_text(point, text, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None, render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, overlay=True, oc=0)\n```", "```py\ninsert_textbox(rect, buffer, fontsize=11, fontname='helv', fontfile=None, idx=0, color=None, fill=None, render_mode=0, border_width=1, encoding=TEXT_ENCODING_LATIN, expandtabs=8, align=TEXT_ALIGN_LEFT, charwidths=None, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, oc=0, overlay=True)\n```", "```py\ninsert_htmlbox(rect, text, *, css=None, scale_low=0, archive=None, rotate=0, oc=0, opacity=1, overlay=True)\n```", "```py\ndraw_line(p1, p2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_zigzag(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_squiggle(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_circle(center, radius, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_oval(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_sector(center, point, angle, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, fullSector=True, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_polyline(points, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_bezier(p1, p2, p3, p4, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_curve(p1, p2, p3, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ndraw_rect(rect, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)\n```", "```py\ndraw_quad(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```", "```py\ninsert_font(fontname='helv', fontfile=None, fontbuffer=None, set_simple=False, encoding=TEXT_ENCODING_LATIN)\n```", "```py\ninsert_image(rect, *, alpha=-1, filename=None, height=0, keep_proportion=True, mask=None, oc=0, overlay=True, pixmap=None, rotate=0, stream=None, width=0, xref=0)\n```", "```py\n>>> doc = pymupdf.open(...)\n>>> rect = pymupdf.Rect(0, 0, 50, 50)       # put thumbnail in upper left corner\n>>> img = open(\"some.jpg\", \"rb\").read()  # an image file\n>>> img_xref = 0                         # first execution embeds the image\n>>> for page in doc:\n img_xref = page.insert_image(rect, stream=img,\n xref=img_xref,  2nd time reuses existing image\n )\n>>> doc.save(...) \n```", "```py\nreplace_image(xref, filename=None, pixmap=None, stream=None)\n```", "```py\ndelete_image(xref)\n```", "```py\nget_text(option, *, clip=None, flags=None, textpage=None, sort=False, delimiters=None)\n```", "```py\nget_textbox(rect, textpage=None)\n```", "```py\n>>> rl = page.search_for(\"currency:\")\n>>> page.get_textbox(rl[0])\n'Currency:'\n>>> \n```", "```py\nget_textpage(clip=None, flags=3)\n```", "```py\nget_textpage_ocr(flags=3, language='eng', dpi=72, full=False, tessdata=None)\n```", "```py\nget_drawings(extended=False)\n```", "```py\n+------+------+--------+------+--------+\n| line | lvl0 | lvl1   | lvl2 |  lvl3  |\n+------+------+--------+------+--------+\n|  0   | clip |        |      |        |\n|  1   |      | fill   |      |        |\n|  2   |      | group  |      |        |\n|  3   |      |        | clip |        |\n|  4   |      |        |      | stroke |\n|  5   |      |        | fill |        |  ends scope of clip in line 3\n|  6   |      | stroke |      |        |  ends scope of group in line 2\n|  7   |      | clip   |      |        |\n|  8   | fill |        |      |        |  ends scope of line 0\n+------+------+--------+------+--------+ \n```", "```py\nget_cdrawings(extended=False)\n```", "```py\nget_fonts(full=False)\n```", "```py\nget_images(full=False)\n```", "```py\nget_image_info(hashes=False, xrefs=False)\n```", "```py\nget_xobjects()\n```", "```py\nget_image_rects(item, transform=False)\n```", "```py\nget_image_bbox(item, transform=False)\n```", "```py\nget_svg_image(matrix=pymupdf.Identity, text_as_path=True)\n```", "```py\nget_pixmap(*, matrix=pymupdf.Identity, dpi=None, colorspace=pymupdf.csRGB, clip=None, alpha=False, annots=True)\n```", "```py\n    In [1]: import pymupdf\n    In [2]: doc=pymupdf.open(\"demo1.pdf\")\n    In [3]: page=doc[0]\n    In [4]: rotation = page.rotation\n    In [5]: cropbox = page.cropbox\n    In [6]: page.set_cropbox(page.mediabox)\n    In [7]: page.set_rotation(0)\n    In [8]: pix = page.get_pixmap()\n    In [9]: page.set_cropbox(cropbox)\n    In [10]: if rotation != 0:\n       ...:     page.set_rotation(rotation)\n       ...:\n    In [11]: \n    ```", "```py\nannot_names()\n```", "```py\nannot_xrefs()\n```", "```py\nload_annot(ident)\n```", "```py\nload_widget(xref)\n```", "```py\nload_links()\n```", "```py\nset_rotation(rotate)\n```", "```py\nremove_rotation()\n```", "```py\nshow_pdf_page(rect, docsrc, pno=0, keep_proportion=True, overlay=True, oc=0, rotate=0, clip=None)\n```", "```py\n>>> doc = pymupdf.open()  # new empty PDF\n>>> page=doc.new_page()  # new page in A4 format\n>>>\n>>> # upper half page\n>>> r1 = pymupdf.Rect(0, 0, page.rect.width, page.rect.height/2)\n>>>\n>>> # lower half page\n>>> r2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)\n>>>\n>>> src = pymupdf.open(\"PyMuPDF.pdf\")  # show page 0 of this\n>>>\n>>> page.show_pdf_page(r1, src, 0, rotate=90)\n>>> page.show_pdf_page(r2, src, 0, rotate=-90)\n>>> doc.save(\"show.pdf\") \n```", "```py\nnew_shape()\n```", "```py\nsearch_for(needle, *, clip=None, quads=False, flags=TEXT_DEHYPHENATE | TEXT_PRESERVE_WHITESPACE | TEXT_PRESERVE_LIGATURES | TEXT_MEDIABOX_CLIP, textpage=None)\n```", "```py\n>>> pattern = re.compile(r\"...\")  # the regex pattern\n>>> words = page.get_text(\"words\")  # extract words on page\n>>> matches = [w for w in words if pattern.search(w[4])] \n```", "```py\nset_mediabox(r)\n```", "```py\nset_cropbox(r)\n```", "```py\n>>> page = doc.new_page()\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> page.cropbox  # cropbox and mediabox still equal\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # now set cropbox to a part of the page\n>>> page.set_cropbox(pymupdf.Rect(100, 100, 400, 400))\n>>> # this will also change the \"rect\" property:\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 300.0, 300.0)\n>>>\n>>> # but mediabox remains unaffected\n>>> page.mediabox\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # revert CropBox change\n>>> # either set it to MediaBox\n>>> page.set_cropbox(page.mediabox)\n>>> # or 'refresh' MediaBox: will remove all other rectangles\n>>> page.set_mediabox(page.mediabox) \n```", "```py\nset_artbox(r)\n```", "```py\nset_bleedbox(r)\n```", "```py\nset_trimbox(r)\n```", "```py\nrotation\n```", "```py\ncropbox_position\n```", "```py\ncropbox\n```", "```py\nartbox\n```", "```py\nbleedbox\n```", "```py\ntrimbox\n```", "```py\nmediabox_size\n```", "```py\nmediabox\n```", "```py\ntransformation_matrix\n```", "```py\nrotation_matrix\n```", "```py\nderotation_matrix\n```", "```py\n>>> page.set_rotation(90)  # rotate an ISO A4 page\n>>> page.rect\nRect(0.0, 0.0, 842.0, 595.0)\n>>> p = pymupdf.Point(0, 0)  # where did top-left point land?\n>>> p * page.rotation_matrix\nPoint(842.0, 0.0)\n>>> \n```", "```py\nfirst_link\n```", "```py\nfirst_annot\n```", "```py\nfirst_widget\n```", "```py\nnumber\n```", "```py\nparent\n```", "```py\nrect\n```", "```py\nxref\n```"]