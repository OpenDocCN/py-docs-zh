["```py\nfunction sqlalchemy.sql.expression.and_(*clauses)\n```", "```py\nfrom sqlalchemy import and_\n\nstmt = select(users_table).where(\n                and_(\n                    users_table.c.name == 'wendy',\n                    users_table.c.enrolled == True\n                )\n            )\n```", "```py\nstmt = select(users_table).where(\n                (users_table.c.name == 'wendy') &\n                (users_table.c.enrolled == True)\n            )\n```", "```py\nstmt = select(users_table).\\\n        where(users_table.c.name == 'wendy').\\\n        where(users_table.c.enrolled == True)\n```", "```py\nfrom sqlalchemy import true\ncriteria = and_(true(), *expressions)\n```", "```py\nfunction sqlalchemy.sql.expression.bindparam(key: str | None, value: Any = _NoArg.NO_ARG, type_: _TypeEngineArgument[_T] | None = None, unique: bool = False, required: bool | Literal[_NoArg.NO_ARG] = _NoArg.NO_ARG, quote: bool | None = None, callable_: Callable[[], Any] | None = None, expanding: bool = False, isoutparam: bool = False, literal_execute: bool = False) \u2192 BindParameter[_T]\n```", "```py\nfrom sqlalchemy import bindparam\n\nstmt = select(users_table).where(\n    users_table.c.name == bindparam(\"username\")\n)\n```", "```py\nSELECT id, name FROM user WHERE name = :username\n```", "```py\nresult = connection.execute(stmt, {\"username\": \"wendy\"})\n```", "```py\nstmt = (\n    users_table.update()\n    .where(user_table.c.name == bindparam(\"username\"))\n    .values(fullname=bindparam(\"fullname\"))\n)\n\nconnection.execute(\n    stmt,\n    [\n        {\"username\": \"wendy\", \"fullname\": \"Wendy Smith\"},\n        {\"username\": \"jack\", \"fullname\": \"Jack Jones\"},\n    ],\n)\n```", "```py\nexpr = users_table.c.name == 'Wendy'\n```", "```py\nprint(repr(expr.right))\nBindParameter('%(4327771088 name)s', 'Wendy', type_=String())\n```", "```py\nuser.name = :name_1\n```", "```py\nstmt = select(users_table).where(users_table.c.name == 'Wendy')\nresult = connection.execute(stmt)\n```", "```py\nSELECT \"user\".id, \"user\".name\nFROM \"user\"\nWHERE \"user\".name = %(name_1)s\n{'name_1': 'Wendy'}\n```", "```py\nstmt = users_table.insert()\nresult = connection.execute(stmt, {\"name\": \"Wendy\"})\n```", "```py\nINSERT INTO \"user\" (name) VALUES (%(name)s)\n{'name': 'Wendy'}\n```", "```py\nfunction sqlalchemy.sql.expression.bitwise_not(expr: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.case(*whens: typing_Tuple[_ColumnExpressionArgument[bool], Any] | Mapping[Any, Any], value: Any | None = None, else_: Any | None = None) \u2192 Case[Any]\n```", "```py\nfrom sqlalchemy import case\n\nstmt = select(users_table).\\\n            where(\n                case(\n                    (users_table.c.name == 'wendy', 'W'),\n                    (users_table.c.name == 'jack', 'J'),\n                    else_='E'\n                )\n            )\n```", "```py\nSELECT id, name FROM user\nWHERE CASE\n    WHEN (name = :name_1) THEN :param_1\n    WHEN (name = :name_2) THEN :param_2\n    ELSE :param_3\nEND\n```", "```py\nstmt = select(users_table).\\\n            where(\n                case(\n                    {\"wendy\": \"W\", \"jack\": \"J\"},\n                    value=users_table.c.name,\n                    else_='E'\n                )\n            )\n```", "```py\nfrom sqlalchemy import case, literal_column\n\ncase(\n    (\n        orderline.c.qty > 100,\n        literal_column(\"'greaterthan100'\")\n    ),\n    (\n        orderline.c.qty > 10,\n        literal_column(\"'greaterthan10'\")\n    ),\n    else_=literal_column(\"'lessthan10'\")\n)\n```", "```py\nCASE\n    WHEN (orderline.qty > :qty_1) THEN 'greaterthan100'\n    WHEN (orderline.qty > :qty_2) THEN 'greaterthan10'\n    ELSE 'lessthan10'\nEND\n```", "```py\n    case(\n        (users_table.c.name == 'wendy', 'W'),\n        (users_table.c.name == 'jack', 'J')\n    )\n    ```", "```py\n    case(\n        {\"wendy\": \"W\", \"jack\": \"J\"},\n        value=users_table.c.name\n    )\n    ```", "```py\nfunction sqlalchemy.sql.expression.cast(expression: _ColumnExpressionOrLiteralArgument[Any], type_: _TypeEngineArgument[_T]) \u2192 Cast[_T]\n```", "```py\nfrom sqlalchemy import cast, Numeric\n\nstmt = select(cast(product_table.c.unit_price, Numeric(10, 4)))\n```", "```py\nSELECT CAST(unit_price AS NUMERIC(10, 4)) FROM product\n```", "```py\nfunction sqlalchemy.sql.expression.column(text: str, type_: _TypeEngineArgument[_T] | None = None, is_literal: bool = False, _selectable: FromClause | None = None) \u2192 ColumnClause[_T]\n```", "```py\nfrom sqlalchemy import column\n\nid, name = column(\"id\"), column(\"name\")\nstmt = select(id, name).select_from(\"user\")\n```", "```py\nSELECT id, name FROM user\n```", "```py\nfrom sqlalchemy.sql import column\n\nid, name = column(\"id\"), column(\"name\")\nstmt = select(id, name).select_from(\"user\")\n```", "```py\nfrom sqlalchemy import table, column, select\n\nuser = table(\"user\",\n        column(\"id\"),\n        column(\"name\"),\n        column(\"description\"),\n)\n\nstmt = select(user.c.description).where(user.c.name == 'wendy')\n```", "```py\nclass sqlalchemy.sql.expression.custom_op\n```", "```py\nfrom sqlalchemy.sql import UnaryExpression\nfrom sqlalchemy.sql import operators\nfrom sqlalchemy import Numeric\n\nunary = UnaryExpression(table.c.somecolumn,\n        modifier=operators.custom_op(\"!\"),\n        type_=Numeric)\n```", "```py\nfunction sqlalchemy.sql.expression.distinct(expr: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import distinct, func\nstmt = select(users_table.c.id, func.count(distinct(users_table.c.name)))\n```", "```py\nSELECT user.id, count(DISTINCT user.name) FROM user\n```", "```py\nstmt = select(func.count(users_table.c.name.distinct()))\n```", "```py\nfunction sqlalchemy.sql.expression.extract(field: str, expr: _ColumnExpressionArgument[Any]) \u2192 Extract\n```", "```py\nfrom sqlalchemy import extract\nfrom sqlalchemy import table, column\n\nlogged_table = table(\"user\",\n        column(\"id\"),\n        column(\"date_created\"),\n)\n\nstmt = select(logged_table.c.id).where(\n    extract(\"YEAR\", logged_table.c.date_created) == 2021\n)\n```", "```py\nstmt = select(\n    extract(\"YEAR\", logged_table.c.date_created)\n).where(logged_table.c.id == 1)\n```", "```py\nfunction sqlalchemy.sql.expression.false() \u2192 False_\n```", "```py\n>>> from sqlalchemy import false\n>>> print(select(t.c.x).where(false()))\nSELECT  x  FROM  t  WHERE  false \n```", "```py\n>>> print(select(t.c.x).where(false()))\nSELECT  x  FROM  t  WHERE  0  =  1 \n```", "```py\n>>> print(select(t.c.x).where(or_(t.c.x > 5, true())))\nSELECT  x  FROM  t  WHERE  true\n>>> print(select(t.c.x).where(and_(t.c.x > 5, false())))\nSELECT  x  FROM  t  WHERE  false \n```", "```py\nsqlalchemy.sql.expression.func = <sqlalchemy.sql.functions._FunctionGenerator object>\n```", "```py\n>>> print(func.count(1))\ncount(:param_1) \n```", "```py\n>>> print(select(func.count(table.c.id)))\nSELECT  count(sometable.id)  FROM  sometable \n```", "```py\n>>> print(func.current_timestamp())\nCURRENT_TIMESTAMP \n```", "```py\n>>> print(func.stats.yield_curve(5, 10))\nstats.yield_curve(:yield_curve_1,  :yield_curve_2) \n```", "```py\n>>> print(func.my_string(u'hi', type_=Unicode) + ' ' +\n...       func.my_string(u'there', type_=Unicode))\nmy_string(:my_string_1)  ||  :my_string_2  ||  my_string(:my_string_3) \n```", "```py\nprint(connection.execute(func.current_timestamp()).scalar())\n```", "```py\nfunction sqlalchemy.sql.expression.lambda_stmt(lmb: Callable[[], Any], enable_tracking: bool = True, track_closure_variables: bool = True, track_on: object | None = None, global_track_bound_values: bool = True, track_bound_values: bool = True, lambda_cache: MutableMapping[Tuple[Any, ...], NonAnalyzedFunction | AnalyzedFunction] | None = None) \u2192 StatementLambdaElement\n```", "```py\nfrom sqlalchemy import lambda_stmt\n\nstmt = lambda_stmt(lambda: table.select())\nstmt += lambda s: s.where(table.c.id == 5)\n\nresult = connection.execute(stmt)\n```", "```py\nfunction sqlalchemy.sql.expression.literal(value: Any, type_: _TypeEngineArgument[Any] | None = None, literal_execute: bool = False) \u2192 BindParameter[Any]\n```", "```py\nfunction sqlalchemy.sql.expression.literal_column(text: str, type_: _TypeEngineArgument[_T] | None = None) \u2192 ColumnClause[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.not_(clause: _ColumnExpressionArgument[_T]) \u2192 ColumnElement[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.null() \u2192 Null\n```", "```py\nfunction sqlalchemy.sql.expression.or_(*clauses)\n```", "```py\nfrom sqlalchemy import or_\n\nstmt = select(users_table).where(\n                or_(\n                    users_table.c.name == 'wendy',\n                    users_table.c.name == 'jack'\n                )\n            )\n```", "```py\nstmt = select(users_table).where(\n                (users_table.c.name == 'wendy') |\n                (users_table.c.name == 'jack')\n            )\n```", "```py\nfrom sqlalchemy import false\nor_criteria = or_(false(), *expressions)\n```", "```py\nfunction sqlalchemy.sql.expression.outparam(key: str, type_: TypeEngine[_T] | None = None) \u2192 BindParameter[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.text(text: str) \u2192 TextClause\n```", "```py\nfrom sqlalchemy import text\n\nt = text(\"SELECT * FROM users\")\nresult = connection.execute(t)\n```", "```py\nt = text(\"SELECT * FROM users WHERE id=:user_id\")\nresult = connection.execute(t, {\"user_id\": 12})\n```", "```py\nt = text(r\"SELECT * FROM users WHERE name='\\:username'\")\n```", "```py\nt = text(\"SELECT * FROM users WHERE id=:user_id\").\\\n        bindparams(user_id=7).\\\n        columns(id=Integer, name=String)\n\nfor id, name in connection.execute(t):\n    print(id, name)\n```", "```py\ns = select(users.c.id, users.c.name).where(text(\"id=:user_id\"))\nresult = connection.execute(s, {\"user_id\": 12})\n```", "```py\nfunction sqlalchemy.sql.expression.true() \u2192 True_\n```", "```py\n>>> from sqlalchemy import true\n>>> print(select(t.c.x).where(true()))\nSELECT  x  FROM  t  WHERE  true \n```", "```py\n>>> print(select(t.c.x).where(true()))\nSELECT  x  FROM  t  WHERE  1  =  1 \n```", "```py\n>>> print(select(t.c.x).where(or_(t.c.x > 5, true())))\nSELECT  x  FROM  t  WHERE  true\n>>> print(select(t.c.x).where(and_(t.c.x > 5, false())))\nSELECT  x  FROM  t  WHERE  false \n```", "```py\nfunction sqlalchemy.sql.expression.try_cast(expression: _ColumnExpressionOrLiteralArgument[Any], type_: _TypeEngineArgument[_T]) \u2192 TryCast[_T]\n```", "```py\nfrom sqlalchemy import select, try_cast, Numeric\n\nstmt = select(\n    try_cast(product_table.c.unit_price, Numeric(10, 4))\n)\n```", "```py\nSELECT TRY_CAST (product_table.unit_price AS NUMERIC(10, 4))\nFROM product_table\n```", "```py\nfunction sqlalchemy.sql.expression.tuple_(*clauses: _ColumnExpressionArgument[Any], types: Sequence[_TypeEngineArgument[Any]] | None = None) \u2192 Tuple\n```", "```py\nfrom sqlalchemy import tuple_\n\ntuple_(table.c.col1, table.c.col2).in_(\n    [(1, 2), (5, 12), (10, 19)]\n)\n```", "```py\nfunction sqlalchemy.sql.expression.type_coerce(expression: _ColumnExpressionOrLiteralArgument[Any], type_: _TypeEngineArgument[_T]) \u2192 TypeCoerce[_T]\n```", "```py\nfrom sqlalchemy import type_coerce\n\nstmt = select(type_coerce(log_table.date_string, StringDateTime()))\n```", "```py\nSELECT  date_string  AS  date_string  FROM  log\n```", "```py\nstmt = select(\n    type_coerce(log_table.date_string, StringDateTime()).label('date')\n)\n```", "```py\n# bound-value handling of MyStringType will be applied to the\n# literal value \"some string\"\nstmt = select(type_coerce(\"some string\", MyStringType))\n```", "```py\n>>> some_integer = column(\"someint\", Integer)\n>>> some_string = column(\"somestr\", String)\n>>> expr = type_coerce(some_integer + 5, String) + some_string\n>>> print(expr)\nsomeint  +  :someint_1  ||  somestr\n>>> expr = type_coerce(some_integer + 5, String).self_group() + some_string\n>>> print(expr)\n(someint  +  :someint_1)  ||  somestr \n```", "```py\nclass sqlalchemy.sql.expression.quoted_name\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import inspect\nfrom sqlalchemy.sql import quoted_name\n\nengine = create_engine(\"oracle+cx_oracle://some_dsn\")\nprint(inspect(engine).has_table(quoted_name(\"some_table\", True)))\n```", "```py\nattribute quote\n```", "```py\nfunction sqlalchemy.sql.expression.all_(expr: _ColumnExpressionArgument[_T]) \u2192 CollectionAggregate[bool]\n```", "```py\n# renders on PostgreSQL:\n# '5 = ALL (somearray)'\nexpr = 5 == all_(mytable.c.somearray)\n\n# renders on MySQL:\n# '5 = ALL (SELECT value FROM table)'\nexpr = 5 == all_(select(table.c.value))\n```", "```py\nNone == all_(mytable.c.somearray)\n```", "```py\n# would render '5 = ALL (column)`\nall_(mytable.c.column) == 5\n```", "```py\n# would render 'NULL = ALL(somearray)'\nall_(mytable.c.somearray) == None\n```", "```py\n5 == mytable.c.somearray.all_()\n```", "```py\nfunction sqlalchemy.sql.expression.any_(expr: _ColumnExpressionArgument[_T]) \u2192 CollectionAggregate[bool]\n```", "```py\n# renders on PostgreSQL:\n# '5 = ANY (somearray)'\nexpr = 5 == any_(mytable.c.somearray)\n\n# renders on MySQL:\n# '5 = ANY (SELECT value FROM table)'\nexpr = 5 == any_(select(table.c.value))\n```", "```py\nNone == any_(mytable.c.somearray)\n```", "```py\n# would render '5 = ANY (column)`\nany_(mytable.c.column) == 5\n```", "```py\n# would render 'NULL = ANY(somearray)'\nany_(mytable.c.somearray) == None\n```", "```py\n5 = mytable.c.somearray.any_()\n```", "```py\nfunction sqlalchemy.sql.expression.asc(column: _ColumnExpressionOrStrLabelArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import asc\nstmt = select(users_table).order_by(asc(users_table.c.name))\n```", "```py\nSELECT id, name FROM user ORDER BY name ASC\n```", "```py\nstmt = select(users_table).order_by(users_table.c.name.asc())\n```", "```py\nfunction sqlalchemy.sql.expression.between(expr: _ColumnExpressionOrLiteralArgument[_T], lower_bound: Any, upper_bound: Any, symmetric: bool = False) \u2192 BinaryExpression[bool]\n```", "```py\nfrom sqlalchemy import between\nstmt = select(users_table).where(between(users_table.c.id, 5, 7))\n```", "```py\nSELECT id, name FROM user WHERE id BETWEEN :id_1 AND :id_2\n```", "```py\nstmt = select(users_table).where(users_table.c.id.between(5, 7))\n```", "```py\nprint(between(5, 3, 7))\n```", "```py\n:param_1 BETWEEN :param_2 AND :param_3\n```", "```py\nfunction sqlalchemy.sql.expression.collate(expression: _ColumnExpressionArgument[str], collation: str) \u2192 BinaryExpression[str]\n```", "```py\ncollate(mycolumn, 'utf8_bin')\n```", "```py\nmycolumn COLLATE utf8_bin\n```", "```py\nfunction sqlalchemy.sql.expression.desc(column: _ColumnExpressionOrStrLabelArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import desc\n\nstmt = select(users_table).order_by(desc(users_table.c.name))\n```", "```py\nSELECT id, name FROM user ORDER BY name DESC\n```", "```py\nstmt = select(users_table).order_by(users_table.c.name.desc())\n```", "```py\nfunction sqlalchemy.sql.expression.funcfilter(func: FunctionElement[_T], *criterion: _ColumnExpressionArgument[bool]) \u2192 FunctionFilter[_T]\n```", "```py\nfrom sqlalchemy import funcfilter\nfuncfilter(func.count(1), MyClass.name == 'some name')\n```", "```py\nfunction sqlalchemy.sql.expression.label(name: str, element: _ColumnExpressionArgument[_T], type_: _TypeEngineArgument[_T] | None = None) \u2192 Label[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.nulls_first(column: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import desc, nulls_first\n\nstmt = select(users_table).order_by(\n    nulls_first(desc(users_table.c.name)))\n```", "```py\nSELECT id, name FROM user ORDER BY name DESC NULLS FIRST\n```", "```py\nstmt = select(users_table).order_by(\n    users_table.c.name.desc().nulls_first())\n```", "```py\nfunction sqlalchemy.sql.expression.nullsfirst()\n```", "```py\nfunction sqlalchemy.sql.expression.nulls_last(column: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import desc, nulls_last\n\nstmt = select(users_table).order_by(\n    nulls_last(desc(users_table.c.name)))\n```", "```py\nSELECT id, name FROM user ORDER BY name DESC NULLS LAST\n```", "```py\nstmt = select(users_table).order_by(\n    users_table.c.name.desc().nulls_last())\n```", "```py\nfunction sqlalchemy.sql.expression.nullslast()\n```", "```py\nfunction sqlalchemy.sql.expression.over(element: FunctionElement[_T], partition_by: _ByArgument | None = None, order_by: _ByArgument | None = None, range_: typing_Tuple[int | None, int | None] | None = None, rows: typing_Tuple[int | None, int | None] | None = None) \u2192 Over[_T]\n```", "```py\nfunc.row_number().over(order_by=mytable.c.some_column)\n```", "```py\nROW_NUMBER() OVER(ORDER BY some_column)\n```", "```py\nfunc.row_number().over(\n    order_by=my_table.c.some_column, range_=(None, 0))\n```", "```py\nROW_NUMBER() OVER(ORDER BY some_column\nRANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n```", "```py\n    func.row_number().over(order_by='x', range_=(-5, 10))\n    ```", "```py\n    func.row_number().over(order_by='x', rows=(None, 0))\n    ```", "```py\n    func.row_number().over(order_by='x', range_=(-2, None))\n    ```", "```py\n    func.row_number().over(order_by='x', range_=(1, 3))\n    ```", "```py\nfunction sqlalchemy.sql.expression.within_group(element: FunctionElement[_T], *order_by: _ColumnExpressionArgument[Any]) \u2192 WithinGroup[_T]\n```", "```py\nfrom sqlalchemy import within_group\nstmt = select(\n    department.c.id,\n    func.percentile_cont(0.5).within_group(\n        department.c.salary.desc()\n    )\n)\n```", "```py\nclass sqlalchemy.sql.expression.BinaryExpression\n```", "```py\n>>> from sqlalchemy.sql import column\n>>> column('a') + column('b')\n<sqlalchemy.sql.expression.BinaryExpression object at 0x101029dd0>\n>>> print(column('a') + column('b'))\na  +  b \n```", "```py\nclass sqlalchemy.sql.expression.BindParameter\n```", "```py\nfrom sqlalchemy import bindparam\n\nstmt = select(users_table).where(\n    users_table.c.name == bindparam(\"username\")\n)\n```", "```py\nattribute effective_value\n```", "```py\nattribute inherit_cache: bool | None = True\n```", "```py\nmethod render_literal_execute() \u2192 BindParameter[_T]\n```", "```py\nclass sqlalchemy.sql.expression.Case\n```", "```py\nfrom sqlalchemy import case\n\nstmt = select(users_table).                    where(\n                case(\n                    (users_table.c.name == 'wendy', 'W'),\n                    (users_table.c.name == 'jack', 'J'),\n                    else_='E'\n                )\n            )\n```", "```py\nclass sqlalchemy.sql.expression.Cast\n```", "```py\nfrom sqlalchemy import cast, Numeric\n\nstmt = select(cast(product_table.c.unit_price, Numeric(10, 4)))\n```", "```py\nclass sqlalchemy.sql.expression.ClauseList\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.ColumnClause\n```", "```py\nfrom sqlalchemy import column\n\nid, name = column(\"id\"), column(\"name\")\nstmt = select(id, name).select_from(\"user\")\n```", "```py\nSELECT id, name FROM user\n```", "```py\nmethod get_children(*, column_tables=False, **kw)\n```", "```py\nclass sqlalchemy.sql.expression.ColumnCollection\n```", "```py\n>>> employee_table.c.employee_name\n```", "```py\n>>> employee_table.c[\"employee ' payment\"]\n```", "```py\n>>> employee_table.c[\"values\"]\n```", "```py\n>>> from sqlalchemy import select, column, table\n>>> from sqlalchemy import LABEL_STYLE_TABLENAME_PLUS_COL\n>>> t = table(\"t\", column(\"c\"))\n>>> stmt = select(t).set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)\n>>> subq = stmt.subquery()\n>>> subq.c.t_c\n<sqlalchemy.sql.elements.ColumnClause at 0x7f59dcf04fa0; t_c>\n```", "```py\n>>> cc[0]\nColumn('x', Integer(), table=None)\n>>> cc[1]\nColumn('y', Integer(), table=None)\n```", "```py\n>>> list(cc)\n[Column('x', Integer(), table=None),\n Column('y', Integer(), table=None)]\n```", "```py\n>>> x1, x2 = Column('x', Integer), Column('x', Integer)\n>>> cc = ColumnCollection(columns=[(x1.name, x1), (x2.name, x2)])\n>>> list(cc)\n[Column('x', Integer(), table=None),\n Column('x', Integer(), table=None)]\n>>> cc['x'] is x1\nFalse\n>>> cc['x'] is x2\nTrue\n```", "```py\nmethod add(column: ColumnElement[Any], key: _COLKEY | None = None) \u2192 None\n```", "```py\nmethod as_readonly() \u2192 ReadOnlyColumnCollection[_COLKEY, _COL_co]\n```", "```py\nmethod clear() \u2192 NoReturn\n```", "```py\nmethod compare(other: ColumnCollection[Any, Any]) \u2192 bool\n```", "```py\nmethod contains_column(col: ColumnElement[Any]) \u2192 bool\n```", "```py\nmethod corresponding_column(column: _COL, require_embedded: bool = False) \u2192 _COL | _COL_co | None\n```", "```py\nmethod get(key: str, default: _COL_co | None = None) \u2192 _COL_co | None\n```", "```py\nmethod items() \u2192 List[Tuple[_COLKEY, _COL_co]]\n```", "```py\nmethod keys() \u2192 List[_COLKEY]\n```", "```py\nmethod update(iter_: Any) \u2192 NoReturn\n```", "```py\nmethod values() \u2192 List[_COL_co]\n```", "```py\nclass sqlalchemy.sql.expression.ColumnElement\n```", "```py\n>>> from sqlalchemy.sql import column\n>>> column('a') + column('b')\n<sqlalchemy.sql.expression.BinaryExpression object at 0x101029dd0>\n>>> print(column('a') + column('b'))\na  +  b \n```", "```py\nmethod __eq__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nattribute allows_lambda = True\n```", "```py\nattribute anon_key_label\n```", "```py\nattribute anon_label\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute base_columns\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod cast(type_: _TypeEngineArgument[_OPT]) \u2192 Cast[_OPT]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nattribute comparator\n```", "```py\nmethod compare(other: ClauseElement, **kw: Any) \u2192 bool\n```", "```py\nmethod compile(bind: _HasDialect | None = None, dialect: Dialect | None = None, **kw: Any) \u2192 Compiled\n```", "```py\n    from sqlalchemy.sql import table, column, select\n\n    t = table('t', column('x'))\n\n    s = select(t).where(t.c.x == 5)\n\n    print(s.compile(compile_kwargs={\"literal_binds\": True}))\n    ```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nattribute description\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute entity_namespace\n```", "```py\nattribute expression\n```", "```py\nattribute foreign_keys: AbstractSet[ForeignKey] = frozenset({})\n```", "```py\nmethod get_children(*, omit_attrs: Tuple[str, ...] = (), **kw: Any) \u2192 Iterable[HasTraverseInternals]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nattribute inherit_cache: bool | None = None\n```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nattribute is_clause_element = True\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nattribute is_dml = False\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nattribute is_selectable = False\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute key: str | None = None\n```", "```py\nmethod label(name: str | None) \u2192 Label[_T]\n```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nattribute negation_clause: ColumnElement[bool]\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 ColumnElement[Any]\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod params(_ClauseElement__optionaldict: Mapping[str, Any] | None = None, **kwargs: Any) \u2192 Self\n```", "```py\n>>> clause = column('x') + bindparam('foo')\n>>> print(clause.compile().params)\n{'foo':None}\n>>> print(clause.params({'foo':7}).compile().params)\n{'foo':7}\n```", "```py\nattribute primary_key: bool = False\n```", "```py\nattribute proxy_set: util.generic_fn_descriptor[FrozenSet[Any]]\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 ColumnElement[Any]\n```", "```py\nmethod self_group(against: OperatorType | None = None) \u2192 ColumnElement[Any]\n```", "```py\nmethod shares_lineage(othercolumn: ColumnElement[Any]) \u2192 bool\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute stringify_dialect = 'default'\n```", "```py\nattribute supports_execution = False\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nattribute type: TypeEngine[_T]\n```", "```py\nmethod unique_params(_ClauseElement__optionaldict: Dict[str, Any] | None = None, **kwargs: Any) \u2192 Self\n```", "```py\nattribute uses_inspection = True\n```", "```py\nsqlalchemy.sql.expression.ColumnExpressionArgument\n```", "```py\nclass sqlalchemy.sql.expression.ColumnOperators\n```", "```py\ndef __eq__(self, other):\n    return self.operate(operators.eq, other)\n```", "```py\ndef eq(a, b):\n    return a == b\n```", "```py\nmethod __add__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __and__(other: Any) \u2192 Operators\n```", "```py\na & b\n```", "```py\nfrom sqlalchemy import and_\nand_(a, b)\n```", "```py\n(a == 2) & (b == 4)\n```", "```py\nmethod __eq__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __floordiv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ge__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __getitem__(index: Any) \u2192 ColumnOperators\n```", "```py\nmethod __gt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __hash__()\n```", "```py\nmethod __invert__() \u2192 Operators\n```", "```py\n~a\n```", "```py\nfrom sqlalchemy import not_\nnot_(a)\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lshift__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __mod__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __mul__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __neg__() \u2192 ColumnOperators\n```", "```py\nmethod __or__(other: Any) \u2192 Operators\n```", "```py\na | b\n```", "```py\nfrom sqlalchemy import or_\nor_(a, b)\n```", "```py\n(a == 2) | (b == 4)\n```", "```py\nmethod __radd__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rfloordiv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rmod__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rmul__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rshift__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rsub__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rtruediv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __sa_operate__(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod __sub__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __truediv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.sql.expression.Extract\n```", "```py\nclass sqlalchemy.sql.expression.False_\n```", "```py\nclass sqlalchemy.sql.expression.FunctionFilter\n```", "```py\nfunc.count(1).filter(True)\n```", "```py\nmethod filter(*criterion: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nmethod over(partition_by: Iterable[_ColumnExpressionArgument[Any]] | _ColumnExpressionArgument[Any] | None = None, order_by: Iterable[_ColumnExpressionArgument[Any]] | _ColumnExpressionArgument[Any] | None = None, range_: typing_Tuple[int | None, int | None] | None = None, rows: typing_Tuple[int | None, int | None] | None = None) \u2192 Over[_T]\n```", "```py\nfunc.rank().filter(MyClass.y > 5).over(order_by='x')\n```", "```py\nfrom sqlalchemy import over, funcfilter\nover(funcfilter(func.rank(), MyClass.y > 5), order_by='x')\n```", "```py\nmethod self_group(against: OperatorType | None = None) \u2192 Self | Grouping[_T]\n```", "```py\nclass sqlalchemy.sql.expression.Label\n```", "```py\nattribute foreign_keys: AbstractSet[ForeignKey]\n```", "```py\nattribute primary_key: bool\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.Null\n```", "```py\nclass sqlalchemy.sql.expression.Operators\n```", "```py\nmethod __and__(other: Any) \u2192 Operators\n```", "```py\na & b\n```", "```py\nfrom sqlalchemy import and_\nand_(a, b)\n```", "```py\n(a == 2) & (b == 4)\n```", "```py\nmethod __invert__() \u2192 Operators\n```", "```py\n~a\n```", "```py\nfrom sqlalchemy import not_\nnot_(a)\n```", "```py\nmethod __or__(other: Any) \u2192 Operators\n```", "```py\na | b\n```", "```py\nfrom sqlalchemy import or_\nor_(a, b)\n```", "```py\n(a == 2) | (b == 4)\n```", "```py\nmethod __sa_operate__(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass sqlalchemy.sql.expression.Over\n```", "```py\nattribute element: ColumnElement[_T]\n```", "```py\nclass sqlalchemy.sql.expression.SQLColumnExpression\n```", "```py\nclass sqlalchemy.sql.expression.TextClause\n```", "```py\nfrom sqlalchemy import text\n\nt = text(\"SELECT * FROM users\")\nresult = connection.execute(t)\n```", "```py\nmethod bindparams(*binds: BindParameter[Any], **names_to_values: Any) \u2192 Self\n```", "```py\nfrom sqlalchemy import text\nstmt = text(\"SELECT id, name FROM user WHERE name=:name \"\n            \"AND timestamp=:timestamp\")\n```", "```py\nstmt = stmt.bindparams(name='jack',\n            timestamp=datetime.datetime(2012, 10, 8, 15, 12, 5))\n```", "```py\nfrom sqlalchemy import bindparam\nstmt = stmt.bindparams(\n                bindparam('name', value='jack', type_=String),\n                bindparam('timestamp', type_=DateTime)\n            )\n```", "```py\nresult = connection.execute(stmt,\n            timestamp=datetime.datetime(2012, 10, 8, 15, 12, 5))\n```", "```py\nstmt = text(\"SELECT id, name FROM user WHERE name=:name \"\n            \"AND timestamp=:timestamp\")\nstmt = stmt.bindparams(\n    bindparam('name', type_=String),\n    bindparam('timestamp', type_=DateTime)\n)\nstmt = stmt.bindparams(\n    name='jack',\n    timestamp=datetime.datetime(2012, 10, 8, 15, 12, 5)\n)\n```", "```py\nstmt1 = text(\"select id from table where name=:name\").bindparams(\n    bindparam(\"name\", value='name1', unique=True)\n)\nstmt2 = text(\"select id from table where name=:name\").bindparams(\n    bindparam(\"name\", value='name2', unique=True)\n)\n\nunion = union_all(\n    stmt1.columns(column(\"id\")),\n    stmt2.columns(column(\"id\"))\n)\n```", "```py\nselect id from table where name=:name_1\nUNION ALL select id from table where name=:name_2\n```", "```py\nmethod columns(*cols: _ColumnExpressionArgument[Any], **types: TypeEngine[Any]) \u2192 TextualSelect\n```", "```py\nfrom sqlalchemy.sql import column, text\n\nstmt = text(\"SELECT id, name FROM some_table\")\nstmt = stmt.columns(column('id'), column('name')).subquery('st')\n\nstmt = select(mytable).\\\n        select_from(\n            mytable.join(stmt, mytable.c.name == stmt.c.name)\n        ).where(stmt.c.id > 5)\n```", "```py\nstmt = text(\"SELECT id, name, timestamp FROM some_table\")\nstmt = stmt.columns(\n            column('id', Integer),\n            column('name', Unicode),\n            column('timestamp', DateTime)\n        )\n\nfor id, name, timestamp in connection.execute(stmt):\n    print(id, name, timestamp)\n```", "```py\nstmt = text(\"SELECT id, name, timestamp FROM some_table\")\nstmt = stmt.columns(\n            id=Integer,\n            name=Unicode,\n            timestamp=DateTime\n        )\n\nfor id, name, timestamp in connection.execute(stmt):\n    print(id, name, timestamp)\n```", "```py\nstmt = text(\"SELECT users.id, addresses.id, users.id, \"\n     \"users.name, addresses.email_address AS email \"\n     \"FROM users JOIN addresses ON users.id=addresses.user_id \"\n     \"WHERE users.id = 1\").columns(\n        User.id,\n        Address.id,\n        Address.user_id,\n        User.name,\n        Address.email_address\n     )\n\nquery = session.query(User).from_statement(stmt).options(\n    contains_eager(User.addresses))\n```", "```py\nstmt = stmt.columns(id=Integer, name=String).cte('st')\n\nstmt = select(sometable).where(sometable.c.id == stmt.c.id)\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.TryCast\n```", "```py\nattribute inherit_cache: bool | None = True\n```", "```py\nclass sqlalchemy.sql.expression.Tuple\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.WithinGroup\n```", "```py\nmethod over(partition_by=None, order_by=None, range_=None, rows=None)\n```", "```py\nclass sqlalchemy.sql.elements.WrapsColumnExpression\n```", "```py\nclass sqlalchemy.sql.expression.True_\n```", "```py\nclass sqlalchemy.sql.expression.TypeCoerce\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.UnaryExpression\n```", "```py\nmethod self_group(against=None)\n```", "```py\nfunction sqlalchemy.NotNullable(val: _TypedColumnClauseArgument[_T | None] | Type[_T] | None) \u2192 _TypedColumnClauseArgument[_T]\n```", "```py\nstmt = select(NotNullable(A.value)).where(A.value.is_not(None))\n```", "```py\nfunction sqlalchemy.Nullable(val: _TypedColumnClauseArgument[_T]) \u2192 _TypedColumnClauseArgument[_T | None]\n```", "```py\nstmt1 = select(A, Nullable(B)).outerjoin(A.bs)\nstmt2 = select(A.data, Nullable(B.data)).outerjoin(A.bs)\n```", "```py\nfunction sqlalchemy.sql.expression.and_(*clauses)\n```", "```py\nfrom sqlalchemy import and_\n\nstmt = select(users_table).where(\n                and_(\n                    users_table.c.name == 'wendy',\n                    users_table.c.enrolled == True\n                )\n            )\n```", "```py\nstmt = select(users_table).where(\n                (users_table.c.name == 'wendy') &\n                (users_table.c.enrolled == True)\n            )\n```", "```py\nstmt = select(users_table).\\\n        where(users_table.c.name == 'wendy').\\\n        where(users_table.c.enrolled == True)\n```", "```py\nfrom sqlalchemy import true\ncriteria = and_(true(), *expressions)\n```", "```py\nfunction sqlalchemy.sql.expression.bindparam(key: str | None, value: Any = _NoArg.NO_ARG, type_: _TypeEngineArgument[_T] | None = None, unique: bool = False, required: bool | Literal[_NoArg.NO_ARG] = _NoArg.NO_ARG, quote: bool | None = None, callable_: Callable[[], Any] | None = None, expanding: bool = False, isoutparam: bool = False, literal_execute: bool = False) \u2192 BindParameter[_T]\n```", "```py\nfrom sqlalchemy import bindparam\n\nstmt = select(users_table).where(\n    users_table.c.name == bindparam(\"username\")\n)\n```", "```py\nSELECT id, name FROM user WHERE name = :username\n```", "```py\nresult = connection.execute(stmt, {\"username\": \"wendy\"})\n```", "```py\nstmt = (\n    users_table.update()\n    .where(user_table.c.name == bindparam(\"username\"))\n    .values(fullname=bindparam(\"fullname\"))\n)\n\nconnection.execute(\n    stmt,\n    [\n        {\"username\": \"wendy\", \"fullname\": \"Wendy Smith\"},\n        {\"username\": \"jack\", \"fullname\": \"Jack Jones\"},\n    ],\n)\n```", "```py\nexpr = users_table.c.name == 'Wendy'\n```", "```py\nprint(repr(expr.right))\nBindParameter('%(4327771088 name)s', 'Wendy', type_=String())\n```", "```py\nuser.name = :name_1\n```", "```py\nstmt = select(users_table).where(users_table.c.name == 'Wendy')\nresult = connection.execute(stmt)\n```", "```py\nSELECT \"user\".id, \"user\".name\nFROM \"user\"\nWHERE \"user\".name = %(name_1)s\n{'name_1': 'Wendy'}\n```", "```py\nstmt = users_table.insert()\nresult = connection.execute(stmt, {\"name\": \"Wendy\"})\n```", "```py\nINSERT INTO \"user\" (name) VALUES (%(name)s)\n{'name': 'Wendy'}\n```", "```py\nfunction sqlalchemy.sql.expression.bitwise_not(expr: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.case(*whens: typing_Tuple[_ColumnExpressionArgument[bool], Any] | Mapping[Any, Any], value: Any | None = None, else_: Any | None = None) \u2192 Case[Any]\n```", "```py\nfrom sqlalchemy import case\n\nstmt = select(users_table).\\\n            where(\n                case(\n                    (users_table.c.name == 'wendy', 'W'),\n                    (users_table.c.name == 'jack', 'J'),\n                    else_='E'\n                )\n            )\n```", "```py\nSELECT id, name FROM user\nWHERE CASE\n    WHEN (name = :name_1) THEN :param_1\n    WHEN (name = :name_2) THEN :param_2\n    ELSE :param_3\nEND\n```", "```py\nstmt = select(users_table).\\\n            where(\n                case(\n                    {\"wendy\": \"W\", \"jack\": \"J\"},\n                    value=users_table.c.name,\n                    else_='E'\n                )\n            )\n```", "```py\nfrom sqlalchemy import case, literal_column\n\ncase(\n    (\n        orderline.c.qty > 100,\n        literal_column(\"'greaterthan100'\")\n    ),\n    (\n        orderline.c.qty > 10,\n        literal_column(\"'greaterthan10'\")\n    ),\n    else_=literal_column(\"'lessthan10'\")\n)\n```", "```py\nCASE\n    WHEN (orderline.qty > :qty_1) THEN 'greaterthan100'\n    WHEN (orderline.qty > :qty_2) THEN 'greaterthan10'\n    ELSE 'lessthan10'\nEND\n```", "```py\n    case(\n        (users_table.c.name == 'wendy', 'W'),\n        (users_table.c.name == 'jack', 'J')\n    )\n    ```", "```py\n    case(\n        {\"wendy\": \"W\", \"jack\": \"J\"},\n        value=users_table.c.name\n    )\n    ```", "```py\nfunction sqlalchemy.sql.expression.cast(expression: _ColumnExpressionOrLiteralArgument[Any], type_: _TypeEngineArgument[_T]) \u2192 Cast[_T]\n```", "```py\nfrom sqlalchemy import cast, Numeric\n\nstmt = select(cast(product_table.c.unit_price, Numeric(10, 4)))\n```", "```py\nSELECT CAST(unit_price AS NUMERIC(10, 4)) FROM product\n```", "```py\nfunction sqlalchemy.sql.expression.column(text: str, type_: _TypeEngineArgument[_T] | None = None, is_literal: bool = False, _selectable: FromClause | None = None) \u2192 ColumnClause[_T]\n```", "```py\nfrom sqlalchemy import column\n\nid, name = column(\"id\"), column(\"name\")\nstmt = select(id, name).select_from(\"user\")\n```", "```py\nSELECT id, name FROM user\n```", "```py\nfrom sqlalchemy.sql import column\n\nid, name = column(\"id\"), column(\"name\")\nstmt = select(id, name).select_from(\"user\")\n```", "```py\nfrom sqlalchemy import table, column, select\n\nuser = table(\"user\",\n        column(\"id\"),\n        column(\"name\"),\n        column(\"description\"),\n)\n\nstmt = select(user.c.description).where(user.c.name == 'wendy')\n```", "```py\nclass sqlalchemy.sql.expression.custom_op\n```", "```py\nfrom sqlalchemy.sql import UnaryExpression\nfrom sqlalchemy.sql import operators\nfrom sqlalchemy import Numeric\n\nunary = UnaryExpression(table.c.somecolumn,\n        modifier=operators.custom_op(\"!\"),\n        type_=Numeric)\n```", "```py\nfunction sqlalchemy.sql.expression.distinct(expr: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import distinct, func\nstmt = select(users_table.c.id, func.count(distinct(users_table.c.name)))\n```", "```py\nSELECT user.id, count(DISTINCT user.name) FROM user\n```", "```py\nstmt = select(func.count(users_table.c.name.distinct()))\n```", "```py\nfunction sqlalchemy.sql.expression.extract(field: str, expr: _ColumnExpressionArgument[Any]) \u2192 Extract\n```", "```py\nfrom sqlalchemy import extract\nfrom sqlalchemy import table, column\n\nlogged_table = table(\"user\",\n        column(\"id\"),\n        column(\"date_created\"),\n)\n\nstmt = select(logged_table.c.id).where(\n    extract(\"YEAR\", logged_table.c.date_created) == 2021\n)\n```", "```py\nstmt = select(\n    extract(\"YEAR\", logged_table.c.date_created)\n).where(logged_table.c.id == 1)\n```", "```py\nfunction sqlalchemy.sql.expression.false() \u2192 False_\n```", "```py\n>>> from sqlalchemy import false\n>>> print(select(t.c.x).where(false()))\nSELECT  x  FROM  t  WHERE  false \n```", "```py\n>>> print(select(t.c.x).where(false()))\nSELECT  x  FROM  t  WHERE  0  =  1 \n```", "```py\n>>> print(select(t.c.x).where(or_(t.c.x > 5, true())))\nSELECT  x  FROM  t  WHERE  true\n>>> print(select(t.c.x).where(and_(t.c.x > 5, false())))\nSELECT  x  FROM  t  WHERE  false \n```", "```py\nsqlalchemy.sql.expression.func = <sqlalchemy.sql.functions._FunctionGenerator object>\n```", "```py\n>>> print(func.count(1))\ncount(:param_1) \n```", "```py\n>>> print(select(func.count(table.c.id)))\nSELECT  count(sometable.id)  FROM  sometable \n```", "```py\n>>> print(func.current_timestamp())\nCURRENT_TIMESTAMP \n```", "```py\n>>> print(func.stats.yield_curve(5, 10))\nstats.yield_curve(:yield_curve_1,  :yield_curve_2) \n```", "```py\n>>> print(func.my_string(u'hi', type_=Unicode) + ' ' +\n...       func.my_string(u'there', type_=Unicode))\nmy_string(:my_string_1)  ||  :my_string_2  ||  my_string(:my_string_3) \n```", "```py\nprint(connection.execute(func.current_timestamp()).scalar())\n```", "```py\nfunction sqlalchemy.sql.expression.lambda_stmt(lmb: Callable[[], Any], enable_tracking: bool = True, track_closure_variables: bool = True, track_on: object | None = None, global_track_bound_values: bool = True, track_bound_values: bool = True, lambda_cache: MutableMapping[Tuple[Any, ...], NonAnalyzedFunction | AnalyzedFunction] | None = None) \u2192 StatementLambdaElement\n```", "```py\nfrom sqlalchemy import lambda_stmt\n\nstmt = lambda_stmt(lambda: table.select())\nstmt += lambda s: s.where(table.c.id == 5)\n\nresult = connection.execute(stmt)\n```", "```py\nfunction sqlalchemy.sql.expression.literal(value: Any, type_: _TypeEngineArgument[Any] | None = None, literal_execute: bool = False) \u2192 BindParameter[Any]\n```", "```py\nfunction sqlalchemy.sql.expression.literal_column(text: str, type_: _TypeEngineArgument[_T] | None = None) \u2192 ColumnClause[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.not_(clause: _ColumnExpressionArgument[_T]) \u2192 ColumnElement[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.null() \u2192 Null\n```", "```py\nfunction sqlalchemy.sql.expression.or_(*clauses)\n```", "```py\nfrom sqlalchemy import or_\n\nstmt = select(users_table).where(\n                or_(\n                    users_table.c.name == 'wendy',\n                    users_table.c.name == 'jack'\n                )\n            )\n```", "```py\nstmt = select(users_table).where(\n                (users_table.c.name == 'wendy') |\n                (users_table.c.name == 'jack')\n            )\n```", "```py\nfrom sqlalchemy import false\nor_criteria = or_(false(), *expressions)\n```", "```py\nfunction sqlalchemy.sql.expression.outparam(key: str, type_: TypeEngine[_T] | None = None) \u2192 BindParameter[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.text(text: str) \u2192 TextClause\n```", "```py\nfrom sqlalchemy import text\n\nt = text(\"SELECT * FROM users\")\nresult = connection.execute(t)\n```", "```py\nt = text(\"SELECT * FROM users WHERE id=:user_id\")\nresult = connection.execute(t, {\"user_id\": 12})\n```", "```py\nt = text(r\"SELECT * FROM users WHERE name='\\:username'\")\n```", "```py\nt = text(\"SELECT * FROM users WHERE id=:user_id\").\\\n        bindparams(user_id=7).\\\n        columns(id=Integer, name=String)\n\nfor id, name in connection.execute(t):\n    print(id, name)\n```", "```py\ns = select(users.c.id, users.c.name).where(text(\"id=:user_id\"))\nresult = connection.execute(s, {\"user_id\": 12})\n```", "```py\nfunction sqlalchemy.sql.expression.true() \u2192 True_\n```", "```py\n>>> from sqlalchemy import true\n>>> print(select(t.c.x).where(true()))\nSELECT  x  FROM  t  WHERE  true \n```", "```py\n>>> print(select(t.c.x).where(true()))\nSELECT  x  FROM  t  WHERE  1  =  1 \n```", "```py\n>>> print(select(t.c.x).where(or_(t.c.x > 5, true())))\nSELECT  x  FROM  t  WHERE  true\n>>> print(select(t.c.x).where(and_(t.c.x > 5, false())))\nSELECT  x  FROM  t  WHERE  false \n```", "```py\nfunction sqlalchemy.sql.expression.try_cast(expression: _ColumnExpressionOrLiteralArgument[Any], type_: _TypeEngineArgument[_T]) \u2192 TryCast[_T]\n```", "```py\nfrom sqlalchemy import select, try_cast, Numeric\n\nstmt = select(\n    try_cast(product_table.c.unit_price, Numeric(10, 4))\n)\n```", "```py\nSELECT TRY_CAST (product_table.unit_price AS NUMERIC(10, 4))\nFROM product_table\n```", "```py\nfunction sqlalchemy.sql.expression.tuple_(*clauses: _ColumnExpressionArgument[Any], types: Sequence[_TypeEngineArgument[Any]] | None = None) \u2192 Tuple\n```", "```py\nfrom sqlalchemy import tuple_\n\ntuple_(table.c.col1, table.c.col2).in_(\n    [(1, 2), (5, 12), (10, 19)]\n)\n```", "```py\nfunction sqlalchemy.sql.expression.type_coerce(expression: _ColumnExpressionOrLiteralArgument[Any], type_: _TypeEngineArgument[_T]) \u2192 TypeCoerce[_T]\n```", "```py\nfrom sqlalchemy import type_coerce\n\nstmt = select(type_coerce(log_table.date_string, StringDateTime()))\n```", "```py\nSELECT  date_string  AS  date_string  FROM  log\n```", "```py\nstmt = select(\n    type_coerce(log_table.date_string, StringDateTime()).label('date')\n)\n```", "```py\n# bound-value handling of MyStringType will be applied to the\n# literal value \"some string\"\nstmt = select(type_coerce(\"some string\", MyStringType))\n```", "```py\n>>> some_integer = column(\"someint\", Integer)\n>>> some_string = column(\"somestr\", String)\n>>> expr = type_coerce(some_integer + 5, String) + some_string\n>>> print(expr)\nsomeint  +  :someint_1  ||  somestr\n>>> expr = type_coerce(some_integer + 5, String).self_group() + some_string\n>>> print(expr)\n(someint  +  :someint_1)  ||  somestr \n```", "```py\nclass sqlalchemy.sql.expression.quoted_name\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import inspect\nfrom sqlalchemy.sql import quoted_name\n\nengine = create_engine(\"oracle+cx_oracle://some_dsn\")\nprint(inspect(engine).has_table(quoted_name(\"some_table\", True)))\n```", "```py\nattribute quote\n```", "```py\nfunction sqlalchemy.sql.expression.all_(expr: _ColumnExpressionArgument[_T]) \u2192 CollectionAggregate[bool]\n```", "```py\n# renders on PostgreSQL:\n# '5 = ALL (somearray)'\nexpr = 5 == all_(mytable.c.somearray)\n\n# renders on MySQL:\n# '5 = ALL (SELECT value FROM table)'\nexpr = 5 == all_(select(table.c.value))\n```", "```py\nNone == all_(mytable.c.somearray)\n```", "```py\n# would render '5 = ALL (column)`\nall_(mytable.c.column) == 5\n```", "```py\n# would render 'NULL = ALL(somearray)'\nall_(mytable.c.somearray) == None\n```", "```py\n5 == mytable.c.somearray.all_()\n```", "```py\nfunction sqlalchemy.sql.expression.any_(expr: _ColumnExpressionArgument[_T]) \u2192 CollectionAggregate[bool]\n```", "```py\n# renders on PostgreSQL:\n# '5 = ANY (somearray)'\nexpr = 5 == any_(mytable.c.somearray)\n\n# renders on MySQL:\n# '5 = ANY (SELECT value FROM table)'\nexpr = 5 == any_(select(table.c.value))\n```", "```py\nNone == any_(mytable.c.somearray)\n```", "```py\n# would render '5 = ANY (column)`\nany_(mytable.c.column) == 5\n```", "```py\n# would render 'NULL = ANY(somearray)'\nany_(mytable.c.somearray) == None\n```", "```py\n5 = mytable.c.somearray.any_()\n```", "```py\nfunction sqlalchemy.sql.expression.asc(column: _ColumnExpressionOrStrLabelArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import asc\nstmt = select(users_table).order_by(asc(users_table.c.name))\n```", "```py\nSELECT id, name FROM user ORDER BY name ASC\n```", "```py\nstmt = select(users_table).order_by(users_table.c.name.asc())\n```", "```py\nfunction sqlalchemy.sql.expression.between(expr: _ColumnExpressionOrLiteralArgument[_T], lower_bound: Any, upper_bound: Any, symmetric: bool = False) \u2192 BinaryExpression[bool]\n```", "```py\nfrom sqlalchemy import between\nstmt = select(users_table).where(between(users_table.c.id, 5, 7))\n```", "```py\nSELECT id, name FROM user WHERE id BETWEEN :id_1 AND :id_2\n```", "```py\nstmt = select(users_table).where(users_table.c.id.between(5, 7))\n```", "```py\nprint(between(5, 3, 7))\n```", "```py\n:param_1 BETWEEN :param_2 AND :param_3\n```", "```py\nfunction sqlalchemy.sql.expression.collate(expression: _ColumnExpressionArgument[str], collation: str) \u2192 BinaryExpression[str]\n```", "```py\ncollate(mycolumn, 'utf8_bin')\n```", "```py\nmycolumn COLLATE utf8_bin\n```", "```py\nfunction sqlalchemy.sql.expression.desc(column: _ColumnExpressionOrStrLabelArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import desc\n\nstmt = select(users_table).order_by(desc(users_table.c.name))\n```", "```py\nSELECT id, name FROM user ORDER BY name DESC\n```", "```py\nstmt = select(users_table).order_by(users_table.c.name.desc())\n```", "```py\nfunction sqlalchemy.sql.expression.funcfilter(func: FunctionElement[_T], *criterion: _ColumnExpressionArgument[bool]) \u2192 FunctionFilter[_T]\n```", "```py\nfrom sqlalchemy import funcfilter\nfuncfilter(func.count(1), MyClass.name == 'some name')\n```", "```py\nfunction sqlalchemy.sql.expression.label(name: str, element: _ColumnExpressionArgument[_T], type_: _TypeEngineArgument[_T] | None = None) \u2192 Label[_T]\n```", "```py\nfunction sqlalchemy.sql.expression.nulls_first(column: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import desc, nulls_first\n\nstmt = select(users_table).order_by(\n    nulls_first(desc(users_table.c.name)))\n```", "```py\nSELECT id, name FROM user ORDER BY name DESC NULLS FIRST\n```", "```py\nstmt = select(users_table).order_by(\n    users_table.c.name.desc().nulls_first())\n```", "```py\nfunction sqlalchemy.sql.expression.nullsfirst()\n```", "```py\nfunction sqlalchemy.sql.expression.nulls_last(column: _ColumnExpressionArgument[_T]) \u2192 UnaryExpression[_T]\n```", "```py\nfrom sqlalchemy import desc, nulls_last\n\nstmt = select(users_table).order_by(\n    nulls_last(desc(users_table.c.name)))\n```", "```py\nSELECT id, name FROM user ORDER BY name DESC NULLS LAST\n```", "```py\nstmt = select(users_table).order_by(\n    users_table.c.name.desc().nulls_last())\n```", "```py\nfunction sqlalchemy.sql.expression.nullslast()\n```", "```py\nfunction sqlalchemy.sql.expression.over(element: FunctionElement[_T], partition_by: _ByArgument | None = None, order_by: _ByArgument | None = None, range_: typing_Tuple[int | None, int | None] | None = None, rows: typing_Tuple[int | None, int | None] | None = None) \u2192 Over[_T]\n```", "```py\nfunc.row_number().over(order_by=mytable.c.some_column)\n```", "```py\nROW_NUMBER() OVER(ORDER BY some_column)\n```", "```py\nfunc.row_number().over(\n    order_by=my_table.c.some_column, range_=(None, 0))\n```", "```py\nROW_NUMBER() OVER(ORDER BY some_column\nRANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n```", "```py\n    func.row_number().over(order_by='x', range_=(-5, 10))\n    ```", "```py\n    func.row_number().over(order_by='x', rows=(None, 0))\n    ```", "```py\n    func.row_number().over(order_by='x', range_=(-2, None))\n    ```", "```py\n    func.row_number().over(order_by='x', range_=(1, 3))\n    ```", "```py\nfunction sqlalchemy.sql.expression.within_group(element: FunctionElement[_T], *order_by: _ColumnExpressionArgument[Any]) \u2192 WithinGroup[_T]\n```", "```py\nfrom sqlalchemy import within_group\nstmt = select(\n    department.c.id,\n    func.percentile_cont(0.5).within_group(\n        department.c.salary.desc()\n    )\n)\n```", "```py\nclass sqlalchemy.sql.expression.BinaryExpression\n```", "```py\n>>> from sqlalchemy.sql import column\n>>> column('a') + column('b')\n<sqlalchemy.sql.expression.BinaryExpression object at 0x101029dd0>\n>>> print(column('a') + column('b'))\na  +  b \n```", "```py\nclass sqlalchemy.sql.expression.BindParameter\n```", "```py\nfrom sqlalchemy import bindparam\n\nstmt = select(users_table).where(\n    users_table.c.name == bindparam(\"username\")\n)\n```", "```py\nattribute effective_value\n```", "```py\nattribute inherit_cache: bool | None = True\n```", "```py\nmethod render_literal_execute() \u2192 BindParameter[_T]\n```", "```py\nclass sqlalchemy.sql.expression.Case\n```", "```py\nfrom sqlalchemy import case\n\nstmt = select(users_table).                    where(\n                case(\n                    (users_table.c.name == 'wendy', 'W'),\n                    (users_table.c.name == 'jack', 'J'),\n                    else_='E'\n                )\n            )\n```", "```py\nclass sqlalchemy.sql.expression.Cast\n```", "```py\nfrom sqlalchemy import cast, Numeric\n\nstmt = select(cast(product_table.c.unit_price, Numeric(10, 4)))\n```", "```py\nclass sqlalchemy.sql.expression.ClauseList\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.ColumnClause\n```", "```py\nfrom sqlalchemy import column\n\nid, name = column(\"id\"), column(\"name\")\nstmt = select(id, name).select_from(\"user\")\n```", "```py\nSELECT id, name FROM user\n```", "```py\nmethod get_children(*, column_tables=False, **kw)\n```", "```py\nclass sqlalchemy.sql.expression.ColumnCollection\n```", "```py\n>>> employee_table.c.employee_name\n```", "```py\n>>> employee_table.c[\"employee ' payment\"]\n```", "```py\n>>> employee_table.c[\"values\"]\n```", "```py\n>>> from sqlalchemy import select, column, table\n>>> from sqlalchemy import LABEL_STYLE_TABLENAME_PLUS_COL\n>>> t = table(\"t\", column(\"c\"))\n>>> stmt = select(t).set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)\n>>> subq = stmt.subquery()\n>>> subq.c.t_c\n<sqlalchemy.sql.elements.ColumnClause at 0x7f59dcf04fa0; t_c>\n```", "```py\n>>> cc[0]\nColumn('x', Integer(), table=None)\n>>> cc[1]\nColumn('y', Integer(), table=None)\n```", "```py\n>>> list(cc)\n[Column('x', Integer(), table=None),\n Column('y', Integer(), table=None)]\n```", "```py\n>>> x1, x2 = Column('x', Integer), Column('x', Integer)\n>>> cc = ColumnCollection(columns=[(x1.name, x1), (x2.name, x2)])\n>>> list(cc)\n[Column('x', Integer(), table=None),\n Column('x', Integer(), table=None)]\n>>> cc['x'] is x1\nFalse\n>>> cc['x'] is x2\nTrue\n```", "```py\nmethod add(column: ColumnElement[Any], key: _COLKEY | None = None) \u2192 None\n```", "```py\nmethod as_readonly() \u2192 ReadOnlyColumnCollection[_COLKEY, _COL_co]\n```", "```py\nmethod clear() \u2192 NoReturn\n```", "```py\nmethod compare(other: ColumnCollection[Any, Any]) \u2192 bool\n```", "```py\nmethod contains_column(col: ColumnElement[Any]) \u2192 bool\n```", "```py\nmethod corresponding_column(column: _COL, require_embedded: bool = False) \u2192 _COL | _COL_co | None\n```", "```py\nmethod get(key: str, default: _COL_co | None = None) \u2192 _COL_co | None\n```", "```py\nmethod items() \u2192 List[Tuple[_COLKEY, _COL_co]]\n```", "```py\nmethod keys() \u2192 List[_COLKEY]\n```", "```py\nmethod update(iter_: Any) \u2192 NoReturn\n```", "```py\nmethod values() \u2192 List[_COL_co]\n```", "```py\nclass sqlalchemy.sql.expression.ColumnElement\n```", "```py\n>>> from sqlalchemy.sql import column\n>>> column('a') + column('b')\n<sqlalchemy.sql.expression.BinaryExpression object at 0x101029dd0>\n>>> print(column('a') + column('b'))\na  +  b \n```", "```py\nmethod __eq__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nattribute allows_lambda = True\n```", "```py\nattribute anon_key_label\n```", "```py\nattribute anon_label\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nattribute base_columns\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod cast(type_: _TypeEngineArgument[_OPT]) \u2192 Cast[_OPT]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nattribute comparator\n```", "```py\nmethod compare(other: ClauseElement, **kw: Any) \u2192 bool\n```", "```py\nmethod compile(bind: _HasDialect | None = None, dialect: Dialect | None = None, **kw: Any) \u2192 Compiled\n```", "```py\n    from sqlalchemy.sql import table, column, select\n\n    t = table('t', column('x'))\n\n    s = select(t).where(t.c.x == 5)\n\n    print(s.compile(compile_kwargs={\"literal_binds\": True}))\n    ```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nattribute description\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute entity_namespace\n```", "```py\nattribute expression\n```", "```py\nattribute foreign_keys: AbstractSet[ForeignKey] = frozenset({})\n```", "```py\nmethod get_children(*, omit_attrs: Tuple[str, ...] = (), **kw: Any) \u2192 Iterable[HasTraverseInternals]\n```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nattribute inherit_cache: bool | None = None\n```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nattribute is_clause_element = True\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nattribute is_dml = False\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nattribute is_selectable = False\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute key: str | None = None\n```", "```py\nmethod label(name: str | None) \u2192 Label[_T]\n```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nattribute negation_clause: ColumnElement[bool]\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 ColumnElement[Any]\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod params(_ClauseElement__optionaldict: Mapping[str, Any] | None = None, **kwargs: Any) \u2192 Self\n```", "```py\n>>> clause = column('x') + bindparam('foo')\n>>> print(clause.compile().params)\n{'foo':None}\n>>> print(clause.params({'foo':7}).compile().params)\n{'foo':7}\n```", "```py\nattribute primary_key: bool = False\n```", "```py\nattribute proxy_set: util.generic_fn_descriptor[FrozenSet[Any]]\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 ColumnElement[Any]\n```", "```py\nmethod self_group(against: OperatorType | None = None) \u2192 ColumnElement[Any]\n```", "```py\nmethod shares_lineage(othercolumn: ColumnElement[Any]) \u2192 bool\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute stringify_dialect = 'default'\n```", "```py\nattribute supports_execution = False\n```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nattribute type: TypeEngine[_T]\n```", "```py\nmethod unique_params(_ClauseElement__optionaldict: Dict[str, Any] | None = None, **kwargs: Any) \u2192 Self\n```", "```py\nattribute uses_inspection = True\n```", "```py\nsqlalchemy.sql.expression.ColumnExpressionArgument\n```", "```py\nclass sqlalchemy.sql.expression.ColumnOperators\n```", "```py\ndef __eq__(self, other):\n    return self.operate(operators.eq, other)\n```", "```py\ndef eq(a, b):\n    return a == b\n```", "```py\nmethod __add__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __and__(other: Any) \u2192 Operators\n```", "```py\na & b\n```", "```py\nfrom sqlalchemy import and_\nand_(a, b)\n```", "```py\n(a == 2) & (b == 4)\n```", "```py\nmethod __eq__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __floordiv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ge__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __getitem__(index: Any) \u2192 ColumnOperators\n```", "```py\nmethod __gt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __hash__()\n```", "```py\nmethod __invert__() \u2192 Operators\n```", "```py\n~a\n```", "```py\nfrom sqlalchemy import not_\nnot_(a)\n```", "```py\nmethod __le__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lshift__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __lt__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __mod__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __mul__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __ne__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __neg__() \u2192 ColumnOperators\n```", "```py\nmethod __or__(other: Any) \u2192 Operators\n```", "```py\na | b\n```", "```py\nfrom sqlalchemy import or_\nor_(a, b)\n```", "```py\n(a == 2) | (b == 4)\n```", "```py\nmethod __radd__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rfloordiv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rmod__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rmul__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rshift__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rsub__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __rtruediv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __sa_operate__(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod __sub__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod __truediv__(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod all_() \u2192 ColumnOperators\n```", "```py\nmethod any_() \u2192 ColumnOperators\n```", "```py\nmethod asc() \u2192 ColumnOperators\n```", "```py\nmethod between(cleft: Any, cright: Any, symmetric: bool = False) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_and(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_lshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_not() \u2192 ColumnOperators\n```", "```py\nmethod bitwise_or(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_rshift(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bitwise_xor(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod collate(collation: str) \u2192 ColumnOperators\n```", "```py\nmethod concat(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod contains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.contains(\"foobar\"))\n```", "```py\n    somecolumn.contains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.contains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod desc() \u2192 ColumnOperators\n```", "```py\nmethod distinct() \u2192 ColumnOperators\n```", "```py\nmethod endswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE '%' || <other>\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.endswith(\"foobar\"))\n```", "```py\n    somecolumn.endswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '/'\n    ```", "```py\n    somecolumn.endswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE '%' || :param ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod icontains(other: Any, **kw: Any) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.icontains(\"foobar\"))\n```", "```py\n    somecolumn.icontains(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.icontains(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.icontains(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod iendswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE '%' || lower(<other>)\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.iendswith(\"foobar\"))\n```", "```py\n    somecolumn.iendswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '/'\n    ```", "```py\n    somecolumn.iendswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE '%' || lower(:param) ESCAPE '^'\n    ```", "```py\n    somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nlower(a) LIKE lower(other)\n```", "```py\na ILIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.ilike(\"%foobar%\"))\n```", "```py\n    somecolumn.ilike(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod in_(other: Any) \u2192 ColumnOperators\n```", "```py\n    stmt.where(column.in_([1, 2, 3]))\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    from sqlalchemy import tuple_\n    stmt.where(tuple_(col1, col2).in_([(1, 10), (2, 20), (3, 30)]))\n    ```", "```py\n    stmt.where(column.in_([]))\n    ```", "```py\n    WHERE col IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(column.in_(bindparam('value', expanding=True)))\n    ```", "```py\n    WHERE COL IN ([EXPANDING_value])\n    ```", "```py\n    connection.execute(stmt, {\"value\": [1, 2, 3]})\n    ```", "```py\n    WHERE COL IN (?, ?, ?)\n    ```", "```py\n    WHERE COL IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n    ```", "```py\n    stmt.where(\n        column.in_(\n            select(othertable.c.y).\n            where(table.c.x == othertable.c.x)\n        )\n    )\n    ```", "```py\n    WHERE COL IN (SELECT othertable.y\n    FROM othertable WHERE othertable.x = table.x)\n    ```", "```py\nmethod is_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod is_not_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod isnot_distinct_from(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod istartswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\nlower(column) LIKE lower(<other>) || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.istartswith(\"foobar\"))\n```", "```py\n    somecolumn.istartswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.istartswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    lower(somecolumn) LIKE lower(:param) || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.istartswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nmethod like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\na LIKE other\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.like(\"%foobar%\"))\n```", "```py\n    somecolumn.like(\"foo/%bar\", escape=\"/\")\n    ```", "```py\nmethod match(other: Any, **kwargs: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_ilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod not_in(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod not_like(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notilike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod notin_(other: Any) \u2192 ColumnOperators\n```", "```py\nmethod notlike(other: Any, escape: str | None = None) \u2192 ColumnOperators\n```", "```py\nmethod nulls_first() \u2192 ColumnOperators\n```", "```py\nmethod nulls_last() \u2192 ColumnOperators\n```", "```py\nmethod nullsfirst() \u2192 ColumnOperators\n```", "```py\nmethod nullslast() \u2192 ColumnOperators\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod regexp_match(pattern: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(table.c.some_column).where(\n    table.c.some_column.regexp_match('^(b|c)')\n)\n```", "```py\nmethod regexp_replace(pattern: Any, replacement: Any, flags: str | None = None) \u2192 ColumnOperators\n```", "```py\nstmt = select(\n    table.c.some_column.regexp_replace(\n        'b(..)',\n        'XY',\n        flags='g'\n    )\n)\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nmethod startswith(other: Any, escape: str | None = None, autoescape: bool = False) \u2192 ColumnOperators\n```", "```py\ncolumn LIKE <other> || '%'\n```", "```py\nstmt = select(sometable).\\\n    where(sometable.c.column.startswith(\"foobar\"))\n```", "```py\n    somecolumn.startswith(\"foo%bar\", autoescape=True)\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '/'\n    ```", "```py\n    somecolumn.startswith(\"foo/%bar\", escape=\"^\")\n    ```", "```py\n    somecolumn LIKE :param || '%' ESCAPE '^'\n    ```", "```py\n    somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)\n    ```", "```py\nattribute timetuple: Literal[None] = None\n```", "```py\nclass sqlalchemy.sql.expression.Extract\n```", "```py\nclass sqlalchemy.sql.expression.False_\n```", "```py\nclass sqlalchemy.sql.expression.FunctionFilter\n```", "```py\nfunc.count(1).filter(True)\n```", "```py\nmethod filter(*criterion: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nmethod over(partition_by: Iterable[_ColumnExpressionArgument[Any]] | _ColumnExpressionArgument[Any] | None = None, order_by: Iterable[_ColumnExpressionArgument[Any]] | _ColumnExpressionArgument[Any] | None = None, range_: typing_Tuple[int | None, int | None] | None = None, rows: typing_Tuple[int | None, int | None] | None = None) \u2192 Over[_T]\n```", "```py\nfunc.rank().filter(MyClass.y > 5).over(order_by='x')\n```", "```py\nfrom sqlalchemy import over, funcfilter\nover(funcfilter(func.rank(), MyClass.y > 5), order_by='x')\n```", "```py\nmethod self_group(against: OperatorType | None = None) \u2192 Self | Grouping[_T]\n```", "```py\nclass sqlalchemy.sql.expression.Label\n```", "```py\nattribute foreign_keys: AbstractSet[ForeignKey]\n```", "```py\nattribute primary_key: bool\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.Null\n```", "```py\nclass sqlalchemy.sql.expression.Operators\n```", "```py\nmethod __and__(other: Any) \u2192 Operators\n```", "```py\na & b\n```", "```py\nfrom sqlalchemy import and_\nand_(a, b)\n```", "```py\n(a == 2) & (b == 4)\n```", "```py\nmethod __invert__() \u2192 Operators\n```", "```py\n~a\n```", "```py\nfrom sqlalchemy import not_\nnot_(a)\n```", "```py\nmethod __or__(other: Any) \u2192 Operators\n```", "```py\na | b\n```", "```py\nfrom sqlalchemy import or_\nor_(a, b)\n```", "```py\n(a == 2) | (b == 4)\n```", "```py\nmethod __sa_operate__(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod bool_op(opstring: str, precedence: int = 0, python_impl: Callable[[...], Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nmethod op(opstring: str, precedence: int = 0, is_comparison: bool = False, return_type: Type[TypeEngine[Any]] | TypeEngine[Any] | None = None, python_impl: Callable[..., Any] | None = None) \u2192 Callable[[Any], Operators]\n```", "```py\nsomecolumn.op(\"*\")(5)\n```", "```py\nsomecolumn * 5\n```", "```py\nsomecolumn.op('&')(0xff)\n```", "```py\n    >>> expr = column('x').op('+', python_impl=lambda a, b: a + b)('y')\n    ```", "```py\n    >>> expr.operator(5, 10)\n    15\n    ```", "```py\nmethod operate(op: OperatorType, *other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass MyComparator(ColumnOperators):\n    def operate(self, op, other, **kwargs):\n        return op(func.lower(self), func.lower(other), **kwargs)\n```", "```py\nmethod reverse_operate(op: OperatorType, other: Any, **kwargs: Any) \u2192 Operators\n```", "```py\nclass sqlalchemy.sql.expression.Over\n```", "```py\nattribute element: ColumnElement[_T]\n```", "```py\nclass sqlalchemy.sql.expression.SQLColumnExpression\n```", "```py\nclass sqlalchemy.sql.expression.TextClause\n```", "```py\nfrom sqlalchemy import text\n\nt = text(\"SELECT * FROM users\")\nresult = connection.execute(t)\n```", "```py\nmethod bindparams(*binds: BindParameter[Any], **names_to_values: Any) \u2192 Self\n```", "```py\nfrom sqlalchemy import text\nstmt = text(\"SELECT id, name FROM user WHERE name=:name \"\n            \"AND timestamp=:timestamp\")\n```", "```py\nstmt = stmt.bindparams(name='jack',\n            timestamp=datetime.datetime(2012, 10, 8, 15, 12, 5))\n```", "```py\nfrom sqlalchemy import bindparam\nstmt = stmt.bindparams(\n                bindparam('name', value='jack', type_=String),\n                bindparam('timestamp', type_=DateTime)\n            )\n```", "```py\nresult = connection.execute(stmt,\n            timestamp=datetime.datetime(2012, 10, 8, 15, 12, 5))\n```", "```py\nstmt = text(\"SELECT id, name FROM user WHERE name=:name \"\n            \"AND timestamp=:timestamp\")\nstmt = stmt.bindparams(\n    bindparam('name', type_=String),\n    bindparam('timestamp', type_=DateTime)\n)\nstmt = stmt.bindparams(\n    name='jack',\n    timestamp=datetime.datetime(2012, 10, 8, 15, 12, 5)\n)\n```", "```py\nstmt1 = text(\"select id from table where name=:name\").bindparams(\n    bindparam(\"name\", value='name1', unique=True)\n)\nstmt2 = text(\"select id from table where name=:name\").bindparams(\n    bindparam(\"name\", value='name2', unique=True)\n)\n\nunion = union_all(\n    stmt1.columns(column(\"id\")),\n    stmt2.columns(column(\"id\"))\n)\n```", "```py\nselect id from table where name=:name_1\nUNION ALL select id from table where name=:name_2\n```", "```py\nmethod columns(*cols: _ColumnExpressionArgument[Any], **types: TypeEngine[Any]) \u2192 TextualSelect\n```", "```py\nfrom sqlalchemy.sql import column, text\n\nstmt = text(\"SELECT id, name FROM some_table\")\nstmt = stmt.columns(column('id'), column('name')).subquery('st')\n\nstmt = select(mytable).\\\n        select_from(\n            mytable.join(stmt, mytable.c.name == stmt.c.name)\n        ).where(stmt.c.id > 5)\n```", "```py\nstmt = text(\"SELECT id, name, timestamp FROM some_table\")\nstmt = stmt.columns(\n            column('id', Integer),\n            column('name', Unicode),\n            column('timestamp', DateTime)\n        )\n\nfor id, name, timestamp in connection.execute(stmt):\n    print(id, name, timestamp)\n```", "```py\nstmt = text(\"SELECT id, name, timestamp FROM some_table\")\nstmt = stmt.columns(\n            id=Integer,\n            name=Unicode,\n            timestamp=DateTime\n        )\n\nfor id, name, timestamp in connection.execute(stmt):\n    print(id, name, timestamp)\n```", "```py\nstmt = text(\"SELECT users.id, addresses.id, users.id, \"\n     \"users.name, addresses.email_address AS email \"\n     \"FROM users JOIN addresses ON users.id=addresses.user_id \"\n     \"WHERE users.id = 1\").columns(\n        User.id,\n        Address.id,\n        Address.user_id,\n        User.name,\n        Address.email_address\n     )\n\nquery = session.query(User).from_statement(stmt).options(\n    contains_eager(User.addresses))\n```", "```py\nstmt = stmt.columns(id=Integer, name=String).cte('st')\n\nstmt = select(sometable).where(sometable.c.id == stmt.c.id)\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.TryCast\n```", "```py\nattribute inherit_cache: bool | None = True\n```", "```py\nclass sqlalchemy.sql.expression.Tuple\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.WithinGroup\n```", "```py\nmethod over(partition_by=None, order_by=None, range_=None, rows=None)\n```", "```py\nclass sqlalchemy.sql.elements.WrapsColumnExpression\n```", "```py\nclass sqlalchemy.sql.expression.True_\n```", "```py\nclass sqlalchemy.sql.expression.TypeCoerce\n```", "```py\nmethod self_group(against=None)\n```", "```py\nclass sqlalchemy.sql.expression.UnaryExpression\n```", "```py\nmethod self_group(against=None)\n```", "```py\nfunction sqlalchemy.NotNullable(val: _TypedColumnClauseArgument[_T | None] | Type[_T] | None) \u2192 _TypedColumnClauseArgument[_T]\n```", "```py\nstmt = select(NotNullable(A.value)).where(A.value.is_not(None))\n```", "```py\nfunction sqlalchemy.Nullable(val: _TypedColumnClauseArgument[_T]) \u2192 _TypedColumnClauseArgument[_T | None]\n```", "```py\nstmt1 = select(A, Nullable(B)).outerjoin(A.bs)\nstmt2 = select(A.data, Nullable(B.data)).outerjoin(A.bs)\n```"]