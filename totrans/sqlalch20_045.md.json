["```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import load_only\n>>> stmt = select(Book).options(load_only(Book.title, Book.summary))\n>>> books = session.scalars(stmt).all()\nSELECT  book.id,  book.title,  book.summary\nFROM  book\n[...]  ()\n>>> for book in books:\n...     print(f\"{book.title}  {book.summary}\")\n100 Years of Krabby Patties  some long summary\nSea Catch 22  another long summary\nThe Sea Grapes of Wrath  yet another summary\nA Nut Like No Other  some long summary\nGeodesic Domes: A Retrospective  another long summary\nRocketry for Squirrels  yet another summary\n```", "```py\n>>> img_data = books[0].cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (1,) \n```", "```py\n>>> stmt = select(User, Book).join_from(User, Book).options(load_only(Book.title))\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nbook.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> stmt = (\n...     select(User, Book)\n...     .join_from(User, Book)\n...     .options(load_only(User.name), load_only(Book.title))\n... )\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  book.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.owner_id  AS  book_owner_id,  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  book.owner_id  IN  (?,  ?)\n[...]  (1,  2)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defaultload\n>>> stmt = select(User).options(defaultload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (1,)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (2,)\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defer\n>>> stmt = select(Book).where(Book.owner_id == 2).options(defer(Book.cover_photo))\n>>> books = session.scalars(stmt).all()\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.owner_id  =  ?\n[...]  (2,)\n>>> for book in books:\n...     print(f\"{book.title}: {book.summary}\")\nA Nut Like No Other: some long summary\nGeodesic Domes: A Retrospective: another long summary\nRocketry for Squirrels: yet another summary\n```", "```py\n>>> img_data = books[0].cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (4,) \n```", "```py\n>>> book = session.scalar(\n...     select(Book).options(defer(Book.cover_photo, raiseload=True)).where(Book.id == 4)\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.id  =  ?\n[...]  (4,)\n>>> book.cover_photo\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.cover_photo' is not available due to raiseload=True\n```", "```py\n>>> session.expunge_all()\n>>> book = session.scalar(\n...     select(Book).options(load_only(Book.title, raiseload=True)).where(Book.id == 5)\n... )\nSELECT  book.id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (5,)\n>>> book.summary\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.summary' is not available due to raiseload=True\n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(Text, deferred=True)\n...     cover_photo: Mapped[bytes] = mapped_column(LargeBinary, deferred=True)\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> img_data = book.cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\nfrom sqlalchemy import Blob\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nbook_table = Table(\n    \"book\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"title\", String(50)),\n    Column(\"summary\", Text),\n    Column(\"cover_image\", Blob),\n)\n\nclass Book:\n    pass\n\nmapper_registry.map_imperatively(\n    Book,\n    book_table,\n    properties={\n        \"summary\": deferred(book_table.c.summary),\n        \"cover_image\": deferred(book_table.c.cover_image),\n    },\n)\n```", "```py\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```", "```py\n>>> from sqlalchemy.orm import undefer\n>>> book = session.scalar(select(Book).where(Book.id == 2).options(undefer(Book.summary)))\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> print(book.summary)\nanother long summary\n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(\n...         Text, deferred=True, deferred_group=\"book_attrs\"\n...     )\n...     cover_photo: Mapped[bytes] = mapped_column(\n...         LargeBinary, deferred=True, deferred_group=\"book_attrs\"\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> img_data, summary = book.cover_photo, book.summary\nSELECT  book.summary  AS  book_summary,  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> from sqlalchemy.orm import undefer_group\n>>> book = session.scalar(\n...     select(Book).where(Book.id == 2).options(undefer_group(\"book_attrs\"))\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> img_data, summary = book.cover_photo, book.summary\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 3).options(undefer(\"*\")))\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (3,) \n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(Text, deferred=True, deferred_raiseload=True)\n...     cover_photo: Mapped[bytes] = mapped_column(\n...         LargeBinary, deferred=True, deferred_raiseload=True\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> book.summary\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.summary' is not available due to raiseload=True\n```", "```py\n>>> book = session.scalar(\n...     select(Book)\n...     .where(Book.id == 2)\n...     .options(undefer(\"*\"))\n...     .execution_options(populate_existing=True)\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> book.summary\n'another long summary'\n```", "```py\n>>> from sqlalchemy import func\n>>> stmt = select(User, func.count(Book.id)).join_from(User, Book).group_by(Book.owner_id)\n>>> for user, book_count in session.execute(stmt):\n...     print(f\"Username: {user.name}  Number of books: {book_count}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\ncount(book.id)  AS  count_1\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nGROUP  BY  book.owner_id\n[...]  ()\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\n>>> from sqlalchemy.orm import query_expression\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     fullname: Mapped[Optional[str]]\n...     book_count: Mapped[int] = query_expression()\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n```", "```py\n>>> from sqlalchemy.orm import with_expression\n>>> stmt = (\n...     select(User)\n...     .join_from(User, Book)\n...     .group_by(Book.owner_id)\n...     .options(with_expression(User.book_count, func.count(Book.id)))\n... )\n>>> for user in session.scalars(stmt):\n...     print(f\"Username: {user.name}  Number of books: {user.book_count}\")\nSELECT  count(book.id)  AS  count_1,  user_account.id,  user_account.name,\nuser_account.fullname\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nGROUP  BY  book.owner_id\n[...]  ()\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\n    # load the first A\n    obj = session.scalars(select(A).order_by(A.id)).first()\n\n    # load the same A with an option; expression will **not** be applied\n    # to the already-loaded object\n    obj = session.scalars(select(A).options(with_expression(A.expr, some_expr))).first()\n    ```", "```py\n    obj = session.scalars(\n        select(A)\n        .options(with_expression(A.expr, some_expr))\n        .execution_options(populate_existing=True)\n    ).first()\n    ```", "```py\n    # can't refer to A.expr elsewhere in the query\n    stmt = (\n        select(A)\n        .options(with_expression(A.expr, A.x + A.y))\n        .filter(A.expr > 5)\n        .order_by(A.expr)\n    )\n    ```", "```py\n    # assign desired expression up front, then refer to that in\n    # the query\n    a_expr = A.x + A.y\n    stmt = (\n        select(A)\n        .options(with_expression(A.expr, a_expr))\n        .filter(a_expr > 5)\n        .order_by(a_expr)\n    )\n    ```", "```py\n>>> from sqlalchemy import union_all\n>>> s1 = (\n...     select(User, func.count(Book.id).label(\"book_count\"))\n...     .join_from(User, Book)\n...     .where(User.name == \"spongebob\")\n... )\n>>> s2 = (\n...     select(User, func.count(Book.id).label(\"book_count\"))\n...     .join_from(User, Book)\n...     .where(User.name == \"sandy\")\n... )\n>>> union_stmt = union_all(s1, s2)\n>>> orm_stmt = (\n...     select(User)\n...     .from_statement(union_stmt)\n...     .options(with_expression(User.book_count, union_stmt.selected_columns.book_count))\n... )\n>>> for user in session.scalars(orm_stmt):\n...     print(f\"Username: {user.name}  Number of books: {user.book_count}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,  count(book.id)  AS  book_count\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nWHERE  user_account.name  =  ?\nUNION  ALL\nSELECT  user_account.id,  user_account.name,  user_account.fullname,  count(book.id)  AS  book_count\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',  'sandy')\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\nfunction sqlalchemy.orm.defer(key: Literal['*'] | QueryableAttribute[Any], *addl_attrs: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 _AbstractLoad\n```", "```py\nfrom sqlalchemy.orm import defer\n\nsession.query(MyClass).options(\n defer(MyClass.attribute_one),\n defer(MyClass.attribute_two)\n)\n```", "```py\nsession.query(MyClass).options(\n defaultload(MyClass.someattr).defer(RelatedClass.some_column)\n)\n```", "```py\nselect(MyClass).options(\n defaultload(MyClass.someattr).options(\n defer(RelatedClass.some_column),\n defer(RelatedClass.some_other_column),\n defer(RelatedClass.another_column)\n )\n)\n```", "```py\nfunction sqlalchemy.orm.deferred(column: _ORMColumnExprArgument[_T], *additional_columns: _ORMColumnExprArgument[Any], group: str | None = None, raiseload: bool = False, comparator_factory: Type[PropComparator[_T]] | None = None, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: Any | None = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, active_history: bool = False, expire_on_flush: bool = True, info: _InfoType | None = None, doc: str | None = None) \u2192 MappedSQLExpression[_T]\n```", "```py\nfunction sqlalchemy.orm.query_expression(default_expr: _ORMColumnExprArgument[_T] = <sqlalchemy.sql.elements.Null object>, *, repr: Union[_NoArg, bool] = _NoArg.NO_ARG, compare: Union[_NoArg, bool] = _NoArg.NO_ARG, expire_on_flush: bool = True, info: Optional[_InfoType] = None, doc: Optional[str] = None) \u2192 MappedSQLExpression[_T]\n```", "```py\nfunction sqlalchemy.orm.load_only(*attrs: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 _AbstractLoad\n```", "```py\nsession.query(User).options(load_only(User.name, User.fullname))\n```", "```py\nsession.query(User).options(\n subqueryload(User.addresses).load_only(Address.email_address)\n)\n```", "```py\nstmt = (\n select(User, Address)\n .join(User.addresses)\n .options(\n Load(User).load_only(User.name, User.fullname),\n Load(Address).load_only(Address.email_address),\n )\n)\n```", "```py\nfunction sqlalchemy.orm.undefer(key: Literal['*'] | QueryableAttribute[Any], *addl_attrs: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\n# undefer two columns\nsession.query(MyClass).options(\n undefer(MyClass.col1), undefer(MyClass.col2)\n)\n\n# undefer all columns specific to a single class using Load + *\nsession.query(MyClass, MyOtherClass).options(\n Load(MyClass).undefer(\"*\")\n)\n\n# undefer a column on a related object\nselect(MyClass).options(\n defaultload(MyClass.items).undefer(MyClass.text)\n)\n```", "```py\nfunction sqlalchemy.orm.undefer_group(name: str) \u2192 _AbstractLoad\n```", "```py\nsession.query(MyClass).options(undefer_group(\"large_attrs\"))\n```", "```py\nselect(MyClass).options(\n defaultload(\"someattr\").undefer_group(\"large_attrs\")\n)\n```", "```py\nfunction sqlalchemy.orm.with_expression(key: _AttrType, expression: _ColumnExpressionArgument[Any]) \u2192 _AbstractLoad\n```", "```py\nstmt = select(SomeClass).options(\n with_expression(SomeClass.x_y_expr, SomeClass.x + SomeClass.y)\n)\n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import load_only\n>>> stmt = select(Book).options(load_only(Book.title, Book.summary))\n>>> books = session.scalars(stmt).all()\nSELECT  book.id,  book.title,  book.summary\nFROM  book\n[...]  ()\n>>> for book in books:\n...     print(f\"{book.title}  {book.summary}\")\n100 Years of Krabby Patties  some long summary\nSea Catch 22  another long summary\nThe Sea Grapes of Wrath  yet another summary\nA Nut Like No Other  some long summary\nGeodesic Domes: A Retrospective  another long summary\nRocketry for Squirrels  yet another summary\n```", "```py\n>>> img_data = books[0].cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (1,) \n```", "```py\n>>> stmt = select(User, Book).join_from(User, Book).options(load_only(Book.title))\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nbook.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> stmt = (\n...     select(User, Book)\n...     .join_from(User, Book)\n...     .options(load_only(User.name), load_only(Book.title))\n... )\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  book.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.owner_id  AS  book_owner_id,  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  book.owner_id  IN  (?,  ?)\n[...]  (1,  2)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defaultload\n>>> stmt = select(User).options(defaultload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (1,)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (2,)\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defer\n>>> stmt = select(Book).where(Book.owner_id == 2).options(defer(Book.cover_photo))\n>>> books = session.scalars(stmt).all()\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.owner_id  =  ?\n[...]  (2,)\n>>> for book in books:\n...     print(f\"{book.title}: {book.summary}\")\nA Nut Like No Other: some long summary\nGeodesic Domes: A Retrospective: another long summary\nRocketry for Squirrels: yet another summary\n```", "```py\n>>> img_data = books[0].cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (4,) \n```", "```py\n>>> book = session.scalar(\n...     select(Book).options(defer(Book.cover_photo, raiseload=True)).where(Book.id == 4)\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.id  =  ?\n[...]  (4,)\n>>> book.cover_photo\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.cover_photo' is not available due to raiseload=True\n```", "```py\n>>> session.expunge_all()\n>>> book = session.scalar(\n...     select(Book).options(load_only(Book.title, raiseload=True)).where(Book.id == 5)\n... )\nSELECT  book.id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (5,)\n>>> book.summary\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.summary' is not available due to raiseload=True\n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import load_only\n>>> stmt = select(Book).options(load_only(Book.title, Book.summary))\n>>> books = session.scalars(stmt).all()\nSELECT  book.id,  book.title,  book.summary\nFROM  book\n[...]  ()\n>>> for book in books:\n...     print(f\"{book.title}  {book.summary}\")\n100 Years of Krabby Patties  some long summary\nSea Catch 22  another long summary\nThe Sea Grapes of Wrath  yet another summary\nA Nut Like No Other  some long summary\nGeodesic Domes: A Retrospective  another long summary\nRocketry for Squirrels  yet another summary\n```", "```py\n>>> img_data = books[0].cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (1,) \n```", "```py\n>>> stmt = select(User, Book).join_from(User, Book).options(load_only(Book.title))\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nbook.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> stmt = (\n...     select(User, Book)\n...     .join_from(User, Book)\n...     .options(load_only(User.name), load_only(Book.title))\n... )\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  book.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.owner_id  AS  book_owner_id,  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  book.owner_id  IN  (?,  ?)\n[...]  (1,  2)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defaultload\n>>> stmt = select(User).options(defaultload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (1,)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (2,)\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> stmt = select(User, Book).join_from(User, Book).options(load_only(Book.title))\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nbook.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> stmt = (\n...     select(User, Book)\n...     .join_from(User, Book)\n...     .options(load_only(User.name), load_only(Book.title))\n... )\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  book.id  AS  id_1,  book.title\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id \n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.owner_id  AS  book_owner_id,  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  book.owner_id  IN  (?,  ?)\n[...]  (1,  2)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defaultload\n>>> stmt = select(User).options(defaultload(User.books).load_only(Book.title))\n>>> for user in session.scalars(stmt):\n...     print(f\"{user.fullname}   {[b.title for b in user.books]}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (1,)\nSpongebob Squarepants   ['100 Years of Krabby Patties', 'Sea Catch 22', 'The Sea Grapes of Wrath']\nSELECT  book.id  AS  book_id,  book.title  AS  book_title\nFROM  book\nWHERE  ?  =  book.owner_id\n[...]  (2,)\nSandy Cheeks   ['A Nut Like No Other', 'Geodesic Domes: A Retrospective', 'Rocketry for Squirrels']\n```", "```py\n>>> from sqlalchemy.orm import defer\n>>> stmt = select(Book).where(Book.owner_id == 2).options(defer(Book.cover_photo))\n>>> books = session.scalars(stmt).all()\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.owner_id  =  ?\n[...]  (2,)\n>>> for book in books:\n...     print(f\"{book.title}: {book.summary}\")\nA Nut Like No Other: some long summary\nGeodesic Domes: A Retrospective: another long summary\nRocketry for Squirrels: yet another summary\n```", "```py\n>>> img_data = books[0].cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (4,) \n```", "```py\n>>> book = session.scalar(\n...     select(Book).options(defer(Book.cover_photo, raiseload=True)).where(Book.id == 4)\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.id  =  ?\n[...]  (4,)\n>>> book.cover_photo\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.cover_photo' is not available due to raiseload=True\n```", "```py\n>>> session.expunge_all()\n>>> book = session.scalar(\n...     select(Book).options(load_only(Book.title, raiseload=True)).where(Book.id == 5)\n... )\nSELECT  book.id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (5,)\n>>> book.summary\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.summary' is not available due to raiseload=True\n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(Text, deferred=True)\n...     cover_photo: Mapped[bytes] = mapped_column(LargeBinary, deferred=True)\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> img_data = book.cover_photo\nSELECT  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\nfrom sqlalchemy import Blob\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nbook_table = Table(\n    \"book\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"title\", String(50)),\n    Column(\"summary\", Text),\n    Column(\"cover_image\", Blob),\n)\n\nclass Book:\n    pass\n\nmapper_registry.map_imperatively(\n    Book,\n    book_table,\n    properties={\n        \"summary\": deferred(book_table.c.summary),\n        \"cover_image\": deferred(book_table.c.cover_image),\n    },\n)\n```", "```py\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```", "```py\n>>> from sqlalchemy.orm import undefer\n>>> book = session.scalar(select(Book).where(Book.id == 2).options(undefer(Book.summary)))\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> print(book.summary)\nanother long summary\n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(\n...         Text, deferred=True, deferred_group=\"book_attrs\"\n...     )\n...     cover_photo: Mapped[bytes] = mapped_column(\n...         LargeBinary, deferred=True, deferred_group=\"book_attrs\"\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> img_data, summary = book.cover_photo, book.summary\nSELECT  book.summary  AS  book_summary,  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> from sqlalchemy.orm import undefer_group\n>>> book = session.scalar(\n...     select(Book).where(Book.id == 2).options(undefer_group(\"book_attrs\"))\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> img_data, summary = book.cover_photo, book.summary\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 3).options(undefer(\"*\")))\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (3,) \n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(Text, deferred=True, deferred_raiseload=True)\n...     cover_photo: Mapped[bytes] = mapped_column(\n...         LargeBinary, deferred=True, deferred_raiseload=True\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> book.summary\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.summary' is not available due to raiseload=True\n```", "```py\n>>> book = session.scalar(\n...     select(Book)\n...     .where(Book.id == 2)\n...     .options(undefer(\"*\"))\n...     .execution_options(populate_existing=True)\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> book.summary\n'another long summary'\n```", "```py\nfrom sqlalchemy import Blob\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nbook_table = Table(\n    \"book\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"title\", String(50)),\n    Column(\"summary\", Text),\n    Column(\"cover_image\", Blob),\n)\n\nclass Book:\n    pass\n\nmapper_registry.map_imperatively(\n    Book,\n    book_table,\n    properties={\n        \"summary\": deferred(book_table.c.summary),\n        \"cover_image\": deferred(book_table.c.cover_image),\n    },\n)\n```", "```py\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```", "```py\n>>> from sqlalchemy.orm import undefer\n>>> book = session.scalar(select(Book).where(Book.id == 2).options(undefer(Book.summary)))\nSELECT  book.id,  book.owner_id,  book.title,  book.summary\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> print(book.summary)\nanother long summary\n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(\n...         Text, deferred=True, deferred_group=\"book_attrs\"\n...     )\n...     cover_photo: Mapped[bytes] = mapped_column(\n...         LargeBinary, deferred=True, deferred_group=\"book_attrs\"\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> img_data, summary = book.cover_photo, book.summary\nSELECT  book.summary  AS  book_summary,  book.cover_photo  AS  book_cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> from sqlalchemy.orm import undefer_group\n>>> book = session.scalar(\n...     select(Book).where(Book.id == 2).options(undefer_group(\"book_attrs\"))\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,) \n```", "```py\n>>> img_data, summary = book.cover_photo, book.summary\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 3).options(undefer(\"*\")))\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (3,) \n```", "```py\n>>> class Book(Base):\n...     __tablename__ = \"book\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     title: Mapped[str]\n...     summary: Mapped[str] = mapped_column(Text, deferred=True, deferred_raiseload=True)\n...     cover_photo: Mapped[bytes] = mapped_column(\n...         LargeBinary, deferred=True, deferred_raiseload=True\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"Book(id={self.id!r}, title={self.title!r})\"\n```", "```py\n>>> book = session.scalar(select(Book).where(Book.id == 2))\nSELECT  book.id,  book.owner_id,  book.title\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> book.summary\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'Book.summary' is not available due to raiseload=True\n```", "```py\n>>> book = session.scalar(\n...     select(Book)\n...     .where(Book.id == 2)\n...     .options(undefer(\"*\"))\n...     .execution_options(populate_existing=True)\n... )\nSELECT  book.id,  book.owner_id,  book.title,  book.summary,  book.cover_photo\nFROM  book\nWHERE  book.id  =  ?\n[...]  (2,)\n>>> book.summary\n'another long summary'\n```", "```py\n>>> from sqlalchemy import func\n>>> stmt = select(User, func.count(Book.id)).join_from(User, Book).group_by(Book.owner_id)\n>>> for user, book_count in session.execute(stmt):\n...     print(f\"Username: {user.name}  Number of books: {book_count}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\ncount(book.id)  AS  count_1\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nGROUP  BY  book.owner_id\n[...]  ()\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\n>>> from sqlalchemy.orm import query_expression\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     fullname: Mapped[Optional[str]]\n...     book_count: Mapped[int] = query_expression()\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n```", "```py\n>>> from sqlalchemy.orm import with_expression\n>>> stmt = (\n...     select(User)\n...     .join_from(User, Book)\n...     .group_by(Book.owner_id)\n...     .options(with_expression(User.book_count, func.count(Book.id)))\n... )\n>>> for user in session.scalars(stmt):\n...     print(f\"Username: {user.name}  Number of books: {user.book_count}\")\nSELECT  count(book.id)  AS  count_1,  user_account.id,  user_account.name,\nuser_account.fullname\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nGROUP  BY  book.owner_id\n[...]  ()\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\n    # load the first A\n    obj = session.scalars(select(A).order_by(A.id)).first()\n\n    # load the same A with an option; expression will **not** be applied\n    # to the already-loaded object\n    obj = session.scalars(select(A).options(with_expression(A.expr, some_expr))).first()\n    ```", "```py\n    obj = session.scalars(\n        select(A)\n        .options(with_expression(A.expr, some_expr))\n        .execution_options(populate_existing=True)\n    ).first()\n    ```", "```py\n    # can't refer to A.expr elsewhere in the query\n    stmt = (\n        select(A)\n        .options(with_expression(A.expr, A.x + A.y))\n        .filter(A.expr > 5)\n        .order_by(A.expr)\n    )\n    ```", "```py\n    # assign desired expression up front, then refer to that in\n    # the query\n    a_expr = A.x + A.y\n    stmt = (\n        select(A)\n        .options(with_expression(A.expr, a_expr))\n        .filter(a_expr > 5)\n        .order_by(a_expr)\n    )\n    ```", "```py\n>>> from sqlalchemy import union_all\n>>> s1 = (\n...     select(User, func.count(Book.id).label(\"book_count\"))\n...     .join_from(User, Book)\n...     .where(User.name == \"spongebob\")\n... )\n>>> s2 = (\n...     select(User, func.count(Book.id).label(\"book_count\"))\n...     .join_from(User, Book)\n...     .where(User.name == \"sandy\")\n... )\n>>> union_stmt = union_all(s1, s2)\n>>> orm_stmt = (\n...     select(User)\n...     .from_statement(union_stmt)\n...     .options(with_expression(User.book_count, union_stmt.selected_columns.book_count))\n... )\n>>> for user in session.scalars(orm_stmt):\n...     print(f\"Username: {user.name}  Number of books: {user.book_count}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,  count(book.id)  AS  book_count\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nWHERE  user_account.name  =  ?\nUNION  ALL\nSELECT  user_account.id,  user_account.name,  user_account.fullname,  count(book.id)  AS  book_count\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',  'sandy')\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\n>>> from sqlalchemy import union_all\n>>> s1 = (\n...     select(User, func.count(Book.id).label(\"book_count\"))\n...     .join_from(User, Book)\n...     .where(User.name == \"spongebob\")\n... )\n>>> s2 = (\n...     select(User, func.count(Book.id).label(\"book_count\"))\n...     .join_from(User, Book)\n...     .where(User.name == \"sandy\")\n... )\n>>> union_stmt = union_all(s1, s2)\n>>> orm_stmt = (\n...     select(User)\n...     .from_statement(union_stmt)\n...     .options(with_expression(User.book_count, union_stmt.selected_columns.book_count))\n... )\n>>> for user in session.scalars(orm_stmt):\n...     print(f\"Username: {user.name}  Number of books: {user.book_count}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,  count(book.id)  AS  book_count\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nWHERE  user_account.name  =  ?\nUNION  ALL\nSELECT  user_account.id,  user_account.name,  user_account.fullname,  count(book.id)  AS  book_count\nFROM  user_account  JOIN  book  ON  user_account.id  =  book.owner_id\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',  'sandy')\nUsername: spongebob  Number of books: 3\nUsername: sandy  Number of books: 3\n```", "```py\nfunction sqlalchemy.orm.defer(key: Literal['*'] | QueryableAttribute[Any], *addl_attrs: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 _AbstractLoad\n```", "```py\nfrom sqlalchemy.orm import defer\n\nsession.query(MyClass).options(\n defer(MyClass.attribute_one),\n defer(MyClass.attribute_two)\n)\n```", "```py\nsession.query(MyClass).options(\n defaultload(MyClass.someattr).defer(RelatedClass.some_column)\n)\n```", "```py\nselect(MyClass).options(\n defaultload(MyClass.someattr).options(\n defer(RelatedClass.some_column),\n defer(RelatedClass.some_other_column),\n defer(RelatedClass.another_column)\n )\n)\n```", "```py\nfunction sqlalchemy.orm.deferred(column: _ORMColumnExprArgument[_T], *additional_columns: _ORMColumnExprArgument[Any], group: str | None = None, raiseload: bool = False, comparator_factory: Type[PropComparator[_T]] | None = None, init: _NoArg | bool = _NoArg.NO_ARG, repr: _NoArg | bool = _NoArg.NO_ARG, default: Any | None = _NoArg.NO_ARG, default_factory: _NoArg | Callable[[], _T] = _NoArg.NO_ARG, compare: _NoArg | bool = _NoArg.NO_ARG, kw_only: _NoArg | bool = _NoArg.NO_ARG, active_history: bool = False, expire_on_flush: bool = True, info: _InfoType | None = None, doc: str | None = None) \u2192 MappedSQLExpression[_T]\n```", "```py\nfunction sqlalchemy.orm.query_expression(default_expr: _ORMColumnExprArgument[_T] = <sqlalchemy.sql.elements.Null object>, *, repr: Union[_NoArg, bool] = _NoArg.NO_ARG, compare: Union[_NoArg, bool] = _NoArg.NO_ARG, expire_on_flush: bool = True, info: Optional[_InfoType] = None, doc: Optional[str] = None) \u2192 MappedSQLExpression[_T]\n```", "```py\nfunction sqlalchemy.orm.load_only(*attrs: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 _AbstractLoad\n```", "```py\nsession.query(User).options(load_only(User.name, User.fullname))\n```", "```py\nsession.query(User).options(\n subqueryload(User.addresses).load_only(Address.email_address)\n)\n```", "```py\nstmt = (\n select(User, Address)\n .join(User.addresses)\n .options(\n Load(User).load_only(User.name, User.fullname),\n Load(Address).load_only(Address.email_address),\n )\n)\n```", "```py\nfunction sqlalchemy.orm.undefer(key: Literal['*'] | QueryableAttribute[Any], *addl_attrs: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\n# undefer two columns\nsession.query(MyClass).options(\n undefer(MyClass.col1), undefer(MyClass.col2)\n)\n\n# undefer all columns specific to a single class using Load + *\nsession.query(MyClass, MyOtherClass).options(\n Load(MyClass).undefer(\"*\")\n)\n\n# undefer a column on a related object\nselect(MyClass).options(\n defaultload(MyClass.items).undefer(MyClass.text)\n)\n```", "```py\nfunction sqlalchemy.orm.undefer_group(name: str) \u2192 _AbstractLoad\n```", "```py\nsession.query(MyClass).options(undefer_group(\"large_attrs\"))\n```", "```py\nselect(MyClass).options(\n defaultload(\"someattr\").undefer_group(\"large_attrs\")\n)\n```", "```py\nfunction sqlalchemy.orm.with_expression(key: _AttrType, expression: _ColumnExpressionArgument[Any]) \u2192 _AbstractLoad\n```", "```py\nstmt = select(SomeClass).options(\n with_expression(SomeClass.x_y_expr, SomeClass.x + SomeClass.y)\n)\n```"]