["```py\n>>> import pymupdf\n>>> print(pymupdf.__doc__)\nPyMuPDF 1.16.0: Python bindings for the MuPDF 1.16.0 library.\nVersion date: 2019-07-28 07:30:14.\nBuilt for Python 3.7 on win32 (64-bit). \n```", "```py\ndoc = pymupdf.open(filename)  # or pymupdf.Document(filename) \n```", "```py\ntoc = doc.get_toc() \n```", "```py\npage = doc.load_page(pno)  # loads page number 'pno' of the document (0-based)\npage = doc[pno]  # the short form \n```", "```py\nfor page in doc:\n    # do something with 'page'\n\n# ... or read backwards\nfor page in reversed(doc):\n    # do something with 'page'\n\n# ... or even use 'slicing'\nfor page in doc.pages(start, stop, step):\n    # do something with 'page' \n```", "```py\n# get all links on a page\nlinks = page.get_links() \n```", "```py\nfor link in page.links():\n    # do something with 'link' \n```", "```py\nfor annot in page.annots():\n    # do something with 'annot'\n\nfor field in page.widgets():\n    # do something with 'field' \n```", "```py\npix = page.get_pixmap() \n```", "```py\npix.save(\"page-%i.png\" % page.number) \n```", "```py\nif pix.alpha:\n    bitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)\nelse:\n    bitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples) \n```", "```py\nfrom PIL import Image, ImageTk\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\ntkimg = ImageTk.PhotoImage(img) \n```", "```py\n# remove alpha if present\npix1 = pymupdf.Pixmap(pix, 0) if pix.alpha else pix  # PPM does not support transparency\nimgdata = pix1.tobytes(\"ppm\")  # extremely fast!\ntkimg = tkinter.PhotoImage(data = imgdata) \n```", "```py\nfrom PIL import Image, ImageQt\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\nqtimg = ImageQt.ImageQt(img) \n```", "```py\nfrom PyQt5.QtGui import QImage\n\n# set the correct QImage format depending on alpha\nfmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888\nqtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt) \n```", "```py\ntext = page.get_text(opt) \n```", "```py\nareas = page.search_for(\"mupdf\") \n```", "```py\n# append complete doc2 to the end of doc1\ndoc1.insert_pdf(doc2) \n```", "```py\ndoc2 = pymupdf.open()                 # new empty PDF\ndoc2.insert_pdf(doc1, to_page = 9)  # first 10 pages\ndoc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages\ndoc2.save(\"first-and-last-10.pdf\") \n```", "```py\n>>> import pymupdf\n>>> print(pymupdf.__doc__)\nPyMuPDF 1.16.0: Python bindings for the MuPDF 1.16.0 library.\nVersion date: 2019-07-28 07:30:14.\nBuilt for Python 3.7 on win32 (64-bit). \n```", "```py\ndoc = pymupdf.open(filename)  # or pymupdf.Document(filename) \n```", "```py\ntoc = doc.get_toc() \n```", "```py\npage = doc.load_page(pno)  # loads page number 'pno' of the document (0-based)\npage = doc[pno]  # the short form \n```", "```py\nfor page in doc:\n    # do something with 'page'\n\n# ... or read backwards\nfor page in reversed(doc):\n    # do something with 'page'\n\n# ... or even use 'slicing'\nfor page in doc.pages(start, stop, step):\n    # do something with 'page' \n```", "```py\n# get all links on a page\nlinks = page.get_links() \n```", "```py\nfor link in page.links():\n    # do something with 'link' \n```", "```py\nfor annot in page.annots():\n    # do something with 'annot'\n\nfor field in page.widgets():\n    # do something with 'field' \n```", "```py\npix = page.get_pixmap() \n```", "```py\npix.save(\"page-%i.png\" % page.number) \n```", "```py\nif pix.alpha:\n    bitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)\nelse:\n    bitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples) \n```", "```py\nfrom PIL import Image, ImageTk\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\ntkimg = ImageTk.PhotoImage(img) \n```", "```py\n# remove alpha if present\npix1 = pymupdf.Pixmap(pix, 0) if pix.alpha else pix  # PPM does not support transparency\nimgdata = pix1.tobytes(\"ppm\")  # extremely fast!\ntkimg = tkinter.PhotoImage(data = imgdata) \n```", "```py\nfrom PIL import Image, ImageQt\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\nqtimg = ImageQt.ImageQt(img) \n```", "```py\nfrom PyQt5.QtGui import QImage\n\n# set the correct QImage format depending on alpha\nfmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888\nqtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt) \n```", "```py\ntext = page.get_text(opt) \n```", "```py\nareas = page.search_for(\"mupdf\") \n```", "```py\n# get all links on a page\nlinks = page.get_links() \n```", "```py\nfor link in page.links():\n    # do something with 'link' \n```", "```py\nfor annot in page.annots():\n    # do something with 'annot'\n\nfor field in page.widgets():\n    # do something with 'field' \n```", "```py\npix = page.get_pixmap() \n```", "```py\npix.save(\"page-%i.png\" % page.number) \n```", "```py\nif pix.alpha:\n    bitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)\nelse:\n    bitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples) \n```", "```py\nfrom PIL import Image, ImageTk\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\ntkimg = ImageTk.PhotoImage(img) \n```", "```py\n# remove alpha if present\npix1 = pymupdf.Pixmap(pix, 0) if pix.alpha else pix  # PPM does not support transparency\nimgdata = pix1.tobytes(\"ppm\")  # extremely fast!\ntkimg = tkinter.PhotoImage(data = imgdata) \n```", "```py\nfrom PIL import Image, ImageQt\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\nqtimg = ImageQt.ImageQt(img) \n```", "```py\nfrom PyQt5.QtGui import QImage\n\n# set the correct QImage format depending on alpha\nfmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888\nqtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt) \n```", "```py\nif pix.alpha:\n    bitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)\nelse:\n    bitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples) \n```", "```py\nfrom PIL import Image, ImageTk\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\ntkimg = ImageTk.PhotoImage(img) \n```", "```py\n# remove alpha if present\npix1 = pymupdf.Pixmap(pix, 0) if pix.alpha else pix  # PPM does not support transparency\nimgdata = pix1.tobytes(\"ppm\")  # extremely fast!\ntkimg = tkinter.PhotoImage(data = imgdata) \n```", "```py\nfrom PIL import Image, ImageQt\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\nqtimg = ImageQt.ImageQt(img) \n```", "```py\nfrom PyQt5.QtGui import QImage\n\n# set the correct QImage format depending on alpha\nfmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888\nqtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt) \n```", "```py\ntext = page.get_text(opt) \n```", "```py\nareas = page.search_for(\"mupdf\") \n```", "```py\n# append complete doc2 to the end of doc1\ndoc1.insert_pdf(doc2) \n```", "```py\ndoc2 = pymupdf.open()                 # new empty PDF\ndoc2.insert_pdf(doc1, to_page = 9)  # first 10 pages\ndoc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages\ndoc2.save(\"first-and-last-10.pdf\") \n```", "```py\n# append complete doc2 to the end of doc1\ndoc1.insert_pdf(doc2) \n```", "```py\ndoc2 = pymupdf.open()                 # new empty PDF\ndoc2.insert_pdf(doc1, to_page = 9)  # first 10 pages\ndoc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages\ndoc2.save(\"first-and-last-10.pdf\") \n```"]