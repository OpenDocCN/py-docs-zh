["```py\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name!r})\"\n```", "```py\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_name: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy.orm import relationship\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee): ...\n\nclass Engineer(Employee): ...\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee): ...\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nfrom datetime import datetime\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n    start_date: Mapped[datetime] = mapped_column(nullable=True)\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n    start_date: Mapped[datetime] = mapped_column(nullable=True)\n```", "```py\nsqlalchemy.exc.ArgumentError: Column 'start_date' on class Manager conflicts\nwith existing column 'employee.start_date'.  If using Declarative,\nconsider using the use_existing_column parameter of mapped_column() to\nresolve conflicts.\n```", "```py\nfrom sqlalchemy import DateTime\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": type,\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass HasStartDate:\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\nclass Engineer(HasStartDate, Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(HasStartDate, Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    manager_name: Mapped[str] = mapped_column(nullable=True)\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Executive(Employee):\n  \"\"\"An executive of the company\"\"\"\n\n    executive_background: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\nclass Technologist(Employee):\n  \"\"\"An employee who works with technology\"\"\"\n\n    competencies: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\nclass Manager(Executive):\n  \"\"\"a manager\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"manager\"}\n\nclass Principal(Executive):\n  \"\"\"a principal of the company\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"principal\"}\n\nclass Engineer(Technologist):\n  \"\"\"an engineer\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n\nclass SysAdmin(Technologist):\n  \"\"\"a systems administrator\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"sysadmin\"}\n```", "```py\nsession.scalars(select(Technologist)).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.competencies\nFROM  employee\nWHERE  employee.type  IN  (?,  ?)\n[...]  ('engineer',  'sysadmin') \n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = Column(Integer, primary_key=True)\n\n    executives: Mapped[List[Executive]] = relationship()\n    technologists: Mapped[List[Technologist]] = relationship()\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # foreign key to \"company.id\" is added\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n\n    # rest of mapping is the same\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n    }\n\n# Executive, Technologist, Manager, Principal, Engineer, SysAdmin\n# classes from previous example would follow here unchanged\n```", "```py\nsession.scalars(\n    select(Company)\n    .join(Company.technologists)\n    .where(Technologist.competency.ilike(\"%java%\"))\n    .options(selectinload(Company.executives))\n).all()\nSELECT  company.id\nFROM  company  JOIN  employee  ON  company.id  =  employee.company_id  AND  employee.type  IN  (?,  ?)\nWHERE  lower(employee.competencies)  LIKE  lower(?)\n[...]  ('engineer',  'sysadmin',  '%java%')\n\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.executive_background  AS  employee_executive_background\nFROM  employee\nWHERE  employee.company_id  IN  (?)  AND  employee.type  IN  (?,  ?)\n[...]  (1,  'manager',  'principal') \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nsession.scalars(select(Employee)).all()\nSELECT\n  pjoin.id,\n  pjoin.name,\n  pjoin.type,\n  pjoin.manager_data,\n  pjoin.engineer_info\nFROM  (\n  SELECT\n  employee.id  AS  id,\n  employee.name  AS  name,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,\n  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  'employee'  AS  type\n  FROM  employee\n  UNION  ALL\n  SELECT\n  manager.id  AS  id,\n  manager.name  AS  name,\n  manager.manager_data  AS  manager_data,\n  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  'manager'  AS  type\n  FROM  manager\n  UNION  ALL\n  SELECT\n  engineer.id  AS  id,\n  engineer.name  AS  name,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,\n  engineer.engineer_info  AS  engineer_info,\n  'engineer'  AS  type\n  FROM  engineer\n)  AS  pjoin \n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(Base):\n    __abstract__ = True\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n```", "```py\nfrom sqlalchemy.ext.declarative import AbstractConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(AbstractConcreteBase, Base):\n    strict_attrs = True\n\n    name = mapped_column(String(50))\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nBase.registry.configure()\n```", "```py\n>>> stmt = select(Employee).where(Employee.name == \"n1\")\n>>> print(stmt)\nSELECT  pjoin.id,  pjoin.name,  pjoin.type,  pjoin.manager_data,  pjoin.engineer_info\nFROM  (\n  SELECT  engineer.id  AS  id,  engineer.name  AS  name,  engineer.engineer_info  AS  engineer_info,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,  'engineer'  AS  type\n  FROM  engineer\n  UNION  ALL\n  SELECT  manager.id  AS  id,  manager.name  AS  name,  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  manager.manager_data  AS  manager_data,  'manager'  AS  type\n  FROM  manager\n)  AS  pjoin\nWHERE  pjoin.name  =  :name_1 \n```", "```py\nmetadata_obj = Base.metadata\n\nemployees_table = Table(\n    \"employee\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nmanagers_table = Table(\n    \"manager\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"manager_data\", String(50)),\n)\n\nengineers_table = Table(\n    \"engineer\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"engineer_info\", String(50)),\n)\n```", "```py\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"employee\": employees_table,\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n```", "```py\nclass Employee(Base):\n    __table__ = employee_table\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": (\"*\", pjoin),\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```", "```py\nclass Employee:\n    def __init__(self, **kw):\n        for k in kw:\n            setattr(self, k, kw[k])\n\nclass Manager(Employee):\n    pass\n\nclass Engineer(Employee):\n    pass\n\nemployee_mapper = mapper_registry.map_imperatively(\n    Employee,\n    pjoin,\n    with_polymorphic=(\"*\", pjoin),\n    polymorphic_on=pjoin.c.type,\n)\nmanager_mapper = mapper_registry.map_imperatively(\n    Manager,\n    managers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"manager\",\n)\nengineer_mapper = mapper_registry.map_imperatively(\n    Engineer,\n    engineers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"engineer\",\n)\n```", "```py\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n\nclass Employee(Base):\n    __table__ = pjoin\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\")\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\", back_populates=\"company\")\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name!r})\"\n```", "```py\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_name: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy.orm import relationship\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee): ...\n\nclass Engineer(Employee): ...\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee): ...\n```", "```py\nfrom __future__ import annotations\n\nfrom sqlalchemy.orm import relationship\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee): ...\n\nclass Engineer(Employee): ...\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee): ...\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nfrom datetime import datetime\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n    start_date: Mapped[datetime] = mapped_column(nullable=True)\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n    start_date: Mapped[datetime] = mapped_column(nullable=True)\n```", "```py\nsqlalchemy.exc.ArgumentError: Column 'start_date' on class Manager conflicts\nwith existing column 'employee.start_date'.  If using Declarative,\nconsider using the use_existing_column parameter of mapped_column() to\nresolve conflicts.\n```", "```py\nfrom sqlalchemy import DateTime\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": type,\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass HasStartDate:\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\nclass Engineer(HasStartDate, Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(HasStartDate, Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    manager_name: Mapped[str] = mapped_column(nullable=True)\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Executive(Employee):\n  \"\"\"An executive of the company\"\"\"\n\n    executive_background: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\nclass Technologist(Employee):\n  \"\"\"An employee who works with technology\"\"\"\n\n    competencies: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\nclass Manager(Executive):\n  \"\"\"a manager\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"manager\"}\n\nclass Principal(Executive):\n  \"\"\"a principal of the company\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"principal\"}\n\nclass Engineer(Technologist):\n  \"\"\"an engineer\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n\nclass SysAdmin(Technologist):\n  \"\"\"a systems administrator\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"sysadmin\"}\n```", "```py\nsession.scalars(select(Technologist)).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.competencies\nFROM  employee\nWHERE  employee.type  IN  (?,  ?)\n[...]  ('engineer',  'sysadmin') \n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = Column(Integer, primary_key=True)\n\n    executives: Mapped[List[Executive]] = relationship()\n    technologists: Mapped[List[Technologist]] = relationship()\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # foreign key to \"company.id\" is added\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n\n    # rest of mapping is the same\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n    }\n\n# Executive, Technologist, Manager, Principal, Engineer, SysAdmin\n# classes from previous example would follow here unchanged\n```", "```py\nsession.scalars(\n    select(Company)\n    .join(Company.technologists)\n    .where(Technologist.competency.ilike(\"%java%\"))\n    .options(selectinload(Company.executives))\n).all()\nSELECT  company.id\nFROM  company  JOIN  employee  ON  company.id  =  employee.company_id  AND  employee.type  IN  (?,  ?)\nWHERE  lower(employee.competencies)  LIKE  lower(?)\n[...]  ('engineer',  'sysadmin',  '%java%')\n\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.executive_background  AS  employee_executive_background\nFROM  employee\nWHERE  employee.company_id  IN  (?)  AND  employee.type  IN  (?,  ?)\n[...]  (1,  'manager',  'principal') \n```", "```py\nfrom datetime import datetime\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n    start_date: Mapped[datetime] = mapped_column(nullable=True)\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n    start_date: Mapped[datetime] = mapped_column(nullable=True)\n```", "```py\nsqlalchemy.exc.ArgumentError: Column 'start_date' on class Manager conflicts\nwith existing column 'employee.start_date'.  If using Declarative,\nconsider using the use_existing_column parameter of mapped_column() to\nresolve conflicts.\n```", "```py\nfrom sqlalchemy import DateTime\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": type,\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass HasStartDate:\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\nclass Engineer(HasStartDate, Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(HasStartDate, Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Manager(Employee):\n    manager_name: Mapped[str] = mapped_column(nullable=True)\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\nclass Executive(Employee):\n  \"\"\"An executive of the company\"\"\"\n\n    executive_background: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\nclass Technologist(Employee):\n  \"\"\"An employee who works with technology\"\"\"\n\n    competencies: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\nclass Manager(Executive):\n  \"\"\"a manager\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"manager\"}\n\nclass Principal(Executive):\n  \"\"\"a principal of the company\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"principal\"}\n\nclass Engineer(Technologist):\n  \"\"\"an engineer\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n\nclass SysAdmin(Technologist):\n  \"\"\"a systems administrator\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"sysadmin\"}\n```", "```py\nsession.scalars(select(Technologist)).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.competencies\nFROM  employee\nWHERE  employee.type  IN  (?,  ?)\n[...]  ('engineer',  'sysadmin') \n```", "```py\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = Column(Integer, primary_key=True)\n\n    executives: Mapped[List[Executive]] = relationship()\n    technologists: Mapped[List[Technologist]] = relationship()\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # foreign key to \"company.id\" is added\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n\n    # rest of mapping is the same\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n    }\n\n# Executive, Technologist, Manager, Principal, Engineer, SysAdmin\n# classes from previous example would follow here unchanged\n```", "```py\nsession.scalars(\n    select(Company)\n    .join(Company.technologists)\n    .where(Technologist.competency.ilike(\"%java%\"))\n    .options(selectinload(Company.executives))\n).all()\nSELECT  company.id\nFROM  company  JOIN  employee  ON  company.id  =  employee.company_id  AND  employee.type  IN  (?,  ?)\nWHERE  lower(employee.competencies)  LIKE  lower(?)\n[...]  ('engineer',  'sysadmin',  '%java%')\n\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.executive_background  AS  employee_executive_background\nFROM  employee\nWHERE  employee.company_id  IN  (?)  AND  employee.type  IN  (?,  ?)\n[...]  (1,  'manager',  'principal') \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nsession.scalars(select(Employee)).all()\nSELECT\n  pjoin.id,\n  pjoin.name,\n  pjoin.type,\n  pjoin.manager_data,\n  pjoin.engineer_info\nFROM  (\n  SELECT\n  employee.id  AS  id,\n  employee.name  AS  name,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,\n  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  'employee'  AS  type\n  FROM  employee\n  UNION  ALL\n  SELECT\n  manager.id  AS  id,\n  manager.name  AS  name,\n  manager.manager_data  AS  manager_data,\n  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  'manager'  AS  type\n  FROM  manager\n  UNION  ALL\n  SELECT\n  engineer.id  AS  id,\n  engineer.name  AS  name,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,\n  engineer.engineer_info  AS  engineer_info,\n  'engineer'  AS  type\n  FROM  engineer\n)  AS  pjoin \n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(Base):\n    __abstract__ = True\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n```", "```py\nfrom sqlalchemy.ext.declarative import AbstractConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(AbstractConcreteBase, Base):\n    strict_attrs = True\n\n    name = mapped_column(String(50))\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nBase.registry.configure()\n```", "```py\n>>> stmt = select(Employee).where(Employee.name == \"n1\")\n>>> print(stmt)\nSELECT  pjoin.id,  pjoin.name,  pjoin.type,  pjoin.manager_data,  pjoin.engineer_info\nFROM  (\n  SELECT  engineer.id  AS  id,  engineer.name  AS  name,  engineer.engineer_info  AS  engineer_info,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,  'engineer'  AS  type\n  FROM  engineer\n  UNION  ALL\n  SELECT  manager.id  AS  id,  manager.name  AS  name,  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  manager.manager_data  AS  manager_data,  'manager'  AS  type\n  FROM  manager\n)  AS  pjoin\nWHERE  pjoin.name  =  :name_1 \n```", "```py\nmetadata_obj = Base.metadata\n\nemployees_table = Table(\n    \"employee\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nmanagers_table = Table(\n    \"manager\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"manager_data\", String(50)),\n)\n\nengineers_table = Table(\n    \"engineer\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"engineer_info\", String(50)),\n)\n```", "```py\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"employee\": employees_table,\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n```", "```py\nclass Employee(Base):\n    __table__ = employee_table\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": (\"*\", pjoin),\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```", "```py\nclass Employee:\n    def __init__(self, **kw):\n        for k in kw:\n            setattr(self, k, kw[k])\n\nclass Manager(Employee):\n    pass\n\nclass Engineer(Employee):\n    pass\n\nemployee_mapper = mapper_registry.map_imperatively(\n    Employee,\n    pjoin,\n    with_polymorphic=(\"*\", pjoin),\n    polymorphic_on=pjoin.c.type,\n)\nmanager_mapper = mapper_registry.map_imperatively(\n    Manager,\n    managers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"manager\",\n)\nengineer_mapper = mapper_registry.map_imperatively(\n    Engineer,\n    engineers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"engineer\",\n)\n```", "```py\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n\nclass Employee(Base):\n    __table__ = pjoin\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\")\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\", back_populates=\"company\")\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nsession.scalars(select(Employee)).all()\nSELECT\n  pjoin.id,\n  pjoin.name,\n  pjoin.type,\n  pjoin.manager_data,\n  pjoin.engineer_info\nFROM  (\n  SELECT\n  employee.id  AS  id,\n  employee.name  AS  name,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,\n  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  'employee'  AS  type\n  FROM  employee\n  UNION  ALL\n  SELECT\n  manager.id  AS  id,\n  manager.name  AS  name,\n  manager.manager_data  AS  manager_data,\n  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  'manager'  AS  type\n  FROM  manager\n  UNION  ALL\n  SELECT\n  engineer.id  AS  id,\n  engineer.name  AS  name,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,\n  engineer.engineer_info  AS  engineer_info,\n  'engineer'  AS  type\n  FROM  engineer\n)  AS  pjoin \n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(Base):\n    __abstract__ = True\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n```", "```py\nfrom sqlalchemy.ext.declarative import AbstractConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(AbstractConcreteBase, Base):\n    strict_attrs = True\n\n    name = mapped_column(String(50))\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nBase.registry.configure()\n```", "```py\n>>> stmt = select(Employee).where(Employee.name == \"n1\")\n>>> print(stmt)\nSELECT  pjoin.id,  pjoin.name,  pjoin.type,  pjoin.manager_data,  pjoin.engineer_info\nFROM  (\n  SELECT  engineer.id  AS  id,  engineer.name  AS  name,  engineer.engineer_info  AS  engineer_info,\n  CAST(NULL  AS  VARCHAR(40))  AS  manager_data,  'engineer'  AS  type\n  FROM  engineer\n  UNION  ALL\n  SELECT  manager.id  AS  id,  manager.name  AS  name,  CAST(NULL  AS  VARCHAR(40))  AS  engineer_info,\n  manager.manager_data  AS  manager_data,  'manager'  AS  type\n  FROM  manager\n)  AS  pjoin\nWHERE  pjoin.name  =  :name_1 \n```", "```py\nmetadata_obj = Base.metadata\n\nemployees_table = Table(\n    \"employee\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nmanagers_table = Table(\n    \"manager\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"manager_data\", String(50)),\n)\n\nengineers_table = Table(\n    \"engineer\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"engineer_info\", String(50)),\n)\n```", "```py\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"employee\": employees_table,\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n```", "```py\nclass Employee(Base):\n    __table__ = employee_table\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": (\"*\", pjoin),\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```", "```py\nclass Employee:\n    def __init__(self, **kw):\n        for k in kw:\n            setattr(self, k, kw[k])\n\nclass Manager(Employee):\n    pass\n\nclass Engineer(Employee):\n    pass\n\nemployee_mapper = mapper_registry.map_imperatively(\n    Employee,\n    pjoin,\n    with_polymorphic=(\"*\", pjoin),\n    polymorphic_on=pjoin.c.type,\n)\nmanager_mapper = mapper_registry.map_imperatively(\n    Manager,\n    managers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"manager\",\n)\nengineer_mapper = mapper_registry.map_imperatively(\n    Engineer,\n    engineers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"engineer\",\n)\n```", "```py\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n\nclass Employee(Base):\n    __table__ = pjoin\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\")\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\", back_populates=\"company\")\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```"]