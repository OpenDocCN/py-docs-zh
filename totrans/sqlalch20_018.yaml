- en: Declarative Mapping Styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/declarative_styles.html](https://docs.sqlalchemy.org/en/20/orm/declarative_styles.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As introduced at [Declarative Mapping](mapping_styles.html#orm-declarative-mapping),
    the **Declarative Mapping** is the typical way that mappings are constructed in
    modern SQLAlchemy. This section will provide an overview of forms that may be
    used for Declarative mapper configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '## Using a Declarative Base Class'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common approach is to generate a “Declarative Base” class by subclassing
    the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The Declarative Base class may also be created given an existing [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") by assigning it as a class variable named `registry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the declarative base class, new mapped classes are declared as subclasses
    of the base:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Above, the `Base` class serves as a base for new classes that are to be mapped,
    as above new mapped classes `User` and `Address` are constructed.
  prefs: []
  type: TYPE_NORMAL
- en: For each subclass constructed, the body of the class then follows the declarative
    mapping approach which defines both a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object behind the scenes which comprise a full mapping.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table Configuration with Declarative](declarative_tables.html) - describes
    how to specify the components of the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be generated, including notes and options on the
    use of the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    construct and how it interacts with the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation type'
  prefs: []
  type: TYPE_NORMAL
- en: '[Mapper Configuration with Declarative](declarative_config.html) - describes
    all other aspects of ORM mapper configuration within Declarative including [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration, SQL expressions and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") parameters  ## Declarative Mapping using a Decorator
    (no declarative base)'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to using the “declarative base” class is to apply declarative
    mapping to a class explicitly, using either an imperative technique similar to
    that of a “classical” mapping, or more succinctly by using a decorator. The [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") function is a class decorator that can be applied
    to any Python class with no hierarchy in place. The Python class otherwise is
    configured in declarative style normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below sets up the identical mapping as seen in the previous section,
    using the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator rather than using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the above style, the mapping of a particular class will **only**
    proceed if the decorator is applied to that class directly. For inheritance mappings
    (described in detail at [Mapping Class Inheritance Hierarchies](inheritance.html)),
    the decorator should be applied to each subclass that is to be mapped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Both the [declarative table](declarative_tables.html#orm-declarative-table)
    and [imperative table](declarative_tables.html#orm-imperative-table-configuration)
    table configuration styles may be used with either the Declarative Base or decorator
    styles of Declarative mapping.
  prefs: []
  type: TYPE_NORMAL
- en: 'The decorator form of mapping is useful when combining a SQLAlchemy declarative
    mapping with other class instrumentation systems such as [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    and [attrs](https://pypi.org/project/attrs/), though note that SQLAlchemy 2.0
    now features dataclasses integration with Declarative Base classes as well.  ##
    Using a Declarative Base Class'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common approach is to generate a “Declarative Base” class by subclassing
    the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase "sqlalchemy.orm.DeclarativeBase")
    superclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The Declarative Base class may also be created given an existing [`registry`](mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") by assigning it as a class variable named `registry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: The [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass supersedes the use of the [`declarative_base()`](mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") function and [`registry.generate_base()`](mapping_api.html#sqlalchemy.orm.registry.generate_base
    "sqlalchemy.orm.registry.generate_base") methods; the superclass approach integrates
    with [**PEP 484**](https://peps.python.org/pep-0484/) tools without the use of
    plugins. See [ORM Declarative Models](../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)
    for migration notes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the declarative base class, new mapped classes are declared as subclasses
    of the base:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Above, the `Base` class serves as a base for new classes that are to be mapped,
    as above new mapped classes `User` and `Address` are constructed.
  prefs: []
  type: TYPE_NORMAL
- en: For each subclass constructed, the body of the class then follows the declarative
    mapping approach which defines both a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object behind the scenes which comprise a full mapping.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table Configuration with Declarative](declarative_tables.html) - describes
    how to specify the components of the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to be generated, including notes and options on the
    use of the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    construct and how it interacts with the [`Mapped`](internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation type'
  prefs: []
  type: TYPE_NORMAL
- en: '[Mapper Configuration with Declarative](declarative_config.html) - describes
    all other aspects of ORM mapper configuration within Declarative including [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration, SQL expressions and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '## Declarative Mapping using a Decorator (no declarative base)'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to using the “declarative base” class is to apply declarative
    mapping to a class explicitly, using either an imperative technique similar to
    that of a “classical” mapping, or more succinctly by using a decorator. The [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") function is a class decorator that can be applied
    to any Python class with no hierarchy in place. The Python class otherwise is
    configured in declarative style normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below sets up the identical mapping as seen in the previous section,
    using the [`registry.mapped()`](mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator rather than using the [`DeclarativeBase`](mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") superclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the above style, the mapping of a particular class will **only**
    proceed if the decorator is applied to that class directly. For inheritance mappings
    (described in detail at [Mapping Class Inheritance Hierarchies](inheritance.html)),
    the decorator should be applied to each subclass that is to be mapped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Both the [declarative table](declarative_tables.html#orm-declarative-table)
    and [imperative table](declarative_tables.html#orm-imperative-table-configuration)
    table configuration styles may be used with either the Declarative Base or decorator
    styles of Declarative mapping.
  prefs: []
  type: TYPE_NORMAL
- en: The decorator form of mapping is useful when combining a SQLAlchemy declarative
    mapping with other class instrumentation systems such as [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    and [attrs](https://pypi.org/project/attrs/), though note that SQLAlchemy 2.0
    now features dataclasses integration with Declarative Base classes as well.
  prefs: []
  type: TYPE_NORMAL
