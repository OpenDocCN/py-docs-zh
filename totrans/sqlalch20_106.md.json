["```py\nclass sqlalchemy.engine.BindTyping\n```", "```py\nattribute NONE = 1\n```", "```py\nattribute RENDER_CASTS = 3\n```", "```py\nattribute SETINPUTSIZES = 2\n```", "```py\nclass sqlalchemy.engine.Compiled\n```", "```py\nmethod __init__(dialect: Dialect, statement: ClauseElement | None, schema_translate_map: SchemaTranslateMapType | None = None, render_schema_translate: bool = False, compile_kwargs: Mapping[str, Any] = {})\n```", "```py\nattribute cache_key: CacheKey | None = None\n```", "```py\nattribute compile_state: CompileState | None = None\n```", "```py\nmethod construct_params(params: _CoreSingleExecuteParams | None = None, extracted_parameters: Sequence[BindParameter[Any]] | None = None, escape_names: bool = True) \u2192 _MutableCoreSingleExecuteParams | None\n```", "```py\nattribute dml_compile_state: CompileState | None = None\n```", "```py\nattribute execution_options: _ExecuteOptions = {}\n```", "```py\nattribute params\n```", "```py\nattribute sql_compiler\n```", "```py\nattribute state: CompilerState\n```", "```py\nattribute statement: ClauseElement | None = None\n```", "```py\nattribute string: str = ''\n```", "```py\nclass sqlalchemy.engine.interfaces.DBAPIConnection\n```", "```py\nattribute autocommit: bool\n```", "```py\nmethod close() \u2192 None\n```", "```py\nmethod commit() \u2192 None\n```", "```py\nmethod cursor() \u2192 DBAPICursor\n```", "```py\nmethod rollback() \u2192 None\n```", "```py\nclass sqlalchemy.engine.interfaces.DBAPICursor\n```", "```py\nattribute arraysize: int\n```", "```py\nmethod callproc(procname: str, parameters: Sequence[Any] = Ellipsis) \u2192 Any\n```", "```py\nmethod close() \u2192 None\n```", "```py\nattribute description\n```", "```py\nmethod execute(operation: Any, parameters: Sequence[Any] | Mapping[str, Any] | None = None) \u2192 Any\n```", "```py\nmethod executemany(operation: Any, parameters: Sequence[Sequence[Any]] | Sequence[Mapping[str, Any]]) \u2192 Any\n```", "```py\nmethod fetchall() \u2192 Sequence[Any]\n```", "```py\nmethod fetchmany(size: int = Ellipsis) \u2192 Sequence[Any]\n```", "```py\nmethod fetchone() \u2192 Any | None\n```", "```py\nattribute lastrowid: int\n```", "```py\nmethod nextset() \u2192 bool | None\n```", "```py\nattribute rowcount\n```", "```py\nmethod setinputsizes(sizes: Sequence[Any]) \u2192 None\n```", "```py\nmethod setoutputsize(size: Any, column: Any) \u2192 None\n```", "```py\nclass sqlalchemy.engine.interfaces.DBAPIType\n```", "```py\nclass sqlalchemy.sql.compiler.DDLCompiler\n```", "```py\nmethod __init__(dialect: Dialect, statement: ClauseElement | None, schema_translate_map: SchemaTranslateMapType | None = None, render_schema_translate: bool = False, compile_kwargs: Mapping[str, Any] = {})\n```", "```py\nattribute cache_key: CacheKey | None = None\n```", "```py\nattribute compile_state: CompileState | None = None\n```", "```py\nmethod construct_params(params: _CoreSingleExecuteParams | None = None, extracted_parameters: Sequence[BindParameter[Any]] | None = None, escape_names: bool = True) \u2192 _MutableCoreSingleExecuteParams | None\n```", "```py\nmethod define_constraint_remote_table(constraint, table, preparer)\n```", "```py\nattribute dml_compile_state: CompileState | None = None\n```", "```py\nattribute execution_options: _ExecuteOptions = {}\n```", "```py\nattribute params\n```", "```py\nattribute sql_compiler\n```", "```py\nattribute state: CompilerState\n```", "```py\nattribute statement: ClauseElement | None = None\n```", "```py\nattribute string: str = ''\n```", "```py\nclass sqlalchemy.engine.default.DefaultDialect\n```", "```py\nattribute bind_typing = 1\n```", "```py\nattribute colspecs: MutableMapping[Type[TypeEngine[Any]], Type[TypeEngine[Any]]] = {}\n```", "```py\nmethod connect(*cargs, **cparams)\n```", "```py\ndef connect(self, *cargs, **cparams):\n    return self.dbapi.connect(*cargs, **cparams)\n```", "```py\nattribute construct_arguments: List[Tuple[Type[SchemaItem | ClauseElement], Mapping[str, Any]]] | None = None\n```", "```py\nconstruct_arguments = [\n    (schema.Index, {\n        \"using\": False,\n        \"where\": None,\n        \"ops\": None\n    })\n]\n```", "```py\nmethod create_connect_args(url)\n```", "```py\ndef create_connect_args(self, url):\n    opts = url.translate_connect_args()\n    opts.update(url.query)\n    return ([], opts)\n```", "```py\nmethod create_xid()\n```", "```py\nattribute cte_follows_insert: bool = False\n```", "```py\nattribute dbapi: ModuleType | None\n```", "```py\nattribute dbapi_exception_translation_map: Mapping[str, str] = {}\n```", "```py\nattribute ddl_compiler\n```", "```py\nattribute default_isolation_level: IsolationLevel | None\n```", "```py\nattribute default_metavalue_token: str = 'DEFAULT'\n```", "```py\nattribute default_schema_name: str | None = None\n```", "```py\nattribute default_sequence_base: int = 1\n```", "```py\nattribute delete_executemany_returning: bool = False\n```", "```py\nattribute delete_returning: bool = False\n```", "```py\nattribute delete_returning_multifrom: bool = False\n```", "```py\nmethod denormalize_name(name)\n```", "```py\nattribute div_is_floordiv: bool = True\n```", "```py\nmethod do_begin(dbapi_connection)\n```", "```py\nmethod do_begin_twophase(connection: Connection, xid: Any) \u2192 None\n```", "```py\nmethod do_close(dbapi_connection)\n```", "```py\nmethod do_commit(dbapi_connection)\n```", "```py\nmethod do_commit_twophase(connection: Connection, xid: Any, is_prepared: bool = True, recover: bool = False) \u2192 None\n```", "```py\nmethod do_execute(cursor, statement, parameters, context=None)\n```", "```py\nmethod do_execute_no_params(cursor, statement, context=None)\n```", "```py\nmethod do_executemany(cursor, statement, parameters, context=None)\n```", "```py\nmethod do_ping(dbapi_connection: DBAPIConnection) \u2192 bool\n```", "```py\nmethod do_prepare_twophase(connection: Connection, xid: Any) \u2192 None\n```", "```py\nmethod do_recover_twophase(connection: Connection) \u2192 List[Any]\n```", "```py\nmethod do_release_savepoint(connection, name)\n```", "```py\nmethod do_rollback(dbapi_connection)\n```", "```py\nmethod do_rollback_to_savepoint(connection, name)\n```", "```py\nmethod do_rollback_twophase(connection: Connection, xid: Any, is_prepared: bool = True, recover: bool = False) \u2192 None\n```", "```py\nmethod do_savepoint(connection, name)\n```", "```py\nmethod do_set_input_sizes(cursor: DBAPICursor, list_of_tuples: _GenericSetInputSizesType, context: ExecutionContext) \u2192 Any\n```", "```py\nmethod do_terminate(dbapi_connection)\n```", "```py\nattribute driver: str\n```", "```py\nattribute engine_config_types: Mapping[str, Any] = {'echo': <function bool_or_str.<locals>.bool_or_value>, 'echo_pool': <function bool_or_str.<locals>.bool_or_value>, 'future': <function asbool>, 'max_overflow': <function asint>, 'pool_recycle': <function asint>, 'pool_size': <function asint>, 'pool_timeout': <function asint>}\n```", "```py\nclassmethod engine_created(engine: Engine) \u2192 None\n```", "```py\nattribute exclude_set_input_sizes: Set[Any] | None = None\n```", "```py\nattribute execute_sequence_format\n```", "```py\nattribute execution_ctx_cls\n```", "```py\nattribute favor_returning_over_lastrowid: bool = False\n```", "```py\nattribute full_returning\n```", "```py\nclassmethod get_async_dialect_cls(url: URL) \u2192 Type[Dialect]\n```", "```py\nmethod get_check_constraints(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedCheckConstraint]\n```", "```py\nmethod get_columns(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedColumn]\n```", "```py\nmethod get_default_isolation_level(dbapi_conn)\n```", "```py\nclassmethod get_dialect_cls(url: URL) \u2192 Type[Dialect]\n```", "```py\nmethod get_dialect_pool_class(url: URL) \u2192 Type[Pool]\n```", "```py\nmethod get_driver_connection(connection)\n```", "```py\nmethod get_foreign_keys(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedForeignKeyConstraint]\n```", "```py\nmethod get_indexes(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedIndex]\n```", "```py\nmethod get_isolation_level(dbapi_connection: DBAPIConnection) \u2192 Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']\n```", "```py\nmethod get_isolation_level_values(dbapi_conn: DBAPIConnection) \u2192 List[Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']]\n```", "```py\nmethod get_materialized_view_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_multi_check_constraints(connection, **kw)\n```", "```py\nmethod get_multi_columns(connection, **kw)\n```", "```py\nmethod get_multi_foreign_keys(connection, **kw)\n```", "```py\nmethod get_multi_indexes(connection, **kw)\n```", "```py\nmethod get_multi_pk_constraint(connection, **kw)\n```", "```py\nmethod get_multi_table_comment(connection, **kw)\n```", "```py\nmethod get_multi_table_options(connection, **kw)\n```", "```py\nmethod get_multi_unique_constraints(connection, **kw)\n```", "```py\nmethod get_pk_constraint(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 ReflectedPrimaryKeyConstraint\n```", "```py\nmethod get_schema_names(connection: Connection, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_sequence_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_table_comment(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 ReflectedTableComment\n```", "```py\nmethod get_table_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_table_options(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 Dict[str, Any]\n```", "```py\nmethod get_temp_table_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_temp_view_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_unique_constraints(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedUniqueConstraint]\n```", "```py\nmethod get_view_definition(connection: Connection, view_name: str, schema: str | None = None, **kw: Any) \u2192 str\n```", "```py\nmethod get_view_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod has_index(connection, table_name, index_name, schema=None, **kw)\n```", "```py\nmethod has_schema(connection: Connection, schema_name: str, **kw: Any) \u2192 bool\n```", "```py\nmethod has_sequence(connection: Connection, sequence_name: str, schema: str | None = None, **kw: Any) \u2192 bool\n```", "```py\nmethod has_table(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 bool\n```", "```py\nattribute has_terminate: bool = False\n```", "```py\nattribute identifier_preparer: IdentifierPreparer\n```", "```py\nclassmethod import_dbapi() \u2192 module\n```", "```py\nattribute include_set_input_sizes: Set[Any] | None = None\n```", "```py\nmethod initialize(connection)\n```", "```py\nattribute inline_comments: bool = False\n```", "```py\nattribute insert_executemany_returning: bool\n```", "```py\nattribute insert_executemany_returning_sort_by_parameter_order: bool\n```", "```py\nattribute insert_returning: bool = False\n```", "```py\nattribute insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts = symbol('NOT_SUPPORTED')\n```", "```py\nattribute insertmanyvalues_max_parameters: int = 32700\n```", "```py\nattribute insertmanyvalues_page_size: int = 1000\n```", "```py\nattribute is_async: bool = False\n```", "```py\nmethod is_disconnect(e, connection, cursor)\n```", "```py\nattribute label_length: int | None\n```", "```py\nclassmethod load_provisioning()\n```", "```py\n@classmethod\ndef load_provisioning(cls):\n    __import__(\"mydialect.provision\")\n```", "```py\n@classmethod\ndef load_provisioning(cls):\n    package = \".\".join(cls.__module__.split(\".\")[0:-1])\n    try:\n        __import__(package + \".provision\")\n    except ImportError:\n        pass\n```", "```py\nattribute loaded_dbapi\n```", "```py\nattribute max_identifier_length: int = 9999\n```", "```py\nattribute name: str = 'default'\n```", "```py\nmethod normalize_name(name)\n```", "```py\nmethod on_connect()\n```", "```py\nclass MyDialect(default.DefaultDialect):\n    # ...\n\n    def on_connect(self):\n        def do_on_connect(connection):\n            connection.execute(\"SET SPECIAL FLAGS etc\")\n\n        return do_on_connect\n```", "```py\nmethod on_connect_url(url: URL) \u2192 Callable[[Any], Any] | None\n```", "```py\nclass MyDialect(default.DefaultDialect):\n    # ...\n\n    def on_connect_url(self, url):\n        def do_on_connect(connection):\n            connection.execute(\"SET SPECIAL FLAGS etc\")\n\n        return do_on_connect\n```", "```py\nattribute paramstyle: str\n```", "```py\nattribute positional: bool\n```", "```py\nattribute preexecute_autoincrement_sequences: bool = False\n```", "```py\nattribute preparer\n```", "```py\nattribute reflection_options: Sequence[str] = ()\n```", "```py\nmethod reset_isolation_level(dbapi_conn)\n```", "```py\nattribute returns_native_bytes: bool = False\n```", "```py\nattribute sequences_optional: bool = False\n```", "```py\nattribute server_side_cursors: bool = False\n```", "```py\nattribute server_version_info: Tuple[Any, ...] | None = None\n```", "```py\nmethod set_connection_execution_options(connection: Connection, opts: Mapping[str, Any]) \u2192 None\n```", "```py\nmethod set_engine_execution_options(engine: Engine, opts: Mapping[str, Any]) \u2192 None\n```", "```py\nmethod set_isolation_level(dbapi_connection: DBAPIConnection, level: Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']) \u2192 None\n```", "```py\nattribute statement_compiler\n```", "```py\nattribute supports_alter: bool = True\n```", "```py\nattribute supports_comments: bool = False\n```", "```py\nattribute supports_constraint_comments: bool = False\n```", "```py\nattribute supports_default_metavalue: bool = False\n```", "```py\nattribute supports_default_values: bool = False\n```", "```py\nattribute supports_empty_insert: bool = True\n```", "```py\nattribute supports_identity_columns: bool = False\n```", "```py\nattribute supports_multivalues_insert: bool = False\n```", "```py\nattribute supports_native_boolean: bool = False\n```", "```py\nattribute supports_native_decimal: bool = False\n```", "```py\nattribute supports_native_enum: bool = False\n```", "```py\nattribute supports_native_uuid: bool = False\n```", "```py\nattribute supports_sane_multi_rowcount: bool = True\n```", "```py\nattribute supports_sane_rowcount: bool = True\n```", "```py\nattribute supports_sane_rowcount_returning\n```", "```py\nattribute supports_sequences: bool = False\n```", "```py\nattribute supports_server_side_cursors: bool = False\n```", "```py\nattribute supports_simple_order_by_label: bool = True\n```", "```py\nattribute supports_statement_cache: bool = True\n```", "```py\nattribute tuple_in_values: bool = False\n```", "```py\nattribute type_compiler: Any\n```", "```py\nattribute type_compiler_cls\n```", "```py\nattribute type_compiler_instance: TypeCompiler\n```", "```py\nmethod type_descriptor(typeobj)\n```", "```py\nattribute update_executemany_returning: bool = False\n```", "```py\nattribute update_returning: bool = False\n```", "```py\nattribute update_returning_multifrom: bool = False\n```", "```py\nattribute use_insertmanyvalues: bool = False\n```", "```py\nattribute use_insertmanyvalues_wo_returning: bool = False\n```", "```py\nclass sqlalchemy.engine.Dialect\n```", "```py\nattribute bind_typing = 1\n```", "```py\nattribute colspecs: MutableMapping[Type[TypeEngine[Any]], Type[TypeEngine[Any]]]\n```", "```py\nmethod connect(*cargs: Any, **cparams: Any) \u2192 DBAPIConnection\n```", "```py\ndef connect(self, *cargs, **cparams):\n    return self.dbapi.connect(*cargs, **cparams)\n```", "```py\nattribute construct_arguments: List[Tuple[Type[SchemaItem | ClauseElement], Mapping[str, Any]]] | None = None\n```", "```py\nconstruct_arguments = [\n    (schema.Index, {\n        \"using\": False,\n        \"where\": None,\n        \"ops\": None\n    })\n]\n```", "```py\nmethod create_connect_args(url: URL) \u2192 ConnectArgsType\n```", "```py\ndef create_connect_args(self, url):\n    opts = url.translate_connect_args()\n    opts.update(url.query)\n    return ([], opts)\n```", "```py\nmethod create_xid() \u2192 Any\n```", "```py\nattribute cte_follows_insert: bool\n```", "```py\nattribute dbapi: ModuleType | None\n```", "```py\nattribute dbapi_exception_translation_map: Mapping[str, str] = {}\n```", "```py\nattribute ddl_compiler: Type[DDLCompiler]\n```", "```py\nattribute default_isolation_level: IsolationLevel | None\n```", "```py\nattribute default_metavalue_token: str = 'DEFAULT'\n```", "```py\nattribute default_schema_name: str | None\n```", "```py\nattribute default_sequence_base: int\n```", "```py\nattribute delete_executemany_returning: bool\n```", "```py\nattribute delete_returning: bool\n```", "```py\nattribute delete_returning_multifrom: bool\n```", "```py\nmethod denormalize_name(name: str) \u2192 str\n```", "```py\nattribute div_is_floordiv: bool\n```", "```py\nmethod do_begin(dbapi_connection: PoolProxiedConnection) \u2192 None\n```", "```py\nmethod do_begin_twophase(connection: Connection, xid: Any) \u2192 None\n```", "```py\nmethod do_close(dbapi_connection: DBAPIConnection) \u2192 None\n```", "```py\nmethod do_commit(dbapi_connection: PoolProxiedConnection) \u2192 None\n```", "```py\nmethod do_commit_twophase(connection: Connection, xid: Any, is_prepared: bool = True, recover: bool = False) \u2192 None\n```", "```py\nmethod do_execute(cursor: DBAPICursor, statement: str, parameters: Sequence[Any] | Mapping[str, Any] | None, context: ExecutionContext | None = None) \u2192 None\n```", "```py\nmethod do_execute_no_params(cursor: DBAPICursor, statement: str, context: ExecutionContext | None = None) \u2192 None\n```", "```py\nmethod do_executemany(cursor: DBAPICursor, statement: str, parameters: Sequence[Sequence[Any]] | Sequence[Mapping[str, Any]], context: ExecutionContext | None = None) \u2192 None\n```", "```py\nmethod do_ping(dbapi_connection: DBAPIConnection) \u2192 bool\n```", "```py\nmethod do_prepare_twophase(connection: Connection, xid: Any) \u2192 None\n```", "```py\nmethod do_recover_twophase(connection: Connection) \u2192 List[Any]\n```", "```py\nmethod do_release_savepoint(connection: Connection, name: str) \u2192 None\n```", "```py\nmethod do_rollback(dbapi_connection: PoolProxiedConnection) \u2192 None\n```", "```py\nmethod do_rollback_to_savepoint(connection: Connection, name: str) \u2192 None\n```", "```py\nmethod do_rollback_twophase(connection: Connection, xid: Any, is_prepared: bool = True, recover: bool = False) \u2192 None\n```", "```py\nmethod do_savepoint(connection: Connection, name: str) \u2192 None\n```", "```py\nmethod do_set_input_sizes(cursor: DBAPICursor, list_of_tuples: _GenericSetInputSizesType, context: ExecutionContext) \u2192 Any\n```", "```py\nmethod do_terminate(dbapi_connection: DBAPIConnection) \u2192 None\n```", "```py\nattribute driver: str\n```", "```py\nattribute engine_config_types: Mapping[str, Any]\n```", "```py\nclassmethod engine_created(engine: Engine) \u2192 None\n```", "```py\nattribute exclude_set_input_sizes: Set[Any] | None\n```", "```py\nattribute execute_sequence_format: Type[Tuple[Any, ...]] | Type[Tuple[List[Any]]]\n```", "```py\nattribute execution_ctx_cls: Type[ExecutionContext]\n```", "```py\nattribute favor_returning_over_lastrowid: bool\n```", "```py\nclassmethod get_async_dialect_cls(url: URL) \u2192 Type[Dialect]\n```", "```py\nmethod get_check_constraints(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedCheckConstraint]\n```", "```py\nmethod get_columns(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedColumn]\n```", "```py\nmethod get_default_isolation_level(dbapi_conn: DBAPIConnection) \u2192 Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']\n```", "```py\nclassmethod get_dialect_cls(url: URL) \u2192 Type[Dialect]\n```", "```py\nmethod get_dialect_pool_class(url: URL) \u2192 Type[Pool]\n```", "```py\nmethod get_driver_connection(connection: DBAPIConnection) \u2192 Any\n```", "```py\nmethod get_foreign_keys(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedForeignKeyConstraint]\n```", "```py\nmethod get_indexes(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedIndex]\n```", "```py\nmethod get_isolation_level(dbapi_connection: DBAPIConnection) \u2192 Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']\n```", "```py\nmethod get_isolation_level_values(dbapi_conn: DBAPIConnection) \u2192 List[Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']]\n```", "```py\nmethod get_materialized_view_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_multi_check_constraints(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, List[ReflectedCheckConstraint]]]\n```", "```py\nmethod get_multi_columns(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, List[ReflectedColumn]]]\n```", "```py\nmethod get_multi_foreign_keys(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, List[ReflectedForeignKeyConstraint]]]\n```", "```py\nmethod get_multi_indexes(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, List[ReflectedIndex]]]\n```", "```py\nmethod get_multi_pk_constraint(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, ReflectedPrimaryKeyConstraint]]\n```", "```py\nmethod get_multi_table_comment(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, ReflectedTableComment]]\n```", "```py\nmethod get_multi_table_options(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, Dict[str, Any]]]\n```", "```py\nmethod get_multi_unique_constraints(connection: Connection, schema: str | None = None, filter_names: Collection[str] | None = None, **kw: Any) \u2192 Iterable[Tuple[TableKey, List[ReflectedUniqueConstraint]]]\n```", "```py\nmethod get_pk_constraint(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 ReflectedPrimaryKeyConstraint\n```", "```py\nmethod get_schema_names(connection: Connection, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_sequence_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_table_comment(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 ReflectedTableComment\n```", "```py\nmethod get_table_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_table_options(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 Dict[str, Any]\n```", "```py\nmethod get_temp_table_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_temp_view_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod get_unique_constraints(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 List[ReflectedUniqueConstraint]\n```", "```py\nmethod get_view_definition(connection: Connection, view_name: str, schema: str | None = None, **kw: Any) \u2192 str\n```", "```py\nmethod get_view_names(connection: Connection, schema: str | None = None, **kw: Any) \u2192 List[str]\n```", "```py\nmethod has_index(connection: Connection, table_name: str, index_name: str, schema: str | None = None, **kw: Any) \u2192 bool\n```", "```py\nmethod has_schema(connection: Connection, schema_name: str, **kw: Any) \u2192 bool\n```", "```py\nmethod has_sequence(connection: Connection, sequence_name: str, schema: str | None = None, **kw: Any) \u2192 bool\n```", "```py\nmethod has_table(connection: Connection, table_name: str, schema: str | None = None, **kw: Any) \u2192 bool\n```", "```py\nattribute has_terminate: bool\n```", "```py\nattribute identifier_preparer: IdentifierPreparer\n```", "```py\nclassmethod import_dbapi() \u2192 module\n```", "```py\nattribute include_set_input_sizes: Set[Any] | None\n```", "```py\nmethod initialize(connection: Connection) \u2192 None\n```", "```py\nattribute inline_comments: bool\n```", "```py\nattribute insert_executemany_returning: bool\n```", "```py\nattribute insert_executemany_returning_sort_by_parameter_order: bool\n```", "```py\nattribute insert_returning: bool\n```", "```py\nattribute insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts\n```", "```py\nattribute insertmanyvalues_max_parameters: int\n```", "```py\nattribute insertmanyvalues_page_size: int\n```", "```py\nattribute is_async: bool\n```", "```py\nmethod is_disconnect(e: Exception, connection: PoolProxiedConnection | DBAPIConnection | None, cursor: DBAPICursor | None) \u2192 bool\n```", "```py\nattribute label_length: int | None\n```", "```py\nclassmethod load_provisioning() \u2192 None\n```", "```py\n@classmethod\ndef load_provisioning(cls):\n    __import__(\"mydialect.provision\")\n```", "```py\n@classmethod\ndef load_provisioning(cls):\n    package = \".\".join(cls.__module__.split(\".\")[0:-1])\n    try:\n        __import__(package + \".provision\")\n    except ImportError:\n        pass\n```", "```py\nattribute loaded_dbapi\n```", "```py\nattribute max_identifier_length: int\n```", "```py\nattribute name: str\n```", "```py\nmethod normalize_name(name: str) \u2192 str\n```", "```py\nmethod on_connect() \u2192 Callable[[Any], Any] | None\n```", "```py\nclass MyDialect(default.DefaultDialect):\n    # ...\n\n    def on_connect(self):\n        def do_on_connect(connection):\n            connection.execute(\"SET SPECIAL FLAGS etc\")\n\n        return do_on_connect\n```", "```py\nmethod on_connect_url(url: URL) \u2192 Callable[[Any], Any] | None\n```", "```py\nclass MyDialect(default.DefaultDialect):\n    # ...\n\n    def on_connect_url(self, url):\n        def do_on_connect(connection):\n            connection.execute(\"SET SPECIAL FLAGS etc\")\n\n        return do_on_connect\n```", "```py\nattribute paramstyle: str\n```", "```py\nattribute positional: bool\n```", "```py\nattribute preexecute_autoincrement_sequences: bool\n```", "```py\nattribute preparer: Type[IdentifierPreparer]\n```", "```py\nattribute reflection_options: Sequence[str] = ()\n```", "```py\nmethod reset_isolation_level(dbapi_connection: DBAPIConnection) \u2192 None\n```", "```py\nattribute returns_native_bytes: bool\n```", "```py\nattribute sequences_optional: bool\n```", "```py\nattribute server_side_cursors: bool\n```", "```py\nattribute server_version_info: Tuple[Any, ...] | None\n```", "```py\nmethod set_connection_execution_options(connection: Connection, opts: CoreExecuteOptionsParameter) \u2192 None\n```", "```py\nmethod set_engine_execution_options(engine: Engine, opts: CoreExecuteOptionsParameter) \u2192 None\n```", "```py\nmethod set_isolation_level(dbapi_connection: DBAPIConnection, level: Literal['SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED', 'AUTOCOMMIT']) \u2192 None\n```", "```py\nattribute statement_compiler: Type[SQLCompiler]\n```", "```py\nattribute supports_alter: bool\n```", "```py\nattribute supports_comments: bool\n```", "```py\nattribute supports_constraint_comments: bool\n```", "```py\nattribute supports_default_metavalue: bool\n```", "```py\nattribute supports_default_values: bool\n```", "```py\nattribute supports_empty_insert: bool\n```", "```py\nattribute supports_identity_columns: bool\n```", "```py\nattribute supports_multivalues_insert: bool\n```", "```py\nattribute supports_native_boolean: bool\n```", "```py\nattribute supports_native_decimal: bool\n```", "```py\nattribute supports_native_enum: bool\n```", "```py\nattribute supports_native_uuid: bool\n```", "```py\nattribute supports_sane_multi_rowcount: bool\n```", "```py\nattribute supports_sane_rowcount: bool\n```", "```py\nattribute supports_sequences: bool\n```", "```py\nattribute supports_server_side_cursors: bool\n```", "```py\nattribute supports_simple_order_by_label: bool\n```", "```py\nattribute supports_statement_cache: bool = True\n```", "```py\nattribute tuple_in_values: bool\n```", "```py\nattribute type_compiler: Any\n```", "```py\nattribute type_compiler_cls: ClassVar[Type[TypeCompiler]]\n```", "```py\nattribute type_compiler_instance: TypeCompiler\n```", "```py\nclassmethod type_descriptor(typeobj: TypeEngine[_T]) \u2192 TypeEngine[_T]\n```", "```py\nattribute update_executemany_returning: bool\n```", "```py\nattribute update_returning: bool\n```", "```py\nattribute update_returning_multifrom: bool\n```", "```py\nattribute use_insertmanyvalues: bool\n```", "```py\nattribute use_insertmanyvalues_wo_returning: bool\n```", "```py\nclass sqlalchemy.engine.default.DefaultExecutionContext\n```", "```py\nattribute compiled: Compiled | None = None\n```", "```py\nattribute connection: Connection\n```", "```py\nmethod create_cursor()\n```", "```py\nattribute current_parameters: _CoreSingleExecuteParams | None = None\n```", "```py\nattribute cursor: DBAPICursor\n```", "```py\nattribute dialect: Dialect\n```", "```py\nattribute engine: Engine\n```", "```py\nattribute execute_style: ExecuteStyle = 0\n```", "```py\nattribute executemany: bool\n```", "```py\nattribute execution_options: _ExecuteOptions = {}\n```", "```py\nmethod fetchall_for_returning(cursor)\n```", "```py\nmethod get_current_parameters(isolate_multiinsert_groups=True)\n```", "```py\nmethod get_lastrowid()\n```", "```py\nmethod get_out_parameter_values(names)\n```", "```py\nmethod get_result_processor(type_, colname, coltype)\n```", "```py\nmethod handle_dbapi_exception(e)\n```", "```py\nattribute invoked_statement: Executable | None = None\n```", "```py\nattribute isinsert: bool = False\n```", "```py\nattribute isupdate: bool = False\n```", "```py\nmethod lastrow_has_defaults()\n```", "```py\nattribute no_parameters: bool\n```", "```py\nattribute parameters: _DBAPIMultiExecuteParams\n```", "```py\nmethod post_exec()\n```", "```py\nattribute postfetch_cols: util.generic_fn_descriptor[Sequence[Column[Any]] | None]\n```", "```py\nmethod pre_exec()\n```", "```py\nattribute prefetch_cols: util.generic_fn_descriptor[Sequence[Column[Any]] | None]\n```", "```py\nattribute root_connection: Connection\n```", "```py\nclass sqlalchemy.engine.ExecutionContext\n```", "```py\nattribute compiled: Compiled | None\n```", "```py\nattribute connection: Connection\n```", "```py\nmethod create_cursor() \u2192 DBAPICursor\n```", "```py\nattribute cursor: DBAPICursor\n```", "```py\nattribute dialect: Dialect\n```", "```py\nattribute engine: Engine\n```", "```py\nattribute execute_style: ExecuteStyle\n```", "```py\nattribute executemany: bool\n```", "```py\nattribute execution_options: _ExecuteOptions\n```", "```py\nmethod fetchall_for_returning(cursor: DBAPICursor) \u2192 Sequence[Any]\n```", "```py\nmethod fire_sequence(seq: Sequence_SchemaItem, type_: Integer) \u2192 int\n```", "```py\nmethod get_out_parameter_values(out_param_names: Sequence[str]) \u2192 Sequence[Any]\n```", "```py\nmethod get_rowcount() \u2192 int | None\n```", "```py\nmethod handle_dbapi_exception(e: BaseException) \u2192 None\n```", "```py\nattribute invoked_statement: Executable | None\n```", "```py\nattribute isinsert: bool\n```", "```py\nattribute isupdate: bool\n```", "```py\nmethod lastrow_has_defaults() \u2192 bool\n```", "```py\nattribute no_parameters: bool\n```", "```py\nattribute parameters: _AnyMultiExecuteParams\n```", "```py\nmethod post_exec() \u2192 None\n```", "```py\nattribute postfetch_cols: util.generic_fn_descriptor[Sequence[Column[Any]] | None]\n```", "```py\nmethod pre_exec() \u2192 None\n```", "```py\nattribute prefetch_cols: util.generic_fn_descriptor[Sequence[Column[Any]] | None]\n```", "```py\nattribute root_connection: Connection\n```", "```py\nattribute statement: str\n```", "```py\nclass sqlalchemy.sql.compiler.ExpandedState\n```", "```py\nattribute additional_parameters\n```", "```py\nattribute parameter_expansion: Mapping[str, List[str]]\n```", "```py\nattribute parameters: _CoreSingleExecuteParams\n```", "```py\nattribute positional_parameters\n```", "```py\nattribute positiontup: Sequence[str] | None\n```", "```py\nattribute processors: Mapping[str, _BindProcessorType[Any]]\n```", "```py\nattribute statement: str\n```", "```py\nclass sqlalchemy.sql.compiler.GenericTypeCompiler\n```", "```py\nattribute ensure_kwarg: str = 'visit_\\\\w+'\n```", "```py\nclass sqlalchemy.log.Identified\n```", "```py\nclass sqlalchemy.sql.compiler.IdentifierPreparer\n```", "```py\nmethod __init__(dialect, initial_quote='\"', final_quote=None, escape_quote='\"', quote_case_sensitive_collations=True, omit_schema=False)\n```", "```py\nmethod format_column(column, use_table=False, name=None, table_name=None, use_schema=False, anon_map=None)\n```", "```py\nmethod format_label_name(name, anon_map=None)\n```", "```py\nmethod format_schema(name)\n```", "```py\nmethod format_table(table, use_schema=True, name=None)\n```", "```py\nmethod format_table_seq(table, use_schema=True)\n```", "```py\nmethod quote(ident: str, force: Any | None = None) \u2192 str\n```", "```py\nmethod quote_identifier(value: str) \u2192 str\n```", "```py\nmethod quote_schema(schema: str, force: Any | None = None) \u2192 str\n```", "```py\nattribute schema_for_object: _SchemaForObjectCallable = operator.attrgetter('schema')\n```", "```py\nmethod unformat_identifiers(identifiers)\n```", "```py\nmethod validate_sql_phrase(element, reg)\n```", "```py\nclass sqlalchemy.sql.compiler.SQLCompiler\n```", "```py\nmethod __init__(dialect: Dialect, statement: ClauseElement | None, cache_key: CacheKey | None = None, column_keys: Sequence[str] | None = None, for_executemany: bool = False, linting: Linting = Linting.NO_LINTING, _supporting_against: SQLCompiler | None = None, **kwargs: Any)\n```", "```py\nattribute ansi_bind_rules: bool = False\n```", "```py\nattribute bind_names: Dict[BindParameter[Any], str]\n```", "```py\nattribute bindname_escape_characters: ClassVar[Mapping[str, str]] = {' ': '_', '%': 'P', '(': 'A', ')': 'Z', '.': '_', ':': 'C', '[': '_', ']': '_'}\n```", "```py\nattribute binds: Dict[str, BindParameter[Any]]\n```", "```py\nattribute bindtemplate: str\n```", "```py\nattribute compilation_bindtemplate: str\n```", "```py\nmethod construct_expanded_state(params: _CoreSingleExecuteParams | None = None, escape_names: bool = True) \u2192 ExpandedState\n```", "```py\nmethod construct_params(params: _CoreSingleExecuteParams | None = None, extracted_parameters: Sequence[BindParameter[Any]] | None = None, escape_names: bool = True, _group_number: int | None = None, _check: bool = True, _no_postcompile: bool = False) \u2192 _MutableCoreSingleExecuteParams\n```", "```py\nattribute current_executable\n```", "```py\nstatement = getattr(self, \"current_executable\", False)\nif statement is False:\n    statement = self.stack[-1][\"selectable\"]\n```", "```py\nmethod default_from()\n```", "```py\nmethod delete_extra_from_clause(update_stmt, from_table, extra_froms, from_hints, **kw)\n```", "```py\nattribute effective_returning\n```", "```py\nattribute escaped_bind_names: util.immutabledict[str, str] = {}\n```", "```py\nmethod get_select_precolumns(select, **kw)\n```", "```py\nmethod group_by_clause(select, **kw)\n```", "```py\nattribute has_out_parameters = False\n```", "```py\nattribute implicit_returning: Sequence[ColumnElement[Any]] | None = None\n```", "```py\nattribute insert_prefetch: Sequence[Column[Any]] = ()\n```", "```py\nattribute insert_single_values_expr\n```", "```py\nattribute isupdate: bool = False\n```", "```py\nattribute literal_execute_params: FrozenSet[BindParameter[Any]] = frozenset({})\n```", "```py\nmethod order_by_clause(select, **kw)\n```", "```py\nattribute params\n```", "```py\nattribute positiontup: List[str] | None = None\n```", "```py\nattribute post_compile_params: FrozenSet[BindParameter[Any]] = frozenset({})\n```", "```py\nattribute postfetch: List[Column[Any]] | None\n```", "```py\nattribute postfetch_lastrowid = False\n```", "```py\nmethod render_literal_value(value, type_)\n```", "```py\nattribute render_table_with_column_in_update_from: bool = False\n```", "```py\nattribute returning\n```", "```py\nattribute returning_precedes_values: bool = False\n```", "```py\nattribute sql_compiler\n```", "```py\nattribute stack: List[_CompilerStackEntry]\n```", "```py\nattribute translate_select_structure: Any = None\n```", "```py\nmethod update_from_clause(update_stmt, from_table, extra_froms, from_hints, **kw)\n```", "```py\nmethod update_limit_clause(update_stmt)\n```", "```py\nattribute update_prefetch: Sequence[Column[Any]] = ()\n```", "```py\nmethod update_tables_clause(update_stmt, from_table, extra_froms, **kw)\n```", "```py\nmethod visit_override_binds(override_binds, **kw)\n```", "```py\nclass sqlalchemy.sql.compiler.StrSQLCompiler\n```", "```py\nmethod delete_extra_from_clause(update_stmt, from_table, extra_froms, from_hints, **kw)\n```", "```py\nmethod update_from_clause(update_stmt, from_table, extra_froms, from_hints, **kw)\n```", "```py\nclass sqlalchemy.engine.AdaptedConnection\n```", "```py\nattribute driver_connection\n```", "```py\nmethod run_async(fn: Callable[[Any], Awaitable[_T]]) \u2192 _T\n```", "```py\nengine = create_async_engine(...)\n\n@event.listens_for(engine.sync_engine, \"connect\")\ndef register_custom_types(dbapi_connection, ...):\n    dbapi_connection.run_async(\n        lambda connection: connection.set_type_codec(\n            'MyCustomType', encoder, decoder, ...\n        )\n    )\n```"]