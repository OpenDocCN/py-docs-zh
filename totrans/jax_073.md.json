["```py\ndef f():\n  print(\"hello\")\n  return 2\ndef g():\n  print(\"world\")\n  return 3\nf()\ng() \n```", "```py\n@partial(jax.jit, device=<device 0>)\ndef f():\n  return 2\n\n@partial(jax.jit, device=<device 1>)\ndef g():\n  return 3\nf()\ng() \n```", "```py\n@partial(jax.jit, device=<device 0>)\ndef f():\n  jax.print(\"hello\")\n  return 2\n\n@partial(jax.jit, device=<device 1>)\ndef g():\n  jax.print(\"world\")\n  return 3\nf()\ng() \n```", "```py\n@jax.jit\ndef f(x):\n  jax.print(\"hello\")\n  jax.print(\"world\")\n  return x \n```", "```py\n@jax.jit\ndef f(x, y):\n  log_value(x)\n  log_value(y)\nf(1, 2) \n```", "```py\n@jax.jit\ndef f(token, x):\n  token = jax.print(token, \"hello\")\n  token = jax.print(token, \"world\")\n  return token, x \n```", "```py\n@jax.jit\ndef f(runtime_token, x):\n  compiler_token = new_compiler_token()\n  compiler_token = jax.print(compiler_token, \"hello\")\n  compiler_token = jax.print(compiler_token, \"world\")\n  return runtime_token, x \n```", "```py\ndef _execute(compiled_computation, *args):\n  outputs = compiled_computation.execute(*args)\n  return outputs \n```", "```py\ndef _execute(compiled_computation, *args):\n  runtime_token = get_runtime_token() # Grab global token\n  runtime_token, *outputs = compiled_computation.execute(runtime_token, *args)\n  update_runtime_token(runtime_token) # Update global token\n  return outputs \n```", "```py\n@jax.jit\ndef f():\n  jax.print(\"hello world\")\n  return\nf() # Executed asynchronously \n```", "```py\n@jax.jit\ndef f():\n  jax.print(\"hello world\")\n  return new_runtime_token()\nf() # Executed asynchronously \n```", "```py\n@jax.jit\ndef f():\n  jax.print(\"hello\")\n\n@jax.jit\ndef g():\n  jax.print(\"world\")\n\nf()\ng() \n```", "```py\n@partial(jax.jit, device=<device 0>)\ndef f():\n  jax.print(\"hello\")\n\n@partial(jax.jit, device=<device 1>)\ndef g():\n  jax.print(\"world\")\n\nf()\ng() \n```", "```py\n@partial(jax.jit, device=<device 0>)\ndef f():\n  jax.print(\"hello\")\n  return new_runtime_token()\n\n@partial(jax.jit, device=<device 1>)\ndef g():\n  jax.print(\"world\")\n  return new_runtime_token()\n\nt0 = f()\nt1 = g()\nblock_until_ready((t0, t1)) \n```", "```py\ndef _execute(compiled_computation, *args):\n  output_token, *outputs = compiled_computation.execute(runtime_token, *args)\n  update_output_token(output_token, compiled_computation.device)\n  return outputs \n```", "```py\ndef effects_barrier():\n  output_token.block_until_ready() \n```"]