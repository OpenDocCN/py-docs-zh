["```py\nclass sqlalchemy.ext.horizontal_shard.ShardedSession\n```", "```py\nmethod __init__(shard_chooser: ShardChooser, identity_chooser: Optional[IdentityChooser] = None, execute_chooser: Optional[Callable[[ORMExecuteState], Iterable[Any]]] = None, shards: Optional[Dict[str, Any]] = None, query_cls: Type[Query[_T]] = <class 'sqlalchemy.ext.horizontal_shard.ShardedQuery'>, *, id_chooser: Optional[Callable[[Query[_T], Iterable[_T]], Iterable[Any]]] = None, query_chooser: Optional[Callable[[Executable], Iterable[Any]]] = None, **kwargs: Any) \u2192 None\n```", "```py\nmethod connection_callable(mapper: Mapper[_T] | None = None, instance: Any | None = None, shard_id: ShardIdentifier | None = None, **kw: Any) \u2192 Connection\n```", "```py\nmethod get_bind(mapper: _EntityBindKey[_O] | None = None, *, shard_id: ShardIdentifier | None = None, instance: Any | None = None, clause: ClauseElement | None = None, **kw: Any) \u2192 _SessionBind\n```", "```py\nclass sqlalchemy.ext.horizontal_shard.set_shard_id\n```", "```py\nstmt = (\n    select(MyObject).\n    where(MyObject.name == 'some name').\n    options(set_shard_id(\"shard1\"))\n)\n```", "```py\nmethod __init__(shard_id: str, propagate_to_loaders: bool = True)\n```", "```py\nattribute propagate_to_loaders\n```", "```py\nclass sqlalchemy.ext.horizontal_shard.ShardedQuery\n```", "```py\nmethod set_shard(shard_id: str) \u2192 Self\n```", "```py\nresults = session.execute(\n    stmt,\n    bind_arguments={\"shard_id\": \"my_shard\"}\n)\n```", "```py\nclass sqlalchemy.ext.horizontal_shard.ShardedSession\n```", "```py\nmethod __init__(shard_chooser: ShardChooser, identity_chooser: Optional[IdentityChooser] = None, execute_chooser: Optional[Callable[[ORMExecuteState], Iterable[Any]]] = None, shards: Optional[Dict[str, Any]] = None, query_cls: Type[Query[_T]] = <class 'sqlalchemy.ext.horizontal_shard.ShardedQuery'>, *, id_chooser: Optional[Callable[[Query[_T], Iterable[_T]], Iterable[Any]]] = None, query_chooser: Optional[Callable[[Executable], Iterable[Any]]] = None, **kwargs: Any) \u2192 None\n```", "```py\nmethod connection_callable(mapper: Mapper[_T] | None = None, instance: Any | None = None, shard_id: ShardIdentifier | None = None, **kw: Any) \u2192 Connection\n```", "```py\nmethod get_bind(mapper: _EntityBindKey[_O] | None = None, *, shard_id: ShardIdentifier | None = None, instance: Any | None = None, clause: ClauseElement | None = None, **kw: Any) \u2192 _SessionBind\n```", "```py\nclass sqlalchemy.ext.horizontal_shard.set_shard_id\n```", "```py\nstmt = (\n    select(MyObject).\n    where(MyObject.name == 'some name').\n    options(set_shard_id(\"shard1\"))\n)\n```", "```py\nmethod __init__(shard_id: str, propagate_to_loaders: bool = True)\n```", "```py\nattribute propagate_to_loaders\n```", "```py\nclass sqlalchemy.ext.horizontal_shard.ShardedQuery\n```", "```py\nmethod set_shard(shard_id: str) \u2192 Self\n```", "```py\nresults = session.execute(\n    stmt,\n    bind_arguments={\"shard_id\": \"my_shard\"}\n)\n```"]