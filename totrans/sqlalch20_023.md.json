["```py\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @hybrid_property\n    def fullname(self):\n        return self.firstname + \" \" + self.lastname\n```", "```py\nsome_user = session.scalars(select(User).limit(1)).first()\nprint(some_user.fullname)\n```", "```py\nsome_user = session.scalars(\n    select(User).where(User.fullname == \"John Smith\").limit(1)\n).first()\n```", "```py\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy.sql import case\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @hybrid_property\n    def fullname(self):\n        if self.firstname is not None:\n            return self.firstname + \" \" + self.lastname\n        else:\n            return self.lastname\n\n    @fullname.expression\n    def fullname(cls):\n        return case(\n            (cls.firstname != None, cls.firstname + \" \" + cls.lastname),\n            else_=cls.lastname,\n        )\n```", "```py\nfrom sqlalchemy.orm import column_property\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n    fullname = column_property(firstname + \" \" + lastname)\n```", "```py\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy import select, func\nfrom sqlalchemy import Column, Integer, String, ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    address_count = column_property(\n        select(func.count(Address.id))\n        .where(Address.user_id == id)\n        .correlate_except(Address)\n        .scalar_subquery()\n    )\n```", "```py\nstmt = (\n    select(func.count(Address.id))\n    .where(Address.user_id == id)\n    .correlate_except(Address)\n    .scalar_subquery()\n)\n```", "```py\nfrom sqlalchemy import and_\n\nclass Author(Base):\n    # ...\n\n    book_count = column_property(\n        select(func.count(books.c.id))\n        .where(\n            and_(\n                book_authors.c.author_id == authors.c.id,\n                book_authors.c.book_id == books.c.id,\n            )\n        )\n        .scalar_subquery()\n    )\n```", "```py\n# only works if a declarative base class is in use\nUser.address_count = column_property(\n    select(func.count(Address.id)).where(Address.user_id == User.id).scalar_subquery()\n)\n```", "```py\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped\nclass User:\n    __tablename__ = \"user\"\n\n    # ... additional mapping directives\n\n# later ...\n\n# works for any kind of mapping\nfrom sqlalchemy import inspect\n\ninspect(User).add_property(\n    column_property(\n        select(func.count(Address.id))\n        .where(Address.user_id == User.id)\n        .scalar_subquery()\n    )\n)\n```", "```py\nclass File(Base):\n    __tablename__ = \"file\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(64))\n    extension = mapped_column(String(8))\n    filename = column_property(name + \".\" + extension)\n    path = column_property(\"C:/\" + filename.expression)\n```", "```py\nstmt = select(File.path).where(File.filename == \"foo.txt\")\n```", "```py\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```", "```py\nfrom sqlalchemy.orm import object_session\nfrom sqlalchemy import select, func\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @property\n    def address_count(self):\n        return object_session(self).scalar(\n            select(func.count(Address.id)).where(Address.user_id == self.id)\n        )\n```", "```py\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @hybrid_property\n    def fullname(self):\n        return self.firstname + \" \" + self.lastname\n```", "```py\nsome_user = session.scalars(select(User).limit(1)).first()\nprint(some_user.fullname)\n```", "```py\nsome_user = session.scalars(\n    select(User).where(User.fullname == \"John Smith\").limit(1)\n).first()\n```", "```py\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy.sql import case\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @hybrid_property\n    def fullname(self):\n        if self.firstname is not None:\n            return self.firstname + \" \" + self.lastname\n        else:\n            return self.lastname\n\n    @fullname.expression\n    def fullname(cls):\n        return case(\n            (cls.firstname != None, cls.firstname + \" \" + cls.lastname),\n            else_=cls.lastname,\n        )\n```", "```py\nfrom sqlalchemy.orm import column_property\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n    fullname = column_property(firstname + \" \" + lastname)\n```", "```py\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy import select, func\nfrom sqlalchemy import Column, Integer, String, ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    address_count = column_property(\n        select(func.count(Address.id))\n        .where(Address.user_id == id)\n        .correlate_except(Address)\n        .scalar_subquery()\n    )\n```", "```py\nstmt = (\n    select(func.count(Address.id))\n    .where(Address.user_id == id)\n    .correlate_except(Address)\n    .scalar_subquery()\n)\n```", "```py\nfrom sqlalchemy import and_\n\nclass Author(Base):\n    # ...\n\n    book_count = column_property(\n        select(func.count(books.c.id))\n        .where(\n            and_(\n                book_authors.c.author_id == authors.c.id,\n                book_authors.c.book_id == books.c.id,\n            )\n        )\n        .scalar_subquery()\n    )\n```", "```py\n# only works if a declarative base class is in use\nUser.address_count = column_property(\n    select(func.count(Address.id)).where(Address.user_id == User.id).scalar_subquery()\n)\n```", "```py\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped\nclass User:\n    __tablename__ = \"user\"\n\n    # ... additional mapping directives\n\n# later ...\n\n# works for any kind of mapping\nfrom sqlalchemy import inspect\n\ninspect(User).add_property(\n    column_property(\n        select(func.count(Address.id))\n        .where(Address.user_id == User.id)\n        .scalar_subquery()\n    )\n)\n```", "```py\nclass File(Base):\n    __tablename__ = \"file\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(64))\n    extension = mapped_column(String(8))\n    filename = column_property(name + \".\" + extension)\n    path = column_property(\"C:/\" + filename.expression)\n```", "```py\nstmt = select(File.path).where(File.filename == \"foo.txt\")\n```", "```py\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```", "```py\n# only works if a declarative base class is in use\nUser.address_count = column_property(\n    select(func.count(Address.id)).where(Address.user_id == User.id).scalar_subquery()\n)\n```", "```py\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n@reg.mapped\nclass User:\n    __tablename__ = \"user\"\n\n    # ... additional mapping directives\n\n# later ...\n\n# works for any kind of mapping\nfrom sqlalchemy import inspect\n\ninspect(User).add_property(\n    column_property(\n        select(func.count(Address.id))\n        .where(Address.user_id == User.id)\n        .scalar_subquery()\n    )\n)\n```", "```py\nclass File(Base):\n    __tablename__ = \"file\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(64))\n    extension = mapped_column(String(8))\n    filename = column_property(name + \".\" + extension)\n    path = column_property(\"C:/\" + filename.expression)\n```", "```py\nstmt = select(File.path).where(File.filename == \"foo.txt\")\n```", "```py\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```", "```py\nfrom sqlalchemy.orm import object_session\nfrom sqlalchemy import select, func\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @property\n    def address_count(self):\n        return object_session(self).scalar(\n            select(func.count(Address.id)).where(Address.user_id == self.id)\n        )\n```"]