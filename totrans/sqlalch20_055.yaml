- en: Contextual/Thread-local Sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/contextual.html](https://docs.sqlalchemy.org/en/20/orm/contextual.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Recall from the section [When do I construct a Session, when do I commit it,
    and when do I close it?](session_basics.html#session-faq-whentocreate), the concept
    of “session scopes” was introduced, with an emphasis on web applications and the
    practice of linking the scope of a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with that of a web request. Most modern web frameworks
    include integration tools so that the scope of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") can be managed automatically, and these tools should
    be used as they are available.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy includes its own helper object, which helps with the establishment
    of user-defined [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    scopes. It is also used by third-party integration systems to help construct their
    integration schemes.
  prefs: []
  type: TYPE_NORMAL
- en: The object is the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object, and it represents a **registry** of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. If you’re not familiar with the registry pattern,
    a good introduction can be found in [Patterns of Enterprise Architecture](https://martinfowler.com/eaaCatalog/registry.html).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry by default uses a Python `threading.local()` in order to track [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances. **This is not necessarily compatible with
    all application servers**, particularly those which make use of greenlets or other
    alternative forms of concurrency control, which may lead to race conditions (e.g.
    randomly occurring failures) when used in moderate to high concurrency scenarios.
    Please read [Thread-Local Scope](#unitofwork-contextual-threadlocal) and [Using
    Thread-Local Scope with Web Applications](#session-lifespan) below to more fully
    understand the implications of using `threading.local()` to track [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects and consider more explicit means of scoping
    when using application servers which are not based on traditional threads.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object is a very popular and useful object used by many SQLAlchemy applications.
    However, it is important to note that it presents **only one approach** to the
    issue of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    management. If you’re new to SQLAlchemy, and especially if the term “thread-local
    variable” seems strange to you, we recommend that if possible you familiarize
    first with an off-the-shelf integration system such as [Flask-SQLAlchemy](https://pypi.org/project/Flask-SQLAlchemy/)
    or [zope.sqlalchemy](https://pypi.org/project/zope.sqlalchemy).
  prefs: []
  type: TYPE_NORMAL
- en: 'A [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    is constructed by calling it, passing it a **factory** which can create new [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. A factory is just something that produces a
    new object when called, and in the case of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the most common factory is the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker"), introduced earlier in this section. Below we illustrate
    this usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object we’ve created will now call upon the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") when we “call” the registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, `some_session` is an instance of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which we can now use to talk to the database. This
    same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is also present within the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry we’ve created. If we call upon the registry a second time, we get back
    the **same** [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This pattern allows disparate sections of the application to call upon a global
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session"),
    so that all those areas may share the same session without the need to pass it
    explicitly. The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    we’ve established in our registry will remain, until we explicitly tell our registry
    to dispose of it, by calling [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    method first calls [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") on the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which has the effect of releasing any connection/transactional
    resources owned by the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    first, then discarding the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") itself. “Releasing” here means that connections are
    returned to their connection pool and any transactional state is rolled back,
    ultimately using the `rollback()` method of the underlying DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object is “empty”, and will create a **new** [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when called again. As illustrated below, this is not
    the same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    we had before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The above series of steps illustrates the idea of the “registry” pattern in
    a nutshell. With that basic idea in hand, we can discuss some of the details of
    how this pattern proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: Implicit Method Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The job of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    is simple; hold onto a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for all who ask for it. As a means of producing more transparent access to this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    also includes **proxy behavior**, meaning that the registry itself can be treated
    just like a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly; when methods are called on this object, they are **proxied** to the
    underlying [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    being maintained by the registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The above code accomplishes the same task as that of acquiring the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by calling upon the registry, then using that [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: '## Thread-Local Scope'
  prefs: []
  type: TYPE_NORMAL
- en: Users who are familiar with multithreaded programming will note that representing
    anything as a global variable is usually a bad idea, as it implies that the global
    object will be accessed by many threads concurrently. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object is entirely designed to be used in a **non-concurrent**
    fashion, which in terms of multithreading means “only in one thread at a time”.
    So our above example of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    usage, where the same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object is maintained across multiple calls, suggests that some process needs to
    be in place such that multiple calls across many threads don’t actually get a
    handle to the same session. We call this notion **thread local storage**, which
    means, a special object is used that will maintain a distinct object per each
    application thread. Python provides this via the [threading.local()](https://docs.python.org/library/threading.html#threading.local)
    construct. The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object by default uses this object as storage, so that a single [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is maintained for all who call upon the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") registry, but only within the scope of a single
    thread. Callers who call upon the registry in a different thread get a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance that is local to that other thread.
  prefs: []
  type: TYPE_NORMAL
- en: Using this technique, the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") provides a quick and relatively simple (if one
    is familiar with thread-local storage) way of providing a single, global object
    in an application that is safe to be called upon from multiple threads.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    method, as always, removes the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") associated with the thread, if any. However, one advantage
    of the `threading.local()` object is that if the application thread itself ends,
    the “storage” for that thread is also garbage collected. So it is in fact “safe”
    to use thread local scope with an application that spawns and tears down threads,
    without the need to call [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove"). However, the scope of transactions themselves,
    i.e. ending them via [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") or [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), will usually still be something that must
    be explicitly arranged for at the appropriate time, unless the application actually
    ties the lifespan of a thread to the lifespan of a transaction.  ## Using Thread-Local
    Scope with Web Applications'
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in the section [When do I construct a Session, when do I commit
    it, and when do I close it?](session_basics.html#session-faq-whentocreate), a
    web application is architected around the concept of a **web request**, and integrating
    such an application with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") usually implies that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be associated with that request. As it turns out,
    most Python web frameworks, with notable exceptions such as the asynchronous frameworks
    Twisted and Tornado, use threads in a simple way, such that a particular web request
    is received, processed, and completed within the scope of a single *worker thread*.
    When the request ends, the worker thread is released to a pool of workers where
    it is available to handle another request.
  prefs: []
  type: TYPE_NORMAL
- en: 'This simple correspondence of web request and thread means that to associate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a thread implies it is also associated with the web request running within
    that thread, and vice versa, provided that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is created only after the web request begins and torn
    down just before the web request ends. So it is a common practice to use [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") as a quick way to integrate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with a web application. The sequence diagram below illustrates
    this flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the above flow, the process of integrating the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the web application has exactly two requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a single [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry when the web application first starts, ensuring that this object is accessible
    by the rest of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove") is called when the web request ends, usually
    by integrating with the web framework’s event system to establish an “on request
    end” event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As noted earlier, the above pattern is **just one potential way** to integrate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a web framework, one which in particular makes the significant assumption
    that the **web framework associates web requests with application threads**. It
    is however **strongly recommended that the integration tools provided with the
    web framework itself be used, if available**, instead of [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: In particular, while using a thread local can be convenient, it is preferable
    that the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    be associated **directly with the request**, rather than with the current thread.
    The next section on custom scopes details a more advanced configuration which
    can combine the usage of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    with direct request based scope, or any kind of scope.
  prefs: []
  type: TYPE_NORMAL
- en: Using Custom Created Scopes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object’s default behavior of “thread local” scope is only one of many options
    on how to “scope” a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    A custom scope can be defined based on any existing system of getting at “the
    current thing we are working with”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose a web framework defines a library function `get_current_request()`.
    An application built using this framework can call this function at any time,
    and the result will be some kind of `Request` object that represents the current
    request being processed. If the `Request` object is hashable, then this function
    can be easily integrated with [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") to associate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the request. Below we illustrate this in conjunction
    with a hypothetical event marker provided by the web framework `on_request_end`,
    which allows code to be invoked whenever a request ends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Above, we instantiate [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    in the usual way, except that we pass our request-returning function as the “scopefunc”.
    This instructs [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    to use this function to generate a dictionary key whenever the registry is called
    upon to return the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). In this case it is particularly important that we ensure
    a reliable “remove” system is implemented, as this dictionary is not otherwise
    self-managed.
  prefs: []
  type: TYPE_NORMAL
- en: Contextual Session API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [QueryPropertyDescriptor](#sqlalchemy.orm.QueryPropertyDescriptor) | Describes
    the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [scoped_session](#sqlalchemy.orm.scoped_session) | Provides scoped management
    of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [ScopedRegistry](#sqlalchemy.util.ScopedRegistry) | A Registry that can store
    one or multiple instances of a single class on the basis of a “scope” function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ThreadLocalRegistry](#sqlalchemy.util.ThreadLocalRegistry) | A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry") that uses a `threading.local()` variable for
    storage. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Provides scoped management of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See [Contextual/Thread-local Sessions](#unitofwork-contextual) for a tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When using [Asynchronous I/O (asyncio)](extensions/asyncio.html), the async-compatible
    [`async_scoped_session`](extensions/asyncio.html#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") class should be used in place of
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.orm.scoped_session.__call__), [__init__()](#sqlalchemy.orm.scoped_session.__init__),
    [add()](#sqlalchemy.orm.scoped_session.add), [add_all()](#sqlalchemy.orm.scoped_session.add_all),
    [autoflush](#sqlalchemy.orm.scoped_session.autoflush), [begin()](#sqlalchemy.orm.scoped_session.begin),
    [begin_nested()](#sqlalchemy.orm.scoped_session.begin_nested), [bind](#sqlalchemy.orm.scoped_session.bind),
    [bulk_insert_mappings()](#sqlalchemy.orm.scoped_session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.scoped_session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.scoped_session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.scoped_session.close), [close_all()](#sqlalchemy.orm.scoped_session.close_all),
    [commit()](#sqlalchemy.orm.scoped_session.commit), [configure()](#sqlalchemy.orm.scoped_session.configure),
    [connection()](#sqlalchemy.orm.scoped_session.connection), [delete()](#sqlalchemy.orm.scoped_session.delete),
    [deleted](#sqlalchemy.orm.scoped_session.deleted), [dirty](#sqlalchemy.orm.scoped_session.dirty),
    [execute()](#sqlalchemy.orm.scoped_session.execute), [expire()](#sqlalchemy.orm.scoped_session.expire),
    [expire_all()](#sqlalchemy.orm.scoped_session.expire_all), [expunge()](#sqlalchemy.orm.scoped_session.expunge),
    [expunge_all()](#sqlalchemy.orm.scoped_session.expunge_all), [flush()](#sqlalchemy.orm.scoped_session.flush),
    [get()](#sqlalchemy.orm.scoped_session.get), [get_bind()](#sqlalchemy.orm.scoped_session.get_bind),
    [get_one()](#sqlalchemy.orm.scoped_session.get_one), [identity_key()](#sqlalchemy.orm.scoped_session.identity_key),
    [identity_map](#sqlalchemy.orm.scoped_session.identity_map), [info](#sqlalchemy.orm.scoped_session.info),
    [is_active](#sqlalchemy.orm.scoped_session.is_active), [is_modified()](#sqlalchemy.orm.scoped_session.is_modified),
    [merge()](#sqlalchemy.orm.scoped_session.merge), [new](#sqlalchemy.orm.scoped_session.new),
    [no_autoflush](#sqlalchemy.orm.scoped_session.no_autoflush), [object_session()](#sqlalchemy.orm.scoped_session.object_session),
    [query()](#sqlalchemy.orm.scoped_session.query), [query_property()](#sqlalchemy.orm.scoped_session.query_property),
    [refresh()](#sqlalchemy.orm.scoped_session.refresh), [remove()](#sqlalchemy.orm.scoped_session.remove),
    [reset()](#sqlalchemy.orm.scoped_session.reset), [rollback()](#sqlalchemy.orm.scoped_session.rollback),
    [scalar()](#sqlalchemy.orm.scoped_session.scalar), [scalars()](#sqlalchemy.orm.scoped_session.scalars),
    [session_factory](#sqlalchemy.orm.scoped_session.session_factory)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Return the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    creating it using the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is not present. If the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is present and keyword arguments have been passed, [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session_factory` – a factory to create new [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances. This is usually, but not necessarily, an
    instance of [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – optional function which defines the current scope. If not passed,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object assumes “thread-local” scope, and will use a Python `threading.local()`
    in order to maintain the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If passed, the function should return a hashable token;
    this token will be used as the key in a dictionary in order to store and retrieve
    the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    will be moved back to the [transient](../glossary.html#term-transient) state,
    and will no longer be present within this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Begin a transaction, or nested transaction, on this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object features **autobegin** behavior, so that normally it is not necessary to
    call the [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    method explicitly. However, it may be used in order to control the scope of when
    the transactional state is begun.
  prefs: []
  type: TYPE_NORMAL
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested"). For documentation on SAVEPOINT transactions,
    please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a Python context manager, allowing
    [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  prefs: []
  type: TYPE_NORMAL
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a context manager, allowing [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.bind` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk insert of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`render_nulls` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk save of the given list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  prefs: []
  type: TYPE_NORMAL
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objects` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in traditional operation; if the object has the `InstanceState.key`
    attribute set, then the object is assumed to be “detached” and will result in
    an UPDATE. Otherwise, an INSERT is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk update of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This expunges all ORM objects associated with this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In the default running mode the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Close *all* sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Flush pending changes and commit the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    Additionally, this re-load operation is not supported when using asyncio-oriented
    APIs. The [`Session.expire_on_commit`](session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") parameter may be used to disable this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: When there is no transaction in place for the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    since the previous call to [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), the method will begin and commit an internal-only
    “logical” transaction, that does not normally affect the database unless pending
    flush changes were detected, but will still invoke event handlers and object expiration
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: reconfigure the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: See [`sessionmaker.configure()`](session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  prefs: []
  type: TYPE_NORMAL
- en: Ambiguity in multi-bind or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects can be resolved through any of the optional
    keyword arguments. This ultimately makes usage of the [`get_bind()`](#sqlalchemy.orm.scoped_session.get_bind
    "sqlalchemy.orm.scoped_session.get_bind") method for resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection.
  prefs: []
  type: TYPE_NORMAL
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Execute a SQL expression construct.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The API contract of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**objects** –'
  prefs: []
  type: TYPE_NORMAL
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4: Added [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get"), which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ident` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.29.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: For a multiply-bound or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `mapper` or `clause` arguments are used to determine
    the appropriate bind to return.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of resolution is:'
  prefs: []
  type: TYPE_NORMAL
- en: if mapper given and [`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") is present, locate a bind based first on the mapper
    in use, then on the mapped class in use, then on any base classes that are present
    in the `__mro__` of the mapped class, from more specific superclasses to more
    general.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if `Session.binds` is present, return that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method can be overridden on a user-defined
    subclass of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to provide any kind of bind resolution scheme. See the example at [Custom Vertical
    Partitioning](persistence_techniques.html#session-custom-partitioning).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and secondly by consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped for a bind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed documentation of the arguments see the method [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  prefs: []
  type: TYPE_NORMAL
- en: returns `None` if no row was found with the provided primary key
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if not already.'
  prefs: []
  type: TYPE_NORMAL
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – Instance to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.scoped_session.merge "sqlalchemy.orm.scoped_session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This is so that when the merge operation populates
    local attributes and cascades to related objects and collections, the values can
    be “stamped” onto the target object as is, without generating any history or attribute
    events, and without the need to reconcile the incoming data with any existing
    related objects or collections that might not be loaded. The resulting objects
    from `load=False` are always produced as “clean”, so it is only appropriate that
    the given objects should be “clean” as well, else this suggests a mis-use of the
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional sequence of loader options which will be applied to the [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Querying Guide](queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: return a class property which produces a legacy [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object against the class and the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when called.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") accessor is specific to the legacy
    [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    and is not considered to be part of [2.0-style](../glossary.html#term-1) ORM use.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Produces instances of the session’s configured query class by default. To override
    and use a custom implementation, provide a `query_cls` callable. The callable
    will be invoked with the class’s mapper as a positional argument and a session
    keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: There is no limit to the number of query properties placed on a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method is capable of refreshing both column
    and relationship oriented attributes, its primary focus is on refreshing of local
    column-oriented attributes on a single instance. For more open ended “refresh”
    functionality, including the ability to refresh the attributes on many objects
    at once while having explicit control over relationship loader strategies, use
    the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    if present.
  prefs: []
  type: TYPE_NORMAL
- en: This will first call [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method on the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which releases any existing transactional/connection
    resources still being held; transactions specifically are rolled back. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is then discarded. Upon next usage within the same scope,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    will produce a new [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is reset as though the object were brand new, and ready to be used again. This
    method may then be useful for [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects which set [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: If no transaction is in progress, this method is a pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Rolling Back](session_basics.html#session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return the results as scalars.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: A Registry that can store one or multiple instances of a single class on the
    basis of a “scope” function.
  prefs: []
  type: TYPE_NORMAL
- en: The object implements `__call__` as the “getter”, so by calling `myregistry()`
    the contained object is returned for the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createfunc` – a callable that returns a new object to be placed in the registry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – a callable that will return a key to store/retrieve an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.util.ScopedRegistry.__init__), [clear()](#sqlalchemy.util.ScopedRegistry.clear),
    [has()](#sqlalchemy.util.ScopedRegistry.has), [set()](#sqlalchemy.util.ScopedRegistry.set)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createfunc` – A creation function that will generate a new value for the current
    scope, if none is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – A function that returns a hashable token representing the current
    scope (such as, current thread identifier).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Clear the current scope, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Return True if an object is present in the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Set the value for the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    that uses a `threading.local()` variable for storage.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.util.ThreadLocalRegistry`](#sqlalchemy.util.ThreadLocalRegistry
    "sqlalchemy.util.ThreadLocalRegistry") ([`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Describes the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.5.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.QueryPropertyDescriptor`](#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor") (`typing_extensions.Protocol`)
  prefs: []
  type: TYPE_NORMAL
- en: Implicit Method Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The job of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    is simple; hold onto a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for all who ask for it. As a means of producing more transparent access to this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    also includes **proxy behavior**, meaning that the registry itself can be treated
    just like a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly; when methods are called on this object, they are **proxied** to the
    underlying [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    being maintained by the registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The above code accomplishes the same task as that of acquiring the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by calling upon the registry, then using that [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: '## Thread-Local Scope'
  prefs: []
  type: TYPE_NORMAL
- en: Users who are familiar with multithreaded programming will note that representing
    anything as a global variable is usually a bad idea, as it implies that the global
    object will be accessed by many threads concurrently. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object is entirely designed to be used in a **non-concurrent**
    fashion, which in terms of multithreading means “only in one thread at a time”.
    So our above example of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    usage, where the same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object is maintained across multiple calls, suggests that some process needs to
    be in place such that multiple calls across many threads don’t actually get a
    handle to the same session. We call this notion **thread local storage**, which
    means, a special object is used that will maintain a distinct object per each
    application thread. Python provides this via the [threading.local()](https://docs.python.org/library/threading.html#threading.local)
    construct. The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object by default uses this object as storage, so that a single [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is maintained for all who call upon the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") registry, but only within the scope of a single
    thread. Callers who call upon the registry in a different thread get a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance that is local to that other thread.
  prefs: []
  type: TYPE_NORMAL
- en: Using this technique, the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") provides a quick and relatively simple (if one
    is familiar with thread-local storage) way of providing a single, global object
    in an application that is safe to be called upon from multiple threads.
  prefs: []
  type: TYPE_NORMAL
- en: The [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    method, as always, removes the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") associated with the thread, if any. However, one advantage
    of the `threading.local()` object is that if the application thread itself ends,
    the “storage” for that thread is also garbage collected. So it is in fact “safe”
    to use thread local scope with an application that spawns and tears down threads,
    without the need to call [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove"). However, the scope of transactions themselves,
    i.e. ending them via [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") or [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), will usually still be something that must
    be explicitly arranged for at the appropriate time, unless the application actually
    ties the lifespan of a thread to the lifespan of a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '## Using Thread-Local Scope with Web Applications'
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in the section [When do I construct a Session, when do I commit
    it, and when do I close it?](session_basics.html#session-faq-whentocreate), a
    web application is architected around the concept of a **web request**, and integrating
    such an application with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") usually implies that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be associated with that request. As it turns out,
    most Python web frameworks, with notable exceptions such as the asynchronous frameworks
    Twisted and Tornado, use threads in a simple way, such that a particular web request
    is received, processed, and completed within the scope of a single *worker thread*.
    When the request ends, the worker thread is released to a pool of workers where
    it is available to handle another request.
  prefs: []
  type: TYPE_NORMAL
- en: 'This simple correspondence of web request and thread means that to associate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a thread implies it is also associated with the web request running within
    that thread, and vice versa, provided that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is created only after the web request begins and torn
    down just before the web request ends. So it is a common practice to use [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") as a quick way to integrate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with a web application. The sequence diagram below illustrates
    this flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the above flow, the process of integrating the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the web application has exactly two requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a single [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry when the web application first starts, ensuring that this object is accessible
    by the rest of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove") is called when the web request ends, usually
    by integrating with the web framework’s event system to establish an “on request
    end” event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As noted earlier, the above pattern is **just one potential way** to integrate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a web framework, one which in particular makes the significant assumption
    that the **web framework associates web requests with application threads**. It
    is however **strongly recommended that the integration tools provided with the
    web framework itself be used, if available**, instead of [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: In particular, while using a thread local can be convenient, it is preferable
    that the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    be associated **directly with the request**, rather than with the current thread.
    The next section on custom scopes details a more advanced configuration which
    can combine the usage of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    with direct request based scope, or any kind of scope.
  prefs: []
  type: TYPE_NORMAL
- en: Using Custom Created Scopes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object’s default behavior of “thread local” scope is only one of many options
    on how to “scope” a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    A custom scope can be defined based on any existing system of getting at “the
    current thing we are working with”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose a web framework defines a library function `get_current_request()`.
    An application built using this framework can call this function at any time,
    and the result will be some kind of `Request` object that represents the current
    request being processed. If the `Request` object is hashable, then this function
    can be easily integrated with [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") to associate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the request. Below we illustrate this in conjunction
    with a hypothetical event marker provided by the web framework `on_request_end`,
    which allows code to be invoked whenever a request ends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Above, we instantiate [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    in the usual way, except that we pass our request-returning function as the “scopefunc”.
    This instructs [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    to use this function to generate a dictionary key whenever the registry is called
    upon to return the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). In this case it is particularly important that we ensure
    a reliable “remove” system is implemented, as this dictionary is not otherwise
    self-managed.
  prefs: []
  type: TYPE_NORMAL
- en: Contextual Session API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [QueryPropertyDescriptor](#sqlalchemy.orm.QueryPropertyDescriptor) | Describes
    the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [scoped_session](#sqlalchemy.orm.scoped_session) | Provides scoped management
    of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [ScopedRegistry](#sqlalchemy.util.ScopedRegistry) | A Registry that can store
    one or multiple instances of a single class on the basis of a “scope” function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ThreadLocalRegistry](#sqlalchemy.util.ThreadLocalRegistry) | A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry") that uses a `threading.local()` variable for
    storage. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Provides scoped management of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See [Contextual/Thread-local Sessions](#unitofwork-contextual) for a tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When using [Asynchronous I/O (asyncio)](extensions/asyncio.html), the async-compatible
    [`async_scoped_session`](extensions/asyncio.html#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") class should be used in place of
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.orm.scoped_session.__call__), [__init__()](#sqlalchemy.orm.scoped_session.__init__),
    [add()](#sqlalchemy.orm.scoped_session.add), [add_all()](#sqlalchemy.orm.scoped_session.add_all),
    [autoflush](#sqlalchemy.orm.scoped_session.autoflush), [begin()](#sqlalchemy.orm.scoped_session.begin),
    [begin_nested()](#sqlalchemy.orm.scoped_session.begin_nested), [bind](#sqlalchemy.orm.scoped_session.bind),
    [bulk_insert_mappings()](#sqlalchemy.orm.scoped_session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.scoped_session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.scoped_session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.scoped_session.close), [close_all()](#sqlalchemy.orm.scoped_session.close_all),
    [commit()](#sqlalchemy.orm.scoped_session.commit), [configure()](#sqlalchemy.orm.scoped_session.configure),
    [connection()](#sqlalchemy.orm.scoped_session.connection), [delete()](#sqlalchemy.orm.scoped_session.delete),
    [deleted](#sqlalchemy.orm.scoped_session.deleted), [dirty](#sqlalchemy.orm.scoped_session.dirty),
    [execute()](#sqlalchemy.orm.scoped_session.execute), [expire()](#sqlalchemy.orm.scoped_session.expire),
    [expire_all()](#sqlalchemy.orm.scoped_session.expire_all), [expunge()](#sqlalchemy.orm.scoped_session.expunge),
    [expunge_all()](#sqlalchemy.orm.scoped_session.expunge_all), [flush()](#sqlalchemy.orm.scoped_session.flush),
    [get()](#sqlalchemy.orm.scoped_session.get), [get_bind()](#sqlalchemy.orm.scoped_session.get_bind),
    [get_one()](#sqlalchemy.orm.scoped_session.get_one), [identity_key()](#sqlalchemy.orm.scoped_session.identity_key),
    [identity_map](#sqlalchemy.orm.scoped_session.identity_map), [info](#sqlalchemy.orm.scoped_session.info),
    [is_active](#sqlalchemy.orm.scoped_session.is_active), [is_modified()](#sqlalchemy.orm.scoped_session.is_modified),
    [merge()](#sqlalchemy.orm.scoped_session.merge), [new](#sqlalchemy.orm.scoped_session.new),
    [no_autoflush](#sqlalchemy.orm.scoped_session.no_autoflush), [object_session()](#sqlalchemy.orm.scoped_session.object_session),
    [query()](#sqlalchemy.orm.scoped_session.query), [query_property()](#sqlalchemy.orm.scoped_session.query_property),
    [refresh()](#sqlalchemy.orm.scoped_session.refresh), [remove()](#sqlalchemy.orm.scoped_session.remove),
    [reset()](#sqlalchemy.orm.scoped_session.reset), [rollback()](#sqlalchemy.orm.scoped_session.rollback),
    [scalar()](#sqlalchemy.orm.scoped_session.scalar), [scalars()](#sqlalchemy.orm.scoped_session.scalars),
    [session_factory](#sqlalchemy.orm.scoped_session.session_factory)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Return the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    creating it using the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is not present. If the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is present and keyword arguments have been passed, [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session_factory` – a factory to create new [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances. This is usually, but not necessarily, an
    instance of [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – optional function which defines the current scope. If not passed,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object assumes “thread-local” scope, and will use a Python `threading.local()`
    in order to maintain the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If passed, the function should return a hashable token;
    this token will be used as the key in a dictionary in order to store and retrieve
    the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    will be moved back to the [transient](../glossary.html#term-transient) state,
    and will no longer be present within this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Begin a transaction, or nested transaction, on this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object features **autobegin** behavior, so that normally it is not necessary to
    call the [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    method explicitly. However, it may be used in order to control the scope of when
    the transactional state is begun.
  prefs: []
  type: TYPE_NORMAL
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested"). For documentation on SAVEPOINT transactions,
    please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a Python context manager, allowing
    [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  prefs: []
  type: TYPE_NORMAL
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a context manager, allowing [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.bind` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk insert of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`render_nulls` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk save of the given list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  prefs: []
  type: TYPE_NORMAL
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objects` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in traditional operation; if the object has the `InstanceState.key`
    attribute set, then the object is assumed to be “detached” and will result in
    an UPDATE. Otherwise, an INSERT is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk update of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This expunges all ORM objects associated with this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In the default running mode the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Close *all* sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Flush pending changes and commit the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    Additionally, this re-load operation is not supported when using asyncio-oriented
    APIs. The [`Session.expire_on_commit`](session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") parameter may be used to disable this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: When there is no transaction in place for the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    since the previous call to [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), the method will begin and commit an internal-only
    “logical” transaction, that does not normally affect the database unless pending
    flush changes were detected, but will still invoke event handlers and object expiration
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: reconfigure the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: See [`sessionmaker.configure()`](session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  prefs: []
  type: TYPE_NORMAL
- en: Ambiguity in multi-bind or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects can be resolved through any of the optional
    keyword arguments. This ultimately makes usage of the [`get_bind()`](#sqlalchemy.orm.scoped_session.get_bind
    "sqlalchemy.orm.scoped_session.get_bind") method for resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection.
  prefs: []
  type: TYPE_NORMAL
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Execute a SQL expression construct.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The API contract of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**objects** –'
  prefs: []
  type: TYPE_NORMAL
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4: Added [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get"), which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ident` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.29.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: For a multiply-bound or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `mapper` or `clause` arguments are used to determine
    the appropriate bind to return.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of resolution is:'
  prefs: []
  type: TYPE_NORMAL
- en: if mapper given and [`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") is present, locate a bind based first on the mapper
    in use, then on the mapped class in use, then on any base classes that are present
    in the `__mro__` of the mapped class, from more specific superclasses to more
    general.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if `Session.binds` is present, return that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method can be overridden on a user-defined
    subclass of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to provide any kind of bind resolution scheme. See the example at [Custom Vertical
    Partitioning](persistence_techniques.html#session-custom-partitioning).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and secondly by consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped for a bind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed documentation of the arguments see the method [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  prefs: []
  type: TYPE_NORMAL
- en: returns `None` if no row was found with the provided primary key
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if not already.'
  prefs: []
  type: TYPE_NORMAL
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – Instance to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.scoped_session.merge "sqlalchemy.orm.scoped_session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This is so that when the merge operation populates
    local attributes and cascades to related objects and collections, the values can
    be “stamped” onto the target object as is, without generating any history or attribute
    events, and without the need to reconcile the incoming data with any existing
    related objects or collections that might not be loaded. The resulting objects
    from `load=False` are always produced as “clean”, so it is only appropriate that
    the given objects should be “clean” as well, else this suggests a mis-use of the
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional sequence of loader options which will be applied to the [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Querying Guide](queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: return a class property which produces a legacy [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object against the class and the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when called.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") accessor is specific to the legacy
    [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    and is not considered to be part of [2.0-style](../glossary.html#term-1) ORM use.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Produces instances of the session’s configured query class by default. To override
    and use a custom implementation, provide a `query_cls` callable. The callable
    will be invoked with the class’s mapper as a positional argument and a session
    keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: There is no limit to the number of query properties placed on a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method is capable of refreshing both column
    and relationship oriented attributes, its primary focus is on refreshing of local
    column-oriented attributes on a single instance. For more open ended “refresh”
    functionality, including the ability to refresh the attributes on many objects
    at once while having explicit control over relationship loader strategies, use
    the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    if present.
  prefs: []
  type: TYPE_NORMAL
- en: This will first call [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method on the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which releases any existing transactional/connection
    resources still being held; transactions specifically are rolled back. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is then discarded. Upon next usage within the same scope,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    will produce a new [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is reset as though the object were brand new, and ready to be used again. This
    method may then be useful for [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects which set [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: If no transaction is in progress, this method is a pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Rolling Back](session_basics.html#session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return the results as scalars.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: A Registry that can store one or multiple instances of a single class on the
    basis of a “scope” function.
  prefs: []
  type: TYPE_NORMAL
- en: The object implements `__call__` as the “getter”, so by calling `myregistry()`
    the contained object is returned for the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createfunc` – a callable that returns a new object to be placed in the registry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – a callable that will return a key to store/retrieve an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.util.ScopedRegistry.__init__), [clear()](#sqlalchemy.util.ScopedRegistry.clear),
    [has()](#sqlalchemy.util.ScopedRegistry.has), [set()](#sqlalchemy.util.ScopedRegistry.set)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createfunc` – A creation function that will generate a new value for the current
    scope, if none is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – A function that returns a hashable token representing the current
    scope (such as, current thread identifier).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Clear the current scope, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Return True if an object is present in the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Set the value for the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    that uses a `threading.local()` variable for storage.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.util.ThreadLocalRegistry`](#sqlalchemy.util.ThreadLocalRegistry
    "sqlalchemy.util.ThreadLocalRegistry") ([`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Describes the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.5.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.QueryPropertyDescriptor`](#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor") (`typing_extensions.Protocol`)
  prefs: []
  type: TYPE_NORMAL
