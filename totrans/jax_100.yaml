- en: jax.numpy.fft.ifftn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/_autosummary/jax.numpy.fft.ifftn.html`](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.fft.ifftn.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the N-dimensional inverse discrete Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: LAX-backend implementation of [`numpy.fft.ifftn()`](https://numpy.org/doc/stable/reference/generated/numpy.fft.ifftn.html#numpy.fft.ifftn
    "(in NumPy v2.0)").
  prefs: []
  type: TYPE_NORMAL
- en: '*Original docstring below.*'
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the N-dimensional discrete Fourier Transform
    over any number of axes in an M-dimensional array by means of the Fast Fourier
    Transform (FFT). In other words, `ifftn(fftn(a)) == a` to within numerical accuracy.
    For a description of the definitions and conventions used, see numpy.fft.
  prefs: []
  type: TYPE_NORMAL
- en: The input, analogously to ifft, should be ordered in the same way as is returned
    by fftn, i.e. it should have the term for zero frequency in all axes in the low-order
    corner, the positive frequency terms in the first half of all axes, the term for
    the Nyquist frequency in the middle of all axes and the negative frequency terms
    in the second half of all axes, in order of decreasingly negative frequency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** (*array_like*) – Input array, can be complex.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**s** (*sequence* *of* *ints**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shape (length of each transformed axis) of the output (`s[0]` refers to axis
    0, `s[1]` to axis 1, etc.). This corresponds to `n` for `ifft(x, n)`. Along any
    axis, if the given shape is smaller than that of the input, the input is cropped.
    If it is larger, the input is padded with zeros.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: If it is `-1`, the whole input is used (no padding/trimming).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If s is not given, the shape of the input along the axes specified by axes is
    used. See notes for issue on ifft zero padding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: If s is not `None`, axes must not be `None` either.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: s must contain only `int` s, not `None` values.
    `None` values currently mean that the default value for `n` is used in the corresponding
    1-D transform, but this behaviour is deprecated.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**axes** (*sequence* *of* *ints**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Axes over which to compute the IFFT. If not given, the last `len(s)` axes are
    used, or all axes if s is also not specified. Repeated indices in axes means that
    the inverse transform over that axis is performed multiple times.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: If s is specified, the corresponding axes to
    be transformed must be explicitly specified too.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**norm** (*{"backward"**,* *"ortho"**,* *"forward"}**,* *optional*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out** – The truncated or zero-padded input, transformed along the axes indicated
    by axes, or by a combination of s or a, as explained in the parameters section
    above.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: complex ndarray
  prefs: []
  type: TYPE_NORMAL
