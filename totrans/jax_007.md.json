["```py\nimport jax\nimport jax.numpy as jnp\n\nx = jnp.arange(5)\nisinstance(x, jax.Array) \n```", "```py\nTrue \n```", "```py\nx.devices() \n```", "```py\n{CpuDevice(id=0)} \n```", "```py\nx.sharding \n```", "```py\nSingleDeviceSharding(device=CpuDevice(id=0)) \n```", "```py\ndef selu(x, alpha=1.67, lambda_=1.05):\n  return lambda_ * jnp.where(x > 0, x, alpha * jnp.exp(x) - alpha)\n\nselu_jit = jax.jit(selu)\nprint(selu_jit(1.0)) \n```", "```py\n1.05 \n```", "```py\n@jax.jit\ndef selu(x, alpha=1.67, lambda_=1.05):\n  return lambda_ * jnp.where(x > 0, x, alpha * jnp.exp(x) - alpha) \n```", "```py\n@jax.jit\ndef f(x):\n  print(x)\n  return x + 1\n\nx = jnp.arange(5)\nresult = f(x) \n```", "```py\nTraced<ShapedArray(int32[5])>with<DynamicJaxprTrace(level=1/0)> \n```", "```py\ndef selu(x, alpha=1.67, lambda_=1.05):\n  return lambda_ * jnp.where(x > 0, x, alpha * jnp.exp(x) - alpha) \n```", "```py\nx = jnp.arange(5.0)\njax.make_jaxpr(selu)(x) \n```", "```py\n{ lambda ; a:f32[5]. let\n    b:bool[5] = gt a 0.0\n    c:f32[5] = exp a\n    d:f32[5] = mul 1.6699999570846558 c\n    e:f32[5] = sub d 1.6699999570846558\n    f:f32[5] = pjit[\n      name=_where\n      jaxpr={ lambda ; g:bool[5] h:f32[5] i:f32[5]. let\n          j:f32[5] = select_n g i h\n        in (j,) }\n    ] b a e\n    k:f32[5] = mul 1.0499999523162842 f\n  in (k,) } \n```", "```py\n# (nested) list of parameters\nparams = [1, 2, (jnp.arange(3), jnp.ones(2))]\n\nprint(jax.tree.structure(params))\nprint(jax.tree.leaves(params)) \n```", "```py\nPyTreeDef([*, *, (*, *)])\n[1, 2, Array([0, 1, 2], dtype=int32), Array([1., 1.], dtype=float32)] \n```", "```py\n# Dictionary of parameters\nparams = {'n': 5, 'W': jnp.ones((2, 2)), 'b': jnp.zeros(2)}\n\nprint(jax.tree.structure(params))\nprint(jax.tree.leaves(params)) \n```", "```py\nPyTreeDef({'W': *, 'b': *, 'n': *})\n[Array([[1., 1.],\n       [1., 1.]], dtype=float32), Array([0., 0.], dtype=float32), 5] \n```", "```py\n# Named tuple of parameters\nfrom typing import NamedTuple\n\nclass Params(NamedTuple):\n  a: int\n  b: float\n\nparams = Params(1, 5.0)\nprint(jax.tree.structure(params))\nprint(jax.tree.leaves(params)) \n```", "```py\nPyTreeDef(CustomNode(namedtuple[Params], [*, *]))\n[1, 5.0] \n```"]