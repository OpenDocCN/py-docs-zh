- en: jax.experimental.custom_partitioning module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.experimental.custom_partitioning 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.custom_partitioning.html`](https://jax.readthedocs.io/en/latest/jax.experimental.custom_partitioning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.custom_partitioning.html`](https://jax.readthedocs.io/en/latest/jax.experimental.custom_partitioning.html)
- en: '## API'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## API'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Inserts a CustomCallOp into the XLA graph with custom SPMD lowering rules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XLA 图中插入一个 CustomCallOp，并使用自定义的 SPMD 降低规则。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The args to `def_partition` are as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`def_partition` 的参数如下：'
- en: '`propagate_user_sharding`: Callable which takes the sharding of a user (in
    the dag) and returns a suggestion for a new NamedSharding. The default implementation
    is just to return the suggested sharding.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_user_sharding`：一个可调用对象，接受用户（在 DAG 中）的分片并返回一个新的 NamedSharding 的建议。默认实现只是返回建议的分片。'
- en: '`partition`: Callable which takes the SPMD suggested partition shapes and partition
    specs and returns the mesh, a per-shard lowering function, and the final input
    and output sharding specs (the SPMD partitioner will repartition the inputs to
    match). The mesh is returned to allow configuring axis_names for collectives when
    no mesh is provided.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition`：一个可调用对象，接受 SPMD 建议的分片形状和分片规格，并返回网格、每个分片的降低函数以及最终的输入和输出分片规格（SPMD
    分片器将重新分片输入以匹配）。返回网格以允许在未提供网格时配置集体的 axis_names。'
- en: '`infer_sharding_from_operands`: Callable which computes an output `NamedSharding`
    from the `NamedSharding` chosen for each argument.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`infer_sharding_from_operands`：一个可调用对象，从每个参数选择的 `NamedSharding` 中计算输出的 `NamedSharding`。'
- en: '`decode_shardings`: When set to True, convert input [PRE2] if possible. This
    may not be possible if the user does not provide a contextual mesh.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decode_shardings`：当设置为 True 时，如果可能，从输入中转换 [PRE2]。如果用户未提供上下文网格，则可能无法执行此操作。'
- en: Positional arguments can be specified as static using static_argnums. JAX uses
    `inspect.signature(fun)` to resolve these positional arguments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 static_argnums 将位置参数指定为静态参数。JAX 使用 `inspect.signature(fun)` 来解析这些位置参数。
- en: Example
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: As an example, assume we want to enhance the existing `jax.numpy.fft.fft`. This
    function computes the discrete Fourier transform of an N-dimensional input along
    the last dimension, and is batched along the first N-1 dimensions. By default,
    however, it will ignore the sharding of the input and gather the input on all
    devices. However, since `jax.numpy.fft.fft` is batched along the first N-1 dimensions,
    this is unnecessary. We will create a new `my_fft` op that, instead, does not
    alter the sharding along the first N-1 dimensions, and only gathers the input
    along the last dimension if needed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想增强现有的 `jax.numpy.fft.fft`。该函数计算 N 维输入沿最后一个维度的离散 Fourier 变换，并且在前 N-1
    维度上进行批处理。但是，默认情况下，它会忽略输入的分片并在所有设备上收集输入。然而，由于 `jax.numpy.fft.fft` 在前 N-1 维度上进行批处理，这是不必要的。我们将创建一个新的
    `my_fft` 操作，它不会改变前 N-1 维度上的分片，并且仅在需要时沿最后一个维度收集输入。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now create a 2D array sharded along the first axis, pass it through `my_fft`
    and notice how it is still sharded as expected, and identical to the output of
    `fft`. However, inspecting the HLO (using `lower(x).compile().runtime_executable().hlo_modules()`)
    reveals that `my_fft` does not create any all-gather or dynamic-slice, while `fft`
    does.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个沿第一个轴分片的二维数组，通过 `my_fft` 处理它，并注意它仍按预期进行分片，并且与 `fft` 的输出相同。但是，检查 HLO（使用
    `lower(x).compile().runtime_executable().hlo_modules()`）显示 `my_fft` 不创建任何全收集或动态切片，而
    `fft` 则创建。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because of the logic in `supported_sharding`, `my_fft` also works on 1-dimensional
    arrays. However, in this case, the HLO of `my_fft` does show a dynamic-slice,
    since the last dimension is the dimension along which FFTs are calculated and
    needs to be replicated on all devices before the computation can be done.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `supported_sharding` 中的逻辑，`my_fft` 也适用于一维数组。但是，在这种情况下，`my_fft` 的 HLO 显示动态切片，因为最后一个维度是计算
    FFT 的维度，在计算之前需要在所有设备上复制。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
