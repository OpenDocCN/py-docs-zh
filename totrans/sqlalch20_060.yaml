- en: ORM Internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/internals.html](https://docs.sqlalchemy.org/en/20/orm/internals.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Key ORM constructs, not otherwise covered in other sections, are listed here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AttributeEventToken](#sqlalchemy.orm.AttributeEventToken) | A token propagated
    throughout the course of a chain of attribute events. |'
  prefs: []
  type: TYPE_TB
- en: '| [AttributeState](#sqlalchemy.orm.AttributeState) | Provide an inspection
    interface corresponding to a particular attribute on a particular mapped object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [CascadeOptions](#sqlalchemy.orm.CascadeOptions) | Keeps track of the options
    sent to [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") |'
  prefs: []
  type: TYPE_TB
- en: '| [ClassManager](#sqlalchemy.orm.ClassManager) | Tracks state information at
    the class level. |'
  prefs: []
  type: TYPE_TB
- en: '| [ColumnProperty](#sqlalchemy.orm.ColumnProperty) | Describes an object attribute
    that corresponds to a table column or other column expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [Composite](#sqlalchemy.orm.Composite) | Declarative-compatible front-end
    for the [`CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")
    class. |'
  prefs: []
  type: TYPE_TB
- en: '| [CompositeProperty](#sqlalchemy.orm.CompositeProperty) | Defines a “composite”
    mapped attribute, representing a collection of columns as one attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [IdentityMap](#sqlalchemy.orm.IdentityMap) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [InspectionAttr](#sqlalchemy.orm.InspectionAttr) | A base class applied to
    all ORM objects and attributes that are related to things that can be returned
    by the [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [InspectionAttrExtensionType](#sqlalchemy.orm.InspectionAttrExtensionType)
    | Symbols indicating the type of extension that a [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") is part of. |'
  prefs: []
  type: TYPE_TB
- en: '| [InspectionAttrInfo](#sqlalchemy.orm.InspectionAttrInfo) | Adds the `.info`
    attribute to [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [InstanceState](#sqlalchemy.orm.InstanceState) | tracks state information
    at the instance level. |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentedAttribute](#sqlalchemy.orm.InstrumentedAttribute) | Base class
    for [descriptor](../glossary.html#term-descriptor) objects that intercept attribute
    events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    is accessible via the `QueryableAttribute.property` attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [LoaderCallableStatus](#sqlalchemy.orm.LoaderCallableStatus) | An enumeration.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Mapped](#sqlalchemy.orm.Mapped) | Represent an ORM mapped attribute on a
    mapped class. |'
  prefs: []
  type: TYPE_TB
- en: '| [MappedColumn](#sqlalchemy.orm.MappedColumn) | Maps a single [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") on a class. |'
  prefs: []
  type: TYPE_TB
- en: '| [MappedSQLExpression](#sqlalchemy.orm.MappedSQLExpression) | Declarative
    front-end for the [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    class. |'
  prefs: []
  type: TYPE_TB
- en: '| [MapperProperty](#sqlalchemy.orm.MapperProperty) | Represent a particular
    class attribute mapped by [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [merge_frozen_result](#sqlalchemy.orm.merge_frozen_result)(session, statement,
    frozen_result[, load]) | Merge a [`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") back into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), returning a new [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with [persistent](../glossary.html#term-persistent)
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [merge_result](#sqlalchemy.orm.merge_result)(query, iterator[, load]) | Merge
    a result into the given [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s Session. |'
  prefs: []
  type: TYPE_TB
- en: '| [NotExtension](#sqlalchemy.orm.NotExtension) | An enumeration. |'
  prefs: []
  type: TYPE_TB
- en: '| [PropComparator](#sqlalchemy.orm.PropComparator) | Defines SQL operations
    for ORM mapped attributes. |'
  prefs: []
  type: TYPE_TB
- en: '| [QueryableAttribute](#sqlalchemy.orm.QueryableAttribute) | Base class for
    [descriptor](../glossary.html#term-descriptor) objects that intercept attribute
    events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    is accessible via the `QueryableAttribute.property` attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [QueryContext](#sqlalchemy.orm.QueryContext) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [Relationship](#sqlalchemy.orm.Relationship) | Describes an object property
    that holds a single item or list of items that correspond to a related database
    table. |'
  prefs: []
  type: TYPE_TB
- en: '| [RelationshipDirection](#sqlalchemy.orm.RelationshipDirection) | enumeration
    which indicates the ‘direction’ of a [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"). |'
  prefs: []
  type: TYPE_TB
- en: '| [RelationshipProperty](#sqlalchemy.orm.RelationshipProperty) | Describes
    an object property that holds a single item or list of items that correspond to
    a related database table. |'
  prefs: []
  type: TYPE_TB
- en: '| [SQLORMExpression](#sqlalchemy.orm.SQLORMExpression) | A type that may be
    used to indicate any ORM-level attribute or object that acts in place of one,
    in the context of SQL expression construction. |'
  prefs: []
  type: TYPE_TB
- en: '| [Synonym](#sqlalchemy.orm.Synonym) | Declarative front-end for the [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") class. |'
  prefs: []
  type: TYPE_TB
- en: '| [SynonymProperty](#sqlalchemy.orm.SynonymProperty) | Denote an attribute
    name as a synonym to a mapped property, in that the attribute will mirror the
    value and expression behavior of another attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [UOWTransaction](#sqlalchemy.orm.UOWTransaction) |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Provide an inspection interface corresponding to a particular attribute on a
    particular mapped object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AttributeState`](#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    object is accessed via the [`InstanceState.attrs`](#sqlalchemy.orm.InstanceState.attrs
    "sqlalchemy.orm.InstanceState.attrs") collection of a particular [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState"):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[history](#sqlalchemy.orm.AttributeState.history), [load_history()](#sqlalchemy.orm.AttributeState.load_history),
    [loaded_value](#sqlalchemy.orm.AttributeState.loaded_value), [value](#sqlalchemy.orm.AttributeState.value)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Return the current **pre-flush** change history for this attribute, via the
    [`History`](session_api.html#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: This method will **not** emit loader callables if the value of the attribute
    is unloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The attribute history system tracks changes on a **per flush basis**. Each time
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is flushed, the history of each attribute is reset to empty. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by default autoflushes each time a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is invoked. For options on how to control this, see [Flushing](session_basics.html#session-flushing).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeState.load_history()`](#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - retrieve history using loader
    callables if the value is not locally present.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history "sqlalchemy.orm.attributes.get_history")
    - underlying function'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Return the current **pre-flush** change history for this attribute, via the
    [`History`](session_api.html#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: This method **will** emit loader callables if the value of the attribute is
    unloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The attribute history system tracks changes on a **per flush basis**. Each time
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is flushed, the history of each attribute is reset to empty. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by default autoflushes each time a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is invoked. For options on how to control this, see [Flushing](session_basics.html#session-flushing).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeState.history`](#sqlalchemy.orm.AttributeState.history "sqlalchemy.orm.AttributeState.history")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history "sqlalchemy.orm.attributes.get_history")
    - underlying function'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The current value of this attribute as loaded from the database.
  prefs: []
  type: TYPE_NORMAL
- en: If the value has not been loaded, or is otherwise not present in the object’s
    dictionary, returns NO_VALUE.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Return the value of this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: This operation is equivalent to accessing the object’s attribute directly or
    via `getattr()`, and will fire off any pending loader callables if needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Keeps track of the options sent to [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.CascadeOptions`](#sqlalchemy.orm.CascadeOptions "sqlalchemy.orm.CascadeOptions")
    (`builtins.frozenset`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tracks state information at the class level.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[deferred_scalar_loader](#sqlalchemy.orm.ClassManager.deferred_scalar_loader),
    [expired_attribute_loader](#sqlalchemy.orm.ClassManager.expired_attribute_loader),
    [has_parent()](#sqlalchemy.orm.ClassManager.has_parent), [manage()](#sqlalchemy.orm.ClassManager.manage),
    [state_getter()](#sqlalchemy.orm.ClassManager.state_getter), [unregister()](#sqlalchemy.orm.ClassManager.unregister)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.ClassManager`](#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")
    (`sqlalchemy.util.langhelpers.HasMemoized`, `builtins.dict`, `typing.Generic`,
    `sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.4: The ClassManager.deferred_scalar_loader attribute
    is now named expired_attribute_loader'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: previously known as deferred_scalar_loader
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: TODO
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Mark this instance as the manager for its class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return a (instance) -> InstanceState callable.
  prefs: []
  type: TYPE_NORMAL
- en: “state getter” callables should raise either KeyError or AttributeError if no
    InstanceState could be found for the instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: remove all instrumentation established by this ClassManager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Describes an object attribute that corresponds to a table column or other column
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Public constructor is the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[expressions](#sqlalchemy.orm.ColumnProperty.Comparator.expressions), [operate()](#sqlalchemy.orm.ColumnProperty.Comparator.operate),
    [reverse_operate()](#sqlalchemy.orm.ColumnProperty.Comparator.reverse_operate),
    [columns_to_assign](#sqlalchemy.orm.ColumnProperty.columns_to_assign), [declarative_scan()](#sqlalchemy.orm.ColumnProperty.declarative_scan),
    [do_init()](#sqlalchemy.orm.ColumnProperty.do_init), [expression](#sqlalchemy.orm.ColumnProperty.expression),
    [instrument_class()](#sqlalchemy.orm.ColumnProperty.instrument_class), [mapper_property_to_assign](#sqlalchemy.orm.ColumnProperty.mapper_property_to_assign),
    [merge()](#sqlalchemy.orm.ColumnProperty.merge)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    (`sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm.StrategizedProperty`, `sqlalchemy.orm._IntrospectsAnnotations`,
    [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Produce boolean, comparison, and other operators for [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") for a brief overview.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.ColumnProperty.Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator
    "sqlalchemy.orm.ColumnProperty.Comparator") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The full sequence of columns referenced by this
  prefs: []
  type: TYPE_NORMAL
- en: attribute, adjusted for any aliasing in progress.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.17.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Mapping a Class against Multiple Tables](nonstandard_mappings.html#maptojoin)
    - usage example'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.orm.ColumnProperty.Comparator.operate
    "sqlalchemy.orm.ColumnProperty.Comparator.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Perform class-specific initializaton at early declarative scanning time.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Perform subclass-specific initialization post-mapper-creation steps.
  prefs: []
  type: TYPE_NORMAL
- en: This is a template method called by the `MapperProperty` object’s init() method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Return the primary column or expression for this ColumnProperty.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Composing from Column Properties at Mapping Time](mapped_sql_expr.html#mapper-column-property-sql-expressions-composed)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  prefs: []
  type: TYPE_NORMAL
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Merge the attribute represented by this `MapperProperty` from source to destination
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Declarative-compatible front-end for the [`CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") class.
  prefs: []
  type: TYPE_NORMAL
- en: Public constructor is the [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Added [`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")
    as a Declarative compatible subclass of [`CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Composite Column Types](composites.html#mapper-composite)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")
    ([`sqlalchemy.orm.descriptor_props.CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.descriptor_props.CompositeProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Defines a “composite” mapped attribute, representing a collection of columns
    as one attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[`CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")
    is constructed using the [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Composite Column Types](composites.html#mapper-composite)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[create_row_processor()](#sqlalchemy.orm.CompositeProperty.CompositeBundle.create_row_processor),
    [columns_to_assign](#sqlalchemy.orm.CompositeProperty.columns_to_assign), [declarative_scan()](#sqlalchemy.orm.CompositeProperty.declarative_scan),
    [do_init()](#sqlalchemy.orm.CompositeProperty.do_init), [get_history()](#sqlalchemy.orm.CompositeProperty.get_history),
    [instrument_class()](#sqlalchemy.orm.CompositeProperty.instrument_class), [mapper_property_to_assign](#sqlalchemy.orm.CompositeProperty.mapper_property_to_assign)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") (`sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm._IntrospectsAnnotations`,
    `sqlalchemy.orm.descriptor_props.DescriptorProperty`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Produce boolean, comparison, and other operators for [`Composite`](#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite") attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See the example in [Redefining Comparison Operations for Composites](composites.html#composite-operations)
    for an overview of usage , as well as the documentation for [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.CompositeProperty.Comparator`](#sqlalchemy.orm.CompositeProperty.Comparator
    "sqlalchemy.orm.CompositeProperty.Comparator") ([`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.CompositeProperty.CompositeBundle`](#sqlalchemy.orm.CompositeProperty.CompositeBundle
    "sqlalchemy.orm.CompositeProperty.CompositeBundle") ([`sqlalchemy.orm.Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Produce the “row processing” function for this [`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates replacing the usual [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'A result from the above [`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") will return dictionary values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Perform class-specific initializaton at early declarative scanning time.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Initialization which occurs after the [`Composite`](#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite") has been associated with its parent mapper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Provided for userland code that uses attributes.get_history().
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  prefs: []
  type: TYPE_NORMAL
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: A token propagated throughout the course of a chain of attribute events.
  prefs: []
  type: TYPE_NORMAL
- en: Serves as an indicator of the source of the event and also provides a means
    of controlling propagation across a chain of attribute operations.
  prefs: []
  type: TYPE_NORMAL
- en: The `Event` object is sent as the `initiator` argument when dealing with events
    such as [`AttributeEvents.append()`](events.html#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append"), [`AttributeEvents.set()`](events.html#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set"), and [`AttributeEvents.remove()`](events.html#sqlalchemy.orm.AttributeEvents.remove
    "sqlalchemy.orm.AttributeEvents.remove").
  prefs: []
  type: TYPE_NORMAL
- en: The `Event` object is currently interpreted by the backref event handlers, and
    is used to control the propagation of operations across two mutually-dependent
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Changed the name from `AttributeEvent` to `AttributeEventToken`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attribute impl:'
  prefs: []
  type: TYPE_NORMAL
- en: The `AttributeImpl` which is the current event initiator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attribute op:'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol `OP_APPEND`, `OP_REMOVE`, `OP_REPLACE`, or `OP_BULK_REPLACE`, indicating
    the source operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[check_modified()](#sqlalchemy.orm.IdentityMap.check_modified)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: return True if any InstanceStates present have been marked as ‘modified’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: A base class applied to all ORM objects and attributes that are related to things
    that can be returned by the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function.
  prefs: []
  type: TYPE_NORMAL
- en: The attributes defined here allow the usage of simple boolean checks to test
    basic facts about the object returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[extension_type](#sqlalchemy.orm.InspectionAttr.extension_type), [is_aliased_class](#sqlalchemy.orm.InspectionAttr.is_aliased_class),
    [is_attribute](#sqlalchemy.orm.InspectionAttr.is_attribute), [is_bundle](#sqlalchemy.orm.InspectionAttr.is_bundle),
    [is_clause_element](#sqlalchemy.orm.InspectionAttr.is_clause_element), [is_instance](#sqlalchemy.orm.InspectionAttr.is_instance),
    [is_mapper](#sqlalchemy.orm.InspectionAttr.is_mapper), [is_property](#sqlalchemy.orm.InspectionAttr.is_property),
    [is_selectable](#sqlalchemy.orm.InspectionAttr.is_selectable)'
  prefs: []
  type: TYPE_NORMAL
- en: While the boolean checks here are basically the same as using the Python isinstance()
    function, the flags here can be used without the need to import all of these classes,
    and also such that the SQLAlchemy class system can change while leaving the flags
    here intact for forwards-compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HybridExtensionType`](extensions/hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyExtensionType`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`AliasedClass`](queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is a Python [descriptor](../glossary.html#term-descriptor).
  prefs: []
  type: TYPE_NORMAL
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this object is an instance of [`Selectable`](../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Adds the `.info` attribute to [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr").
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    vs. [`InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo "sqlalchemy.orm.InspectionAttrInfo")
    is that the former is compatible as a mixin for classes that specify `__slots__`;
    this is essentially an implementation artifact.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[info](#sqlalchemy.orm.InspectionAttrInfo.info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.InspectionAttrInfo") ([`sqlalchemy.orm.base.InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: tracks state information at the instance level.
  prefs: []
  type: TYPE_NORMAL
- en: The [`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is a key object used by the SQLAlchemy ORM in order to track the state of an object;
    it is created the moment an object is instantiated, typically as a result of [instrumentation](../glossary.html#term-instrumentation)
    which SQLAlchemy applies to the `__init__()` method of the class.
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is also a semi-public object, available for runtime inspection as to the state
    of a mapped instance, including information such as its current status within
    a particular [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and details about data on individual attributes. The public API in order to acquire
    a [`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    object is to use the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspection of Mapped Instances](mapping_styles.html#orm-mapper-inspection-instancestate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[async_session](#sqlalchemy.orm.InstanceState.async_session), [attrs](#sqlalchemy.orm.InstanceState.attrs),
    [callables](#sqlalchemy.orm.InstanceState.callables), [deleted](#sqlalchemy.orm.InstanceState.deleted),
    [detached](#sqlalchemy.orm.InstanceState.detached), [dict](#sqlalchemy.orm.InstanceState.dict),
    [expired_attributes](#sqlalchemy.orm.InstanceState.expired_attributes), [has_identity](#sqlalchemy.orm.InstanceState.has_identity),
    [identity](#sqlalchemy.orm.InstanceState.identity), [identity_key](#sqlalchemy.orm.InstanceState.identity_key),
    [is_instance](#sqlalchemy.orm.InstanceState.is_instance), [mapper](#sqlalchemy.orm.InstanceState.mapper),
    [object](#sqlalchemy.orm.InstanceState.object), [pending](#sqlalchemy.orm.InstanceState.pending),
    [persistent](#sqlalchemy.orm.InstanceState.persistent), [session](#sqlalchemy.orm.InstanceState.session),
    [transient](#sqlalchemy.orm.InstanceState.transient), [unloaded](#sqlalchemy.orm.InstanceState.unloaded),
    [unloaded_expirable](#sqlalchemy.orm.InstanceState.unloaded_expirable), [unmodified](#sqlalchemy.orm.InstanceState.unmodified),
    [unmodified_intersection()](#sqlalchemy.orm.InstanceState.unmodified_intersection),
    [was_deleted](#sqlalchemy.orm.InstanceState.was_deleted)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    ([`sqlalchemy.orm.base.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Return the owning [`AsyncSession`](extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") for this instance, or `None` if none available.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is only non-None when the `sqlalchemy.ext.asyncio` API is in
    use for this ORM object. The returned [`AsyncSession`](extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") object will be a proxy for the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object that would be returned from the [`InstanceState.session`](#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") attribute for this [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Asynchronous I/O (asyncio)](extensions/asyncio.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Return a namespace representing each attribute on the mapped object, including
    its current value and history.
  prefs: []
  type: TYPE_NORMAL
- en: The returned object is an instance of [`AttributeState`](#sqlalchemy.orm.AttributeState
    "sqlalchemy.orm.AttributeState"). This object allows inspection of the current
    data within an attribute as well as attribute history since the last flush.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: A namespace where a per-state loader callable can be associated.
  prefs: []
  type: TYPE_NORMAL
- en: In SQLAlchemy 1.0, this is only used for lazy loaders / deferred loaders that
    were set up via query option.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, callables was used also to indicate expired attributes by storing
    a link to the InstanceState itself in this dictionary. This role is now handled
    by the expired_attributes set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the object is [deleted](../glossary.html#term-deleted).
  prefs: []
  type: TYPE_NORMAL
- en: An object that is in the deleted state is guaranteed to not be within the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") of its parent [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"); however if the session’s transaction is rolled back,
    the object will be restored to the persistent state and the identity map.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    attribute refers to a specific state of the object that occurs between the “persistent”
    and “detached” states; once the object is [detached](../glossary.html#term-detached),
    the [`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    attribute **no longer returns True**; in order to detect that a state was deleted,
    regardless of whether or not the object is associated with a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), use the [`InstanceState.was_deleted`](#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the object is [detached](../glossary.html#term-detached).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Return the instance dict used by the object.
  prefs: []
  type: TYPE_NORMAL
- en: Under normal circumstances, this is always synonymous with the `__dict__` attribute
    of the mapped object, unless an alternative instrumentation system has been configured.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that the actual object has been garbage collected, this accessor
    returns a blank dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The set of keys which are ‘expired’ to be loaded by the manager’s deferred scalar
    loader, assuming no pending changes.
  prefs: []
  type: TYPE_NORMAL
- en: see also the `unmodified` collection which is intersected against this set when
    a refresh operation occurs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this object has an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: This should always have the same value as the expression `state.persistent`
    or `state.detached`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Return the mapped identity of the mapped object. This is the primary key identity
    as persisted by the ORM which can always be passed directly to [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get").
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if the object has no primary key identity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: An object which is [transient](../glossary.html#term-transient) or [pending](../glossary.html#term-pending)
    does **not** have a mapped identity until it is flushed, even if its attributes
    include primary key values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Return the identity key for the mapped object.
  prefs: []
  type: TYPE_NORMAL
- en: This is the key used to locate the object within the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") mapping. It contains the identity as returned
    by [`identity`](#sqlalchemy.orm.InstanceState.identity "sqlalchemy.orm.InstanceState.identity")
    within it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    used for this mapped object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Return the mapped object represented by this [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  prefs: []
  type: TYPE_NORMAL
- en: Returns None if the object has been garbage collected
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the object is [pending](../glossary.html#term-pending).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the object is [persistent](../glossary.html#term-persistent).
  prefs: []
  type: TYPE_NORMAL
- en: An object that is in the persistent state is guaranteed to be within the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") of its parent [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Return the owning [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for this instance, or `None` if none available.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the result here can in some cases be *different* from that of `obj
    in session`; an object that’s been deleted will report as not `in session`, however
    if the transaction is still in progress, this attribute will still refer to that
    session. Only when the transaction is completed does the object become fully detached
    under normal circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceState.async_session`](#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the object is [transient](../glossary.html#term-transient).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Return the set of keys which do not have a loaded value.
  prefs: []
  type: TYPE_NORMAL
- en: This includes expired attributes and any other attribute that was never populated
    or modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Synonymous with [`InstanceState.unloaded`](#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`InstanceState.unloaded_expirable`](#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") attribute is deprecated. Please
    use [`InstanceState.unloaded`](#sqlalchemy.orm.InstanceState.unloaded "sqlalchemy.orm.InstanceState.unloaded").'
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was added as an implementation-specific detail at some point
    and should be considered to be private.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Return the set of keys which have no uncommitted changes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Return self.unmodified.intersection(keys).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this object is or was previously in the “deleted” state and has
    not been reverted to persistent.
  prefs: []
  type: TYPE_NORMAL
- en: This flag returns True once the object was deleted in flush. When the object
    is expunged from the session either explicitly or via transaction commit and enters
    the “detached” state, this flag will continue to report True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    - refers to the “deleted” state'
  prefs: []
  type: TYPE_NORMAL
- en: '[`was_deleted()`](session_api.html#sqlalchemy.orm.util.was_deleted "sqlalchemy.orm.util.was_deleted")
    - standalone function'
  prefs: []
  type: TYPE_NORMAL
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Base class for [descriptor](../glossary.html#term-descriptor) objects that intercept
    attribute events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") is accessible via the `QueryableAttribute.property`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute "sqlalchemy.orm.InstrumentedAttribute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") ([`sqlalchemy.orm.QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: An enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[ATTR_EMPTY](#sqlalchemy.orm.LoaderCallableStatus.ATTR_EMPTY), [ATTR_WAS_SET](#sqlalchemy.orm.LoaderCallableStatus.ATTR_WAS_SET),
    [NEVER_SET](#sqlalchemy.orm.LoaderCallableStatus.NEVER_SET), [NO_VALUE](#sqlalchemy.orm.LoaderCallableStatus.NO_VALUE),
    [PASSIVE_CLASS_MISMATCH](#sqlalchemy.orm.LoaderCallableStatus.PASSIVE_CLASS_MISMATCH),
    [PASSIVE_NO_RESULT](#sqlalchemy.orm.LoaderCallableStatus.PASSIVE_NO_RESULT)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.LoaderCallableStatus`](#sqlalchemy.orm.LoaderCallableStatus
    "sqlalchemy.orm.LoaderCallableStatus") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Symbol used internally to indicate an attribute had no callable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Symbol returned by a loader callable to indicate the retrieved value, or values,
    were assigned to their attributes on the target object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Synonymous with NO_VALUE
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: NEVER_SET was merged with NO_VALUE'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Symbol which may be placed as the ‘previous’ value of an attribute, indicating
    no value was loaded for an attribute when it was modified, and flags indicated
    we were not to load it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating that an object is locally present for a given primary key
    identity but it is not of the requested class. The return value is therefore None
    and no SQL should be emitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Symbol returned by a loader callable or other attribute/history retrieval operation
    when a value could not be determined, based on loader callable flags.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Represent an ORM mapped attribute on a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: This class represents the complete descriptor interface for any class attribute
    that will have been [instrumented](../glossary.html#term-instrumented) by the
    ORM [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class. Provides appropriate information to type checkers such as pylance and mypy
    so that ORM-mapped attributes are correctly typed.
  prefs: []
  type: TYPE_NORMAL
- en: The most prominent use of [`Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    is in the [Declarative Mapping](declarative_styles.html#orm-explicit-declarative-base)
    form of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    configuration, where used explicitly it drives the configuration of ORM attributes
    such as `mapped_class()` and [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using a Declarative Base Class](declarative_styles.html#orm-explicit-declarative-base)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped") class represents
    attributes that are handled directly by the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class. It does not include other Python descriptor classes
    that are provided as extensions, including [Hybrid Attributes](extensions/hybrid.html)
    and the [Association Proxy](extensions/associationproxy.html). While these systems
    still make use of ORM-specific superclasses and structures, they are not [instrumented](../glossary.html#term-instrumented)
    by the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    and instead provide their own functionality when they are accessed on a class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    ([`sqlalchemy.orm.base.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.base.SQLORMExpression"),
    `sqlalchemy.orm.base.ORMDescriptor`, `sqlalchemy.orm.base._MappedAnnotationBase`,
    `sqlalchemy.sql.roles.DDLConstraintColumnRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Maps a single [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    on a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    is a specialization of the [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    class and is oriented towards declarative configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: To construct [`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    objects, use the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") constructor function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    (`sqlalchemy.orm._IntrospectsAnnotations`, `sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm.base._DeclarativeMapped`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Represent a particular class attribute mapped by [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: The most common occurrences of [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") are the mapped [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which is represented in a mapping as an instance
    of [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty"),
    and a reference to another class produced by [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), represented in the mapping as an instance of [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[cascade_iterator()](#sqlalchemy.orm.MapperProperty.cascade_iterator), [class_attribute](#sqlalchemy.orm.MapperProperty.class_attribute),
    [comparator](#sqlalchemy.orm.MapperProperty.comparator), [create_row_processor()](#sqlalchemy.orm.MapperProperty.create_row_processor),
    [do_init()](#sqlalchemy.orm.MapperProperty.do_init), [doc](#sqlalchemy.orm.MapperProperty.doc),
    [info](#sqlalchemy.orm.MapperProperty.info), [init()](#sqlalchemy.orm.MapperProperty.init),
    [instrument_class()](#sqlalchemy.orm.MapperProperty.instrument_class), [is_property](#sqlalchemy.orm.MapperProperty.is_property),
    [key](#sqlalchemy.orm.MapperProperty.key), [merge()](#sqlalchemy.orm.MapperProperty.merge),
    [parent](#sqlalchemy.orm.MapperProperty.parent), [post_instrument_class()](#sqlalchemy.orm.MapperProperty.post_instrument_class),
    [set_parent()](#sqlalchemy.orm.MapperProperty.set_parent), [setup()](#sqlalchemy.orm.MapperProperty.setup)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    ([`sqlalchemy.sql.cache_key.HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), `sqlalchemy.orm._DCAttributeOptions`,
    `sqlalchemy.orm.base._MappedAttribute`, [`sqlalchemy.orm.base.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.util.langhelpers.MemoizedSlots`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through instances related to the given instance for a particular ‘cascade’,
    starting with this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: Return an iterator3-tuples (instance, mapper, state).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the ‘cascade’ collection on this MapperProperty is checked first for
    the given type before cascade_iterator is called.
  prefs: []
  type: TYPE_NORMAL
- en: This method typically only applies to Relationship.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Return the class-bound descriptor corresponding to this [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  prefs: []
  type: TYPE_NORMAL
- en: 'This is basically a `getattr()` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'I.e. if this [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    were named `addresses`, and the class to which it is mapped is `User`, this sequence
    is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    instance that implements SQL expression construction on behalf of this mapped
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Produce row processing functions and append to the given set of populators lists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Perform subclass-specific initialization post-mapper-creation steps.
  prefs: []
  type: TYPE_NORMAL
- en: This is a template method called by the `MapperProperty` object’s init() method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: optional documentation string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Called after all mappers are created to assemble relationships between mappers
    and perform other post-mapper-creation initialization steps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  prefs: []
  type: TYPE_NORMAL
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Part of the InspectionAttr interface; states this object is a mapper property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: name of class attribute
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Merge the attribute represented by this `MapperProperty` from source to destination
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    managing this property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Perform instrumentation adjustments that need to occur after init() has completed.
  prefs: []
  type: TYPE_NORMAL
- en: The given Mapper is the Mapper invoking the operation, which may not be the
    same Mapper as self.parent in an inheritance scenario; however, Mapper will always
    at least be a sub-mapper of self.parent.
  prefs: []
  type: TYPE_NORMAL
- en: This method is typically used by StrategizedProperty, which delegates it to
    LoaderStrategy.init_class_attribute() to perform final setup on the class-bound
    InstrumentedAttribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Set the parent mapper that references this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by some subclasses to perform extra setup when the
    mapper is first known.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Called by Query for the purposes of constructing a SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: Each MapperProperty associated with the target mapper processes the statement
    referenced by the query context, adding columns and/or criterion as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Declarative front-end for the [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") class.
  prefs: []
  type: TYPE_NORMAL
- en: Public constructor is the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Added [`MappedSQLExpression`](#sqlalchemy.orm.MappedSQLExpression
    "sqlalchemy.orm.MappedSQLExpression") as a Declarative compatible subclass for
    [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.MappedSQLExpression`](#sqlalchemy.orm.MappedSQLExpression
    "sqlalchemy.orm.MappedSQLExpression") ([`sqlalchemy.orm.properties.ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.properties.ColumnProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Symbols indicating the type of extension that a [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") is part of.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.InspectionAttrExtensionType`](#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.InspectionAttrExtensionType") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: An enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[NOT_EXTENSION](#sqlalchemy.orm.NotExtension.NOT_EXTENSION)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.NotExtension`](#sqlalchemy.orm.NotExtension "sqlalchemy.orm.NotExtension")
    ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating an [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    that’s not part of sqlalchemy.ext.
  prefs: []
  type: TYPE_NORMAL
- en: Is assigned to the [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Merge a result into the given [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s Session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`merge_result()`](#sqlalchemy.orm.merge_result
    "sqlalchemy.orm.merge_result") function is considered legacy as of the 1.x series
    of SQLAlchemy and becomes a legacy construct in 2.0\. The function as well as
    the method on [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    is superseded by the [`merge_frozen_result()`](#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") function. (Background on SQLAlchemy 2.0
    at: [SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: See [`Query.merge_result()`](queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") for top-level documentation on this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Merge a [`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") back into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), returning a new [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with [persistent](../glossary.html#term-persistent)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Defines SQL operations for ORM mapped attributes.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy allows for operators to be redefined at both the Core and ORM level.
    [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    is the base class of operator redefinition for ORM-level operations, including
    those of [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty"),
    [`Relationship`](#sqlalchemy.orm.Relationship "sqlalchemy.orm.Relationship"),
    and [`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite").
  prefs: []
  type: TYPE_NORMAL
- en: 'User-defined subclasses of [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") may be created. The built-in Python comparison
    and math operator methods, such as `ColumnOperators.__eq__()`, `ColumnOperators.__lt__()`,
    and `ColumnOperators.__add__()`, can be overridden to provide new operator behavior.
    The custom [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    is passed to the [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    instance via the `comparator_factory` argument. In each case, the appropriate
    subclass of [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    should be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Note that for column-level operator redefinition, it’s usually simpler to define
    the operators at the Core level, using the [`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory") attribute. See [Redefining and
    Creating New Operators](../core/custom_types.html#types-operators) for more detail.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator "sqlalchemy.orm.ColumnProperty.Comparator")'
  prefs: []
  type: TYPE_NORMAL
- en: '`Comparator`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Comparator`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__eq__()](#sqlalchemy.orm.PropComparator.__eq__), [__le__()](#sqlalchemy.orm.PropComparator.__le__),
    [__lt__()](#sqlalchemy.orm.PropComparator.__lt__), [__ne__()](#sqlalchemy.orm.PropComparator.__ne__),
    [adapt_to_entity()](#sqlalchemy.orm.PropComparator.adapt_to_entity), [adapter](#sqlalchemy.orm.PropComparator.adapter),
    [all_()](#sqlalchemy.orm.PropComparator.all_), [and_()](#sqlalchemy.orm.PropComparator.and_),
    [any()](#sqlalchemy.orm.PropComparator.any), [any_()](#sqlalchemy.orm.PropComparator.any_),
    [asc()](#sqlalchemy.orm.PropComparator.asc), [between()](#sqlalchemy.orm.PropComparator.between),
    [bitwise_and()](#sqlalchemy.orm.PropComparator.bitwise_and), [bitwise_lshift()](#sqlalchemy.orm.PropComparator.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.orm.PropComparator.bitwise_not), [bitwise_or()](#sqlalchemy.orm.PropComparator.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.orm.PropComparator.bitwise_rshift), [bitwise_xor()](#sqlalchemy.orm.PropComparator.bitwise_xor),
    [bool_op()](#sqlalchemy.orm.PropComparator.bool_op), [collate()](#sqlalchemy.orm.PropComparator.collate),
    [concat()](#sqlalchemy.orm.PropComparator.concat), [contains()](#sqlalchemy.orm.PropComparator.contains),
    [desc()](#sqlalchemy.orm.PropComparator.desc), [distinct()](#sqlalchemy.orm.PropComparator.distinct),
    [endswith()](#sqlalchemy.orm.PropComparator.endswith), [has()](#sqlalchemy.orm.PropComparator.has),
    [icontains()](#sqlalchemy.orm.PropComparator.icontains), [iendswith()](#sqlalchemy.orm.PropComparator.iendswith),
    [ilike()](#sqlalchemy.orm.PropComparator.ilike), [in_()](#sqlalchemy.orm.PropComparator.in_),
    [is_()](#sqlalchemy.orm.PropComparator.is_), [is_distinct_from()](#sqlalchemy.orm.PropComparator.is_distinct_from),
    [is_not()](#sqlalchemy.orm.PropComparator.is_not), [is_not_distinct_from()](#sqlalchemy.orm.PropComparator.is_not_distinct_from),
    [isnot()](#sqlalchemy.orm.PropComparator.isnot), [isnot_distinct_from()](#sqlalchemy.orm.PropComparator.isnot_distinct_from),
    [istartswith()](#sqlalchemy.orm.PropComparator.istartswith), [like()](#sqlalchemy.orm.PropComparator.like),
    [match()](#sqlalchemy.orm.PropComparator.match), [not_ilike()](#sqlalchemy.orm.PropComparator.not_ilike),
    [not_in()](#sqlalchemy.orm.PropComparator.not_in), [not_like()](#sqlalchemy.orm.PropComparator.not_like),
    [notilike()](#sqlalchemy.orm.PropComparator.notilike), [notin_()](#sqlalchemy.orm.PropComparator.notin_),
    [notlike()](#sqlalchemy.orm.PropComparator.notlike), [nulls_first()](#sqlalchemy.orm.PropComparator.nulls_first),
    [nulls_last()](#sqlalchemy.orm.PropComparator.nulls_last), [nullsfirst()](#sqlalchemy.orm.PropComparator.nullsfirst),
    [nullslast()](#sqlalchemy.orm.PropComparator.nullslast), [of_type()](#sqlalchemy.orm.PropComparator.of_type),
    [op()](#sqlalchemy.orm.PropComparator.op), [operate()](#sqlalchemy.orm.PropComparator.operate),
    [property](#sqlalchemy.orm.PropComparator.property), [regexp_match()](#sqlalchemy.orm.PropComparator.regexp_match),
    [regexp_replace()](#sqlalchemy.orm.PropComparator.regexp_replace), [reverse_operate()](#sqlalchemy.orm.PropComparator.reverse_operate),
    [startswith()](#sqlalchemy.orm.PropComparator.startswith), [timetuple](#sqlalchemy.orm.PropComparator.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    (`sqlalchemy.orm.base.SQLORMOperations`, `typing.Generic`, [`sqlalchemy.sql.expression.ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this PropComparator which will use the given [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") to produce corresponding expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Produce a callable that adapts column expressions to suit an aliased version
    of this comparator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Add additional criteria to the ON clause that’s represented by this relationship
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Combining Relationship with Custom ON Criteria](queryguide/select.html#orm-queryguide-join-on-augmented)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding Criteria to loader options](queryguide/relationships.html#loader-option-criteria)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL expression representing true if this element references a member
    which meets the given criterion.
  prefs: []
  type: TYPE_NORMAL
- en: The usual implementation of `any()` is `Comparator.any()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`criterion` – an optional ClauseElement formulated against the member class’
    table or attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – key/value pairs corresponding to member class attribute names
    which will be compared via equality to the corresponding values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Return a SQL expression representing true if this element references a member
    which meets the given criterion.
  prefs: []
  type: TYPE_NORMAL
- en: The usual implementation of `has()` is `Comparator.has()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`criterion` – an optional ClauseElement formulated against the member class’
    table or attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – key/value pairs corresponding to member class attribute names
    which will be compared via equality to the corresponding values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Redefine this object in terms of a polymorphic subclass, [`with_polymorphic()`](queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct, or [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new PropComparator from which further criterion can be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**class_** – a class or mapper indicating that criterion will be against this
    specific subclass.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Relationship to join between aliased targets](queryguide/select.html#orm-queryguide-joining-relationships-aliased)
    - in the [ORM Querying Guide](queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joining to specific sub-types or with_polymorphic() entities](queryguide/inheritance.html#inheritance-of-type)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.operate()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    associated with this [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator").
  prefs: []
  type: TYPE_NORMAL
- en: Return values here will commonly be instances of [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") or [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.orm.PropComparator.operate "sqlalchemy.orm.PropComparator.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Describes an object property that holds a single item or list of items that
    correspond to a related database table.
  prefs: []
  type: TYPE_NORMAL
- en: Public constructor is the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Configuration](relationships.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Added [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") as a Declarative compatible subclass for [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Relationship`](#sqlalchemy.orm.Relationship "sqlalchemy.orm.Relationship")
    ([`sqlalchemy.orm.RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: enumeration which indicates the ‘direction’ of a [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[`RelationshipDirection`](#sqlalchemy.orm.RelationshipDirection "sqlalchemy.orm.RelationshipDirection")
    is accessible from the `Relationship.direction` attribute of [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[MANYTOMANY](#sqlalchemy.orm.RelationshipDirection.MANYTOMANY), [MANYTOONE](#sqlalchemy.orm.RelationshipDirection.MANYTOONE),
    [ONETOMANY](#sqlalchemy.orm.RelationshipDirection.ONETOMANY)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.RelationshipDirection`](#sqlalchemy.orm.RelationshipDirection
    "sqlalchemy.orm.RelationshipDirection") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the many-to-many direction for a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  prefs: []
  type: TYPE_NORMAL
- en: This symbol is typically used by the internals but may be exposed within certain
    API features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the many-to-one direction for a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  prefs: []
  type: TYPE_NORMAL
- en: This symbol is typically used by the internals but may be exposed within certain
    API features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the one-to-many direction for a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  prefs: []
  type: TYPE_NORMAL
- en: This symbol is typically used by the internals but may be exposed within certain
    API features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: Describes an object property that holds a single item or list of items that
    correspond to a related database table.
  prefs: []
  type: TYPE_NORMAL
- en: Public constructor is the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Configuration](relationships.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__eq__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__eq__), [__init__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__init__),
    [__ne__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__ne__), [adapt_to_entity()](#sqlalchemy.orm.RelationshipProperty.Comparator.adapt_to_entity),
    [and_()](#sqlalchemy.orm.RelationshipProperty.Comparator.and_), [any()](#sqlalchemy.orm.RelationshipProperty.Comparator.any),
    [contains()](#sqlalchemy.orm.RelationshipProperty.Comparator.contains), [entity](#sqlalchemy.orm.RelationshipProperty.Comparator.entity),
    [has()](#sqlalchemy.orm.RelationshipProperty.Comparator.has), [in_()](#sqlalchemy.orm.RelationshipProperty.Comparator.in_),
    [mapper](#sqlalchemy.orm.RelationshipProperty.Comparator.mapper), [of_type()](#sqlalchemy.orm.RelationshipProperty.Comparator.of_type),
    [cascade](#sqlalchemy.orm.RelationshipProperty.cascade), [cascade_iterator()](#sqlalchemy.orm.RelationshipProperty.cascade_iterator),
    [declarative_scan()](#sqlalchemy.orm.RelationshipProperty.declarative_scan), [do_init()](#sqlalchemy.orm.RelationshipProperty.do_init),
    [entity](#sqlalchemy.orm.RelationshipProperty.entity), [instrument_class()](#sqlalchemy.orm.RelationshipProperty.instrument_class),
    [mapper](#sqlalchemy.orm.RelationshipProperty.mapper), [merge()](#sqlalchemy.orm.RelationshipProperty.merge)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") (`sqlalchemy.orm._IntrospectsAnnotations`,
    `sqlalchemy.orm.StrategizedProperty`, [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Produce boolean, comparison, and other operators for [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") for a brief overview of ORM level operator definition.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator "sqlalchemy.orm.ColumnProperty.Comparator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.RelationshipProperty.Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a many-to-one context, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: 'this will typically produce a clause such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Where `<some id>` is the primary key of the given object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `==` operator provides partial functionality for non- many-to-one comparisons:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparisons against collections are not supported. Use `Comparator.contains()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compared to a scalar one-to-many, will produce a clause that compares the target
    columns in the parent to the given target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compared to a scalar many-to-many, an alias of the association table will be
    rendered as well, forming a natural join that is part of the main body of the
    query. This will not work for queries that go beyond simple AND conjunctions of
    comparisons, such as those which use OR. Use explicit joins, outerjoins, or `Comparator.has()`
    for more comprehensive non-many-to-one scalar membership tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparisons against `None` given in a one-to-many or many-to-many context produce
    a NOT EXISTS clause.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Construction of [`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator") is internal to the ORM’s attribute
    mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a many-to-one context, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'This will typically produce a clause such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Where `<some id>` is the primary key of the given object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `!=` operator provides partial functionality for non- many-to-one comparisons:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparisons against collections are not supported. Use `Comparator.contains()`
    in conjunction with [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compared to a scalar one-to-many, will produce a clause that compares the target
    columns in the parent to the given target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compared to a scalar many-to-many, an alias of the association table will be
    rendered as well, forming a natural join that is part of the main body of the
    query. This will not work for queries that go beyond simple AND conjunctions of
    comparisons, such as those which use OR. Use explicit joins, outerjoins, or `Comparator.has()`
    in conjunction with [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") for more comprehensive non-many-to-one scalar
    membership tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparisons against `None` given in a one-to-many or many-to-many context produce
    an EXISTS clause.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this PropComparator which will use the given [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") to produce corresponding expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Add AND criteria.
  prefs: []
  type: TYPE_NORMAL
- en: See [`PropComparator.and_()`](#sqlalchemy.orm.PropComparator.and_ "sqlalchemy.orm.PropComparator.and_")
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: Produce an expression that tests a collection against particular criterion,
    using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: 'An expression like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: 'Will produce a query like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Because `Comparator.any()` uses a correlated subquery, its performance is not
    nearly as good when compared against large target tables as that of using a join.
  prefs: []
  type: TYPE_NORMAL
- en: '`Comparator.any()` is particularly useful for testing for empty collections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: 'will produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '`Comparator.any()` is only valid for collections, i.e. a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that has `uselist=True`. For scalar references,
    use `Comparator.has()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: Return a simple expression that tests a collection for containment of a particular
    item.
  prefs: []
  type: TYPE_NORMAL
- en: '`Comparator.contains()` is only valid for a collection, i.e. a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that implements one-to-many or many-to-many with
    `uselist=True`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When used in a simple one-to-many context, an expression like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'Produces a clause like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Where `<some id>` is the value of the foreign key attribute on `other` which
    refers to the primary key of its parent object. From this it follows that `Comparator.contains()`
    is very useful when used with simple one-to-many operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For many-to-many operations, the behavior of `Comparator.contains()` has more
    caveats. The association table will be rendered in the statement, producing an
    “implicit” join, that is, includes multiple tables in the FROM clause which are
    equated in the WHERE clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: 'Produces a query like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Where `<some id>` would be the primary key of `other`. From the above, it is
    clear that `Comparator.contains()` will **not** work with many-to-many collections
    when used in queries that move beyond simple AND conjunctions, such as multiple
    `Comparator.contains()` expressions joined by OR. In such cases subqueries or
    explicit “outer joins” will need to be used instead. See `Comparator.any()` for
    a less-performant alternative using EXISTS, or refer to [`Query.outerjoin()`](queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") as well as [Joins](queryguide/select.html#orm-queryguide-joins)
    for more details on constructing outer joins.
  prefs: []
  type: TYPE_NORMAL
- en: kwargs may be ignored by this operator but are required for API conformance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: The target entity referred to by this [`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator").
  prefs: []
  type: TYPE_NORMAL
- en: This is either a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    or [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: This is the “target” or “remote” side of the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Produce an expression that tests a scalar reference against particular criterion,
    using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: 'An expression like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: 'Will produce a query like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Because `Comparator.has()` uses a correlated subquery, its performance is not
    nearly as good when compared against large target tables as that of using a join.
  prefs: []
  type: TYPE_NORMAL
- en: '`Comparator.has()` is only valid for scalar references, i.e. a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that has `uselist=False`. For collection references,
    use `Comparator.any()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: Produce an IN clause - this is not implemented for [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-based attributes at this time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: The target [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    referred to by this [`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator").
  prefs: []
  type: TYPE_NORMAL
- en: This is the “target” or “remote” side of the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: Redefine this object in terms of a polymorphic subclass.
  prefs: []
  type: TYPE_NORMAL
- en: See [`PropComparator.of_type()`](#sqlalchemy.orm.PropComparator.of_type "sqlalchemy.orm.PropComparator.of_type")
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: Return the current cascade setting for this [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through instances related to the given instance for a particular ‘cascade’,
    starting with this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: Return an iterator3-tuples (instance, mapper, state).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the ‘cascade’ collection on this MapperProperty is checked first for
    the given type before cascade_iterator is called.
  prefs: []
  type: TYPE_NORMAL
- en: This method typically only applies to Relationship.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: Perform class-specific initializaton at early declarative scanning time.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Perform subclass-specific initialization post-mapper-creation steps.
  prefs: []
  type: TYPE_NORMAL
- en: This is a template method called by the `MapperProperty` object’s init() method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: Return the target mapped entity, which is an inspect() of the class or aliased
    class that is referenced by this [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  prefs: []
  type: TYPE_NORMAL
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: Return the targeted [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for this [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: Merge the attribute represented by this `MapperProperty` from source to destination
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: A type that may be used to indicate any ORM-level attribute or object that acts
    in place of one, in the context of SQL expression construction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.SQLORMExpression")
    extends from the Core [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") to add additional SQL methods
    that are ORM specific, such as [`PropComparator.of_type()`](#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type"), and is part of the bases for [`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute"). It may be used in [**PEP 484**](https://peps.python.org/pep-0484/)
    typing to indicate arguments or return values that should behave as ORM-level
    attribute expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.SQLORMExpression")
    (`sqlalchemy.orm.base.SQLORMOperations`, [`sqlalchemy.sql.expression.SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"), `sqlalchemy.util.langhelpers.TypingOnly`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: Declarative front-end for the [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") class.
  prefs: []
  type: TYPE_NORMAL
- en: Public constructor is the [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: Added [`Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym")
    as a Declarative compatible subclass for [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Synonyms](mapped_attributes.html#synonyms) - Overview of synonyms'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym")
    ([`sqlalchemy.orm.descriptor_props.SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.descriptor_props.SynonymProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: Denote an attribute name as a synonym to a mapped property, in that the attribute
    will mirror the value and expression behavior of another attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym") is constructed
    using the [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    function.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Synonyms](mapped_attributes.html#synonyms) - Overview of synonyms'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[doc](#sqlalchemy.orm.SynonymProperty.doc), [info](#sqlalchemy.orm.SynonymProperty.info),
    [key](#sqlalchemy.orm.SynonymProperty.key), [parent](#sqlalchemy.orm.SynonymProperty.parent),
    [set_parent()](#sqlalchemy.orm.SynonymProperty.set_parent), [uses_objects](#sqlalchemy.orm.SynonymProperty.uses_objects)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SynonymProperty`](#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    (`sqlalchemy.orm.descriptor_props.DescriptorProperty`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `DescriptorProperty.doc` *attribute of* `DescriptorProperty`'
  prefs: []
  type: TYPE_NORMAL
- en: optional documentation string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") *attribute of* [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`MapperProperty.key`](#sqlalchemy.orm.MapperProperty.key
    "sqlalchemy.orm.MapperProperty.key") *attribute of* [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")'
  prefs: []
  type: TYPE_NORMAL
- en: name of class attribute
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`MapperProperty.parent`](#sqlalchemy.orm.MapperProperty.parent
    "sqlalchemy.orm.MapperProperty.parent") *attribute of* [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")'
  prefs: []
  type: TYPE_NORMAL
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    managing this property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: Set the parent mapper that references this MapperProperty.
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by some subclasses to perform extra setup when the
    mapper is first known.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.QueryContext.default_load_options`](#sqlalchemy.orm.QueryContext.default_load_options
    "sqlalchemy.orm.QueryContext.default_load_options") (`sqlalchemy.sql.expression.Options`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: Base class for [descriptor](../glossary.html#term-descriptor) objects that intercept
    attribute events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") is accessible via the `QueryableAttribute.property`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute "sqlalchemy.orm.InstrumentedAttribute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[adapt_to_entity()](#sqlalchemy.orm.QueryableAttribute.adapt_to_entity), [and_()](#sqlalchemy.orm.QueryableAttribute.and_),
    [expression](#sqlalchemy.orm.QueryableAttribute.expression), [info](#sqlalchemy.orm.QueryableAttribute.info),
    [is_attribute](#sqlalchemy.orm.QueryableAttribute.is_attribute), [of_type()](#sqlalchemy.orm.QueryableAttribute.of_type),
    [operate()](#sqlalchemy.orm.QueryableAttribute.operate), [parent](#sqlalchemy.orm.QueryableAttribute.parent),
    [reverse_operate()](#sqlalchemy.orm.QueryableAttribute.reverse_operate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") (`sqlalchemy.orm.base._DeclarativeMapped`,
    [`sqlalchemy.orm.base.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.base.SQLORMExpression"),
    [`sqlalchemy.orm.base.InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr"),
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"),
    `sqlalchemy.sql.roles.JoinTargetRole`, `sqlalchemy.sql.roles.OnClauseRole`, `sqlalchemy.sql.expression.Immutable`,
    `sqlalchemy.sql.cache_key.SlotsMemoizedHasCacheKey`, `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this PropComparator which will use the given [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") to produce corresponding expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: Add additional criteria to the ON clause that’s represented by this relationship
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Combining Relationship with Custom ON Criteria](queryguide/select.html#orm-queryguide-join-on-augmented)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding Criteria to loader options](queryguide/relationships.html#loader-option-criteria)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: The SQL expression object represented by this [`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute").
  prefs: []
  type: TYPE_NORMAL
- en: This will typically be an instance of a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass representing a column expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: Return the ‘info’ dictionary for the underlying SQL element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The behavior here is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If the attribute is a column-mapped property, i.e. [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty"), which is mapped directly to a schema-level [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, this attribute will return the [`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") dictionary associated with the core-level
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the attribute is a [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    but is mapped to any other kind of SQL expression other than a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the attribute will refer to the [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") dictionary associated directly with the
    [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty"),
    assuming the SQL expression itself does not have its own `.info` attribute (which
    should be the case, unless a user-defined SQL construct has defined one).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the attribute refers to any other kind of [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), including [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship"), the attribute will refer to the [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") dictionary associated with that [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To access the [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")
    dictionary of the [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    unconditionally, including for a [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") that’s associated directly with a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the attribute can be referred to using `QueryableAttribute.property`
    attribute, as `MyClass.someattribute.property.info`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is a Python [descriptor](../glossary.html#term-descriptor).
  prefs: []
  type: TYPE_NORMAL
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: Redefine this object in terms of a polymorphic subclass, [`with_polymorphic()`](queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct, or [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new PropComparator from which further criterion can be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**class_** – a class or mapper indicating that criterion will be against this
    specific subclass.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Relationship to join between aliased targets](queryguide/select.html#orm-queryguide-joining-relationships-aliased)
    - in the [ORM Querying Guide](queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Joining to specific sub-types or with_polymorphic() entities](queryguide/inheritance.html#inheritance-of-type)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: Return an inspection instance representing the parent.
  prefs: []
  type: TYPE_NORMAL
- en: This will be either an instance of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") or [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp"), depending upon the nature of the parent entity
    which this attribute is associated with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.orm.QueryableAttribute.operate
    "sqlalchemy.orm.QueryableAttribute.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: Filter the given list of InstanceStates to those relevant to the given DependencyProcessor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: Mark processed objects as clean / deleted after a successful flush().
  prefs: []
  type: TYPE_NORMAL
- en: This method is called within the flush() method after the execute() method has
    succeeded and the transaction has been committed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: Facade to attributes.get_state_history(), including caching of results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given state is marked as deleted within this uowtransaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: Remove pending actions for a state from the uowtransaction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[filter_states_for_dep()](#sqlalchemy.orm.UOWTransaction.filter_states_for_dep),
    [finalize_flush_changes()](#sqlalchemy.orm.UOWTransaction.finalize_flush_changes),
    [get_attribute_history()](#sqlalchemy.orm.UOWTransaction.get_attribute_history),
    [is_deleted()](#sqlalchemy.orm.UOWTransaction.is_deleted), [remove_state_actions()](#sqlalchemy.orm.UOWTransaction.remove_state_actions),
    [was_already_deleted()](#sqlalchemy.orm.UOWTransaction.was_already_deleted)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given state is expired and was deleted previously.
  prefs: []
  type: TYPE_NORMAL
