- en: SQLAlchemy Unified Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/index.html](https://docs.sqlalchemy.org/en/20/tutorial/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: About this document
  prefs: []
  type: TYPE_NORMAL
- en: The SQLAlchemy Unified Tutorial is integrated between the Core and ORM components
    of SQLAlchemy and serves as a unified introduction to SQLAlchemy as a whole. For
    users of SQLAlchemy within the 1.x series, in the [2.0 style](../glossary.html#term-2.0-style)
    of working, the ORM uses Core-style querying with the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and transactional semantics between
    Core connections and ORM sessions are equivalent. Take note of the blue border
    styles for each section, that will tell you how “ORM-ish” a particular topic is!
  prefs: []
  type: TYPE_NORMAL
- en: Users who are already familiar with SQLAlchemy, and especially those looking
    to migrate existing applications to work under the SQLAlchemy 2.0 series within
    the 1.4 transitional phase should check out the [SQLAlchemy 2.0 - Major Migration
    Guide](../changelog/migration_20.html) document as well.
  prefs: []
  type: TYPE_NORMAL
- en: For the newcomer, this document has a **lot** of detail, however by the end
    they will be considered an **Alchemist**.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy is presented as two distinct APIs, one building on top of the other.
    These APIs are known as **Core** and **ORM**.
  prefs: []
  type: TYPE_NORMAL
- en: '**SQLAlchemy Core** is the foundational architecture for SQLAlchemy as a “database
    toolkit”. The library provides tools for managing connectivity to a database,
    interacting with database queries and results, and programmatic construction of
    SQL statements.'
  prefs: []
  type: TYPE_NORMAL
- en: Sections that are **primarily Core-only** will not refer to the ORM. SQLAlchemy
    constructs used in these sections will be imported from the `sqlalchemy` namespace.
    As an additional indicator of subject classification, they will also include a
    **dark blue border on the right**. When using the ORM, these concepts are still
    in play but are less often explicit in user code. ORM users should read these
    sections, but not expect to be using these APIs directly for ORM-centric code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SQLAlchemy ORM** builds upon the Core to provide optional **object relational
    mapping** capabilities. The ORM provides an additional configuration layer allowing
    user-defined Python classes to be **mapped** to database tables and other constructs,
    as well as an object persistence mechanism known as the **Session**. It then extends
    the Core-level SQL Expression Language to allow SQL queries to be composed and
    invoked in terms of user-defined objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Sections that are **primarily ORM-only** should be **titled to include the phrase
    “ORM”**, so that it’s clear this is an ORM related topic. SQLAlchemy constructs
    used in these sections will be imported from the `sqlalchemy.orm` namespace. Finally,
    as an additional indicator of subject classification, they will also include a
    **light blue border on the left**. Core-only users can skip these.
  prefs: []
  type: TYPE_NORMAL
- en: '**Most** sections in this tutorial discuss **Core concepts that are also used
    explicitly with the ORM**. SQLAlchemy 2.0 in particular features a much greater
    level of integration of Core API use within the ORM.'
  prefs: []
  type: TYPE_NORMAL
- en: For each of these sections, there will be **introductory text** discussing the
    degree to which ORM users should expect to be using these programming patterns.
    SQLAlchemy constructs in these sections will be imported from the `sqlalchemy`
    namespace with some potential use of `sqlalchemy.orm` constructs at the same time.
    As an additional indicator of subject classification, these sections will also
    include **both a thinner light border on the left, and a thicker dark border on
    the right**. Core and ORM users should familiarize with concepts in these sections
    equally.
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tutorial will present both concepts in the natural order that they should
    be learned, first with a mostly-Core-centric approach and then spanning out into
    more ORM-centric concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The major sections of this tutorial are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Establishing Connectivity - the Engine](engine.html#tutorial-engine) - all
    SQLAlchemy applications start with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object; here’s how to create one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with Transactions and the DBAPI](dbapi_transactions.html#tutorial-working-with-transactions)
    - the usage API of the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and its related objects [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") are presented here. This content is Core-centric however
    ORM users will want to be familiar with at least the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with Database Metadata](metadata.html#tutorial-working-with-metadata)
    - SQLAlchemy’s SQL abstractions as well as the ORM rely upon a system of defining
    database schema constructs as Python objects. This section introduces how to do
    that from both a Core and an ORM perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with Data](data.html#tutorial-working-with-data) - here we learn how
    to create, select, update and delete data in the database. The so-called [CRUD](../glossary.html#term-CRUD)
    operations here are given in terms of SQLAlchemy Core with links out towards their
    ORM counterparts. The SELECT operation that is introduced in detail at [Using
    SELECT Statements](data_select.html#tutorial-selecting-data) applies equally well
    to Core and ORM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    covers the persistence framework of the ORM; basically the ORM-centric ways to
    insert, update and delete, as well as how to handle transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with ORM Related Objects](orm_related_objects.html#tutorial-orm-related-objects)
    introduces the concept of the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct and provides a brief overview of how
    it’s used, with links to deeper documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Further Reading](further_reading.html#tutorial-further-reading) lists a series
    of major top-level documentation sections which fully document the concepts introduced
    in this tutorial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version Check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tutorial is written using a system called [doctest](https://docs.python.org/3/library/doctest.html).
    All of the code excerpts written with a `>>>` are actually run as part of SQLAlchemy’s
    test suite, and the reader is invited to work with the code examples given in
    real time with their own Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If running the examples, it is advised that the reader performs a quick check
    to verify that we are on **version 2.0** of SQLAlchemy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tutorial Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tutorial will present both concepts in the natural order that they should
    be learned, first with a mostly-Core-centric approach and then spanning out into
    more ORM-centric concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The major sections of this tutorial are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Establishing Connectivity - the Engine](engine.html#tutorial-engine) - all
    SQLAlchemy applications start with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object; here’s how to create one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with Transactions and the DBAPI](dbapi_transactions.html#tutorial-working-with-transactions)
    - the usage API of the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and its related objects [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") are presented here. This content is Core-centric however
    ORM users will want to be familiar with at least the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with Database Metadata](metadata.html#tutorial-working-with-metadata)
    - SQLAlchemy’s SQL abstractions as well as the ORM rely upon a system of defining
    database schema constructs as Python objects. This section introduces how to do
    that from both a Core and an ORM perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with Data](data.html#tutorial-working-with-data) - here we learn how
    to create, select, update and delete data in the database. The so-called [CRUD](../glossary.html#term-CRUD)
    operations here are given in terms of SQLAlchemy Core with links out towards their
    ORM counterparts. The SELECT operation that is introduced in detail at [Using
    SELECT Statements](data_select.html#tutorial-selecting-data) applies equally well
    to Core and ORM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    covers the persistence framework of the ORM; basically the ORM-centric ways to
    insert, update and delete, as well as how to handle transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working with ORM Related Objects](orm_related_objects.html#tutorial-orm-related-objects)
    introduces the concept of the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct and provides a brief overview of how
    it’s used, with links to deeper documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Further Reading](further_reading.html#tutorial-further-reading) lists a series
    of major top-level documentation sections which fully document the concepts introduced
    in this tutorial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version Check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tutorial is written using a system called [doctest](https://docs.python.org/3/library/doctest.html).
    All of the code excerpts written with a `>>>` are actually run as part of SQLAlchemy’s
    test suite, and the reader is invited to work with the code examples given in
    real time with their own Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If running the examples, it is advised that the reader performs a quick check
    to verify that we are on **version 2.0** of SQLAlchemy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Version Check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tutorial is written using a system called [doctest](https://docs.python.org/3/library/doctest.html).
    All of the code excerpts written with a `>>>` are actually run as part of SQLAlchemy’s
    test suite, and the reader is invited to work with the code examples given in
    real time with their own Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If running the examples, it is advised that the reader performs a quick check
    to verify that we are on **version 2.0** of SQLAlchemy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
