- en: SQLAlchemy Unified Tutorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLAlchemy Unified Tutorial
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/index.html](https://docs.sqlalchemy.org/en/20/tutorial/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/index.html](https://docs.sqlalchemy.org/en/20/tutorial/index.html)
- en: About this document
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本文档
- en: The SQLAlchemy Unified Tutorial is integrated between the Core and ORM components
    of SQLAlchemy and serves as a unified introduction to SQLAlchemy as a whole. For
    users of SQLAlchemy within the 1.x series, in the [2.0 style](../glossary.html#term-2.0-style)
    of working, the ORM uses Core-style querying with the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and transactional semantics between
    Core connections and ORM sessions are equivalent. Take note of the blue border
    styles for each section, that will tell you how “ORM-ish” a particular topic is!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy Unified Tutorial在SQLAlchemy的Core和ORM组件之间集成，并作为SQLAlchemy整体的统一介绍。对于在1.x系列中使用SQLAlchemy的用户，在[2.0风格](../glossary.html#term-2.0-style)下工作的用户，ORM使用带有[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造的Core风格查询，并且Core连接和ORM会话之间的事务语义是等效的。注意每个部分的蓝色边框样式，这将告诉您一个特定主题有多“ORM式”！
- en: Users who are already familiar with SQLAlchemy, and especially those looking
    to migrate existing applications to work under the SQLAlchemy 2.0 series within
    the 1.4 transitional phase should check out the [SQLAlchemy 2.0 - Major Migration
    Guide](../changelog/migration_20.html) document as well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经熟悉SQLAlchemy的用户，特别是那些希望将现有应用程序迁移到SQLAlchemy 2.0系列下的1.4过渡阶段的用户，也应查看[SQLAlchemy
    2.0 - 重大迁移指南](../changelog/migration_20.html)文档。
- en: For the newcomer, this document has a **lot** of detail, however by the end
    they will be considered an **Alchemist**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新手来说，这份文档包含**大量**细节，但到最后他们将被视为**炼金术士**。
- en: SQLAlchemy is presented as two distinct APIs, one building on top of the other.
    These APIs are known as **Core** and **ORM**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy被呈现为两个不同的API，一个建立在另一个之上。这些API被称为**Core**和**ORM**。
- en: '**SQLAlchemy Core** is the foundational architecture for SQLAlchemy as a “database
    toolkit”. The library provides tools for managing connectivity to a database,
    interacting with database queries and results, and programmatic construction of
    SQL statements.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLAlchemy Core**是SQLAlchemy作为“数据库工具包”的基础架构。该库提供了管理与数据库的连接、与数据库查询和结果的交互以及SQL语句的编程构造的工具。'
- en: Sections that are **primarily Core-only** will not refer to the ORM. SQLAlchemy
    constructs used in these sections will be imported from the `sqlalchemy` namespace.
    As an additional indicator of subject classification, they will also include a
    **dark blue border on the right**. When using the ORM, these concepts are still
    in play but are less often explicit in user code. ORM users should read these
    sections, but not expect to be using these APIs directly for ORM-centric code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**主要仅Core**的部分不会提到ORM。在这些部分中使用的SQLAlchemy构造将从`sqlalchemy`命名空间导入。作为主题分类的另一个指示符，它们还将在右侧包括一个**深蓝色边框**。在使用ORM时，这些概念仍然存在，但在用户代码中不太明显。ORM用户应阅读这些部分，但不要期望直接使用这些API来编写ORM中心的代码。'
- en: '**SQLAlchemy ORM** builds upon the Core to provide optional **object relational
    mapping** capabilities. The ORM provides an additional configuration layer allowing
    user-defined Python classes to be **mapped** to database tables and other constructs,
    as well as an object persistence mechanism known as the **Session**. It then extends
    the Core-level SQL Expression Language to allow SQL queries to be composed and
    invoked in terms of user-defined objects.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLAlchemy ORM**建立在Core之上，提供了可选的**对象关系映射**功能。ORM提供了一个额外的配置层，允许用户定义的Python类被**映射**到数据库表和其他构造，以及一个称为**Session**的对象持久性机制。然后，它扩展了Core级别的SQL表达语言，允许以用户定义的对象的术语来组合和调用SQL查询。'
- en: Sections that are **primarily ORM-only** should be **titled to include the phrase
    “ORM”**, so that it’s clear this is an ORM related topic. SQLAlchemy constructs
    used in these sections will be imported from the `sqlalchemy.orm` namespace. Finally,
    as an additional indicator of subject classification, they will also include a
    **light blue border on the left**. Core-only users can skip these.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**主要仅ORM**的部分应该**标题包含“ORM”短语**，以便清楚地表明这是一个与ORM相关的主题。在这些部分中使用的SQLAlchemy构造将从`sqlalchemy.orm`命名空间导入。最后，作为主题分类的另一个指示符，它们还将在左侧包括一个**浅蓝色边框**。仅Core的用户可以跳过这些部分。'
- en: '**Most** sections in this tutorial discuss **Core concepts that are also used
    explicitly with the ORM**. SQLAlchemy 2.0 in particular features a much greater
    level of integration of Core API use within the ORM.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**大多数**本教程中的部分都讨论了**与 ORM 明确使用的核心概念**。特别是 SQLAlchemy 2.0 在 ORM 中更大程度地整合了核心
    API 的使用。'
- en: For each of these sections, there will be **introductory text** discussing the
    degree to which ORM users should expect to be using these programming patterns.
    SQLAlchemy constructs in these sections will be imported from the `sqlalchemy`
    namespace with some potential use of `sqlalchemy.orm` constructs at the same time.
    As an additional indicator of subject classification, these sections will also
    include **both a thinner light border on the left, and a thicker dark border on
    the right**. Core and ORM users should familiarize with concepts in these sections
    equally.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些部分的每一个，都会有**介绍性文本**讨论 ORM 用户应该期望使用这些编程模式的程度。这些部分中的 SQLAlchemy 构造将从`sqlalchemy`命名空间中导入，同时可能会使用一些`sqlalchemy.orm`构造。作为主题分类的额外指示，这些部分还将在左侧具有较薄的浅色边框，并在右侧具有较粗的深色边框。核心和
    ORM 用户应该同样熟悉这些部分的概念。
- en: Tutorial Overview
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程概述
- en: The tutorial will present both concepts in the natural order that they should
    be learned, first with a mostly-Core-centric approach and then spanning out into
    more ORM-centric concepts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 教程将以应该学习的自然顺序呈现这两个概念，首先是以主要基于核心的方式，然后扩展到更多的 ORM 中心的概念。
- en: 'The major sections of this tutorial are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的主要部分如下：
- en: '[Establishing Connectivity - the Engine](engine.html#tutorial-engine) - all
    SQLAlchemy applications start with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object; here’s how to create one.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立连接 - Engine](engine.html#tutorial-engine) - 所有的 SQLAlchemy 应用都以一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象开始；这是如何创建一个的方法。'
- en: '[Working with Transactions and the DBAPI](dbapi_transactions.html#tutorial-working-with-transactions)
    - the usage API of the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and its related objects [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") are presented here. This content is Core-centric however
    ORM users will want to be familiar with at least the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理事务和 DBAPI](dbapi_transactions.html#tutorial-working-with-transactions) -
    此处介绍了[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")及其相关对象[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的使用 API。此内容是核心为中心的，但 ORM 用户至少应熟悉[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。'
- en: '[Working with Database Metadata](metadata.html#tutorial-working-with-metadata)
    - SQLAlchemy’s SQL abstractions as well as the ORM rely upon a system of defining
    database schema constructs as Python objects. This section introduces how to do
    that from both a Core and an ORM perspective.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理数据库元数据](metadata.html#tutorial-working-with-metadata) - SQLAlchemy 的 SQL
    抽象以及 ORM 都依赖于将数据库模式构造定义为 Python 对象的系统。本节介绍了如何从核心和 ORM 的角度进行操作。'
- en: '[Working with Data](data.html#tutorial-working-with-data) - here we learn how
    to create, select, update and delete data in the database. The so-called [CRUD](../glossary.html#term-CRUD)
    operations here are given in terms of SQLAlchemy Core with links out towards their
    ORM counterparts. The SELECT operation that is introduced in detail at [Using
    SELECT Statements](data_select.html#tutorial-selecting-data) applies equally well
    to Core and ORM.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理数据](data.html#tutorial-working-with-data) - 在这里我们学习如何在数据库中创建、选择、更新和删除数据。这里所谓的[CRUD](../glossary.html#term-CRUD)操作以
    SQLAlchemy 核心的形式给出，并链接到其 ORM 对应项。在[使用 SELECT 语句](data_select.html#tutorial-selecting-data)中详细介绍的
    SELECT 操作同样适用于核心和 ORM。'
- en: '[Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    covers the persistence framework of the ORM; basically the ORM-centric ways to
    insert, update and delete, as well as how to handle transactions.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 ORM 进行数据操作](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    - 涵盖了 ORM 的持久化框架；基本上是 ORM 为中心的插入、更新和删除的方式，以及如何处理事务。'
- en: '[Working with ORM Related Objects](orm_related_objects.html#tutorial-orm-related-objects)
    introduces the concept of the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct and provides a brief overview of how
    it’s used, with links to deeper documentation.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 ORM 相关对象介绍了 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造的概念，并简要概述了其用法，并提供了链接到更深入文档的链接。
- en: '[Further Reading](further_reading.html#tutorial-further-reading) lists a series
    of major top-level documentation sections which fully document the concepts introduced
    in this tutorial.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[进一步阅读](further_reading.html#tutorial-further-reading) 列出了一系列完全记录了本教程介绍的概念的顶级文档部分。'
- en: Version Check
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本检查
- en: This tutorial is written using a system called [doctest](https://docs.python.org/3/library/doctest.html).
    All of the code excerpts written with a `>>>` are actually run as part of SQLAlchemy’s
    test suite, and the reader is invited to work with the code examples given in
    real time with their own Python interpreter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是使用称为 [doctest](https://docs.python.org/3/library/doctest.html) 的系统编写的。所有带有
    `>>>` 的代码摘录实际上都作为 SQLAlchemy 的测试套件的一部分运行，并且读者被邀请使用他们自己的 Python 解释器实时处理给定的代码示例。
- en: 'If running the examples, it is advised that the reader performs a quick check
    to verify that we are on **version 2.0** of SQLAlchemy:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行示例，建议读者执行快速检查以验证我们在 **版本 2.0** 的 SQLAlchemy 上：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tutorial Overview
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程概述
- en: The tutorial will present both concepts in the natural order that they should
    be learned, first with a mostly-Core-centric approach and then spanning out into
    more ORM-centric concepts.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将按照应该学习的自然顺序呈现这两个概念，首先是基本的 Core 方法，然后扩展到更多的 ORM 方法。
- en: 'The major sections of this tutorial are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的主要部分如下：
- en: '[Establishing Connectivity - the Engine](engine.html#tutorial-engine) - all
    SQLAlchemy applications start with an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object; here’s how to create one.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立连接 - Engine](engine.html#tutorial-engine) - 所有的 SQLAlchemy 应用程序都始于一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象；这里介绍如何创建一个。'
- en: '[Working with Transactions and the DBAPI](dbapi_transactions.html#tutorial-working-with-transactions)
    - the usage API of the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and its related objects [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") are presented here. This content is Core-centric however
    ORM users will want to be familiar with at least the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理事务和 DBAPI](dbapi_transactions.html#tutorial-working-with-transactions) -
    这里介绍了 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    及其相关对象 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的使用 API。这部分内容主要围绕 Core，但 ORM 用户至少要熟悉 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象。'
- en: '[Working with Database Metadata](metadata.html#tutorial-working-with-metadata)
    - SQLAlchemy’s SQL abstractions as well as the ORM rely upon a system of defining
    database schema constructs as Python objects. This section introduces how to do
    that from both a Core and an ORM perspective.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理数据库元数据](metadata.html#tutorial-working-with-metadata) - SQLAlchemy 的 SQL
    抽象以及 ORM 都依赖于将数据库模式构造定义为 Python 对象的系统。本节介绍了如何从 Core 和 ORM 的角度来做到这一点。'
- en: '[Working with Data](data.html#tutorial-working-with-data) - here we learn how
    to create, select, update and delete data in the database. The so-called [CRUD](../glossary.html#term-CRUD)
    operations here are given in terms of SQLAlchemy Core with links out towards their
    ORM counterparts. The SELECT operation that is introduced in detail at [Using
    SELECT Statements](data_select.html#tutorial-selecting-data) applies equally well
    to Core and ORM.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理数据](data.html#tutorial-working-with-data) - 这里我们学习如何在数据库中创建、选择、更新和删除数据。这里所谓的
    [CRUD](../glossary.html#term-CRUD) 操作以 SQLAlchemy Core 的术语给出，并链接到其 ORM 对应项。在 [使用
    SELECT 语句](data_select.html#tutorial-selecting-data) 中详细介绍的 SELECT 操作同样适用于 Core
    和 ORM。'
- en: '[Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    covers the persistence framework of the ORM; basically the ORM-centric ways to
    insert, update and delete, as well as how to handle transactions.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用ORM进行数据操作](orm_data_manipulation.html#tutorial-orm-data-manipulation)涵盖了ORM的持久性框架；基本上是ORM-centric的插入、更新和删除方式，以及如何处理事务。'
- en: '[Working with ORM Related Objects](orm_related_objects.html#tutorial-orm-related-objects)
    introduces the concept of the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct and provides a brief overview of how
    it’s used, with links to deeper documentation.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用ORM相关对象](orm_related_objects.html#tutorial-orm-related-objects)介绍了[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造的概念，并简要介绍了它的用法，并提供了更深入文档的链接。'
- en: '[Further Reading](further_reading.html#tutorial-further-reading) lists a series
    of major top-level documentation sections which fully document the concepts introduced
    in this tutorial.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[进一步阅读](further_reading.html#tutorial-further-reading)列出了一系列主要的顶级文档部分，这些部分完全记录了本教程中介绍的概念。'
- en: Version Check
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本检查
- en: This tutorial is written using a system called [doctest](https://docs.python.org/3/library/doctest.html).
    All of the code excerpts written with a `>>>` are actually run as part of SQLAlchemy’s
    test suite, and the reader is invited to work with the code examples given in
    real time with their own Python interpreter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是使用名为[doctest](https://docs.python.org/3/library/doctest.html)的系统编写的。 所有使用`>>>`编写的代码摘录实际上都作为SQLAlchemy测试套件的一部分运行，并且读者被邀请实时使用自己的Python解释器与给出的代码示例一起工作。
- en: 'If running the examples, it is advised that the reader performs a quick check
    to verify that we are on **version 2.0** of SQLAlchemy:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行示例，则建议读者进行快速检查以验证我们使用的是**2.0版本**的SQLAlchemy：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Version Check
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本检查
- en: This tutorial is written using a system called [doctest](https://docs.python.org/3/library/doctest.html).
    All of the code excerpts written with a `>>>` are actually run as part of SQLAlchemy’s
    test suite, and the reader is invited to work with the code examples given in
    real time with their own Python interpreter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是使用名为[doctest](https://docs.python.org/3/library/doctest.html)的系统编写的。 所有使用`>>>`编写的代码摘录实际上都作为SQLAlchemy测试套件的一部分运行，并且读者被邀请实时使用自己的Python解释器与给出的代码示例一起工作。
- en: 'If running the examples, it is advised that the reader performs a quick check
    to verify that we are on **version 2.0** of SQLAlchemy:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行示例，则建议读者进行快速检查以验证我们使用的是**2.0版本**的SQLAlchemy：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
