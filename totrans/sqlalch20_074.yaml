- en: Alternate Class Instrumentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/instrumentation.html](https://docs.sqlalchemy.org/en/20/orm/extensions/instrumentation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extensible class instrumentation.
  prefs: []
  type: TYPE_NORMAL
- en: The [`sqlalchemy.ext.instrumentation`](#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") package provides for alternate systems of class
    instrumentation within the ORM. Class instrumentation refers to how the ORM places
    attributes on the class which maintain data and track changes to that data, as
    well as event hooks installed on the class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The extension package is provided for the benefit of integration with other
    object management packages, which already perform their own instrumentation. It
    is not intended for general use.
  prefs: []
  type: TYPE_NORMAL
- en: For examples of how the instrumentation extension is used, see the example [Attribute
    Instrumentation](../examples.html#examples-instrumentation).
  prefs: []
  type: TYPE_NORMAL
- en: API Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ExtendedInstrumentationRegistry](#sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry)
    | Extends [`InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory") with additional bookkeeping,
    to accommodate multiple types of class managers. |'
  prefs: []
  type: TYPE_TB
- en: '| [instrumentation_finders](#sqlalchemy.ext.instrumentation.instrumentation_finders)
    | An extensible sequence of callables which return instrumentation implementations
    |'
  prefs: []
  type: TYPE_TB
- en: '| [INSTRUMENTATION_MANAGER](#sqlalchemy.ext.instrumentation.INSTRUMENTATION_MANAGER)
    | Attribute, elects custom instrumentation when present on a mapped class. |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentationFactory](#sqlalchemy.orm.instrumentation.InstrumentationFactory)
    | Factory for new ClassManager instances. |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentationManager](#sqlalchemy.ext.instrumentation.InstrumentationManager)
    | User-defined class instrumentation extension. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Attribute, elects custom instrumentation when present on a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: Allows a class to specify a slightly or wildly different technique for tracking
    changes made to mapped attributes and collections.
  prefs: []
  type: TYPE_NORMAL
- en: Only one instrumentation implementation is allowed in a given object inheritance
    hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of this attribute must be a callable and will be passed a class object.
    The callable must return one of:'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of an [`InstrumentationManager`](#sqlalchemy.ext.instrumentation.InstrumentationManager
    "sqlalchemy.ext.instrumentation.InstrumentationManager") or subclass
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An object implementing all or some of InstrumentationManager (TODO)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A dictionary of callables, implementing all or some of the above (TODO)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An instance of a [`ClassManager`](../internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") or subclass
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: This attribute is consulted by SQLAlchemy instrumentation resolution, once the
    [`sqlalchemy.ext.instrumentation`](#module-sqlalchemy.ext.instrumentation "sqlalchemy.ext.instrumentation")
    module has been imported. If custom finders are installed in the global instrumentation_finders
    list, they may or may not choose to honor this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Factory for new ClassManager instances.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.instrumentation.InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory") (`sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: User-defined class instrumentation extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstrumentationManager`](#sqlalchemy.ext.instrumentation.InstrumentationManager
    "sqlalchemy.ext.instrumentation.InstrumentationManager") can be subclassed in
    order to change how class instrumentation proceeds. This class exists for the
    purposes of integration with other object management frameworks which would like
    to entirely modify the instrumentation methodology of the ORM, and is not intended
    for regular usage. For interception of class instrumentation events, see [`InstrumentationEvents`](../events.html#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict_getter()](#sqlalchemy.ext.instrumentation.InstrumentationManager.dict_getter),
    [get_instance_dict()](#sqlalchemy.ext.instrumentation.InstrumentationManager.get_instance_dict),
    [initialize_instance_dict()](#sqlalchemy.ext.instrumentation.InstrumentationManager.initialize_instance_dict),
    [install_descriptor()](#sqlalchemy.ext.instrumentation.InstrumentationManager.install_descriptor),
    [install_member()](#sqlalchemy.ext.instrumentation.InstrumentationManager.install_member),
    [install_state()](#sqlalchemy.ext.instrumentation.InstrumentationManager.install_state),
    [instrument_attribute()](#sqlalchemy.ext.instrumentation.InstrumentationManager.instrument_attribute),
    [instrument_collection_class()](#sqlalchemy.ext.instrumentation.InstrumentationManager.instrument_collection_class),
    [manage()](#sqlalchemy.ext.instrumentation.InstrumentationManager.manage), [manager_getter()](#sqlalchemy.ext.instrumentation.InstrumentationManager.manager_getter),
    [post_configure_attribute()](#sqlalchemy.ext.instrumentation.InstrumentationManager.post_configure_attribute),
    [remove_state()](#sqlalchemy.ext.instrumentation.InstrumentationManager.remove_state),
    [state_getter()](#sqlalchemy.ext.instrumentation.InstrumentationManager.state_getter),
    [uninstall_descriptor()](#sqlalchemy.ext.instrumentation.InstrumentationManager.uninstall_descriptor),
    [uninstall_member()](#sqlalchemy.ext.instrumentation.InstrumentationManager.uninstall_member),
    [unregister()](#sqlalchemy.ext.instrumentation.InstrumentationManager.unregister)'
  prefs: []
  type: TYPE_NORMAL
- en: The API for this class should be considered as semi-stable, and may change slightly
    with new releases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: An extensible sequence of callables which return instrumentation implementations
  prefs: []
  type: TYPE_NORMAL
- en: When a class is registered, each callable will be passed a class object. If
    None is returned, the next finder in the sequence is consulted. Otherwise the
    return must be an instrumentation factory that follows the same guidelines as
    sqlalchemy.ext.instrumentation.INSTRUMENTATION_MANAGER.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the only finder is find_native_user_instrumentation_hook, which
    searches for INSTRUMENTATION_MANAGER. If all finders return None, standard ClassManager
    instrumentation is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Extends [`InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory") with additional bookkeeping,
    to accommodate multiple types of class managers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry`](#sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry
    "sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry") ([`sqlalchemy.orm.instrumentation.InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory"))
  prefs: []
  type: TYPE_NORMAL
- en: API Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ExtendedInstrumentationRegistry](#sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry)
    | Extends [`InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory") with additional bookkeeping,
    to accommodate multiple types of class managers. |'
  prefs: []
  type: TYPE_TB
- en: '| [instrumentation_finders](#sqlalchemy.ext.instrumentation.instrumentation_finders)
    | An extensible sequence of callables which return instrumentation implementations
    |'
  prefs: []
  type: TYPE_TB
- en: '| [INSTRUMENTATION_MANAGER](#sqlalchemy.ext.instrumentation.INSTRUMENTATION_MANAGER)
    | Attribute, elects custom instrumentation when present on a mapped class. |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentationFactory](#sqlalchemy.orm.instrumentation.InstrumentationFactory)
    | Factory for new ClassManager instances. |'
  prefs: []
  type: TYPE_TB
- en: '| [InstrumentationManager](#sqlalchemy.ext.instrumentation.InstrumentationManager)
    | User-defined class instrumentation extension. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Attribute, elects custom instrumentation when present on a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: Allows a class to specify a slightly or wildly different technique for tracking
    changes made to mapped attributes and collections.
  prefs: []
  type: TYPE_NORMAL
- en: Only one instrumentation implementation is allowed in a given object inheritance
    hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of this attribute must be a callable and will be passed a class object.
    The callable must return one of:'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of an [`InstrumentationManager`](#sqlalchemy.ext.instrumentation.InstrumentationManager
    "sqlalchemy.ext.instrumentation.InstrumentationManager") or subclass
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An object implementing all or some of InstrumentationManager (TODO)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A dictionary of callables, implementing all or some of the above (TODO)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An instance of a [`ClassManager`](../internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") or subclass
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: This attribute is consulted by SQLAlchemy instrumentation resolution, once the
    [`sqlalchemy.ext.instrumentation`](#module-sqlalchemy.ext.instrumentation "sqlalchemy.ext.instrumentation")
    module has been imported. If custom finders are installed in the global instrumentation_finders
    list, they may or may not choose to honor this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Factory for new ClassManager instances.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.instrumentation.InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory") (`sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: User-defined class instrumentation extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstrumentationManager`](#sqlalchemy.ext.instrumentation.InstrumentationManager
    "sqlalchemy.ext.instrumentation.InstrumentationManager") can be subclassed in
    order to change how class instrumentation proceeds. This class exists for the
    purposes of integration with other object management frameworks which would like
    to entirely modify the instrumentation methodology of the ORM, and is not intended
    for regular usage. For interception of class instrumentation events, see [`InstrumentationEvents`](../events.html#sqlalchemy.orm.InstrumentationEvents
    "sqlalchemy.orm.InstrumentationEvents").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict_getter()](#sqlalchemy.ext.instrumentation.InstrumentationManager.dict_getter),
    [get_instance_dict()](#sqlalchemy.ext.instrumentation.InstrumentationManager.get_instance_dict),
    [initialize_instance_dict()](#sqlalchemy.ext.instrumentation.InstrumentationManager.initialize_instance_dict),
    [install_descriptor()](#sqlalchemy.ext.instrumentation.InstrumentationManager.install_descriptor),
    [install_member()](#sqlalchemy.ext.instrumentation.InstrumentationManager.install_member),
    [install_state()](#sqlalchemy.ext.instrumentation.InstrumentationManager.install_state),
    [instrument_attribute()](#sqlalchemy.ext.instrumentation.InstrumentationManager.instrument_attribute),
    [instrument_collection_class()](#sqlalchemy.ext.instrumentation.InstrumentationManager.instrument_collection_class),
    [manage()](#sqlalchemy.ext.instrumentation.InstrumentationManager.manage), [manager_getter()](#sqlalchemy.ext.instrumentation.InstrumentationManager.manager_getter),
    [post_configure_attribute()](#sqlalchemy.ext.instrumentation.InstrumentationManager.post_configure_attribute),
    [remove_state()](#sqlalchemy.ext.instrumentation.InstrumentationManager.remove_state),
    [state_getter()](#sqlalchemy.ext.instrumentation.InstrumentationManager.state_getter),
    [uninstall_descriptor()](#sqlalchemy.ext.instrumentation.InstrumentationManager.uninstall_descriptor),
    [uninstall_member()](#sqlalchemy.ext.instrumentation.InstrumentationManager.uninstall_member),
    [unregister()](#sqlalchemy.ext.instrumentation.InstrumentationManager.unregister)'
  prefs: []
  type: TYPE_NORMAL
- en: The API for this class should be considered as semi-stable, and may change slightly
    with new releases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: An extensible sequence of callables which return instrumentation implementations
  prefs: []
  type: TYPE_NORMAL
- en: When a class is registered, each callable will be passed a class object. If
    None is returned, the next finder in the sequence is consulted. Otherwise the
    return must be an instrumentation factory that follows the same guidelines as
    sqlalchemy.ext.instrumentation.INSTRUMENTATION_MANAGER.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the only finder is find_native_user_instrumentation_hook, which
    searches for INSTRUMENTATION_MANAGER. If all finders return None, standard ClassManager
    instrumentation is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Extends [`InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory") with additional bookkeeping,
    to accommodate multiple types of class managers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry`](#sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry
    "sqlalchemy.ext.instrumentation.ExtendedInstrumentationRegistry") ([`sqlalchemy.orm.instrumentation.InstrumentationFactory`](#sqlalchemy.orm.instrumentation.InstrumentationFactory
    "sqlalchemy.orm.instrumentation.InstrumentationFactory"))
  prefs: []
  type: TYPE_NORMAL
