- en: 'Appendix 3: Assorted Technical Information'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/app3.html](https://pymupdf.readthedocs.io/en/latest/app3.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section deals with various technical topics, that are not necessarily related
    to each other.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Image Transformation Matrix'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with version 1.18.11, the image transformation matrix is returned
    by some methods for text and image extraction: [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") and [`Page.get_image_bbox()`](page.html#Page.get_image_bbox "Page.get_image_bbox").'
  prefs: []
  type: TYPE_NORMAL
- en: The transformation matrix contains information about how an image was transformed
    to fit into the rectangle (its “boundary box” = “bbox”) on some document page.
    By inspecting the image’s bbox on the page and this matrix, one can determine
    for example, whether and how the image is displayed scaled or rotated on a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relationship between image dimension and its bbox on a page is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the original image’s width and height,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: define the image rectangle `imgrect = pymupdf.Rect(0, 0, width, height)`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: define the “shrink matrix” `shrink = pymupdf.Matrix(1/width, 0, 0, 1/height,
    0, 0)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transforming the image rectangle with its shrink matrix, will result in the
    unit rectangle: `imgrect * shrink = pymupdf.Rect(0, 0, 1, 1)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the image **transformation matrix** “transform”, the following steps
    will compute the bbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inspecting the matrix product `shrink * transform` will reveal all information
    about what happened to the image rectangle to make it fit into the bbox on the
    page: rotation, scaling of its sides and translation of its origin. Let us look
    at an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '* * *  ## PDF Base 14 Fonts'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following 14 builtin font names **must be supported by every PDF viewer**
    application. They are available as a dictionary, which maps their full names amd
    their abbreviations in lower case to the full font basename. Wherever a **fontname**
    must be provided in PyMuPDF, any **key or value** from the dictionary may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In contrast to their obligation, not all PDF viewers support these fonts correctly
    and completely – this is especially true for Symbol and ZapfDingbats. Also, the
    glyph (visual) images will be specific to every reader.
  prefs: []
  type: TYPE_NORMAL
- en: To see how these fonts can be used – including the **CJK built-in** fonts –
    look at the table in [`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font").
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Adobe PDF References'
  prefs: []
  type: TYPE_NORMAL
- en: This PDF Reference manual published by Adobe is frequently quoted throughout
    this documentation. It can be viewed and downloaded from [here](https://opensource.adobe.com/dc-acrobat-sdk-docs/standards/pdfstandards/pdf/PDF32000_2008.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, an older version was also available under [this](http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf)
    link. It seems to be taken off of the web site in October 2021\. Earlier (pre
    1.19.*) versions of the PyMuPDF documentation used to refer to this document.
    We have undertaken an effort to replace referrals to the current specification
    above.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Using Python Sequences as Arguments in PyMuPDF'
  prefs: []
  type: TYPE_NORMAL
- en: When PyMuPDF objects and methods require a Python **list** of numerical values,
    other Python **sequence types** are also allowed. Python classes are said to implement
    the **sequence protocol**, if they have a `__getitem__()` method.
  prefs: []
  type: TYPE_NORMAL
- en: This basically means, you can interchangeably use Python *list* or *tuple* or
    even *array.array*, *numpy.array* and *bytearray* types in these cases.
  prefs: []
  type: TYPE_NORMAL
- en: For example, specifying a sequence `"s"` in any of the following ways
  prefs: []
  type: TYPE_NORMAL
- en: '`s = [1, 2]` – a list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = (1, 2)` – a tuple'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = array.array("i", (1, 2))` – an array.array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = numpy.array((1, 2))` – a numpy array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = bytearray((1, 2))` – a bytearray'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'will make it usable in the following example expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pymupdf.Point(s)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pymupdf.Point(x, y) + s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc.select(s)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly with all geometry objects [Rect](rect.html#rect), [IRect](irect.html#irect),
    [Matrix](matrix.html#matrix) and [Point](point.html#point).
  prefs: []
  type: TYPE_NORMAL
- en: Because all PyMuPDF geometry classes themselves are special cases of sequences,
    they (with the exception of [Quad](quad.html#quad) – see below) can be freely
    used where numerical sequences can be used, e.g. as arguments for functions like
    *list()*, *tuple()*, *array.array()* or *numpy.array()*. Look at the following
    snippet to see this work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[Quad](quad.html#quad) is a Python sequence object as well and has a length
    of 4\. Its items however are [`point_like`](glossary.html#point_like "point_like")
    – not numbers. Therefore, the above remarks do not apply.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Ensuring Consistency of Important Objects in PyMuPDF'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF is a Python binding for the C library MuPDF. While a lot of effort has
    been invested by MuPDF’s creators to approximate some sort of an object-oriented
    behavior, they certainly could not overcome basic shortcomings of the C language
    in that respect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python on the other hand implements the OO-model in a very clean way. The interface
    code between PyMuPDF and MuPDF consists of two basic files: *pymupdf.py* and *fitz_wrap.c*.
    They are created by the excellent SWIG tool for each new version.'
  prefs: []
  type: TYPE_NORMAL
- en: When you use one of PyMuPDF’s objects or methods, this will result in execution
    of some code in *pymupdf.py*, which in turn will call some C code compiled with
    *fitz_wrap.c*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because SWIG goes a long way to keep the Python and the C level in sync, everything
    works fine, if a certain set of rules is being strictly followed. For example:
    **never access** a [Page](page.html#page) object, after you have closed (or deleted
    or set to *None*) the owning [Document](document.html#document). Or, less obvious:
    **never access** a page or any of its children (links or annotations) after you
    have executed one of the document methods *select()*, *delete_page()*, *insert_page()*
    … and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But just no longer accessing invalidated objects is actually not enough: They
    should rather be actively deleted entirely, to also free C-level resources (meaning
    allocated memory).'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for these rules lies in the fact that there is a hierarchical 2-level
    one-to-many relationship between a document and its pages and also between a page
    and its links / annotations. To maintain a consistent situation, any of the above
    actions must lead to a complete reset – in **Python and, synchronously, in C**.
  prefs: []
  type: TYPE_NORMAL
- en: SWIG cannot know about this and consequently does not do it.
  prefs: []
  type: TYPE_NORMAL
- en: The required logic has therefore been built into PyMuPDF itself in the following
    way.
  prefs: []
  type: TYPE_NORMAL
- en: If a page “loses” its owning document or is being deleted itself, all of its
    currently existing annotations and links will be made unusable in Python, and
    their C-level counterparts will be deleted and deallocated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If a document is closed (or deleted or set to *None*) or if its structure has
    changed, then similarly all currently existing pages and their children will be
    made unusable, and corresponding C-level deletions will take place. “Structure
    changes” include methods like *select()*, *delePage()*, *insert_page()*, *insert_pdf()*
    and so on: all of these will result in a cascade of object deletions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The programmer will normally not realize any of this. If he, however, tries
    to access invalidated objects, exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Invalidated objects cannot be directly deleted as with Python statements like
    *del page* or *page = None*, etc. Instead, their *__del__* method must be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'All pages, links and annotations have the property *parent*, which points to
    the owning object. This is the property that can be checked on the application
    level: if *obj.parent == None* then the object’s parent is gone, and any reference
    to its properties or methods will raise an exception informing about this “orphaned”
    state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows the cascading effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Objects outside the above relationship are not included in this mechanism. If
    you e.g. created a table of contents by *toc = doc.get_toc()*, and later close
    or change the document, then this cannot and does not change variable *toc* in
    any way. It is your responsibility to refresh such variables as required.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Design of Method [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page")'
  prefs: []
  type: TYPE_NORMAL
- en: Purpose and Capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method displays an image of a (“source”) page of another PDF document within
    a specified rectangle of the current (“containing”, “target”) page.
  prefs: []
  type: TYPE_NORMAL
- en: '**In contrast** to [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    this display is vector-based and hence remains accurate across zooming levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just like** [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    the size of the display is adjusted to the given rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following variations of the display are currently supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Bool parameter `"keep_proportion"` controls whether to maintain the aspect ratio
    (default) or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangle parameter `"clip"` restricts the visible part of the source page rectangle.
    Default is the full page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: float `"rotation"` rotates the display by an arbitrary angle (degrees). If the
    angle is not an integer multiple of 90, only 2 of the 4 corners may be positioned
    on the target border if also `"keep_proportion"` is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bool parameter `"overlay"` controls whether to put the image on top (foreground,
    default) of current page content or not (background).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use cases include (but are not limited to) the following:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stamp” a series of pages of the current document with the same image, like
    a company logo or a watermark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine arbitrary input pages into one output page to support “booklet” or double-sided
    printing (known as “4-up”, “n-up”).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Split up (large) input pages into several arbitrary pieces. This is also called
    “posterization”, because you e.g. can split an A4 page horizontally and vertically,
    print the 4 pieces enlarged to separate A4 pages, and end up with an A2 version
    of your original page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Technical Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is done using PDF **“Form XObjects”**, see section 8.10 on page 217 of
    [Adobe PDF References](#adobemanual). On execution of a [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page"), the following things happen:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`resources`](glossary.html#resources "resources") and [`contents`](glossary.html#contents
    "contents") objects of source page in source document are copied over to the target
    document, jointly creating a new **Form XObject** with the following properties.
    The PDF [`xref`](glossary.html#xref "xref") number of this object is returned
    by the method.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/BBox` equals `/Mediabox` of the source page'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Matrix` equals the identity matrix.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Resources` equals that of the source page. This involves a “deep-copy” of
    hierarchically nested other objects (including fonts, images, etc.). The complexity
    involved here is covered by MuPDF’s grafting [[1]](#f1) technique functions.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: This is a stream object type, and its stream is an exact copy of the combined
    data of the source page’s [`contents`](glossary.html#contents "contents") objects.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This Form XObject is only executed once per shown source page. Subsequent displays
    of the same source page will skip this step and only create “pointer” Form XObjects
    (done in next step) to this object.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A second **Form XObject** is then created which the target page uses to invoke
    the display. This object has the following properties:'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/BBox` equals the `/CropBox` of the source page (or `"clip"`).'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Matrix` represents the mapping of `/BBox` to the target rectangle.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/XObject` references the previous Form XObject via the fixed name `fullpage`.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The stream of this object contains exactly one fixed statement: `/fullpage
    Do`.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the method’s `"oc"` argument is given, its value is assigned to this Form
    XObject as `/OC`.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`resources`](glossary.html#resources "resources") and [`contents`](glossary.html#contents
    "contents") objects of the target page are now modified as follows.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Add an entry to the `/XObject` dictionary of `/Resources` with the name [`fzFrm`](colorspace.html#Colorspace.n
    "Colorspace.n") (with n chosen such that this entry is unique on the page).
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Depending on `"overlay"`, prepend or append a new object to the page’s `/Contents`
    array, containing the statement `q /fzFrm<n> Do Q`.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This design approach ensures that:'
  prefs: []
  type: TYPE_NORMAL
- en: The (potentially large) source page is only copied once to the target PDF. Only
    small “pointer” Form XObjects objects are created per each target page to show
    the source page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each referring target page can have its own `"oc"` parameter to control the
    source page’s visibility individually.  ## Redirecting Error and Warning Messages'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since MuPDF version 1.16 error and warning messages can be redirected via an
    official plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyMuPDF will put error messages to `sys.stderr` prefixed with the string “mupdf:”.
    Warnings are internally stored and can be accessed via *pymupdf.TOOLS.mupdf_warnings()*.
    There also is a function to empty this store.  ## Coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the most frequently used terms in this documentation. A **coordinate**
    generally means a pair of numbers `(x, y)` referring to some location, like a
    corner of a rectangle ([Rect](rect.html#rect)), a [Point](point.html#point) and
    so forth. The two values usually are floats, but there a objects like images which
    only allow them to be integers.
  prefs: []
  type: TYPE_NORMAL
- en: To actually *find* a coordinate’s location, we also need to know the *reference*
    point for `x` and `y` - in other words, we must know where location `(0, 0)` is
    positioned. Once `(0, 0)` (the “origin”) is known, we speak of a “coordinate system”.
  prefs: []
  type: TYPE_NORMAL
- en: Several coordinate systems exist in document processing. For instance, the coordinate
    systems of a PDF page and the image created from it are **different**. We therefore
    need ways to *transform* coordinates from one system to another (and also back
    occasionally). This is the task of a [Matrix](matrix.html#matrix). It is a mathematical
    function which works much like a factor that can be “multiplied” with a point
    or rectangle to give us the corresponding point / rectangle in another coordinate
    system. The inverse of a transformation matrix can be used to revert the transformation.
    Much like multiplying by some factor, say 3, can be reverted by dividing the result
    by 3 (or multiplying it with 1/3).
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates and Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Images have a coordinate system with integer coordinates. Origin `(0, 0)` is
    the top-left point. `x` values must be in `range(width)`, and `y` values in `range(height)`.
    Therefore, `y` values *increase* if we go *downwards*. For every image, there
    is only a **finite number** of coordinates, namely `width * height`. A location
    in an image is also called a “pixel”.
  prefs: []
  type: TYPE_NORMAL
- en: 'How **large** an image will be (in centimeters or inches) when e.g. printed,
    depends on additional information: the “resolution”. This is measured in **DPI**
    (dots per inch, or pixels per inch). To find the printed size of some image, we
    therefore must divide its width and its height by the corresponding DPI values
    (there may separate ones for width and for height) and will get the respective
    number of inches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Origin Point, Point Size and Y-Axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In **PDF**, the origin `(0, 0)` of a page is located at its **bottom-left point**.
    In **MuPDF**, the origin `(0, 0)` of a page is located at its **top-left point**.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-coordinate-space.png](../Images/fdb4dc6f90fefd7f22efb8a073df53a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Coordinates are float numbers and measured in **points**, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '**one point equals 1/72 inches**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typical document page sizes are **ISO A4** and **Letter**. A **Letter** page
    has a size of **8.5 x 11 inches**, corresponding to **612 x 792 points**. In the
    **PDF** coordinate system, the top-left point of a **Letter** page hence has the
    coordinate `(0, 792)` as **the y-axis points upwards**. Now we know our document
    size the **MuPDF** coordinate system for the bottom right would be coordinate
    `(612, 792)` (and for **PDF** this coordinate would then be `(612,0)`).
  prefs: []
  type: TYPE_NORMAL
- en: Theoretically, there are **infinitely many** coordinate positions on a **PDF**
    page. In practice however, at most the first 5 decimal places are sufficient for
    a reasonable precision.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In **MuPDF**, multiple document formats are supported - **PDF** just being one
    among **over a dozen others**. Images are also supported as documents in **MuPDF**
    (therefore having one page usually). This is one of the reasons why **MuPDF**
    uses a coordinate system with the origin `(0, 0)` being the **top-left** point
    of any document page. **The y-axis points downwards**, like with images. Coordinates
    in **MuPDF** in any case are floats, like in **PDF**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A rectangle `Rect(0, 0, 100, 100)` for instance in **MuPDF** (and thus **PyMuPDF**)
    therefore is a square with edges of length 100 points (= 1.39 inches or 3.53 centimeters).
    Its top-left corner is the origin. To switch between the two coordinate systems
    **PDF** to **MuPDF**, every [Page](page.html#page) object has a [`Page.transformation_matrix`](page.html#Page.transformation_matrix
    "Page.transformation_matrix"). Its inverse can be used to compute a rectangle’s
    PDF coordinates. In this way we can conveniently find that `Rect(0, 0, 100, 100)`
    in **MuPDF** is the same as `Rect(0, 692, 100, 792)` in **PDF**. See this code
    snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## Image Transformation Matrix'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with version 1.18.11, the image transformation matrix is returned
    by some methods for text and image extraction: [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") and [`Page.get_image_bbox()`](page.html#Page.get_image_bbox "Page.get_image_bbox").'
  prefs: []
  type: TYPE_NORMAL
- en: The transformation matrix contains information about how an image was transformed
    to fit into the rectangle (its “boundary box” = “bbox”) on some document page.
    By inspecting the image’s bbox on the page and this matrix, one can determine
    for example, whether and how the image is displayed scaled or rotated on a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relationship between image dimension and its bbox on a page is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the original image’s width and height,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: define the image rectangle `imgrect = pymupdf.Rect(0, 0, width, height)`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: define the “shrink matrix” `shrink = pymupdf.Matrix(1/width, 0, 0, 1/height,
    0, 0)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transforming the image rectangle with its shrink matrix, will result in the
    unit rectangle: `imgrect * shrink = pymupdf.Rect(0, 0, 1, 1)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the image **transformation matrix** “transform”, the following steps
    will compute the bbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inspecting the matrix product `shrink * transform` will reveal all information
    about what happened to the image rectangle to make it fit into the bbox on the
    page: rotation, scaling of its sides and translation of its origin. Let us look
    at an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## PDF Base 14 Fonts'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following 14 builtin font names **must be supported by every PDF viewer**
    application. They are available as a dictionary, which maps their full names amd
    their abbreviations in lower case to the full font basename. Wherever a **fontname**
    must be provided in PyMuPDF, any **key or value** from the dictionary may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In contrast to their obligation, not all PDF viewers support these fonts correctly
    and completely – this is especially true for Symbol and ZapfDingbats. Also, the
    glyph (visual) images will be specific to every reader.
  prefs: []
  type: TYPE_NORMAL
- en: To see how these fonts can be used – including the **CJK built-in** fonts –
    look at the table in [`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font").
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Adobe PDF References'
  prefs: []
  type: TYPE_NORMAL
- en: This PDF Reference manual published by Adobe is frequently quoted throughout
    this documentation. It can be viewed and downloaded from [here](https://opensource.adobe.com/dc-acrobat-sdk-docs/standards/pdfstandards/pdf/PDF32000_2008.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, an older version was also available under [this](http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf)
    link. It seems to be taken off of the web site in October 2021\. Earlier (pre
    1.19.*) versions of the PyMuPDF documentation used to refer to this document.
    We have undertaken an effort to replace referrals to the current specification
    above.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Using Python Sequences as Arguments in PyMuPDF'
  prefs: []
  type: TYPE_NORMAL
- en: When PyMuPDF objects and methods require a Python **list** of numerical values,
    other Python **sequence types** are also allowed. Python classes are said to implement
    the **sequence protocol**, if they have a `__getitem__()` method.
  prefs: []
  type: TYPE_NORMAL
- en: This basically means, you can interchangeably use Python *list* or *tuple* or
    even *array.array*, *numpy.array* and *bytearray* types in these cases.
  prefs: []
  type: TYPE_NORMAL
- en: For example, specifying a sequence `"s"` in any of the following ways
  prefs: []
  type: TYPE_NORMAL
- en: '`s = [1, 2]` – a list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = (1, 2)` – a tuple'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = array.array("i", (1, 2))` – an array.array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = numpy.array((1, 2))` – a numpy array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s = bytearray((1, 2))` – a bytearray'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'will make it usable in the following example expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pymupdf.Point(s)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pymupdf.Point(x, y) + s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc.select(s)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly with all geometry objects [Rect](rect.html#rect), [IRect](irect.html#irect),
    [Matrix](matrix.html#matrix) and [Point](point.html#point).
  prefs: []
  type: TYPE_NORMAL
- en: Because all PyMuPDF geometry classes themselves are special cases of sequences,
    they (with the exception of [Quad](quad.html#quad) – see below) can be freely
    used where numerical sequences can be used, e.g. as arguments for functions like
    *list()*, *tuple()*, *array.array()* or *numpy.array()*. Look at the following
    snippet to see this work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[Quad](quad.html#quad) is a Python sequence object as well and has a length
    of 4\. Its items however are [`point_like`](glossary.html#point_like "point_like")
    – not numbers. Therefore, the above remarks do not apply.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Ensuring Consistency of Important Objects in PyMuPDF'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF is a Python binding for the C library MuPDF. While a lot of effort has
    been invested by MuPDF’s creators to approximate some sort of an object-oriented
    behavior, they certainly could not overcome basic shortcomings of the C language
    in that respect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python on the other hand implements the OO-model in a very clean way. The interface
    code between PyMuPDF and MuPDF consists of two basic files: *pymupdf.py* and *fitz_wrap.c*.
    They are created by the excellent SWIG tool for each new version.'
  prefs: []
  type: TYPE_NORMAL
- en: When you use one of PyMuPDF’s objects or methods, this will result in execution
    of some code in *pymupdf.py*, which in turn will call some C code compiled with
    *fitz_wrap.c*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because SWIG goes a long way to keep the Python and the C level in sync, everything
    works fine, if a certain set of rules is being strictly followed. For example:
    **never access** a [Page](page.html#page) object, after you have closed (or deleted
    or set to *None*) the owning [Document](document.html#document). Or, less obvious:
    **never access** a page or any of its children (links or annotations) after you
    have executed one of the document methods *select()*, *delete_page()*, *insert_page()*
    … and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But just no longer accessing invalidated objects is actually not enough: They
    should rather be actively deleted entirely, to also free C-level resources (meaning
    allocated memory).'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for these rules lies in the fact that there is a hierarchical 2-level
    one-to-many relationship between a document and its pages and also between a page
    and its links / annotations. To maintain a consistent situation, any of the above
    actions must lead to a complete reset – in **Python and, synchronously, in C**.
  prefs: []
  type: TYPE_NORMAL
- en: SWIG cannot know about this and consequently does not do it.
  prefs: []
  type: TYPE_NORMAL
- en: The required logic has therefore been built into PyMuPDF itself in the following
    way.
  prefs: []
  type: TYPE_NORMAL
- en: If a page “loses” its owning document or is being deleted itself, all of its
    currently existing annotations and links will be made unusable in Python, and
    their C-level counterparts will be deleted and deallocated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If a document is closed (or deleted or set to *None*) or if its structure has
    changed, then similarly all currently existing pages and their children will be
    made unusable, and corresponding C-level deletions will take place. “Structure
    changes” include methods like *select()*, *delePage()*, *insert_page()*, *insert_pdf()*
    and so on: all of these will result in a cascade of object deletions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The programmer will normally not realize any of this. If he, however, tries
    to access invalidated objects, exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Invalidated objects cannot be directly deleted as with Python statements like
    *del page* or *page = None*, etc. Instead, their *__del__* method must be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'All pages, links and annotations have the property *parent*, which points to
    the owning object. This is the property that can be checked on the application
    level: if *obj.parent == None* then the object’s parent is gone, and any reference
    to its properties or methods will raise an exception informing about this “orphaned”
    state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows the cascading effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Objects outside the above relationship are not included in this mechanism. If
    you e.g. created a table of contents by *toc = doc.get_toc()*, and later close
    or change the document, then this cannot and does not change variable *toc* in
    any way. It is your responsibility to refresh such variables as required.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Design of Method [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")'
  prefs: []
  type: TYPE_NORMAL
- en: Purpose and Capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method displays an image of a (“source”) page of another PDF document within
    a specified rectangle of the current (“containing”, “target”) page.
  prefs: []
  type: TYPE_NORMAL
- en: '**In contrast** to [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    this display is vector-based and hence remains accurate across zooming levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just like** [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    the size of the display is adjusted to the given rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following variations of the display are currently supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Bool parameter `"keep_proportion"` controls whether to maintain the aspect ratio
    (default) or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangle parameter `"clip"` restricts the visible part of the source page rectangle.
    Default is the full page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: float `"rotation"` rotates the display by an arbitrary angle (degrees). If the
    angle is not an integer multiple of 90, only 2 of the 4 corners may be positioned
    on the target border if also `"keep_proportion"` is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bool parameter `"overlay"` controls whether to put the image on top (foreground,
    default) of current page content or not (background).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use cases include (but are not limited to) the following:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stamp” a series of pages of the current document with the same image, like
    a company logo or a watermark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine arbitrary input pages into one output page to support “booklet” or double-sided
    printing (known as “4-up”, “n-up”).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Split up (large) input pages into several arbitrary pieces. This is also called
    “posterization”, because you e.g. can split an A4 page horizontally and vertically,
    print the 4 pieces enlarged to separate A4 pages, and end up with an A2 version
    of your original page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Technical Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is done using PDF **“Form XObjects”**, see section 8.10 on page 217 of
    [Adobe PDF References](#adobemanual). On execution of a [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page"), the following things happen:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`resources`](glossary.html#resources "resources") and [`contents`](glossary.html#contents
    "contents") objects of source page in source document are copied over to the target
    document, jointly creating a new **Form XObject** with the following properties.
    The PDF [`xref`](glossary.html#xref "xref") number of this object is returned
    by the method.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/BBox` equals `/Mediabox` of the source page'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Matrix` equals the identity matrix.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Resources` equals that of the source page. This involves a “deep-copy” of
    hierarchically nested other objects (including fonts, images, etc.). The complexity
    involved here is covered by MuPDF’s grafting [[1]](#f1) technique functions.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: This is a stream object type, and its stream is an exact copy of the combined
    data of the source page’s [`contents`](glossary.html#contents "contents") objects.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This Form XObject is only executed once per shown source page. Subsequent displays
    of the same source page will skip this step and only create “pointer” Form XObjects
    (done in next step) to this object.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A second **Form XObject** is then created which the target page uses to invoke
    the display. This object has the following properties:'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/BBox` equals the `/CropBox` of the source page (or `"clip"`).'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Matrix` represents the mapping of `/BBox` to the target rectangle.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/XObject` references the previous Form XObject via the fixed name `fullpage`.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The stream of this object contains exactly one fixed statement: `/fullpage
    Do`.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the method’s `"oc"` argument is given, its value is assigned to this Form
    XObject as `/OC`.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`resources`](glossary.html#resources "resources") and [`contents`](glossary.html#contents
    "contents") objects of the target page are now modified as follows.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Add an entry to the `/XObject` dictionary of `/Resources` with the name [`fzFrm`](colorspace.html#Colorspace.n
    "Colorspace.n") (with n chosen such that this entry is unique on the page).
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Depending on `"overlay"`, prepend or append a new object to the page’s `/Contents`
    array, containing the statement `q /fzFrm<n> Do Q`.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This design approach ensures that:'
  prefs: []
  type: TYPE_NORMAL
- en: The (potentially large) source page is only copied once to the target PDF. Only
    small “pointer” Form XObjects objects are created per each target page to show
    the source page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each referring target page can have its own `"oc"` parameter to control the
    source page’s visibility individually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Purpose and Capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method displays an image of a (“source”) page of another PDF document within
    a specified rectangle of the current (“containing”, “target”) page.
  prefs: []
  type: TYPE_NORMAL
- en: '**In contrast** to [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    this display is vector-based and hence remains accurate across zooming levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just like** [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    the size of the display is adjusted to the given rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following variations of the display are currently supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Bool parameter `"keep_proportion"` controls whether to maintain the aspect ratio
    (default) or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangle parameter `"clip"` restricts the visible part of the source page rectangle.
    Default is the full page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: float `"rotation"` rotates the display by an arbitrary angle (degrees). If the
    angle is not an integer multiple of 90, only 2 of the 4 corners may be positioned
    on the target border if also `"keep_proportion"` is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bool parameter `"overlay"` controls whether to put the image on top (foreground,
    default) of current page content or not (background).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use cases include (but are not limited to) the following:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stamp” a series of pages of the current document with the same image, like
    a company logo or a watermark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine arbitrary input pages into one output page to support “booklet” or double-sided
    printing (known as “4-up”, “n-up”).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Split up (large) input pages into several arbitrary pieces. This is also called
    “posterization”, because you e.g. can split an A4 page horizontally and vertically,
    print the 4 pieces enlarged to separate A4 pages, and end up with an A2 version
    of your original page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Technical Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is done using PDF **“Form XObjects”**, see section 8.10 on page 217 of
    [Adobe PDF References](#adobemanual). On execution of a [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page"), the following things happen:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`resources`](glossary.html#resources "resources") and [`contents`](glossary.html#contents
    "contents") objects of source page in source document are copied over to the target
    document, jointly creating a new **Form XObject** with the following properties.
    The PDF [`xref`](glossary.html#xref "xref") number of this object is returned
    by the method.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/BBox` equals `/Mediabox` of the source page'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Matrix` equals the identity matrix.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Resources` equals that of the source page. This involves a “deep-copy” of
    hierarchically nested other objects (including fonts, images, etc.). The complexity
    involved here is covered by MuPDF’s grafting [[1]](#f1) technique functions.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: This is a stream object type, and its stream is an exact copy of the combined
    data of the source page’s [`contents`](glossary.html#contents "contents") objects.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This Form XObject is only executed once per shown source page. Subsequent displays
    of the same source page will skip this step and only create “pointer” Form XObjects
    (done in next step) to this object.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A second **Form XObject** is then created which the target page uses to invoke
    the display. This object has the following properties:'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/BBox` equals the `/CropBox` of the source page (or `"clip"`).'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/Matrix` represents the mapping of `/BBox` to the target rectangle.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/XObject` references the previous Form XObject via the fixed name `fullpage`.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The stream of this object contains exactly one fixed statement: `/fullpage
    Do`.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the method’s `"oc"` argument is given, its value is assigned to this Form
    XObject as `/OC`.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`resources`](glossary.html#resources "resources") and [`contents`](glossary.html#contents
    "contents") objects of the target page are now modified as follows.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Add an entry to the `/XObject` dictionary of `/Resources` with the name [`fzFrm`](colorspace.html#Colorspace.n
    "Colorspace.n") (with n chosen such that this entry is unique on the page).
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Depending on `"overlay"`, prepend or append a new object to the page’s `/Contents`
    array, containing the statement `q /fzFrm<n> Do Q`.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This design approach ensures that:'
  prefs: []
  type: TYPE_NORMAL
- en: The (potentially large) source page is only copied once to the target PDF. Only
    small “pointer” Form XObjects objects are created per each target page to show
    the source page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each referring target page can have its own `"oc"` parameter to control the
    source page’s visibility individually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '## Redirecting Error and Warning Messages'
  prefs: []
  type: TYPE_NORMAL
- en: Since MuPDF version 1.16 error and warning messages can be redirected via an
    official plugin.
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF will put error messages to `sys.stderr` prefixed with the string “mupdf:”.
    Warnings are internally stored and can be accessed via *pymupdf.TOOLS.mupdf_warnings()*.
    There also is a function to empty this store.
  prefs: []
  type: TYPE_NORMAL
- en: '## Coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the most frequently used terms in this documentation. A **coordinate**
    generally means a pair of numbers `(x, y)` referring to some location, like a
    corner of a rectangle ([Rect](rect.html#rect)), a [Point](point.html#point) and
    so forth. The two values usually are floats, but there a objects like images which
    only allow them to be integers.
  prefs: []
  type: TYPE_NORMAL
- en: To actually *find* a coordinate’s location, we also need to know the *reference*
    point for `x` and `y` - in other words, we must know where location `(0, 0)` is
    positioned. Once `(0, 0)` (the “origin”) is known, we speak of a “coordinate system”.
  prefs: []
  type: TYPE_NORMAL
- en: Several coordinate systems exist in document processing. For instance, the coordinate
    systems of a PDF page and the image created from it are **different**. We therefore
    need ways to *transform* coordinates from one system to another (and also back
    occasionally). This is the task of a [Matrix](matrix.html#matrix). It is a mathematical
    function which works much like a factor that can be “multiplied” with a point
    or rectangle to give us the corresponding point / rectangle in another coordinate
    system. The inverse of a transformation matrix can be used to revert the transformation.
    Much like multiplying by some factor, say 3, can be reverted by dividing the result
    by 3 (or multiplying it with 1/3).
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates and Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Images have a coordinate system with integer coordinates. Origin `(0, 0)` is
    the top-left point. `x` values must be in `range(width)`, and `y` values in `range(height)`.
    Therefore, `y` values *increase* if we go *downwards*. For every image, there
    is only a **finite number** of coordinates, namely `width * height`. A location
    in an image is also called a “pixel”.
  prefs: []
  type: TYPE_NORMAL
- en: 'How **large** an image will be (in centimeters or inches) when e.g. printed,
    depends on additional information: the “resolution”. This is measured in **DPI**
    (dots per inch, or pixels per inch). To find the printed size of some image, we
    therefore must divide its width and its height by the corresponding DPI values
    (there may separate ones for width and for height) and will get the respective
    number of inches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Origin Point, Point Size and Y-Axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In **PDF**, the origin `(0, 0)` of a page is located at its **bottom-left point**.
    In **MuPDF**, the origin `(0, 0)` of a page is located at its **top-left point**.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-coordinate-space.png](../Images/fdb4dc6f90fefd7f22efb8a073df53a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Coordinates are float numbers and measured in **points**, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '**one point equals 1/72 inches**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typical document page sizes are **ISO A4** and **Letter**. A **Letter** page
    has a size of **8.5 x 11 inches**, corresponding to **612 x 792 points**. In the
    **PDF** coordinate system, the top-left point of a **Letter** page hence has the
    coordinate `(0, 792)` as **the y-axis points upwards**. Now we know our document
    size the **MuPDF** coordinate system for the bottom right would be coordinate
    `(612, 792)` (and for **PDF** this coordinate would then be `(612,0)`).
  prefs: []
  type: TYPE_NORMAL
- en: Theoretically, there are **infinitely many** coordinate positions on a **PDF**
    page. In practice however, at most the first 5 decimal places are sufficient for
    a reasonable precision.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In **MuPDF**, multiple document formats are supported - **PDF** just being one
    among **over a dozen others**. Images are also supported as documents in **MuPDF**
    (therefore having one page usually). This is one of the reasons why **MuPDF**
    uses a coordinate system with the origin `(0, 0)` being the **top-left** point
    of any document page. **The y-axis points downwards**, like with images. Coordinates
    in **MuPDF** in any case are floats, like in **PDF**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A rectangle `Rect(0, 0, 100, 100)` for instance in **MuPDF** (and thus **PyMuPDF**)
    therefore is a square with edges of length 100 points (= 1.39 inches or 3.53 centimeters).
    Its top-left corner is the origin. To switch between the two coordinate systems
    **PDF** to **MuPDF**, every [Page](page.html#page) object has a [`Page.transformation_matrix`](page.html#Page.transformation_matrix
    "Page.transformation_matrix"). Its inverse can be used to compute a rectangle’s
    PDF coordinates. In this way we can conveniently find that `Rect(0, 0, 100, 100)`
    in **MuPDF** is the same as `Rect(0, 692, 100, 792)` in **PDF**. See this code
    snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates and Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Images have a coordinate system with integer coordinates. Origin `(0, 0)` is
    the top-left point. `x` values must be in `range(width)`, and `y` values in `range(height)`.
    Therefore, `y` values *increase* if we go *downwards*. For every image, there
    is only a **finite number** of coordinates, namely `width * height`. A location
    in an image is also called a “pixel”.
  prefs: []
  type: TYPE_NORMAL
- en: 'How **large** an image will be (in centimeters or inches) when e.g. printed,
    depends on additional information: the “resolution”. This is measured in **DPI**
    (dots per inch, or pixels per inch). To find the printed size of some image, we
    therefore must divide its width and its height by the corresponding DPI values
    (there may separate ones for width and for height) and will get the respective
    number of inches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Origin Point, Point Size and Y-Axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In **PDF**, the origin `(0, 0)` of a page is located at its **bottom-left point**.
    In **MuPDF**, the origin `(0, 0)` of a page is located at its **top-left point**.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-coordinate-space.png](../Images/fdb4dc6f90fefd7f22efb8a073df53a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Coordinates are float numbers and measured in **points**, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '**one point equals 1/72 inches**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typical document page sizes are **ISO A4** and **Letter**. A **Letter** page
    has a size of **8.5 x 11 inches**, corresponding to **612 x 792 points**. In the
    **PDF** coordinate system, the top-left point of a **Letter** page hence has the
    coordinate `(0, 792)` as **the y-axis points upwards**. Now we know our document
    size the **MuPDF** coordinate system for the bottom right would be coordinate
    `(612, 792)` (and for **PDF** this coordinate would then be `(612,0)`).
  prefs: []
  type: TYPE_NORMAL
- en: Theoretically, there are **infinitely many** coordinate positions on a **PDF**
    page. In practice however, at most the first 5 decimal places are sufficient for
    a reasonable precision.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In **MuPDF**, multiple document formats are supported - **PDF** just being one
    among **over a dozen others**. Images are also supported as documents in **MuPDF**
    (therefore having one page usually). This is one of the reasons why **MuPDF**
    uses a coordinate system with the origin `(0, 0)` being the **top-left** point
    of any document page. **The y-axis points downwards**, like with images. Coordinates
    in **MuPDF** in any case are floats, like in **PDF**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A rectangle `Rect(0, 0, 100, 100)` for instance in **MuPDF** (and thus **PyMuPDF**)
    therefore is a square with edges of length 100 points (= 1.39 inches or 3.53 centimeters).
    Its top-left corner is the origin. To switch between the two coordinate systems
    **PDF** to **MuPDF**, every [Page](page.html#page) object has a [`Page.transformation_matrix`](page.html#Page.transformation_matrix
    "Page.transformation_matrix"). Its inverse can be used to compute a rectangle’s
    PDF coordinates. In this way we can conveniently find that `Rect(0, 0, 100, 100)`
    in **MuPDF** is the same as `Rect(0, 692, 100, 792)` in **PDF**. See this code
    snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
