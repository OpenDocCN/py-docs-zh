["```py\nclass sqlalchemy.orm.SessionEvents\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import sessionmaker\n\ndef my_before_commit(session):\n    print(\"before commit!\")\n\nSession = sessionmaker()\n\nevent.listen(Session, \"before_commit\", my_before_commit)\n```", "```py\nmethod after_attach(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_attach')\ndef receive_after_attach(session, instance):\n    \"listen for the 'after_attach' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_begin(session: Session, transaction: SessionTransaction, connection: Connection) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_begin')\ndef receive_after_begin(session, transaction, connection):\n    \"listen for the 'after_begin' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_bulk_delete(delete_context: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_delete')\ndef receive_after_bulk_delete(delete_context):\n    \"listen for the 'after_bulk_delete' event\"\n\n    # ... (event handling logic) ...\n\n# DEPRECATED calling style (pre-0.9, will be removed in a future release)\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_delete')\ndef receive_after_bulk_delete(session, query, query_context, result):\n    \"listen for the 'after_bulk_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_bulk_update(update_context: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_update')\ndef receive_after_bulk_update(update_context):\n    \"listen for the 'after_bulk_update' event\"\n\n    # ... (event handling logic) ...\n\n# DEPRECATED calling style (pre-0.9, will be removed in a future release)\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_update')\ndef receive_after_bulk_update(session, query, query_context, result):\n    \"listen for the 'after_bulk_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_commit(session: Session) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_commit')\ndef receive_after_commit(session):\n    \"listen for the 'after_commit' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_flush(session: Session, flush_context: UOWTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_flush')\ndef receive_after_flush(session, flush_context):\n    \"listen for the 'after_flush' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_flush_postexec(session: Session, flush_context: UOWTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_flush_postexec')\ndef receive_after_flush_postexec(session, flush_context):\n    \"listen for the 'after_flush_postexec' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_rollback(session: Session) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_rollback')\ndef receive_after_rollback(session):\n    \"listen for the 'after_rollback' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_soft_rollback(session: Session, previous_transaction: SessionTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_soft_rollback')\ndef receive_after_soft_rollback(session, previous_transaction):\n    \"listen for the 'after_soft_rollback' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Session, \"after_soft_rollback\")\ndef do_something(session, previous_transaction):\n    if session.is_active:\n        session.execute(text(\"select * from some_table\"))\n```", "```py\nmethod after_transaction_create(session: Session, transaction: SessionTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_transaction_create')\ndef receive_after_transaction_create(session, transaction):\n    \"listen for the 'after_transaction_create' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_create(session, transaction):\n        if transaction.parent is None:\n            # work with top-level transaction\n    ```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_create(session, transaction):\n        if transaction.nested:\n            # work with SAVEPOINT transaction\n    ```", "```py\nmethod after_transaction_end(session: Session, transaction: SessionTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_transaction_end')\ndef receive_after_transaction_end(session, transaction):\n    \"listen for the 'after_transaction_end' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_end(session, transaction):\n        if transaction.parent is None:\n            # work with top-level transaction\n    ```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_end(session, transaction):\n        if transaction.nested:\n            # work with SAVEPOINT transaction\n    ```", "```py\nmethod before_attach(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'before_attach')\ndef receive_before_attach(session, instance):\n    \"listen for the 'before_attach' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_commit(session: Session) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'before_commit')\ndef receive_before_commit(session):\n    \"listen for the 'before_commit' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_flush(session: Session, flush_context: UOWTransaction, instances: Sequence[_O] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'before_flush')\ndef receive_before_flush(session, flush_context, instances):\n    \"listen for the 'before_flush' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod deleted_to_detached(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'deleted_to_detached')\ndef receive_deleted_to_detached(session, instance):\n    \"listen for the 'deleted_to_detached' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod deleted_to_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'deleted_to_persistent')\ndef receive_deleted_to_persistent(session, instance):\n    \"listen for the 'deleted_to_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod detached_to_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'detached_to_persistent')\ndef receive_detached_to_persistent(session, instance):\n    \"listen for the 'detached_to_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.SessionEventsDispatch object>\n```", "```py\nmethod do_orm_execute(orm_execute_state: ORMExecuteState) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'do_orm_execute')\ndef receive_do_orm_execute(orm_execute_state):\n    \"listen for the 'do_orm_execute' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod loaded_as_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'loaded_as_persistent')\ndef receive_loaded_as_persistent(session, instance):\n    \"listen for the 'loaded_as_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod pending_to_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'pending_to_persistent')\ndef receive_pending_to_persistent(session, instance):\n    \"listen for the 'pending_to_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod pending_to_transient(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'pending_to_transient')\ndef receive_pending_to_transient(session, instance):\n    \"listen for the 'pending_to_transient' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod persistent_to_deleted(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'persistent_to_deleted')\ndef receive_persistent_to_deleted(session, instance):\n    \"listen for the 'persistent_to_deleted' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod persistent_to_detached(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'persistent_to_detached')\ndef receive_persistent_to_detached(session, instance):\n    \"listen for the 'persistent_to_detached' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod persistent_to_transient(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'persistent_to_transient')\ndef receive_persistent_to_transient(session, instance):\n    \"listen for the 'persistent_to_transient' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod transient_to_pending(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'transient_to_pending')\ndef receive_transient_to_pending(session, instance):\n    \"listen for the 'transient_to_pending' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.MapperEvents\n```", "```py\nfrom sqlalchemy import event\n\ndef my_before_insert_listener(mapper, connection, target):\n    # execute a stored procedure upon INSERT,\n    # apply the value to the row to be inserted\n    target.calculated_value = connection.execute(\n        text(\"select my_special_function(%d)\" % target.special_number)\n    ).scalar()\n\n# associate the listener function with SomeClass,\n# to execute during the \"before_insert\" hook\nevent.listen(\n    SomeClass, 'before_insert', my_before_insert_listener)\n```", "```py\nmethod after_configured() \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_configured')\ndef receive_after_configured():\n    \"listen for the 'after_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm import Mapper\n\n@event.listens_for(Mapper, \"after_configured\")\ndef go():\n    # ...\n```", "```py\nfrom sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, \"after_configured\", once=True)\ndef go():\n    # ...\n```", "```py\nmethod after_delete(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_delete')\ndef receive_after_delete(mapper, connection, target):\n    \"listen for the 'after_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_insert(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_insert')\ndef receive_after_insert(mapper, connection, target):\n    \"listen for the 'after_insert' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_mapper_constructed(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_mapper_constructed')\ndef receive_after_mapper_constructed(mapper, class_):\n    \"listen for the 'after_mapper_constructed' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_update(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_update')\ndef receive_after_update(mapper, connection, target):\n    \"listen for the 'after_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_configured() \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_configured')\ndef receive_before_configured():\n    \"listen for the 'before_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm import Mapper\n\n@event.listens_for(Mapper, \"before_configured\")\ndef go():\n    ...\n```", "```py\nfrom sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, \"before_configured\", once=True)\ndef go():\n    ...\n```", "```py\nmethod before_delete(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_delete')\ndef receive_before_delete(mapper, connection, target):\n    \"listen for the 'before_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_insert(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_insert')\ndef receive_before_insert(mapper, connection, target):\n    \"listen for the 'before_insert' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_mapper_configured(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_mapper_configured')\ndef receive_before_mapper_configured(mapper, class_):\n    \"listen for the 'before_mapper_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm import EXT_SKIP\n\nBase = declarative_base()\n\nDontConfigureBase = declarative_base()\n\n@event.listens_for(\n    DontConfigureBase,\n    \"before_mapper_configured\", retval=True, propagate=True)\ndef dont_configure(mapper, cls):\n    return EXT_SKIP\n```", "```py\nmethod before_update(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_update')\ndef receive_before_update(mapper, connection, target):\n    \"listen for the 'before_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.MapperEventsDispatch object>\n```", "```py\nmethod instrument_class(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'instrument_class')\ndef receive_instrument_class(mapper, class_):\n    \"listen for the 'instrument_class' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nBase = declarative_base()\n\n@event.listens_for(Base, \"instrument_class\", propagate=True)\ndef on_new_class(mapper, cls_):\n    \" ... \"\n```", "```py\nmethod mapper_configured(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'mapper_configured')\ndef receive_mapper_configured(mapper, class_):\n    \"listen for the 'mapper_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.InstanceEvents\n```", "```py\nfrom sqlalchemy import event\n\ndef my_load_listener(target, context):\n    print(\"on load!\")\n\nevent.listen(SomeClass, 'load', my_load_listener)\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.InstanceEventsDispatch object>\n```", "```py\nmethod expire(target: _O, attrs: Iterable[str] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'expire')\ndef receive_expire(target, attrs):\n    \"listen for the 'expire' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod first_init(manager: ClassManager[_O], cls: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'first_init')\ndef receive_first_init(manager, cls):\n    \"listen for the 'first_init' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod init(target: _O, args: Any, kwargs: Any) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'init')\ndef receive_init(target, args, kwargs):\n    \"listen for the 'init' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod init_failure(target: _O, args: Any, kwargs: Any) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'init_failure')\ndef receive_init_failure(target, args, kwargs):\n    \"listen for the 'init_failure' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod load(target: _O, context: QueryContext) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'load')\ndef receive_load(target, context):\n    \"listen for the 'load' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(\n    SomeClass, \"load\", restore_load_context=True)\ndef on_load(instance, context):\n    instance.some_unloaded_attribute\n```", "```py\nmethod pickle(target: _O, state_dict: _InstanceDict) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'pickle')\ndef receive_pickle(target, state_dict):\n    \"listen for the 'pickle' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod refresh(target: _O, context: QueryContext, attrs: Iterable[str] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'refresh')\ndef receive_refresh(target, context, attrs):\n    \"listen for the 'refresh' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod refresh_flush(target: _O, flush_context: UOWTransaction, attrs: Iterable[str] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'refresh_flush')\ndef receive_refresh_flush(target, flush_context, attrs):\n    \"listen for the 'refresh_flush' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod unpickle(target: _O, state_dict: _InstanceDict) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'unpickle')\ndef receive_unpickle(target, state_dict):\n    \"listen for the 'unpickle' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.AttributeEvents\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(MyClass.collection, 'append', propagate=True)\ndef my_append_listener(target, value, initiator):\n    print(\"received append event for target: %s\" % target)\n```", "```py\ndef validate_phone(target, value, oldvalue, initiator):\n    \"Strip non-numeric characters from a phone number\"\n\n    return re.sub(r'\\D', '', value)\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, 'set', validate_phone, retval=True)\n```", "```py\n@event.listens_for(MySuperClass.attr, 'set', propagate=True)\ndef receive_set(target, value, initiator):\n    print(\"value set: %s\" % target)\n```", "```py\nmethod append(target: _O, value: _T, initiator: Event, *, key: EventConstants = EventConstants.NO_KEY) \u2192 _T | None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'append')\ndef receive_append(target, value, initiator):\n    \"listen for the 'append' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod append_wo_mutation(target: _O, value: _T, initiator: Event, *, key: EventConstants = EventConstants.NO_KEY) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'append_wo_mutation')\ndef receive_append_wo_mutation(target, value, initiator):\n    \"listen for the 'append_wo_mutation' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod bulk_replace(target: _O, values: Iterable[_T], initiator: Event, *, keys: Iterable[EventConstants] | None = None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'bulk_replace')\ndef receive_bulk_replace(target, values, initiator):\n    \"listen for the 'bulk_replace' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm.attributes import OP_BULK_REPLACE\n\n@event.listens_for(SomeObject.collection, \"bulk_replace\")\ndef process_collection(target, values, initiator):\n    values[:] = [_make_value(value) for value in values]\n\n@event.listens_for(SomeObject.collection, \"append\", retval=True)\ndef process_collection(target, value, initiator):\n    # make sure bulk_replace didn't already do it\n    if initiator is None or initiator.op is not OP_BULK_REPLACE:\n        return _make_value(value)\n    else:\n        return value\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.AttributeEventsDispatch object>\n```", "```py\nmethod dispose_collection(target: _O, collection: Collection[Any], collection_adapter: CollectionAdapter) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'dispose_collection')\ndef receive_dispose_collection(target, collection, collection_adapter):\n    \"listen for the 'dispose_collection' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nu1.addresses.append(a1)\n\nu1.addresses = [a2, a3]  # <- old collection is disposed\n```", "```py\nmethod init_collection(target: _O, collection: Type[Collection[Any]], collection_adapter: CollectionAdapter) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'init_collection')\ndef receive_init_collection(target, collection, collection_adapter):\n    \"listen for the 'init_collection' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nu1 = User()\nu1.addresses.append(a1)  #  <- new collection\n```", "```py\nu1.addresses = [a2, a3]  #  <- new collection\n```", "```py\nmethod init_scalar(target: _O, value: _T, dict_: Dict[Any, Any]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'init_scalar')\ndef receive_init_scalar(target, value, dict_):\n    \"listen for the 'init_scalar' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nx = my_object.some_attribute\n```", "```py\nSOME_CONSTANT = 3.1415926\n\nclass MyClass(Base):\n    # ...\n\n    some_attribute = Column(Numeric, default=SOME_CONSTANT)\n\n@event.listens_for(\n    MyClass.some_attribute, \"init_scalar\",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    dict_['some_attribute'] = SOME_CONSTANT\n    return SOME_CONSTANT\n```", "```py\nSOME_CONSTANT = 3.1415926\n\n@event.listens_for(\n    MyClass.some_attribute, \"init_scalar\",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    # will also fire off attribute set events\n    target.some_attribute = SOME_CONSTANT\n    return SOME_CONSTANT\n```", "```py\nmethod modified(target: _O, initiator: Event) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'modified')\ndef receive_modified(target, initiator):\n    \"listen for the 'modified' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod remove(target: _O, value: _T, initiator: Event, *, key: EventConstants = EventConstants.NO_KEY) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'remove')\ndef receive_remove(target, value, initiator):\n    \"listen for the 'remove' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod set(target: _O, value: _T, oldvalue: _T, initiator: Event) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'set')\ndef receive_set(target, value, oldvalue, initiator):\n    \"listen for the 'set' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.QueryEvents\n```", "```py\nmethod before_compile(query: Query) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeQuery, 'before_compile')\ndef receive_before_compile(query):\n    \"listen for the 'before_compile' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Query, \"before_compile\", retval=True)\ndef no_deleted(query):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n```", "```py\n@event.listens_for(\n    Query, \"before_compile\", retval=True, bake_ok=True)\ndef my_event(query):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n```", "```py\nmethod before_compile_delete(query: Query, delete_context: BulkDelete) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeQuery, 'before_compile_delete')\ndef receive_before_compile_delete(query, delete_context):\n    \"listen for the 'before_compile_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Query, \"before_compile_delete\", retval=True)\ndef no_deleted(query, delete_context):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n```", "```py\nmethod before_compile_update(query: Query, update_context: BulkUpdate) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeQuery, 'before_compile_update')\ndef receive_before_compile_update(query, update_context):\n    \"listen for the 'before_compile_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Query, \"before_compile_update\", retval=True)\ndef no_deleted(query, update_context):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n\n            update_context.values['timestamp'] = datetime.utcnow()\n    return query\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.QueryEventsDispatch object>\n```", "```py\nclass sqlalchemy.orm.InstrumentationEvents\n```", "```py\nmethod attribute_instrument(cls: ClassManager[_O], key: _KT, inst: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeBaseClass, 'attribute_instrument')\ndef receive_attribute_instrument(cls, key, inst):\n    \"listen for the 'attribute_instrument' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod class_instrument(cls: ClassManager[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeBaseClass, 'class_instrument')\ndef receive_class_instrument(cls):\n    \"listen for the 'class_instrument' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod class_uninstrument(cls: ClassManager[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeBaseClass, 'class_uninstrument')\ndef receive_class_uninstrument(cls):\n    \"listen for the 'class_uninstrument' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.InstrumentationEventsDispatch object>\n```", "```py\nclass sqlalchemy.orm.SessionEvents\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import sessionmaker\n\ndef my_before_commit(session):\n    print(\"before commit!\")\n\nSession = sessionmaker()\n\nevent.listen(Session, \"before_commit\", my_before_commit)\n```", "```py\nmethod after_attach(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_attach')\ndef receive_after_attach(session, instance):\n    \"listen for the 'after_attach' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_begin(session: Session, transaction: SessionTransaction, connection: Connection) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_begin')\ndef receive_after_begin(session, transaction, connection):\n    \"listen for the 'after_begin' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_bulk_delete(delete_context: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_delete')\ndef receive_after_bulk_delete(delete_context):\n    \"listen for the 'after_bulk_delete' event\"\n\n    # ... (event handling logic) ...\n\n# DEPRECATED calling style (pre-0.9, will be removed in a future release)\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_delete')\ndef receive_after_bulk_delete(session, query, query_context, result):\n    \"listen for the 'after_bulk_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_bulk_update(update_context: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_update')\ndef receive_after_bulk_update(update_context):\n    \"listen for the 'after_bulk_update' event\"\n\n    # ... (event handling logic) ...\n\n# DEPRECATED calling style (pre-0.9, will be removed in a future release)\n@event.listens_for(SomeSessionClassOrObject, 'after_bulk_update')\ndef receive_after_bulk_update(session, query, query_context, result):\n    \"listen for the 'after_bulk_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_commit(session: Session) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_commit')\ndef receive_after_commit(session):\n    \"listen for the 'after_commit' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_flush(session: Session, flush_context: UOWTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_flush')\ndef receive_after_flush(session, flush_context):\n    \"listen for the 'after_flush' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_flush_postexec(session: Session, flush_context: UOWTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_flush_postexec')\ndef receive_after_flush_postexec(session, flush_context):\n    \"listen for the 'after_flush_postexec' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_rollback(session: Session) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_rollback')\ndef receive_after_rollback(session):\n    \"listen for the 'after_rollback' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_soft_rollback(session: Session, previous_transaction: SessionTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_soft_rollback')\ndef receive_after_soft_rollback(session, previous_transaction):\n    \"listen for the 'after_soft_rollback' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Session, \"after_soft_rollback\")\ndef do_something(session, previous_transaction):\n    if session.is_active:\n        session.execute(text(\"select * from some_table\"))\n```", "```py\nmethod after_transaction_create(session: Session, transaction: SessionTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_transaction_create')\ndef receive_after_transaction_create(session, transaction):\n    \"listen for the 'after_transaction_create' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_create(session, transaction):\n        if transaction.parent is None:\n            # work with top-level transaction\n    ```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_create(session, transaction):\n        if transaction.nested:\n            # work with SAVEPOINT transaction\n    ```", "```py\nmethod after_transaction_end(session: Session, transaction: SessionTransaction) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'after_transaction_end')\ndef receive_after_transaction_end(session, transaction):\n    \"listen for the 'after_transaction_end' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_end(session, transaction):\n        if transaction.parent is None:\n            # work with top-level transaction\n    ```", "```py\n    @event.listens_for(session, \"after_transaction_create\")\n    def after_transaction_end(session, transaction):\n        if transaction.nested:\n            # work with SAVEPOINT transaction\n    ```", "```py\nmethod before_attach(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'before_attach')\ndef receive_before_attach(session, instance):\n    \"listen for the 'before_attach' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_commit(session: Session) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'before_commit')\ndef receive_before_commit(session):\n    \"listen for the 'before_commit' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_flush(session: Session, flush_context: UOWTransaction, instances: Sequence[_O] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'before_flush')\ndef receive_before_flush(session, flush_context, instances):\n    \"listen for the 'before_flush' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod deleted_to_detached(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'deleted_to_detached')\ndef receive_deleted_to_detached(session, instance):\n    \"listen for the 'deleted_to_detached' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod deleted_to_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'deleted_to_persistent')\ndef receive_deleted_to_persistent(session, instance):\n    \"listen for the 'deleted_to_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod detached_to_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'detached_to_persistent')\ndef receive_detached_to_persistent(session, instance):\n    \"listen for the 'detached_to_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.SessionEventsDispatch object>\n```", "```py\nmethod do_orm_execute(orm_execute_state: ORMExecuteState) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'do_orm_execute')\ndef receive_do_orm_execute(orm_execute_state):\n    \"listen for the 'do_orm_execute' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod loaded_as_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'loaded_as_persistent')\ndef receive_loaded_as_persistent(session, instance):\n    \"listen for the 'loaded_as_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod pending_to_persistent(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'pending_to_persistent')\ndef receive_pending_to_persistent(session, instance):\n    \"listen for the 'pending_to_persistent' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod pending_to_transient(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'pending_to_transient')\ndef receive_pending_to_transient(session, instance):\n    \"listen for the 'pending_to_transient' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod persistent_to_deleted(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'persistent_to_deleted')\ndef receive_persistent_to_deleted(session, instance):\n    \"listen for the 'persistent_to_deleted' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod persistent_to_detached(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'persistent_to_detached')\ndef receive_persistent_to_detached(session, instance):\n    \"listen for the 'persistent_to_detached' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod persistent_to_transient(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'persistent_to_transient')\ndef receive_persistent_to_transient(session, instance):\n    \"listen for the 'persistent_to_transient' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod transient_to_pending(session: Session, instance: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeSessionClassOrObject, 'transient_to_pending')\ndef receive_transient_to_pending(session, instance):\n    \"listen for the 'transient_to_pending' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.MapperEvents\n```", "```py\nfrom sqlalchemy import event\n\ndef my_before_insert_listener(mapper, connection, target):\n    # execute a stored procedure upon INSERT,\n    # apply the value to the row to be inserted\n    target.calculated_value = connection.execute(\n        text(\"select my_special_function(%d)\" % target.special_number)\n    ).scalar()\n\n# associate the listener function with SomeClass,\n# to execute during the \"before_insert\" hook\nevent.listen(\n    SomeClass, 'before_insert', my_before_insert_listener)\n```", "```py\nmethod after_configured() \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_configured')\ndef receive_after_configured():\n    \"listen for the 'after_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm import Mapper\n\n@event.listens_for(Mapper, \"after_configured\")\ndef go():\n    # ...\n```", "```py\nfrom sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, \"after_configured\", once=True)\ndef go():\n    # ...\n```", "```py\nmethod after_delete(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_delete')\ndef receive_after_delete(mapper, connection, target):\n    \"listen for the 'after_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_insert(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_insert')\ndef receive_after_insert(mapper, connection, target):\n    \"listen for the 'after_insert' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_mapper_constructed(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_mapper_constructed')\ndef receive_after_mapper_constructed(mapper, class_):\n    \"listen for the 'after_mapper_constructed' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod after_update(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'after_update')\ndef receive_after_update(mapper, connection, target):\n    \"listen for the 'after_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_configured() \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_configured')\ndef receive_before_configured():\n    \"listen for the 'before_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm import Mapper\n\n@event.listens_for(Mapper, \"before_configured\")\ndef go():\n    ...\n```", "```py\nfrom sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, \"before_configured\", once=True)\ndef go():\n    ...\n```", "```py\nmethod before_delete(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_delete')\ndef receive_before_delete(mapper, connection, target):\n    \"listen for the 'before_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_insert(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_insert')\ndef receive_before_insert(mapper, connection, target):\n    \"listen for the 'before_insert' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod before_mapper_configured(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_mapper_configured')\ndef receive_before_mapper_configured(mapper, class_):\n    \"listen for the 'before_mapper_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm import EXT_SKIP\n\nBase = declarative_base()\n\nDontConfigureBase = declarative_base()\n\n@event.listens_for(\n    DontConfigureBase,\n    \"before_mapper_configured\", retval=True, propagate=True)\ndef dont_configure(mapper, cls):\n    return EXT_SKIP\n```", "```py\nmethod before_update(mapper: Mapper[_O], connection: Connection, target: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'before_update')\ndef receive_before_update(mapper, connection, target):\n    \"listen for the 'before_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.MapperEventsDispatch object>\n```", "```py\nmethod instrument_class(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'instrument_class')\ndef receive_instrument_class(mapper, class_):\n    \"listen for the 'instrument_class' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nBase = declarative_base()\n\n@event.listens_for(Base, \"instrument_class\", propagate=True)\ndef on_new_class(mapper, cls_):\n    \" ... \"\n```", "```py\nmethod mapper_configured(mapper: Mapper[_O], class_: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'mapper_configured')\ndef receive_mapper_configured(mapper, class_):\n    \"listen for the 'mapper_configured' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.InstanceEvents\n```", "```py\nfrom sqlalchemy import event\n\ndef my_load_listener(target, context):\n    print(\"on load!\")\n\nevent.listen(SomeClass, 'load', my_load_listener)\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.InstanceEventsDispatch object>\n```", "```py\nmethod expire(target: _O, attrs: Iterable[str] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'expire')\ndef receive_expire(target, attrs):\n    \"listen for the 'expire' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod first_init(manager: ClassManager[_O], cls: Type[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'first_init')\ndef receive_first_init(manager, cls):\n    \"listen for the 'first_init' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod init(target: _O, args: Any, kwargs: Any) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'init')\ndef receive_init(target, args, kwargs):\n    \"listen for the 'init' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod init_failure(target: _O, args: Any, kwargs: Any) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'init_failure')\ndef receive_init_failure(target, args, kwargs):\n    \"listen for the 'init_failure' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod load(target: _O, context: QueryContext) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'load')\ndef receive_load(target, context):\n    \"listen for the 'load' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(\n    SomeClass, \"load\", restore_load_context=True)\ndef on_load(instance, context):\n    instance.some_unloaded_attribute\n```", "```py\nmethod pickle(target: _O, state_dict: _InstanceDict) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'pickle')\ndef receive_pickle(target, state_dict):\n    \"listen for the 'pickle' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod refresh(target: _O, context: QueryContext, attrs: Iterable[str] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'refresh')\ndef receive_refresh(target, context, attrs):\n    \"listen for the 'refresh' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod refresh_flush(target: _O, flush_context: UOWTransaction, attrs: Iterable[str] | None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'refresh_flush')\ndef receive_refresh_flush(target, flush_context, attrs):\n    \"listen for the 'refresh_flush' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod unpickle(target: _O, state_dict: _InstanceDict) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass, 'unpickle')\ndef receive_unpickle(target, state_dict):\n    \"listen for the 'unpickle' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.AttributeEvents\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(MyClass.collection, 'append', propagate=True)\ndef my_append_listener(target, value, initiator):\n    print(\"received append event for target: %s\" % target)\n```", "```py\ndef validate_phone(target, value, oldvalue, initiator):\n    \"Strip non-numeric characters from a phone number\"\n\n    return re.sub(r'\\D', '', value)\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, 'set', validate_phone, retval=True)\n```", "```py\n@event.listens_for(MySuperClass.attr, 'set', propagate=True)\ndef receive_set(target, value, initiator):\n    print(\"value set: %s\" % target)\n```", "```py\nmethod append(target: _O, value: _T, initiator: Event, *, key: EventConstants = EventConstants.NO_KEY) \u2192 _T | None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'append')\ndef receive_append(target, value, initiator):\n    \"listen for the 'append' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod append_wo_mutation(target: _O, value: _T, initiator: Event, *, key: EventConstants = EventConstants.NO_KEY) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'append_wo_mutation')\ndef receive_append_wo_mutation(target, value, initiator):\n    \"listen for the 'append_wo_mutation' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod bulk_replace(target: _O, values: Iterable[_T], initiator: Event, *, keys: Iterable[EventConstants] | None = None) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'bulk_replace')\ndef receive_bulk_replace(target, values, initiator):\n    \"listen for the 'bulk_replace' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nfrom sqlalchemy.orm.attributes import OP_BULK_REPLACE\n\n@event.listens_for(SomeObject.collection, \"bulk_replace\")\ndef process_collection(target, values, initiator):\n    values[:] = [_make_value(value) for value in values]\n\n@event.listens_for(SomeObject.collection, \"append\", retval=True)\ndef process_collection(target, value, initiator):\n    # make sure bulk_replace didn't already do it\n    if initiator is None or initiator.op is not OP_BULK_REPLACE:\n        return _make_value(value)\n    else:\n        return value\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.AttributeEventsDispatch object>\n```", "```py\nmethod dispose_collection(target: _O, collection: Collection[Any], collection_adapter: CollectionAdapter) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'dispose_collection')\ndef receive_dispose_collection(target, collection, collection_adapter):\n    \"listen for the 'dispose_collection' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nu1.addresses.append(a1)\n\nu1.addresses = [a2, a3]  # <- old collection is disposed\n```", "```py\nmethod init_collection(target: _O, collection: Type[Collection[Any]], collection_adapter: CollectionAdapter) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'init_collection')\ndef receive_init_collection(target, collection, collection_adapter):\n    \"listen for the 'init_collection' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nu1 = User()\nu1.addresses.append(a1)  #  <- new collection\n```", "```py\nu1.addresses = [a2, a3]  #  <- new collection\n```", "```py\nmethod init_scalar(target: _O, value: _T, dict_: Dict[Any, Any]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'init_scalar')\ndef receive_init_scalar(target, value, dict_):\n    \"listen for the 'init_scalar' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nx = my_object.some_attribute\n```", "```py\nSOME_CONSTANT = 3.1415926\n\nclass MyClass(Base):\n    # ...\n\n    some_attribute = Column(Numeric, default=SOME_CONSTANT)\n\n@event.listens_for(\n    MyClass.some_attribute, \"init_scalar\",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    dict_['some_attribute'] = SOME_CONSTANT\n    return SOME_CONSTANT\n```", "```py\nSOME_CONSTANT = 3.1415926\n\n@event.listens_for(\n    MyClass.some_attribute, \"init_scalar\",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    # will also fire off attribute set events\n    target.some_attribute = SOME_CONSTANT\n    return SOME_CONSTANT\n```", "```py\nmethod modified(target: _O, initiator: Event) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'modified')\ndef receive_modified(target, initiator):\n    \"listen for the 'modified' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod remove(target: _O, value: _T, initiator: Event, *, key: EventConstants = EventConstants.NO_KEY) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'remove')\ndef receive_remove(target, value, initiator):\n    \"listen for the 'remove' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod set(target: _O, value: _T, oldvalue: _T, initiator: Event) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeClass.some_attribute, 'set')\ndef receive_set(target, value, oldvalue, initiator):\n    \"listen for the 'set' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nclass sqlalchemy.orm.QueryEvents\n```", "```py\nmethod before_compile(query: Query) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeQuery, 'before_compile')\ndef receive_before_compile(query):\n    \"listen for the 'before_compile' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Query, \"before_compile\", retval=True)\ndef no_deleted(query):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n```", "```py\n@event.listens_for(\n    Query, \"before_compile\", retval=True, bake_ok=True)\ndef my_event(query):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n```", "```py\nmethod before_compile_delete(query: Query, delete_context: BulkDelete) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeQuery, 'before_compile_delete')\ndef receive_before_compile_delete(query, delete_context):\n    \"listen for the 'before_compile_delete' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Query, \"before_compile_delete\", retval=True)\ndef no_deleted(query, delete_context):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n```", "```py\nmethod before_compile_update(query: Query, update_context: BulkUpdate) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeQuery, 'before_compile_update')\ndef receive_before_compile_update(query, update_context):\n    \"listen for the 'before_compile_update' event\"\n\n    # ... (event handling logic) ...\n```", "```py\n@event.listens_for(Query, \"before_compile_update\", retval=True)\ndef no_deleted(query, update_context):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n\n            update_context.values['timestamp'] = datetime.utcnow()\n    return query\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.QueryEventsDispatch object>\n```", "```py\nclass sqlalchemy.orm.InstrumentationEvents\n```", "```py\nmethod attribute_instrument(cls: ClassManager[_O], key: _KT, inst: _O) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeBaseClass, 'attribute_instrument')\ndef receive_attribute_instrument(cls, key, inst):\n    \"listen for the 'attribute_instrument' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod class_instrument(cls: ClassManager[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeBaseClass, 'class_instrument')\ndef receive_class_instrument(cls):\n    \"listen for the 'class_instrument' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nmethod class_uninstrument(cls: ClassManager[_O]) \u2192 None\n```", "```py\nfrom sqlalchemy import event\n\n@event.listens_for(SomeBaseClass, 'class_uninstrument')\ndef receive_class_uninstrument(cls):\n    \"listen for the 'class_uninstrument' event\"\n\n    # ... (event handling logic) ...\n```", "```py\nattribute dispatch: _Dispatch[_ET] = <sqlalchemy.event.base.InstrumentationEventsDispatch object>\n```"]