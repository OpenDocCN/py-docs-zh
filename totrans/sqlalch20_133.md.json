["```py\n    from sqlalchemy import insert, update, delete\n\n    ins = insert(SomeMappedClass).values(x=5)\n\n    del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\n    upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n    ```", "```py\n    ua = aliased(User)\n    session.query(User.name).select_from(ua).join(User, User.name > ua.name)\n    ```", "```py\n    SELECT  users.name  AS  users_name  FROM  users  AS  users_1\n    JOIN  users  ON  users.name  <  users_1.name\n    ```", "```py\n    session.query(User.name).select_from(user_table.select().where(user_table.c.id > 5))\n    ```", "```py\n    SELECT  anon_1.name  AS  anon_1_name  FROM  (SELECT  users.id  AS  id,\n    users.name  AS  name  FROM  users  WHERE  users.id  >  :id_1)  AS  anon_1\n    ```", "```py\n    with conn.connect() as c:  # leaves the Connection open\n        c.execute(\"...\")\n\n    with engine.connect() as c:  # closes the Connection\n        c.execute(\"...\")\n    ```", "```py\n    expr1 = mycolumn > 2\n    bool(expr1 == expr1)\n    ```", "```py\n    from sqlalchemy import insert, update, delete\n\n    ins = insert(SomeMappedClass).values(x=5)\n\n    del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\n    upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n    ```", "```py\n    from sqlalchemy import insert, update, delete\n\n    ins = insert(SomeMappedClass).values(x=5)\n\n    del_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\n    upd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n    ```", "```py\n    ua = aliased(User)\n    session.query(User.name).select_from(ua).join(User, User.name > ua.name)\n    ```", "```py\n    SELECT  users.name  AS  users_name  FROM  users  AS  users_1\n    JOIN  users  ON  users.name  <  users_1.name\n    ```", "```py\n    session.query(User.name).select_from(user_table.select().where(user_table.c.id > 5))\n    ```", "```py\n    SELECT  anon_1.name  AS  anon_1_name  FROM  (SELECT  users.id  AS  id,\n    users.name  AS  name  FROM  users  WHERE  users.id  >  :id_1)  AS  anon_1\n    ```", "```py\n    with conn.connect() as c:  # leaves the Connection open\n        c.execute(\"...\")\n\n    with engine.connect() as c:  # closes the Connection\n        c.execute(\"...\")\n    ```", "```py\n    expr1 = mycolumn > 2\n    bool(expr1 == expr1)\n    ```", "```py\n    ua = aliased(User)\n    session.query(User.name).select_from(ua).join(User, User.name > ua.name)\n    ```", "```py\n    SELECT  users.name  AS  users_name  FROM  users  AS  users_1\n    JOIN  users  ON  users.name  <  users_1.name\n    ```", "```py\n    session.query(User.name).select_from(user_table.select().where(user_table.c.id > 5))\n    ```", "```py\n    SELECT  anon_1.name  AS  anon_1_name  FROM  (SELECT  users.id  AS  id,\n    users.name  AS  name  FROM  users  WHERE  users.id  >  :id_1)  AS  anon_1\n    ```", "```py\n    with conn.connect() as c:  # leaves the Connection open\n        c.execute(\"...\")\n\n    with engine.connect() as c:  # closes the Connection\n        c.execute(\"...\")\n    ```", "```py\n    expr1 = mycolumn > 2\n    bool(expr1 == expr1)\n    ```"]