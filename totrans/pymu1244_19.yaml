- en: Optional Content Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-optional-content.html](https://pymupdf.readthedocs.io/en/latest/recipes-optional-content.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This document explains PyMuPDF’s support of the PDF concept **“Optional Content”**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Introduction: The Optional Content Concept'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Optional Content* in PDF is a way to show or hide parts of a document based
    on certain conditions: Parameters that can be set to ON or to OFF when using a
    supporting PDF consumer (viewer), or programmatically.'
  prefs: []
  type: TYPE_NORMAL
- en: This capability is useful in items such as CAD drawings, layered artwork, maps,
    and multi-language documents. Typical uses include showing or hiding details of
    complex vector graphics like geographical maps, technical devices, architectural
    designs and similar, including automatically switching between different zooming
    levels. Other use cases may be to automatically show different detail levels when
    displaying a document on screen as opposed to printing it.
  prefs: []
  type: TYPE_NORMAL
- en: Special PDF objects, so-called **Optional Content Groups** (OCGs) are used to
    define these different *layers* of content.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning an OCG to a “normal” PDF object (like a text or an image) causes that
    object to be visible or hidden, depending on the current state of the assigned
    OCG.
  prefs: []
  type: TYPE_NORMAL
- en: To ease definition of the overall configuration of a PDF’s Optional Content,
    OCGs can be organized in higher level groupings, called **OC Configurations**.
    Each configuration being a collection of OCGs, together with each OCG’s desired
    initial visibility state. Selecting one of these configurations (via the PDF viewer
    or programmatically) causes a corresponding visibility change of all affected
    PDF objects throughout the document.
  prefs: []
  type: TYPE_NORMAL
- en: Except for the default one, OC Configurations are optional.
  prefs: []
  type: TYPE_NORMAL
- en: For more explanations and additional background please refer to PDF specification
    manuals.
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF Support for PDF Optional Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyMuPDF offers full support for viewing, defining, changing and deleting Option
    Content Groups, Configurations, maintaining the assignment of OCGs to PDF objects
    and programmatically switching between OC Configurations and the visibility states
    of each single OCG.
  prefs: []
  type: TYPE_NORMAL
- en: How to Add Optional Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is as simple as adding an Optional Content Group, OCG, to a PDF: [`Document.add_ocg()`](document.html#Document.add_ocg
    "Document.add_ocg").'
  prefs: []
  type: TYPE_NORMAL
- en: If previously the PDF had no OC support at all, the required setup (like defining
    the default OC Configuration) will be done at this point automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method returns an [`xref`](glossary.html#xref "xref") of the created OCG.
    Use this xref to associate (mark) any PDF object with it, that you want to make
    dependent on this OCG’s state. For example, you can insert an image on a page
    and refer to the xref like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you want to put an **existing** image under the control of an OCG, you must
    first find out the image’s xref number (called `img_xref` here) and then do `doc.set_oc(img_xref,
    xref)`. After this, the image will be (in-) visible everywhere throughout the
    document if the OCG’s state is “ON”, respectively “OFF”. You can also assign a
    different OCG with this method.
  prefs: []
  type: TYPE_NORMAL
- en: To **remove** an OCG from an image, do `doc.set_oc(img_xref, 0)`.
  prefs: []
  type: TYPE_NORMAL
- en: One single OCG can be assigned to mutiple PDF objects to control their visibility.
  prefs: []
  type: TYPE_NORMAL
- en: How to Define Complex Optional Content Conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sophisticated logical conditions can be established to address complex visibility
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might want to create a multi-language document, so the user
    may switch between languages as required.
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at [this Jupyter Notebook](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/jupyter-notebooks/optional-content.ipynb)
    and execute it as desired.
  prefs: []
  type: TYPE_NORMAL
- en: Certainly, your requirements may even be more complex and involve multiple OCGs
    with ON/OFF states that are connected by some kind of logical relationship – but
    it should give you an impression of what is possible and how to plan your next
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Introduction: The Optional Content Concept'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Optional Content* in PDF is a way to show or hide parts of a document based
    on certain conditions: Parameters that can be set to ON or to OFF when using a
    supporting PDF consumer (viewer), or programmatically.'
  prefs: []
  type: TYPE_NORMAL
- en: This capability is useful in items such as CAD drawings, layered artwork, maps,
    and multi-language documents. Typical uses include showing or hiding details of
    complex vector graphics like geographical maps, technical devices, architectural
    designs and similar, including automatically switching between different zooming
    levels. Other use cases may be to automatically show different detail levels when
    displaying a document on screen as opposed to printing it.
  prefs: []
  type: TYPE_NORMAL
- en: Special PDF objects, so-called **Optional Content Groups** (OCGs) are used to
    define these different *layers* of content.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning an OCG to a “normal” PDF object (like a text or an image) causes that
    object to be visible or hidden, depending on the current state of the assigned
    OCG.
  prefs: []
  type: TYPE_NORMAL
- en: To ease definition of the overall configuration of a PDF’s Optional Content,
    OCGs can be organized in higher level groupings, called **OC Configurations**.
    Each configuration being a collection of OCGs, together with each OCG’s desired
    initial visibility state. Selecting one of these configurations (via the PDF viewer
    or programmatically) causes a corresponding visibility change of all affected
    PDF objects throughout the document.
  prefs: []
  type: TYPE_NORMAL
- en: Except for the default one, OC Configurations are optional.
  prefs: []
  type: TYPE_NORMAL
- en: For more explanations and additional background please refer to PDF specification
    manuals.
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF Support for PDF Optional Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyMuPDF offers full support for viewing, defining, changing and deleting Option
    Content Groups, Configurations, maintaining the assignment of OCGs to PDF objects
    and programmatically switching between OC Configurations and the visibility states
    of each single OCG.
  prefs: []
  type: TYPE_NORMAL
- en: How to Add Optional Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is as simple as adding an Optional Content Group, OCG, to a PDF: [`Document.add_ocg()`](document.html#Document.add_ocg
    "Document.add_ocg").'
  prefs: []
  type: TYPE_NORMAL
- en: If previously the PDF had no OC support at all, the required setup (like defining
    the default OC Configuration) will be done at this point automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method returns an [`xref`](glossary.html#xref "xref") of the created OCG.
    Use this xref to associate (mark) any PDF object with it, that you want to make
    dependent on this OCG’s state. For example, you can insert an image on a page
    and refer to the xref like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you want to put an **existing** image under the control of an OCG, you must
    first find out the image’s xref number (called `img_xref` here) and then do `doc.set_oc(img_xref,
    xref)`. After this, the image will be (in-) visible everywhere throughout the
    document if the OCG’s state is “ON”, respectively “OFF”. You can also assign a
    different OCG with this method.
  prefs: []
  type: TYPE_NORMAL
- en: To **remove** an OCG from an image, do `doc.set_oc(img_xref, 0)`.
  prefs: []
  type: TYPE_NORMAL
- en: One single OCG can be assigned to mutiple PDF objects to control their visibility.
  prefs: []
  type: TYPE_NORMAL
- en: How to Define Complex Optional Content Conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sophisticated logical conditions can be established to address complex visibility
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might want to create a multi-language document, so the user
    may switch between languages as required.
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at [this Jupyter Notebook](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/jupyter-notebooks/optional-content.ipynb)
    and execute it as desired.
  prefs: []
  type: TYPE_NORMAL
- en: Certainly, your requirements may even be more complex and involve multiple OCGs
    with ON/OFF states that are connected by some kind of logical relationship – but
    it should give you an impression of what is possible and how to plan your next
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
