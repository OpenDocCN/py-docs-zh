- en: Expression Serializer Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/serializer.html](https://docs.sqlalchemy.org/en/20/core/serializer.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Serializer/Deserializer objects for usage with SQLAlchemy query structures,
    allowing “contextual” deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The serializer extension is **legacy** and should not be used for new development.
  prefs: []
  type: TYPE_NORMAL
- en: Any SQLAlchemy query structure, either based on sqlalchemy.sql.* or sqlalchemy.orm.*
    can be used. The mappers, Tables, Columns, Session etc. which are referenced by
    the structure are not persisted in serialized form, but are instead re-associated
    with the query structure when it is deserialized.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The serializer extension uses pickle to serialize and deserialize objects, so
    the same security consideration mentioned in the [python documentation](https://docs.python.org/3/library/pickle.html)
    apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage is nearly the same as that of the standard Python pickle module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Similar restrictions as when using raw pickle apply; mapped classes must be
    themselves be pickleable, meaning they are importable from a module-level namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The serializer module is only appropriate for query structures. It is not needed
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: instances of user-defined classes. These contain no references to engines, sessions
    or expression constructs in the typical case and can be serialized directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table metadata that is to be loaded entirely from the serialized structure (i.e.
    is not already declared in the application). Regular pickle.loads()/dumps() can
    be used to fully dump any `MetaData` object, typically one which was reflected
    from an existing database at some previous point in time. The serializer module
    is specifically for the opposite case, where the Table metadata is already present
    in memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Deserializer](#sqlalchemy.ext.serializer.Deserializer)(file[, metadata,
    scoped_session, engine]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [dumps](#sqlalchemy.ext.serializer.dumps)(obj[, protocol]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [loads](#sqlalchemy.ext.serializer.loads)(data[, metadata, scoped_session,
    engine]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [Serializer](#sqlalchemy.ext.serializer.Serializer)(*args, **kw) |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
