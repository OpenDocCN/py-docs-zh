- en: Expression Serializer Extension
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式序列化器扩展
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/serializer.html](https://docs.sqlalchemy.org/en/20/core/serializer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/serializer.html](https://docs.sqlalchemy.org/en/20/core/serializer.html)
- en: Serializer/Deserializer objects for usage with SQLAlchemy query structures,
    allowing “contextual” deserialization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用于与 SQLAlchemy 查询结构一起使用的序列化器/反序列化器对象，允许“上下文”反序列化。
- en: Legacy Feature
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留功能
- en: The serializer extension is **legacy** and should not be used for new development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化器扩展是**遗留的**，不应用于新开发。
- en: Any SQLAlchemy query structure, either based on sqlalchemy.sql.* or sqlalchemy.orm.*
    can be used. The mappers, Tables, Columns, Session etc. which are referenced by
    the structure are not persisted in serialized form, but are instead re-associated
    with the query structure when it is deserialized.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用任何 SQLAlchemy 查询结构，无论是基于 sqlalchemy.sql.* 还是 sqlalchemy.orm.*。结构引用的映射器、表、列、会话等在序列化形式中不会被持久化，而是在反序列化时重新关联到查询结构。
- en: Warning
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The serializer extension uses pickle to serialize and deserialize objects, so
    the same security consideration mentioned in the [python documentation](https://docs.python.org/3/library/pickle.html)
    apply.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化器扩展使用 pickle 对对象进行序列化和反序列化，因此与 [python 文档](https://docs.python.org/3/library/pickle.html)
    中提到的相同的安全注意事项适用。
- en: 'Usage is nearly the same as that of the standard Python pickle module:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方式几乎与标准 Python pickle 模块相同：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Similar restrictions as when using raw pickle apply; mapped classes must be
    themselves be pickleable, meaning they are importable from a module-level namespace.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始 pickle 时适用的类似限制也适用；映射类必须本身可被 pickle 化，这意味着它们可以从模块级别的命名空间导入。
- en: 'The serializer module is only appropriate for query structures. It is not needed
    for:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化器模块仅适用于查询结构。不需要：
- en: instances of user-defined classes. These contain no references to engines, sessions
    or expression constructs in the typical case and can be serialized directly.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义类的实例。在典型情况下，这些类不包含对引擎、会话或表达式构造的引用，因此可以直接序列化。
- en: Table metadata that is to be loaded entirely from the serialized structure (i.e.
    is not already declared in the application). Regular pickle.loads()/dumps() can
    be used to fully dump any `MetaData` object, typically one which was reflected
    from an existing database at some previous point in time. The serializer module
    is specifically for the opposite case, where the Table metadata is already present
    in memory.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全从序列化结构加载的表元数据（即在应用程序中尚未声明的元数据）。可以使用常规的 pickle.loads()/dumps() 来完全转储任何 `MetaData`
    对象，通常是在以前的某个时间点从现有数据库反射的对象。序列化器模块专门用于相反的情况，即表元数据已经存在于内存中的情况。
- en: '| Object Name | Description |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Deserializer](#sqlalchemy.ext.serializer.Deserializer)(file[, metadata,
    scoped_session, engine]) |  |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [Deserializer](#sqlalchemy.ext.serializer.Deserializer)(file[, metadata,
    scoped_session, engine]) |  |'
- en: '| [dumps](#sqlalchemy.ext.serializer.dumps)(obj[, protocol]) |  |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [dumps](#sqlalchemy.ext.serializer.dumps)(obj[, protocol]) |  |'
- en: '| [loads](#sqlalchemy.ext.serializer.loads)(data[, metadata, scoped_session,
    engine]) |  |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [loads](#sqlalchemy.ext.serializer.loads)(data[, metadata, scoped_session,
    engine]) |  |'
- en: '| [Serializer](#sqlalchemy.ext.serializer.Serializer)(*args, **kw) |  |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [Serializer](#sqlalchemy.ext.serializer.Serializer)(*args, **kw) |  |'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
