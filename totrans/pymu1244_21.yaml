- en: Common Issues and their Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-common-issues-and-their-solutions.html](https://pymupdf.readthedocs.io/en/latest/recipes-common-issues-and-their-solutions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## How To Dynamically Clean Up Corrupt PDFs'
  prefs: []
  type: TYPE_NORMAL
- en: This shows a potential use of PyMuPDF with another Python PDF library (the excellent
    pure Python package [pdfrw](https://pypi.python.org/pypi/pdfrw) is used here as
    an example).
  prefs: []
  type: TYPE_NORMAL
- en: 'If a clean, non-corrupt / decompressed PDF is needed, one could dynamically
    invoke PyMuPDF to recover from many problems like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With the command line utility *pdftk* ([available](https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/)
    for Windows only, but reported to also run under [Wine](https://www.winehq.org/))
    a similar result can be achieved, see [here](http://www.overthere.co.uk/2013/07/22/improving-pypdf2-with-pdftk/).
    However, you must invoke it as a separate process via *subprocess.Popen*, using
    stdin and stdout as communication vehicles.
  prefs: []
  type: TYPE_NORMAL
- en: How to Convert Any Document to PDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a script that converts any PyMuPDF [supported document](how-to-open-a-file.html#supported-file-types)
    to a PDF. These include XPS, EPUB, FB2, CBZ and image formats, including multi-page
    TIFF images.
  prefs: []
  type: TYPE_NORMAL
- en: 'It features maintaining any metadata, table of contents and links contained
    in the source document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to Deal with Messages Issued by MuPDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since PyMuPDF v1.16.0, **error messages** issued by the underlying MuPDF library
    are being redirected to the Python standard device *sys.stderr*. So you can handle
    them like any other output going to this devices.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, these messages go to the internal buffer together with any MuPDF
    warnings – see below.
  prefs: []
  type: TYPE_NORMAL
- en: We always prefix these messages with an identifying string *“mupdf:”*. If you
    prefer to not see recoverable MuPDF errors at all, issue the command `pymupdf.TOOLS.mupdf_display_errors(False)`.
  prefs: []
  type: TYPE_NORMAL
- en: MuPDF warnings continue to be stored in an internal buffer and can be viewed
    using [`Tools.mupdf_warnings()`](tools.html#Tools.mupdf_warnings "Tools.mupdf_warnings").
  prefs: []
  type: TYPE_NORMAL
- en: Please note that MuPDF errors may or may not lead to Python exceptions. In other
    words, you may see error messages from which MuPDF can recover and continue processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example output for a **recoverable error**. We are opening a damaged PDF, but
    MuPDF is able to repair it and gives us a little information on what happened.
    Then we illustrate how to find out whether the document can later be saved incrementally.
    Checking the [`Document.is_dirty`](document.html#Document.is_dirty "Document.is_dirty")
    attribute at this point also indicates that during `pymupdf.open` the document
    had to be repaired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Example output for an **unrecoverable error**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing Annotations: Unexpected Behaviour'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating** an annotation with PyMuPDF which was created by some other software.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating** an annotation with PyMuPDF and later changing it with some other
    software.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In both cases you may experience unintended changes, like a different annotation
    icon or text font, the fill color or line dashing have disappeared, line end symbols
    have changed their size or even have disappeared too, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Annotation maintenance is handled differently by each PDF maintenance application.
    Some annotation types may not be supported, or not be supported fully or some
    details may be handled in a different way than in another application. **There
    is no standard.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost always a PDF application also comes with its own icons (file attachments,
    sticky notes and stamps) and its own set of supported text fonts. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '(Py-) MuPDF only supports these 5 basic fonts for ‘FreeText’ annotations: Helvetica,
    Times-Roman, Courier, ZapfDingbats and Symbol – no italics / no bold variations.
    When changing a ‘FreeText’ annotation created by some other app, its font will
    probably not be recognized nor accepted and be replaced by Helvetica.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMuPDF supports all PDF text markers (highlight, underline, strikeout, squiggly),
    but these types cannot be updated with Adobe Acrobat Reader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In most cases there also exists limited support for line dashing which causes
    existing dashes to be replaced by straight lines. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF fully supports all line dashing forms, while other viewers only accept
    a limited subset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately there is not much you can do in most of these cases.
  prefs: []
  type: TYPE_NORMAL
- en: Stay with the same software for **creating and changing** an annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When using PyMuPDF to change an “alien” annotation, try to **avoid** [`Annot.update()`](annot.html#Annot.update
    "Annot.update"). The following methods **can be used without it,** so that the
    original appearance should be maintained:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`Annot.set_rect()`](annot.html#Annot.set_rect "Annot.set_rect") (location
    changes)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_flags()`](annot.html#Annot.set_flags "Annot.set_flags") (annotation
    behaviour)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_info()`](annot.html#Annot.set_info "Annot.set_info") (meta information,
    except changes to *content*)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_popup()`](annot.html#Annot.set_popup "Annot.set_popup") (create
    popup or change its rect)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Annot.set_optional_content()` (add / remove reference to optional content
    information)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_open()`](annot.html#Annot.set_open "Annot.set_open")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.update_file()`](annot.html#Annot.update_file "Annot.update_file") (file
    attachment changes)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing or Unreadable Extracted Text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fairly often, text extraction does not work text as you would expect: text
    may be missing, or may not appear in the reading sequence visible on your screen,
    or contain garbled characters (like a ? or a “TOFU” symbol), etc. This can be
    caused by a number of different problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: no text is extracted'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your PDF viewer does display text, but you cannot select it with your cursor,
    and text extraction delivers nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be looking at an image embedded in the PDF page (e.g. a scanned PDF).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PDF creator used no font, but **simulated** text by painting it, using little
    lines and curves. E.g. a capital “D” could be painted by a line “|” and a left-open
    semi-circle, an “o” by an ellipse, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use an OCR software like [OCRmyPDF](https://pypi.org/project/ocrmypdf/) to insert
    a hidden text layer underneath the visible page. The resulting PDF should behave
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: unreadable text'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text extraction does not deliver the text in readable order, duplicates some
    text, or is otherwise garbled.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The single characters are readable as such (no “<?>” symbols), but the sequence
    in which the text is **coded in the file** deviates from the reading order. The
    motivation behind may be technical or protection of data against unwanted copies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many “<?>” symbols occur, indicating MuPDF could not interpret these characters.
    The font may indeed be unsupported by MuPDF, or the PDF creator may haved used
    a font that displays readable text, but on purpose obfuscates the originating
    corresponding unicode character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use layout preserving text extraction: `python -m fitz gettext file.pdf`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If other text extraction tools also don’t work, then the only solution again
    is OCRing the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: How To Dynamically Clean Up Corrupt PDFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This shows a potential use of PyMuPDF with another Python PDF library (the excellent
    pure Python package [pdfrw](https://pypi.python.org/pypi/pdfrw) is used here as
    an example).
  prefs: []
  type: TYPE_NORMAL
- en: 'If a clean, non-corrupt / decompressed PDF is needed, one could dynamically
    invoke PyMuPDF to recover from many problems like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With the command line utility *pdftk* ([available](https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/)
    for Windows only, but reported to also run under [Wine](https://www.winehq.org/))
    a similar result can be achieved, see [here](http://www.overthere.co.uk/2013/07/22/improving-pypdf2-with-pdftk/).
    However, you must invoke it as a separate process via *subprocess.Popen*, using
    stdin and stdout as communication vehicles.
  prefs: []
  type: TYPE_NORMAL
- en: How to Convert Any Document to PDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a script that converts any PyMuPDF [supported document](how-to-open-a-file.html#supported-file-types)
    to a PDF. These include XPS, EPUB, FB2, CBZ and image formats, including multi-page
    TIFF images.
  prefs: []
  type: TYPE_NORMAL
- en: 'It features maintaining any metadata, table of contents and links contained
    in the source document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to Deal with Messages Issued by MuPDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since PyMuPDF v1.16.0, **error messages** issued by the underlying MuPDF library
    are being redirected to the Python standard device *sys.stderr*. So you can handle
    them like any other output going to this devices.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, these messages go to the internal buffer together with any MuPDF
    warnings – see below.
  prefs: []
  type: TYPE_NORMAL
- en: We always prefix these messages with an identifying string *“mupdf:”*. If you
    prefer to not see recoverable MuPDF errors at all, issue the command `pymupdf.TOOLS.mupdf_display_errors(False)`.
  prefs: []
  type: TYPE_NORMAL
- en: MuPDF warnings continue to be stored in an internal buffer and can be viewed
    using [`Tools.mupdf_warnings()`](tools.html#Tools.mupdf_warnings "Tools.mupdf_warnings").
  prefs: []
  type: TYPE_NORMAL
- en: Please note that MuPDF errors may or may not lead to Python exceptions. In other
    words, you may see error messages from which MuPDF can recover and continue processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example output for a **recoverable error**. We are opening a damaged PDF, but
    MuPDF is able to repair it and gives us a little information on what happened.
    Then we illustrate how to find out whether the document can later be saved incrementally.
    Checking the [`Document.is_dirty`](document.html#Document.is_dirty "Document.is_dirty")
    attribute at this point also indicates that during `pymupdf.open` the document
    had to be repaired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Example output for an **unrecoverable error**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing Annotations: Unexpected Behaviour'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating** an annotation with PyMuPDF which was created by some other software.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating** an annotation with PyMuPDF and later changing it with some other
    software.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In both cases you may experience unintended changes, like a different annotation
    icon or text font, the fill color or line dashing have disappeared, line end symbols
    have changed their size or even have disappeared too, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Annotation maintenance is handled differently by each PDF maintenance application.
    Some annotation types may not be supported, or not be supported fully or some
    details may be handled in a different way than in another application. **There
    is no standard.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost always a PDF application also comes with its own icons (file attachments,
    sticky notes and stamps) and its own set of supported text fonts. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '(Py-) MuPDF only supports these 5 basic fonts for ‘FreeText’ annotations: Helvetica,
    Times-Roman, Courier, ZapfDingbats and Symbol – no italics / no bold variations.
    When changing a ‘FreeText’ annotation created by some other app, its font will
    probably not be recognized nor accepted and be replaced by Helvetica.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMuPDF supports all PDF text markers (highlight, underline, strikeout, squiggly),
    but these types cannot be updated with Adobe Acrobat Reader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In most cases there also exists limited support for line dashing which causes
    existing dashes to be replaced by straight lines. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF fully supports all line dashing forms, while other viewers only accept
    a limited subset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately there is not much you can do in most of these cases.
  prefs: []
  type: TYPE_NORMAL
- en: Stay with the same software for **creating and changing** an annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When using PyMuPDF to change an “alien” annotation, try to **avoid** [`Annot.update()`](annot.html#Annot.update
    "Annot.update"). The following methods **can be used without it,** so that the
    original appearance should be maintained:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`Annot.set_rect()`](annot.html#Annot.set_rect "Annot.set_rect") (location
    changes)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_flags()`](annot.html#Annot.set_flags "Annot.set_flags") (annotation
    behaviour)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_info()`](annot.html#Annot.set_info "Annot.set_info") (meta information,
    except changes to *content*)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_popup()`](annot.html#Annot.set_popup "Annot.set_popup") (create
    popup or change its rect)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Annot.set_optional_content()` (add / remove reference to optional content
    information)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_open()`](annot.html#Annot.set_open "Annot.set_open")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.update_file()`](annot.html#Annot.update_file "Annot.update_file") (file
    attachment changes)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating** an annotation with PyMuPDF which was created by some other software.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating** an annotation with PyMuPDF and later changing it with some other
    software.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In both cases you may experience unintended changes, like a different annotation
    icon or text font, the fill color or line dashing have disappeared, line end symbols
    have changed their size or even have disappeared too, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Annotation maintenance is handled differently by each PDF maintenance application.
    Some annotation types may not be supported, or not be supported fully or some
    details may be handled in a different way than in another application. **There
    is no standard.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost always a PDF application also comes with its own icons (file attachments,
    sticky notes and stamps) and its own set of supported text fonts. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '(Py-) MuPDF only supports these 5 basic fonts for ‘FreeText’ annotations: Helvetica,
    Times-Roman, Courier, ZapfDingbats and Symbol – no italics / no bold variations.
    When changing a ‘FreeText’ annotation created by some other app, its font will
    probably not be recognized nor accepted and be replaced by Helvetica.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMuPDF supports all PDF text markers (highlight, underline, strikeout, squiggly),
    but these types cannot be updated with Adobe Acrobat Reader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In most cases there also exists limited support for line dashing which causes
    existing dashes to be replaced by straight lines. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF fully supports all line dashing forms, while other viewers only accept
    a limited subset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately there is not much you can do in most of these cases.
  prefs: []
  type: TYPE_NORMAL
- en: Stay with the same software for **creating and changing** an annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When using PyMuPDF to change an “alien” annotation, try to **avoid** [`Annot.update()`](annot.html#Annot.update
    "Annot.update"). The following methods **can be used without it,** so that the
    original appearance should be maintained:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`Annot.set_rect()`](annot.html#Annot.set_rect "Annot.set_rect") (location
    changes)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_flags()`](annot.html#Annot.set_flags "Annot.set_flags") (annotation
    behaviour)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_info()`](annot.html#Annot.set_info "Annot.set_info") (meta information,
    except changes to *content*)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_popup()`](annot.html#Annot.set_popup "Annot.set_popup") (create
    popup or change its rect)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Annot.set_optional_content()` (add / remove reference to optional content
    information)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_open()`](annot.html#Annot.set_open "Annot.set_open")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.update_file()`](annot.html#Annot.update_file "Annot.update_file") (file
    attachment changes)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing or Unreadable Extracted Text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fairly often, text extraction does not work text as you would expect: text
    may be missing, or may not appear in the reading sequence visible on your screen,
    or contain garbled characters (like a ? or a “TOFU” symbol), etc. This can be
    caused by a number of different problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: no text is extracted'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your PDF viewer does display text, but you cannot select it with your cursor,
    and text extraction delivers nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be looking at an image embedded in the PDF page (e.g. a scanned PDF).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PDF creator used no font, but **simulated** text by painting it, using little
    lines and curves. E.g. a capital “D” could be painted by a line “|” and a left-open
    semi-circle, an “o” by an ellipse, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use an OCR software like [OCRmyPDF](https://pypi.org/project/ocrmypdf/) to insert
    a hidden text layer underneath the visible page. The resulting PDF should behave
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: unreadable text'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text extraction does not deliver the text in readable order, duplicates some
    text, or is otherwise garbled.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The single characters are readable as such (no “<?>” symbols), but the sequence
    in which the text is **coded in the file** deviates from the reading order. The
    motivation behind may be technical or protection of data against unwanted copies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many “<?>” symbols occur, indicating MuPDF could not interpret these characters.
    The font may indeed be unsupported by MuPDF, or the PDF creator may haved used
    a font that displays readable text, but on purpose obfuscates the originating
    corresponding unicode character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use layout preserving text extraction: `python -m fitz gettext file.pdf`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If other text extraction tools also don’t work, then the only solution again
    is OCRing the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: no text is extracted'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your PDF viewer does display text, but you cannot select it with your cursor,
    and text extraction delivers nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be looking at an image embedded in the PDF page (e.g. a scanned PDF).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PDF creator used no font, but **simulated** text by painting it, using little
    lines and curves. E.g. a capital “D” could be painted by a line “|” and a left-open
    semi-circle, an “o” by an ellipse, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use an OCR software like [OCRmyPDF](https://pypi.org/project/ocrmypdf/) to insert
    a hidden text layer underneath the visible page. The resulting PDF should behave
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: unreadable text'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text extraction does not deliver the text in readable order, duplicates some
    text, or is otherwise garbled.
  prefs: []
  type: TYPE_NORMAL
- en: Cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The single characters are readable as such (no “<?>” symbols), but the sequence
    in which the text is **coded in the file** deviates from the reading order. The
    motivation behind may be technical or protection of data against unwanted copies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many “<?>” symbols occur, indicating MuPDF could not interpret these characters.
    The font may indeed be unsupported by MuPDF, or the PDF creator may haved used
    a font that displays readable text, but on purpose obfuscates the originating
    corresponding unicode character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use layout preserving text extraction: `python -m fitz gettext file.pdf`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If other text extraction tools also don’t work, then the only solution again
    is OCRing the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
