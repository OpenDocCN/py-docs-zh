["```py\nimport numpy as np\nnp.random.seed(0) \n```", "```py\ndef print_truncated_random_state():\n  \"\"\"To avoid spamming the outputs, print only part of the state.\"\"\"\n  full_random_state = np.random.get_state()\n  print(str(full_random_state)[:460], '...')\n\nprint_truncated_random_state() \n```", "```py\n('MT19937', array([         0,          1, 1812433255, 1900727105, 1208447044,\n       2481403966, 4042607538,  337614300, 3232553940, 1018809052,\n       3202401494, 1775180719, 3192392114,  594215549,  184016991,\n        829906058,  610491522, 3879932251, 3139825610,  297902587,\n       4075895579, 2943625357, 3530655617, 1423771745, 2135928312,\n       2891506774, 1066338622,  135451537,  933040465, 2759011858,\n       2273819758, 3545703099, 2516396728, 127 ... \n```", "```py\nnp.random.seed(0)\nprint_truncated_random_state() \n```", "```py\n('MT19937', array([         0,          1, 1812433255, 1900727105, 1208447044,\n       2481403966, 4042607538,  337614300, 3232553940, 1018809052,\n       3202401494, 1775180719, 3192392114,  594215549,  184016991,\n        829906058,  610491522, 3879932251, 3139825610,  297902587,\n       4075895579, 2943625357, 3530655617, 1423771745, 2135928312,\n       2891506774, 1066338622,  135451537,  933040465, 2759011858,\n       2273819758, 3545703099, 2516396728, 127 ... \n```", "```py\n_ = np.random.uniform()\nprint_truncated_random_state() \n```", "```py\n('MT19937', array([2443250962, 1093594115, 1878467924, 2709361018, 1101979660,\n       3904844661,  676747479, 2085143622, 1056793272, 3812477442,\n       2168787041,  275552121, 2696932952, 3432054210, 1657102335,\n       3518946594,  962584079, 1051271004, 3806145045, 1414436097,\n       2032348584, 1661738718, 1116708477, 2562755208, 3176189976,\n        696824676, 2399811678, 3992505346,  569184356, 2626558620,\n        136797809, 4273176064,  296167901, 343 ... \n```", "```py\nnp.random.seed(0)\nprint(np.random.uniform(size=3)) \n```", "```py\n[0.5488135  0.71518937 0.60276338] \n```", "```py\nnp.random.seed(0)\nprint(\"individually:\", np.stack([np.random.uniform() for _ in range(3)]))\n\nnp.random.seed(0)\nprint(\"all at once: \", np.random.uniform(size=3)) \n```", "```py\nindividually: [0.5488135  0.71518937 0.60276338]\nall at once:  [0.5488135  0.71518937 0.60276338] \n```", "```py\nimport numpy as np\n\nnp.random.seed(0)\n\ndef bar(): return np.random.uniform()\ndef baz(): return np.random.uniform()\n\ndef foo(): return bar() + 2 * baz()\n\nprint(foo()) \n```", "```py\n1.9791922366721637 \n```", "```py\nfrom jax import random\n\nkey = random.key(42)\nprint(key) \n```", "```py\nArray((), dtype=key<fry>) overlaying:\n[ 0 42] \n```", "```py\nprint(random.normal(key))\nprint(random.normal(key)) \n```", "```py\n-0.18471177\n-0.18471177 \n```", "```py\nfor i in range(3):\n  new_key, subkey = random.split(key)\n  del key  # The old key is consumed by split() -- we must never use it again.\n\n  val = random.normal(subkey)\n  del subkey  # The subkey is consumed by normal().\n\n  print(f\"draw {i}: {val}\")\n  key = new_key  # new_key is safe to use in the next iteration. \n```", "```py\ndraw 0: 1.369469404220581\ndraw 1: -0.19947023689746857\ndraw 2: -2.298278331756592 \n```", "```py\nkey, subkey = random.split(key) \n```", "```py\nkey, *forty_two_subkeys = random.split(key, num=43) \n```", "```py\nkey = random.key(42)\nsubkeys = random.split(key, 3)\nsequence = np.stack([random.normal(subkey) for subkey in subkeys])\nprint(\"individually:\", sequence)\n\nkey = random.key(42)\nprint(\"all at once: \", random.normal(key, shape=(3,))) \n```", "```py\nindividually: [-0.04838832  0.10796154 -1.2226542 ]\nall at once:  [ 0.18693547 -1.2806505  -1.5593132 ] \n```", "```py\nimport jax\nprint(\"vectorized:\", jax.vmap(random.normal)(subkeys)) \n```", "```py\nvectorized: [-0.04838832  0.10796154 -1.2226542 ] \n```"]