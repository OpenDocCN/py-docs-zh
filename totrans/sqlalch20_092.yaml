- en: Customizing DDL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 DDL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/ddl.html](https://docs.sqlalchemy.org/en/20/core/ddl.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/ddl.html](https://docs.sqlalchemy.org/en/20/core/ddl.html)
- en: In the preceding sections we’ve discussed a variety of schema constructs including
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint"), and [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"). Throughout, we’ve relied upon the `create()` and
    [`create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all "sqlalchemy.schema.MetaData.create_all")
    methods of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    in order to issue data definition language (DDL) for all constructs. When issued,
    a pre-determined order of operations is invoked, and DDL to create each table
    is created unconditionally including all constraints and other objects associated
    with it. For more complex scenarios where database-specific DDL is required, SQLAlchemy
    offers two techniques which can be used to add any DDL based on any condition,
    either accompanying the standard generation of tables or by itself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了各种模式构造，包括 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 和 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")。在整个过程中，我们依赖于 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 的 `create()` 和 [`create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 方法来为所有构造发出数据定义语言 (DDL)。当发出时，会调用预先确定的操作顺序，并且无条件地创建用于创建每个表的
    DDL，包括与其关联的所有约束和其他对象。对于需要数据库特定 DDL 的更复杂的场景，SQLAlchemy 提供了两种技术，可以根据任何条件添加任何 DDL，既可以附带标准生成表格，也可以单独使用。
- en: Custom DDL
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 DDL
- en: 'Custom DDL phrases are most easily achieved using the [`DDL`](#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct. This construct works like all the other DDL
    elements except it accepts a string which is the text to be emitted:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义 DDL 短语最容易通过 [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 结构实现。这个结构的工作方式与所有其他
    DDL 元素相同，除了它接受一个字符串作为要发出的文本：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A more comprehensive method of creating libraries of DDL constructs is to use
    custom compilation - see [Custom SQL Constructs and Compilation Extension](compiler.html)
    for details.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建DDL构造库的更全面的方法是使用自定义编译 - 有关详细信息，请参阅 [自定义 SQL 构造和编译扩展](compiler.html)。
- en: '## Controlling DDL Sequences'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制 DDL 序列'
- en: 'The [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") construct introduced
    previously also has the ability to be invoked conditionally based on inspection
    of the database. This feature is available using the [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method. For example, if we
    wanted to create a trigger but only on the PostgreSQL backend, we could invoke
    this as:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 之前介绍的 [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 结构还具有根据对数据库的检查有条件地调用的能力。可以使用
    [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法实现此功能。例如，如果我们想要创建一个触发器，但只在
    PostgreSQL 后端上，我们可以这样调用：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The [`ExecutableDDLElement.execute_if.dialect`](#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.dialect
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") keyword also accepts a tuple
    of string dialect names:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement.execute_if.dialect`](#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.dialect
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 关键字还接受一个字符串方言名称的元组：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method can also work against
    a callable function that will receive the database connection in use. In the example
    below, we use this to conditionally create a CHECK constraint, first looking within
    the PostgreSQL catalogs to see if it exists:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法也可以针对一个可调用函数进行操作，该函数将接收正在使用的数据库连接。在下面的示例中，我们使用这个方法来有条件地创建一个
    CHECK 约束，首先在 PostgreSQL 目录中查看是否存在：'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the built-in DDLElement Classes
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内置 DDLElement 类
- en: 'The `sqlalchemy.schema` package contains SQL expression constructs that provide
    DDL expressions, all of which extend from the common base [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"). For example, to produce a `CREATE TABLE`
    statement, one can use the [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.schema` 包含提供 DDL 表达式的 SQL 表达式构造，所有这些构造都扩展自公共基类 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")。例如，要生成 `CREATE TABLE` 语句，可以使用 [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") 构造：'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Above, the [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct works like any other expression construct (such as `select()`, `table.insert()`,
    etc.). All of SQLAlchemy’s DDL oriented constructs are subclasses of the [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") base class; this is the base of all
    the objects corresponding to CREATE and DROP as well as ALTER, not only in SQLAlchemy
    but in Alembic Migrations as well. A full reference of available constructs is
    in [DDL Expression Constructs API](#schema-api-ddl).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述内容中，[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造与任何其他表达式构造（例如 `select()`、`table.insert()` 等）一样工作。SQLAlchemy 所有面向 DDL 的构造都是 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 基类的子类；这是 SQLAlchemy 中的所有对象对应 CREATE
    和 DROP 以及 ALTER 的基础，不仅在 SQLAlchemy 中，在 Alembic 迁移中也是如此。可用构造的完整参考在 [DDL 表达式构造 API](#schema-api-ddl)
    中。
- en: User-defined DDL constructs may also be created as subclasses of [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") itself. The documentation in [Custom
    SQL Constructs and Compilation Extension](compiler.html) has several examples
    of this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的 DDL 构造也可以作为 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 的子类而创建。在[自定义 SQL 构造和编译扩展](compiler.html)文档中有几个示例。
- en: '## Controlling DDL Generation of Constraints and Indexes'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制约束和索引的 DDL 生成'
- en: New in version 2.0.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中的新增内容。
- en: 'While the previously mentioned [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method is useful for custom
    [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") classes which need to
    invoke conditionally, there is also a common need for elements that are typically
    related to a particular [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    namely constraints and indexes, to also be subject to “conditional” rules, such
    as an index that includes features that are specific to a particular backend such
    as PostgreSQL or SQL Server. For this use case, the [`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") and [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") methods may be used against constructs such
    as [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint"),
    [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint")
    and [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    accepting the same arguments as the [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method in order to control
    whether or not their DDL will be emitted in terms of their parent [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. These methods may be used inline when creating
    the definition for a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or similarly, when using the `__table_args__` collection in an ORM declarative
    mapping), such as:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面提到的 [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法对于需要有条件地调用的自定义 [`DDL`](#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") 类很有用，但通常也有一种常见需求，即通常与特定 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 相关的元素，例如约束和索引，也要受到“条件”规则的约束，例如一个索引包含特定于特定后端（如 PostgreSQL
    或 SQL Server）的功能。对于这种用例，可以针对诸如 [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")、[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 和 [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 等构造使用 [`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") 和 [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") 方法，接受与 [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法相同的参数，以控制它们的 DDL 是否会在其父
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象的情况下发出。这些方法可以在创建
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的定义时内联使用（或类似地，在
    ORM 声明映射中使用 `__table_args__` 集合时），例如：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the above example, the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct refers to both an [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") and a [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct, both which indicate `.ddl_if(dialect="postgresql")`,
    which indicates that these elements will be included in the CREATE TABLE sequence
    only against the PostgreSQL dialect. If we run `meta.create_all()` against the
    SQLite dialect, for example, neither construct will be included:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造同时指代 [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    和 [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    构造，它们都表明 `.ddl_if(dialect="postgresql")`，这意味着这些元素只会在针对 PostgreSQL 方言时包含在 CREATE
    TABLE 序列中。例如，如果我们针对 SQLite 方言运行 `meta.create_all()`，那么这两个构造都不会被包含：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, if we run the same commands against a PostgreSQL database, we will
    see inline DDL for the CHECK constraint as well as a separate CREATE statement
    emitted for the index:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们针对 PostgreSQL 数据库运行相同的命令，我们将看到 CHECK 约束的内联 DDL 以及为索引发出的单独的 CREATE 语句：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The [`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") and [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") methods create an event hook that may be consulted
    not just at DDL execution time, as is the behavior with [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if"), but also within the SQL
    compilation phase of the [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    object, which is responsible for rendering the `CHECK (num > 5)` DDL inline within
    the CREATE TABLE statement. As such, the event hook that is received by the `ddl_if.callable_()`
    parameter has a richer argument set present, including that there is a `dialect`
    keyword argument passed, as well as an instance of [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") via the `compiler` keyword argument for
    the “inline rendering” portion of the sequence. The `bind` argument is **not**
    present when the event is triggered within the [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") sequence, so a modern event hook that wishes
    to inspect the database versioning information would best use the given [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") object, such as to test PostgreSQL versioning:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if")和[`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if")方法创建了一个事件钩子，该事件钩子不仅可以在DDL执行时进行查询，就像[`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")的行为一样，还可以在[`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")对象的SQL编译阶段内进行查询，该对象负责在CREATE TABLE语句中内联渲染`CHECK
    (num > 5)` DDL。因此，`ddl_if.callable_()`参数接收到的事件钩子具有更丰富的参数集，包括传递了一个`dialect`关键字参数，以及通过`compiler`关键字参数传递给“内联渲染”部分的[`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")的实例。当事件在[`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")序列中触发时，`bind`参数**不**存在，因此，现代事件钩子如果希望检查数据库版本信息，则最好使用给定的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")对象，例如测试PostgreSQL版本：'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See also
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if")'
- en: '[`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if "sqlalchemy.schema.Index.ddl_if")  ##
    DDL Expression Constructs API'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if "sqlalchemy.schema.Index.ddl_if")  ##
    DDL 表达式构造 API'
- en: '| Object Name | Description |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [_CreateDropBase](#sqlalchemy.schema._CreateDropBase) | Base class for DDL
    constructs that represent CREATE and DROP or equivalents. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [_CreateDropBase](#sqlalchemy.schema._CreateDropBase) | 用于表示CREATE和DROP或等效语句的DDL构造的基类。
    |'
- en: '| [AddConstraint](#sqlalchemy.schema.AddConstraint) | Represent an ALTER TABLE
    ADD CONSTRAINT statement. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [AddConstraint](#sqlalchemy.schema.AddConstraint) | 代表一个ALTER TABLE ADD CONSTRAINT语句。
    |'
- en: '| [BaseDDLElement](#sqlalchemy.schema.BaseDDLElement) | The root of DDL constructs,
    including those that are sub-elements within the “create table” and other processes.
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [BaseDDLElement](#sqlalchemy.schema.BaseDDLElement) | DDL构造的根，包括那些在“创建表”和其他过程中的子元素。
    |'
- en: '| [CreateColumn](#sqlalchemy.schema.CreateColumn) | Represent a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as rendered in a CREATE TABLE statement, via the [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [CreateColumn](#sqlalchemy.schema.CreateColumn) | 在CREATE TABLE语句中呈现为[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的表示，通过[`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造。 |'
- en: '| [CreateIndex](#sqlalchemy.schema.CreateIndex) | Represent a CREATE INDEX
    statement. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [CreateIndex](#sqlalchemy.schema.CreateIndex) | 代表一个CREATE INDEX语句。 |'
- en: '| [CreateSchema](#sqlalchemy.schema.CreateSchema) | Represent a CREATE SCHEMA
    statement. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [CreateSchema](#sqlalchemy.schema.CreateSchema) | 代表一个CREATE SCHEMA语句。 |'
- en: '| [CreateSequence](#sqlalchemy.schema.CreateSequence) | Represent a CREATE
    SEQUENCE statement. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [CreateSequence](#sqlalchemy.schema.CreateSequence) | 代表一个CREATE SEQUENCE语句。
    |'
- en: '| [CreateTable](#sqlalchemy.schema.CreateTable) | Represent a CREATE TABLE
    statement. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [CreateTable](#sqlalchemy.schema.CreateTable) | 代表一个CREATE TABLE语句。 |'
- en: '| [DDL](#sqlalchemy.schema.DDL) | A literal DDL statement. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [DDL](#sqlalchemy.schema.DDL) | 一个字面的DDL语句。 |'
- en: '| [DropConstraint](#sqlalchemy.schema.DropConstraint) | Represent an ALTER
    TABLE DROP CONSTRAINT statement. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [DropConstraint](#sqlalchemy.schema.DropConstraint) | 表示ALTER TABLE DROP
    CONSTRAINT语句。 |'
- en: '| [DropIndex](#sqlalchemy.schema.DropIndex) | Represent a DROP INDEX statement.
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [DropIndex](#sqlalchemy.schema.DropIndex) | 表示一个DROP INDEX语句。 |'
- en: '| [DropSchema](#sqlalchemy.schema.DropSchema) | Represent a DROP SCHEMA statement.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [DropSchema](#sqlalchemy.schema.DropSchema) | 表示一个DROP SCHEMA语句。 |'
- en: '| [DropSequence](#sqlalchemy.schema.DropSequence) | Represent a DROP SEQUENCE
    statement. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [DropSequence](#sqlalchemy.schema.DropSequence) | 表示一个DROP SEQUENCE语句。 |'
- en: '| [DropTable](#sqlalchemy.schema.DropTable) | Represent a DROP TABLE statement.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [DropTable](#sqlalchemy.schema.DropTable) | 表示一个DROP TABLE语句。 |'
- en: '| [ExecutableDDLElement](#sqlalchemy.schema.ExecutableDDLElement) | Base class
    for standalone executable DDL expression constructs. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [ExecutableDDLElement](#sqlalchemy.schema.ExecutableDDLElement) | 独立可执行的DDL表达式构造的基类。
    |'
- en: '| [sort_tables](#sqlalchemy.schema.sort_tables)(tables[, skip_fn, extra_dependencies])
    | Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects based on dependency. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [sort_tables](#sqlalchemy.schema.sort_tables)(tables[, skip_fn, extra_dependencies])
    | 根据依赖关系对一组[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象进行排序。
    |'
- en: '| [sort_tables_and_constraints](#sqlalchemy.schema.sort_tables_and_constraints)(tables[,
    filter_fn, extra_dependencies, _warn_for_cycles]) | Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [sort_tables_and_constraints](#sqlalchemy.schema.sort_tables_and_constraints)(tables[,
    filter_fn, extra_dependencies, _warn_for_cycles]) | 对一组[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象进行排序。 |'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects based on dependency.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据依赖关系对一组[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象进行排序。
- en: This is a dependency-ordered sort which will emit [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects such that they will follow their dependent
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects.
    Tables are dependent on another based on the presence of [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects as well as explicit dependencies
    added by [`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个依赖顺序排序，将发出[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，使其跟随其依赖的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。表是根据存在的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象以及由[`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on")添加的显式依赖关系而相互依赖的。
- en: Warning
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")
    function cannot by itself accommodate automatic resolution of dependency cycles
    between tables, which are usually caused by mutually dependent foreign key constraints.
    When these cycles are detected, the foreign keys of these tables are omitted from
    consideration in the sort. A warning is emitted when this condition occurs, which
    will be an exception raise in a future release. Tables which are not part of the
    cycle will still be returned in dependency order.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")函数本身无法处理表之间的依赖循环，这些循环通常是由相互依赖的外键约束引起的。当检测到这些循环时，这些表的外键将被从排序中排除。当发生此情况时会发出警告，这将在将来的版本中引发异常。不属于循环的表仍将按依赖顺序返回。'
- en: To resolve these cycles, the [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") parameter may be applied to those constraints
    which create a cycle. Alternatively, the [`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") function will automatically return
    foreign key constraints in a separate collection when cycles are detected so that
    they may be applied to a schema separately.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为解决这些循环，可以将 [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 参数应用于创建循环的约束。或者，当检测到循环时，[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") 函数将自动返回外键约束的单独集合，以便可以将其分别应用于模式。
- en: 'Changed in version 1.3.17: - a warning is emitted when [`sort_tables()`](#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables") cannot perform a proper sort due to cyclical
    dependencies. This will be an exception in a future release. Additionally, the
    sort will continue to return other tables not involved in the cycle in dependency
    order which was not the case previously.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.3.17中更改：- 当[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")
    由于循环依赖关系无法执行正确排序时，会发出警告。在将来的版本中，这将成为一个异常。此外，排序将继续返回其他未涉及到的表，这些表的排序不是之前的那种依赖顺序。
- en: 'Parameters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`tables` – a sequence of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – 一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的序列。'
- en: '`skip_fn` – optional callable which will be passed a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object; if it returns True, this constraint
    will not be considered as a dependency. Note this is `different` from the same
    parameter in [`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints"), which is instead passed the
    owning [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_fn` – 可选的可调用对象，将传递一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象；如果返回True，则此约束将不被视为依赖项。请注意，这与[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") 中的相同参数不同，后者实际上是传递了拥有者[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象。'
- en: '`extra_dependencies` – a sequence of 2-tuples of tables which will also be
    considered as dependent on each other.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_dependencies` – 2-元组序列，这些表也将被视为彼此相关。'
- en: See also
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
- en: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") - uses this function to sort'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") - 使用此函数进行排序'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象进行排序。
- en: This is a dependency-ordered sort which will emit tuples of `(Table, [ForeignKeyConstraint,
    ...])` such that each [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    follows its dependent [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects. Remaining [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects that are separate due to dependency
    rules not satisfied by the sort are emitted afterwards as `(None, [ForeignKeyConstraint
    ...])`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个依赖项排序，将发出元组 `(Table, [ForeignKeyConstraint, ...])`，以便每个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 后跟其依赖的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。由于排序未满足依赖关系规则而分离的其余[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象稍后作为 `(None, [ForeignKeyConstraint
    ...])` 发出。
- en: Tables are dependent on another based on the presence of [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, explicit dependencies added
    by [`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on"), as well as dependencies stated
    here using the [`sort_tables_and_constraints.skip_fn`](#sqlalchemy.schema.sort_tables_and_constraints.params.skip_fn
    "sqlalchemy.schema.sort_tables_and_constraints") and/or [`sort_tables_and_constraints.extra_dependencies`](#sqlalchemy.schema.sort_tables_and_constraints.params.extra_dependencies
    "sqlalchemy.schema.sort_tables_and_constraints") parameters.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 表格依赖于另一个基于存在[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，通过[`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on")添加的显式依赖关系，以及在此处使用[`sort_tables_and_constraints.skip_fn`](#sqlalchemy.schema.sort_tables_and_constraints.params.skip_fn
    "sqlalchemy.schema.sort_tables_and_constraints")和/或[`sort_tables_and_constraints.extra_dependencies`](#sqlalchemy.schema.sort_tables_and_constraints.params.extra_dependencies
    "sqlalchemy.schema.sort_tables_and_constraints")参数指定的依赖关系。
- en: 'Parameters:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`tables` – a sequence of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的序列。'
- en: '`filter_fn` – optional callable which will be passed a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object, and returns a value based on
    whether this constraint should definitely be included or excluded as an inline
    constraint, or neither. If it returns False, the constraint will definitely be
    included as a dependency that cannot be subject to ALTER; if True, it will `only`
    be included as an ALTER result at the end. Returning None means the constraint
    is included in the table-based result unless it is detected as part of a dependency
    cycle.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_fn` – 可选的可调用对象，将传递给[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，并根据此约束是否应作为内联约束绝对包含或排除的值返回一个值，或者两者都不是。如果返回
    False，则该约束肯定会被包含为无法进行 ALTER 的依赖项；如果返回 True，则它将仅作为 ALTER 结果在最后包含。返回 None 意味着该约束将包含在基于表的结果中，除非它被检测为依赖循环的一部分。'
- en: '`extra_dependencies` – a sequence of 2-tuples of tables which will also be
    considered as dependent on each other.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_dependencies` – 2 元组序列，其中的表也将被视为相互依赖。'
- en: See also
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The root of DDL constructs, including those that are sub-elements within the
    “create table” and other processes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 构造的根，包括那些在“create table”和其他进程中作为子元素的元素。
- en: New in version 2.0.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '**Class signature**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement") ([`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement "sqlalchemy.schema.BaseDDLElement")（[`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")）
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Base class for standalone executable DDL expression constructs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 独立可执行 DDL 表达式构造的基类。
- en: This class is the base for the general purpose [`DDL`](#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") class, as well as the various create/drop clause constructs
    such as [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable"),
    [`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable"), [`AddConstraint`](#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint"), etc.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是通用目的[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")类的基类，以及各种创建/删除子句构造，如[`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")、[`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")、[`AddConstraint`](#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint")等。
- en: 'Changed in version 2.0: [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") is renamed from `DDLElement`, which
    still exists for backwards compatibility.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0 中更改：[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 从 `DDLElement` 重命名，后者仍然存在以保持向后兼容性。
- en: '[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    integrates closely with SQLAlchemy events, introduced in [Events](event.html).
    An instance of one is itself an event receiving callable:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    与 SQLAlchemy 事件紧密集成，在 [事件](event.html) 中介绍。其实例本身就是一个接收事件的可调用对象：'
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
- en: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
- en: '[Events](event.html)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[事件](event.html)'
- en: '[Controlling DDL Sequences](#schema-ddl-sequences)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制 DDL 序列](#schema-ddl-sequences)'
- en: '**Members**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.schema.ExecutableDDLElement.__call__), [against()](#sqlalchemy.schema.ExecutableDDLElement.against),
    [execute_if()](#sqlalchemy.schema.ExecutableDDLElement.execute_if)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.schema.ExecutableDDLElement.__call__), [against()](#sqlalchemy.schema.ExecutableDDLElement.against),
    [execute_if()](#sqlalchemy.schema.ExecutableDDLElement.execute_if)'
- en: '**Class signature**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") (`sqlalchemy.sql.roles.DDLRole`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement"))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") (`sqlalchemy.sql.roles.DDLRole`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement"))
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Execute the DDL as a ddl_listener.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将DDL作为 ddl_listener 执行。
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Return a copy of this [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") which will include the given target.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含给定目标的 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 的副本。
- en: This essentially applies the given item to the `.target` attribute of the returned
    [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    object. This target is then usable by event handlers and compilation routines
    in order to provide services such as tokenization of a DDL string in terms of
    a particular [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是将给定项应用于返回的 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 对象的`.target` 属性。然后，此目标可由事件处理程序和编译例程使用，以提供诸如按特定
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 来标记
    DDL 字符串等服务。
- en: When a [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    object is established as an event handler for the [`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create") or [`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") events, and the event then occurs
    for a given target such as a [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), that target is established with a copy of the [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") object using this method, which then
    proceeds to the `ExecutableDDLElement.execute()` method in order to invoke the
    actual DDL instruction.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    对象被建立为 [`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create") 或 [`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") 事件的事件处理程序，并且事件然后发生在给定目标（如 [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 或 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）上时，该目标将使用此方法与 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 对象的副本建立，并继续调用 `ExecutableDDLElement.execute()`
    方法以调用实际的 DDL 指令。
- en: 'Parameters:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**target** – a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    that will be the subject of a DDL operation.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**target** – 将进行 DDL 操作的 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")。'
- en: 'Returns:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: a copy of this [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") with the `.target` attribute assigned
    to the given [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")的副本与`.target`属性分配给给定的[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")。
- en: See also
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") - uses tokenization
    against the “target” when processing the DDL string.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") - 在处理DDL字符串时针对“目标”使用标记化。'
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Return a callable that will execute this [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") conditionally within an event handler.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，在事件处理程序中有条件地执行此[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")。
- en: 'Used to provide a wrapper for event listening:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 用于提供事件监听的包装器：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` –'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`方言` –'
- en: 'May be a string or tuple of strings. If a string, it will be compared to the
    name of the executing database dialect:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可能是字符串或字符串元组。如果是字符串，则将与执行数据库方言的名称进行比较：
- en: '[PRE18]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If a tuple, specifies multiple dialect names:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果是元组，则指定多个方言名称：
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`callable_` –'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` –'
- en: 'A callable, which will be invoked with three positional arguments as well as
    optional keyword arguments:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可调用对象，将以三个位置参数以及可选关键字参数的形式调用：
- en: 'ddl:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'ddl： '
- en: ''
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This DDL element.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此DDL元素。
- en: ''
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'target:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目标：
- en: ''
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which is the target of this event. May be None if the DDL is executed explicitly.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此事件的目标是[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")或[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象。如果显式执行DDL，则可能为None。
- en: ''
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'bind:'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 绑定：
- en: ''
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    being used for DDL execution. May be None if this construct is being created inline
    within a table, in which case `compiler` will be present.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于执行DDL的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。如果此构造在表内创建，则可能为None，在这种情况下，`编译器`将存在。
- en: ''
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'tables:'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 表：
- en: ''
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optional keyword argument - a list of Table objects which are to be created/
    dropped within a MetaData.create_all() or drop_all() method call.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可选关键字参数 - 要在MetaData.create_all()或drop_all()方法调用中创建/删除的Table对象列表。
- en: ''
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'dialect:'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 方言：
- en: ''
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword argument, but always present - the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") involved in the operation.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数，但始终存在 - 涉及操作的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: ''
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'compiler:'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编译器：
- en: ''
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword argument. Will be `None` for an engine level DDL invocation, but will
    refer to a [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") if this DDL element is being created inline
    within a table.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数。对于引擎级别的DDL调用，将为`None`，但如果此DDL元素在表内创建时，将引用[`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")。
- en: ''
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'state:'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 状态：
- en: ''
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optional keyword argument - will be the `state` argument passed to this function.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可选关键字参数 - 将是传递给此函数的`state`参数。
- en: ''
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'checkfirst:'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: checkfirst：
- en: ''
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Keyword argument, will be True if the ‘checkfirst’ flag was set during the call
    to `create()`, `create_all()`, `drop()`, `drop_all()`.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数，如果在调用`create()`、`create_all()`、`drop()`、`drop_all()`时设置了‘checkfirst’标志，则为True。
- en: If the callable returns a True value, the DDL statement will be executed.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果可调用函数返回True值，则将执行DDL语句。
- en: '`state` – any value which will be passed to the callable_ as the `state` keyword
    argument.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`状态` – 任何值，将作为`state`关键字参数传递给`callable_`。'
- en: See also
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '`SchemaItem.ddl_if()`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`SchemaItem.ddl_if()`'
- en: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
- en: '[Events](event.html)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[事件](event.html)'
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A literal DDL statement.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字面DDL语句。
- en: Specifies literal SQL DDL to be executed by the database. DDL objects function
    as DDL event listeners, and can be subscribed to those events listed in [`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents"), using either [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") objects as targets. Basic templating support allows
    a single DDL instance to handle repetitive tasks for multiple tables.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要由数据库执行的文字SQL DDL。DDL对象作为DDL事件监听器，可以订阅那些在[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents")中列出的事件，使用[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象作为目标。基本的模板支持允许单个DDL实例处理多个表的重复任务。
- en: 'Examples:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When operating on Table events, the following `statement` string substitutions
    are available:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作Table事件时，以下`statement`字符串替换可用：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The DDL’s “context”, if any, will be combined with the standard substitutions
    noted above. Keys present in the context will override the standard substitutions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，DDL的“context”将与上述标准替换组合在一起。上下文中存在的键将覆盖标准替换。
- en: '**Members**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DDL.__init__)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DDL.__init__)'
- en: '**Class signature**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    ([`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"))
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") ([`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"))
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Create a DDL statement.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个DDL语句。
- en: 'Parameters:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` –'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` –'
- en: A string or unicode string to be executed. Statements will be processed with
    Python’s string formatting operator using a fixed set of string substitutions,
    as well as additional substitutions provided by the optional [`DDL.context`](#sqlalchemy.schema.DDL.params.context
    "sqlalchemy.schema.DDL") parameter.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行的字符串或unicode字符串。语句将使用Python的字符串格式化操作符以及由可选的[`DDL.context`](#sqlalchemy.schema.DDL.params.context
    "sqlalchemy.schema.DDL")参数提供的一组固定字符串替换处理。
- en: A literal ‘%’ in a statement must be escaped as ‘%%’.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语句中的字面‘%’必须被转义为‘%%’。
- en: SQL bind parameters are not available in DDL statements.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL语句中不可用SQL绑定参数。
- en: '`context` – Optional dictionary, defaults to None. These values will be available
    for use in string substitutions on the DDL statement.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 可选字典，默认为None。这些值将可用于对DDL语句进行字符串替换。'
- en: See also
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
- en: '[Events](event.html)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[事件](event.html)'
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Base class for DDL constructs that represent CREATE and DROP or equivalents.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示CREATE和DROP或等效操作的DDL构造的基类。
- en: The common theme of _CreateDropBase is a single `element` attribute which refers
    to the element to be created or dropped.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: _CreateDropBase的共同主题是一个`element`属性，它指的是要创建或删除的元素。
- en: '**Class signature**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.schema._CreateDropBase` ([`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"))
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.schema._CreateDropBase` ([`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"))
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Represent a CREATE TABLE statement.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个CREATE TABLE语句。
- en: '**Members**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CreateTable.__init__)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CreateTable.__init__)'
- en: '**Class signature**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    (`sqlalchemy.schema._CreateBase`)
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造。
- en: 'Parameters:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that’s the subject of the CREATE'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ，是CREATE的主题'
- en: '`on` – See the description for ‘on’ in [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL").'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on` – 参见[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")中‘on’的描述。'
- en: '`include_foreign_key_constraints` – optional sequence of [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects that will be included inline
    within the CREATE construct; if omitted, all foreign key constraints that do not
    specify use_alter=True are included.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_foreign_key_constraints` – 可选的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象序列，将内联包含在CREATE构造中；如果省略，那么所有没有指定use_alter=True的外键约束都将被包含。'
- en: '`if_not_exists` –'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_not_exists` –'
- en: if True, an IF NOT EXISTS operator will be applied to the construct.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则将应用IF NOT EXISTS操作符到构造中。
- en: New in version 1.4.0b2.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中提供。
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Represent a DROP TABLE statement.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个DROP TABLE语句。
- en: '**Members**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DropTable.__init__)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DropTable.__init__)'
- en: '**Class signature**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")(`sqlalchemy.schema._DropBase`)
- en: '[PRE28]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Create a [`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")
    construct.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")构造。
- en: 'Parameters:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that’s the subject of the DROP.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，是DROP的主题。'
- en: '`on` – See the description for ‘on’ in [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL").'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on` – 查看[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")中关于‘on’的描述。'
- en: '`if_exists` –'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_exists` –'
- en: if True, an IF EXISTS operator will be applied to the construct.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则将应用IF EXISTS操作符到构造中。
- en: New in version 1.4.0b2.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中提供。
- en: '[PRE29]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Represent a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as rendered in a CREATE TABLE statement, via the [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")在CREATE
    TABLE语句中的呈现，通过[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")构造。
- en: This is provided to support custom column DDL within the generation of CREATE
    TABLE statements, by using the compiler extension documented in [Custom SQL Constructs
    and Compilation Extension](compiler.html) to extend [`CreateColumn`](#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn").
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了在生成CREATE TABLE语句时支持自定义列DDL，通过使用在[自定义SQL构造和编译扩展](compiler.html)中记录的编译器扩展来扩展[`CreateColumn`](#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn")。
- en: 'Typical integration is to examine the incoming [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, and to redirect compilation if a particular
    flag or condition is found:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的集成是检查传入的[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，并在找到特定标志或条件时重定向编译：
- en: '[PRE30]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The above construct can be applied to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上述构造可以应用到一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中，如下所示：
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Above, the directives we’ve added to the [`Column.info`](metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") collection will be detected by our custom compilation
    scheme:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，我们添加到[`Column.info`](metadata.html#sqlalchemy.schema.Column.info "sqlalchemy.schema.Column.info")集合的指令将被我们的自定义编译方案检测到：
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The [`CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")
    construct can also be used to skip certain columns when producing a `CREATE TABLE`.
    This is accomplished by creating a compilation rule that conditionally returns
    `None`. This is essentially how to produce the same effect as using the `system=True`
    argument on [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    which marks a column as an implicitly-present “system” column.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")构造也可以用于在生成`CREATE
    TABLE`时跳过某些列。这是通过创建一个有条件地返回`None`的编译规则来实现的。这本质上就是如何产生与在[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上使用`system=True`参数相同的效果，这个参数将列标记为隐式存在的“系统”列。'
- en: 'For example, suppose we wish to produce a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") which skips rendering of the PostgreSQL `xmin` column
    against the PostgreSQL backend, but on other backends does render it, in anticipation
    of a triggered rule. A conditional compilation rule could skip this name only
    on PostgreSQL:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们希望生成一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，它在
    PostgreSQL 后端跳过渲染 PostgreSQL `xmin` 列，但在其他后端会渲染它，以预期触发规则。条件编译规则只会在 PostgreSQL
    上跳过此名称：
- en: '[PRE33]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Above, a [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct will generate a `CREATE TABLE` which only includes the `id` column in
    the string; the `xmin` column will be omitted, but only against the PostgreSQL
    backend.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    结构将生成一个 `CREATE TABLE`，其中字符串只包含 `id` 列；`xmin` 列将被省略，但仅针对 PostgreSQL 后端。
- en: '**Class signature**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")
    ([`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement "sqlalchemy.schema.BaseDDLElement"))
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")（[`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement")）
- en: '[PRE34]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Represent a CREATE SEQUENCE statement.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 CREATE SEQUENCE 语句。
- en: '**Class signature**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateSequence`](#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence") (`sqlalchemy.schema._CreateBase`)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CreateSequence`](#sqlalchemy.schema.CreateSequence "sqlalchemy.schema.CreateSequence")（`sqlalchemy.schema._CreateBase`）
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Represent a DROP SEQUENCE statement.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 DROP SEQUENCE 语句。
- en: '**Class signature**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropSequence`](#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DropSequence`](#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")（`sqlalchemy.schema._DropBase`）
- en: '[PRE36]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Represent a CREATE INDEX statement.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 CREATE INDEX 语句。
- en: '**Members**'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CreateIndex.__init__)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CreateIndex.__init__) '
- en: '**Class signature**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateIndex`](#sqlalchemy.schema.CreateIndex "sqlalchemy.schema.CreateIndex")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CreateIndex`](#sqlalchemy.schema.CreateIndex "sqlalchemy.schema.CreateIndex")（`sqlalchemy.schema._CreateBase`）
- en: '[PRE37]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a `Createindex` construct.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `Createindex` 结构。
- en: 'Parameters:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that’s the subject of the CREATE.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个 [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")，是
    CREATE 的主题。'
- en: '`if_not_exists` –'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_not_exists` –'
- en: if True, an IF NOT EXISTS operator will be applied to the construct.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若为真，则会对结构应用 IF NOT EXISTS 操作符。
- en: New in version 1.4.0b2.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.0b2 开始的新功能。
- en: '[PRE38]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Represent a DROP INDEX statement.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 DROP INDEX 语句。
- en: '**Members**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DropIndex.__init__)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DropIndex.__init__)'
- en: '**Class signature**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")（`sqlalchemy.schema._DropBase`）
- en: '[PRE39]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Create a [`DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")
    construct.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 [`DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")
    结构。
- en: 'Parameters:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that’s the subject of the DROP.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个 [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")，是
    DROP 的主题。'
- en: '`if_exists` –'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_exists` –'
- en: if True, an IF EXISTS operator will be applied to the construct.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若为真，则会对结构应用 IF EXISTS 操作符。
- en: New in version 1.4.0b2.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.0b2 开始的新功能。
- en: '[PRE40]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Represent an ALTER TABLE ADD CONSTRAINT statement.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 ALTER TABLE ADD CONSTRAINT 语句。
- en: '**Class signature**'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.AddConstraint`](#sqlalchemy.schema.AddConstraint "sqlalchemy.schema.AddConstraint")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.AddConstraint`](#sqlalchemy.schema.AddConstraint "sqlalchemy.schema.AddConstraint")（`sqlalchemy.schema._CreateBase`）
- en: '[PRE41]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Represent an ALTER TABLE DROP CONSTRAINT statement.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 ALTER TABLE DROP CONSTRAINT 语句。
- en: '**Class signature**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropConstraint`](#sqlalchemy.schema.DropConstraint
    "sqlalchemy.schema.DropConstraint") (`sqlalchemy.schema._DropBase`)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DropConstraint`](#sqlalchemy.schema.DropConstraint "sqlalchemy.schema.DropConstraint")（`sqlalchemy.schema._DropBase`）
- en: '[PRE42]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Represent a CREATE SCHEMA statement.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 CREATE SCHEMA 语句。
- en: The argument here is the string name of the schema.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的参数是模式的字符串名称。
- en: '**Members**'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CreateSchema.__init__)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CreateSchema.__init__)'
- en: '**Class signature**'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    (`sqlalchemy.schema._CreateBase`)
- en: '[PRE43]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Create a new [`CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    construct.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    构造。
- en: '[PRE44]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Represent a DROP SCHEMA statement.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 DROP SCHEMA 语句。
- en: The argument here is the string name of the schema.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数是模式的字符串名称。
- en: '**Members**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DropSchema.__init__)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DropSchema.__init__)'
- en: '**Class signature**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    (`sqlalchemy.schema._DropBase`)
- en: '[PRE45]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Create a new [`DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    construct.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    构造。
- en: Custom DDL
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 DDL
- en: 'Custom DDL phrases are most easily achieved using the [`DDL`](#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct. This construct works like all the other DDL
    elements except it accepts a string which is the text to be emitted:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 构造最容易实现自定义 DDL 短语。此构造与所有其他
    DDL 元素的工作方式相同，只是它接受一个文本字符串作为要发出的文本：
- en: '[PRE46]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A more comprehensive method of creating libraries of DDL constructs is to use
    custom compilation - see [Custom SQL Constructs and Compilation Extension](compiler.html)
    for details.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 DDL 构造库的更全面的方法是使用自定义编译 - 有关详细信息，请参阅 [自定义 SQL 构造和编译扩展](compiler.html)。
- en: '## Controlling DDL Sequences'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制 DDL 序列'
- en: 'The [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") construct introduced
    previously also has the ability to be invoked conditionally based on inspection
    of the database. This feature is available using the [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method. For example, if we
    wanted to create a trigger but only on the PostgreSQL backend, we could invoke
    this as:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 之前介绍的 [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 构造也具有根据对数据库的检查有条件地调用的功能。使用
    [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法可以使用此功能。例如，如果我们想要创建一个触发器，但仅在
    PostgreSQL 后端上，我们可以这样调用：
- en: '[PRE47]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The [`ExecutableDDLElement.execute_if.dialect`](#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.dialect
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") keyword also accepts a tuple
    of string dialect names:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement.execute_if.dialect`](#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.dialect
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 关键字还接受一组字符串方言名称：'
- en: '[PRE48]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method can also work against
    a callable function that will receive the database connection in use. In the example
    below, we use this to conditionally create a CHECK constraint, first looking within
    the PostgreSQL catalogs to see if it exists:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法还可以针对一个可调用函数进行操作，该函数将接收正在使用的数据库连接。在下面的示例中，我们使用这个方法来有条件地创建一个
    CHECK 约束，首先在 PostgreSQL 目录中查看它是否存在：'
- en: '[PRE49]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Using the built-in DDLElement Classes
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内置的 DDLElement 类
- en: 'The `sqlalchemy.schema` package contains SQL expression constructs that provide
    DDL expressions, all of which extend from the common base [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"). For example, to produce a `CREATE TABLE`
    statement, one can use the [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.schema` 包含提供 DDL 表达式的 SQL 表达式构造，所有这些构造都从共同基类 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 扩展。例如，要生成一个 `CREATE TABLE` 语句，可以使用 [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") 构造：'
- en: '[PRE50]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Above, the [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct works like any other expression construct (such as `select()`, `table.insert()`,
    etc.). All of SQLAlchemy’s DDL oriented constructs are subclasses of the [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") base class; this is the base of all
    the objects corresponding to CREATE and DROP as well as ALTER, not only in SQLAlchemy
    but in Alembic Migrations as well. A full reference of available constructs is
    in [DDL Expression Constructs API](#schema-api-ddl).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造像任何其他表达式构造一样工作（例如 `select()`、`table.insert()` 等）。所有的 SQLAlchemy 的 DDL 相关构造都是
    [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    基类的子类；这是所有与 CREATE、DROP 以及 ALTER 相关的对象的基类，不仅仅在 SQLAlchemy 中，在 Alembic 迁移中也是如此。可用构造的完整参考在
    [DDL 表达式构造 API](#schema-api-ddl) 中。
- en: User-defined DDL constructs may also be created as subclasses of [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") itself. The documentation in [Custom
    SQL Constructs and Compilation Extension](compiler.html) has several examples
    of this.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的 DDL 构造也可以作为 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 的子类创建。[自定义 SQL 构造和编译扩展](compiler.html)
    的文档中有几个示例。
- en: '## Controlling DDL Generation of Constraints and Indexes'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制约束和索引的 DDL 生成'
- en: New in version 2.0.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增功能。
- en: 'While the previously mentioned [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method is useful for custom
    [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") classes which need to
    invoke conditionally, there is also a common need for elements that are typically
    related to a particular [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    namely constraints and indexes, to also be subject to “conditional” rules, such
    as an index that includes features that are specific to a particular backend such
    as PostgreSQL or SQL Server. For this use case, the [`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") and [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") methods may be used against constructs such
    as [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint"),
    [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint")
    and [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    accepting the same arguments as the [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") method in order to control
    whether or not their DDL will be emitted in terms of their parent [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object. These methods may be used inline when creating
    the definition for a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or similarly, when using the `__table_args__` collection in an ORM declarative
    mapping), such as:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前提到的 [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法对于需要有条件地调用的自定义 [`DDL`](#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") 类很有用，但通常还有一个常见的需求，即通常与特定 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 相关的元素，如约束和索引，也要受到“条件”规则的约束，比如一个包含特定于特定后端（如 PostgreSQL
    或 SQL Server）的特性的索引。对于这种用例，可以针对诸如 [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")、[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 和 [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 这样的构造使用 [`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") 和 [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") 方法，接受与 [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 方法相同的参数，以控制它们的 DDL 是否将以其父
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象的形式发出。在创建
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的定义时（或类似地，在使用
    ORM 声明性映射的 `__table_args__` 集合时），可以内联使用这些方法，例如：
- en: '[PRE51]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the above example, the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct refers to both an [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") and a [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct, both which indicate `.ddl_if(dialect="postgresql")`,
    which indicates that these elements will be included in the CREATE TABLE sequence
    only against the PostgreSQL dialect. If we run `meta.create_all()` against the
    SQLite dialect, for example, neither construct will be included:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    构造同时指代 [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    和 [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    构造，均表明 `.ddl_if(dialect="postgresql")`，这表示这些元素仅针对 PostgreSQL 方言将包括在 CREATE TABLE
    序列中。例如，如果我们针对 SQLite 方言运行 `meta.create_all()`，则不会包括任何构造：
- en: '[PRE52]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'However, if we run the same commands against a PostgreSQL database, we will
    see inline DDL for the CHECK constraint as well as a separate CREATE statement
    emitted for the index:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们对 PostgreSQL 数据库运行相同的命令，我们将看到内联的 DDL 用于 CHECK 约束，以及为索引发出的单独的 CREATE 语句：
- en: '[PRE53]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The [`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") and [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") methods create an event hook that may be consulted
    not just at DDL execution time, as is the behavior with [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if"), but also within the SQL
    compilation phase of the [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    object, which is responsible for rendering the `CHECK (num > 5)` DDL inline within
    the CREATE TABLE statement. As such, the event hook that is received by the `ddl_if.callable_()`
    parameter has a richer argument set present, including that there is a `dialect`
    keyword argument passed, as well as an instance of [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") via the `compiler` keyword argument for
    the “inline rendering” portion of the sequence. The `bind` argument is **not**
    present when the event is triggered within the [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") sequence, so a modern event hook that wishes
    to inspect the database versioning information would best use the given [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") object, such as to test PostgreSQL versioning:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if") 和 [`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if
    "sqlalchemy.schema.Index.ddl_if") 方法创建一个事件挂钩，该挂钩不仅可以在 DDL 执行时查询，如 [`ExecutableDDLElement.execute_if()`](#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 的行为，而且还可以在 [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") 对象的 SQL 编译阶段内查询，该阶段负责在 CREATE TABLE 语句中内联渲染 `CHECK
    (num > 5)` DDL。因此，通过 `ddl_if.callable_()` 参数接收到的事件挂钩具有更丰富的参数集，包括传递的 `dialect`
    关键字参数，以及通过 `compiler` 关键字参数传递的 [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") 的实例，用于序列的“内联渲染”部分。当事件在 [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") 序列内触发时，`bind` 参数 **不存在**，因此，希望检查数据库版本信息的现代事件挂钩最好使用给定的
    [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    对象，例如测试 PostgreSQL 版本：'
- en: '[PRE54]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if")'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Constraint.ddl_if()`](constraints.html#sqlalchemy.schema.Constraint.ddl_if
    "sqlalchemy.schema.Constraint.ddl_if")'
- en: '[`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if "sqlalchemy.schema.Index.ddl_if")'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index.ddl_if()`](constraints.html#sqlalchemy.schema.Index.ddl_if "sqlalchemy.schema.Index.ddl_if")'
- en: '## DDL Expression Constructs API'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '## DDL 表达式构造 API'
- en: '| Object Name | Description |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [_CreateDropBase](#sqlalchemy.schema._CreateDropBase) | Base class for DDL
    constructs that represent CREATE and DROP or equivalents. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| [_CreateDropBase](#sqlalchemy.schema._CreateDropBase) | 用于表示 CREATE 和 DROP
    或等效操作的 DDL 构造的基类。 |'
- en: '| [AddConstraint](#sqlalchemy.schema.AddConstraint) | Represent an ALTER TABLE
    ADD CONSTRAINT statement. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [AddConstraint](#sqlalchemy.schema.AddConstraint) | 代表 ALTER TABLE ADD CONSTRAINT
    语句。 |'
- en: '| [BaseDDLElement](#sqlalchemy.schema.BaseDDLElement) | The root of DDL constructs,
    including those that are sub-elements within the “create table” and other processes.
    |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [BaseDDLElement](#sqlalchemy.schema.BaseDDLElement) | DDL 构造的根，包括“创建表”和其他流程中的子元素。
    |'
- en: '| [CreateColumn](#sqlalchemy.schema.CreateColumn) | Represent a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as rendered in a CREATE TABLE statement, via the [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [CreateColumn](#sqlalchemy.schema.CreateColumn) | 以在 CREATE TABLE 语句中呈现的方式表示[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，通过[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")构造。
    |'
- en: '| [CreateIndex](#sqlalchemy.schema.CreateIndex) | Represent a CREATE INDEX
    statement. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [CreateIndex](#sqlalchemy.schema.CreateIndex) | 代表一个 CREATE INDEX 语句。 |'
- en: '| [CreateSchema](#sqlalchemy.schema.CreateSchema) | Represent a CREATE SCHEMA
    statement. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| [CreateSchema](#sqlalchemy.schema.CreateSchema) | 代表一个 CREATE SCHEMA 语句。
    |'
- en: '| [CreateSequence](#sqlalchemy.schema.CreateSequence) | Represent a CREATE
    SEQUENCE statement. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| [CreateSequence](#sqlalchemy.schema.CreateSequence) | 代表一个 CREATE SEQUENCE
    语句。 |'
- en: '| [CreateTable](#sqlalchemy.schema.CreateTable) | Represent a CREATE TABLE
    statement. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [CreateTable](#sqlalchemy.schema.CreateTable) | 代表一个 CREATE TABLE 语句。 |'
- en: '| [DDL](#sqlalchemy.schema.DDL) | A literal DDL statement. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| [DDL](#sqlalchemy.schema.DDL) | 字面的 DDL 语句。 |'
- en: '| [DropConstraint](#sqlalchemy.schema.DropConstraint) | Represent an ALTER
    TABLE DROP CONSTRAINT statement. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [DropConstraint](#sqlalchemy.schema.DropConstraint) | 代表一个 ALTER TABLE DROP
    CONSTRAINT 语句。 |'
- en: '| [DropIndex](#sqlalchemy.schema.DropIndex) | Represent a DROP INDEX statement.
    |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| [DropIndex](#sqlalchemy.schema.DropIndex) | 代表一个 DROP INDEX 语句。 |'
- en: '| [DropSchema](#sqlalchemy.schema.DropSchema) | Represent a DROP SCHEMA statement.
    |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| [DropSchema](#sqlalchemy.schema.DropSchema) | 代表一个 DROP SCHEMA 语句。 |'
- en: '| [DropSequence](#sqlalchemy.schema.DropSequence) | Represent a DROP SEQUENCE
    statement. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| [DropSequence](#sqlalchemy.schema.DropSequence) | 代表一个 DROP SEQUENCE 语句。
    |'
- en: '| [DropTable](#sqlalchemy.schema.DropTable) | Represent a DROP TABLE statement.
    |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| [DropTable](#sqlalchemy.schema.DropTable) | 代表一个 DROP TABLE 语句。 |'
- en: '| [ExecutableDDLElement](#sqlalchemy.schema.ExecutableDDLElement) | Base class
    for standalone executable DDL expression constructs. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| [ExecutableDDLElement](#sqlalchemy.schema.ExecutableDDLElement) | 独立可执行的
    DDL 表达式构造的基类。 |'
- en: '| [sort_tables](#sqlalchemy.schema.sort_tables)(tables[, skip_fn, extra_dependencies])
    | Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects based on dependency. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [sort_tables](#sqlalchemy.schema.sort_tables)(tables[, skip_fn, extra_dependencies])
    | 基于依赖关系对一组[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象进行排序。
    |'
- en: '| [sort_tables_and_constraints](#sqlalchemy.schema.sort_tables_and_constraints)(tables[,
    filter_fn, extra_dependencies, _warn_for_cycles]) | Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| [sort_tables_and_constraints](#sqlalchemy.schema.sort_tables_and_constraints)(tables[,
    filter_fn, extra_dependencies, _warn_for_cycles]) | 对一组[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象进行排序。 |'
- en: '[PRE55]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects based on dependency.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 根据依赖关系对一组[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象进行排序。
- en: This is a dependency-ordered sort which will emit [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects such that they will follow their dependent
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") objects.
    Tables are dependent on another based on the presence of [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects as well as explicit dependencies
    added by [`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on").
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个依赖排序，将发出[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，以便它们将遵循其依赖的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。表依赖于另一个表，根据[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象的存在以及由[`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on")添加的显式依赖关系。 |
- en: Warning
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")
    function cannot by itself accommodate automatic resolution of dependency cycles
    between tables, which are usually caused by mutually dependent foreign key constraints.
    When these cycles are detected, the foreign keys of these tables are omitted from
    consideration in the sort. A warning is emitted when this condition occurs, which
    will be an exception raise in a future release. Tables which are not part of the
    cycle will still be returned in dependency order.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")函数本身无法自动解决表之间的依赖循环，这些循环通常是由相互依赖的外键约束引起的。当检测到这些循环时，这些表的外键将被从排序考虑中省略。当出现此条件时会发出警告，在未来的版本中将引发异常。不属于循环的表仍将按照依赖顺序返回。'
- en: To resolve these cycles, the [`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") parameter may be applied to those constraints
    which create a cycle. Alternatively, the [`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints") function will automatically return
    foreign key constraints in a separate collection when cycles are detected so that
    they may be applied to a schema separately.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些循环，可以将[`ForeignKeyConstraint.use_alter`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")参数应用于创建循环的约束。另外，当检测到循环时，[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")函数将自动将外键约束返回到一个单独的集合中，以便可以单独应用到模式中。
- en: 'Changed in version 1.3.17: - a warning is emitted when [`sort_tables()`](#sqlalchemy.schema.sort_tables
    "sqlalchemy.schema.sort_tables") cannot perform a proper sort due to cyclical
    dependencies. This will be an exception in a future release. Additionally, the
    sort will continue to return other tables not involved in the cycle in dependency
    order which was not the case previously.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.3.17中更改：当[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")由于循环依赖而无法执行适当排序时，会发出警告。这将在未来的版本中成为异常。此外，排序将继续返回其他未涉及循环的表以依赖顺序，而这在以前的情况下并非如此。
- en: 'Parameters:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`tables` – a sequence of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – 一系列[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象。'
- en: '`skip_fn` – optional callable which will be passed a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object; if it returns True, this constraint
    will not be considered as a dependency. Note this is `different` from the same
    parameter in [`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints"), which is instead passed the
    owning [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_fn` – 可选的可调用对象，将传递一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象；如果返回True，则不会考虑此约束作为依赖项。请注意，这与[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")中相同参数的不同之处，该参数将传递给拥有的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象。'
- en: '`extra_dependencies` – a sequence of 2-tuples of tables which will also be
    considered as dependent on each other.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_dependencies` – 一个包含表之间互相依赖的2元组序列。'
- en: See also
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")函数用于排序表和约束。'
- en: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") - uses this function to sort'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") - 使用此函数进行排序。'
- en: '[PRE56]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Sort a collection of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 对一组[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    / [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象进行排序。
- en: This is a dependency-ordered sort which will emit tuples of `(Table, [ForeignKeyConstraint,
    ...])` such that each [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    follows its dependent [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects. Remaining [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects that are separate due to dependency
    rules not satisfied by the sort are emitted afterwards as `(None, [ForeignKeyConstraint
    ...])`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个依赖顺序排序，将发出`(Table, [ForeignKeyConstraint, ...])`元组，以便每个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")都跟随其依赖的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。由于排序未满足的依赖规则而分开的其余[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象将作为`(None, [ForeignKeyConstraint ...])`之后发出。
- en: Tables are dependent on another based on the presence of [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects, explicit dependencies added
    by [`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on"), as well as dependencies stated
    here using the [`sort_tables_and_constraints.skip_fn`](#sqlalchemy.schema.sort_tables_and_constraints.params.skip_fn
    "sqlalchemy.schema.sort_tables_and_constraints") and/or [`sort_tables_and_constraints.extra_dependencies`](#sqlalchemy.schema.sort_tables_and_constraints.params.extra_dependencies
    "sqlalchemy.schema.sort_tables_and_constraints") parameters.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 表依赖于另一个表，基于存在的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，由[`Table.add_is_dependent_on()`](metadata.html#sqlalchemy.schema.Table.add_is_dependent_on
    "sqlalchemy.schema.Table.add_is_dependent_on")添加的显式依赖关系，以及在此处使用[`sort_tables_and_constraints.skip_fn`](#sqlalchemy.schema.sort_tables_and_constraints.params.skip_fn
    "sqlalchemy.schema.sort_tables_and_constraints")和/或[`sort_tables_and_constraints.extra_dependencies`](#sqlalchemy.schema.sort_tables_and_constraints.params.extra_dependencies
    "sqlalchemy.schema.sort_tables_and_constraints")参数声明的依赖关系。
- en: 'Parameters:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`tables` – a sequence of [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tables` – 一个包含[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的序列。'
- en: '`filter_fn` – optional callable which will be passed a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object, and returns a value based on
    whether this constraint should definitely be included or excluded as an inline
    constraint, or neither. If it returns False, the constraint will definitely be
    included as a dependency that cannot be subject to ALTER; if True, it will `only`
    be included as an ALTER result at the end. Returning None means the constraint
    is included in the table-based result unless it is detected as part of a dependency
    cycle.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_fn` – 可选的可调用对象，将传递一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，并根据此约束是否应明确包含或排除为内联约束返回一个值，或者两者都不是。如果返回False，则该约束将明确包含为不能受ALTER影响的依赖项；如果为True，则它将`仅`作为最终的ALTER结果包含。返回None意味着该约束将包含在基于表的结果中，除非它被检测为依赖循环的一部分。'
- en: '`extra_dependencies` – a sequence of 2-tuples of tables which will also be
    considered as dependent on each other.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_dependencies` – 一个包含两个表的2元组序列，这两个表也将被视为相互依赖。'
- en: See also
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables()`](#sqlalchemy.schema.sort_tables "sqlalchemy.schema.sort_tables")'
- en: '[PRE57]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The root of DDL constructs, including those that are sub-elements within the
    “create table” and other processes.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: DDL构造的根，包括那些作为“create table”和其他过程中的子元素的构造。
- en: New in version 2.0.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '**Class signature**'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement") ([`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement "sqlalchemy.schema.BaseDDLElement")（[`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")）。
- en: '[PRE58]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Base class for standalone executable DDL expression constructs.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 独立可执行的DDL表达式构造的基类。
- en: This class is the base for the general purpose [`DDL`](#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") class, as well as the various create/drop clause constructs
    such as [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable"),
    [`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable"), [`AddConstraint`](#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint"), etc.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是通用目的 [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") 类的基类，以及各种创建/删除子句构造，例如
    [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")、[`DropTable`](#sqlalchemy.schema.DropTable
    "sqlalchemy.schema.DropTable")、[`AddConstraint`](#sqlalchemy.schema.AddConstraint
    "sqlalchemy.schema.AddConstraint") 等等。
- en: 'Changed in version 2.0: [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") is renamed from `DDLElement`, which
    still exists for backwards compatibility.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 起更改：[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 从 `DDLElement` 重命名，`DDLElement` 仍然存在以保持向后兼容性。
- en: '[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    integrates closely with SQLAlchemy events, introduced in [Events](event.html).
    An instance of one is itself an event receiving callable:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    与 SQLAlchemy 事件密切集成，介绍在 [Events](event.html) 中。一个实例本身就是一个事件接收器：'
- en: '[PRE59]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: See also
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
- en: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
- en: '[Events](event.html)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[Events](event.html)'
- en: '[Controlling DDL Sequences](#schema-ddl-sequences)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制 DDL 序列](#schema-ddl-sequences)'
- en: '**Members**'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.schema.ExecutableDDLElement.__call__), [against()](#sqlalchemy.schema.ExecutableDDLElement.against),
    [execute_if()](#sqlalchemy.schema.ExecutableDDLElement.execute_if)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.schema.ExecutableDDLElement.__call__), [against()](#sqlalchemy.schema.ExecutableDDLElement.against),
    [execute_if()](#sqlalchemy.schema.ExecutableDDLElement.execute_if)'
- en: '**Class signature**'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") (`sqlalchemy.sql.roles.DDLRole`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement"))
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") (`sqlalchemy.sql.roles.DDLRole`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement"))
- en: '[PRE60]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Execute the DDL as a ddl_listener.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 将 DDL 作为 ddl_listener 执行。
- en: '[PRE61]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Return a copy of this [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") which will include the given target.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    的副本，其中将包含给定的目标。
- en: This essentially applies the given item to the `.target` attribute of the returned
    [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    object. This target is then usable by event handlers and compilation routines
    in order to provide services such as tokenization of a DDL string in terms of
    a particular [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这实质上将给定项应用于返回的 [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 对象的 `.target` 属性。然后可以由事件处理程序和编译例程使用此目标，以提供诸如基于特定
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 的 DDL
    字符串的标记化之类的服务。
- en: When a [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    object is established as an event handler for the [`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create") or [`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") events, and the event then occurs
    for a given target such as a [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), that target is established with a copy of the [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") object using this method, which then
    proceeds to the `ExecutableDDLElement.execute()` method in order to invoke the
    actual DDL instruction.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 当将[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")对象作为[`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")或[`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")事件的事件处理程序进行建立，并且事件随后发生在诸如[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")之类的给定目标上时，使用此方法使用[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")对象的副本来为该目标建立，然后进入`ExecutableDDLElement.execute()`方法以调用实际的
    DDL 指令。
- en: 'Parameters:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**target** – a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    that will be the subject of a DDL operation.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '**target** – 一个[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")，将成为
    DDL 操作的主体。'
- en: 'Returns:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a copy of this [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") with the `.target` attribute assigned
    to the given [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem").
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")的副本，其`.target`属性分配给给定的[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")。
- en: See also
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") - uses tokenization
    against the “target” when processing the DDL string.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") - 对处理 DDL 字符串时针对“target”进行标记化。'
- en: '[PRE62]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return a callable that will execute this [`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") conditionally within an event handler.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象将在事件处理程序中有条件地执行此[`ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")。
- en: 'Used to provide a wrapper for event listening:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 用于提供事件监听的包装器：
- en: '[PRE63]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Parameters:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` –'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` –'
- en: 'May be a string or tuple of strings. If a string, it will be compared to the
    name of the executing database dialect:'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以是字符串或字符串元组。如果是字符串，则将其与执行数据库方言的名称进行比较：
- en: '[PRE64]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'If a tuple, specifies multiple dialect names:'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果是元组，则指定多个方言名称：
- en: '[PRE65]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`callable_` –'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` –'
- en: 'A callable, which will be invoked with three positional arguments as well as
    optional keyword arguments:'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可调用对象，将使用三个位置参数以及可选的关键字参数进行调用：
- en: 'ddl:'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ddl：
- en: ''
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This DDL element.
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此 DDL 元素。
- en: ''
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'target:'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: target：
- en: ''
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    object which is the target of this event. May be None if the DDL is executed explicitly.
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此事件的目标[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")或[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象。如果DDL是显式执行的，则可以为 None。
- en: ''
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'bind:'
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: bind：
- en: ''
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    being used for DDL execution. May be None if this construct is being created inline
    within a table, in which case `compiler` will be present.
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于执行 DDL 的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。如果此构造是在表内创建的，则可以为
    None，在这种情况下将存在`compiler`。
- en: ''
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'tables:'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: tables：
- en: ''
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optional keyword argument - a list of Table objects which are to be created/
    dropped within a MetaData.create_all() or drop_all() method call.
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可选关键字参数 - 一个 Table 对象列表，这些对象将在 MetaData.create_all() 或 drop_all() 方法调用时被创建/删除。
- en: ''
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'dialect:'
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: dialect：
- en: ''
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword argument, but always present - the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") involved in the operation.
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数，但始终存在 - 涉及操作的[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: ''
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'compiler:'
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: compiler：
- en: ''
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: keyword argument. Will be `None` for an engine level DDL invocation, but will
    refer to a [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") if this DDL element is being created inline
    within a table.
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数。对于引擎级别的DDL调用，将为`None`，但如果此DDL元素在表内联中创建，则将引用[`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")。
- en: ''
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'state:'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'state:'
- en: ''
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optional keyword argument - will be the `state` argument passed to this function.
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可选关键字参数 - 将作为此函数传递的`state`参数。
- en: ''
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'checkfirst:'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: checkfirst：
- en: ''
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Keyword argument, will be True if the ‘checkfirst’ flag was set during the call
    to `create()`, `create_all()`, `drop()`, `drop_all()`.
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字参数，在调用`create()`、`create_all()`、`drop()`、`drop_all()`时，如果设置了`checkfirst`标志，则为True。
- en: If the callable returns a True value, the DDL statement will be executed.
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果可调用函数返回True值，则将执行DDL语句。
- en: '`state` – any value which will be passed to the callable_ as the `state` keyword
    argument.'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` - 任何将作为`state`关键字参数传递给可调用函数的值。'
- en: See also
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`SchemaItem.ddl_if()`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`SchemaItem.ddl_if()`'
- en: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
- en: '[Events](event.html)'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[Events](event.html)'
- en: '[PRE66]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: A literal DDL statement.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 字面DDL语句。
- en: Specifies literal SQL DDL to be executed by the database. DDL objects function
    as DDL event listeners, and can be subscribed to those events listed in [`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents"), using either [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") objects as targets. Basic templating support allows
    a single DDL instance to handle repetitive tasks for multiple tables.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要由数据库执行的字面SQL DDL。DDL对象充当DDL事件侦听器，并可以订阅[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents")中列出的事件，使用[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象作为目标。基本的模板支持允许单个DDL实例处理多个表的重复任务。
- en: 'Examples:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE67]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'When operating on Table events, the following `statement` string substitutions
    are available:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作表事件时，以下`statement`字符串替换可用：
- en: '[PRE68]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The DDL’s “context”, if any, will be combined with the standard substitutions
    noted above. Keys present in the context will override the standard substitutions.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: DDL的“上下文”，如果有的话，将与上述标准替换组合。上下文中存在的键将覆盖标准替换。
- en: '**Members**'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DDL.__init__)'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DDL.__init__)'
- en: '**Class signature**'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    ([`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"))
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")（[`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")）
- en: '[PRE69]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Create a DDL statement.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 创建DDL语句。
- en: 'Parameters:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` –'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` -'
- en: A string or unicode string to be executed. Statements will be processed with
    Python’s string formatting operator using a fixed set of string substitutions,
    as well as additional substitutions provided by the optional [`DDL.context`](#sqlalchemy.schema.DDL.params.context
    "sqlalchemy.schema.DDL") parameter.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行的字符串或Unicode字符串。语句将使用Python的字符串格式化运算符处理，使用一组固定的字符串替换，以及可选的[`DDL.context`](#sqlalchemy.schema.DDL.params.context
    "sqlalchemy.schema.DDL")参数提供的其他替换。
- en: A literal ‘%’ in a statement must be escaped as ‘%%’.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语句中的字面‘%’必须转义为‘%%’。
- en: SQL bind parameters are not available in DDL statements.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DDL语句中不可用SQL绑定参数。
- en: '`context` – Optional dictionary, defaults to None. These values will be available
    for use in string substitutions on the DDL statement.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` - 可选字典，默认为None。这些值将可用于DDL语句中的字符串替换。'
- en: See also
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")'
- en: '[Events](event.html)'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '[Events](event.html)'
- en: '[PRE70]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Base class for DDL constructs that represent CREATE and DROP or equivalents.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示CREATE和DROP或等效操作的DDL构造的基类。
- en: The common theme of _CreateDropBase is a single `element` attribute which refers
    to the element to be created or dropped.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: _CreateDropBase的共同主题是一个`element`属性，指向要创建或删除的元素。
- en: '**Class signature**'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.schema._CreateDropBase` ([`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement"))
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.schema._CreateDropBase`（[`sqlalchemy.schema.ExecutableDDLElement`](#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")）
- en: '[PRE71]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Represent a CREATE TABLE statement.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 表示CREATE TABLE语句。
- en: '**Members**'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CreateTable.__init__)'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CreateTable.__init__)'
- en: '**Class signature**'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")（`sqlalchemy.schema._CreateBase`）
- en: '[PRE72]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Create a [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")构造。
- en: 'Parameters:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that’s the subject of the CREATE'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 是创建的主题[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。'
- en: '`on` – See the description for ‘on’ in [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL").'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on` – 请参阅[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")中关于‘on’的描述。'
- en: '`include_foreign_key_constraints` – optional sequence of [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects that will be included inline
    within the CREATE construct; if omitted, all foreign key constraints that do not
    specify use_alter=True are included.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_foreign_key_constraints` – 将作为内联包含在CREATE构造中的可选的[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象序列；如果省略，则包括所有未指定use_alter=True的外键约束。'
- en: '`if_not_exists` –'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_not_exists` –'
- en: if True, an IF NOT EXISTS operator will be applied to the construct.
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则将应用IF NOT EXISTS操作符到构造中。
- en: New in version 1.4.0b2.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中新增。
- en: '[PRE73]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Represent a DROP TABLE statement.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 表示DROP TABLE语句。
- en: '**Members**'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DropTable.__init__)'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DropTable.__init__)'
- en: '**Class signature**'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")（`sqlalchemy.schema._DropBase`）
- en: '[PRE74]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Create a [`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")
    construct.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`DropTable`](#sqlalchemy.schema.DropTable "sqlalchemy.schema.DropTable")构造。
- en: 'Parameters:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that’s the subject of the DROP.'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 是DROP的主题[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。'
- en: '`on` – See the description for ‘on’ in [`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL").'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on` – 请参阅[`DDL`](#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")中关于‘on’的描述。'
- en: '`if_exists` –'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_exists` –'
- en: if True, an IF EXISTS operator will be applied to the construct.
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则将应用IF EXISTS操作符到构造中。
- en: New in version 1.4.0b2.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中新增。
- en: '[PRE75]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Represent a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    as rendered in a CREATE TABLE statement, via the [`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable") construct.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")表示为通过[`CreateTable`](#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造在CREATE TABLE语句中呈现的形式。
- en: This is provided to support custom column DDL within the generation of CREATE
    TABLE statements, by using the compiler extension documented in [Custom SQL Constructs
    and Compilation Extension](compiler.html) to extend [`CreateColumn`](#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn").
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了支持在生成CREATE TABLE语句时使用[Custom SQL Constructs and Compilation Extension](compiler.html)中记录的编译器扩展来扩展[`CreateColumn`](#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn")以支持自定义列DDL而提供的。
- en: 'Typical integration is to examine the incoming [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, and to redirect compilation if a particular
    flag or condition is found:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的集成是检查传入的[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，并且在找到特定标志或条件时重定向编译：
- en: '[PRE76]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The above construct can be applied to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as follows:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 上述构造可以应用于[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")如下：
- en: '[PRE77]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Above, the directives we’ve added to the [`Column.info`](metadata.html#sqlalchemy.schema.Column.info
    "sqlalchemy.schema.Column.info") collection will be detected by our custom compilation
    scheme:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，我们添加到[`Column.info`](metadata.html#sqlalchemy.schema.Column.info "sqlalchemy.schema.Column.info")集合中的指令将被我们自定义的编译方案检测到：
- en: '[PRE78]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The [`CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")
    construct can also be used to skip certain columns when producing a `CREATE TABLE`.
    This is accomplished by creating a compilation rule that conditionally returns
    `None`. This is essentially how to produce the same effect as using the `system=True`
    argument on [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    which marks a column as an implicitly-present “system” column.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")构造也可以用于在生成`CREATE
    TABLE`时跳过某些列。这是通过创建一个有条件返回`None`的编译规则来实现的。这实质上就是如何产生与在[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上使用`system=True`参数相同的效果，该参数将列标记为隐含的“系统”列。'
- en: 'For example, suppose we wish to produce a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") which skips rendering of the PostgreSQL `xmin` column
    against the PostgreSQL backend, but on other backends does render it, in anticipation
    of a triggered rule. A conditional compilation rule could skip this name only
    on PostgreSQL:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们希望生成一个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，在PostgreSQL后端跳过渲染PostgreSQL
    `xmin`列，但在其他后端进行渲染，以预期触发规则。一个条件编译规则可以仅在PostgreSQL上跳过此名称：
- en: '[PRE79]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Above, a [`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    construct will generate a `CREATE TABLE` which only includes the `id` column in
    the string; the `xmin` column will be omitted, but only against the PostgreSQL
    backend.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，一个[`CreateTable`](#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")结构将仅在字符串中包含`id`列；`xmin`列将被省略，但仅针对PostgreSQL后端。
- en: '**Class signature**'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")
    ([`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement "sqlalchemy.schema.BaseDDLElement"))
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.CreateColumn`](#sqlalchemy.schema.CreateColumn "sqlalchemy.schema.CreateColumn")（[`sqlalchemy.schema.BaseDDLElement`](#sqlalchemy.schema.BaseDDLElement
    "sqlalchemy.schema.BaseDDLElement")）
- en: '[PRE80]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Represent a CREATE SEQUENCE statement.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个CREATE SEQUENCE语句。
- en: '**Class signature**'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateSequence`](#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence") (`sqlalchemy.schema._CreateBase`)
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.CreateSequence`](#sqlalchemy.schema.CreateSequence "sqlalchemy.schema.CreateSequence")（`sqlalchemy.schema._CreateBase`）
- en: '[PRE81]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Represent a DROP SEQUENCE statement.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个DROP SEQUENCE语句。
- en: '**Class signature**'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropSequence`](#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.DropSequence`](#sqlalchemy.schema.DropSequence "sqlalchemy.schema.DropSequence")（`sqlalchemy.schema._DropBase`）
- en: '[PRE82]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Represent a CREATE INDEX statement.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个CREATE INDEX语句。
- en: '**Members**'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CreateIndex.__init__)'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CreateIndex.__init__)'
- en: '**Class signature**'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateIndex`](#sqlalchemy.schema.CreateIndex "sqlalchemy.schema.CreateIndex")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.CreateIndex`](#sqlalchemy.schema.CreateIndex "sqlalchemy.schema.CreateIndex")（`sqlalchemy.schema._CreateBase`）
- en: '[PRE83]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Create a `Createindex` construct.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`Createindex`结构。
- en: 'Parameters:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that’s the subject of the CREATE.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")，是CREATE的主题。'
- en: '`if_not_exists` –'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_not_exists` –'
- en: if True, an IF NOT EXISTS operator will be applied to the construct.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则将IF NOT EXISTS运算符应用于该结构。
- en: New in version 1.4.0b2.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中新增。
- en: '[PRE84]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Represent a DROP INDEX statement.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个DROP INDEX语句。
- en: '**Members**'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DropIndex.__init__)'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DropIndex.__init__)'
- en: '**Class signature**'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")（`sqlalchemy.schema._DropBase`）
- en: '[PRE85]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Create a [`DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")
    construct.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个[`DropIndex`](#sqlalchemy.schema.DropIndex "sqlalchemy.schema.DropIndex")结构。
- en: 'Parameters:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that’s the subject of the DROP.'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")，是DROP的主题。'
- en: '`if_exists` –'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if_exists` –'
- en: if True, an IF EXISTS operator will be applied to the construct.
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则将IF EXISTS运算符应用于该结构。
- en: New in version 1.4.0b2.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中新增。
- en: '[PRE86]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Represent an ALTER TABLE ADD CONSTRAINT statement.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个ALTER TABLE ADD CONSTRAINT语句。
- en: '**Class signature**'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.AddConstraint`](#sqlalchemy.schema.AddConstraint "sqlalchemy.schema.AddConstraint")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.AddConstraint`](#sqlalchemy.schema.AddConstraint "sqlalchemy.schema.AddConstraint")
    (`sqlalchemy.schema._CreateBase`)
- en: '[PRE87]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Represent an ALTER TABLE DROP CONSTRAINT statement.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个ALTER TABLE DROP CONSTRAINT语句。
- en: '**Class signature**'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropConstraint`](#sqlalchemy.schema.DropConstraint
    "sqlalchemy.schema.DropConstraint") (`sqlalchemy.schema._DropBase`)
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DropConstraint`](#sqlalchemy.schema.DropConstraint "sqlalchemy.schema.DropConstraint")
    (`sqlalchemy.schema._DropBase`)
- en: '[PRE88]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Represent a CREATE SCHEMA statement.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个CREATE SCHEMA语句。
- en: The argument here is the string name of the schema.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数是模式的字符串名称。
- en: '**Members**'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CreateSchema.__init__)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CreateSchema.__init__)'
- en: '**Class signature**'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    (`sqlalchemy.schema._CreateBase`)
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    (`sqlalchemy.schema._CreateBase`)
- en: '[PRE89]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Create a new [`CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    construct.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`CreateSchema`](#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    构造。
- en: '[PRE90]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Represent a DROP SCHEMA statement.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个DROP SCHEMA语句。
- en: The argument here is the string name of the schema.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数是模式的字符串名称。
- en: '**Members**'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.DropSchema.__init__)'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.DropSchema.__init__)'
- en: '**Class signature**'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    (`sqlalchemy.schema._DropBase`)
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    (`sqlalchemy.schema._DropBase`)
- en: '[PRE91]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Create a new [`DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    construct.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`DropSchema`](#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema")
    构造。
