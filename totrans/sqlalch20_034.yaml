- en: Adjacency List Relationships
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 邻接列表关系
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/self_referential.html](https://docs.sqlalchemy.org/en/20/orm/self_referential.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/self_referential.html](https://docs.sqlalchemy.org/en/20/orm/self_referential.html)
- en: The **adjacency list** pattern is a common relational pattern whereby a table
    contains a foreign key reference to itself, in other words is a **self referential
    relationship**. This is the most common way to represent hierarchical data in
    flat tables. Other methods include **nested sets**, sometimes called “modified
    preorder”, as well as **materialized path**. Despite the appeal that modified
    preorder has when evaluated for its fluency within SQL queries, the adjacency
    list model is probably the most appropriate pattern for the large majority of
    hierarchical storage needs, for reasons of concurrency, reduced complexity, and
    that modified preorder has little advantage over an application which can fully
    load subtrees into the application space.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**邻接列表**模式是一种常见的关系模式，其中表包含对自身的外键引用，换句话说是**自引用关系**。这是在平面表中表示层次数据的最常见方法。其他方法包括**嵌套集**，有时称为“修改的先序”，以及**材料路径**。尽管在SQL查询中评估其流畅性时修改的先序具有吸引力，但邻接列表模型可能是满足大多数层次存储需求的最合适模式，原因是并发性、减少的复杂性，以及修改的先序对于能够完全加载子树到应用程序空间的应用程序几乎没有优势。'
- en: See also
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: This section details the single-table version of a self-referential relationship.
    For a self-referential relationship that uses a second table as an association
    table, see the section [Self-Referential Many-to-Many Relationship](join_conditions.html#self-referential-many-to-many).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分详细说明了自引用关系的单表版本。有关使用第二个表作为关联表的自引用关系，请参阅[自引用多对多关系](join_conditions.html#self-referential-many-to-many)部分。
- en: 'In this example, we’ll work with a single mapped class called `Node`, representing
    a tree structure:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用一个名为`Node`的单个映射类，表示树结构：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With this structure, a graph such as the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此结构，可以构建如下的图形：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Would be represented with data such as:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用数据表示为：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    configuration here works in the same way as a “normal” one-to-many relationship,
    with the exception that the “direction”, i.e. whether the relationship is one-to-many
    or many-to-one, is assumed by default to be one-to-many. To establish the relationship
    as many-to-one, an extra directive is added known as [`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship"), which is a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or collection of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that indicate those which should be considered
    to be “remote”:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")配置与“正常”的一对多关系的工作方式相同，唯一的例外是，“方向”，即关系是一对多还是多对一，默认假定为一对多。要将关系建立为多对一，需要添加一个额外的指令，称为[`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")，它是一个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或一组[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，指示应该被视为“远程”的对象：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Where above, the `id` column is applied as the [`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") of the `parent` [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), thus establishing `parent_id` as the “local” side,
    and the relationship then behaves as a many-to-one.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，`id`列被应用为`parent` [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的[`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")，从而将`parent_id`建立为“本地”端，并且关系随后表现为多对一。
- en: 'As always, both directions can be combined into a bidirectional relationship
    using two [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs linked by [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship"):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，两个方向可以结合成一个双向关系，使用两个由[`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")链接的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造。
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See also
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Adjacency List](examples.html#examples-adjacencylist) - working example, updated
    for SQLAlchemy 2.0'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[邻接列表](examples.html#examples-adjacencylist) - 更新为SQLAlchemy 2.0的工作示例'
- en: Composite Adjacency Lists
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合邻接列表
- en: 'A sub-category of the adjacency list relationship is the rare case where a
    particular column is present on both the “local” and “remote” side of the join
    condition. An example is the `Folder` class below; using a composite primary key,
    the `account_id` column refers to itself, to indicate sub folders which are within
    the same account as that of the parent; while `folder_id` refers to a specific
    folder within that account:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 邻接列表关系的一个子类别是在连接条件的“本地”和“远程”两侧都存在特定列的罕见情况。下面是`Folder`类的一个示例；使用复合主键，`account_id`列指向自身，以指示位于与父文件夹相同帐户内的子文件夹；而`folder_id`则指向该帐户内的特定文件夹：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Above, we pass `account_id` into the [`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") list. [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") recognizes that the `account_id` column here is
    on both sides, and aligns the “remote” column along with the `folder_id` column,
    which it recognizes as uniquely present on the “remote” side.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们将`account_id`传递到[`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")列表中。[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")识别到这里的`account_id`列在两侧都存在，并将“远程”列与它识别为唯一存在于“远程”侧的`folder_id`列对齐。
- en: '## Self-Referential Query Strategies'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '## 自引用查询策略'
- en: 'Querying of self-referential structures works like any other query:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 查询自引用结构的方式与任何其他查询相同：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However extra care is needed when attempting to join along the foreign key from
    one level of the tree to the next. In SQL, a join from a table to itself requires
    that at least one side of the expression be “aliased” so that it can be unambiguously
    referred to.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当尝试沿着树的一个级别从一个外键连接到下一个级别时，需要额外小心。在SQL中，从表连接到自身的连接需要至少对表达式的一侧进行“别名”，以便可以明确引用它。
- en: 'Recall from [Selecting ORM Aliases](queryguide/select.html#orm-queryguide-orm-aliases)
    in the ORM tutorial that the [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct is normally used to provide an “alias” of
    an ORM entity. Joining from `Node` to itself using this technique looks like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请回想一下ORM教程中的[选择ORM别名](queryguide/select.html#orm-queryguide-orm-aliases)，[`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")结构通常用于提供ORM实体的“别名”。使用此技术从`Node`连接到自身的连接如下所示：
- en: '[PRE7]  ## Configuring Self-Referential Eager Loading'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]  ## 配置自引用的急切加载'
- en: 'Eager loading of relationships occurs using joins or outerjoins from parent
    to child table during a normal query operation, such that the parent and its immediate
    child collection or reference can be populated from a single SQL statement, or
    a second statement for all immediate child collections. SQLAlchemy’s joined and
    subquery eager loading use aliased tables in all cases when joining to related
    items, so are compatible with self-referential joining. However, to use eager
    loading with a self-referential relationship, SQLAlchemy needs to be told how
    many levels deep it should join and/or query; otherwise the eager load will not
    take place at all. This depth setting is configured via `relationships.join_depth`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常查询操作期间，通过从父表到子表的连接或外连接来发生关系的急切加载，以便可以从单个SQL语句或所有子集合的第二个语句中填充父对象及其直接子集合或引用。SQLAlchemy的连接和子查询急切加载在连接到相关项时在所有情况下使用别名表，因此与自引用连接兼容。然而，要使用自引用关系进行急切加载，SQLAlchemy需要告知应该连接和/或查询多少级深度；否则，急切加载将根本不会发生。此深度设置通过`relationships.join_depth`进行配置：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Composite Adjacency Lists
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合邻接列表
- en: 'A sub-category of the adjacency list relationship is the rare case where a
    particular column is present on both the “local” and “remote” side of the join
    condition. An example is the `Folder` class below; using a composite primary key,
    the `account_id` column refers to itself, to indicate sub folders which are within
    the same account as that of the parent; while `folder_id` refers to a specific
    folder within that account:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 邻接列表关系的一个子类别是在连接条件的“本地”和“远程”两侧都存在特定列的罕见情况。下面是`Folder`类的一个示例；使用复合主键，`account_id`列指向自身，以指示位于与父文件夹相同帐户内的子文件夹；而`folder_id`则指向该帐户内的特定文件夹：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Above, we pass `account_id` into the [`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") list. [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") recognizes that the `account_id` column here is
    on both sides, and aligns the “remote” column along with the `folder_id` column,
    which it recognizes as uniquely present on the “remote” side.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们将`account_id`传递到[`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")列表中。[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")识别到这里的`account_id`列在两侧均存在，并且将“远程”列与它识别为唯一存在于“远程”一侧的`folder_id`列对齐。
- en: '## Self-Referential Query Strategies'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '## 自引用查询策略'
- en: 'Querying of self-referential structures works like any other query:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 自引用结构的查询与任何其他查询相同：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However extra care is needed when attempting to join along the foreign key from
    one level of the tree to the next. In SQL, a join from a table to itself requires
    that at least one side of the expression be “aliased” so that it can be unambiguously
    referred to.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在尝试从树的一级到下一级进行连接时需要特别注意。在 SQL 中，从表连接到自身需要至少一个表达式的一侧被“别名”，以便可以明确地引用它。
- en: 'Recall from [Selecting ORM Aliases](queryguide/select.html#orm-queryguide-orm-aliases)
    in the ORM tutorial that the [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct is normally used to provide an “alias” of
    an ORM entity. Joining from `Node` to itself using this technique looks like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请回想一下[在ORM教程中选择ORM别名](queryguide/select.html#orm-queryguide-orm-aliases)，[`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造通常用于提供ORM实体的“别名”。使用这种技术从`Node`到自身的连接看起来像：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '## Configuring Self-Referential Eager Loading'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '## 配置自引用关系的急切加载'
- en: 'Eager loading of relationships occurs using joins or outerjoins from parent
    to child table during a normal query operation, such that the parent and its immediate
    child collection or reference can be populated from a single SQL statement, or
    a second statement for all immediate child collections. SQLAlchemy’s joined and
    subquery eager loading use aliased tables in all cases when joining to related
    items, so are compatible with self-referential joining. However, to use eager
    loading with a self-referential relationship, SQLAlchemy needs to be told how
    many levels deep it should join and/or query; otherwise the eager load will not
    take place at all. This depth setting is configured via `relationships.join_depth`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在正常查询操作期间从父表到子表使用连接或外连接来进行关系的急切加载，以便可以从单个 SQL 语句或所有直接子集合的第二个语句中填充父表及其直接子集合或引用。SQLAlchemy的连接和子查询急切加载在加入相关项时始终使用别名表，因此与自引用连接兼容。然而，要想使用自引用关系的急切加载，需要告诉SQLAlchemy应该加入和/或查询多少级深度；否则，急切加载将根本不会发生。此深度设置通过`relationships.join_depth`进行配置：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
