- en: Quad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/quad.html](https://pymupdf.readthedocs.io/en/latest/quad.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Represents a four-sided mathematical shape (also called “quadrilateral” or “tetragon”)
    in the plane, defined as a sequence of four [Point](point.html#point) objects
    ul, ur, ll, lr (conveniently called upper left, upper right, lower left, lower
    right).
  prefs: []
  type: TYPE_NORMAL
- en: Quads can **be obtained** as results of text search methods ([`Page.search_for()`](page.html#Page.search_for
    "Page.search_for")), and they **are used** to define text marker annotations (see
    e.g. [`Page.add_squiggly_annot()`](page.html#Page.add_squiggly_annot "Page.add_squiggly_annot")
    and friends), and in several draw methods (like [`Page.draw_quad()`](page.html#Page.draw_quad
    "Page.draw_quad") / [`Shape.draw_quad()`](shape.html#Shape.draw_quad "Shape.draw_quad"),
    [`Page.draw_oval()`](page.html#Page.draw_oval "Page.draw_oval")/ [`Shape.draw_quad()`](shape.html#Shape.draw_quad
    "Shape.draw_quad")).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the corners of a rectangle are transformed with a **rotation**, **scale**
    or **translation** [Matrix](matrix.html#matrix), then the resulting quad is **rectangular**
    (= congruent to a rectangle), i.e. all of its corners again enclose angles of
    90 degrees. Property [`Quad.is_rectangular`](#Quad.is_rectangular "Quad.is_rectangular")
    checks whether a quad can be thought of being the result of such an operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is not true for all matrices: e.g. shear matrices produce parallelograms,
    and non-invertible matrices deliver “degenerate” tetragons like triangles or lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attribute [`Quad.rect`](#Quad.rect "Quad.rect") obtains the enveloping rectangle.
    Vice versa, rectangles now have attributes [`Rect.quad`](rect.html#Rect.quad "Rect.quad"),
    resp. [`IRect.quad`](irect.html#IRect.quad "IRect.quad") to obtain their respective
    tetragon versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Methods / Attributes** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.transform()`](#Quad.transform "Quad.transform") | transform with a
    matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.morph()`](#Quad.morph "Quad.morph") | transform with a point and matrix
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.ul`](#Quad.ul "Quad.ul") | upper left point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.ur`](#Quad.ur "Quad.ur") | upper right point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.ll`](#Quad.ll "Quad.ll") | lower left point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.lr`](#Quad.lr "Quad.lr") | lower right point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.is_convex`](#Quad.is_convex "Quad.is_convex") | true if quad is a
    convex set |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.is_empty`](#Quad.is_empty "Quad.is_empty") | true if quad is an empty
    set |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.is_rectangular`](#Quad.is_rectangular "Quad.is_rectangular") | true
    if quad is congruent to a rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.rect`](#Quad.rect "Quad.rect") | smallest containing [Rect](rect.html#rect)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.width`](#Quad.width "Quad.width") | the longest width value |'
  prefs: []
  type: TYPE_TB
- en: '| [`Quad.height`](#Quad.height "Quad.height") | the longest height value |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Overloaded constructors: “ul”, “ur”, “ll”, “lr” stand for [`point_like`](glossary.html#point_like
    "point_like") objects (the four corners), “sequence” is a Python sequence with
    four [`point_like`](glossary.html#point_like "point_like") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: If “quad” is specified, the constructor creates a **new copy** of it.
  prefs: []
  type: TYPE_NORMAL
- en: Without parameters, a quad consisting of 4 copies of *Point(0, 0)* is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Modify the quadrilateral by transforming each of its corners with a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – the matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*(New in version 1.17.0)* “Morph” the quad with a matrix-like using a point-like
    as fixed point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fixpoint** (*point_like*) – the point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – the matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new quad (no operation if this is the infinite quad).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The smallest rectangle containing the quad, represented by the blue area in
    the following picture.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-quads.jpg](../Images/dd342f79fb80249423116ac8e3c9c731.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Upper left point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Upper right point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Lower left point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Lower right point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.16.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks if for any two points of the quad, all points on their connecting line
    also belong to the quad.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-convexity.png](../Images/cac3af9d549092d288c6d955ee81b5a3.png)](_images/img-convexity.png)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: True if enclosed area is zero, which means that at least three of the four corners
    are on the same line. If this is false, the quad may still be degenerate or not
    look like a tetragon at all (triangles, parallelograms, trapezoids, …).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: True if all corner angles are 90 degrees. This implies that the quad is **convex
    and not empty**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The maximum length of the top and the bottom side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The maximum length of the left and the right side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: Remark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class adheres to the sequence protocol, so components can be dealt with
    via their indices, too. Also refer to [Using Python Sequences as Arguments in
    PyMuPDF](app3.html#sequencetypes).
  prefs: []
  type: TYPE_NORMAL
- en: Algebra and Containment Checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Starting with v1.19.6, quads can be used in algebraic expressions like the
    other geometry object – the respective restrictions have been lifted. In particular,
    all the following combinations of containment checking are now possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{Point | IRect | Rect | Quad} in {IRect | Rect | Quad}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note the following interesting detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a rectangle, only its top-left point belongs to it. Since v1.19.0, rectangles
    are defined to be “open”, such that its bottom and its right edge do not belong
    to it – including the respective corners. But for quads there exists no such notion
    like “openness”, so we have the following somewhat surprising implication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Remark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class adheres to the sequence protocol, so components can be dealt with
    via their indices, too. Also refer to [Using Python Sequences as Arguments in
    PyMuPDF](app3.html#sequencetypes).
  prefs: []
  type: TYPE_NORMAL
- en: Algebra and Containment Checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Starting with v1.19.6, quads can be used in algebraic expressions like the
    other geometry object – the respective restrictions have been lifted. In particular,
    all the following combinations of containment checking are now possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{Point | IRect | Rect | Quad} in {IRect | Rect | Quad}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note the following interesting detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a rectangle, only its top-left point belongs to it. Since v1.19.0, rectangles
    are defined to be “open”, such that its bottom and its right edge do not belong
    to it – including the respective corners. But for quads there exists no such notion
    like “openness”, so we have the following somewhat surprising implication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
