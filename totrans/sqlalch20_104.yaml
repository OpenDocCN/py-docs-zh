- en: Runtime Inspection API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时检查API
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/inspection.html](https://docs.sqlalchemy.org/en/20/core/inspection.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/inspection.html](https://docs.sqlalchemy.org/en/20/core/inspection.html)
- en: The inspection module provides the [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")
    function, which delivers runtime information about a wide variety of SQLAlchemy
    objects, both within the Core as well as the ORM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 检查模块提供了[`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")函数，该函数提供了关于SQLAlchemy对象的运行时信息，包括核心部分和ORM部分。
- en: The [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect") function is the
    entry point to SQLAlchemy’s public API for viewing the configuration and construction
    of in-memory objects. Depending on the type of object passed to [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect"), the return value will either be a related object which
    provides a known interface, or in many cases it will return the object itself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")函数是访问SQLAlchemy公共API以查看内存对象配置和构建的入口点。根据传递给[`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect")的对象类型，返回值将是提供已知接口的相关对象，或者在许多情况下将返回对象本身。'
- en: The rationale for [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect") is
    twofold. One is that it replaces the need to be aware of a large variety of “information
    getting” functions in SQLAlchemy, such as [`Inspector.from_engine()`](reflection.html#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine") (deprecated in 1.4), [`instance_state()`](../orm/session_api.html#sqlalchemy.orm.attributes.instance_state
    "sqlalchemy.orm.attributes.instance_state"), [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper"), and others. The other is that the return value
    of [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect") is guaranteed to obey
    a documented API, thus allowing third party tools which build on top of SQLAlchemy
    configurations to be constructed in a forwards-compatible way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")的理由是双重的。一是它取代了需要了解SQLAlchemy中大量“获取信息”的函数的需求，例如[`Inspector.from_engine()`](reflection.html#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine")（在1.4中已弃用）、[`instance_state()`](../orm/session_api.html#sqlalchemy.orm.attributes.instance_state
    "sqlalchemy.orm.attributes.instance_state")、[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")等。另一个是[`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")的返回值保证遵守文档化的API，从而允许基于SQLAlchemy配置构建的第三方工具以向前兼容的方式构建。'
- en: '| Object Name | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [inspect](#sqlalchemy.inspect)(subject[, raiseerr]) | Produce an inspection
    object for the given target. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [inspect](#sqlalchemy.inspect)(subject[, raiseerr]) | 为给定目标生成一个检查对象。 |'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Produce an inspection object for the given target.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定目标生成一个检查对象。
- en: The returned value in some cases may be the same object as the one given, such
    as if a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object is passed. In other cases, it will be an instance of the registered inspection
    type for the given object, such as if an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is passed, an [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object is returned.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，返回的值可能与给定的对象相同，例如如果传递了一个[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。在其他情况下，它将是给定对象的注册检查类型的实例，例如如果传递了一个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，则返回一个[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象。
- en: 'Parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`subject` – the subject to be inspected.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject` – 要检查的主题。'
- en: '`raiseerr` – When `True`, if the given subject does not correspond to a known
    SQLAlchemy inspected type, [`sqlalchemy.exc.NoInspectionAvailable`](exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") is raised. If `False`, `None` is returned.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raiseerr` – 当为`True`时，如果给定主题不对应于已知的SQLAlchemy检查类型，则引发[`sqlalchemy.exc.NoInspectionAvailable`](exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable")。如果为`False`，则返回`None`。'
- en: Available Inspection Targets
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可检查的目标
- en: Below is a listing of many of the most common inspection targets.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是许多常见检查目标的列表。
- en: '`Connectable` (i.e. [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"))
    - returns an [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Connectable`（即 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")、[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")） - 返回一个 [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") 对象。'
- en: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - all SQL expression components, including [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), serve as their own inspection objects, meaning any
    of these objects passed to [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")
    return themselves.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - 所有 SQL 表达式组件，包括 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，都作为自己的检查对象，这意味着传递给 [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect") 的这些对象返回它们自身。'
- en: '`object` - an object given will be checked by the ORM for a mapping - if so,
    an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is returned representing the mapped state of the object. The [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") also provides access to per attribute state via
    the [`AttributeState`](../orm/internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    interface as well as the per-flush “history” of any attribute via the [`History`](../orm/session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") object.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object` - 给定一个对象，ORM 将检查其映射 - 如果是这样，将返回一个表示对象的映射状态的 [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 还通过 [`AttributeState`](../orm/internals.html#sqlalchemy.orm.AttributeState
    "sqlalchemy.orm.AttributeState") 接口提供对每个属性状态的访问，以及通过 [`History`](../orm/session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") 对象提供对任何属性的每次 flush 的“历史”访问。'
- en: See also
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Inspection of Mapped Instances](../orm/mapping_styles.html#orm-mapper-inspection-instancestate)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射实例的检查](../orm/mapping_styles.html#orm-mapper-inspection-instancestate)'
- en: '`type` (i.e. a class) - a class given will be checked by the ORM for a mapping
    - if so, a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for that class is returned.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`（即类） - 由 ORM 给定的类将被检查映射 - 如果是这样，将返回该类的 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。'
- en: See also
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Inspection of Mapper objects](../orm/mapping_styles.html#orm-mapper-inspection-mapper)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Mapper 对象的检查](../orm/mapping_styles.html#orm-mapper-inspection-mapper)'
- en: mapped attribute - passing a mapped attribute to [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect"), such as `inspect(MyClass.some_attribute)`, returns a [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") object, which is the [descriptor](../glossary.html#term-descriptor)
    associated with a mapped class. This descriptor refers to a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), which is usually an instance of [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") or [`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"), via its `QueryableAttribute.property`
    attribute.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射属性 - 将映射属性传递给 [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")，例如 `inspect(MyClass.some_attribute)`，将返回一个
    [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 对象，它是与映射类关联的 [描述符](../glossary.html#term-descriptor)。该描述符指的是一个
    [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")，通常是
    [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    或 [`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") 的实例，通过其 `QueryableAttribute.property` 属性。
- en: '[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") - returns an [`AliasedInsp`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") object.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") - 返回一个 [`AliasedInsp`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") 对象。'
- en: Available Inspection Targets
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的检查目标
- en: Below is a listing of many of the most common inspection targets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是许多常见检查目标的列表。
- en: '`Connectable` (i.e. [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"))
    - returns an [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Connectable`（即[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")） - 返回一个[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象。'
- en: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - all SQL expression components, including [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), serve as their own inspection objects, meaning any
    of these objects passed to [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")
    return themselves.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - 所有SQL表达式组件，包括[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，都作为自己的检查对象，这意味着任何这些对象传递给[`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect")都会返回它们自己。'
- en: '`object` - an object given will be checked by the ORM for a mapping - if so,
    an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is returned representing the mapped state of the object. The [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") also provides access to per attribute state via
    the [`AttributeState`](../orm/internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    interface as well as the per-flush “history” of any attribute via the [`History`](../orm/session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") object.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object` - 给定的对象将由ORM检查映射 - 如果是这样，将返回一个表示对象映射状态的[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。[`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")还通过[`AttributeState`](../orm/internals.html#sqlalchemy.orm.AttributeState
    "sqlalchemy.orm.AttributeState")接口提供对每个属性状态的访问，以及通过[`History`](../orm/session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History")对象提供对任何属性的每次刷新“历史”的访问。'
- en: See also
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Inspection of Mapped Instances](../orm/mapping_styles.html#orm-mapper-inspection-instancestate)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[映射实例的检查](../orm/mapping_styles.html#orm-mapper-inspection-instancestate)'
- en: '`type` (i.e. a class) - a class given will be checked by the ORM for a mapping
    - if so, a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for that class is returned.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`（即一个类） - 将给定的类检查ORM是否有映射 - 如果有，将返回该类的[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。'
- en: See also
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Inspection of Mapper objects](../orm/mapping_styles.html#orm-mapper-inspection-mapper)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Mapper对象的检查](../orm/mapping_styles.html#orm-mapper-inspection-mapper)'
- en: mapped attribute - passing a mapped attribute to [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect"), such as `inspect(MyClass.some_attribute)`, returns a [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") object, which is the [descriptor](../glossary.html#term-descriptor)
    associated with a mapped class. This descriptor refers to a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), which is usually an instance of [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") or [`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"), via its `QueryableAttribute.property`
    attribute.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递映射属性 - 将映射属性传递给[`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")，例如`inspect(MyClass.some_attribute)`，将返回一个[`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")对象，该对象是与映射类相关联的[描述符](../glossary.html#term-descriptor)。此描述符指向一个[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")，通常是[`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")或[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty")的实例，通过其`QueryableAttribute.property`属性。
- en: '[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") - returns an [`AliasedInsp`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") object.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") - 返回一个 [`AliasedInsp`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") 对象。'
