- en: Runtime Inspection API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/inspection.html](https://docs.sqlalchemy.org/en/20/core/inspection.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The inspection module provides the [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")
    function, which delivers runtime information about a wide variety of SQLAlchemy
    objects, both within the Core as well as the ORM.
  prefs: []
  type: TYPE_NORMAL
- en: The [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect") function is the
    entry point to SQLAlchemy’s public API for viewing the configuration and construction
    of in-memory objects. Depending on the type of object passed to [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect"), the return value will either be a related object which
    provides a known interface, or in many cases it will return the object itself.
  prefs: []
  type: TYPE_NORMAL
- en: The rationale for [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect") is
    twofold. One is that it replaces the need to be aware of a large variety of “information
    getting” functions in SQLAlchemy, such as [`Inspector.from_engine()`](reflection.html#sqlalchemy.engine.reflection.Inspector.from_engine
    "sqlalchemy.engine.reflection.Inspector.from_engine") (deprecated in 1.4), [`instance_state()`](../orm/session_api.html#sqlalchemy.orm.attributes.instance_state
    "sqlalchemy.orm.attributes.instance_state"), [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper"), and others. The other is that the return value
    of [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect") is guaranteed to obey
    a documented API, thus allowing third party tools which build on top of SQLAlchemy
    configurations to be constructed in a forwards-compatible way.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [inspect](#sqlalchemy.inspect)(subject[, raiseerr]) | Produce an inspection
    object for the given target. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Produce an inspection object for the given target.
  prefs: []
  type: TYPE_NORMAL
- en: The returned value in some cases may be the same object as the one given, such
    as if a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object is passed. In other cases, it will be an instance of the registered inspection
    type for the given object, such as if an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is passed, an [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`subject` – the subject to be inspected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raiseerr` – When `True`, if the given subject does not correspond to a known
    SQLAlchemy inspected type, [`sqlalchemy.exc.NoInspectionAvailable`](exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") is raised. If `False`, `None` is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available Inspection Targets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is a listing of many of the most common inspection targets.
  prefs: []
  type: TYPE_NORMAL
- en: '`Connectable` (i.e. [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"))
    - returns an [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - all SQL expression components, including [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), serve as their own inspection objects, meaning any
    of these objects passed to [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")
    return themselves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object` - an object given will be checked by the ORM for a mapping - if so,
    an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is returned representing the mapped state of the object. The [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") also provides access to per attribute state via
    the [`AttributeState`](../orm/internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    interface as well as the per-flush “history” of any attribute via the [`History`](../orm/session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Inspection of Mapped Instances](../orm/mapping_styles.html#orm-mapper-inspection-instancestate)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` (i.e. a class) - a class given will be checked by the ORM for a mapping
    - if so, a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for that class is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Inspection of Mapper objects](../orm/mapping_styles.html#orm-mapper-inspection-mapper)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mapped attribute - passing a mapped attribute to [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect"), such as `inspect(MyClass.some_attribute)`, returns a [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") object, which is the [descriptor](../glossary.html#term-descriptor)
    associated with a mapped class. This descriptor refers to a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), which is usually an instance of [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") or [`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"), via its `QueryableAttribute.property`
    attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") - returns an [`AliasedInsp`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available Inspection Targets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is a listing of many of the most common inspection targets.
  prefs: []
  type: TYPE_NORMAL
- en: '`Connectable` (i.e. [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"))
    - returns an [`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - all SQL expression components, including [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), serve as their own inspection objects, meaning any
    of these objects passed to [`inspect()`](#sqlalchemy.inspect "sqlalchemy.inspect")
    return themselves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object` - an object given will be checked by the ORM for a mapping - if so,
    an [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is returned representing the mapped state of the object. The [`InstanceState`](../orm/internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") also provides access to per attribute state via
    the [`AttributeState`](../orm/internals.html#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    interface as well as the per-flush “history” of any attribute via the [`History`](../orm/session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Inspection of Mapped Instances](../orm/mapping_styles.html#orm-mapper-inspection-instancestate)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` (i.e. a class) - a class given will be checked by the ORM for a mapping
    - if so, a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for that class is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Inspection of Mapper objects](../orm/mapping_styles.html#orm-mapper-inspection-mapper)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mapped attribute - passing a mapped attribute to [`inspect()`](#sqlalchemy.inspect
    "sqlalchemy.inspect"), such as `inspect(MyClass.some_attribute)`, returns a [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") object, which is the [descriptor](../glossary.html#term-descriptor)
    associated with a mapped class. This descriptor refers to a [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), which is usually an instance of [`ColumnProperty`](../orm/internals.html#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") or [`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"), via its `QueryableAttribute.property`
    attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") - returns an [`AliasedInsp`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
