["```py\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n\n# an example mapping using the base\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(String(30))\n    nickname: Mapped[Optional[str]]\n```", "```py\nfrom sqlalchemy import Table, Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\nclass User:\n    pass\n\nmapper_registry.map_imperatively(User, user_table)\n```", "```py\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id)\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str]\n```", "```py\nu1 = User(name=\"some name\", fullname=\"some fullname\")\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nclass User:\n    pass\n\nmapper_registry.map_imperatively(User, user_table)\n```", "```py\nu1 = User(name=\"some name\", fullname=\"some fullname\")\n```", "```py\nu1 = session.scalars(select(User).where(User.name == \"some name\")).first()\n```", "```py\n    class Point(Base):\n        __tablename__ = \"point\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x: Mapped[int]\n        y: Mapped[int]\n\n        @property\n        def x_plus_y(self):\n            return self.x + self.y\n    ```", "```py\n    from sqlalchemy import event\n\n    class Point(Base):\n        __tablename__ = \"point\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x: Mapped[int]\n        y: Mapped[int]\n\n        def __init__(self, x, y, **kw):\n            super().__init__(x=x, y=y, **kw)\n            self.x_plus_y = x + y\n\n    @event.listens_for(Point, \"load\")\n    def receive_load(target, context):\n        target.x_plus_y = target.x + target.y\n    ```", "```py\n    @event.listens_for(Point, \"load\")\n    @event.listens_for(Point, \"refresh\")\n    @event.listens_for(Point, \"refresh_flush\")\n    def receive_load(target, context, attrs=None):\n        target.x_plus_y = target.x + target.y\n    ```", "```py\n    mapper = User.__mapper__\n    ```", "```py\n    from sqlalchemy import inspect\n\n    mapper = inspect(User)\n    ```", "```py\n    table = User.__table__\n    ```", "```py\n    table = inspect(User).local_table\n    ```", "```py\n    table = inspect(User).selectable\n    ```", "```py\n>>> from sqlalchemy import inspect\n>>> insp = inspect(User)\n```", "```py\n>>> insp.columns\n<sqlalchemy.util._collections.OrderedProperties object at 0x102f407f8>\n```", "```py\n>>> list(insp.columns)\n[Column('id', Integer(), table=<user>, primary_key=True, nullable=False), Column('name', String(length=50), table=<user>), Column('fullname', String(length=50), table=<user>), Column('nickname', String(length=50), table=<user>)]\n>>> insp.columns.name\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> insp.all_orm_descriptors\n<sqlalchemy.util._collections.ImmutableProperties object at 0x1040e2c68>\n>>> insp.all_orm_descriptors.keys()\n['fullname', 'nickname', 'name', 'id']\n```", "```py\n>>> list(insp.column_attrs)\n[<ColumnProperty at 0x10403fde0; id>, <ColumnProperty at 0x10403fce8; name>, <ColumnProperty at 0x1040e9050; fullname>, <ColumnProperty at 0x1040e9148; nickname>]\n>>> insp.column_attrs.name\n<ColumnProperty at 0x10403fce8; name>\n>>> insp.column_attrs.name.expression\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> u1 = session.scalars(select(User)).first()\n```", "```py\n>>> insp = inspect(u1)\n>>> insp\n<sqlalchemy.orm.state.InstanceState object at 0x7f07e5fec2e0>\n```", "```py\n>>> insp.mapper\n<Mapper at 0x7f07e614ef50; User>\n```", "```py\n>>> insp.session\n<sqlalchemy.orm.session.Session object at 0x7f07e614f160>\n```", "```py\n>>> insp.persistent\nTrue\n>>> insp.pending\nFalse\n```", "```py\n>>> insp.unloaded\n{'addresses'}\n```", "```py\n>>> insp.unmodified\n{'nickname', 'name', 'fullname', 'id'}\n```", "```py\n>>> insp.attrs.nickname.value\n'nickname'\n>>> u1.nickname = \"new nickname\"\n>>> insp.attrs.nickname.history\nHistory(added=['new nickname'], unchanged=(), deleted=['nickname'])\n```", "```py\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n\n# an example mapping using the base\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(String(30))\n    nickname: Mapped[Optional[str]]\n```", "```py\nfrom sqlalchemy import Table, Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\nclass User:\n    pass\n\nmapper_registry.map_imperatively(User, user_table)\n```", "```py\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id)\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n\n# an example mapping using the base\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(String(30))\n    nickname: Mapped[Optional[str]]\n```", "```py\nfrom sqlalchemy import Table, Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\nclass User:\n    pass\n\nmapper_registry.map_imperatively(User, user_table)\n```", "```py\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id)\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str]\n```", "```py\nu1 = User(name=\"some name\", fullname=\"some fullname\")\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nclass User:\n    pass\n\nmapper_registry.map_imperatively(User, user_table)\n```", "```py\nu1 = User(name=\"some name\", fullname=\"some fullname\")\n```", "```py\nu1 = session.scalars(select(User).where(User.name == \"some name\")).first()\n```", "```py\n    class Point(Base):\n        __tablename__ = \"point\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x: Mapped[int]\n        y: Mapped[int]\n\n        @property\n        def x_plus_y(self):\n            return self.x + self.y\n    ```", "```py\n    from sqlalchemy import event\n\n    class Point(Base):\n        __tablename__ = \"point\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x: Mapped[int]\n        y: Mapped[int]\n\n        def __init__(self, x, y, **kw):\n            super().__init__(x=x, y=y, **kw)\n            self.x_plus_y = x + y\n\n    @event.listens_for(Point, \"load\")\n    def receive_load(target, context):\n        target.x_plus_y = target.x + target.y\n    ```", "```py\n    @event.listens_for(Point, \"load\")\n    @event.listens_for(Point, \"refresh\")\n    @event.listens_for(Point, \"refresh_flush\")\n    def receive_load(target, context, attrs=None):\n        target.x_plus_y = target.x + target.y\n    ```", "```py\n    mapper = User.__mapper__\n    ```", "```py\n    from sqlalchemy import inspect\n\n    mapper = inspect(User)\n    ```", "```py\n    table = User.__table__\n    ```", "```py\n    table = inspect(User).local_table\n    ```", "```py\n    table = inspect(User).selectable\n    ```", "```py\n>>> from sqlalchemy import inspect\n>>> insp = inspect(User)\n```", "```py\n>>> insp.columns\n<sqlalchemy.util._collections.OrderedProperties object at 0x102f407f8>\n```", "```py\n>>> list(insp.columns)\n[Column('id', Integer(), table=<user>, primary_key=True, nullable=False), Column('name', String(length=50), table=<user>), Column('fullname', String(length=50), table=<user>), Column('nickname', String(length=50), table=<user>)]\n>>> insp.columns.name\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> insp.all_orm_descriptors\n<sqlalchemy.util._collections.ImmutableProperties object at 0x1040e2c68>\n>>> insp.all_orm_descriptors.keys()\n['fullname', 'nickname', 'name', 'id']\n```", "```py\n>>> list(insp.column_attrs)\n[<ColumnProperty at 0x10403fde0; id>, <ColumnProperty at 0x10403fce8; name>, <ColumnProperty at 0x1040e9050; fullname>, <ColumnProperty at 0x1040e9148; nickname>]\n>>> insp.column_attrs.name\n<ColumnProperty at 0x10403fce8; name>\n>>> insp.column_attrs.name.expression\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> u1 = session.scalars(select(User)).first()\n```", "```py\n>>> insp = inspect(u1)\n>>> insp\n<sqlalchemy.orm.state.InstanceState object at 0x7f07e5fec2e0>\n```", "```py\n>>> insp.mapper\n<Mapper at 0x7f07e614ef50; User>\n```", "```py\n>>> insp.session\n<sqlalchemy.orm.session.Session object at 0x7f07e614f160>\n```", "```py\n>>> insp.persistent\nTrue\n>>> insp.pending\nFalse\n```", "```py\n>>> insp.unloaded\n{'addresses'}\n```", "```py\n>>> insp.unmodified\n{'nickname', 'name', 'fullname', 'id'}\n```", "```py\n>>> insp.attrs.nickname.value\n'nickname'\n>>> u1.nickname = \"new nickname\"\n>>> insp.attrs.nickname.history\nHistory(added=['new nickname'], unchanged=(), deleted=['nickname'])\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str]\n```", "```py\nu1 = User(name=\"some name\", fullname=\"some fullname\")\n```", "```py\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nclass User:\n    pass\n\nmapper_registry.map_imperatively(User, user_table)\n```", "```py\nu1 = User(name=\"some name\", fullname=\"some fullname\")\n```", "```py\nu1 = session.scalars(select(User).where(User.name == \"some name\")).first()\n```", "```py\n    class Point(Base):\n        __tablename__ = \"point\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x: Mapped[int]\n        y: Mapped[int]\n\n        @property\n        def x_plus_y(self):\n            return self.x + self.y\n    ```", "```py\n    from sqlalchemy import event\n\n    class Point(Base):\n        __tablename__ = \"point\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x: Mapped[int]\n        y: Mapped[int]\n\n        def __init__(self, x, y, **kw):\n            super().__init__(x=x, y=y, **kw)\n            self.x_plus_y = x + y\n\n    @event.listens_for(Point, \"load\")\n    def receive_load(target, context):\n        target.x_plus_y = target.x + target.y\n    ```", "```py\n    @event.listens_for(Point, \"load\")\n    @event.listens_for(Point, \"refresh\")\n    @event.listens_for(Point, \"refresh_flush\")\n    def receive_load(target, context, attrs=None):\n        target.x_plus_y = target.x + target.y\n    ```", "```py\n    mapper = User.__mapper__\n    ```", "```py\n    from sqlalchemy import inspect\n\n    mapper = inspect(User)\n    ```", "```py\n    table = User.__table__\n    ```", "```py\n    table = inspect(User).local_table\n    ```", "```py\n    table = inspect(User).selectable\n    ```", "```py\n>>> from sqlalchemy import inspect\n>>> insp = inspect(User)\n```", "```py\n>>> insp.columns\n<sqlalchemy.util._collections.OrderedProperties object at 0x102f407f8>\n```", "```py\n>>> list(insp.columns)\n[Column('id', Integer(), table=<user>, primary_key=True, nullable=False), Column('name', String(length=50), table=<user>), Column('fullname', String(length=50), table=<user>), Column('nickname', String(length=50), table=<user>)]\n>>> insp.columns.name\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> insp.all_orm_descriptors\n<sqlalchemy.util._collections.ImmutableProperties object at 0x1040e2c68>\n>>> insp.all_orm_descriptors.keys()\n['fullname', 'nickname', 'name', 'id']\n```", "```py\n>>> list(insp.column_attrs)\n[<ColumnProperty at 0x10403fde0; id>, <ColumnProperty at 0x10403fce8; name>, <ColumnProperty at 0x1040e9050; fullname>, <ColumnProperty at 0x1040e9148; nickname>]\n>>> insp.column_attrs.name\n<ColumnProperty at 0x10403fce8; name>\n>>> insp.column_attrs.name.expression\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> u1 = session.scalars(select(User)).first()\n```", "```py\n>>> insp = inspect(u1)\n>>> insp\n<sqlalchemy.orm.state.InstanceState object at 0x7f07e5fec2e0>\n```", "```py\n>>> insp.mapper\n<Mapper at 0x7f07e614ef50; User>\n```", "```py\n>>> insp.session\n<sqlalchemy.orm.session.Session object at 0x7f07e614f160>\n```", "```py\n>>> insp.persistent\nTrue\n>>> insp.pending\nFalse\n```", "```py\n>>> insp.unloaded\n{'addresses'}\n```", "```py\n>>> insp.unmodified\n{'nickname', 'name', 'fullname', 'id'}\n```", "```py\n>>> insp.attrs.nickname.value\n'nickname'\n>>> u1.nickname = \"new nickname\"\n>>> insp.attrs.nickname.history\nHistory(added=['new nickname'], unchanged=(), deleted=['nickname'])\n```", "```py\n>>> from sqlalchemy import inspect\n>>> insp = inspect(User)\n```", "```py\n>>> insp.columns\n<sqlalchemy.util._collections.OrderedProperties object at 0x102f407f8>\n```", "```py\n>>> list(insp.columns)\n[Column('id', Integer(), table=<user>, primary_key=True, nullable=False), Column('name', String(length=50), table=<user>), Column('fullname', String(length=50), table=<user>), Column('nickname', String(length=50), table=<user>)]\n>>> insp.columns.name\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> insp.all_orm_descriptors\n<sqlalchemy.util._collections.ImmutableProperties object at 0x1040e2c68>\n>>> insp.all_orm_descriptors.keys()\n['fullname', 'nickname', 'name', 'id']\n```", "```py\n>>> list(insp.column_attrs)\n[<ColumnProperty at 0x10403fde0; id>, <ColumnProperty at 0x10403fce8; name>, <ColumnProperty at 0x1040e9050; fullname>, <ColumnProperty at 0x1040e9148; nickname>]\n>>> insp.column_attrs.name\n<ColumnProperty at 0x10403fce8; name>\n>>> insp.column_attrs.name.expression\nColumn('name', String(length=50), table=<user>)\n```", "```py\n>>> u1 = session.scalars(select(User)).first()\n```", "```py\n>>> insp = inspect(u1)\n>>> insp\n<sqlalchemy.orm.state.InstanceState object at 0x7f07e5fec2e0>\n```", "```py\n>>> insp.mapper\n<Mapper at 0x7f07e614ef50; User>\n```", "```py\n>>> insp.session\n<sqlalchemy.orm.session.Session object at 0x7f07e614f160>\n```", "```py\n>>> insp.persistent\nTrue\n>>> insp.pending\nFalse\n```", "```py\n>>> insp.unloaded\n{'addresses'}\n```", "```py\n>>> insp.unmodified\n{'nickname', 'name', 'fullname', 'id'}\n```", "```py\n>>> insp.attrs.nickname.value\n'nickname'\n>>> u1.nickname = \"new nickname\"\n>>> insp.attrs.nickname.history\nHistory(added=['new nickname'], unchanged=(), deleted=['nickname'])\n```"]