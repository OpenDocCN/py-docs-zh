- en: SQL and Generic Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/functions.html](https://docs.sqlalchemy.org/en/20/core/functions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQL functions are invoked by using the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace. See the tutorial at [Working with
    SQL Functions](../tutorial/data_select.html#tutorial-functions) for background
    on how to use the [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    object to render SQL functions in statements.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: Function API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The base API for SQL functions, which provides for the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace as well as classes that may be used
    for extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AnsiFunction](#sqlalchemy.sql.functions.AnsiFunction) | Define a function
    in “ansi” format, which doesn’t render parenthesis. |'
  prefs: []
  type: TYPE_TB
- en: '| [Function](#sqlalchemy.sql.functions.Function) | Describe a named SQL function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [FunctionElement](#sqlalchemy.sql.functions.FunctionElement) | Base for SQL
    function-oriented constructs. |'
  prefs: []
  type: TYPE_TB
- en: '| [GenericFunction](#sqlalchemy.sql.functions.GenericFunction) | Define a ‘generic’
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [register_function](#sqlalchemy.sql.functions.register_function)(identifier,
    fn[, package]) | Associate a callable with a particular func. name. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Define a function in “ansi” format, which doesn’t render parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Describe a named SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    object is typically generated from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generation object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type_` – optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") datatype object that will be used as the return
    value of the column expression generated by this function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packagenames` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a string which indicates package prefix names to be prepended to the function
    name when the SQL is generated. The [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generator creates these when it is called using
    dotted format, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.functions.Function.__init__)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") ([`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function").
  prefs: []
  type: TYPE_NORMAL
- en: The [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    construct is normally used to construct new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Base for SQL function-oriented constructs.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [generic type](https://peps.python.org/pep-0484/#generics), meaning
    that type checkers and IDEs can be instructed on the types to expect in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") for this function. See [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") for an example of how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    - named SQL function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.functions.FunctionElement.__init__), [alias()](#sqlalchemy.sql.functions.FunctionElement.alias),
    [as_comparison()](#sqlalchemy.sql.functions.FunctionElement.as_comparison), [c](#sqlalchemy.sql.functions.FunctionElement.c),
    [clauses](#sqlalchemy.sql.functions.FunctionElement.clauses), [column_valued()](#sqlalchemy.sql.functions.FunctionElement.column_valued),
    [columns](#sqlalchemy.sql.functions.FunctionElement.columns), [entity_namespace](#sqlalchemy.sql.functions.FunctionElement.entity_namespace),
    [exported_columns](#sqlalchemy.sql.functions.FunctionElement.exported_columns),
    [filter()](#sqlalchemy.sql.functions.FunctionElement.filter), [over()](#sqlalchemy.sql.functions.FunctionElement.over),
    [scalar_table_valued()](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued),
    [select()](#sqlalchemy.sql.functions.FunctionElement.select), [self_group()](#sqlalchemy.sql.functions.FunctionElement.self_group),
    [table_valued()](#sqlalchemy.sql.functions.FunctionElement.table_valued), [within_group()](#sqlalchemy.sql.functions.FunctionElement.within_group),
    [within_group_type()](#sqlalchemy.sql.functions.FunctionElement.within_group_type)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), [`sqlalchemy.sql.expression.FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), `sqlalchemy.sql.expression.Generative`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – additional kwargs are typically consumed by subclasses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Produce a [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method is part of the mechanism
    by which “table valued” SQL functions are created. However, most use cases are
    covered by higher level methods on [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") including [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued"), and [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued").
  prefs: []
  type: TYPE_NORMAL
- en: This construct wraps the function in a named alias which is suitable for the
    FROM clause, in the style accepted for example by PostgreSQL. A column expression
    is also provided using the special `.column` attribute, which may be used to refer
    to the output of the function as a scalar value in the columns or where clause,
    for a backend such as PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: For a full table-valued expression, use the [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method first to establish
    named columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method provides a shortcut
    for the above pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.0b2: Added the `.column` accessor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – alias name, will be rendered as `AS <name>` in the FROM clause'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joins_implicitly` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.33.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Interpret this expression as a boolean comparison between two values.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used for an ORM use case described at [Custom operators based
    on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function).
  prefs: []
  type: TYPE_NORMAL
- en: 'A hypothetical SQL function “is_equal()” which compares to values for equality
    would be written in the Core expression language as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If “is_equal()” above is comparing “a” and “b” for equality, the [`FunctionElement.as_comparison()`](#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") method would be invoked
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Where above, the integer value “1” refers to the first argument of the “is_equal()”
    function and the integer value “2” refers to the second.
  prefs: []
  type: TYPE_NORMAL
- en: 'This would create a [`BinaryExpression`](sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") that is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: However, at the SQL level it would still render as “is_equal(‘a’, ‘b’)”.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM, when it loads a related object or collection, needs to be able to manipulate
    the “left” and “right” sides of the ON clause of a JOIN expression. The purpose
    of this method is to provide a SQL function construct that can also supply this
    information to the ORM, when used with the [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") parameter. The return value is a containment object
    called `FunctionAsBinary`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ORM example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “Venue” class can load descendant “Venue” objects by determining
    if the name of the parent Venue is contained within the start of the hypothetical
    descendant value’s name, e.g. “parent1” would match up to “parent1/child1”, but
    not to “parent2/child1”.
  prefs: []
  type: TYPE_NORMAL
- en: Possible use cases include the “materialized path” example given above, as well
    as making use of special SQL functions such as geometric functions to create join
    conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`left_index` – the integer 1-based index of the function argument that serves
    as the “left” side of the expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right_index` – the integer 1-based index of the function argument that serves
    as the “right” side of the expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Custom operators based on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    - example use within the ORM'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: synonym for [`FunctionElement.columns`](#sqlalchemy.sql.functions.FunctionElement.columns
    "sqlalchemy.sql.functions.FunctionElement.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Return the underlying [`ClauseList`](sqlelement.html#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") which contains the arguments for this
    [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Return this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    as a column expression that selects from itself as a FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joins_implicitly` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the “table” portion of the column valued function may be a member
    of the FROM clause without any explicit JOIN to other tables in the SQL query,
    and no “cartesian product” warning will be generated. May be useful for SQL functions
    such as `func.json_array_elements()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.46.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Valued Functions](../dialects/postgresql.html#postgresql-column-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The set of columns exported by this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a placeholder collection that allows the function to be placed in the
    FROM clause of a statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The above form is a legacy feature that is now superseded by the fully capable
    [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method; see that method
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") - generates table-valued
    SQL function expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: overrides FromClause.entity_namespace as functions are generally column expressions
    and not FromClauses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Produce a FILTER clause against this function.
  prefs: []
  type: TYPE_NORMAL
- en: Used against aggregate and window functions, for database backends that support
    the “FILTER” clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionFilter`](sqlelement.html#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`funcfilter()`](sqlelement.html#sqlalchemy.sql.expression.funcfilter "sqlalchemy.sql.expression.funcfilter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Produce an OVER clause against this function.
  prefs: []
  type: TYPE_NORMAL
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See [`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Window Functions](../tutorial/data_select.html#tutorial-window-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Return a column expression that’s against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") as a scalar table-valued expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned expression is similar to that returned by a single column accessed
    off of a [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") construct, except no
    FROM clause is generated; the function is rendered in the similar way as a scalar
    subquery.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Produce a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") representation of this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") with table-valued expressions added.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'A WITH ORDINALITY expression may be generated by passing the keyword argument
    “with_ordinality”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*expr` – A series of string column names that will be added to the `.c` collection
    of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct as columns. [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects with or without datatypes may also
    be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ordinality` – string name that when present results in the `WITH ORDINALITY`
    clause being added to the alias, and the given string name will be added as a
    column to the .c collection of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joins_implicitly` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.33.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../dialects/postgresql.html#postgresql-table-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued") - variant of [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") which delivers the complete
    table valued expression as a scalar column expression'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TableValuedAlias.render_derived()`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") - renders the alias
    using a derived column clause, e.g. `AS name(col1, col2, ...)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Produce a WITHIN GROUP (ORDER BY expr) clause against this function.
  prefs: []
  type: TYPE_NORMAL
- en: Used against so-called “ordered set aggregate” and “hypothetical set aggregate”
    functions, including [`percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`rank`](#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank"), [`dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank"), etc.
  prefs: []
  type: TYPE_NORMAL
- en: See [`within_group()`](sqlelement.html#sqlalchemy.sql.expression.within_group
    "sqlalchemy.sql.expression.within_group") for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: For types that define their return type as based on the criteria within a WITHIN
    GROUP (ORDER BY) expression, called by the [`WithinGroup`](sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct.
  prefs: []
  type: TYPE_NORMAL
- en: Returns None by default, in which case the function’s normal `.type` is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Define a ‘generic’ function.
  prefs: []
  type: TYPE_NORMAL
- en: A generic function is a pre-established [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") class that is instantiated automatically
    when called by name from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") attribute. Note that calling any name from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") has the effect that a new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instance is created automatically, given
    that name. The primary use case for defining a [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class is so that a function of a particular
    name may be given a fixed return type. It can also include custom argument parsing
    schemes as well as additional methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subclasses of [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") are automatically registered under
    the name of the class. For example, a user-defined function `as_utc()` would be
    available immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'User-defined generic functions can be organized into packages by specifying
    the “package” attribute when defining [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"). Third party libraries containing
    many functions may want to use this in order to avoid name conflicts with other
    systems. For example, if our `as_utc()` function were part of a package “time”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The above function would be available from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") using the package name `time`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'A final option is to allow the function to be accessed from one name in [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") but to render as a different name. The `identifier`
    attribute will override the name used to access the function as loaded from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), but will retain the usage of `name` as the
    rendered name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The above function will render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The name will be rendered as is, however without quoting unless the name contains
    special characters that require quoting. To force quoting on or off for the name,
    use the `quoted_name` construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The above function will render as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Type parameters for this class as a [generic type](https://peps.python.org/pep-0484/#generics)
    can be passed and should match the type seen in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The above indicates that the following expression returns a `datetime` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.3.13: The [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now recognized for quoting
    when used with the “name” attribute of the object, so that quoting can be forced
    on or off for the function name.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") ([`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Associate a callable with a particular func. name.
  prefs: []
  type: TYPE_NORMAL
- en: This is normally called by GenericFunction, but is also available by itself
    so that a non-Function construct can be associated with the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") accessor (i.e. CAST, EXTRACT).
  prefs: []
  type: TYPE_NORMAL
- en: Selected “Known” Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These are [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    implementations for a selected set of common SQL functions that set up the expected
    return type for each function automatically. The are invoked in the same way as
    any other member of the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note that any name not known to [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generates the function name as is - there is
    no restriction on what SQL functions can be called, known or unknown to SQLAlchemy,
    built-in or user defined. The section here only describes those functions where
    SQLAlchemy already knows what argument and return types are in use.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [aggregate_strings](#sqlalchemy.sql.functions.aggregate_strings) | Implement
    a generic string aggregation function. |'
  prefs: []
  type: TYPE_TB
- en: '| [array_agg](#sqlalchemy.sql.functions.array_agg) | Support for the ARRAY_AGG
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [char_length](#sqlalchemy.sql.functions.char_length) | The CHAR_LENGTH()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [coalesce](#sqlalchemy.sql.functions.coalesce) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [concat](#sqlalchemy.sql.functions.concat) | The SQL CONCAT() function, which
    concatenates strings. |'
  prefs: []
  type: TYPE_TB
- en: '| [count](#sqlalchemy.sql.functions.count) | The ANSI COUNT aggregate function.
    With no arguments, emits COUNT *. |'
  prefs: []
  type: TYPE_TB
- en: '| [cube](#sqlalchemy.sql.functions.cube) | Implement the `CUBE` grouping operation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [cume_dist](#sqlalchemy.sql.functions.cume_dist) | Implement the `cume_dist`
    hypothetical-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_date](#sqlalchemy.sql.functions.current_date) | The CURRENT_DATE()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_time](#sqlalchemy.sql.functions.current_time) | The CURRENT_TIME()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_timestamp](#sqlalchemy.sql.functions.current_timestamp) | The CURRENT_TIMESTAMP()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_user](#sqlalchemy.sql.functions.current_user) | The CURRENT_USER()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [dense_rank](#sqlalchemy.sql.functions.dense_rank) | Implement the `dense_rank`
    hypothetical-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [grouping_sets](#sqlalchemy.sql.functions.grouping_sets) | Implement the
    `GROUPING SETS` grouping operation. |'
  prefs: []
  type: TYPE_TB
- en: '| [localtime](#sqlalchemy.sql.functions.localtime) | The localtime() SQL function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [localtimestamp](#sqlalchemy.sql.functions.localtimestamp) | The localtimestamp()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [max](#sqlalchemy.sql.functions.max) | The SQL MAX() aggregate function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [min](#sqlalchemy.sql.functions.min) | The SQL MIN() aggregate function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [mode](#sqlalchemy.sql.functions.mode) | Implement the `mode` ordered-set
    aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [next_value](#sqlalchemy.sql.functions.next_value) | Represent the ‘next
    value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    as its single argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [now](#sqlalchemy.sql.functions.now) | The SQL now() datetime function. |'
  prefs: []
  type: TYPE_TB
- en: '| [percent_rank](#sqlalchemy.sql.functions.percent_rank) | Implement the `percent_rank`
    hypothetical-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [percentile_cont](#sqlalchemy.sql.functions.percentile_cont) | Implement
    the `percentile_cont` ordered-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [percentile_disc](#sqlalchemy.sql.functions.percentile_disc) | Implement
    the `percentile_disc` ordered-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [random](#sqlalchemy.sql.functions.random) | The RANDOM() SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [rank](#sqlalchemy.sql.functions.rank) | Implement the `rank` hypothetical-set
    aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [rollup](#sqlalchemy.sql.functions.rollup) | Implement the `ROLLUP` grouping
    operation. |'
  prefs: []
  type: TYPE_TB
- en: '| [session_user](#sqlalchemy.sql.functions.session_user) | The SESSION_USER()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [sum](#sqlalchemy.sql.functions.sum) | The SQL SUM() aggregate function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [sysdate](#sqlalchemy.sql.functions.sysdate) | The SYSDATE() SQL function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [user](#sqlalchemy.sql.functions.user) | The USER() SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Implement a generic string aggregation function.
  prefs: []
  type: TYPE_NORMAL
- en: This function will concatenate non-null values into a string and separate the
    values by a delimiter.
  prefs: []
  type: TYPE_NORMAL
- en: This function is compiled on a per-backend basis, into functions such as `group_concat()`,
    `string_agg()`, or `LISTAGG()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g. Example usage with delimiter ‘.’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The return type of this function is [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.aggregate_strings`](#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Support for the ARRAY_AGG function.
  prefs: []
  type: TYPE_NORMAL
- en: The `func.array_agg(expr)` construct returns an expression of type [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") - PostgreSQL-specific version that
    returns [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), which has PG-specific operators added.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.array_agg`](#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The CHAR_LENGTH() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.char_length`](#sqlalchemy.sql.functions.char_length
    "sqlalchemy.sql.functions.char_length") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.coalesce`](#sqlalchemy.sql.functions.coalesce
    "sqlalchemy.sql.functions.coalesce") (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The SQL CONCAT() function, which concatenates strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'String concatenation in SQLAlchemy is more commonly available using the Python
    `+` operator with string datatypes, which will render a backend-specific concatenation
    operator, such as :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.concat`](#sqlalchemy.sql.functions.concat "sqlalchemy.sql.functions.concat")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The ANSI COUNT aggregate function. With no arguments, emits COUNT *.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing `stmt` would emit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.count`](#sqlalchemy.sql.functions.count "sqlalchemy.sql.functions.count")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `CUBE` grouping operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.cube`](#sqlalchemy.sql.functions.cube "sqlalchemy.sql.functions.cube")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `cume_dist` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.cume_dist`](#sqlalchemy.sql.functions.cume_dist
    "sqlalchemy.sql.functions.cume_dist") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_DATE() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_date`](#sqlalchemy.sql.functions.current_date
    "sqlalchemy.sql.functions.current_date") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_TIME() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_time`](#sqlalchemy.sql.functions.current_time
    "sqlalchemy.sql.functions.current_time") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_TIMESTAMP() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_timestamp`](#sqlalchemy.sql.functions.current_timestamp
    "sqlalchemy.sql.functions.current_timestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_USER() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_user`](#sqlalchemy.sql.functions.current_user
    "sqlalchemy.sql.functions.current_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `dense_rank` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `GROUPING SETS` grouping operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to group by multiple sets, use the [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.grouping_sets`](#sqlalchemy.sql.functions.grouping_sets
    "sqlalchemy.sql.functions.grouping_sets") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The localtime() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.localtime`](#sqlalchemy.sql.functions.localtime
    "sqlalchemy.sql.functions.localtime") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The localtimestamp() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.localtimestamp`](#sqlalchemy.sql.functions.localtimestamp
    "sqlalchemy.sql.functions.localtimestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The SQL MAX() aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.max`](#sqlalchemy.sql.functions.max "sqlalchemy.sql.functions.max")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The SQL MIN() aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.min`](#sqlalchemy.sql.functions.min "sqlalchemy.sql.functions.min")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `mode` ordered-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is the same as the sort expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.mode`](#sqlalchemy.sql.functions.mode "sqlalchemy.sql.functions.mode")
    (`sqlalchemy.sql.functions.OrderedSetAgg`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Represent the ‘next value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") as its single argument.
  prefs: []
  type: TYPE_NORMAL
- en: Compiles into the appropriate function on each backend, or will raise NotImplementedError
    if used on a backend that does not provide support for sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.next_value`](#sqlalchemy.sql.functions.next_value
    "sqlalchemy.sql.functions.next_value") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The SQL now() datetime function.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects will usually render this particular function in a backend-specific
    way, such as rendering it as `CURRENT_TIMESTAMP`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.now`](#sqlalchemy.sql.functions.now "sqlalchemy.sql.functions.now")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `percent_rank` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.percent_rank`](#sqlalchemy.sql.functions.percent_rank
    "sqlalchemy.sql.functions.percent_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `percentile_cont` ordered-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `percentile_disc` ordered-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.percentile_disc`](#sqlalchemy.sql.functions.percentile_disc
    "sqlalchemy.sql.functions.percentile_disc") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The RANDOM() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.random`](#sqlalchemy.sql.functions.random "sqlalchemy.sql.functions.random")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `rank` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.rank`](#sqlalchemy.sql.functions.rank "sqlalchemy.sql.functions.rank")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `ROLLUP` grouping operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.rollup`](#sqlalchemy.sql.functions.rollup "sqlalchemy.sql.functions.rollup")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The SESSION_USER() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.session_user`](#sqlalchemy.sql.functions.session_user
    "sqlalchemy.sql.functions.session_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The SQL SUM() aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.sum`](#sqlalchemy.sql.functions.sum "sqlalchemy.sql.functions.sum")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The SYSDATE() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.sysdate`](#sqlalchemy.sql.functions.sysdate
    "sqlalchemy.sql.functions.sysdate") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The USER() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.user`](#sqlalchemy.sql.functions.user "sqlalchemy.sql.functions.user")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: Function API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The base API for SQL functions, which provides for the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace as well as classes that may be used
    for extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AnsiFunction](#sqlalchemy.sql.functions.AnsiFunction) | Define a function
    in “ansi” format, which doesn’t render parenthesis. |'
  prefs: []
  type: TYPE_TB
- en: '| [Function](#sqlalchemy.sql.functions.Function) | Describe a named SQL function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [FunctionElement](#sqlalchemy.sql.functions.FunctionElement) | Base for SQL
    function-oriented constructs. |'
  prefs: []
  type: TYPE_TB
- en: '| [GenericFunction](#sqlalchemy.sql.functions.GenericFunction) | Define a ‘generic’
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [register_function](#sqlalchemy.sql.functions.register_function)(identifier,
    fn[, package]) | Associate a callable with a particular func. name. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Define a function in “ansi” format, which doesn’t render parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Describe a named SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    object is typically generated from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generation object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type_` – optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") datatype object that will be used as the return
    value of the column expression generated by this function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packagenames` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a string which indicates package prefix names to be prepended to the function
    name when the SQL is generated. The [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generator creates these when it is called using
    dotted format, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.functions.Function.__init__)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") ([`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function").
  prefs: []
  type: TYPE_NORMAL
- en: The [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    construct is normally used to construct new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Base for SQL function-oriented constructs.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [generic type](https://peps.python.org/pep-0484/#generics), meaning
    that type checkers and IDEs can be instructed on the types to expect in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") for this function. See [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") for an example of how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    - named SQL function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    - namespace which produces registered or ad-hoc [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    - allows creation of registered function types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.functions.FunctionElement.__init__), [alias()](#sqlalchemy.sql.functions.FunctionElement.alias),
    [as_comparison()](#sqlalchemy.sql.functions.FunctionElement.as_comparison), [c](#sqlalchemy.sql.functions.FunctionElement.c),
    [clauses](#sqlalchemy.sql.functions.FunctionElement.clauses), [column_valued()](#sqlalchemy.sql.functions.FunctionElement.column_valued),
    [columns](#sqlalchemy.sql.functions.FunctionElement.columns), [entity_namespace](#sqlalchemy.sql.functions.FunctionElement.entity_namespace),
    [exported_columns](#sqlalchemy.sql.functions.FunctionElement.exported_columns),
    [filter()](#sqlalchemy.sql.functions.FunctionElement.filter), [over()](#sqlalchemy.sql.functions.FunctionElement.over),
    [scalar_table_valued()](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued),
    [select()](#sqlalchemy.sql.functions.FunctionElement.select), [self_group()](#sqlalchemy.sql.functions.FunctionElement.self_group),
    [table_valued()](#sqlalchemy.sql.functions.FunctionElement.table_valued), [within_group()](#sqlalchemy.sql.functions.FunctionElement.within_group),
    [within_group_type()](#sqlalchemy.sql.functions.FunctionElement.within_group_type)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") ([`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), [`sqlalchemy.sql.expression.ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), [`sqlalchemy.sql.expression.FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), `sqlalchemy.sql.expression.Generative`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*clauses` – list of column expressions that form the arguments of the SQL
    function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – additional kwargs are typically consumed by subclasses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Function`](#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Produce a [`Alias`](selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method is part of the mechanism
    by which “table valued” SQL functions are created. However, most use cases are
    covered by higher level methods on [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") including [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued"), and [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued").
  prefs: []
  type: TYPE_NORMAL
- en: This construct wraps the function in a named alias which is suitable for the
    FROM clause, in the style accepted for example by PostgreSQL. A column expression
    is also provided using the special `.column` attribute, which may be used to refer
    to the output of the function as a scalar value in the columns or where clause,
    for a backend such as PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: For a full table-valued expression, use the [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method first to establish
    named columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method provides a shortcut
    for the above pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.0b2: Added the `.column` accessor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – alias name, will be rendered as `AS <name>` in the FROM clause'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joins_implicitly` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.33.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Interpret this expression as a boolean comparison between two values.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used for an ORM use case described at [Custom operators based
    on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function).
  prefs: []
  type: TYPE_NORMAL
- en: 'A hypothetical SQL function “is_equal()” which compares to values for equality
    would be written in the Core expression language as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'If “is_equal()” above is comparing “a” and “b” for equality, the [`FunctionElement.as_comparison()`](#sqlalchemy.sql.functions.FunctionElement.as_comparison
    "sqlalchemy.sql.functions.FunctionElement.as_comparison") method would be invoked
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Where above, the integer value “1” refers to the first argument of the “is_equal()”
    function and the integer value “2” refers to the second.
  prefs: []
  type: TYPE_NORMAL
- en: 'This would create a [`BinaryExpression`](sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") that is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: However, at the SQL level it would still render as “is_equal(‘a’, ‘b’)”.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM, when it loads a related object or collection, needs to be able to manipulate
    the “left” and “right” sides of the ON clause of a JOIN expression. The purpose
    of this method is to provide a SQL function construct that can also supply this
    information to the ORM, when used with the [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") parameter. The return value is a containment object
    called `FunctionAsBinary`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ORM example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “Venue” class can load descendant “Venue” objects by determining
    if the name of the parent Venue is contained within the start of the hypothetical
    descendant value’s name, e.g. “parent1” would match up to “parent1/child1”, but
    not to “parent2/child1”.
  prefs: []
  type: TYPE_NORMAL
- en: Possible use cases include the “materialized path” example given above, as well
    as making use of special SQL functions such as geometric functions to create join
    conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`left_index` – the integer 1-based index of the function argument that serves
    as the “left” side of the expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right_index` – the integer 1-based index of the function argument that serves
    as the “right” side of the expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Custom operators based on SQL functions](../orm/join_conditions.html#relationship-custom-operator-sql-function)
    - example use within the ORM'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: synonym for [`FunctionElement.columns`](#sqlalchemy.sql.functions.FunctionElement.columns
    "sqlalchemy.sql.functions.FunctionElement.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Return the underlying [`ClauseList`](sqlelement.html#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") which contains the arguments for this
    [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Return this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement "sqlalchemy.sql.functions.FunctionElement")
    as a column expression that selects from itself as a FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'This is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joins_implicitly` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the “table” portion of the column valued function may be a member
    of the FROM clause without any explicit JOIN to other tables in the SQL query,
    and no “cartesian product” warning will be generated. May be useful for SQL functions
    such as `func.json_array_elements()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.46.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Valued Functions - Table Valued Function as a Scalar Column](../tutorial/data_select.html#tutorial-functions-column-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Valued Functions](../dialects/postgresql.html#postgresql-column-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The set of columns exported by this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a placeholder collection that allows the function to be placed in the
    FROM clause of a statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: The above form is a legacy feature that is now superseded by the fully capable
    [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") method; see that method
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") - generates table-valued
    SQL function expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: overrides FromClause.entity_namespace as functions are generally column expressions
    and not FromClauses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Produce a FILTER clause against this function.
  prefs: []
  type: TYPE_NORMAL
- en: Used against aggregate and window functions, for database backends that support
    the “FILTER” clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionFilter`](sqlelement.html#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`funcfilter()`](sqlelement.html#sqlalchemy.sql.expression.funcfilter "sqlalchemy.sql.expression.funcfilter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Produce an OVER clause against this function.
  prefs: []
  type: TYPE_NORMAL
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: See [`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`over()`](sqlelement.html#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Window Functions](../tutorial/data_select.html#tutorial-window-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Return a column expression that’s against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") as a scalar table-valued expression.
  prefs: []
  type: TYPE_NORMAL
- en: The returned expression is similar to that returned by a single column accessed
    off of a [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") construct, except no
    FROM clause is generated; the function is rendered in the similar way as a scalar
    subquery.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.alias()`](#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Produce a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct against this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement").
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shorthand for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  prefs: []
  type: TYPE_NORMAL
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  prefs: []
  type: TYPE_NORMAL
- en: The base [`self_group()`](#sqlalchemy.sql.functions.FunctionElement.self_group
    "sqlalchemy.sql.functions.FunctionElement.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") representation of this [`FunctionElement`](#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") with table-valued expressions added.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'A WITH ORDINALITY expression may be generated by passing the keyword argument
    “with_ordinality”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*expr` – A series of string column names that will be added to the `.c` collection
    of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias") construct as columns. [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") objects with or without datatypes may also
    be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional name to assign to the alias name that’s generated. If omitted,
    a unique anonymizing name is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_ordinality` – string name that when present results in the `WITH ORDINALITY`
    clause being added to the alias, and the given string name will be added as a
    column to the .c collection of the resulting [`TableValuedAlias`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias
    "sqlalchemy.sql.expression.TableValuedAlias").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`joins_implicitly` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the table valued function may be used in the FROM clause without
    any explicit JOIN to other tables in the SQL query, and no “cartesian product”
    warning will be generated. May be useful for SQL functions such as `func.json_each()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.33.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../tutorial/data_select.html#tutorial-functions-table-valued)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table-Valued Functions](../dialects/postgresql.html#postgresql-table-valued)
    - in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.scalar_table_valued()`](#sqlalchemy.sql.functions.FunctionElement.scalar_table_valued
    "sqlalchemy.sql.functions.FunctionElement.scalar_table_valued") - variant of [`FunctionElement.table_valued()`](#sqlalchemy.sql.functions.FunctionElement.table_valued
    "sqlalchemy.sql.functions.FunctionElement.table_valued") which delivers the complete
    table valued expression as a scalar column expression'
  prefs: []
  type: TYPE_NORMAL
- en: '[`FunctionElement.column_valued()`](#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TableValuedAlias.render_derived()`](selectable.html#sqlalchemy.sql.expression.TableValuedAlias.render_derived
    "sqlalchemy.sql.expression.TableValuedAlias.render_derived") - renders the alias
    using a derived column clause, e.g. `AS name(col1, col2, ...)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Produce a WITHIN GROUP (ORDER BY expr) clause against this function.
  prefs: []
  type: TYPE_NORMAL
- en: Used against so-called “ordered set aggregate” and “hypothetical set aggregate”
    functions, including [`percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`rank`](#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank"), [`dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank"), etc.
  prefs: []
  type: TYPE_NORMAL
- en: See [`within_group()`](sqlelement.html#sqlalchemy.sql.expression.within_group
    "sqlalchemy.sql.expression.within_group") for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: For types that define their return type as based on the criteria within a WITHIN
    GROUP (ORDER BY) expression, called by the [`WithinGroup`](sqlelement.html#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct.
  prefs: []
  type: TYPE_NORMAL
- en: Returns None by default, in which case the function’s normal `.type` is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Define a ‘generic’ function.
  prefs: []
  type: TYPE_NORMAL
- en: A generic function is a pre-established [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") class that is instantiated automatically
    when called by name from the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") attribute. Note that calling any name from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") has the effect that a new [`Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") instance is created automatically, given
    that name. The primary use case for defining a [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") class is so that a function of a particular
    name may be given a fixed return type. It can also include custom argument parsing
    schemes as well as additional methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subclasses of [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") are automatically registered under
    the name of the class. For example, a user-defined function `as_utc()` would be
    available immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'User-defined generic functions can be organized into packages by specifying
    the “package” attribute when defining [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"). Third party libraries containing
    many functions may want to use this in order to avoid name conflicts with other
    systems. For example, if our `as_utc()` function were part of a package “time”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'The above function would be available from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") using the package name `time`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'A final option is to allow the function to be accessed from one name in [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") but to render as a different name. The `identifier`
    attribute will override the name used to access the function as loaded from [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func"), but will retain the usage of `name` as the
    rendered name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'The above function will render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'The name will be rendered as is, however without quoting unless the name contains
    special characters that require quoting. To force quoting on or off for the name,
    use the `quoted_name` construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'The above function will render as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Type parameters for this class as a [generic type](https://peps.python.org/pep-0484/#generics)
    can be passed and should match the type seen in a [`Result`](connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'The above indicates that the following expression returns a `datetime` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.3.13: The [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now recognized for quoting
    when used with the “name” attribute of the object, so that quoting can be forced
    on or off for the function name.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction") ([`sqlalchemy.sql.functions.Function`](#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Associate a callable with a particular func. name.
  prefs: []
  type: TYPE_NORMAL
- en: This is normally called by GenericFunction, but is also available by itself
    so that a non-Function construct can be associated with the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") accessor (i.e. CAST, EXTRACT).
  prefs: []
  type: TYPE_NORMAL
- en: Selected “Known” Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These are [`GenericFunction`](#sqlalchemy.sql.functions.GenericFunction "sqlalchemy.sql.functions.GenericFunction")
    implementations for a selected set of common SQL functions that set up the expected
    return type for each function automatically. The are invoked in the same way as
    any other member of the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Note that any name not known to [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") generates the function name as is - there is
    no restriction on what SQL functions can be called, known or unknown to SQLAlchemy,
    built-in or user defined. The section here only describes those functions where
    SQLAlchemy already knows what argument and return types are in use.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [aggregate_strings](#sqlalchemy.sql.functions.aggregate_strings) | Implement
    a generic string aggregation function. |'
  prefs: []
  type: TYPE_TB
- en: '| [array_agg](#sqlalchemy.sql.functions.array_agg) | Support for the ARRAY_AGG
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [char_length](#sqlalchemy.sql.functions.char_length) | The CHAR_LENGTH()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [coalesce](#sqlalchemy.sql.functions.coalesce) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [concat](#sqlalchemy.sql.functions.concat) | The SQL CONCAT() function, which
    concatenates strings. |'
  prefs: []
  type: TYPE_TB
- en: '| [count](#sqlalchemy.sql.functions.count) | The ANSI COUNT aggregate function.
    With no arguments, emits COUNT *. |'
  prefs: []
  type: TYPE_TB
- en: '| [cube](#sqlalchemy.sql.functions.cube) | Implement the `CUBE` grouping operation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [cume_dist](#sqlalchemy.sql.functions.cume_dist) | Implement the `cume_dist`
    hypothetical-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_date](#sqlalchemy.sql.functions.current_date) | The CURRENT_DATE()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_time](#sqlalchemy.sql.functions.current_time) | The CURRENT_TIME()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_timestamp](#sqlalchemy.sql.functions.current_timestamp) | The CURRENT_TIMESTAMP()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [current_user](#sqlalchemy.sql.functions.current_user) | The CURRENT_USER()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [dense_rank](#sqlalchemy.sql.functions.dense_rank) | Implement the `dense_rank`
    hypothetical-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [grouping_sets](#sqlalchemy.sql.functions.grouping_sets) | Implement the
    `GROUPING SETS` grouping operation. |'
  prefs: []
  type: TYPE_TB
- en: '| [localtime](#sqlalchemy.sql.functions.localtime) | The localtime() SQL function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [localtimestamp](#sqlalchemy.sql.functions.localtimestamp) | The localtimestamp()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [max](#sqlalchemy.sql.functions.max) | The SQL MAX() aggregate function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [min](#sqlalchemy.sql.functions.min) | The SQL MIN() aggregate function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [mode](#sqlalchemy.sql.functions.mode) | Implement the `mode` ordered-set
    aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [next_value](#sqlalchemy.sql.functions.next_value) | Represent the ‘next
    value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    as its single argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [now](#sqlalchemy.sql.functions.now) | The SQL now() datetime function. |'
  prefs: []
  type: TYPE_TB
- en: '| [percent_rank](#sqlalchemy.sql.functions.percent_rank) | Implement the `percent_rank`
    hypothetical-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [percentile_cont](#sqlalchemy.sql.functions.percentile_cont) | Implement
    the `percentile_cont` ordered-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [percentile_disc](#sqlalchemy.sql.functions.percentile_disc) | Implement
    the `percentile_disc` ordered-set aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [random](#sqlalchemy.sql.functions.random) | The RANDOM() SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [rank](#sqlalchemy.sql.functions.rank) | Implement the `rank` hypothetical-set
    aggregate function. |'
  prefs: []
  type: TYPE_TB
- en: '| [rollup](#sqlalchemy.sql.functions.rollup) | Implement the `ROLLUP` grouping
    operation. |'
  prefs: []
  type: TYPE_TB
- en: '| [session_user](#sqlalchemy.sql.functions.session_user) | The SESSION_USER()
    SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '| [sum](#sqlalchemy.sql.functions.sum) | The SQL SUM() aggregate function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [sysdate](#sqlalchemy.sql.functions.sysdate) | The SYSDATE() SQL function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [user](#sqlalchemy.sql.functions.user) | The USER() SQL function. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Implement a generic string aggregation function.
  prefs: []
  type: TYPE_NORMAL
- en: This function will concatenate non-null values into a string and separate the
    values by a delimiter.
  prefs: []
  type: TYPE_NORMAL
- en: This function is compiled on a per-backend basis, into functions such as `group_concat()`,
    `string_agg()`, or `LISTAGG()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g. Example usage with delimiter ‘.’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: The return type of this function is [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.aggregate_strings`](#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Support for the ARRAY_AGG function.
  prefs: []
  type: TYPE_NORMAL
- en: The `func.array_agg(expr)` construct returns an expression of type [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_agg()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array_agg
    "sqlalchemy.dialects.postgresql.array_agg") - PostgreSQL-specific version that
    returns [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY"), which has PG-specific operators added.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.array_agg`](#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: The CHAR_LENGTH() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.char_length`](#sqlalchemy.sql.functions.char_length
    "sqlalchemy.sql.functions.char_length") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.coalesce`](#sqlalchemy.sql.functions.coalesce
    "sqlalchemy.sql.functions.coalesce") (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: The SQL CONCAT() function, which concatenates strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'String concatenation in SQLAlchemy is more commonly available using the Python
    `+` operator with string datatypes, which will render a backend-specific concatenation
    operator, such as :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.concat`](#sqlalchemy.sql.functions.concat "sqlalchemy.sql.functions.concat")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: The ANSI COUNT aggregate function. With no arguments, emits COUNT *.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing `stmt` would emit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.count`](#sqlalchemy.sql.functions.count "sqlalchemy.sql.functions.count")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `CUBE` grouping operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.cube`](#sqlalchemy.sql.functions.cube "sqlalchemy.sql.functions.cube")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `cume_dist` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.cume_dist`](#sqlalchemy.sql.functions.cume_dist
    "sqlalchemy.sql.functions.cume_dist") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_DATE() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_date`](#sqlalchemy.sql.functions.current_date
    "sqlalchemy.sql.functions.current_date") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_TIME() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_time`](#sqlalchemy.sql.functions.current_time
    "sqlalchemy.sql.functions.current_time") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_TIMESTAMP() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_timestamp`](#sqlalchemy.sql.functions.current_timestamp
    "sqlalchemy.sql.functions.current_timestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: The CURRENT_USER() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.current_user`](#sqlalchemy.sql.functions.current_user
    "sqlalchemy.sql.functions.current_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `dense_rank` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.dense_rank`](#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `GROUPING SETS` grouping operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to group by multiple sets, use the [`tuple_()`](sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.grouping_sets`](#sqlalchemy.sql.functions.grouping_sets
    "sqlalchemy.sql.functions.grouping_sets") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: The localtime() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.localtime`](#sqlalchemy.sql.functions.localtime
    "sqlalchemy.sql.functions.localtime") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: The localtimestamp() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.localtimestamp`](#sqlalchemy.sql.functions.localtimestamp
    "sqlalchemy.sql.functions.localtimestamp") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: The SQL MAX() aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.max`](#sqlalchemy.sql.functions.max "sqlalchemy.sql.functions.max")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: The SQL MIN() aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.min`](#sqlalchemy.sql.functions.min "sqlalchemy.sql.functions.min")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `mode` ordered-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is the same as the sort expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.mode`](#sqlalchemy.sql.functions.mode "sqlalchemy.sql.functions.mode")
    (`sqlalchemy.sql.functions.OrderedSetAgg`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Represent the ‘next value’, given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") as its single argument.
  prefs: []
  type: TYPE_NORMAL
- en: Compiles into the appropriate function on each backend, or will raise NotImplementedError
    if used on a backend that does not provide support for sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.next_value`](#sqlalchemy.sql.functions.next_value
    "sqlalchemy.sql.functions.next_value") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: The SQL now() datetime function.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects will usually render this particular function in a backend-specific
    way, such as rendering it as `CURRENT_TIMESTAMP`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.now`](#sqlalchemy.sql.functions.now "sqlalchemy.sql.functions.now")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `percent_rank` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Numeric`](type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.percent_rank`](#sqlalchemy.sql.functions.percent_rank
    "sqlalchemy.sql.functions.percent_rank") ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `percentile_cont` ordered-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.percentile_cont`](#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `percentile_disc` ordered-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is the same as the sort expression, or if the
    arguments are an array, an [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    of the sort expression’s type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.percentile_disc`](#sqlalchemy.sql.functions.percentile_disc
    "sqlalchemy.sql.functions.percentile_disc") (`sqlalchemy.sql.functions.OrderedSetAgg`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: The RANDOM() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.random`](#sqlalchemy.sql.functions.random "sqlalchemy.sql.functions.random")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `rank` hypothetical-set aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: This function must be used with the [`FunctionElement.within_group()`](#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") modifier to supply a
    sort expression to operate upon.
  prefs: []
  type: TYPE_NORMAL
- en: The return type of this function is [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.rank`](#sqlalchemy.sql.functions.rank "sqlalchemy.sql.functions.rank")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `ROLLUP` grouping operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used as part of the GROUP BY of a statement, e.g. [`Select.group_by()`](selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.rollup`](#sqlalchemy.sql.functions.rollup "sqlalchemy.sql.functions.rollup")
    ([`sqlalchemy.sql.functions.GenericFunction`](#sqlalchemy.sql.functions.GenericFunction
    "sqlalchemy.sql.functions.GenericFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: The SESSION_USER() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.session_user`](#sqlalchemy.sql.functions.session_user
    "sqlalchemy.sql.functions.session_user") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: The SQL SUM() aggregate function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.sum`](#sqlalchemy.sql.functions.sum "sqlalchemy.sql.functions.sum")
    (`sqlalchemy.sql.functions.ReturnTypeFromArgs`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: The SYSDATE() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.sysdate`](#sqlalchemy.sql.functions.sysdate
    "sqlalchemy.sql.functions.sysdate") ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: The USER() SQL function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.functions.user`](#sqlalchemy.sql.functions.user "sqlalchemy.sql.functions.user")
    ([`sqlalchemy.sql.functions.AnsiFunction`](#sqlalchemy.sql.functions.AnsiFunction
    "sqlalchemy.sql.functions.AnsiFunction"))
  prefs: []
  type: TYPE_NORMAL
