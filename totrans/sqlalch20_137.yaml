- en: 0.4 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.4变更日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_04.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_04.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_04.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_04.html)
- en: 0.4.8
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.8
- en: 'Released: Sun Oct 12 2008'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年10月12日星期日
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding inherit_condition passed with “A=B” versus “B=A” leading
    to errors
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于传递“A=B”与“B=A”时导致错误的inherit_condition的错误
- en: 'References: [#1039](https://www.sqlalchemy.org/trac/ticket/1039)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1039](https://www.sqlalchemy.org/trac/ticket/1039)
- en: '**[orm]**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Changes made to new, dirty and deleted collections in SessionExtension.before_flush()
    will take effect for that flush.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SessionExtension.before_flush()中对新的、脏的和已删除的集合进行的更改将对该刷新生效。
- en: '**[orm]**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added label() method to InstrumentedAttribute to establish forwards compatibility
    with 0.5.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向InstrumentedAttribute添加了label()方法，以确保与0.5的向前兼容性。
- en: sql
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.in_(someselect)现在可以作为一个columns-clause表达式使用，而不会使子查询泄漏到FROM子句中
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1074](https://www.sqlalchemy.org/trac/ticket/1074)
- en: mysql
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added MSMediumInteger type.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了MSMediumInteger类型。
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1146](https://www.sqlalchemy.org/trac/ticket/1146)
- en: sqlite
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Supplied a custom strftime() function which handles dates before 1900.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供了一个自定义的strftime()函数，用于处理1900年之前的日期。
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#968](https://www.sqlalchemy.org/trac/ticket/968)
- en: '**[sqlite]**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlite方言中禁用了String（和Unicode，UnicodeText等）的convert_unicode逻辑，以适应pysqlite 2.5.0的新要求，即仅接受Python
    unicode对象；[https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
- en: oracle
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: has_sequence() now takes schema name into account
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: has_sequence()现在考虑模式名称
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1155](https://www.sqlalchemy.org/trac/ticket/1155)
- en: '**[oracle]**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added BFILE to the list of reflected types
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将BFILE添加到反射类型列表中
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1121](https://www.sqlalchemy.org/trac/ticket/1121)
- en: 0.4.7p1
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.7p1
- en: 'Released: Thu Jul 31 2008'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年7月31日星期四
- en: orm
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added “add()” and “add_all()” to scoped_session methods. Workaround for 0.4.7:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向scoped_session方法添加了“add()”和“add_all()”。 0.4.7的解决方法：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**[orm]**'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed non-2.3 compatible usage of set() and generator expression within relation().
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在relation()中调用set()和生成器表达式时与非2.3兼容的用法。
- en: 0.4.7
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.7
- en: 'Released: Sat Jul 26 2008'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年7月26日星期六
- en: orm
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The contains() operator when used with many-to-many will alias() the secondary
    (association) table so that multiple contains() calls will not conflict with each
    other
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与many-to-many一起使用contains()运算符时，将为secondary（关联）表设置别名，以便多个contains()调用不会互相冲突
- en: 'References: [#1058](https://www.sqlalchemy.org/trac/ticket/1058)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1058](https://www.sqlalchemy.org/trac/ticket/1058)
- en: '**[orm]**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug preventing merge() from functioning in conjunction with a comparable_property()
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止merge()与comparable_property()一起运行的错误
- en: '**[orm]**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the enable_typechecks=False setting on relation() now only allows subtypes with
    inheriting mappers. Totally unrelated types, or subtypes not set up with mapper
    inheritance against the target mapper are still not allowed.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，关于relation()上的enable_typechecks=False设置仅允许具有继承映射器的子类型。 完全不相关的类型，或者没有针对目标映射器设置映射器继承的子类型仍然不被允许。
- en: '**[orm]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added is_active flag to Sessions to detect when a transaction is in progress.
    This flag is always True with a “transactional” (in 0.5 a non-“autocommit”) Session.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Sessions添加了is_active标志，以检测事务是否正在进行中。 该标志始终为True，对于“transactional”（在0.5中为非“autocommit”）会话。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: sql
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug when calling select([literal(‘foo’)]) or select([bindparam(‘foo’)]).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用select([literal('foo')])或select([bindparam('foo')])时的错误。
- en: schema
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: create_all(), drop_all(), create(), drop() all raise an error if the table name
    or schema name contains more characters than that dialect’s configured character
    limit. Some DB’s can handle too-long table names during usage, and SQLA can handle
    this as well. But various reflection/ checkfirst-during-create scenarios fail
    since we are looking for the name within the DB’s catalog tables.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果表名或模式名包含的字符超过该方言配置的字符限制，则create_all()、drop_all()、create()、drop()都会引发错误。一些数据库可以在使用过程中处理过长的表名，SQLA也可以处理这个问题。但是由于我们正在DB的目录表中查找名称，因此各种反射/在创建期间进行checkfirst的场景失败。
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)
- en: '**[schema]**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The index name generated when you say “index=True” on a Column is truncated
    to the length appropriate for the dialect. Additionally, an Index with a too-
    long name cannot be explicitly dropped with Index.drop(), similar to.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在Column上说“index=True”时生成的索引名称被截断为适合该方言的长度。此外，具有太长名称的索引不能使用Index.drop()显式删除，类似于。
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571), [#820](https://www.sqlalchemy.org/trac/ticket/820)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571), [#820](https://www.sqlalchemy.org/trac/ticket/820)
- en: mysql
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added ‘CALL’ to the list of SQL keywords which return result rows.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“CALL”添加到返回结果行的SQL关键字列表中。
- en: oracle
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle get_default_schema_name() “normalizes” the name before returning, meaning
    it returns a lower-case name when the identifier is detected as case insensitive.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的get_default_schema_name()在返回之前“规范化”名称，这意味着当检测到标识符为大小写不敏感时，它返回一个小写名称。
- en: '**[oracle]**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: creating/dropping tables takes schema name into account when searching for the
    existing table, so that tables in other owner namespaces with the same name do
    not conflict
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在搜索现有表时，创建/删除表时考虑模式名称，以便其他所有者命名空间中具有相同名称的表不发生冲突。
- en: 'References: [#709](https://www.sqlalchemy.org/trac/ticket/709)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#709](https://www.sqlalchemy.org/trac/ticket/709)
- en: '**[oracle]**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Cursors now have “arraysize” set to 50 by default on them, the value of which
    is configurable using the “arraysize” argument to create_engine() with the Oracle
    dialect. This to account for cx_oracle’s default setting of “1”, which has the
    effect of many round trips being sent to Oracle. This actually works well in conjunction
    with BLOB/CLOB-bound cursors, of which there are any number available but only
    for the life of that row request (so BufferedColumnRow is still needed, but less
    so).
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 游标现在默认情况下将“arraysize”设置为50，其值可以使用Oracle方言的create_engine()的“arraysize”参数进行配置。这是为了考虑cx_oracle的默认设置为“1”，这会导致向Oracle发送许多往返。这实际上与BLOB/CLOB绑定的游标结合使用效果很好，其中有任意数量可用，但仅在该行请求的生命周期内（因此仍然需要BufferedColumnRow，但不那么需要）。
- en: 'References: [#1062](https://www.sqlalchemy.org/trac/ticket/1062)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1062](https://www.sqlalchemy.org/trac/ticket/1062)
- en: '**[oracle]**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: sqlite
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite
- en: add SLFloat type, which matches the SQLite REAL type affinity. Previously, only
    SLNumeric was provided which fulfills NUMERIC affinity, but that’s not the same
    as REAL.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了SLFloat类型，与SQLite REAL类型亲和。以前只提供了SLNumeric，它满足NUMERIC亲和，但与REAL不同。
- en: misc
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Repaired server_side_cursors to properly detect text() clauses.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了server_side_cursors以正确检测text()子句。
- en: '**[postgres]**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added PGCidr type.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了PGCidr类型。
- en: 'References: [#1092](https://www.sqlalchemy.org/trac/ticket/1092)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1092](https://www.sqlalchemy.org/trac/ticket/1092)
- en: 0.4.6
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.6
- en: 'Released: Sat May 10 2008'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年5月10日
- en: orm
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fix to the recent relation() refactoring which fixes exotic viewonly relations
    which join between local and remote table multiple times, with a common column
    shared between the joins.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近的relation()重构，修复了在本地和远程表之间多次连接的奇异viewonly关系，这些关系之间有一个共同的列用于连接。
- en: '**[orm]**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also re-established viewonly relation() configurations that join across multiple
    tables.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还重新建立了跨多个表连接的viewonly relation()配置。
- en: '**[orm]**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added experimental relation() flag to help with primaryjoins across functions,
    etc., _local_remote_pairs=[tuples]. This complements a complex primaryjoin condition
    allowing you to provide the individual column pairs which comprise the relation’s
    local and remote sides. Also improved lazy load SQL generation to handle placing
    bind params inside of functions and other expressions. (partial progress towards)
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个实验性relation()标志，以帮助跨函数等进行primaryjoins，_local_remote_pairs=[tuples]。这补充了一个复杂的primaryjoin条件，允许您提供构成关系本地和远程侧的各个列对。还改进了惰性加载SQL生成，以处理将bind参数放置在函数和其他表达式内的情况。（部分进展）
- en: 'References: [#610](https://www.sqlalchemy.org/trac/ticket/610)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#610](https://www.sqlalchemy.org/trac/ticket/610)
- en: '**[orm]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: repaired single table inheritance such that you can single-table inherit from
    a joined-table inheriting mapper without issue.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承，使您可以从已加入表继承的映射器中单表继承而无需问题。
- en: 'References: [#1036](https://www.sqlalchemy.org/trac/ticket/1036)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1036](https://www.sqlalchemy.org/trac/ticket/1036)
- en: '**[orm]**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed “concatenate tuple” bug which could occur with Query.order_by() if clause
    adaption had taken place.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果发生了子句适应，Query.order_by()可能会出现的“连接元组”错误。
- en: 'References: [#1027](https://www.sqlalchemy.org/trac/ticket/1027)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1027](https://www.sqlalchemy.org/trac/ticket/1027)
- en: '**[orm]**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed ancient assertion that mapped selectables require “alias names” - the
    mapper creates its own alias now if none is present. Though in this case you need
    to use the class, not the mapped selectable, as the source of column attributes
    - so a warning is still issued.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了关于映射的selectables需要“别名”的古老断言 - 如果没有，映射器现在会自己创建别名。尽管在这种情况下，您需要使用类，而不是映射的可选择项，作为列属性的来源
    - 因此仍然会发出警告。
- en: '**[orm]**'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixes to the “exists” function involving inheritance (any(), has(), ~contains());
    the full target join will be rendered into the EXISTS clause for relations that
    link to subclasses.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及继承的“exists”函数的问题（any()、has()、~contains()）；完整的目标连接将被呈现到关系中，以链接到子类。
- en: '**[orm]**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored usage of append_result() extension method for primary query rows, when
    the extension is present and only a single- entity result is being returned.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了对主查询行使用append_result()扩展方法的用法，当扩展存在且只返回单个实体结果时。
- en: '**[orm]**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also re-established viewonly relation() configurations that join across multiple
    tables.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还重新建立了跨多个表连接的viewonly relation()配置。
- en: '**[orm]**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: removed ancient assertion that mapped selectables require “alias names” - the
    mapper creates its own alias now if none is present. Though in this case you need
    to use the class, not the mapped selectable, as the source of column attributes
    - so a warning is still issued.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了关于映射的selectables需要“别名”的古老断言 - 如果没有，映射器现在会自己创建别名。尽管在这种情况下，您需要使用类，而不是映射的可选择项，作为列属性的来源
    - 因此仍然会发出警告。
- en: '**[orm]**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: refined mapper._save_obj() which was unnecessarily calling __ne__() on scalar
    values during flush
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了mapper._save_obj()，在flush期间不必要地调用__ne__()来比较标量值。
- en: 'References: [#1015](https://www.sqlalchemy.org/trac/ticket/1015)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1015](https://www.sqlalchemy.org/trac/ticket/1015)
- en: '**[orm]**'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a feature to eager loading whereby subqueries set as column_property()
    with explicit label names (which is not necessary, btw) will have the label anonymized
    when the instance is part of the eager join, to prevent conflicts with a subquery
    or column of the same name on the parent object.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个特性，使得贪婪加载中设置为column_property()的子查询具有显式标签名称（顺便说一句，这不是必需的）时，当实例是贪婪连接的一部分时，标签会被匿名化，以防止与父对象上的同名子查询或列冲突。
- en: 'References: [#1019](https://www.sqlalchemy.org/trac/ticket/1019)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1019](https://www.sqlalchemy.org/trac/ticket/1019)
- en: '**[orm]**'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: set-based collections |=, -=, ^= and &= are stricter about their operands and
    only operate on sets, frozensets or subclasses of the collection type. Previously,
    they would accept any duck-typed set.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于集合的集合 |=、-=、^= 和 &= 对其操作数更加严格，只操作集合、frozensets 或集合类型的子类。以前，它们接受任何鸭式类型的集合。
- en: '**[orm]**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an example dynamic_dict/dynamic_dict.py, illustrating a simple way to
    place dictionary behavior on top of a dynamic_loader.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个示例dynamic_dict/dynamic_dict.py，演示了在dynamic_loader上放置字典行为的简单方法。
- en: sql
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added COLLATE support via the .collate(<collation>) expression operator and
    collate(<expr>, <collation>) sql function.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过.collate(<collation>)表达式运算符和collate(<expr>, <collation>) sql函数添加了COLLATE支持。
- en: '**[sql]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug with union() when applied to non-Table connected select statements
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用于非表连接的选择语句时union()的错误。
- en: '**[sql]**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: improved behavior of text() expressions when used as FROM clauses, such as select().select_from(text(“sometext”))
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为FROM子句使用时，text()表达式的行为得到了改进，例如select().select_from(text(“sometext”))
- en: 'References: [#1014](https://www.sqlalchemy.org/trac/ticket/1014)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1014](https://www.sqlalchemy.org/trac/ticket/1014)
- en: '**[sql]**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Column.copy() respects the value of “autoincrement”, fixes usage with Migrate
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()尊重“autoincrement”的值，修复了与Migrate一起使用的问题
- en: 'References: [#1021](https://www.sqlalchemy.org/trac/ticket/1021)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1021](https://www.sqlalchemy.org/trac/ticket/1021)
- en: mssql
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added “odbc_autotranslate” parameter to engine / dburi parameters. Any given
    string will be passed through to the ODBC connection string as:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“odbc_autotranslate”参数到引擎/dburi参数。任何给定的字符串都将传递到ODBC连接字符串中：
- en: ”AutoTranslate=%s” % odbc_autotranslate
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ”AutoTranslate=%s” % odbc_autotranslate
- en: 'References: [#1005](https://www.sqlalchemy.org/trac/ticket/1005)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1005](https://www.sqlalchemy.org/trac/ticket/1005)
- en: '**[mssql]**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added “odbc_options” parameter to engine / dburi parameters. The given string
    is simply appended to the SQLAlchemy-generated odbc connection string.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“odbc_options”参数到引擎/dburi参数。给定的字符串简单地附加到SQLAlchemy生成的ODBC连接字符串中。
- en: This should obviate the need of adding a myriad of ODBC options in the future.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该消除将来需要添加大量ODBC选项的需求。
- en: misc
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative] [extension]**'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Joined table inheritance mappers use a slightly relaxed function to create the
    “inherit condition” to the parent table, so that other foreign keys to not-yet-declared
    Table objects don’t trigger an error.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接表继承映射器使用了一个稍微放松的函数来创建“继承条件”到父表，以便对尚未声明的Table对象的其他外键不会触发错误。
- en: '**[declarative] [extension]**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: fixed reentrant mapper compile hang when a declared attribute is used within
    ForeignKey, ie. ForeignKey(MyOtherClass.someattribute)
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ForeignKey中使用已声明属性时的重入映射器编译挂起问题，即ForeignKey(MyOtherClass.someattribute)
- en: '**[engines]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Pool listeners can now be provided as a dictionary of callables or a (possibly
    partial) duck-type of PoolListener, your choice.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将池监听器提供为可调用的字典或（可能是部分的）PoolListener的鸭子类型，由您选择。
- en: '**[engines]**'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: added “rollback_returned” option to Pool which will disable the rollback() issued
    when connections are returned. This flag is only safe to use with a database which
    does not support transactions (i.e. MySQL/MyISAM).
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“rollback_returned”选项到Pool，它将禁用在连接返回时发出的rollback()。此标志仅在不支持事务的数据库（即MySQL/MyISAM）中使用是安全的。
- en: '**[ext]**'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: set-based association proxies |=, -=, ^= and &= are stricter about their operands
    and only operate on sets, frozensets or other association proxies. Previously,
    they would accept any duck-typed set.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于集合的关联代理 |=，-=，^=和&=对其操作数更为严格，仅对集合，frozenset或其他关联代理进行操作。以前，它们将接受任何鸭子类型的集合。
- en: '**[firebird]**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Handle the “SUBSTRING(:string FROM :start FOR :length)” builtin.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理“SUBSTRING(:string FROM :start FOR :length)”内置函数。
- en: 0.4.5
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.5
- en: 'Released: Fri Apr 04 2008'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年4月4日星期五
- en: orm
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'A small change in behavior to session.merge() - existing objects are checked
    for based on primary key attributes, not necessarily _instance_key. So the widely
    requested capability, that:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对session.merge()的行为进行了一点改变 - 现有对象是根据主键属性而不一定是_instance_key进行检查的。因此，广泛请求的功能是：
- en: x = MyObject(id=1) x = sess.merge(x)
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = MyObject(id=1) x = sess.merge(x)
- en: 'will in fact load MyObject with id #1 from the database if present, is now
    available. merge() still copies the state of the given object to the persistent
    one, so an example like the above would typically have copied “None” from all
    attributes of “x” onto the persistent copy. These can be reverted using session.expire(x).'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在，现在可以从数据库中加载具有id＃1的MyObject。merge()仍然会将给定对象的状态复制到持久对象上，因此像上面的示例通常会将“x”的所有属性的“None”复制到持久副本上。这些可以使用session.expire(x)来恢复。
- en: '**[orm]**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Also fixed behavior in merge() whereby collection elements present on the destination
    but not the merged collection were not being removed from the destination.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还修复了merge()中的行为，即目标上存在但未在合并集合中的集合元素未从目标中删除。
- en: '**[orm]**'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added a more aggressive check for “uncompiled mappers”, helps particularly with
    declarative layer
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“未编译映射器”的更积极检查，特别有助于声明式层。
- en: 'References: [#995](https://www.sqlalchemy.org/trac/ticket/995)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#995](https://www.sqlalchemy.org/trac/ticket/995)
- en: '**[orm]**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The methodology behind “primaryjoin”/”secondaryjoin” has been refactored. Behavior
    should be slightly more intelligent, primarily in terms of error messages which
    have been pared down to be more readable. In a slight number of scenarios it can
    better resolve the correct foreign key than before.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”/“secondaryjoin”背后的方法论已进行了重构。行为应该稍微更智能一些，主要表现在错误消息方面，已经简化为更易读的形式。在少量情况下，它可以更好地解析正确的外键。
- en: '**[orm]**'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added comparable_property(), adds query Comparator behavior to regular, unmanaged
    Python properties
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加 comparable_property()，将查询比较器行为添加到常规的、未受管理的 Python 属性中
- en: '**[orm] [‘machines’] [Company.employees.of_type(Engineer)]**'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [''machines''] [Company.employees.of_type(Engineer)]**'
- en: the functionality of query.with_polymorphic() has been added to mapper() as
    a configuration option.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询.with_polymorphic() 的功能已添加到 mapper() 中作为配置选项。
- en: 'It’s set via several forms:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它通过几种形式设置：
- en: with_polymorphic=’*’ with_polymorphic=[mappers] with_polymorphic=(‘*’, selectable)
    with_polymorphic=([mappers], selectable)
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_polymorphic=' * ' with_polymorphic=[mappers] with_polymorphic=(' * ', selectable)
    with_polymorphic=([mappers], selectable)
- en: This controls the default polymorphic loading strategy for inherited mappers.
    When a selectable is not given, outer joins are created for all joined-table inheriting
    mappers requested. Note that the auto-create of joins is not compatible with concrete
    table inheritance.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这控制了继承映射器的默认多态加载策略。当没有给定可选择项时，将为所有请求的联接表继承映射器创建外连接。请注意，联接的自动创建与具体表继承不兼容。
- en: The existing select_table flag on mapper() is now deprecated and is synonymous
    with with_polymorphic(‘*’, select_table). Note that the underlying “guts” of select_table
    have been completely removed and replaced with the newer, more flexible approach.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的 mapper() 上的 select_table 标志现在已弃用，并且与 with_polymorphic(' * ', select_table)
    同义。请注意，select_table 的底层“内涵”已被完全删除并替换为更新、更灵活的方法。
- en: 'The new approach also automatically allows eager loads to work for subclasses,
    if they are present, for example:'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新方法还自动允许对子类进行及早加载，如果它们存在的话，例如：
- en: '[PRE1]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: to load Company objects, their employees, and the ‘machines’ collection of employees
    who happen to be Engineers. A “with_polymorphic” Query option should be introduced
    soon as well which would allow per-Query control of with_polymorphic() on relations.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以加载 Company 对象、其员工和作为工程师的员工的‘machines’集合为例。很快还应该引入一个“with_polymorphic”查询选项，该选项将允许对关系上的
    with_polymorphic() 进行每个查询的控制。
- en: '**[orm]**'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'added two “experimental” features to Query, “experimental” in that their specific
    name/behavior is not carved in stone just yet: _values() and _from_self(). We’d
    like feedback on these.'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向查询中添加了两个“实验性”功能，“实验性”是因为它们的具体名称/行为还没有最终确定：_values() 和 _from_self()。我们希望得到关于这些功能的反馈。
- en: _values(*columns) is given a list of column expressions, and returns a new Query
    that only returns those columns. When evaluated, the return value is a list of
    tuples just like when using add_column() or add_entity(), the only difference
    is that “entity zero”, i.e. the mapped class, is not included in the results.
    This means it finally makes sense to use group_by() and having() on Query, which
    have been sitting around uselessly until now.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _values(*columns) 接收列表达式列表，并返回一个只返回这些列的新查询。在求值时，返回值是一个元组列表，就像使用 add_column()
    或 add_entity() 时一样，唯一的区别是“实体零”，即映射类，不包含在结果中。这意味着现在终于可以在 Query 上使用 group_by() 和
    having()，这些功能到目前为止一直没有用。
- en: A future change to this method may include that its ability to join, filter
    and allow other options not related to a “resultset” are removed, so the feedback
    we’re looking for is how people want to use _values()…i.e. at the very end, or
    do people prefer to continue generating after it’s called.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该方法的未来更改可能包括删除其加入、过滤和允许其他与“结果集”无关的选项的能力，因此我们寻求的反馈是人们希望如何使用 _values()……即在最后，还是人们更喜欢在调用后继续生成。
- en: _from_self() compiles the SELECT statement for the Query (minus any eager loaders),
    and returns a new Query that selects from that SELECT. So basically you can query
    from a Query without needing to extract the SELECT statement manually. This gives
    meaning to operations like query[3:5]._from_self().filter(some criterion). There’s
    not much controversial here except that you can quickly create highly nested queries
    that are less efficient, and we want feedback on the naming choice.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _from_self()编译Query的SELECT语句（减去任何急加载器），并返回一个从该SELECT选择的新Query。所以基本上你可以从一个Query中查询而不需要手动提取SELECT语句。这赋予了query[3:5]._from_self().filter(some
    criterion)之类的操作意义。这里没有太多争议，除了你可以快速创建效率较低的高度嵌套查询，我们希望对命名选择进行反馈。
- en: '**[orm]**'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() and query.group_by() will accept multiple arguments using *args
    (like select() already does).
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()和query.group_by()将接受多个参数使用*args（就像select()已经做的那样）。
- en: '**[orm]**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added some convenience descriptors to Query: query.statement returns the full
    SELECT construct, query.whereclause returns just the WHERE part of the SELECT
    construct.'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query添加了一些便利描述符：query.statement返回完整的SELECT结构，query.whereclause仅返回SELECT结构的WHERE部分。
- en: '**[orm]**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed/covered case when using a False/0 value as a polymorphic discriminator.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/覆盖了使用False/0值作为多态鉴别器时的情况。
- en: '**[orm]**'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which was preventing synonym() attributes from being used with inheritance
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止synonym()属性与继承一起使用的错误
- en: '**[orm]**'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed SQL function truncation of trailing underscores
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL函数截断尾随下划线的问题
- en: 'References: [#996](https://www.sqlalchemy.org/trac/ticket/996)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#996](https://www.sqlalchemy.org/trac/ticket/996)
- en: '**[orm]**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When attributes are expired on a pending instance, an error will not be raised
    when the “refresh” action is triggered and no result is found.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当挂起实例上的属性过期时，当触发“refresh”操作并且找不到结果时不会引发错误。
- en: '**[orm]**'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.execute can now find binds from metadata
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.execute现在可以从元数据中找到绑定
- en: '**[orm]**'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted the definition of “self-referential” to be any two mappers with a common
    parent (this affects whether or not aliased=True is required when joining with
    Query).
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“自引用”的定义，即任何具有共同父级的两个映射器（这会影响是否需要在与Query连接时需要aliased=True）。
- en: '**[orm]**'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Made some fixes to the “from_joinpoint” argument to query.join() so that if
    the previous join was aliased and this one isn’t, the join still happens successfully.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.join()中的“from_joinpoint”参数进行了一些修复，以便如果前一个连接被别名化而这个连接没有，连接仍然成功进行。
- en: '**[orm]**'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Assorted “cascade deletes” fixes:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种“级联删除”修复：
- en: Fixed “cascade delete” operation of dynamic relations, which had only been implemented
    for foreign-key nulling behavior in 0.4.2 and not actual cascading deletes
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了动态关系的“级联删除”操作，该操作仅在0.4.2中实现了外键空值行为，而不是实际级联删除
- en: Delete cascade without delete-orphan cascade on a many-to-one will not delete
    orphans which were disconnected from the parent before session.delete() is called
    on the parent (one-to-many already had this).
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多对一上没有delete-orphan级联的删除级联将不会删除在调用session.delete()之前从父级断开连接的孤立节点（一对多已经有了这个）。
- en: Delete cascade with delete-orphan will delete orphans whether or not it remains
    attached to its also-deleted parent.
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在删除级联与delete-orphan级联时，无论它是否仍附加到也已删除的父级，都将删除孤立节点。
- en: delete-orphan cascade is properly detected on relations that are present on
    superclasses when using inheritance.
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用继承时，可以正确检测到存在于超类上的关系上的delete-orphan级联。
- en: 'References: [#895](https://www.sqlalchemy.org/trac/ticket/895)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#895](https://www.sqlalchemy.org/trac/ticket/895)
- en: '**[orm]**'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed order_by calculation in Query to properly alias mapper-config’ed order_by
    when using select_from()
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用select_from()时，Query中正确别名映射器配置的order_by计算顺序。
- en: '**[orm]**'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Refactored the diffing logic that kicks in when replacing one collection with
    another into collections.bulk_replace, useful to anyone building multi-level collections.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了在用另一个集合替换一个集合时触发的差异逻辑为collections.bulk_replace，对于构建多级集合的任何人都很有用。
- en: '**[orm]**'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Cascade traversal algorithm converted from recursive to iterative to support
    deep object graphs.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将级联遍历算法从递归转换为迭代，以支持深层对象图。
- en: sql
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: schema-qualified tables now will place the schemaname ahead of the tablename
    in all column expressions as well as when generating column labels. This prevents
    cross- schema name collisions in all cases
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在模式限定的表中，现在将模式名称放在所有列表达式以及生成列标签时的表名之前。这在所有情况下都可以防止跨模式名称冲突
- en: 'References: [#999](https://www.sqlalchemy.org/trac/ticket/999)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#999](https://www.sqlalchemy.org/trac/ticket/999)
- en: '**[sql]**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: can now allow selects which correlate all FROM clauses and have no FROM themselves.
    These are typically used in a scalar context, i.e. SELECT x, (SELECT x WHERE y)
    FROM table. Requires explicit correlate() call.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以允许选择所有FROM子句相关联且自身没有FROM的查询。这些通常在标量上下文中使用，即SELECT x, (SELECT x WHERE y)
    FROM table。需要显式调用correlate()。
- en: '**[sql]**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: ’name’ is no longer a required constructor argument for Column(). It (and .key)
    may now be deferred until the column is added to a Table.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‘name’不再是Column()的必需构造参数。现在可以推迟直到列添加到表中。
- en: '**[sql]**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: like(), ilike(), contains(), startswith(), endswith() take an optional keyword
    argument “escape=<somestring>”, which is set as the escape character using the
    syntax “x LIKE y ESCAPE ‘<somestring>’”.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: like()，ilike()，contains()，startswith()，endswith()接受一个可选的关键字参数“escape=<somestring>”，使用语法“x
    LIKE y ESCAPE ‘<somestring>’”设置为转义字符。
- en: 'References: [#791](https://www.sqlalchemy.org/trac/ticket/791), [#993](https://www.sqlalchemy.org/trac/ticket/993)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#791](https://www.sqlalchemy.org/trac/ticket/791)，[#993](https://www.sqlalchemy.org/trac/ticket/993)
- en: '**[sql]**'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: random() is now a generic sql function and will compile to the database’s random
    implementation, if any.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: random()现在是一个通用的sql函数，并将编译为数据库的随机实现（如果有）。
- en: '**[sql]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: update().values() and insert().values() take keyword arguments.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update().values()和insert().values()接受关键字参数。
- en: '**[sql]**'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed an issue in select() regarding its generation of FROM clauses, in rare
    circumstances two clauses could be produced when one was intended to cancel out
    the other. Some ORM queries with lots of eager loads might have seen this symptom.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select()在生成FROM子句方面的问题，在罕见情况下，可能会产生两个子句，而本意是取消另一个。一些具有大量急加载的ORM查询可能会看到这种症状。
- en: '**[sql]**'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The case() function now also takes a dictionary as its whens parameter. It also
    interprets the “THEN” expressions as values by default, meaning case([(x==y, “foo”)])
    will interpret “foo” as a bound value, not a SQL expression. use text(expr) for
    literal SQL expressions in this case. For the criterion itself, these may be literal
    strings only if the “value” keyword is present, otherwise SA will force explicit
    usage of either text() or literal().
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: case()函数现在还将字典作为其whens参数。它还默认将“THEN”表达式解释为值，这意味着case([(x==y, “foo”)])将“foo”解释为绑定值，而不是SQL表达式。在这种情况下，对于标准本身，如果“value”关键字存在，这些可能仅为文字字符串，否则SA将强制使用text()或literal()。
- en: mysql
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The connection.info keys the dialect uses to cache server settings have changed
    and are now namespaced.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言用于缓存服务器设置的连接.info键已更改并现在已命名空间化。
- en: mssql
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Reflected tables will now automatically load other tables which are referenced
    by Foreign keys in the auto-loaded table,.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反映的表现在将自动加载其他被自动加载表中的外键引用的表。
- en: 'References: [#979](https://www.sqlalchemy.org/trac/ticket/979)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#979](https://www.sqlalchemy.org/trac/ticket/979)
- en: '**[mssql]**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added executemany check to skip identity fetch,.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了executemany检查以跳过标识获取。
- en: 'References: [#916](https://www.sqlalchemy.org/trac/ticket/916)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#916](https://www.sqlalchemy.org/trac/ticket/916)
- en: '**[mssql]**'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added stubs for small date type.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了小日期类型的存根。
- en: 'References: [#884](https://www.sqlalchemy.org/trac/ticket/884)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#884](https://www.sqlalchemy.org/trac/ticket/884)
- en: '**[mssql]**'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added a new ‘driver’ keyword parameter for the pyodbc dialect. Will substitute
    into the ODBC connection string if given, defaults to ‘SQL Server’.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pyodbc方言添加了一个新的‘driver’关键字参数。如果给定，将替换为ODBC连接字符串，默认为‘SQL Server’。
- en: '**[mssql]**'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added a new ‘max_identifier_length’ keyword parameter for the pyodbc dialect.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pyodbc方言添加了一个新的‘max_identifier_length’关键字参数。
- en: '**[mssql]**'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Improvements to pyodbc + Unix. If you couldn’t get that combination to work
    before, please try again.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对pyodbc + Unix的改进。如果以前无法使该组合工作，请再试一次。
- en: oracle
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The “owner” keyword on Table is now deprecated, and is exactly synonymous with
    the “schema” keyword. Tables can now be reflected with alternate “owner” attributes,
    explicitly stated on the Table object or not using “schema”.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table上的“owner”关键字现在已被弃用，并且与“schema”关键字完全同义。现在可以使用替代的“owner”属性反映表，明确在Table对象上声明或不使用“schema”。
- en: '**[oracle]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: All of the “magic” searching for synonyms, DBLINKs etc. during table reflection
    are disabled by default unless you specify “oracle_resolve_synonyms=True” on the
    Table object. Resolving synonyms necessarily leads to some messy guessing which
    we’d rather leave off by default. When the flag is set, tables and related tables
    will be resolved against synonyms in all cases, meaning if a synonym exists for
    a particular table, reflection will use it when reflecting related tables. This
    is stickier behavior than before which is why it’s off by default.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表反射期间，所有“魔术”搜索同义词、DBLINK 等的功能默认情况下都已禁用，除非在 Table 对象上指定了 “oracle_resolve_synonyms=True”。解析同义词必然会导致一些混乱的猜测，我们宁愿默认情况下将其关闭。当设置了标志时，表和相关表将在所有情况下针对同义词进行解析，这意味着如果特定表存在同义词，则在反射相关表时将使用它。这比以前的行为更粘性，这就是为什么默认情况下关闭的原因。
- en: misc
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative] [extension]**'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: 'The “synonym” function is now directly usable with “declarative”. Pass in the
    decorated property using the “descriptor” keyword argument, e.g.: somekey = synonym(‘_somekey’,
    descriptor=property(g, s))'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “synonym” 函数现在可以直接与 “declarative” 一起使用。通过使用“descriptor” 关键字参数传入装饰的属性，例如：`somekey
    = synonym('_somekey', descriptor=property(g, s))`。
- en: '**[declarative] [extension]**'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: 'The “deferred” function is usable with “declarative”. Simplest usage is to
    declare deferred and Column together, e.g.: data = deferred(Column(Text))'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “deferred” 函数可以与 “declarative” 一起使用。最简单的用法是一起声明 `deferred` 和 `Column`，例如：`data
    = deferred(Column(Text))`
- en: '**[declarative] [extension]**'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: Declarative also gained @synonym_for(…) and @comparable_using(…), front-ends
    for synonym and comparable_property.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 还增加了 `@synonym_for(…)` 和 `@comparable_using(…)`，作为 `synonym` 和 `comparable_property`
    的前端。
- en: '**[declarative] [extension]**'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: Improvements to mapper compilation when using declarative; already-compiled
    mappers will still trigger compiles of other uncompiled mappers when used
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 declarative 时，对映射器编译进行了改进；已经编译的映射器在使用时仍会触发其他未编译的映射器的编译。
- en: 'References: [#995](https://www.sqlalchemy.org/trac/ticket/995)'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#995](https://www.sqlalchemy.org/trac/ticket/995)
- en: '**[declarative] [extension]**'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: Declarative will complete setup for Columns lacking names, allows a more DRY
    syntax.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 将为缺少名称的列完成设置，允许更干燥的语法。
- en: 'class Foo(Base):'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`class Foo(Base):`'
- en: ''
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: __tablename__ = ‘foos’ id = Column(Integer, primary_key=True)
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`__tablename__ = ''foos'' id = Column(Integer, primary_key=True)`'
- en: '**[declarative] [extension]**'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: inheritance in declarative can be disabled when sending “inherits=None” to __mapper_args__.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 declarative 中，可以通过将 “inherits=None” 发送到 `__mapper_args__` 来禁用继承。
- en: '**[declarative] [extension]**'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: declarative_base() takes optional kwarg “mapper”, which is any callable/class/method
    that produces a mapper, such as declarative_base(mapper=scopedsession.mapper).
    This property can also be set on individual declarative classes using the “__mapper_cls__”
    property.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`declarative_base()` 接受可选的关键字参数“mapper”，这是任何可调用/类/方法，用于生成映射器，例如 `declarative_base(mapper=scopedsession.mapper)`。这个属性也可以在单独的声明类中使用“__mapper_cls__”属性进行设置。'
- en: '**[postgres]**'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Got PG server side cursors back into shape, added fixed unit tests as part of
    the default test suite. Added better uniqueness to the cursor ID
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PG 服务器端游标的问题，将固定单元测试作为默认测试套件的一部分。为游标 ID 添加了更好的唯一性。
- en: 'References: [#1001](https://www.sqlalchemy.org/trac/ticket/1001)'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1001](https://www.sqlalchemy.org/trac/ticket/1001)
- en: 0.4.4
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.4
- en: 'Released: Wed Mar 12 2008'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年3月12日（星期三）
- en: orm
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: any(), has(), contains(), ~contains(), attribute level == and != now work properly
    with self-referential relations - the clause inside the EXISTS is aliased on the
    “remote” side to distinguish it from the parent table. This applies to single
    table self-referential as well as inheritance-based self-referential.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`any()`, `has()`, `contains()`, `~contains()`, 属性级别的 `==` 和 `!=` 现在可以正确地与自引用关系一起使用
    - 在 EXISTS 内部的子句在“remote”一侧被别名化，以区分它与父表。这适用于单表自引用以及基于继承的自引用。'
- en: '**[orm]**'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired behavior of == and != operators at the relation() level when compared
    against NULL for one-to-one relations
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与 NULL 比较一对一关系时，关系() 级别的 == 和 != 运算符的行为。
- en: 'References: [#985](https://www.sqlalchemy.org/trac/ticket/985)'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#985](https://www.sqlalchemy.org/trac/ticket/985)
- en: '**[orm]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby session.expire() attributes were not loading on an polymorphically-mapped
    instance mapped by a select_table mapper.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了一个错误，即当由 select_table 映射的多态映射实例未加载 session.expire() 属性时。 '
- en: '**[orm]**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added query.with_polymorphic() - specifies a list of classes which descend from
    the base class, which will be added to the FROM clause of the query. Allows subclasses
    to be used within filter() criterion as well as eagerly loads the attributes of
    those subclasses.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了query.with_polymorphic() - 指定了从基类继承的类列表，这些类将被添加到查询的FROM子句中。允许在过滤器()条件中使用子类，并且急切加载这些子类的属性。
- en: '**[orm]**'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Your cries have been heard: removing a pending item from an attribute or collection
    with delete-orphan expunges the item from the session; no FlushError is raised.
    Note that if you session.save()’ed the pending item explicitly, the attribute/collection
    removal still knocks it out.'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的呼声已经被听到：使用delete-orphan从属性或集合中删除挂起的项目会将该项目从会话中删除；不会引发FlushError。请注意，如果您显式地session.save()了挂起的项目，则属性/集合的移除仍会将其排除。
- en: '**[orm]**'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() and session.expire() raise an error when called on instances
    which are not persistent within the session
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在会话中调用session.refresh()和session.expire()时，对于不在会话中持久存在的实例会引发错误。
- en: '**[orm]**'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed potential generative bug when the same Query was used to generate multiple
    Query objects using join().
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用join()生成多个Query对象时，可能会出现生成性bug。
- en: '**[orm]**'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which was introduced in 0.4.3, whereby loading an already-persistent
    instance mapped with joined table inheritance would trigger a useless “secondary”
    load from its joined table, when using the default “select” polymorphic_fetch.
    This was due to attributes being marked as expired during its first load and not
    getting unmarked from the previous “secondary” load. Attributes are now unexpired
    based on presence in __dict__ after any load or commit operation succeeds.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.4.3中引入的bug，当使用默认的“select” polymorphic_fetch时，加载已持久化的实例映射到连接表继承时，会触发一个无用的从其连接表加载的“次要”加载。这是由于属性在第一次加载时被标记为过期，并且在上一个“次要”加载中未被标记为未过期。属性现在基于任何加载或提交操作成功后在__dict__中的存在而被标记为未过期。
- en: '**[orm]**'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Deprecated Query methods apply_sum(), apply_max(), apply_min(), apply_avg().
    Better methodologies are coming….
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃的Query方法apply_sum()、apply_max()、apply_min()、apply_avg()。更好的方法学正在到来……。
- en: '**[orm]**'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() can accept a callable for its first argument, which returns the class
    to be related. This is in place to assist declarative packages to define relations
    without classes yet being in place.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()可以接受一个可调用对象作为其第一个参数，该可调用对象返回要相关联的类。这是为了帮助声明式包在类尚未就位时定义关系。
- en: '**[orm]**'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added a new “higher level” operator called “of_type()”: used in join() as well
    as with any() and has(), qualifies the subclass which will be used in filter criterion,
    e.g.:'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“更高级别”的操作符称为“of_type()”：在join()中以及与any()和has()一起使用时，用于限定将在过滤条件中使用的子类，例如：
- en: query.filter(Company.employees.of_type(Engineer).
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.filter(Company.employees.of_type(Engineer).
- en: ''
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: any(Engineer.name==’foo’))
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: any(Engineer.name==’foo’))
- en: ''
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: or
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 或
- en: ''
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: query.join(Company.employees.of_type(Engineer)).
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.join(Company.employees.of_type(Engineer)).
- en: ''
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: filter(Engineer.name==’foo’)
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: filter(Engineer.name==’foo’)
- en: '**[orm]**'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Preventive code against a potential lost-reference bug in flush().
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对flush()中潜在的丢失引用错误的预防性代码。
- en: '**[orm]**'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Expressions used in filter(), filter_by() and others, when they make usage of
    a clause generated from a relation using the identity of a child object (e.g.,
    filter(Parent.child==<somechild>)), evaluate the actual primary key value of <somechild>
    at execution time so that the autoflush step of the Query can complete, thereby
    populating the PK value of <somechild> in the case that <somechild> was pending.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在filter()、filter_by()等中使用的表达式，当它们使用从关系生成的子对象的标识生成的子句时（例如，filter(Parent.child==<somechild>))，在执行时评估<somechild>的实际主键值，以便Query的自动刷新步骤可以完成，从而在<somechild>是挂起的情况下填充<somechild>的PK值。
- en: '**[orm]**'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: setting the relation()-level order by to a column in the many-to-many “secondary”
    table will now work with eager loading, previously the “order by” wasn’t aliased
    against the secondary table’s alias.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将关系级别的order by设置为“secondary”表中的列现在可以与急切加载一起使用，以前的“order by”不会对次要表的别名进行别名处理。
- en: '**[orm]**'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Synonyms riding on top of existing descriptors are now full proxies to those
    descriptors.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，基于现有描述符的同义词现在是这些描述符的完全代理。
- en: sql
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Can again create aliases of selects against textual FROM clauses.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以再次对文本FROM子句创建选择的别名。
- en: 'References: [#975](https://www.sqlalchemy.org/trac/ticket/975)'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#975](https://www.sqlalchemy.org/trac/ticket/975)
- en: '**[sql]**'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The value of a bindparam() can be a callable, in which case it’s evaluated at
    statement execution time to get the value.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam() 的值可以是可调用的，这样在语句执行时会被评估以获取值。
- en: '**[sql]**'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added exception wrapping/reconnect support to result set fetching. Reconnect
    works for those databases that raise a catchable data error during results (i.e.
    doesn’t work on MySQL)
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对结果集获取的异常包装/重新连接支持。重新连接适用于那些在结果集期间引发可捕获数据错误的数据库（即在 MySQL 上不起作用）。
- en: 'References: [#978](https://www.sqlalchemy.org/trac/ticket/978)'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#978](https://www.sqlalchemy.org/trac/ticket/978)
- en: '**[sql]**'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Implemented two-phase API for “threadlocal” engine, via engine.begin_twophase(),
    engine.prepare()
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了“threadlocal”引擎的两阶段 API，通过 engine.begin_twophase()，engine.prepare()
- en: 'References: [#936](https://www.sqlalchemy.org/trac/ticket/936)'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#936](https://www.sqlalchemy.org/trac/ticket/936)
- en: '**[sql]**'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed bug which was preventing UNIONS from being cloneable.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 UNION 可克隆的错误。
- en: 'References: [#986](https://www.sqlalchemy.org/trac/ticket/986)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#986](https://www.sqlalchemy.org/trac/ticket/986)
- en: '**[sql]**'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added “bind” keyword argument to insert(), update(), delete() and DDL(). The
    .bind property is now assignable on those statements as well as on select().
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 insert()、update()、delete() 和 DDL() 中添加了“bind”关键字参数。现在这些语句上的 .bind 属性也可以赋值，就像在
    select() 上一样。
- en: '**[sql]**'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Insert statements can now be compiled with extra “prefix” words between INSERT
    and INTO, for vendor extensions like MySQL’s INSERT IGNORE INTO table.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在 INSERT 和 INTO 之间编译带有额外“前缀”单词的插入语句，用于供应商扩展，如 MySQL 的 INSERT IGNORE INTO
    table。
- en: extensions
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: a new super-small “declarative” extension has been added, which allows Table
    and mapper() configuration to take place inline underneath a class declaration.
    This extension differs from ActiveMapper and Elixir in that it does not redefine
    any SQLAlchemy semantics at all; literal Column, Table and relation() constructs
    are used to define the class behavior and table definition.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的超小型“声明式”扩展，允许在类声明下方内联进行 Table 和 mapper() 配置。此扩展与 ActiveMapper 和 Elixir
    不同之处在于它根本不重新定义任何 SQLAlchemy 语义；字面 Column、Table 和 relation() 构造用于定义类行为和表定义。
- en: misc
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Invalid SQLite connection URLs now raise an error.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无效的 SQLite 连接 URL 现在会引发错误。
- en: '**[dialects]**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: postgres TIMESTAMP renders correctly
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres TIMESTAMP 现在可以正确渲染
- en: 'References: [#981](https://www.sqlalchemy.org/trac/ticket/981)'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#981](https://www.sqlalchemy.org/trac/ticket/981)
- en: '**[dialects]**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: postgres PGArray is a “mutable” type by default; when used with the ORM, mutable-style
    equality/ copy-on-write techniques are used to test for changes.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres PGArray 默认是“可变”类型；在与 ORM 一起使用时，使用可变风格的相等性/写时复制技术来测试更改。
- en: 0.4.3
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.3
- en: 'Released: Thu Feb 14 2008'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Feb 14 2008
- en: general
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Fixed a variety of hidden and some not-so-hidden compatibility issues for Python
    2.3, thanks to new support for running the full test suite on 2.3.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了许多隐藏的以及一些不那么隐藏的兼容性问题，感谢对 Python 2.3 的新支持，使得完整测试套件可以在 2.3 上运行。
- en: '**[general]**'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Warnings are now issued as type exceptions.SAWarning.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在警告被作为类型异常.SAWarning发出。
- en: orm
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Every Session.begin() must now be accompanied by a corresponding commit() or
    rollback() unless the session is closed with Session.close(). This also includes
    the begin() which is implicit to a session created with transactional=True. The
    biggest change introduced here is that when a Session created with transactional=True
    raises an exception during flush(), you must call Session.rollback() or Session.close()
    in order for that Session to continue after an exception.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个 Session.begin() 现在必须伴随相应的 commit() 或 rollback()，除非会话使用 Session.close() 关闭。这也包括使用
    transactional=True 创建的会话隐式的 begin()。这里引入的最大变化是，当使用 transactional=True 创建的会话在 flush()
    期间引发异常时，您必须调用 Session.rollback() 或 Session.close() 以便该会话在异常后继续。
- en: '**[orm]**'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed merge() collection-doubling bug when merging transient entities with backref’ed
    collections.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在合并瞬时实体与带有反向引用集合的实体时出现的 merge() 集合加倍错误。
- en: 'References: [#961](https://www.sqlalchemy.org/trac/ticket/961)'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#961](https://www.sqlalchemy.org/trac/ticket/961)
- en: '**[orm]**'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: merge(dont_load=True) does not accept transient entities, this is in continuation
    with the fact that merge(dont_load=True) does not accept any “dirty” objects either.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge(dont_load=True) 不接受瞬时实体，这与 merge(dont_load=True) 不接受任何“脏”对象的事实相一致。
- en: '**[orm]**'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Added standalone “query” class attribute generated by a scoped_session. This
    provides MyClass.query without using Session.mapper. Use via:'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了由scoped_session生成的独立“query”类属性。这提供了MyClass.query，而不使用Session.mapper。通过以下方式使用：
- en: MyClass.query = Session.query_property()
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MyClass.query = Session.query_property()
- en: '**[orm]**'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The proper error message is raised when trying to access expired instance attributes
    with no session present
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试在没有会话的情况下访问过期实例属性时，会引发适当的错误消息
- en: '**[orm]**'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dynamic_loader() / lazy=”dynamic” now accepts and uses the order_by parameter
    in the same way in which it works with relation().
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dynamic_loader() / lazy=”dynamic”现在接受并使用order_by参数，方式与relation()中的工作方式相同。
- en: '**[orm]**'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added expire_all() method to Session. Calls expire() for all persistent instances.
    This is handy in conjunction with…
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了expire_all()方法到Session。为所有持久实例调用expire()。这在与...一起使用时很方便。
- en: '**[orm]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Instances which have been partially or fully expired will have their expired
    attributes populated during a regular Query operation which affects those objects,
    preventing a needless second SQL statement for each instance.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分或完全过期的实例在影响这些对象的常规查询操作期间将其过期属性填充，从而防止每个实例需要不必要的第二个SQL语句。
- en: '**[orm]**'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Dynamic relations, when referenced, create a strong reference to the parent
    object so that the query still has a parent to call against even if the parent
    is only created (and otherwise dereferenced) within the scope of a single expression.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动态关系在引用时会创建对父对象的强引用，以便查询仍然有一个父对象可以调用，即使父对象只在单个表达式的范围内创建（并且在其他情况下被取消引用）。
- en: 'References: [#938](https://www.sqlalchemy.org/trac/ticket/938)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#938](https://www.sqlalchemy.org/trac/ticket/938)
- en: '**[orm]**'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a mapper() flag “eager_defaults”. When set to True, defaults that are
    generated during an INSERT or UPDATE operation are post-fetched immediately, instead
    of being deferred until later. This mimics the old 0.3 behavior.
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个mapper()标志“eager_defaults”。当设置为True时，在INSERT或UPDATE操作期间生成的默认值会立即后获取，而不是推迟到以后。这模仿了旧的0.3行为。
- en: '**[orm]**'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'query.join() can now accept class-mapped attributes as arguments. These can
    be used in place or in any combination with strings. In particular this allows
    construction of joins to subclasses on a polymorphic relation, i.e.:'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()现在可以接受类映射的属性作为参数。这些可以用于替代或与字符串任意组合。特别是这允许在多态关系的子类上构建连接，即：
- en: query(Company).join([‘employees’, Engineer.name])
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query(Company).join([‘employees’, Engineer.name])
- en: '**[orm] [(‘employees’] [Engineer.name] [people.join(engineer))]**'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [(‘employees’] [Engineer.name] [people.join(engineer))]**'
- en: 'query.join() can also accept tuples of attribute name/some selectable as arguments.
    This allows construction of joins *from* subclasses of a polymorphic relation,
    i.e.:'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()还可以接受属性名称/某些可选择的元组作为参数。这允许构建从多态关系的子类连接的连接，即：
- en: query(Company).join(
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query(Company).join(
- en: ''
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: )
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: )
- en: '**[orm]**'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: General improvements to the behavior of join() in conjunction with polymorphic
    mappers, i.e. joining from/to polymorphic mappers and properly applying aliases.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与多态映射器一起使用join()的行为的一般改进，即从/到多态映射器的连接，并正确应用别名。
- en: '**[orm]**'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed/improved behavior when a mapper determines the natural “primary key” of
    a mapped join, it will more effectively reduce columns which are equivalent via
    foreign key relation. This affects how many arguments need to be sent to query.get(),
    among other things.
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当映射器确定映射连接的自然“主键”时，修复/改进了行为，它将更有效地减少通过外键关系等效的列。这会影响需要发送给query.get()的参数数量，等等。
- en: 'References: [#933](https://www.sqlalchemy.org/trac/ticket/933)'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#933](https://www.sqlalchemy.org/trac/ticket/933)
- en: '**[orm]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The lazy loader can now handle a join condition where the “bound” column (i.e.
    the one that gets the parent id sent as a bind parameter) appears more than once
    in the join condition. Specifically this allows the common task of a relation()
    which contains a parent-correlated subquery, such as “select only the most recent
    child item”.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 惰性加载器现在可以处理连接条件，其中“绑定”列（即将父id作为绑定参数发送的列）在连接条件中出现多次。具体来说，这允许包含父相关子查询的relation()的常见任务，例如“仅选择最近的子项”。
- en: 'References: [#946](https://www.sqlalchemy.org/trac/ticket/946)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#946](https://www.sqlalchemy.org/trac/ticket/946)
- en: '**[orm]**'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in polymorphic inheritance where an incorrect exception is raised
    when base polymorphic_on column does not correspond to any columns within the
    local selectable of an inheriting mapper more than one level deep
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态继承中的一个 bug，当基本的多态_on 列不对应于继承映射器的本地可选择的任何列时，引发了不正确的异常，超过一层。
- en: '**[orm]**'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in polymorphic inheritance which made it difficult to set a working
    “order_by” on a polymorphic mapper.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态继承中的一个 bug，这使得很难在多态映射器上设置一个工作的 “order_by”。
- en: '**[orm]**'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a rather expensive call in Query that was slowing down polymorphic queries.
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中的一个相当昂贵的调用，该调用减慢了多态查询的速度。
- en: '**[orm]**'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”Passive defaults” and other “inline” defaults can now be loaded during a flush()
    call if needed; in particular, this allows constructing relations() where a foreign
    key column references a server-side-generated, non-primary-key column.
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，”被动默认值“ 和其他 ”内联“ 默认值现在可以在 flush() 调用时加载；特别是，这允许构建关系()，其中外键列引用服务器端生成的非主键列。
- en: 'References: [#954](https://www.sqlalchemy.org/trac/ticket/954)'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#954](https://www.sqlalchemy.org/trac/ticket/954)
- en: '**[orm]**'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Additional Session transaction fixes/changes:'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他 Session 事务修复/更改：
- en: 'Fixed bug with session transaction management: parent transactions weren’t
    started on the connection when adding a connection to a nested transaction.'
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了会话事务管理中的一个 bug：当向嵌套事务添加连接时，父事务没有在连接上启动。
- en: session.transaction now always refers to the innermost active transaction, even
    when commit/rollback are called directly on the session transaction object.
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 `session.transaction` 总是指向最内层的活动事务，即使在会话事务对象上直接调用 commit/rollback。
- en: Two-phase transactions can now be prepared.
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两阶段事务现在可以被准备。
- en: When preparing a two-phase transaction fails on one connection, all the connections
    are rolled back.
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在一个连接上准备两阶段事务失败时，所有的连接都会回滚。
- en: session.close() didn’t close all transactions when nested transactions were
    used.
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用嵌套事务时，`session.close()` 没有关闭所有事务。
- en: rollback() previously erroneously set the current transaction directly to the
    parent of the transaction that could be rolled back to. Now it rolls back the
    next transaction up that can handle it, but sets the current transaction to its
    parent and inactivates the transactions in between. Inactive transactions can
    only be rolled back or closed, any other call results in an error.
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: rollback() 以前错误地将当前事务直接设置为可以回滚的事务的父事务。现在它将回滚到能够处理它的下一个事务，但将当前事务设置为其父事务，并且使之间的事务无效。无效的事务只能回滚或关闭，任何其他调用都会导致错误。
- en: autoflush for commit() wasn’t flushing for simple subtransactions.
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `commit()`，autoflush 没有对简单的子事务进行刷新。
- en: unitofwork flush didn’t close the failed transaction when the session was not
    in a transaction and committing the transaction failed.
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unitofwork flush` 在会话不在事务中且提交事务失败时，没有关闭失败的事务。'
- en: '**[orm]**'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Miscellaneous tickets:'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 杂项票据：
- en: 'References: [#940](https://www.sqlalchemy.org/trac/ticket/940), [#964](https://www.sqlalchemy.org/trac/ticket/964)'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#940](https://www.sqlalchemy.org/trac/ticket/940), [#964](https://www.sqlalchemy.org/trac/ticket/964)
- en: sql
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “schema.DDL”, an executable free-form DDL statement. DDLs can be executed
    in isolation or attached to Table or MetaData instances and executed automatically
    when those objects are created and/or dropped.
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 “schema.DDL”，一个可执行的自由格式 DDL 语句。DDL 可以独立执行，也可以附加到 Table 或 MetaData 实例上，并在创建和/或删除这些对象时自动执行。
- en: '**[sql]**'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table columns and constraints can be overridden on a an existing table (such
    as a table that was already reflected) using the ‘useexisting=True’ flag, which
    now takes into account the arguments passed along with it.
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 ‘useexisting=True’ 标志覆盖表列和约束，该标志现在考虑与其一起传递的参数。
- en: '**[sql]**'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a callable-based DDL events interface, adds hooks before and after Tables
    and MetaData create and drop.
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了基于可调用的 DDL 事件接口，添加了在创建和删除 Tables 和 MetaData 之前和之后的钩子。
- en: '**[sql]**'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added generative where(<criterion>) method to delete() and update() constructs
    which return a new object with criterion joined to existing criterion via AND,
    just like select().where().
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 `where(<criterion>)` 方法到 `delete()` 和 `update()` 构造函数中，该方法返回一个新对象，其中的条件与现有条件通过
    AND 连接，就像 `select().where()` 一样。
- en: '**[sql]**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “ilike()” operator to column operations. Compiles to ILIKE on postgres,
    lower(x) LIKE lower(y) on all others.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向列操作添加了 “ilike()” 操作符。在 postgres 上编译为 ILIKE，在其他所有地方为 lower(x) LIKE lower(y)。
- en: 'References: [#727](https://www.sqlalchemy.org/trac/ticket/727)'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#727](https://www.sqlalchemy.org/trac/ticket/727)
- en: '**[sql]**'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “now()” as a generic function; on SQLite, Oracle and MSSQL compiles as
    “CURRENT_TIMESTAMP”; “now()” on all others.
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“now()”作为通用函数；在SQLite、Oracle和MSSQL上编译为“CURRENT_TIMESTAMP”；在其他所有情况下为“now()”。
- en: 'References: [#943](https://www.sqlalchemy.org/trac/ticket/943)'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#943](https://www.sqlalchemy.org/trac/ticket/943)
- en: '**[sql]**'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The startswith(), endswith(), and contains() operators now concatenate the wildcard
    operator with the given operand in SQL, i.e. “’%’ || <bindparam>” in all cases,
    accept text(‘something’) operands properly
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: startswith()、endswith()和contains()运算符现在在SQL中将通配符运算符与给定操作数连接起来，即在所有情况下为“’%’ ||
    <bindparam>”，正确接受text(‘something’)操作数
- en: 'References: [#962](https://www.sqlalchemy.org/trac/ticket/962)'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#962](https://www.sqlalchemy.org/trac/ticket/962)
- en: '**[sql]**'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: cast() accepts text(‘something’) and other non-literal operands properly
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cast()正确接受text(‘something’)和其他非文字操作数
- en: 'References: [#962](https://www.sqlalchemy.org/trac/ticket/962)'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#962](https://www.sqlalchemy.org/trac/ticket/962)
- en: '**[sql]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug in result proxy where anonymously generated column labels would not
    be accessible using their straight string name
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了结果代理中的错误，匿名生成的列标签将无法使用其直接字符串名称访问
- en: '**[sql]**'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Deferrable constraints can now be defined.
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以定义可延迟的约束。
- en: '**[sql]**'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “autocommit=True” keyword argument to select() and text(), as well as
    generative autocommit() method on select(); for statements which modify the database
    through some user-defined means other than the usual INSERT/UPDATE/ DELETE etc.
    This flag will enable “autocommit” behavior during execution if no transaction
    is in progress.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()和text()中添加了“autocommit=True”关键字参数，以及select()上的生成autocommit()方法；对于通过某些用户定义的方式修改数据库的语句，而不是通常的INSERT/UPDATE/DELETE等。如果没有进行中的事务，则此标志将在执行期间启用“autocommit”行为。
- en: 'References: [#915](https://www.sqlalchemy.org/trac/ticket/915)'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#915](https://www.sqlalchemy.org/trac/ticket/915)
- en: '**[sql]**'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The ‘.c.’ attribute on a selectable now gets an entry for every column expression
    in its columns clause. Previously, “unnamed” columns like functions and CASE statements
    weren’t getting put there. Now they will, using their full string representation
    if no ‘name’ is available.
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选择对象上的‘.c.’属性现在为其列子句中的每个列表达式添加一个条目。以前，“未命名”列如函数和CASE语句没有被放在那里。现在它们将被放在那里，如果没有‘name’可用，则使用它们的完整字符串表示。
- en: '**[sql]**'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: a CompositeSelect, i.e. any union(), union_all(), intersect(), etc. now asserts
    that each selectable contains the same number of columns. This conforms to the
    corresponding SQL requirement.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CompositeSelect，即任何union()、union_all()、intersect()等现在断言每个可选择对象包含相同数量的列。这符合相应的SQL要求。
- en: '**[sql]**'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The anonymous ‘label’ generated for otherwise unlabeled functions and expressions
    now propagates outwards at compile time for expressions like select([select([func.foo()])]).
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为否则未标记的函数和表达式生成的匿名‘label’现在在编译时向外传播，例如select([select([func.foo()])])的表达式。
- en: '**[sql]**'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Building on the above ideas, CompositeSelects now build up their “.c.” collection
    based on the names present in the first selectable only; corresponding_column()
    now works fully for all embedded selectables.
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述思想的基础上，CompositeSelects现在根据第一个可选择对象中存在的名称构建其“.c.”集合；corresponding_column()现在对所有嵌入式可选择对象完全有效。
- en: '**[sql]**'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Oracle and others properly encode SQL used for defaults like sequences, etc.,
    even if no unicode idents are used since identifier preparer may return a cached
    unicode identifier.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle和其他数据库现在正确编码用于序列等默认值的SQL，即使没有使用unicode标识符，因为标识符准备器可能返回缓存的unicode标识符。
- en: '**[sql]**'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column and clause comparisons to datetime objects on the left hand side of the
    expression now work (d < table.c.col). (datetimes on the RHS have always worked,
    the LHS exception is a quirk of the datetime implementation.)
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表和子句与表达式左侧的datetime对象现在可以比较（d < table.c.col）。（右侧的datetimes一直有效，左侧的异常是datetime实现的怪癖。）
- en: misc
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Better support for schemas in SQLite (linked in by ATTACH DATABASE … AS name).
    In some cases in the past, schema names were omitted from generated SQL for SQLite.
    This is no longer the case.
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite中对模式的更好支持（通过ATTACH DATABASE … AS name链接）。在过去的一些情况下，SQLite生成的SQL中省略了模式名称。���在不再这样。
- en: '**[dialects]**'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: table_names on SQLite now picks up temporary tables as well.
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite上的table_names现在也会选择临时表。
- en: '**[dialects]**'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Auto-detect an unspecified MySQL ANSI_QUOTES mode during reflection operations,
    support for changing the mode midstream. Manual mode setting is still required
    if no reflection is used.
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射操作期间自动检测未指定的 MySQL ANSI_QUOTES 模式，支持在中间更改模式。如果不使用反射，则仍然需要手动设置模式。
- en: '**[dialects]**'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Fixed reflection of TIME columns on SQLite.
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 上 TIME 列的反射。
- en: '**[dialects]**'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Finally added PGMacAddr type to postgres
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终将 PGMacAddr 类型添加到 postgres 中
- en: 'References: [#580](https://www.sqlalchemy.org/trac/ticket/580)'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#580](https://www.sqlalchemy.org/trac/ticket/580)
- en: '**[dialects]**'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Reflect the sequence associated to a PK field (typically with a BEFORE INSERT
    trigger) under Firebird
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Firebird 下反映与 PK 字段关联的序列（通常具有 BEFORE INSERT 触发器）
- en: '**[dialects]**'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Oracle assembles the correct columns in the result set column mapping when generating
    a LIMIT/OFFSET subquery, allows columns to map properly to result sets even if
    long-name truncation kicks in
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生成 LIMIT/OFFSET 子查询时，Oracle 组装结果集列映射的正确列，即使长名称截断也允许列正确映射到结果集
- en: 'References: [#941](https://www.sqlalchemy.org/trac/ticket/941)'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#941](https://www.sqlalchemy.org/trac/ticket/941)
- en: '**[dialects]**'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL now includes EXEC in the _is_select regexp, which should allow row-returning
    stored procedures to be used.
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 现在在 _is_select 正则表达式中包含 EXEC，这应该允许使用返回行的存储过程。
- en: '**[dialects]**'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL now includes an experimental implementation of LIMIT/OFFSET using the
    ANSI SQL row_number() function, so it requires MSSQL-2005 or higher. To enable
    the feature, add “has_window_funcs” to the keyword arguments for connect, or add
    “?has_window_funcs=1” to your dburi query arguments.
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 现在包含对 ANSI SQL row_number() 函数的 LIMIT/OFFSET 的实验性实现，因此需要 MSSQL-2005 或更高版本。要启用此功能，请将
    “has_window_funcs” 添加到 connect 的关键字参数中，或将 “?has_window_funcs=1” 添加到您的 dburi 查询参数中。
- en: '**[ext]**'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Changed ext.activemapper to use a non-transactional session for the objectstore.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改 ext.activemapper 以使用非事务性会话进行对象存储。
- en: '**[ext]**'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Fixed output order of “[‘a’] + obj.proxied” binary operation on association-proxied
    lists.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理列表上的 “[‘a’] + obj.proxied” 二元操作的输出顺序。
- en: 0.4.2p3
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.2p3
- en: 'Released: Wed Jan 09 2008'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年1月9日
- en: general
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: sub version numbering scheme changed to suite setuptools version number rules;
    easy_install -u should now get this version over 0.4.2.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 子版本编号方案更改为适应 setuptools 版本号规则；easy_install -u 现在应该获取此版本而不是 0.4.2。
- en: orm
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed bug with session.dirty when using “mutable scalars” (such as PickleTypes)
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用“可变标量”（如 PickleTypes）时，修复了关于 session.dirty 的错误
- en: '**[orm]**'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: added a more descriptive error message when flushing on a relation() that has
    non-locally-mapped columns in its primary or secondary join condition
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在主或次要关联条件中使用非本地映射列刷新时，添加了更详细的错误消息
- en: '**[orm]**'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: suppressing *all* errors in InstanceState.__cleanup() now.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在 InstanceState.__cleanup() 中抑制 *所有* 错误。
- en: '**[orm]**'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed an attribute history bug whereby assigning a new collection to a collection-based
    attribute which already had pending changes would generate incorrect history
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史记录错误，即对于已经有挂起更改的基于集合的属性，将新集合分配给该属性会生成不正确的历史记录
- en: 'References: [#922](https://www.sqlalchemy.org/trac/ticket/922)'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#922](https://www.sqlalchemy.org/trac/ticket/922)
- en: '**[orm]**'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed delete-orphan cascade bug whereby setting the same object twice to a scalar
    attribute could log it as an orphan
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 delete-orphan 级联错误，即将相同对象两次设置到标量属性可能会将其记录为孤儿
- en: 'References: [#925](https://www.sqlalchemy.org/trac/ticket/925)'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#925](https://www.sqlalchemy.org/trac/ticket/925)
- en: '**[orm]**'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed cascades on a += assignment to a list-based relation.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对基于列表的关系的 += 赋值上的级联。
- en: '**[orm]**'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: synonyms can now be created against props that don’t exist yet, which are later
    added via add_property(). This commonly includes backrefs. (i.e. you can make
    synonyms for backrefs without worrying about the order of operations)
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以对尚不存在的属性创建同义词，稍后通过 add_property() 添加。这通常包括反向引用。（即您可以创建反向引用的同义词，而不必担心操作顺序）
- en: 'References: [#919](https://www.sqlalchemy.org/trac/ticket/919)'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#919](https://www.sqlalchemy.org/trac/ticket/919)
- en: '**[orm]**'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed bug which could occur with polymorphic “union” mapper which falls back
    to “deferred” loading of inheriting tables
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可能发生的多态“union”映射器的错误，该错误会回退到继承表的“延迟”加载
- en: '**[orm]**'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: the “columns” collection on a mapper/mapped class (i.e. ‘c’) is against the
    mapped table, not the select_table in the case of polymorphic “union” loading
    (this shouldn’t be noticeable).
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器/映射类（即‘c’）上的“columns”集合针对映射表，而不是在多态“union”加载情况下的select_table（这不应该是可察觉的）。
- en: '**[orm]**'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed fairly critical bug whereby the same instance could be listed more than
    once in the unitofwork.new collection; most typically reproduced when using a
    combination of inheriting mappers and ScopedSession.mapper, as the multiple __init__
    calls per instance could save() the object with distinct _state objects
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当关键的bug，即相同实例可能会在unitofwork.new集合中列出多次；最常见的情况是在使用继承映射器和ScopedSession.mapper的组合时，每个实例的多个__init__调用可能会使用不同的_state对象保存()对象
- en: '**[orm]**'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added very rudimentary yielding iterator behavior to Query. Call query.yield_per(<number
    of rows>) and evaluate the Query in an iterative context; every collection of
    N rows will be packaged up and yielded. Use this method with extreme caution since
    it does not attempt to reconcile eagerly loaded collections across result batch
    boundaries, nor will it behave nicely if the same instance occurs in more than
    one batch. This means that an eagerly loaded collection will get cleared out if
    it’s referenced in more than one batch, and in all cases attributes will be overwritten
    on instances that occur in more than one batch.
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query添加了非常基本的迭代器行为。调用query.yield_per(<number of rows>)并在迭代上下文中评估Query；每个N行的集合将被打包并yield。请极度谨慎使用此方法，因为它不会尝试在结果批次边界上协调急切加载的集合，也不会在同一批次中出现相同实例时表现良好。这意味着如果在多个批次中引用了急切加载的集合，它将被清除，并且在所有情况下，如果在多个批次中出现相同实例，属性将被覆盖。
- en: '**[orm]**'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed in-place set mutation operators for set collections and association proxied
    sets.
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为集合和关联代理集合提供了固定的原地设置变异操作符。
- en: 'References: [#920](https://www.sqlalchemy.org/trac/ticket/920)'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#920](https://www.sqlalchemy.org/trac/ticket/920)
- en: sql
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Text type is properly exported now and does not raise a warning on DDL create;
    String types with no length only raise warnings during CREATE TABLE
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Text类型已正确导出，并且在DDL创建时不会引发警告；没有长度的String类型仅在CREATE TABLE时引发警告
- en: 'References: [#912](https://www.sqlalchemy.org/trac/ticket/912)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#912](https://www.sqlalchemy.org/trac/ticket/912)
- en: '**[sql]**'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: new UnicodeText type is added, to specify an encoded, unlengthed Text type
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的UnicodeText类型，用于指定编码的、无长度的Text类型
- en: '**[sql]**'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug in union() so that select() statements which don’t derive from FromClause
    objects can be unioned
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了union()中的bug，使得不从FromClause对象派生的select()语句可以进行union操作
- en: '**[sql]**'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed name of TEXT to Text since its a “generic” type; TEXT name is deprecated
    until 0.5\. The “upgrading” behavior of String to Text when no length is present
    is also deprecated until 0.5; will issue a warning when used for CREATE TABLE
    statements (String with no length for SQL expression purposes is still fine)
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将TEXT的名称更改为Text，因为它是一个“通用”类型；TEXT名称在0.5版本之前已被弃用。当没有长度时，String转为Text的“升级”行为也在0.5版本之前被弃用；在用于CREATE
    TABLE语句时将发出警告（在SQL表达式目的上没有长度的String仍然可以使用）
- en: 'References: [#912](https://www.sqlalchemy.org/trac/ticket/912)'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#912](https://www.sqlalchemy.org/trac/ticket/912)
- en: '**[sql]**'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generative select.order_by(None) / group_by(None) was not managing to reset
    order by/group by criterion, fixed
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了generative select.order_by(None) / group_by(None)未能重置order by/group by条件的问题
- en: 'References: [#924](https://www.sqlalchemy.org/trac/ticket/924)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#924](https://www.sqlalchemy.org/trac/ticket/924)
- en: misc
  id: totrans-535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Fixed reflection of mysql empty string column defaults.
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mysql空字符串列默认值的反射。
- en: '**[ext]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: ’+’, ‘*’, ‘+=’ and ‘*=’ support for association proxied lists.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为关联代理列表添加了‘+’、‘*’、‘+=’和‘*=’支持。
- en: '**[dialects]**'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: mssql - narrowed down the test for “date”/”datetime” in MSDate/ MSDateTime subclasses
    so that incoming “datetime” objects don’t get mis-interpreted as “date” objects
    and vice versa.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mssql - 缩小了对MSDate/MSDateTime子类中“date”/“datetime”的测试范围，以防止传入的“datetime”对象被错误解释为“date”对象，反之亦然。
- en: 'References: [#923](https://www.sqlalchemy.org/trac/ticket/923)'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#923](https://www.sqlalchemy.org/trac/ticket/923)
- en: '**[dialects]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Fixed the missing call to subtype result processor for the PGArray type.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PGArray类型的subtype结果处理器的缺失调用。
- en: 'References: [#913](https://www.sqlalchemy.org/trac/ticket/913)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#913](https://www.sqlalchemy.org/trac/ticket/913)
- en: 0.4.2
  id: totrans-546
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.2
- en: 'Released: Wed Jan 02 2008'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年1月2日（星期三）
- en: orm
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'a major behavioral change to collection-based backrefs: they no longer trigger
    lazy loads ! “reverse” adds and removes are queued up and are merged with the
    collection when it is actually read from and loaded; but do not trigger a load
    beforehand. For users who have noticed this behavior, this should be much more
    convenient than using dynamic relations in some cases; for those who have not,
    you might notice your apps using a lot fewer queries than before in some situations.'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对基于集合的反向引用的主要行为更改：它们不再触发延迟加载！“reverse”添加和删除被排队，并在实际读取和加载集合时与集合合并；但在此之前不会触发加载。对于注意到这种行为的用户，在某些情况下，这应该比在某些情况下使用动态关系更方便；对于那些没有注意到的用户，您可能会注意到您的应用程序在某些情况下使用的查询比以前少得多。
- en: 'References: [#871](https://www.sqlalchemy.org/trac/ticket/871)'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#871](https://www.sqlalchemy.org/trac/ticket/871)
- en: '**[orm]**'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mutable primary key support is added. primary key columns can be changed freely,
    and the identity of the instance will change upon flush. In addition, update cascades
    of foreign key referents (primary key or not) along relations are supported, either
    in tandem with the database’s ON UPDATE CASCADE (required for DB’s like Postgres)
    or issued directly by the ORM in the form of UPDATE statements, by setting the
    flag “passive_cascades=False”.
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可变主键支持。主键列可以自由更改，并且在刷新时实例的标识将发生变化。此外，支持沿关系更新外键引用（主键或非主键），可以与数据库的ON UPDATE
    CASCADE（对于像Postgres这样的数据库是必需的）一起使用，或者直接由ORM以UPDATE语句的形式发出，通过设置标志“passive_cascades=False”。
- en: '**[orm]**'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'inheriting mappers now inherit the MapperExtensions of their parent mapper
    directly, so that all methods for a particular MapperExtension are called for
    subclasses as well. As always, any MapperExtension can return either EXT_CONTINUE
    to continue extension processing or EXT_STOP to stop processing. The order of
    mapper resolution is: <extensions declared on the classes mapper> <extensions
    declared on the classes’ parent mapper> <globally declared extensions>.'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继承映射器现在直接继承其父映射器的MapperExtensions，因此特定MapperExtension的所有方法也会为子类调用。与往常一样，任何MapperExtension都可以返回EXT_CONTINUE以继续扩展处理，或者返回EXT_STOP以停止处理。映射器解析的顺序为：<在类的映射器上声明的扩展>
    <在类的父映射器上声明的扩展> <全局声明的扩展>。
- en: Note that if you instantiate the same extension class separately and then apply
    it individually for two mappers in the same inheritance chain, the extension will
    be applied twice to the inheriting class, and each method will be called twice.
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，如果您单独实例化相同的扩展类，然后分别将其应用于同一继承链中两个映射器，扩展将应用于继承类两次，并且每个方法将被调用两次。
- en: To apply a mapper extension explicitly to each inheriting class but have each
    method called only once per operation, use the same instance of the extension
    for both mappers.
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要显式地将映射扩展应用于每个继承类，但每个方法每次操作只调用一次，请为两个映射器使用相同的扩展实例。
- en: 'References: [#490](https://www.sqlalchemy.org/trac/ticket/490)'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#490](https://www.sqlalchemy.org/trac/ticket/490)
- en: '**[orm]**'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: MapperExtension.before_update() and after_update() are now called symmetrically;
    previously, an instance that had no modified column attributes (but had a relation()
    modification) could be called with before_update() but not after_update()
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对MapperExtension.before_update()和after_update()进行对称调用；以前，一个没有修改列属性（但有关系()修改）的实例可能会调用before_update()但不调用after_update()
- en: 'References: [#907](https://www.sqlalchemy.org/trac/ticket/907)'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#907](https://www.sqlalchemy.org/trac/ticket/907)
- en: '**[orm]**'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: columns which are missing from a Query’s select statement now get automatically
    deferred during load.
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询语句中缺失的列现在在加载时会自动延迟加载。
- en: '**[orm]**'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapped classes which extend “object” and do not provide an __init__() method
    will now raise TypeError if non-empty *args or **kwargs are present at instance
    construction time (and are not consumed by any extensions such as the scoped_session
    mapper), consistent with the behavior of normal Python classes
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展“object”并且在实例构造时没有提供__init__()方法的映射类现在会在实例构造时引发TypeError，如果存在非空*args或**kwargs（并且不被任何扩展（如scoped_session
    mapper）消耗），与普通Python类的行为一致
- en: 'References: [#908](https://www.sqlalchemy.org/trac/ticket/908)'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#908](https://www.sqlalchemy.org/trac/ticket/908)
- en: '**[orm]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed Query bug when filter_by() compares a relation against None
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当filter_by()将关系与None进行比较时的Query bug
- en: 'References: [#899](https://www.sqlalchemy.org/trac/ticket/899)'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#899](https://www.sqlalchemy.org/trac/ticket/899)
- en: '**[orm]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved support for pickling of mapped entities. Per-instance lazy/deferred/expired
    callables are now serializable so that they serialize and deserialize with _state.
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对映射实体的pickling支持。现在，每个实例的惰性/延迟/过期可调用对象都是可序列化的，因此它们可以与_state一起序列化和反序列化。
- en: '**[orm]**'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'new synonym() behavior: an attribute will be placed on the mapped class, if
    one does not exist already, in all cases. if a property already exists on the
    class, the synonym will decorate the property with the appropriate comparison
    operators so that it can be used in column expressions just like any other mapped
    attribute (i.e. usable in filter(), etc.) the “proxy=True” flag is deprecated
    and no longer means anything. Additionally, the flag “map_column=True” will automatically
    generate a ColumnProperty corresponding to the name of the synonym, i.e.: ‘somename’:synonym(‘_somename’,
    map_column=True) will map the column named ‘somename’ to the attribute ‘_somename’.
    See the example in the mapper docs.'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的synonym()行为：如果映射类上不存在属性，则属性将放置在映射类上。如果类上已经存在属性，则synonym将使用适当的比较运算符装饰属性，以便它可以像任何其他映射属性一样在列表达式中使用（即可在filter()中使用等）。“proxy=True”标志已弃用，不再具有任何意义。此外，“map_column=True”标志将自动生成与同义词名称相对应的ColumnProperty，即：'somename':synonym('_somename',
    map_column=True)将把名为'somename'的列映射到属性'_somename'。请参阅映射器文档中的示例。
- en: 'References: [#801](https://www.sqlalchemy.org/trac/ticket/801)'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#801](https://www.sqlalchemy.org/trac/ticket/801)
- en: '**[orm]**'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from() now replaces all existing FROM criterion with the given
    argument; the previous behavior of constructing a list of FROM clauses was generally
    not useful as is required filter() calls to create join criterion, and new tables
    introduced within filter() already add themselves to the FROM clause. The new
    behavior allows not just joins from the main table, but select statements as well.
    Filter criterion, order bys, eager load clauses will be “aliased” against the
    given statement.
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from()现在用给定的参数替换所有现有的FROM条件；以前的行为通常不太有用，因为它需要filter()调用来创建连接条件，并且在filter()中引入的新表已经添加到了FROM子句中。新行为不仅允许从主表进行连接，还允许选择语句。过滤条件、排序条件、急加载子句将与给定语句进行“别名”对比。
- en: '**[orm]**'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: this month’s refactoring of attribute instrumentation changes the “copy-on-load”
    behavior we’ve had since midway through 0.3 with “copy-on-modify” in most cases.
    This takes a sizable chunk of latency out of load operations and overall does
    less work as only attributes which are actually modified get their “committed
    state” copied. Only “mutable scalar” attributes (i.e. a pickled object or other
    mutable item), the reason for the copy-on-load change in the first place, retain
    the old behavior.
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本月对属性工具化的重构改变了自0.3中途以来我们一直拥有的“加载时复制”行为，大多数情况下改为了“修改时复制”。这样做可以大幅减少加载操作的延迟，并且总体工作量更少，因为只有实际被修改的属性才会复制其“已提交状态”。只有“可变标量”属性（即pickle对象或其他可变项）才保留了旧行为，这也是改变加载时复制的原因。
- en: '**[orm] [attrname]**'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [attrname]**'
- en: a slight behavioral change to attributes is, del’ing an attribute does *not*
    cause the lazyloader of that attribute to fire off again; the “del” makes the
    effective value of the attribute “None”. To re-trigger the “loader” for an attribute,
    use session.expire(instance,).
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对属性的轻微行为变化是，删除属性不会再次触发该属性的惰性加载器；“del”使属性的有效值变为“None”。要重新触发属性的“加载器”，请使用session.expire(instance,)。
- en: '**[orm]**'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.filter(SomeClass.somechild == None), when comparing a many-to-one property
    to None, properly generates “id IS NULL” including that the NULL is on the right
    side.
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将多对一属性与`None`进行比较时，query.filter(SomeClass.somechild == None)会正确生成“id IS NULL”，包括NULL位于右侧的情况。
- en: '**[orm]**'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() takes into account aliased joins, i.e. query.join(‘orders’,
    aliased=True).order_by(Order.id)
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()会考虑到别名连接，即query.join('orders', aliased=True).order_by(Order.id)
- en: '**[orm]**'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerload(), lazyload(), eagerload_all() take an optional second class-or-mapper
    argument, which will select the mapper to apply the option towards. This can select
    among other mappers which were added using add_entity().
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerload()、lazyload()、eagerload_all()接受可选的第二个类或映射器参数，它将选择要应用选项的映射器。这可以从使用add_entity()添加的其他映射器中进行选择。
- en: '**[orm]**'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerloading will work with mappers added via add_entity().
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerloading将与通过add_entity()添加的映射器一起工作。
- en: '**[orm]**'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “cascade delete” behavior to “dynamic” relations just like that of regular
    relations. if passive_deletes flag (also just added) is not set, a delete of the
    parent item will trigger a full load of the child items so that they can be deleted
    or updated accordingly.
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“dynamic”关系中添加了“级联删除”行为，就像常规关系一样。如果未设置passive_deletes标志（也刚刚添加），则删除父项将触发对子项的完全加载，以便可以相应地删除或更新它们。
- en: '**[orm]**'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: also with dynamic, implemented correct count() behavior as well as other helper
    methods.
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还使用dynamic，实现了正确的count()行为以及其他辅助方法。
- en: '**[orm]**'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to cascades on polymorphic relations, such that cascades from an object
    to a polymorphic collection continue cascading along the set of attributes specific
    to each element in the collection.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态关系上的级联问题，使得从对象到多态集合的级联继续沿着集合中每个元素特定的属性集进行级联。
- en: '**[orm]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() and query.load() do not take existing filter or other criterion
    into account; these methods *always* look up the given id in the database or return
    the current instance from the identity map, disregarding any existing filter,
    join, group_by or other criterion which has been configured.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.get()和query.load()不考虑现有的过滤器或其他条件；这些方法*总是*在数据库中查找给定的id或从标识映射中返回当前实例，而不考虑已配置的任何现有过滤器、连接、group_by或其他条件。
- en: 'References: [#893](https://www.sqlalchemy.org/trac/ticket/893)'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#893](https://www.sqlalchemy.org/trac/ticket/893)
- en: '**[orm]**'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added support for version_id_col in conjunction with inheriting mappers. version_id_col
    is typically set on the base mapper in an inheritance relationship where it takes
    effect for all inheriting mappers.
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承映射器中添加了对version_id_col的支持。version_id_col通常在继承关系中的基本映射器上设置，在那里它对所有继承映射器生效。
- en: 'References: [#883](https://www.sqlalchemy.org/trac/ticket/883)'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#883](https://www.sqlalchemy.org/trac/ticket/883)
- en: '**[orm]**'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relaxed rules on column_property() expressions having labels; any ColumnElement
    is accepted now, as the compiler auto-labels non-labeled ColumnElements now. a
    selectable, like a select() statement, still requires conversion to ColumnElement
    via as_scalar() or label().
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了column_property()表达式具有标签的规则；现在接受任何ColumnElement，因为编译器现在会自动为没有标签的ColumnElement添加标签。可选择的，如select()语句，仍然需要通过as_scalar()或label()转换为ColumnElement。
- en: '**[orm]**'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed backref bug where you could not del instance.attr if attr was None
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了无法删除instance.attr的backref错误，如果attr为None的话
- en: '**[orm]**'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'several ORM attributes have been removed or made private: mapper.get_attr_by_column(),
    mapper.set_attr_by_column(), mapper.pks_by_table, mapper.cascade_callable(), MapperProperty.cascade_callable(),
    mapper.canload(), mapper.save_obj(), mapper.delete_obj(), mapper._mapper_registry,
    attributes.AttributeManager'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除或私有化了几个ORM属性：mapper.get_attr_by_column()，mapper.set_attr_by_column()，mapper.pks_by_table，mapper.cascade_callable()，MapperProperty.cascade_callable()，mapper.canload()，mapper.save_obj()，mapper.delete_obj()，mapper._mapper_registry，attributes.AttributeManager
- en: '**[orm]**'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Assigning an incompatible collection type to a relation attribute now raises
    TypeError instead of sqlalchemy’s ArgumentError.
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，将不兼容的集合类型分配给关系属性将引发TypeError，而不是SQLAlchemy的ArgumentError。
- en: '**[orm]**'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Bulk assignment of a MappedCollection now raises an error if a key in the incoming
    dictionary does not match the key that the collection’s keyfunc would use for
    that value.
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传入字典中的键与集合的keyfunc为该值使用的键不匹配，则对MappedCollection进行批量赋值将引发错误。
- en: 'References: [#886](https://www.sqlalchemy.org/trac/ticket/886)'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#886](https://www.sqlalchemy.org/trac/ticket/886)
- en: '**[orm] [newval1] [newval2]**'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [newval1] [newval2]**'
- en: 'Custom collections can now specify a @converter method to translate objects
    used in “bulk” assignment into a stream of values, as in:'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义集合现在可以指定一个@converter方法，将用于“批量”赋值的对象转换为一系列值，如下所示：
- en: '[PRE2]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The MappedCollection uses this hook to ensure that incoming key/value pairs
    are sane from the collection’s perspective.
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MappedCollection使用此钩子来确保从集合的角度来看传入的键/值对是合理的。
- en: '**[orm]**'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed endless loop issue when using lazy=”dynamic” on both sides of a bi-directional
    relationship
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在双向关系的两侧同时使用lazy=”dynamic”时修复了无限循环问题
- en: 'References: [#872](https://www.sqlalchemy.org/trac/ticket/872)'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#872](https://www.sqlalchemy.org/trac/ticket/872)
- en: '**[orm]**'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more fixes to the LIMIT/OFFSET aliasing applied with Query + eagerloads, in
    this case when mapped against a select statement
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query + eagerloads中应用LIMIT/OFFSET别名的更多修复，这种情况下映射到select语句时
- en: 'References: [#904](https://www.sqlalchemy.org/trac/ticket/904)'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#904](https://www.sqlalchemy.org/trac/ticket/904)
- en: '**[orm]**'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to self-referential eager loading such that if the same mapped instance
    appears in two or more distinct sets of columns in the same result set, its eagerly
    loaded collection will be populated regardless of whether or not all of the rows
    contain a set of “eager” columns for that collection. this would also show up
    as a KeyError when fetching results with join_depth turned on.
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自引用的急切加载，以便如果同一映射实例出现在同一结果集中的两个或更多不同列集中，其急切加载的集合将被填充，无论所有行是否包含该集合的“急切”列集。当打开join_depth时，这也会显示为KeyError。
- en: '**[orm]**'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where Query would not apply a subquery to the SQL when LIMIT was used
    in conjunction with an inheriting mapper where the eager loader was only in the
    parent mapper.
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在继承映射器中使用LIMIT与仅在父映射器中存在急切加载器时，Query不会将子查询应用于SQL的错误。
- en: '**[orm]**'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: clarified the error message which occurs when you try to update() an instance
    with the same identity key as an instance already present in the session.
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 澄清了当您尝试使用相同标识键更新()一个已经存在于会话中的实例时出现的错误消息。
- en: '**[orm]**'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some clarifications and fixes to merge(instance, dont_load=True). fixed bug
    where lazy loaders were getting disabled on returned instances. Also, we currently
    do not support merging an instance which has uncommitted changes on it, in the
    case that dont_load=True is used….this will now raise an error. This is due to
    complexities in merging the “committed state” of the given instance to correctly
    correspond to the newly copied instance, as well as other modified state. Since
    the use case for dont_load=True is caching, the given instances shouldn’t have
    any uncommitted changes on them anyway. We also copy the instances over without
    using any events now, so that the ‘dirty’ list on the new session remains unaffected.
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对merge(instance, dont_load=True)进行了一些澄清和修复。修复了懒加载器在返回的实例上被禁用的错误。此外，我们目前不支持合并具有未提交更改的实例，在使用dont_load=True的情况下….现在会引发错误。这是因为合并给定实例的“已提交状态”以正确对应新复制的实例以及其他修改状态的复杂性。由于dont_load=True的用例是缓存，给定实例不应该有任何未提交的更改。我们现在也不使用任何事件将实例复制到新会话中，因此新会话上的“脏”列表保持不受影响。
- en: '**[orm]**'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug which could arise when using session.begin_nested() in conjunction
    with more than one level deep of enclosing session.begin() statements
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用session.begin_nested()与多于一级的封闭session.begin()语句结合使用时可能出现的错误。
- en: '**[orm]**'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed session.refresh() with instance that has custom entity_name
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具有自定义entity_name的实例的session.refresh()。
- en: 'References: [#914](https://www.sqlalchemy.org/trac/ticket/914)'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#914](https://www.sqlalchemy.org/trac/ticket/914)
- en: sql
  id: totrans-635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generic functions ! we introduce a database of known SQL functions, such as
    current_timestamp, coalesce, and create explicit function objects representing
    them. These objects have constrained argument lists, are type aware, and can compile
    in a dialect-specific fashion. So saying func.char_length(“foo”, “bar”) raises
    an error (too many args), func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005,
    10, 15)) knows that its return type is a Date. We only have a few functions represented
    so far but will continue to add to the system
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通用函数！我们引入了一个已知SQL函数的数据库，例如current_timestamp，coalesce，并创建了表示它们的显式函数对象。这些对象具有受限制的参数列表，具有类型意识，并且可以以特定于方言的方式编译。因此，说func.char_length(“foo”,
    “bar”)会引发错误（参数太多），func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005,
    10, 15))知道其返回类型是一个日期。到目前为止，我们只表示了一些函数，但将继续向系统添加。
- en: 'References: [#615](https://www.sqlalchemy.org/trac/ticket/615)'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#615](https://www.sqlalchemy.org/trac/ticket/615)
- en: '**[sql]**'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: auto-reconnect support improved; a Connection can now automatically reconnect
    after its underlying connection is invalidated, without needing to connect() again
    from the engine. This allows an ORM session bound to a single Connection to not
    need a reconnect. Open transactions on the Connection must be rolled back after
    an invalidation of the underlying connection else an error is raised. Also fixed
    bug where disconnect detect was not being called for cursor(), rollback(), or
    commit().
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动重新连接支持改进；连接现在可以在其基础连接无效后自动重新连接，而不需要从引擎重新连接()。这允许绑定到单个连接的ORM会话不需要重新连接。连接上的打开事务在基础连接无效后必须回滚，否则会引发错误。还修复了在cursor()，rollback()或commit()中未调用disconnect
    detect的错误。
- en: '**[sql]**'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added new flag to String and create_engine(), assert_unicode=(True|False|’warn’|None).
    Defaults to False or None on create_engine() and String, ‘warn’ on the Unicode
    type. When True, results in all unicode conversion operations raising an exception
    when a non-unicode bytestring is passed as a bind parameter. ‘warn’ results in
    a warning. It is strongly advised that all unicode-aware applications make proper
    use of Python unicode objects (i.e. u’hello’ and not ‘hello’) so that data round
    trips accurately.
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 String 和 create_engine() 添加了新标志，assert_unicode=(True|False|’warn’|None)。 在
    create_engine() 和 String 上默认为 False 或 None，在 Unicode 类型上为 ‘warn’。 当为 True 时，当传递非
    Unicode 字节字符串作为绑定参数时，所有 Unicode 转换操作都会引发异常。 ‘warn’ 会产生警告。 强烈建议所有支持 Unicode 的应用程序正确使用
    Python Unicode 对象（即 u’hello’ 而不是 ‘hello’），以便数据往返准确。
- en: '**[sql]**'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generation of “unique” bind parameters has been simplified to use the same “unique
    identifier” mechanisms as everything else. This doesn’t affect user code, except
    any code that might have been hardcoded against the generated names. Generated
    bind params now have the form “<paramname>_<num>”, whereas before only the second
    bind of the same name would have this form.
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成“unique”绑定参数的机制已简化为使用与其他所有内容相同的“唯一标识符”机制。 这不会影响用户代码，除非可能已经针对生成的名称进行了硬编码。 生成的绑定参数现在具有“<paramname>_<num>”的形式，而以前只有同名的第二个绑定会具有这种形式。
- en: '**[sql]**'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select().as_scalar() will raise an exception if the select does not have exactly
    one expression in its columns clause.
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select().as_scalar() 如果 select 在其列子句中没有确切一个表达式，则会引发异常。
- en: '**[sql]**'
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: bindparam() objects themselves can be used as keys for execute(), i.e. statement.execute({bind1:’foo’,
    bind2:’bar’})
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam() 对象本身可以用作 execute() 的键，即 statement.execute({bind1:’foo’, bind2:’bar’）
- en: '**[sql]**'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added new methods to TypeDecorator, process_bind_param() and process_result_value(),
    which automatically take advantage of the processing of the underlying type. Ideal
    for using with Unicode or Pickletype. TypeDecorator should now be the primary
    way to augment the behavior of any existing type including other TypeDecorator
    subclasses such as PickleType.
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的方法到 TypeDecorator，process_bind_param() 和 process_result_value()，它们自动利用底层类型的处理。非常适合与
    Unicode 或 Pickletype 一起使用。TypeDecorator 现在应该是增强任何现有类型行为的主要方式，包括其他 TypeDecorator
    子类，如 PickleType。
- en: '**[sql]**'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: selectables (and others) will issue a warning when two columns in their exported
    columns collection conflict based on name.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selectables（以及其他对象）在其导出列集合中基于名称冲突的两列时将发出警告。
- en: '**[sql]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: tables with schemas can still be used in sqlite, firebird, schema name just
    gets dropped
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有模式的表仍然可以在 sqlite、firebird 中使用，模式名称只是被删除
- en: 'References: [#890](https://www.sqlalchemy.org/trac/ticket/890)'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#890](https://www.sqlalchemy.org/trac/ticket/890)
- en: '**[sql]**'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed the various “literal” generation functions to use an anonymous bind
    parameter. not much changes here except their labels now look like “:param_1”,
    “:param_2” instead of “:literal”
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将各种“literal”生成函数更改为使用匿名绑定参数。 这里没有太多变化，除了它们的标签现在看起来像“:param_1”，“:param_2”而不是“:literal”
- en: '**[sql]**'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column labels in the form “tablename.columname”, i.e. with a dot, are now supported.
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持形式为“tablename.columname”的列标签，即带有点的形式。
- en: '**[sql]**'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: from_obj keyword argument to select() can be a scalar or a list.
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 的 from_obj 关键字参数可以是标量或列表。
- en: misc
  id: totrans-662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: sqlite SLDate type will not erroneously render “microseconds” portion of a datetime
    or time object.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite SLDate 类型不会错误地呈现日期时间或时间对象的“微秒”部分。
- en: '**[dialects]**'
  id: totrans-665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: oracle
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oracle
- en: added disconnect detection support for Oracle
  id: totrans-667
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Oracle 添加了断开连接检测支持
- en: some cleanup to binary/raw types so that cx_oracle.LOB is detected on an ad-hoc
    basis
  id: totrans-668
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对二进制/原始类型进行了一些清理，以便在需要时检测 cx_oracle.LOB
- en: 'References: [#902](https://www.sqlalchemy.org/trac/ticket/902)'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#902](https://www.sqlalchemy.org/trac/ticket/902)
- en: '**[dialects]**'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: MSSQL
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL
- en: PyODBC no longer has a global “set nocount on”.
  id: totrans-672
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyODBC 不再具有全局的 “set nocount on”。
- en: Fix non-identity integer PKs on autoload
  id: totrans-673
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 autoload 上的非标识整数 PKs
- en: Better support for convert_unicode
  id: totrans-674
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地支持 convert_unicode
- en: Less strict date conversion for pyodbc/adodbapi
  id: totrans-675
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 pyodbc/adodbapi，日期转换更加宽松
- en: Schema-qualified tables / autoload
  id: totrans-676
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式限定的表 / autoload
- en: 'References: [#824](https://www.sqlalchemy.org/trac/ticket/824), [#839](https://www.sqlalchemy.org/trac/ticket/839),
    [#842](https://www.sqlalchemy.org/trac/ticket/842), [#901](https://www.sqlalchemy.org/trac/ticket/901)'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#824](https://www.sqlalchemy.org/trac/ticket/824), [#839](https://www.sqlalchemy.org/trac/ticket/839),
    [#842](https://www.sqlalchemy.org/trac/ticket/842), [#901](https://www.sqlalchemy.org/trac/ticket/901)
- en: '**[backend] [firebird]**'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[backend] [firebird]**'
- en: does properly reflect domains (partially fixing) and PassiveDefaults
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确反映域（部分修复）和PassiveDefaults
- en: 'References: [#410](https://www.sqlalchemy.org/trac/ticket/410)'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#410](https://www.sqlalchemy.org/trac/ticket/410)
- en: '**[3562] [backend] [firebird]**'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[3562] [后端] [firebird]**'
- en: reverted to use default poolclass (was set to SingletonThreadPool in 0.4.0 for
    test purposes)
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复使用默认的池类（在0.4.0中设置为SingletonThreadPool用于测试目的）
- en: '**[backend] [firebird]**'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[后端] [firebird]**'
- en: map func.length() to ‘char_length’ (easily overridable with the UDF ‘strlen’
    on old versions of Firebird)
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将func.length()映射到‘char_length’（在旧版本的Firebird上可以轻松使用UDF‘strlen’进行覆盖）
- en: 0.4.1
  id: totrans-685
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.1
- en: 'Released: Sun Nov 18 2007'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年11月18日星期日
- en: orm
  id: totrans-687
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eager loading with LIMIT/OFFSET applied no longer adds the primary table joined
    to a limited subquery of itself; the eager loads now join directly to the subquery
    which also provides the primary table’s columns to the result set. This eliminates
    a JOIN from all eager loads with LIMIT/OFFSET.
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eager loading与应用LIMIT/OFFSET不再将主表连接到其自身的有限子查询；现在，eager loads直接连接到提供主表列给结果集的子查询。这消除了所有带有LIMIT/OFFSET的eager
    loads的JOIN。
- en: 'References: [#843](https://www.sqlalchemy.org/trac/ticket/843)'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#843](https://www.sqlalchemy.org/trac/ticket/843)
- en: '**[orm]**'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() and session.expire() now support an additional argument “attribute_names”,
    a list of individual attribute keynames to be refreshed or expired, allowing partial
    reloads of attributes on an already-loaded instance.
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.refresh()和session.expire()现在支持额外的参数“attribute_names”，一个包含要刷新或过期的单个属性键名的列表，允许对已加载实例的属性进行部分重新加载。
- en: 'References: [#802](https://www.sqlalchemy.org/trac/ticket/802)'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#802](https://www.sqlalchemy.org/trac/ticket/802)
- en: '**[orm]**'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added op() operator to instrumented attributes; i.e. User.name.op(‘ilike’)(‘%somename%’)
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向instrumented属性添加了op()运算符；例如，User.name.op(‘ilike’)(‘%somename%’)
- en: 'References: [#767](https://www.sqlalchemy.org/trac/ticket/767)'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#767](https://www.sqlalchemy.org/trac/ticket/767)
- en: '**[orm]**'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped classes may now define __eq__, __hash__, and __nonzero__ methods with
    arbitrary semantics. The orm now handles all mapped instances on an identity-only
    basis. (e.g. ‘is’ vs ‘==’)
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类现在可以定义具有任意语义的__eq__、__hash__和__nonzero__方法。orm现在仅基于标识处理所有映射实例。（例如，‘is’ vs
    ‘==’）
- en: 'References: [#676](https://www.sqlalchemy.org/trac/ticket/676)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#676](https://www.sqlalchemy.org/trac/ticket/676)
- en: '**[orm]**'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “properties” accessor on Mapper is removed; it now throws an informative
    exception explaining the usage of mapper.get_property() and mapper.iterate_properties
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapper上的“properties”访问器已被移除；现在会抛出一个信息性异常，解释mapper.get_property()和mapper.iterate_properties的用法
- en: '**[orm]**'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added having() method to Query, applies HAVING to the generated statement in
    the same way as filter() appends to the WHERE clause.
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了having()方法，与filter()类似，将HAVING应用于生成的语句。
- en: '**[orm]**'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The behavior of query.options() is now fully based on paths, i.e. an option
    such as eagerload_all(‘x.y.z.y.x’) will apply eagerloading to only those paths,
    i.e. and not ‘x.y.x’; eagerload(‘children.children’) applies only to exactly two-levels
    deep, etc.
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query现在完全基于路径的选项，即诸如eagerload_all(‘x.y.z.y.x’)的选项将仅应用于这些路径，即不包括‘x.y.x’；eagerload(‘children.children’)仅适用于正好两级深度等。
- en: 'References: [#777](https://www.sqlalchemy.org/trac/ticket/777)'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#777](https://www.sqlalchemy.org/trac/ticket/777)
- en: '**[orm]**'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: PickleType will compare using == when set up with mutable=False, and not the
    is operator. To use is or any other comparator, send in a custom comparison function
    using PickleType(comparator=my_custom_comparator).
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为mutable=False时，PickleType将使用==进行比较，而不是is运算符。要使用is或任何其他比较器，请使用PickleType(comparator=my_custom_comparator)发送自定义比较函数。
- en: '**[orm]**'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query doesn’t throw an error if you use distinct() and an order_by() containing
    UnaryExpressions (or other) together
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您同时使用distinct()和包含UnaryExpressions（或其他）的order_by()，查询不会抛出错误
- en: 'References: [#848](https://www.sqlalchemy.org/trac/ticket/848)'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#848](https://www.sqlalchemy.org/trac/ticket/848)
- en: '**[orm]**'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: order_by() expressions from joined tables are properly added to columns clause
    when using distinct()
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用distinct()时，来自连接表的order_by()表达式将正确添加到列子句中
- en: 'References: [#786](https://www.sqlalchemy.org/trac/ticket/786)'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#786](https://www.sqlalchemy.org/trac/ticket/786)
- en: '**[orm]**'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed error where Query.add_column() would not accept a class-bound attribute
    as an argument; Query also raises an error if an invalid argument was sent to
    add_column() (at instances() time)
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query.add_column()不接受类绑定属性作为参数的错误；Query还会在add_column()（在instances()时间）发送无效参数时引发错误
- en: 'References: [#858](https://www.sqlalchemy.org/trac/ticket/858)'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#858](https://www.sqlalchemy.org/trac/ticket/858)
- en: '**[orm]**'
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a little more checking for garbage-collection dereferences in InstanceState.__cleanup()
    to reduce “gc ignored” errors on app shutdown
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 InstanceState.__cleanup() 中增加了更多的垃圾收集解引用检查，以减少应用程序关闭时的 "gc ignored" 错误。
- en: '**[orm]**'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'The session API has been solidified:'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话 API 已经稳定：
- en: '**[orm]**'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s an error to session.save() an object which is already persistent
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对已经持久化的对象执行 session.save() 是一个错误
- en: 'References: [#840](https://www.sqlalchemy.org/trac/ticket/840)'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#840](https://www.sqlalchemy.org/trac/ticket/840)
- en: '**[orm]**'
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s an error to session.delete() an object which is *not* persistent.
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 *非* 持久对象执行 session.delete() 是一个错误。
- en: '**[orm]**'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.update() and session.delete() raise an error when updating or deleting
    an instance that is already in the session with a different identity.
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当更新或删除已在会话中具有不同标识的实例时，session.update() 和 session.delete() 将抛出错误。
- en: '**[orm]**'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The session checks more carefully when determining “object X already in another
    session”; e.g. if you pickle a series of objects and unpickle (i.e. as in a Pylons
    HTTP session or similar), they can go into a new session without any conflict
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定 "对象 X 已在另一个会话中" 时，会话检查得更加仔细；例如，如果你 pickle 一系列对象然后 unpickle（即在 Pylons HTTP
    会话或类似情况下），它们可以进入新的会话而不会产生任何冲突。
- en: '**[orm]**'
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() includes a keyword argument “dont_load=True”. setting this flag will
    cause the merge operation to not load any data from the database in response to
    incoming detached objects, and will accept the incoming detached object as though
    it were already present in that session. Use this to merge detached objects from
    external caching systems into the session.
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge() 包含了一个关键字参数 "dont_load=True"。设置此标志将导致合并操作不会从数据库中加载任何数据以响应传入的分离对象，并且将接受传入的分离对象，就好像它已经存在于该会话中。用于将外部缓存系统中的分离对象合并到会话中。
- en: '**[orm]**'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Deferred column attributes no longer trigger a load operation when the attribute
    is assigned to. In those cases, the newly assigned value will be present in the
    flushes’ UPDATE statement unconditionally.
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当属性为延迟列属性时，不再触发加载操作，当属性被赋值时，新分配的值将无条件地出现在 flushes 的 UPDATE 语句中。
- en: '**[orm]**'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a truncation error when re-assigning a subset of a collection (obj.relation
    = obj.relation[1:])
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了重新分配集合子集（obj.relation = obj.relation[1:]）时的截断错误。
- en: 'References: [#834](https://www.sqlalchemy.org/trac/ticket/834)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#834](https://www.sqlalchemy.org/trac/ticket/834)
- en: '**[orm]**'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: De-cruftified backref configuration code, backrefs which step on existing properties
    now raise an error
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了反向引用配置代码，现在会为现有属性抛出错误的反向引用。
- en: 'References: [#832](https://www.sqlalchemy.org/trac/ticket/832)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#832](https://www.sqlalchemy.org/trac/ticket/832)
- en: '**[orm]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved behavior of add_property() etc., fixed involving synonym/deferred.
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 add_property() 等的行为，修复了涉及 synonym/deferred 的问题。
- en: 'References: [#831](https://www.sqlalchemy.org/trac/ticket/831)'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#831](https://www.sqlalchemy.org/trac/ticket/831)
- en: '**[orm]**'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed clear_mappers() behavior to better clean up after itself.
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 clear_mappers() 行为，以更好地清理自身。
- en: '**[orm]**'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fix to “row switch” behavior, i.e. when an INSERT/DELETE is combined into a
    single UPDATE; many-to-many relations on the parent object update properly.
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 "行切换" 行为，即当一个 INSERT/DELETE 结合到一个单独的 UPDATE 时；父对象上的多对多关系得到了正确更新。
- en: 'References: [#841](https://www.sqlalchemy.org/trac/ticket/841)'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#841](https://www.sqlalchemy.org/trac/ticket/841)
- en: '**[orm]**'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed __hash__ for association proxy- these collections are unhashable, just
    like their mutable Python counterparts.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为关联代理修复了 __hash__ ——这些集合是不可哈希的，就像它们的可变 Python 对应物一样。
- en: '**[orm]**'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added proxying of save_or_update, __contains__ and __iter__ methods for scoped
    sessions.
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了减少作用域会话的 "save_or_update"、"__contains__" 和 "__iter__" 方法的代理。
- en: '**[orm]**'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed very hard-to-reproduce issue where by the FROM clause of Query could get
    polluted by certain generative calls
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非常难以重现的问题，即查询的 FROM 子句可能会被某些生成调用污染。
- en: 'References: [#852](https://www.sqlalchemy.org/trac/ticket/852)'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#852](https://www.sqlalchemy.org/trac/ticket/852)
- en: sql
  id: totrans-756
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “shortname” keyword parameter on bindparam() has been deprecated.
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"bindparam()" 上的 "shortname" 关键字参数已被弃用。'
- en: '**[sql]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added contains operator (generates a “LIKE %<other>%” clause).
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了包含运算符（生成一个 "LIKE %<other>%" 子句）。
- en: '**[sql]**'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: anonymous column expressions are automatically labeled. e.g. select([x* 5])
    produces “SELECT x * 5 AS anon_1”. This allows the labelname to be present in
    the cursor.description which can then be appropriately matched to result-column
    processing rules. (we can’t reliably use positional tracking for result-column
    matches since text() expressions may represent multiple columns).
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名列表达式会自动标记。例如，select([x* 5])会产生“SELECT x * 5 AS anon_1”。这允许标签名称出现在cursor.description中，然后可以与结果列处理规则相匹配。（我们不能可靠地使用位置跟踪进行结果列匹配，因为text()表达式可能代表多个列）。
- en: '**[sql]**'
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: operator overloading is now controlled by TypeEngine objects - the one built-in
    operator overload so far is String types overloading ‘+’ to be the string concatenation
    operator. User-defined types can also define their own operator overloading by
    overriding the adapt_operator(self, op) method.
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运算符重载现在由TypeEngine对象控制 - 到目前为止内置的运算符重载是String类型重载‘+’成为字符串连接运算符。用户定义的类型也可以通过覆盖adapt_operator(self,
    op)方法定义自己的运算符重载。
- en: '**[sql]**'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: untyped bind parameters on the right side of a binary expression will be assigned
    the type of the left side of the operation, to better enable the appropriate bind
    parameter processing to take effect
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在二元表达式的右侧使用未命名的绑定参数将被分配为操作左侧的类型，以更好地启用适当的绑定参数处理。
- en: 'References: [#819](https://www.sqlalchemy.org/trac/ticket/819)'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#819](https://www.sqlalchemy.org/trac/ticket/819)
- en: '**[sql]**'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed regular expression step from most statement compilations. Also fixes
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从大多数语句编译中删除了正则表达式步骤。同时也修复了
- en: 'References: [#833](https://www.sqlalchemy.org/trac/ticket/833)'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#833](https://www.sqlalchemy.org/trac/ticket/833)
- en: '**[sql]**'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed empty (zero column) sqlite inserts, allowing inserts on autoincrementing
    single column tables.
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了空（零列）sqlite插入，允许在自动增量单列表上插入。
- en: '**[sql]**'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed expression translation of text() clauses; this repairs various ORM scenarios
    where literal text is used for SQL expressions
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了text()子句的表达式翻译；这修复了各种ORM场景中使用文字文本作为SQL表达式的情况。
- en: '**[sql]**'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed ClauseParameters object; compiled.params returns a regular dictionary
    now, as well as result.last_inserted_params() / last_updated_params().
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了ClauseParameters对象；compiled.params现在返回一个常规字典，以及result.last_inserted_params()
    / last_updated_params()。
- en: '**[sql]**'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed INSERT statements w.r.t. primary key columns that have SQL-expression
    based default generators on them; SQL expression executes inline as normal but
    will not trigger a “postfetch” condition for the column, for those DB’s who provide
    it via cursor.lastrowid
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于具有基于SQL表达式的默认生成器的主键列的INSERT语句；SQL表达式会像正常情况下内联执行，但不会为那些通过cursor.lastrowid提供“postfetch”条件的列触发。
- en: '**[sql]**'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func. objects can be pickled/unpickled
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.对象可以被pickle/unpickle
- en: 'References: [#844](https://www.sqlalchemy.org/trac/ticket/844)'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#844](https://www.sqlalchemy.org/trac/ticket/844)
- en: '**[sql]**'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: rewrote and simplified the system used to “target” columns across selectable
    expressions. On the SQL side this is represented by the “corresponding_column()”
    method. This method is used heavily by the ORM to “adapt” elements of an expression
    to similar, aliased expressions, as well as to target result set columns originally
    bound to a table or selectable to an aliased, “corresponding” expression. The
    new rewrite features completely consistent and accurate behavior.
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写并简化了用于在可选择表达式之间“定位”列的系统。在SQL端，这由“corresponding_column()”方法表示。该方法在ORM中被广泛使用，用于将表达式的元素“适应”到类似的，别名的表达式，以及将最初绑定到表或可选择表达式的结果集列定位到别名的“对应”表达式。新的重写功能具有完全一致和准确的行为。
- en: '**[sql]**'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a field (“info”) for storing arbitrary data on schema items
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个字段（“info”）用于在模式项上存储任意数据。
- en: 'References: [#573](https://www.sqlalchemy.org/trac/ticket/573)'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#573](https://www.sqlalchemy.org/trac/ticket/573)
- en: '**[sql]**'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “properties” collection on Connections has been renamed “info” to match
    schema’s writable collections. Access is still available via the “properties”
    name until 0.5.
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接上的“properties”集合已重命名为“info”，以匹配模式的可写集合。直到0.5版本，仍可通过“properties”名称访问。
- en: '**[sql]**'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed the close() method on Transaction when using strategy=’threadlocal’
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用strategy=’threadlocal’时Transaction上的close()方法。
- en: '**[sql]**'
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to compiled bind parameters to not mistakenly populate None
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译绑定参数不会错误地填充None。
- en: 'References: [#853](https://www.sqlalchemy.org/trac/ticket/853)'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#853](https://www.sqlalchemy.org/trac/ticket/853)
- en: '**[sql]**'
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: <Engine|Connection>._execute_clauseelement becomes a public method Connectable.execute_clauseelement
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Engine|Connection>._execute_clauseelement 变成了一个公共方法 Connectable.execute_clauseelement
- en: misc
  id: totrans-796
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Added experimental support for MaxDB (versions >= 7.6.03.007 only).
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MaxDB 的实验性支持（仅适用于版本 >= 7.6.03.007）。
- en: '**[dialects]**'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: oracle will now reflect “DATE” as an OracleDateTime column, not OracleDate
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 oracle 会将“DATE”反映为 OracleDateTime 列，而不是 OracleDate
- en: '**[dialects]**'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: added awareness of schema name in oracle table_names() function, fixes metadata.reflect(schema=’someschema’)
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle table_names() 函数中增加了对模式名称的支持，修复了 metadata.reflect(schema=’someschema’)
- en: 'References: [#847](https://www.sqlalchemy.org/trac/ticket/847)'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#847](https://www.sqlalchemy.org/trac/ticket/847)
- en: '**[dialects]**'
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: MSSQL anonymous labels for selection of functions made deterministic
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 匿名标签用于选择函数，使其具有确定性
- en: '**[dialects]**'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: sqlite will reflect “DECIMAL” as a numeric column.
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 将“DECIMAL”反映为数字列。
- en: '**[dialects]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Made access dao detection more reliable
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使访问 dao 检测更加可靠
- en: 'References: [#828](https://www.sqlalchemy.org/trac/ticket/828)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#828](https://www.sqlalchemy.org/trac/ticket/828)
- en: '**[dialects]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Renamed the Dialect attribute ‘preexecute_sequences’ to ‘preexecute_pk_sequences’.
    An attribute proxy is in place for out-of-tree dialects using the old name.
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 Dialect 属性 ‘preexecute_sequences’ 重命名为 ‘preexecute_pk_sequences’。对于使用旧名称的
    out-of-tree 方言，现在有一个属性代理。
- en: '**[dialects]**'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Added test coverage for unknown type reflection. Fixed sqlite/mysql handling
    of type reflection for unknown types.
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为未知类型反射添加了测试覆盖。修复了 sqlite/mysql 对于未知类型反射的处理。
- en: '**[dialects]**'
  id: totrans-815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Added REAL for mysql dialect (for folks exploiting the REAL_AS_FLOAT sql mode).
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mysql 方言添加了 REAL（用于利用 REAL_AS_FLOAT sql 模式的人）。
- en: '**[dialects]**'
  id: totrans-817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: mysql Float, MSFloat and MSDouble constructed without arguments now produce
    no-argument DDL, e.g.’FLOAT’.
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql Float、MSFloat 和 MSDouble 现在构造时不带参数会产生无参数 DDL，例如’FLOAT’。
- en: '**[misc]**'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc]**'
- en: Removed unused util.hash().
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了未使用的 util.hash()。
- en: 0.4.0
  id: totrans-821
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0
- en: 'Released: Wed Oct 17 2007'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年10月17日 星期三
- en: '**[no_tags]**'
  id: totrans-823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: (see 0.4.0beta1 for the start of major changes against 0.3, as well as [https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04](https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04)
    )
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （请查看 0.4.0beta1，了解针对 0.3 的重大更改的开始，以及 [https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04](https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04)）
- en: '**[no_tags]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Added initial Sybase support (mxODBC so far)
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Sybase 的初始支持（目前仅限于 mxODBC）
- en: 'References: [#785](https://www.sqlalchemy.org/trac/ticket/785)'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#785](https://www.sqlalchemy.org/trac/ticket/785)
- en: '**[no_tags]**'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Added partial index support for PostgreSQL. Use the postgres_where keyword on
    the Index.
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 添加了部分索引支持。在索引上使用 postgres_where 关键字。
- en: '**[no_tags]**'
  id: totrans-830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: string-based query param parsing/config file parser understands wider range
    of string values for booleans
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于字符串的查询参数解析/配置文件解析现在可以理解更广泛范围的布尔值字符串
- en: 'References: [#817](https://www.sqlalchemy.org/trac/ticket/817)'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#817](https://www.sqlalchemy.org/trac/ticket/817)
- en: '**[no_tags]**'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: backref remove object operation doesn’t fail if the other-side collection doesn’t
    contain the item, supports noload collections
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果另一侧集合不包含项目，则 backref 删除对象操作不会失败，支持 noload 集合
- en: 'References: [#813](https://www.sqlalchemy.org/trac/ticket/813)'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#813](https://www.sqlalchemy.org/trac/ticket/813)
- en: '**[no_tags]**'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: removed __len__ from “dynamic” collection as it would require issuing a SQL
    “count()” operation, thus forcing all list evaluations to issue redundant SQL
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从“dynamic”集合中删除了 __len__，因为这将需要发出 SQL “count()” 操作，从而迫使所有列表评估发出冗余的 SQL
- en: 'References: [#818](https://www.sqlalchemy.org/trac/ticket/818)'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#818](https://www.sqlalchemy.org/trac/ticket/818)
- en: '**[no_tags]**'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: inline optimizations added to locate_dirty() which can greatly speed up repeated
    calls to flush(), as occurs with autoflush=True
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 locate_dirty() 进行了内联优化，可以大大加快对 flush() 的重复调用，如在 autoflush=True 的情况下发生的情况
- en: 'References: [#816](https://www.sqlalchemy.org/trac/ticket/816)'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#816](https://www.sqlalchemy.org/trac/ticket/816)
- en: '**[no_tags]**'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The IdentifierPreprarer’s _requires_quotes test is now regex based. Any out-of-tree
    dialects that provide custom sets of legal_characters or illegal_initial_characters
    will need to move to regexes or override _requires_quotes.
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IdentifierPreprarer 的 _requires_quotes 测试现在基于正则表达式。任何提供自定义合法字符集或非法初始字符集的 out-of-tree
    方言都需要转移到正则表达式或覆盖 _requires_quotes。
- en: '**[no_tags]**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'Firebird has supports_sane_rowcount and supports_sane_multi_rowcount set to
    False due to ticket #370 (right way).'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Firebird 由于 ticket #370（正确方式）而将 supports_sane_rowcount 和 supports_sane_multi_rowcount
    设置为 False。'
- en: '**[no_tags]**'
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'Improvements and fixes on Firebird reflection:'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 反射的改进和修复：
- en: FBDialect now mimics OracleDialect, regarding case-sensitivity of TABLE and
    COLUMN names (see ‘case_sensitive remotion’ topic on this current file).
  id: totrans-848
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FBDialect现在模仿OracleDialect，关于TABLE和COLUMN名称的大小写敏感性（请参见本文件中的“case_sensitive remotion”主题）。
- en: FBDialect.table_names() doesn’t bring system tables (ticket:796).
  id: totrans-849
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FBDialect.table_names()不会带来系统表（票号：796）。
- en: FB now reflects Column’s nullable property correctly.
  id: totrans-850
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FB现在正确反映了Column的nullable属性。
- en: '**[no_tags]**'
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed SQL compiler’s awareness of top-level column labels as used in result-set
    processing; nested selects which contain the same column names don’t affect the
    result or conflict with result-column metadata.
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL编译器对顶级列标签的意识，用于结果集处理；包含相同列名的嵌套选择不会影响结果或与结果列元数据冲突。
- en: '**[no_tags]**'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: query.get() and related functions (like many-to-one lazyloading) use compile-time-aliased
    bind parameter names, to prevent name conflicts with bind parameters that already
    exist in the mapped selectable.
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.get()和相关函数（如一对多的延迟加载）使用编译时别名绑定参数名称，以防止与已存在于映射可选择项中的绑定参数名称发生名称冲突。
- en: '**[no_tags]**'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed three- and multi-level select and deferred inheritance loading (i.e. abc
    inheritance with no select_table).
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了三级和多级选择以及延迟继承加载（即没有选择表的abc继承）。
- en: 'References: [#795](https://www.sqlalchemy.org/trac/ticket/795)'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#795](https://www.sqlalchemy.org/trac/ticket/795)
- en: '**[no_tags]**'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Ident passed to id_chooser in shard.py always a list.
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在shard.py中传递给id_chooser的Ident始终是一个列表。
- en: '**[no_tags]**'
  id: totrans-860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The no-arg ResultProxy._row_processor() is now the class attribute _process_row.
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无参数ResultProxy._row_processor()现在是类属性_process_row。
- en: '**[no_tags]**'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added support for returning values from inserts and updates for PostgreSQL 8.2+.
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对从PostgreSQL 8.2+插入和更新返回值的支持。
- en: 'References: [#797](https://www.sqlalchemy.org/trac/ticket/797)'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#797](https://www.sqlalchemy.org/trac/ticket/797)
- en: '**[no_tags]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: PG reflection, upon seeing the default schema name being used explicitly as
    the “schema” argument in a Table, will assume that this is the user’s desired
    convention, and will explicitly set the “schema” argument in foreign-key-related
    reflected tables, thus making them match only with Table constructors that also
    use the explicit “schema” argument (even though its the default schema). In other
    words, SA assumes the user is being consistent in this usage.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PG反射，在看到默认模式名称明确用作表中的“模式”参数时，将假定这是用户期望的约定��并将在外键相关的反射表中明确设置“模式”参数，从而使它们仅与也使用显式“模式”参数的Table构造函数匹配（即使其为默认模式）。换句话说，SA假定用户在此使用中是一致的。
- en: '**[no_tags]**'
  id: totrans-867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixed sqlite reflection of BOOL/BOOLEAN
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了BOOL/BOOLEAN的sqlite反射。
- en: 'References: [#808](https://www.sqlalchemy.org/trac/ticket/808)'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#808](https://www.sqlalchemy.org/trac/ticket/808)
- en: '**[no_tags]**'
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added support for UPDATE with LIMIT on mysql.
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对在mysql上使用LIMIT进行UPDATE的支持。
- en: '**[no_tags]**'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: null foreign key on a m2o doesn’t trigger a lazyload
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: m2o上的空外键不会触发延迟加载。
- en: 'References: [#803](https://www.sqlalchemy.org/trac/ticket/803)'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#803](https://www.sqlalchemy.org/trac/ticket/803)
- en: '**[no_tags]**'
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: oracle does not implicitly convert to unicode for non-typed result sets (i.e.
    when no TypeEngine/String/Unicode type is even being used; previously it was detecting
    DBAPI types and converting regardless). should fix
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle不会隐式地将非类型化结果集转换为unicode（即，当没有使用TypeEngine/String/Unicode类型时；以前它会检测DBAPI类型并进行转换）。应该修复
- en: 'References: [#800](https://www.sqlalchemy.org/trac/ticket/800)'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#800](https://www.sqlalchemy.org/trac/ticket/800)
- en: '**[no_tags]**'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fix to anonymous label generation of long table/column names
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长表/列名称的匿名标签生成问题。
- en: 'References: [#806](https://www.sqlalchemy.org/trac/ticket/806)'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#806](https://www.sqlalchemy.org/trac/ticket/806)
- en: '**[no_tags]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Firebird dialect now uses SingletonThreadPool as poolclass.
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird方言现在使用SingletonThreadPool作为poolclass。
- en: '**[no_tags]**'
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Firebird now uses dialect.preparer to format sequences names
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird现在使用dialect.preparer来格式化序列名称。
- en: '**[no_tags]**'
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed breakage with postgres and multiple two-phase transactions. Two-phase
    commits and rollbacks didn’t automatically end up with a new transaction as the
    usual dbapi commits/rollbacks do.
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与postgres和多个两阶段事务的中断。两阶段提交和回滚不会像通常的dbapi提交/回滚那样自动结束一个新事务。
- en: 'References: [#810](https://www.sqlalchemy.org/trac/ticket/810)'
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#810](https://www.sqlalchemy.org/trac/ticket/810)
- en: '**[no_tags]**'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added an option to the _ScopedExt mapper extension to not automatically save
    new objects to session on object initialization.
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向_ScopedExt映射器扩展添加了一个选项，以便在对象初始化时不自动将新对象保存到会话中。
- en: '**[no_tags]**'
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixed Oracle non-ansi join syntax
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 非 ANSI 连接语法
- en: '**[no_tags]**'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: PickleType and Interval types (on db not supporting it natively) are now slightly
    faster.
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType 和 Interval 类型（在不支持它的数据库上）现在略微更快。
- en: '**[no_tags]**'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added Float and Time types to Firebird (FBFloat and FBTime). Fixed BLOB SUB_TYPE
    for TEXT and Binary types.
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Firebird 中添加了 Float 和 Time 类型（FBFloat 和 FBTime）。修复了 TEXT 和 Binary 类型的 BLOB
    SUB_TYPE。
- en: '**[no_tags]**'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Changed the API for the in_ operator. in_() now accepts a single argument that
    is a sequence of values or a selectable. The old API of passing in values as varargs
    still works but is deprecated.
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 in_ 运算符的 API。in_() 现在接受一个作为值序列或可选择的单个参数。传递值作为可变参数的旧 API 仍然有效，但已被弃用。
- en: 0.4.0beta6
  id: totrans-898
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta6
- en: 'Released: Thu Sep 27 2007'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Sep 27 2007
- en: '**[no_tags]**'
  id: totrans-900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The Session identity map is now *weak referencing* by default, use weak_identity_map=False
    to use a regular dict. The weak dict we are using is customized to detect instances
    which are “dirty” and maintain a temporary strong reference to those instances
    until changes are flushed.
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话标识映射现在默认为*弱引用*，使用 weak_identity_map=False 来使用常规字典。我们使用的弱字典被定制为检测“脏”实例，并保持对这些实例的临时强引用，直到更改被刷新。
- en: '**[no_tags]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Mapper compilation has been reorganized such that most compilation occurs upon
    mapper construction. This allows us to have fewer calls to mapper.compile() and
    also to allow class-based properties to force a compilation (i.e. User.addresses
    == 7 will compile all mappers; this is). The only caveat here is that an inheriting
    mapper now looks for its inherited mapper upon construction; so mappers within
    inheritance relationships need to be constructed in inheritance order (which should
    be the normal case anyway).
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapper 编译已重新组织，大部分编译发生在 mapper 构造时。这使我们可以减少对 mapper.compile() 的调用，并且允许基于类的属性强制进行编译（即
    User.addresses == 7 将编译所有映射器；这是）。唯一的注意事项是，继承映射器现在在构造时寻找其继承的映射器；因此，继承关系中的映射器需要按照继承顺序进行构造（这应该是正常情况）。
- en: 'References: [#758](https://www.sqlalchemy.org/trac/ticket/758)'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#758](https://www.sqlalchemy.org/trac/ticket/758)
- en: '**[no_tags]**'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: added “FETCH” to the keywords detected by Postgres to indicate a result-row
    holding statement (i.e. in addition to “SELECT”).
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Postgres 中添加了“FETCH”关键字，用于指示结果行保持语句（即除了“SELECT”之外）。
- en: '**[no_tags]**'
  id: totrans-907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added full list of SQLite reserved keywords so that they get escaped properly.
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 SQLite 保留关键字的完整列表，以便正确转义它们。
- en: '**[no_tags]**'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Tightened up the relationship between the Query’s generation of “eager load”
    aliases, and Query.instances() which actually grabs the eagerly loaded rows. If
    the aliases were not specifically generated for that statement by EagerLoader,
    the EagerLoader will not take effect when the rows are fetched. This prevents
    columns from being grabbed accidentally as being part of an eager load when they
    were not meant for such, which can happen with textual SQL as well as some inheritance
    situations. It’s particularly important since the “anonymous aliasing” of columns
    uses simple integer counts now to generate labels.
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了 Query 生成“eager load” 别名与 Query.instances() 之间的关系，Query.instances() 实际上获取了急切加载的行。如果别名不是由
    EagerLoader 专门为该语句生成的，则在获取行时 EagerLoader 将不起作用。这可以防止意外地抓取列作为急切加载的一部分，当它们不是为此目的而设计时，这可能会发生在文本
    SQL 以及一些继承情况下。这一点尤为重要，因为“匿名别名”现在使用简单的整数计数来生成标签。
- en: '**[no_tags]**'
  id: totrans-911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Removed “parameters” argument from clauseelement.compile(), replaced with “column_keys”.
    The parameters sent to execute() only interact with the insert/update statement
    compilation process in terms of the column names present but not the values for
    those columns. Produces more consistent execute/executemany behavior, simplifies
    things a bit internally.
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 clauseelement.compile() 中移除了“parameters”参数，替换为“column_keys”。传递给 execute()
    的参数仅与插入/更新语句的编译过程中存在的列名交互，而不涉及这些列的值。产生更一致的 execute/executemany 行为，内部稍微简化了一些事情。
- en: '**[no_tags]**'
  id: totrans-913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added ‘comparator’ keyword argument to PickleType. By default, “mutable” PickleType
    does a “deep compare” of objects using their dumps() representation. But this
    doesn’t work for dictionaries. Pickled objects which provide an adequate __eq__()
    implementation can be set up with “PickleType(comparator=operator.eq)”
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PickleType 中添加了 'comparator' 关键字参数。默认情况下，“mutable” PickleType 使用它们的 dumps()
    表示进行对象的“深度比较”。但这对于字典不起作用。提供了足够 __eq__() 实现的 Pickled 对象可以设置为 “PickleType(comparator=operator.eq)”
- en: 'References: [#560](https://www.sqlalchemy.org/trac/ticket/560)'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#560](https://www.sqlalchemy.org/trac/ticket/560)
- en: '**[no_tags]**'
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added session.is_modified(obj) method; performs the same “history” comparison
    operation as occurs within a flush operation; setting include_collections=False
    gives the same result as is used when the flush determines whether or not to issue
    an UPDATE for the instance’s row.
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 session.is_modified(obj) 方法；执行与刷新操作中发生的“历史”比较操作相同；设置 include_collections=False
    将得到与刷新确定是否为实例的行发出 UPDATE 相同的结果。
- en: '**[no_tags]**'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added “schema” argument to Sequence; use this with Postgres /Oracle when the
    sequence is located in an alternate schema. Implements part of, should fix.
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Sequence 添加了“schema”参数；当序列位于备用模式中时，与 Postgres /Oracle 一起使用。实现部分内容，应该修复。
- en: 'References: [#584](https://www.sqlalchemy.org/trac/ticket/584), [#761](https://www.sqlalchemy.org/trac/ticket/761)'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#584](https://www.sqlalchemy.org/trac/ticket/584), [#761](https://www.sqlalchemy.org/trac/ticket/761)
- en: '**[no_tags]**'
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed reflection of the empty string for mysql enums.
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mysql 枚举类型的空字符串反射问题。
- en: '**[no_tags]**'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Changed MySQL dialect to use the older LIMIT <offset>, <limit> syntax instead
    of LIMIT <l> OFFSET <o> for folks using 3.23.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 MySQL 方言更改为使用旧的 LIMIT <offset>, <limit> 语法，而不是 LIMIT <l> OFFSET <o>，适用于使用
    3.23 版本的用户。
- en: 'References: [#794](https://www.sqlalchemy.org/trac/ticket/794)'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#794](https://www.sqlalchemy.org/trac/ticket/794)
- en: '**[no_tags]**'
  id: totrans-926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added ‘passive_deletes=”all”’ flag to relation(), disables all nulling-out of
    foreign key attributes during a flush where the parent object is deleted.
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 relation() 添加了 ‘passive_deletes=”all”’ 标志；在删除父对象时禁用所有外键属性的置空。
- en: '**[no_tags]**'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Column defaults and onupdates, executing inline, will add parenthesis for subqueries
    and other parenthesis-requiring expressions
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行内联的列默认值和 onupdates 将为子查询和其他需要括号的表达式添加括号
- en: '**[no_tags]**'
  id: totrans-930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The behavior of String/Unicode types regarding that they auto-convert to TEXT/CLOB
    when no length is present now occurs *only* for an exact type of String or Unicode
    with no arguments. If you use VARCHAR or NCHAR (subclasses of String/Unicode)
    with no length, they will be interpreted by the dialect as VARCHAR/NCHAR; no “magic”
    conversion happens there. This is less surprising behavior and in particular this
    helps Oracle keep string-based bind parameters as VARCHARs and not CLOBs.
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在关于 String/Unicode 类型的行为是，只有在没有长度的情况下才会自动转换为 TEXT/CLOB 类型，仅适用于没有参数的确切类型的 String
    或 Unicode。如果您使用没有长度的 VARCHAR 或 NCHAR（String/Unicode 的子类），它们将被方言解释为 VARCHAR/NCHAR；这里不会发生“神奇”的转换。这是更少令人惊讶的行为，特别是这有助于
    Oracle 将基于字符串的绑定参数保持为 VARCHAR，而不是 CLOB。
- en: 'References: [#793](https://www.sqlalchemy.org/trac/ticket/793)'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#793](https://www.sqlalchemy.org/trac/ticket/793)
- en: '**[no_tags]**'
  id: totrans-933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixes to ShardedSession to work with deferred columns.
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 ShardedSession 进行了修复，以使其与延迟列一起工作。
- en: 'References: [#771](https://www.sqlalchemy.org/trac/ticket/771)'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#771](https://www.sqlalchemy.org/trac/ticket/771)
- en: '**[no_tags]**'
  id: totrans-936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: User-defined shard_chooser() function must accept “clause=None” argument; this
    is the ClauseElement passed to session.execute(statement) and can be used to determine
    correct shard id (since execute() doesn’t take an instance.)
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户定义的 shard_chooser() 函数必须接受“clause=None”参数；这是传递给 session.execute(statement)
    的 ClauseElement，并且可以用于确定正确的分片 id（因为 execute() 不接受实例）。
- en: '**[no_tags]**'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Adjusted operator precedence of NOT to match ‘==’ and others, so that ~(x <operator>
    y) produces NOT (x <op> y), which is better compatible with older MySQL versions..
    This doesn’t apply to “~(x==y)” as it does in 0.3 since ~(x==y) compiles to “x
    != y”, but still applies to operators like BETWEEN.
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 NOT 运算符的优先级，以匹配‘==’和其他运算符，因此~(x <operator> y)会产生 NOT (x <op> y)，这与旧版 MySQL
    更兼容。这不适用于“~(x==y)”，因为在 0.3 版本中像这样的表达式 ~(x==y) 会被编译成 “x != y”，但仍适用于像 BETWEEN 这样的运算符。
- en: 'References: [#764](https://www.sqlalchemy.org/trac/ticket/764)'
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#764](https://www.sqlalchemy.org/trac/ticket/764)
- en: '**[no_tags]**'
  id: totrans-941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Other tickets:,,.
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他票据：,,.
- en: 'References: [#728](https://www.sqlalchemy.org/trac/ticket/728), [#757](https://www.sqlalchemy.org/trac/ticket/757),
    [#768](https://www.sqlalchemy.org/trac/ticket/768), [#779](https://www.sqlalchemy.org/trac/ticket/779)'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#728](https://www.sqlalchemy.org/trac/ticket/728), [#757](https://www.sqlalchemy.org/trac/ticket/757),
    [#768](https://www.sqlalchemy.org/trac/ticket/768), [#779](https://www.sqlalchemy.org/trac/ticket/779)
- en: 0.4.0beta5
  id: totrans-944
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta5
- en: no release date
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: '**[no_tags]**'
  id: totrans-946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Connection pool fixes; the better performance of beta4 remains but fixes “connection
    overflow” and other bugs which were present (like).
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池修复；beta4 版本的更好性能仍然存在，但修复了“连接溢出”和其他存在的 bug（如）。
- en: 'References: [#754](https://www.sqlalchemy.org/trac/ticket/754)'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#754](https://www.sqlalchemy.org/trac/ticket/754)
- en: '**[no_tags]**'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed bugs in determining proper sync clauses from custom inherit conditions.
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从自定义继承条件中确定适当同步子句的错误。
- en: 'References: [#769](https://www.sqlalchemy.org/trac/ticket/769)'
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#769](https://www.sqlalchemy.org/trac/ticket/769)
- en: '**[no_tags]**'
  id: totrans-952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Extended ‘engine_from_config’ coercion for QueuePool size / overflow.
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于QueuePool大小/溢出，扩展了'engine_from_config'的转换。
- en: 'References: [#763](https://www.sqlalchemy.org/trac/ticket/763)'
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#763](https://www.sqlalchemy.org/trac/ticket/763)
- en: '**[no_tags]**'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: mysql views can be reflected again.
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql视图现在可以反射了。
- en: 'References: [#748](https://www.sqlalchemy.org/trac/ticket/748)'
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#748](https://www.sqlalchemy.org/trac/ticket/748)
- en: '**[no_tags]**'
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: AssociationProxy can now take custom getters and setters.
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AssociationProxy现在可以使用自定义的getter和setter。
- en: '**[no_tags]**'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed malfunctioning BETWEEN in orm queries.
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了orm查询中BETWEEN的失效。
- en: '**[no_tags]**'
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed OrderedProperties pickling
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了OrderedProperties的pickling问题。
- en: 'References: [#762](https://www.sqlalchemy.org/trac/ticket/762)'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#762](https://www.sqlalchemy.org/trac/ticket/762)
- en: '**[no_tags]**'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: SQL-expression defaults and sequences now execute “inline” for all non-primary
    key columns during an INSERT or UPDATE, and for all columns during an executemany()-style
    call. inline=True flag on any insert/update statement also forces the same behavior
    with a single execute(). result.postfetch_cols() is a collection of columns for
    which the previous single insert or update statement contained a SQL-side default
    expression.
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL表达式的默认值和序列现在在INSERT或UPDATE期间对所有非主键列执行“内联”操作，并在executemany()样式的调用期间对所有列执行。任何insert/update语句上的inline=True标志也会强制执行相同的行为，即单个execute()。result.postfetch_cols()是之前的单个insert或update语句中包含SQL端默认表达式的列的集合。
- en: '**[no_tags]**'
  id: totrans-967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed PG executemany() behavior.
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PG executemany()的行为。
- en: 'References: [#759](https://www.sqlalchemy.org/trac/ticket/759)'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#759](https://www.sqlalchemy.org/trac/ticket/759)
- en: '**[no_tags]**'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: postgres reflects tables with autoincrement=False for primary key columns which
    have no defaults.
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres针对没有默认值的主键列的表反射自动增量=False。
- en: '**[no_tags]**'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: postgres no longer wraps executemany() with individual execute() calls, instead
    favoring performance. “rowcount”/”concurrency” checks with deleted items (which
    use executemany) are disabled with PG since psycopg2 does not report proper rowcount
    for executemany().
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres现在不再用单独的execute()调用包装executemany()，而是更偏向性能。在PG上，使用executemany()的“rowcount”/“concurrency”检查与删除项目（使用executemany）被禁用，因为psycopg2不会报告executemany()的正确rowcount。
- en: '**[fixed] [tickets]**'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#742](https://www.sqlalchemy.org/trac/ticket/742)'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#742](https://www.sqlalchemy.org/trac/ticket/742)
- en: '**[fixed] [tickets]**'
  id: totrans-976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#748](https://www.sqlalchemy.org/trac/ticket/748)'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#748](https://www.sqlalchemy.org/trac/ticket/748)
- en: '**[fixed] [tickets]**'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#760](https://www.sqlalchemy.org/trac/ticket/760)'
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#760](https://www.sqlalchemy.org/trac/ticket/760)
- en: '**[fixed] [tickets]**'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#762](https://www.sqlalchemy.org/trac/ticket/762)'
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#762](https://www.sqlalchemy.org/trac/ticket/762)
- en: '**[fixed] [tickets]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#763](https://www.sqlalchemy.org/trac/ticket/763)'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#763](https://www.sqlalchemy.org/trac/ticket/763)
- en: 0.4.0beta4
  id: totrans-984
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta4
- en: 'Released: Wed Aug 22 2007'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月22日（星期三）
- en: '**[no_tags]**'
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'Tidied up what ends up in your namespace when you ‘from sqlalchemy import *’:'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您从SQLAlchemy导入*时，整理了您的命名空间中的内容：
- en: '**[no_tags]**'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: ’table’ and ‘column’ are no longer imported. They remain available by direct
    reference (as in ‘sql.table’ and ‘sql.column’) or a glob import from the sql package.
    It was too easy to accidentally use a sql.expressions.table instead of schema.Table
    when just starting out with SQLAlchemy, likewise column.
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''table''和''column''不再被导入。它们仍可通过直接引用（如''sql.table''和''sql.column''）或从sql包进行全局导入使用。在刚开始使用SQLAlchemy时，意外使用sql.expressions.table而不是schema.Table变得太容易了，同样的情况也出现在column中。'
- en: '**[no_tags]**'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Internal-ish classes like ClauseElement, FromClause, NullTypeEngine, etc., are
    also no longer imported into your namespace
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似ClauseElement、FromClause、NullTypeEngine等的内部类也不再被导入到您的命名空间中。
- en: '**[no_tags]**'
  id: totrans-992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The ‘Smallinteger’ compatibility name (small i!) is no longer imported, but
    remains in schema.py for now. SmallInteger (big I!) is still imported.
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''Smallinteger''兼容名称（小i！）不再被导入，但暂时仍保留在schema.py中。SmallInteger（大I！）仍然被导入。'
- en: '**[no_tags]**'
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The connection pool uses a “threadlocal” strategy internally to return the same
    connection already bound to a thread, for “contextual” connections; these are
    the connections used when you do a “connectionless” execution like insert().execute().
    This is like a “partial” version of the “threadlocal” engine strategy but without
    the thread-local transaction part of it. We’re hoping it reduces connection pool
    overhead as well as database usage. However, if it proves to impact stability
    in a negative way, we’ll roll it right back.
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池在内部使用“threadlocal”策略，以返回已绑定到线程的相同连接，用于“上下文”连接；这些连接在执行“无连接”操作时使用，比如insert().execute()。这类似于“threadlocal”引擎策略的“部分”版本，但没有其中的线程本地事务部分。我们希望它减少连接池开销以及数据库使用。但是，如果证明对稳定性产生负面影响，我们将立即撤销。
- en: '**[no_tags]**'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fix to bind param processing such that “False” values (like blank strings) still
    get processed/encoded.
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了绑定参数处理，使得“False”值（如空字符串）仍然会被处理/编码。
- en: '**[no_tags]**'
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fix to select() “generative” behavior, such that calling column(), select_from(),
    correlate(), and with_prefix() does not modify the original select object
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select()的“生成”行为，使得调用column()、select_from()、correlate()和with_prefix()不会修改原始select对象
- en: 'References: [#752](https://www.sqlalchemy.org/trac/ticket/752)'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#752](https://www.sqlalchemy.org/trac/ticket/752)
- en: '**[no_tags]**'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added a “legacy” adapter to types, such that user-defined TypeEngine and TypeDecorator
    classes which define convert_bind_param() and/or convert_result_value() will continue
    to function. Also supports calling the super() version of those methods.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个“legacy”适配器到types，使得用户定义的TypeEngine和TypeDecorator类，定义了convert_bind_param()和/或convert_result_value()的仍然可以正常工作。还支持调用这些方法的super()版本。
- en: '**[no_tags]**'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added session.prune(), trims away instances cached in a session that are no
    longer referenced elsewhere. (A utility for strong-ref identity maps).
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了session.prune()，修剪会话中不再在其他地方引用的实例。 （用于强引用标识映射的实用程序）。
- en: '**[no_tags]**'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added close() method to Transaction. Closes out a transaction using rollback
    if it’s the outermost transaction, otherwise just ends without affecting the outer
    transaction.
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Transaction添加了close()方法。如果是最外层事务，则使用回滚结束事务，否则仅结束而不影响外部事务。
- en: '**[no_tags]**'
  id: totrans-1007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Transactional and non-transactional Session integrates better with bound connection;
    a close() will ensure that connection transactional state is the same as that
    which existed on it before being bound to the Session.
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事务性和非事务性Session与绑定连接更好地集成；close()将确保连接的事务状态与绑定到Session之前的状态相同。
- en: '**[no_tags]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Modified SQL operator functions to be module-level operators, allowing SQL expressions
    to be pickleable.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了SQL操作函数为模块级操作符，允许SQL表达式可被pickle化。
- en: 'References: [#735](https://www.sqlalchemy.org/trac/ticket/735)'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#735](https://www.sqlalchemy.org/trac/ticket/735)
- en: '**[no_tags]**'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Small adjustment to mapper class.__init__ to allow for Py2.6 object.__init__()
    behavior.
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对mapper类的__init__进行小调整，以允许Py2.6对象的__init__()行为。
- en: '**[no_tags]**'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed ‘prefix’ argument for select()
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select()的‘prefix’参数
- en: '**[no_tags]**'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Connection.begin() no longer accepts nested=True, this logic is now all in begin_nested().
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.begin()不再接受nested=True，这个逻辑现在都在begin_nested()中。
- en: '**[no_tags]**'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixes to new “dynamic” relation loader involving cascades
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及级联的新“动态”关系加载器的问题
- en: '**[fixed] [tickets]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#735](https://www.sqlalchemy.org/trac/ticket/735)'
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#735](https://www.sqlalchemy.org/trac/ticket/735)
- en: '**[fixed] [tickets]**'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#752](https://www.sqlalchemy.org/trac/ticket/752)'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#752](https://www.sqlalchemy.org/trac/ticket/752)
- en: 0.4.0beta3
  id: totrans-1024
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta3
- en: 'Released: Thu Aug 16 2007'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Aug 16 2007
- en: '**[no_tags]**'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'SQL types optimization:'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL类型优化：
- en: '**[no_tags]**'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: New performance tests show a combined mass-insert/mass-select test as having
    68% fewer function calls than the same test run against 0.3.
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的性能测试显示，与0.3版本相比，组合的大规模插入/大规模选择测试的函数调用减少了68%。
- en: '**[no_tags]**'
  id: totrans-1030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: General performance improvement of result set iteration is around 10-20%.
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集迭代的一般性能提升约为10-20%。
- en: '**[no_tags]**'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: In types.AbstractType, convert_bind_param() and convert_result_value() have
    migrated to callable-returning bind_processor() and result_processor() methods.
    If no callable is returned, no pre/post processing function is called.
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在types.AbstractType中，convert_bind_param()和convert_result_value()已迁移到返回可调用的bind_processor()和result_processor()方法。如果没有返回可调用对象，则不会调用任何预处理/后处理函数。
- en: '**[no_tags]**'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Hooks added throughout base/sql/defaults to optimize the calling of bind param/result
    processors so that method call overhead is minimized.
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在base/sql/defaults中添加了钩子以优化绑定参数/结果处理器的调用，以便最小化方法调用开销。
- en: '**[no_tags]**'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Support added for executemany() scenarios such that unneeded “last row id” logic
    doesn’t kick in, parameters aren’t excessively traversed.
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持添加了对executemany()场景的支持，以便不需要的“最后一行id”逻辑不会触发，参数不会被过度遍历。
- en: '**[no_tags]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added ‘inherit_foreign_keys’ arg to mapper().
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了‘inherit_foreign_keys’参数到mapper()。
- en: '**[no_tags]**'
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added support for string date passthrough in sqlite.
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对sqlite中字符串日期传递的支持。
- en: '**[fixed] [tickets]**'
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#738](https://www.sqlalchemy.org/trac/ticket/738)'
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#738](https://www.sqlalchemy.org/trac/ticket/738)
- en: '**[fixed] [tickets]**'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#739](https://www.sqlalchemy.org/trac/ticket/739)'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#739](https://www.sqlalchemy.org/trac/ticket/739)
- en: '**[fixed] [tickets]**'
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#743](https://www.sqlalchemy.org/trac/ticket/743)'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#743](https://www.sqlalchemy.org/trac/ticket/743)
- en: '**[fixed] [tickets]**'
  id: totrans-1048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#744](https://www.sqlalchemy.org/trac/ticket/744)'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#744](https://www.sqlalchemy.org/trac/ticket/744)
- en: 0.4.0beta2
  id: totrans-1050
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta2
- en: 'Released: Tue Aug 14 2007'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月14日星期二
- en: oracle
  id: totrans-1052
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [improvements.]**'
  id: totrans-1053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: Auto-commit after LOAD DATA INFILE for mysql.
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mysql中LOAD DATA INFILE后自动提交。
- en: '**[oracle] [improvements.]**'
  id: totrans-1055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: A rudimental SessionExtension class has been added, allowing user-defined functionality
    to take place at flush(), commit(), and rollback() boundaries.
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个基本的SessionExtension类，允许在flush()、commit()和rollback()边界处发生用户定义的功能。
- en: '**[oracle] [improvements.]**'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: Added engine_from_config() function for helping to create_engine() from an .ini
    style config.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了engine_from_config()函数，以帮助从.ini样式配置创建engine()。
- en: '**[oracle] [improvements.]**'
  id: totrans-1059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: base_mapper() becomes a plain attribute.
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: base_mapper()变成了一个普通属性。
- en: '**[oracle] [improvements.]**'
  id: totrans-1061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: session.execute() and scalar() can search for a Table with which to bind from
    using the given ClauseElement.
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.execute()和scalar()可以通过给定的ClauseElement搜索要绑定的表。
- en: '**[oracle] [improvements.]**'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: Session automatically extrapolates tables from mappers with binds, also uses
    base_mapper so that inheritance hierarchies bind automatically.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话自动从具有绑定的映射器中推断表，还使用base_mapper，以便继承层次结构自动绑定。
- en: '**[oracle] [improvements.]**'
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: Moved ClauseVisitor traversal back to inlined non-recursive.
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ClauseVisitor遍历移回到内联的非递归方式。
- en: misc
  id: totrans-1067
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[fixed] [tickets]**'
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#730](https://www.sqlalchemy.org/trac/ticket/730)'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#730](https://www.sqlalchemy.org/trac/ticket/730)
- en: '**[fixed] [tickets]**'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#732](https://www.sqlalchemy.org/trac/ticket/732)'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#732](https://www.sqlalchemy.org/trac/ticket/732)
- en: '**[fixed] [tickets]**'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#733](https://www.sqlalchemy.org/trac/ticket/733)'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#733](https://www.sqlalchemy.org/trac/ticket/733)
- en: '**[fixed] [tickets]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [票务]**'
- en: 'References: [#734](https://www.sqlalchemy.org/trac/ticket/734)'
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#734](https://www.sqlalchemy.org/trac/ticket/734)
- en: 0.4.0beta1
  id: totrans-1076
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta1
- en: 'Released: Sun Aug 12 2007'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月12日星期日
- en: orm
  id: totrans-1078
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Speed! Along with recent speedups to ResultProxy, total number of function calls
    significantly reduced for large loads.
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！除了对ResultProxy的最近加速，对于大量加载，函数调用总数显著减少。
- en: '**[orm]**'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: test/perf/masseagerload.py reports 0.4 as having the fewest number of function
    calls across all SA versions (0.1, 0.2, and 0.3).
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: test/perf/masseagerload.py报告0.4版本在所有SA版本（0.1、0.2和0.3）中具有最少的函数调用次数。
- en: '**[orm]**'
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New collection_class api and implementation. Collections are now instrumented
    via decorations rather than proxying. You can now have collections that manage
    their own membership, and your class instance will be directly exposed on the
    relation property. The changes are transparent for most users.
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的collection_class api和实现。现在通过装饰而不是代理来检测集合。现在可以有管理自己成员资格的集合，并且您的类实例将直接暴露在关系属性上。对于大多数用户来说，这些更改是透明的。
- en: 'References: [#213](https://www.sqlalchemy.org/trac/ticket/213)'
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#213](https://www.sqlalchemy.org/trac/ticket/213)
- en: '**[orm]**'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: InstrumentedList (as it was) is removed, and relation properties no longer have
    ‘clear()’, ‘.data’, or any other added methods beyond those provided by the collection
    type. You are free, of course, to add them to a custom class.
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstrumentedList（如之前）已被移除，关系属性不再具有‘clear()’、‘.data’或任何其他除集合类型提供的方法。当然，您可以将它们添加到自定义类中。
- en: '**[orm]**'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: __setitem__-like assignments now fire remove events for the existing value,
    if any.
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似 __setitem__ 的赋值现在会为现有值触发删除事件，如果有的话。
- en: '**[orm]**'
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dict-likes used as collection classes no longer need to change __iter__ semantics-
    itervalues() is used by default instead. This is a backwards incompatible change.
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为集合类使用的类似字典的对象不再需要更改 __iter__ 语义- 默认使用 itervalues()。这是一个不兼容的变更。
- en: '**[orm]**'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Subclassing dict for a mapped collection is no longer needed in most cases.
    orm.collections provides canned implementations that key objects by a specified
    column or a custom function of your choice.
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，不再需要为映射集合子类化 dict。orm.collections 提供了按指定列或自定义函数键入对象的预制实现。
- en: '**[orm]**'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Collection assignment now requires a compatible type- assigning None to clear
    a collection or assigning a list to a dict collection will now raise an argument
    error.
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在集合赋值需要兼容的类型- 将 None 赋给一个集合以清空它，或将列表赋给一个字典集合将会引发参数错误。
- en: '**[orm]**'
  id: totrans-1096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: AttributeExtension moved to interfaces, and .delete is now .remove The event
    method signature has also been swapped around.
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AttributeExtension 移至接口，并且 .delete 现在是 .remove 事件方法签名也已经���换。
- en: '**[orm]**'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major overhaul for Query:'
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 进行了重大改进：
- en: '**[orm]**'
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: All selectXXX methods are deprecated. Generative methods are now the standard
    way to do things, i.e. filter(), filter_by(), all(), one(), etc. Deprecated methods
    are docstring’ed with their new replacements.
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有 selectXXX 方法已被弃用。生成方法现在是执行操作的标准方式，即 filter()、filter_by()、all()、one() 等。弃用的方法在其新替代品的文档字符串中有说明。
- en: '**[orm]**'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Class-level properties are now usable as query elements… no more ‘.c.’! “Class.c.propname”
    is now superseded by “Class.propname”. All clause operators are supported, as
    well as higher level operators such as Class.prop==<some instance> for scalar
    attributes, Class.prop.contains(<some instance>) and Class.prop.any(<some expression>)
    for collection-based attributes (all are also negatable). Table-based column expressions
    as well as columns mounted on mapped classes via ‘c’ are of course still fully
    available and can be freely mixed with the new attributes.
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将类级属性用作查询元素… 不再需要 ‘.c.’！“Class.c.propname” 现在被 “Class.propname” 取代。支持所有子句操作符，以及更高级别的操作符，如
    Class.prop==<some instance> 用于标量属性，Class.prop.contains(<some instance>) 和 Class.prop.any(<some
    expression>) 用于基于集合的属性（所有这些也是可否定的）。当然，基于表的列表达式以及通过 ‘c’ 挂载在映射类上的列仍然完全可用，并且可以与新属性自由混合。
- en: 'References: [#643](https://www.sqlalchemy.org/trac/ticket/643)'
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#643](https://www.sqlalchemy.org/trac/ticket/643)
- en: '**[orm]**'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed ancient query.select_by_attributename() capability.
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了古老的 query.select_by_attributename() 功能。
- en: '**[orm]**'
  id: totrans-1107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The aliasing logic used by eager loading has been generalized, so that it also
    adds full automatic aliasing support to Query. It’s no longer necessary to create
    an explicit Alias to join to the same tables multiple times; *even for self-referential
    relationships*.
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急加载使用的别名逻辑已经泛化，因此还为 Query 添加了完全自动的别名支持。不再需要为多次连接到相同表创建显式别名；*即使是自引用关系也是如此*。
- en: join() and outerjoin() take arguments “aliased=True”. Yhis causes their joins
    to be built on aliased tables; subsequent calls to filter() and filter_by() will
    translate all table expressions (yes, real expressions using the original mapped
    Table) to be that of the Alias for the duration of that join() (i.e. until reset_joinpoint()
    or another join() is called).
  id: totrans-1109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join() 和 outerjoin() 接受参数 “aliased=True”。这将导致它们的连接建立在别名表上；随后调用 filter() 和 filter_by()
    将会将所有表达式（是的，使用原始映射表的真实表达式）转换为别名的表达式，直到该 join() 结束（即重置 joinpoint() 或调用另一个 join()）。
- en: join() and outerjoin() take arguments “id=<somestring>”. When used with “aliased=True”,
    the id can be referenced by add_entity(cls, id=<somestring>) so that you can select
    the joined instances even if they’re from an alias.
  id: totrans-1110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join() 和 outerjoin() 接受参数 “id=<somestring>”。当与 “aliased=True” 一起使用时，可以通过 add_entity(cls,
    id=<somestring>) 引用 id，以便在从别名获取的情况下选择连接的实例。
- en: join() and outerjoin() now work with self-referential relationships! Using “aliased=True”,
    you can join as many levels deep as desired, i.e. query.join([‘children’, ‘children’],
    aliased=True); filter criterion will be against the rightmost joined table
  id: totrans-1111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join() 和 outerjoin() 现在可以用于自引用关系！使用 “aliased=True”，可以连接到任意深度的级别，例如 query.join([‘children’,
    ‘children’], aliased=True)；过滤条件将针对最右侧连接的表
- en: '**[orm]**'
  id: totrans-1112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added query.populate_existing(), marks the query to reload all attributes and
    collections of all instances touched in the query, including eagerly-loaded entities.
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了query.populate_existing()，标记查询以重新加载查询中触及的所有实例的所有属性和集合，包括急加载的实体。
- en: 'References: [#660](https://www.sqlalchemy.org/trac/ticket/660)'
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#660](https://www.sqlalchemy.org/trac/ticket/660)
- en: '**[orm]**'
  id: totrans-1115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added eagerload_all(), allows eagerload_all(‘x.y.z’) to specify eager loading
    of all properties in the given path.
  id: totrans-1116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了eagerload_all()，允许eagerload_all(‘x.y.z’)指定给定路径中所有属性的急加载。
- en: '**[orm]**'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major overhaul for Session:'
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话的重大改进：
- en: '**[orm]**'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New function which “configures” a session called “sessionmaker()”. Send various
    keyword arguments to this function once, returns a new class which creates a Session
    against that stereotype.
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能“配置”一个名为“sessionmaker()”的会话。一次向该函数发送各种关键字参数，返回一个新类，该类针对该模式创建一个会话。
- en: '**[orm]**'
  id: totrans-1121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: SessionTransaction removed from “public” API. You now can call begin()/ commit()/rollback()
    on the Session itself.
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从“public”API中移除了SessionTransaction。现在可以在Session本身上调用begin()/commit()/rollback()。
- en: '**[orm]**'
  id: totrans-1123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session also supports SAVEPOINT transactions; call begin_nested().
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话还支持SAVEPOINT事务；调用begin_nested()。
- en: '**[orm]**'
  id: totrans-1125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session supports two-phase commit behavior when vertically or horizontally partitioning
    (i.e., using more than one engine). Use twophase=True.
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当垂直或水平分区（即，使用多个引擎）时，会话支持两阶段提交行为。使用twophase=True。
- en: '**[orm]**'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session flag “transactional=True” produces a session which always places itself
    into a transaction when first used. Upon commit(), rollback() or close(), the
    transaction ends; but begins again on the next usage.
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话标志“transactional=True”会产生一个会话，当首次使用时总是将自身置于事务中。在commit()、rollback()或close()时，事务结束；但在下一次使用时重新开始。
- en: '**[orm]**'
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session supports “autoflush=True”. This issues a flush() before each query.
    Use in conjunction with transactional, and you can just save()/update() and then
    query, the new objects will be there. Use commit() at the end (or flush() if non-transactional)
    to flush remaining changes.
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话支持“autoflush=True”。这会在每次查询之前发出一个flush()。与transactional一起使用，您可以只保存()/更新()然后查询，新对象将在那里。在最后使用commit()（或flush()如果非事务性）来刷新剩余的更改。
- en: '**[orm]**'
  id: totrans-1131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New scoped_session() function replaces SessionContext and assignmapper. Builds
    onto “sessionmaker()” concept to produce a class whose Session() construction
    returns the thread-local session. Or, call all Session methods as class methods,
    i.e. Session.save(foo); Session.commit(). just like the old “objectstore” days.
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的scoped_session()函数取代了SessionContext和assignmapper。构建在“sessionmaker()”概念之上，以产生一个类，其Session()构造返回线程本地会话。或者，将所有Session方法作为类方法调用，即Session.save(foo);
    Session.commit()。就像旧的“objectstore”时代一样。
- en: '**[orm]**'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added new “binds” argument to Session to support configuration of multiple binds
    with sessionmaker() function.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的“binds”参数到Session，以支持使用sessionmaker()函数配置多个绑定。
- en: '**[orm]**'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rudimental SessionExtension class has been added, allowing user-defined functionality
    to take place at flush(), commit(), and rollback() boundaries.
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个基本的SessionExtension类，允许在flush()、commit()和rollback()边界发生时进行用户定义的功能。
- en: '**[orm]**'
  id: totrans-1137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query-based relation()s available with dynamic_loader(). This is a *writable*
    collection (supporting append() and remove()) which is also a live Query object
    when accessed for reads. Ideal for dealing with very large collections where only
    partial loading is desired.
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于查询的relation()可通过dynamic_loader()使用。这是一个*writable*集合（支持append()和remove()），当用于读取时也是一个活动的Query对象。适用于处理仅希望部分加载的非常大的集合。
- en: '**[orm]**'
  id: totrans-1139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush()-embedded inline INSERT/UPDATE expressions. Assign any SQL expression,
    like “sometable.c.column + 1”, to an instance’s attribute. Upon flush(), the mapper
    detects the expression and embeds it directly in the INSERT or UPDATE statement;
    the attribute gets deferred on the instance so it loads the new value the next
    time you access it.
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush()-嵌入式的内联INSERT/UPDATE表达式。将任何SQL表达式，如“sometable.c.column + 1”，分配给实例的属性。在flush()时，映射器检测到表达式并直接嵌入到INSERT或UPDATE语句中；属性在实例上被延迟，因此在下次访问时加载新值。
- en: '**[orm]**'
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rudimental sharding (horizontal scaling) system is introduced. This system
    uses a modified Session which can distribute read and write operations among multiple
    databases, based on user-defined functions defining the “sharding strategy”. Instances
    and their dependents can be distributed and queried among multiple databases based
    on attribute values, round-robin approaches or any other user-defined system.
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了一个基本的分片（水平扩展）系统。该系统使用修改后的Session，可以根据用户定义的“分片策略”分发读取和写入操作到多个数据库。实例及其依赖项可以根据属性值、轮询方法或任何其他用户定义的系统分布和查询到多个数据库。
- en: 'References: [#618](https://www.sqlalchemy.org/trac/ticket/618)'
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#618](https://www.sqlalchemy.org/trac/ticket/618)
- en: '**[orm]**'
  id: totrans-1144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Eager loading has been enhanced to allow even more joins in more places. It
    now functions at any arbitrary depth along self-referential and cyclical structures.
    When loading cyclical structures, specify “join_depth” on relation() indicating
    how many times you’d like the table to join to itself; each level gets a distinct
    table alias. The alias names themselves are generated at compile time using a
    simple counting scheme now and are a lot easier on the eyes, as well as of course
    completely deterministic.
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急切加载已经增强，允许更多的连接在更多的地方。现在它可以在自引用和循环结构的任意深度处运行。在加载循环结构时，在relation()上指定“join_depth”，指示您希望表自连接多少次；每个级别都会得到一个不同的表别名。别名名称现在是在编译时使用简单的计数方案生成的，更容易阅读，当然完全确定性。
- en: 'References: [#659](https://www.sqlalchemy.org/trac/ticket/659)'
  id: totrans-1146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#659](https://www.sqlalchemy.org/trac/ticket/659)
- en: '**[orm]**'
  id: totrans-1147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added composite column properties. This allows you to create a type which is
    represented by more than one column, when using the ORM. Objects of the new type
    are fully functional in query expressions, comparisons, query.get() clauses, etc.
    and act as though they are regular single-column scalars… except they’re not!
    Use the function composite(cls, *columns) inside of the mapper’s “properties”
    dict, and instances of cls will be created/mapped to a single attribute, comprised
    of the values corresponding to *columns.
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了复合列属性。这允许您创建一个由多个列表示的类型，当使用ORM时。新类型的对象在查询表达式、比较、query.get()子句等方面都是完全功能的，并且表现得就像是常规的单列标量…除了它们不是！在映射器的“属性”字典中使用函数composite(cls,
    *columns)，并且cls的实例将被创建/映射到一个单属性，由对应于*columns的值组成。
- en: 'References: [#211](https://www.sqlalchemy.org/trac/ticket/211)'
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#211](https://www.sqlalchemy.org/trac/ticket/211)
- en: '**[orm]**'
  id: totrans-1150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved support for custom column_property() attributes which feature correlated
    subqueries, works better with eager loading now.
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对具有相关子查询的自定义column_property()属性的支持得到了改进，现在与急切加载更好地配合。
- en: '**[orm]**'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Primary key “collapse” behavior; the mapper will analyze all columns in its
    given selectable for primary key “equivalence”, that is, columns which are equivalent
    via foreign key relationship or via an explicit inherit_condition. primarily for
    joined-table inheritance scenarios where different named PK columns in inheriting
    tables should “collapse” into a single-valued (or fewer-valued) primary key. Fixes
    things like.
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主键“折叠”行为；映射器将分析其给定可选择的所有列，以获取主键“等效性”，即通过外键关系或显式继承条件等方式等效的列。主要用于联合表继承场景，其中继承表中的不同命名PK列应“折叠”为单值（或更少值）主键。修复了诸如此类的问题。
- en: 'References: [#611](https://www.sqlalchemy.org/trac/ticket/611)'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#611](https://www.sqlalchemy.org/trac/ticket/611)
- en: '**[orm]**'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Joined-table inheritance will now generate the primary key columns of all inherited
    classes against the root table of the join only. This implies that each row in
    the root table is distinct to a single instance. If for some rare reason this
    is not desirable, explicit primary_key settings on individual mappers will override
    it.
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 联合表继承现在将所有继承类的主键列生成到联接的根表中。这意味着根表中的每一行对应一个实例。如果出于某种罕见原因不希望这样，单独映射器上的显式primary_key设置将覆盖它。
- en: '**[orm]**'
  id: totrans-1157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When “polymorphic” flags are used with joined-table or single-table inheritance,
    all identity keys are generated against the root class of the inheritance hierarchy;
    this allows query.get() to work polymorphically using the same caching semantics
    as a non-polymorphic get. Note that this currently does not work with concrete
    inheritance.
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当“多态”标志与联合表或单表继承一起使用时，所有标识键都针对继承层次结构的根类生成；这允许查询.get()以与非多态get相同的缓存语义多态工作。请注意，这目前不适用于具体继承。
- en: '**[orm]**'
  id: totrans-1159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Secondary inheritance loading: polymorphic mappers can be constructed *without*
    a select_table argument. inheriting mappers whose tables were not represented
    in the initial load will issue a second SQL query immediately, once per instance
    (i.e. not very efficient for large lists), in order to load the remaining columns.'
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 次要继承加载：可以构建多态映射器而不需要select_table参数。继承映射器的表在初始加载中没有被表示，将立即发出第二个SQL查询，每个实例一次（对于大型列表来说效率不高），以加载剩余的列。
- en: '**[orm]**'
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Secondary inheritance loading can also move its second query into a column-level
    “deferred” load, via the “polymorphic_fetch” argument, which can be set to ‘select’
    or ‘deferred’
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 次要继承加载也可以将其第二个查询移动到列级“延迟”加载中，通过“polymorphic_fetch”参数，可以设置为“select”或“deferred”。
- en: '**[orm]**'
  id: totrans-1163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s now possible to map only a subset of available selectable columns onto
    mapper properties, using include_columns/exclude_columns..
  id: totrans-1164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以仅将可选择的列的子集映射到映射器属性中，使用include_columns/exclude_columns。
- en: 'References: [#696](https://www.sqlalchemy.org/trac/ticket/696)'
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#696](https://www.sqlalchemy.org/trac/ticket/696)
- en: '**[orm]**'
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added undefer_group() MapperOption, sets a set of “deferred” columns joined
    by a “group” to load as “undeferred”.
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了undefer_group() MapperOption，设置一组由“group”连接的“延迟”列以作为“未延迟”加载。
- en: '**[orm]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Rewrite of the “deterministic alias name” logic to be part of the SQL layer,
    produces much simpler alias and label names more in the style of Hibernate
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了“确定性别名”逻辑，使其成为SQL层的一部分，生成更简单的别名和标签名称，更符合Hibernate的风格
- en: sql
  id: totrans-1170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Speed! Clause compilation as well as the mechanics of SQL constructs have been
    streamlined and simplified to a significant degree, for a 20-30% improvement of
    the statement construction/compilation overhead of 0.3.
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！子句编译以及SQL构造的机制已经被简化和简化到一个显著程度，使语句构造/编译的开销减少了20-30%，为0.3。
- en: '**[sql]**'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: All “type” keyword arguments, such as those to bindparam(), column(), Column(),
    and func.<something>(), renamed to “type_”. Those objects still name their “type”
    attribute as “type”.
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有“type”关键字参数，如bindparam()、column()、Column()和func.<something>()，都重命名为“type_”。这些对象仍然将它们的“type”属性命名为“type”。
- en: '**[sql]**'
  id: totrans-1175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: case_sensitive=(True|False) setting removed from schema items, since checking
    this state added a lot of method call overhead and there was no decent reason
    to ever set it to False. Table and column names which are all lower case will
    be treated as case-insensitive (yes we adjust for Oracle’s UPPERCASE style too).
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从模式项中移除了case_sensitive=(True|False)设置，因为检查这种状态会增加很多方法调用开销，而且从来没有一个合理的理由将其设置为False。所有小写的表名和列名都将被视为不区分大小写（是的，我们也适应了Oracle的大写风格）。
- en: extensions
  id: totrans-1177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-1178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: proxyengine is temporarily removed, pending an actually working replacement.
  id: totrans-1179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: proxyengine暂时移除，等待一个真正有效的替代品。
- en: '**[extensions]**'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: SelectResults has been replaced by Query. SelectResults / SelectResultsExt still
    exist but just return a slightly modified Query object for backwards-compatibility.
    join_to() method from SelectResults isn’t present anymore, need to use join().
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults已被Query取代。SelectResults / SelectResultsExt仍然存在，但只是返回一个稍微修改的Query对象以保持向后兼容性。SelectResults的join_to()方法不再存在，需要使用join()。
- en: mysql
  id: totrans-1182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Table and column names loaded via reflection are now Unicode.
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过反射加载的表名和列名现在都是Unicode。
- en: '**[mysql]**'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: All standard column types are now supported, including SET.
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持所有标准列类型，包括SET。
- en: '**[mysql]**'
  id: totrans-1187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Table reflection can now be performed in as little as one round-trip.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表反射现在可以在一次往返中执行。
- en: '**[mysql]**'
  id: totrans-1189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ANSI and ANSI_QUOTES sql modes are now supported.
  id: totrans-1190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持ANSI和ANSI_QUOTES SQL模式。
- en: '**[mysql]**'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Indexes are now reflected.
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在反映了索引。
- en: oracle
  id: totrans-1193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Very rudimental support for OUT parameters added; use sql.outparam(name, type)
    to set up an OUT parameter, just like bindparam(); after execution, values are
    available via result.out_parameters dictionary.
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对OUT参数的非常基本的支持；使用sql.outparam(name, type)设置一个OUT参数，就像bindparam()一样；执行后，值可以通过result.out_parameters字典获得。
- en: 'References: [#507](https://www.sqlalchemy.org/trac/ticket/507)'
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#507](https://www.sqlalchemy.org/trac/ticket/507)
- en: misc
  id: totrans-1197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[transactions]**'
  id: totrans-1198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added context manager (with statement) support for transactions.
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为事务添加了上下文管理器（with语句）支持。
- en: '**[transactions]**'
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added support for two phase commit, works with mysql and postgres so far.
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对两阶段提交的支持，目前与mysql和postgres一起使用。
- en: '**[transactions]**'
  id: totrans-1202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added a subtransaction implementation that uses savepoints.
  id: totrans-1203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个使用保存点的子事务实现。
- en: '**[transactions]**'
  id: totrans-1204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[事务]**'
- en: Added support for savepoints.
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了保存点的支持。
- en: '**[metadata]**'
  id: totrans-1206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Tables can be reflected from the database en-masse without declaring them in
    advance. MetaData(engine, reflect=True) will load all tables present in the database,
    or use metadata.reflect() for finer control.
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以从数据库中一次性反射出表，而不需要预先声明它们。MetaData(engine, reflect=True) 将加载数据库中存在的所有表，或者使用
    metadata.reflect() 进行更精细的控制。
- en: '**[metadata]**'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: DynamicMetaData has been renamed to ThreadLocalMetaData
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DynamicMetaData 已重命名为 ThreadLocalMetaData
- en: '**[metadata]**'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: The ThreadLocalMetaData constructor now takes no arguments.
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ThreadLocalMetaData 构造函数现在不接受参数。
- en: '**[metadata]**'
  id: totrans-1212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: BoundMetaData has been removed- regular MetaData is equivalent
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BoundMetaData 已被移除，常规 MetaData 是等效的。
- en: '**[metadata]**'
  id: totrans-1214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Numeric and Float types now have an “asdecimal” flag; defaults to True for Numeric,
    False for Float. When True, values are returned as decimal.Decimal objects; when
    False, values are returned as float(). The defaults of True/False are already
    the behavior for PG and MySQL’s DBAPI modules.
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数字和浮点类型现在有一个“asdecimal”标志；对于 Numeric，默认值为 True，对于 Float，默认值为 False。当为 True 时，值以
    decimal.Decimal 对象返回；当为 False 时，值以 float() 返回。True/False 的默认值已经是 PG 和 MySQL 的
    DBAPI 模块的行为。
- en: 'References: [#646](https://www.sqlalchemy.org/trac/ticket/646)'
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#646](https://www.sqlalchemy.org/trac/ticket/646)
- en: '**[metadata]**'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: New SQL operator implementation which removes all hardcoded operators from expression
    structures and moves them into compilation; allows greater flexibility of operator
    compilation; for example, “+” compiles to “||” when used in a string context,
    or “concat(a,b)” on MySQL; whereas in a numeric context it compiles to “+”. Fixes.
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 SQL 运算符实现将所有硬编码的运算符从表达式结构中移除，并将它们移入编译中；允许更大灵活性的运算符编译；例如，在字符串上下文中，“+” 编译为“||”，在
    MySQL 上则编译为“concat(a,b)”；而在数值上下文中，它编译为“+”。修复。
- en: 'References: [#475](https://www.sqlalchemy.org/trac/ticket/475)'
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#475](https://www.sqlalchemy.org/trac/ticket/475)
- en: '**[metadata]**'
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: ”Anonymous” alias and label names are now generated at SQL compilation time
    in a completely deterministic fashion… no more random hex IDs
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “匿名”别名和标签名称现在以完全确定性的方式在 SQL 编译时生成……不再是随机的十六进制 ID
- en: '**[metadata]**'
  id: totrans-1222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Significant architectural overhaul to SQL elements (ClauseElement). All elements
    share a common “mutability” framework which allows a consistent approach to in-place
    modifications of elements as well as generative behavior. Improves stability of
    the ORM which makes heavy usage of mutations to SQL expressions.
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQL 元素（ClauseElement）进行了重大的架构改造。所有元素共享一个通用的“可变性”框架，允许对元素进行一致的原地修改以及生成行为。改进了
    ORM 的稳定性，ORM 对 SQL 表达式的变异使用频繁。
- en: '**[metadata]**'
  id: totrans-1224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: select() and union()’s now have “generative” behavior. Methods like order_by()
    and group_by() return a *new* instance - the original instance is left unchanged.
    Non-generative methods remain as well.
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 和 union() 现在具有“生成”行为。order_by() 和 group_by() 等方法返回一个 *新* 实例——原始实例保持不变。非生成方法也保留不变。
- en: '**[metadata]**'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: The internals of select/union vastly simplified- all decision making regarding
    “is subquery” and “correlation” pushed to SQL generation phase. select() elements
    are now *never* mutated by their enclosing containers or by any dialect’s compilation
    process
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select/union 的内部大大简化——所有关于“是否为子查询”和“关联性”的决策都推迟到 SQL 生成阶段。select() 元素现在永远不会被其包含的容器或任何方言的编译过程修改。
- en: 'References: [#52](https://www.sqlalchemy.org/trac/ticket/52), [#569](https://www.sqlalchemy.org/trac/ticket/569)'
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#52](https://www.sqlalchemy.org/trac/ticket/52)，[#569](https://www.sqlalchemy.org/trac/ticket/569)
- en: '**[metadata]**'
  id: totrans-1229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: select(scalar=True) argument is deprecated; use select(..).as_scalar(). The
    resulting object obeys the full “column” interface and plays better within expressions.
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select(scalar=True) 参数已弃用；使用 select(..).as_scalar()。生成的对象遵循完整的“列”接口，并在表达式中表现更好。
- en: '**[metadata]**'
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added select().with_prefix(‘foo’) allowing any set of keywords to be placed
    before the columns clause of the SELECT
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 select().with_prefix('foo')，允许在 SELECT 的列子句之前放置任何一组关键字。
- en: 'References: [#504](https://www.sqlalchemy.org/trac/ticket/504)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#504](https://www.sqlalchemy.org/trac/ticket/504)
- en: '**[metadata]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added array slice support to row[<index>]
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对行[<index>]的数组切片支持。
- en: 'References: [#686](https://www.sqlalchemy.org/trac/ticket/686)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#686](https://www.sqlalchemy.org/trac/ticket/686)
- en: '**[metadata]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Result sets make a better attempt at matching the DBAPI types present in cursor.description
    to the TypeEngine objects defined by the dialect, which are then used for result-processing.
    Note this only takes effect for textual SQL; constructed SQL statements always
    have an explicit type map.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集将更好地尝试将游标描述中存在的 DBAPI 类型与方言定义的 TypeEngine 对象进行匹配，然后用于结果处理。请注意，这仅对文本 SQL 生效；构造的
    SQL 语句始终具有显式类型映射。
- en: '**[metadata]**'
  id: totrans-1239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata]**'
- en: Result sets from CRUD operations close their underlying cursor immediately and
    will also autoclose the connection if defined for the operation; this allows more
    efficient usage of connections for successive CRUD operations with less chance
    of “dangling connections”.
  id: totrans-1240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CRUD 操作的结果集立即关闭其底层游标，并且如果为操作定义了自动关闭连接，则也将自动关闭连接；这允许更有效地使用连接进行连续的 CRUD 操作，减少“悬挂连接”的机会。
- en: '**[metadata]**'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata]**'
- en: Column defaults and onupdate Python functions (i.e. passed to ColumnDefault)
    may take zero or one arguments; the one argument is the ExecutionContext, from
    which you can call “context.parameters[someparam]” to access the other bind parameter
    values affixed to the statement. The connection used for the execution is available
    as well so that you can pre-execute statements.
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列默认值和 onupdate Python 函数（即传递给 ColumnDefault 的函数）可以接受零个或一个参数；一个参数是 ExecutionContext，您可以从中调用“context.parameters[someparam]”来访问附加到语句的其他绑定参数值。所使用的连接也可用，以便您可以预执行语句。
- en: 'References: [#559](https://www.sqlalchemy.org/trac/ticket/559)'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#559](https://www.sqlalchemy.org/trac/ticket/559)
- en: '**[metadata]**'
  id: totrans-1244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata]**'
- en: Added “explicit” create/drop/execute support for sequences (i.e. you can pass
    a “connectable” to each of those methods on Sequence).
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为序列（即你可以在 Sequence 的每个方法上传递一个“connectable”来支持“显式”创建/删除/执行）添加了“显式”创建/删除/执行的支持。
- en: '**[metadata]**'
  id: totrans-1246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata]**'
- en: Better quoting of identifiers when manipulating schemas.
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在操纵模式标识符时更好地引用标识符。
- en: '**[metadata]**'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata]**'
- en: Standardized the behavior for table reflection where types can’t be located;
    NullType is substituted instead, warning is raised.
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准化了表反射的行为，当无法定位类型时，将替换为 NullType，并发出警告。
- en: '**[metadata]**'
  id: totrans-1250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[metadata]**'
- en: ColumnCollection (i.e. the ‘c’ attribute on tables) follows dictionary semantics
    for “__contains__”
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnCollection（即表上的‘c’属性）遵循“__contains__”的字典语义。
- en: 'References: [#606](https://www.sqlalchemy.org/trac/ticket/606)'
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#606](https://www.sqlalchemy.org/trac/ticket/606)
- en: '**[engines]**'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Speed! The mechanics of result processing and bind parameter processing have
    been overhauled, streamlined and optimized to issue as little method calls as
    possible. Bench tests for mass INSERT and mass rowset iteration both show 0.4
    to be over twice as fast as 0.3, using 68% fewer function calls.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！结果处理和绑定参数处理的机制已进行了彻底的改进、简化和优化，以尽可能少地发出方法调用。大量 INSERT 和大量行集迭代的基准测试显示，0.4 的速度是
    0.3 的两倍多，使用的函数调用减少了 68%。
- en: '**[engines]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: You can now hook into the pool lifecycle and run SQL statements or other logic
    at new each DBAPI connection, pool check-out and check-in.
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在可以钩入池的生命周期，并在每次新的 DBAPI 连接、池检出和检入时运行 SQL 语句或其他逻辑。
- en: '**[engines]**'
  id: totrans-1257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Connections gain a .properties collection, with contents scoped to the lifetime
    of the underlying DBAPI connection
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接增加了 .properties 集合，其中的内容限定为底层 DBAPI 连接的生命周期
- en: '**[engines]**'
  id: totrans-1259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Removed auto_close_cursors and disallow_open_cursors arguments from Pool; reduces
    overhead as cursors are normally closed by ResultProxy and Connection.
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 Pool 中删除了 auto_close_cursors 和 disallow_open_cursors 参数；由于游标通常由 ResultProxy
    和 Connection 关闭，因此减少了开销。
- en: '**[postgres]**'
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added PGArray datatype for using postgres array datatypes.
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PGArray 数据类型，用于使用 postgres 数组数据类型。
- en: 0.4.8
  id: totrans-1263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.8
- en: 'Released: Sun Oct 12 2008'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sun Oct 12 2008
- en: orm
  id: totrans-1265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding inherit_condition passed with “A=B” versus “B=A” leading
    to errors
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与传递的 inherit_condition 中的“A=B”与“B=A”导致错误的错误。
- en: 'References: [#1039](https://www.sqlalchemy.org/trac/ticket/1039)'
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1039](https://www.sqlalchemy.org/trac/ticket/1039)
- en: '**[orm]**'
  id: totrans-1269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Changes made to new, dirty and deleted collections in SessionExtension.before_flush()
    will take effect for that flush.
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SessionExtension.before_flush() 中对新的、脏的和已删除的集合所做的更改将在该次 flush 中生效。
- en: '**[orm]**'
  id: totrans-1271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added label() method to InstrumentedAttribute to establish forwards compatibility
    with 0.5.
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 InstrumentedAttribute 中添加了 label() 方法，以确立与 0.5 的前向兼容性。
- en: sql
  id: totrans-1273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.in_(someselect) 现在可以作为列子句表达式使用，而不会使子查询蔓延到 FROM 子句中
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1074](https://www.sqlalchemy.org/trac/ticket/1074)
- en: mysql
  id: totrans-1277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added MSMediumInteger type.
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MSMediumInteger 类型。
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1146](https://www.sqlalchemy.org/trac/ticket/1146)
- en: sqlite
  id: totrans-1281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Supplied a custom strftime() function which handles dates before 1900.
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供了一个自定义的 strftime() 函数，用于处理 1900 年之前的日期。
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#968](https://www.sqlalchemy.org/trac/ticket/968)
- en: '**[sqlite]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlite 方言中禁用了 String（以及 Unicode、UnicodeText 等）的 convert_unicode 逻辑，以适应 pysqlite
    2.5.0 的新要求，即只接受 Python unicode 对象；[https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
- en: oracle
  id: totrans-1287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: has_sequence() now takes schema name into account
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: has_sequence() 现在考虑了模式名称
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1155](https://www.sqlalchemy.org/trac/ticket/1155)
- en: '**[oracle]**'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added BFILE to the list of reflected types
  id: totrans-1292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 BFILE 添加到反射类型列表中
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1121](https://www.sqlalchemy.org/trac/ticket/1121)
- en: orm
  id: totrans-1294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug regarding inherit_condition passed with “A=B” versus “B=A” leading
    to errors
  id: totrans-1296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于 inherit_condition 传递“A=B”与“B=A”导致错误的 bug
- en: 'References: [#1039](https://www.sqlalchemy.org/trac/ticket/1039)'
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1039](https://www.sqlalchemy.org/trac/ticket/1039)
- en: '**[orm]**'
  id: totrans-1298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Changes made to new, dirty and deleted collections in SessionExtension.before_flush()
    will take effect for that flush.
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SessionExtension.before_flush() 中对新的、脏的和已删除的集合所做的更改将对该刷新生效。
- en: '**[orm]**'
  id: totrans-1300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added label() method to InstrumentedAttribute to establish forwards compatibility
    with 0.5.
  id: totrans-1301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 InstrumentedAttribute 中添加了 label() 方法，以确立与 0.5 的向前兼容性。
- en: sql
  id: totrans-1302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.in_(someselect) 现在可以作为一个列子句表达式使用，而不会导致子查询泄漏到 FROM 子句中
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1074](https://www.sqlalchemy.org/trac/ticket/1074)
- en: mysql
  id: totrans-1306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added MSMediumInteger type.
  id: totrans-1308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MSMediumInteger 类型。
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1146](https://www.sqlalchemy.org/trac/ticket/1146)
- en: sqlite
  id: totrans-1310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Supplied a custom strftime() function which handles dates before 1900.
  id: totrans-1312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供了一个自定义的 strftime() 函数，用于处理 1900 年之前的日期。
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#968](https://www.sqlalchemy.org/trac/ticket/968)
- en: '**[sqlite]**'
  id: totrans-1314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  id: totrans-1315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlite 方言中禁用了 String（以及 Unicode、UnicodeText 等）的 convert_unicode 逻辑，以适应 pysqlite
    2.5.0 的新要求，即只接受 Python unicode 对象；[https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
- en: oracle
  id: totrans-1316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: has_sequence() now takes schema name into account
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: has_sequence() 现在考虑了模式名称
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1155](https://www.sqlalchemy.org/trac/ticket/1155)
- en: '**[oracle]**'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added BFILE to the list of reflected types
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 BFILE 添加到反射类型列表中
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1121](https://www.sqlalchemy.org/trac/ticket/1121)
- en: 0.4.7p1
  id: totrans-1323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.7p1
- en: 'Released: Thu Jul 31 2008'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Jul 31 2008
- en: orm
  id: totrans-1325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added “add()” and “add_all()” to scoped_session methods. Workaround for 0.4.7:'
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 scoped_session 方法中添加了“add()”和“add_all()”。0.4.7 的解决方法：
- en: '[PRE3]'
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**[orm]**'
  id: totrans-1329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed non-2.3 compatible usage of set() and generator expression within relation().
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 relation() 内部使用非 2.3 兼容的 set() 和生成器表达式的问题。
- en: orm
  id: totrans-1331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added “add()” and “add_all()” to scoped_session methods. Workaround for 0.4.7:'
  id: totrans-1333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 scoped_session 方法中添加了“add()”和“add_all()”。0.4.7 的解决方法：
- en: '[PRE4]'
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**[orm]**'
  id: totrans-1335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed non-2.3 compatible usage of set() and generator expression within relation().
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 relation() 内部使用非 2.3 兼容的 set() 和生成器表达式的问题。
- en: 0.4.7
  id: totrans-1337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.7
- en: 'Released: Sat Jul 26 2008'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sat Jul 26 2008
- en: orm
  id: totrans-1339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The contains() operator when used with many-to-many will alias() the secondary
    (association) table so that multiple contains() calls will not conflict with each
    other
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与多对多一起使用时，contains() 操作符会对次要（关联）表进行别名处理，以便多个 contains() 调用不会互相冲突
- en: 'References: [#1058](https://www.sqlalchemy.org/trac/ticket/1058)'
  id: totrans-1342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1058](https://www.sqlalchemy.org/trac/ticket/1058)
- en: '**[orm]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug preventing merge() from functioning in conjunction with a comparable_property()
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 merge() 与 comparable_property() 结合使用的错误
- en: '**[orm]**'
  id: totrans-1345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the enable_typechecks=False setting on relation() now only allows subtypes with
    inheriting mappers. Totally unrelated types, or subtypes not set up with mapper
    inheritance against the target mapper are still not allowed.
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在 relation() 上设置 enable_typechecks=False 只允许具有继承映射器的子类型。完全不相关的类型，或者未设置为针对目标映射器进行映射器���承的子类型仍然不被允许。
- en: '**[orm]**'
  id: totrans-1347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added is_active flag to Sessions to detect when a transaction is in progress.
    This flag is always True with a “transactional” (in 0.5 a non-“autocommit”) Session.
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Sessions 添加了 is_active 标志以检测事务是否正在进行中。该标志在“transactional”（在 0.5 版本中为非“自动提交”）会话中始终为
    True。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: sql
  id: totrans-1350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug when calling select([literal(‘foo’)]) or select([bindparam(‘foo’)]).
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用 select([literal(‘foo’)]) 或 select([bindparam(‘foo’)]) 时的错误。
- en: schema
  id: totrans-1353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-1354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: create_all(), drop_all(), create(), drop() all raise an error if the table name
    or schema name contains more characters than that dialect’s configured character
    limit. Some DB’s can handle too-long table names during usage, and SQLA can handle
    this as well. But various reflection/ checkfirst-during-create scenarios fail
    since we are looking for the name within the DB’s catalog tables.
  id: totrans-1355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: create_all()、drop_all()、create()、drop() 如果表名或模式名包含的字符数超过该方言配置的字符限制，则会引发错误。一些数据库可以在使用过程中处理过长的表名，SQLA
    也可以处理这种情况。但是由于我们正在查找 DB 的目录表中的名称，因此各种反射/在创建期间进行 checkfirst 的场景会失败。
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571)'
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)
- en: '**[schema]**'
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: The index name generated when you say “index=True” on a Column is truncated
    to the length appropriate for the dialect. Additionally, an Index with a too-
    long name cannot be explicitly dropped with Index.drop(), similar to.
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 Column 上说“index=True”时生成的索引名称会被截断为适合该方言的长度。此外，具有过长名称的索引不能使用 Index.drop()
    明确删除，类似于。
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571), [#820](https://www.sqlalchemy.org/trac/ticket/820)'
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)，[#820](https://www.sqlalchemy.org/trac/ticket/820)
- en: mysql
  id: totrans-1360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added ‘CALL’ to the list of SQL keywords which return result rows.
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“CALL”添加到返回结果行的 SQL 关键字列表中。
- en: oracle
  id: totrans-1363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle get_default_schema_name() “normalizes” the name before returning, meaning
    it returns a lower-case name when the identifier is detected as case insensitive.
  id: totrans-1365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle get_default_schema_name() 在返回之前会“规范化”名称，这意味着当检测到标识符不区分大小写时，它会返回一个小写名称。
- en: '**[oracle]**'
  id: totrans-1366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: creating/dropping tables takes schema name into account when searching for the
    existing table, so that tables in other owner namespaces with the same name do
    not conflict
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建/删除表时会考虑模式名称，以便在搜索现有表时不会与其他所有者命名空间中具有相同名称的表发生冲突
- en: 'References: [#709](https://www.sqlalchemy.org/trac/ticket/709)'
  id: totrans-1368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#709](https://www.sqlalchemy.org/trac/ticket/709)
- en: '**[oracle]**'
  id: totrans-1369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Cursors now have “arraysize” set to 50 by default on them, the value of which
    is configurable using the “arraysize” argument to create_engine() with the Oracle
    dialect. This to account for cx_oracle’s default setting of “1”, which has the
    effect of many round trips being sent to Oracle. This actually works well in conjunction
    with BLOB/CLOB-bound cursors, of which there are any number available but only
    for the life of that row request (so BufferedColumnRow is still needed, but less
    so).
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 游标现在默认情况下的“arraysize”设置为50，其值可以使用 Oracle 方言的 create_engine() 中的“arraysize”参数进行配置。这是为了考虑
    cx_oracle 的默认设置为“1”，这会导致向 Oracle 发送许多往返。这实际上与 BLOB/CLOB 绑定的游标很好地配合使用，其中有任意数量可用，但仅在该行请求的生命周期内（因此仍然需要
    BufferedColumnRow，但不那么多）。
- en: 'References: [#1062](https://www.sqlalchemy.org/trac/ticket/1062)'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1062](https://www.sqlalchemy.org/trac/ticket/1062)
- en: '**[oracle]**'
  id: totrans-1372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: sqlite
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite
- en: add SLFloat type, which matches the SQLite REAL type affinity. Previously, only
    SLNumeric was provided which fulfills NUMERIC affinity, but that’s not the same
    as REAL.
  id: totrans-1374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 SLFloat 类型，与 SQLite REAL 类型亲和。以前只提供了 SLNumeric，它满足 NUMERIC 亲和性，但与 REAL 不同。
- en: misc
  id: totrans-1375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-1376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Repaired server_side_cursors to properly detect text() clauses.
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 server_side_cursors 以正确检测 text() 子句。
- en: '**[postgres]**'
  id: totrans-1378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added PGCidr type.
  id: totrans-1379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PGCidr 类型。
- en: 'References: [#1092](https://www.sqlalchemy.org/trac/ticket/1092)'
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1092](https://www.sqlalchemy.org/trac/ticket/1092)
- en: orm
  id: totrans-1381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The contains() operator when used with many-to-many will alias() the secondary
    (association) table so that multiple contains() calls will not conflict with each
    other
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与多对多一起使用时，contains() 运算符将为次要（关联）表设置别名，以便多个 contains() 调用不会互相冲突。
- en: 'References: [#1058](https://www.sqlalchemy.org/trac/ticket/1058)'
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1058](https://www.sqlalchemy.org/trac/ticket/1058)
- en: '**[orm]**'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug preventing merge() from functioning in conjunction with a comparable_property()
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 merge() 与 comparable_property() 结合使用的 bug。
- en: '**[orm]**'
  id: totrans-1387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the enable_typechecks=False setting on relation() now only allows subtypes with
    inheriting mappers. Totally unrelated types, or subtypes not set up with mapper
    inheritance against the target mapper are still not allowed.
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation() 上的 enable_typechecks=False 设置现在只允许具有继承映射器的子类型。完全不相关的类型，或者未设置与目标映射器的映射器继承的子类型仍然不被允许。
- en: '**[orm]**'
  id: totrans-1389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added is_active flag to Sessions to detect when a transaction is in progress.
    This flag is always True with a “transactional” (in 0.5 a non-“autocommit”) Session.
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Sessions 中添加了 is_active 标志，用于检测事务是否正在进行中。当使用“transactional”（在 0.5 版本中是非“autocommit”）会话时，此标志始终为
    True。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: sql
  id: totrans-1392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug when calling select([literal(‘foo’)]) or select([bindparam(‘foo’)]).
  id: totrans-1394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用 select([literal(‘foo’)]) 或 select([bindparam(‘foo’)]) 时的 bug。
- en: schema
  id: totrans-1395
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-1396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: create_all(), drop_all(), create(), drop() all raise an error if the table name
    or schema name contains more characters than that dialect’s configured character
    limit. Some DB’s can handle too-long table names during usage, and SQLA can handle
    this as well. But various reflection/ checkfirst-during-create scenarios fail
    since we are looking for the name within the DB’s catalog tables.
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: create_all()、drop_all()、create()、drop() 如果表名或模式名包含的字符数超过该方言配置的字符限制，则会引发错误。一些数据库可以在使用过程中处理过长的表名，SQLA
    也可以处理这种情况。但是由于我们正在查找 DB 的目录表中的名称，因此各种反射/在创建期间进行 checkfirst 的场景会失败。
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571)'
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)
- en: '**[schema]**'
  id: totrans-1399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The index name generated when you say “index=True” on a Column is truncated
    to the length appropriate for the dialect. Additionally, an Index with a too-
    long name cannot be explicitly dropped with Index.drop(), similar to.
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 Column 上说“index=True”时生成的索引名称会被截断为适合该方言的长度。此外，具有过长名称的索引无法使用 Index.drop()
    明确删除，类��于。
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571), [#820](https://www.sqlalchemy.org/trac/ticket/820)'
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571), [#820](https://www.sqlalchemy.org/trac/ticket/820)
- en: mysql
  id: totrans-1402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added ‘CALL’ to the list of SQL keywords which return result rows.
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 'CALL' 添加到返回结果行的 SQL 关键字列表中。
- en: oracle
  id: totrans-1405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle get_default_schema_name() “normalizes” the name before returning, meaning
    it returns a lower-case name when the identifier is detected as case insensitive.
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 的 get_default_schema_name() 在返回之前会“规范化”名称，这意味着当检测到标识符为大小写不敏感时，它会返回小写名称。
- en: '**[oracle]**'
  id: totrans-1408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: creating/dropping tables takes schema name into account when searching for the
    existing table, so that tables in other owner namespaces with the same name do
    not conflict
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在搜索现有表时，创建/删除表时会考虑模式名称，以避免与其他所有者命名空间中具有相同名称的表发生冲突。
- en: 'References: [#709](https://www.sqlalchemy.org/trac/ticket/709)'
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#709](https://www.sqlalchemy.org/trac/ticket/709)
- en: '**[oracle]**'
  id: totrans-1411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Cursors now have “arraysize” set to 50 by default on them, the value of which
    is configurable using the “arraysize” argument to create_engine() with the Oracle
    dialect. This to account for cx_oracle’s default setting of “1”, which has the
    effect of many round trips being sent to Oracle. This actually works well in conjunction
    with BLOB/CLOB-bound cursors, of which there are any number available but only
    for the life of that row request (so BufferedColumnRow is still needed, but less
    so).
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 游标现在默认情况下具有“arraysize”设置为 50，其值可以使用 Oracle 方言的“arraysize”参数进行配置。这是为了考虑 cx_oracle
    的默认设置为“1”，这会导致向 Oracle 发送许多往返。这实际上与 BLOB/CLOB 绑定的游标很好地配合使用，其中有任意数量可用，但仅在该行请求的生命周期内（因此仍然需要
    BufferedColumnRow，但不那么需要）。
- en: 'References: [#1062](https://www.sqlalchemy.org/trac/ticket/1062)'
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1062](https://www.sqlalchemy.org/trac/ticket/1062)
- en: '**[oracle]**'
  id: totrans-1414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: sqlite
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite
- en: add SLFloat type, which matches the SQLite REAL type affinity. Previously, only
    SLNumeric was provided which fulfills NUMERIC affinity, but that’s not the same
    as REAL.
  id: totrans-1416
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`SLFloat`类型，该类型与SQLite的`REAL`类型亲和。以前，只提供了`SLNumeric`，它满足`NUMERIC`亲和性，但这与`REAL`不同。
- en: misc
  id: totrans-1417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Repaired server_side_cursors to properly detect text() clauses.
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`server_side_cursors`以正确检测`text()`子句。
- en: '**[postgres]**'
  id: totrans-1420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added PGCidr type.
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`PGCidr`类型。
- en: 'References: [#1092](https://www.sqlalchemy.org/trac/ticket/1092)'
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1092](https://www.sqlalchemy.org/trac/ticket/1092)
- en: 0.4.6
  id: totrans-1423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.6
- en: 'Released: Sat May 10 2008'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年5月10日（周六）
- en: orm
  id: totrans-1425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fix to the recent relation() refactoring which fixes exotic viewonly relations
    which join between local and remote table multiple times, with a common column
    shared between the joins.
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近的`relation()`重构，修复了在本地表和远程表之间多次连接的异国`viewonly`关系，这些连接在连接之间共享公共列。
- en: '**[orm]**'
  id: totrans-1428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also re-established viewonly relation() configurations that join across multiple
    tables.
  id: totrans-1429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还重新建立了跨多个表连接的`viewonly relation()`配置。
- en: '**[orm]**'
  id: totrans-1430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added experimental relation() flag to help with primaryjoins across functions,
    etc., _local_remote_pairs=[tuples]. This complements a complex primaryjoin condition
    allowing you to provide the individual column pairs which comprise the relation’s
    local and remote sides. Also improved lazy load SQL generation to handle placing
    bind params inside of functions and other expressions. (partial progress towards)
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了实验性的`relation()`标志，以帮助跨函数等处的`primaryjoins`，_local_remote_pairs=[tuples]。这补充了一个复杂的`primaryjoin`条件，允许您提供构成关系的本地和远程方的单个列对。还改进了延迟加载SQL生成，以处理将绑定参数放置在函数和其他表达式中的情况。（部分进展）
- en: 'References: [#610](https://www.sqlalchemy.org/trac/ticket/610)'
  id: totrans-1432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#610](https://www.sqlalchemy.org/trac/ticket/610)
- en: '**[orm]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: repaired single table inheritance such that you can single-table inherit from
    a joined-table inheriting mapper without issue.
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承，使您可以从加入表继承的映射器中单表继承而无需问题。
- en: 'References: [#1036](https://www.sqlalchemy.org/trac/ticket/1036)'
  id: totrans-1435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1036](https://www.sqlalchemy.org/trac/ticket/1036)
- en: '**[orm]**'
  id: totrans-1436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed “concatenate tuple” bug which could occur with Query.order_by() if clause
    adaption had taken place.
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“连接元组”错误，该错误可能发生在`Query.order_by()`中，如果进行了子句调整。
- en: 'References: [#1027](https://www.sqlalchemy.org/trac/ticket/1027)'
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1027](https://www.sqlalchemy.org/trac/ticket/1027)
- en: '**[orm]**'
  id: totrans-1439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed ancient assertion that mapped selectables require “alias names” - the
    mapper creates its own alias now if none is present. Though in this case you need
    to use the class, not the mapped selectable, as the source of column attributes
    - so a warning is still issued.
  id: totrans-1440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了古老的断言，即映射的可选择性需要“别名” - 如果没有，则映射器现在会创建自己的别名。尽管在这种情况下，您需要使用类，而不是映射的可选择性，作为列属性的来源
    - 因此仍会发出警告。
- en: '**[orm]**'
  id: totrans-1441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixes to the “exists” function involving inheritance (any(), has(), ~contains());
    the full target join will be rendered into the EXISTS clause for relations that
    link to subclasses.
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及继承的“exists”函数的问题（`any()`，`has()`，`~contains()`）；完整的目标连接将被呈现到用于与子类关联的`EXISTS`子句中。
- en: '**[orm]**'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored usage of append_result() extension method for primary query rows, when
    the extension is present and only a single- entity result is being returned.
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了仅在扩展存在且仅返回单个实体结果时为主查询行添加`append_result()`扩展方法的用法。
- en: '**[orm]**'
  id: totrans-1445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also re-established viewonly relation() configurations that join across multiple
    tables.
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还重新建立了跨多个表连接的`viewonly relation()`配置。
- en: '**[orm]**'
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: removed ancient assertion that mapped selectables require “alias names” - the
    mapper creates its own alias now if none is present. Though in this case you need
    to use the class, not the mapped selectable, as the source of column attributes
    - so a warning is still issued.
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了古老的断言，即映射的可选择性需要“别名” - 如果没有，则映射器现在会创建自己的别名。尽管在这种情况下，您需要使用类，而不是映射的可选择性，作为列属性的来源
    - 因此仍会发出警告。
- en: '**[orm]**'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: refined mapper._save_obj() which was unnecessarily calling __ne__() on scalar
    values during flush
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了`mapper._save_obj()`，在`flush`期间不必要地调用了标量值的`__ne__()`。
- en: 'References: [#1015](https://www.sqlalchemy.org/trac/ticket/1015)'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1015](https://www.sqlalchemy.org/trac/ticket/1015)
- en: '**[orm]**'
  id: totrans-1452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a feature to eager loading whereby subqueries set as column_property()
    with explicit label names (which is not necessary, btw) will have the label anonymized
    when the instance is part of the eager join, to prevent conflicts with a subquery
    or column of the same name on the parent object.
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对急加载功能进行了更新，其中使用具有显式标签名称的 column_property() 设置的子查询（顺便说一句，这并不是必要的）在实例作为急加载连接的一部分时，将对标签进行匿名化处理，以防止与父对象上具有相同名称的子查询或列发生冲突。
- en: 'References: [#1019](https://www.sqlalchemy.org/trac/ticket/1019)'
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1019](https://www.sqlalchemy.org/trac/ticket/1019)
- en: '**[orm]**'
  id: totrans-1455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: set-based collections |=, -=, ^= and &= are stricter about their operands and
    only operate on sets, frozensets or subclasses of the collection type. Previously,
    they would accept any duck-typed set.
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集合运算符 |=、-=、^= 和 &= 对其操作数更加严格，只能操作集合、frozensets 或集合类型的子类。以前，它们接受任何鸭子类型的集合。
- en: '**[orm]**'
  id: totrans-1457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an example dynamic_dict/dynamic_dict.py, illustrating a simple way to
    place dictionary behavior on top of a dynamic_loader.
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个示例 dynamic_dict/dynamic_dict.py，演示了在 dynamic_loader 之上放置字典行为的简单方法。
- en: sql
  id: totrans-1459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added COLLATE support via the .collate(<collation>) expression operator and
    collate(<expr>, <collation>) sql function.
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 .collate(<collation>) 表达式操作符和 collate(<expr>, <collation>) sql 函数添加了 COLLATE
    支持。
- en: '**[sql]**'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug with union() when applied to non-Table connected select statements
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了应用于非表连接选择语句的 union() 的错误。
- en: '**[sql]**'
  id: totrans-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: improved behavior of text() expressions when used as FROM clauses, such as select().select_from(text(“sometext”))
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在作为 FROM 子句使用时的 text() 表达式的行为，例如 select().select_from(text(“sometext”))
- en: 'References: [#1014](https://www.sqlalchemy.org/trac/ticket/1014)'
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1014](https://www.sqlalchemy.org/trac/ticket/1014)
- en: '**[sql]**'
  id: totrans-1467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy() respects the value of “autoincrement”, fixes usage with Migrate
  id: totrans-1468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy() 尊重 “autoincrement” 的值，修复了与 Migrate 的使用。
- en: 'References: [#1021](https://www.sqlalchemy.org/trac/ticket/1021)'
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1021](https://www.sqlalchemy.org/trac/ticket/1021)
- en: mssql
  id: totrans-1470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added “odbc_autotranslate” parameter to engine / dburi parameters. Any given
    string will be passed through to the ODBC connection string as:'
  id: totrans-1472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 engine / dburi 参数中添加了 “odbc_autotranslate” 参数。任何给定的字符串将传递到 ODBC 连接字符串中：
- en: ”AutoTranslate=%s” % odbc_autotranslate
  id: totrans-1473
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ”AutoTranslate=%s” % odbc_autotranslate
- en: 'References: [#1005](https://www.sqlalchemy.org/trac/ticket/1005)'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1005](https://www.sqlalchemy.org/trac/ticket/1005)
- en: '**[mssql]**'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added “odbc_options” parameter to engine / dburi parameters. The given string
    is simply appended to the SQLAlchemy-generated odbc connection string.
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 engine / dburi 参数中添加了 “odbc_options” 参数。给定的字符串将简单地附加到 SQLAlchemy 生成的 odbc
    连接字符串中。
- en: This should obviate the need of adding a myriad of ODBC options in the future.
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该可以避免将来需要添加大量 ODBC 选项的需要。
- en: misc
  id: totrans-1478
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative] [extension]**'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: Joined table inheritance mappers use a slightly relaxed function to create the
    “inherit condition” to the parent table, so that other foreign keys to not-yet-declared
    Table objects don’t trigger an error.
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 联合表继承映射器使用稍微放松的函数来创建父表的 “继承条件”，以便对尚未声明的 Table 对象的其他外键不会触发错误。
- en: '**[declarative] [extension]**'
  id: totrans-1481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative] [extension]**'
- en: fixed reentrant mapper compile hang when a declared attribute is used within
    ForeignKey, ie. ForeignKey(MyOtherClass.someattribute)
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在 ForeignKey 中使用已声明属性时出现的重入映射器编译挂起的 bug，即 ForeignKey(MyOtherClass.someattribute)。
- en: '**[engines]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Pool listeners can now be provided as a dictionary of callables or a (possibly
    partial) duck-type of PoolListener, your choice.
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将池监听器提供为可调用对象的字典或 PoolListener 的（可能是部分的）鸭子类型，任你选择。
- en: '**[engines]**'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added “rollback_returned” option to Pool which will disable the rollback() issued
    when connections are returned. This flag is only safe to use with a database which
    does not support transactions (i.e. MySQL/MyISAM).
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Pool 中添加了 “rollback_returned” 选项，该选项将禁用返回连接时发出的 rollback()。此标志仅在不支持事务的数据库（例如
    MySQL/MyISAM）中使用时才安全。
- en: '**[ext]**'
  id: totrans-1487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: set-based association proxies |=, -=, ^= and &= are stricter about their operands
    and only operate on sets, frozensets or other association proxies. Previously,
    they would accept any duck-typed set.
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集合运算符 |=、-=、^= 和 &= 对其操作数更加严格，只能操作集合、frozensets 或其他关联代理。以前，它们接受任何鸭子类型的集合。
- en: '**[firebird]**'
  id: totrans-1489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Handle the “SUBSTRING(:string FROM :start FOR :length)” builtin.
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理 “SUBSTRING(:string FROM :start FOR :length)” 内建函数。
- en: orm
  id: totrans-1491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fix to the recent relation() refactoring which fixes exotic viewonly relations
    which join between local and remote table multiple times, with a common column
    shared between the joins.
  id: totrans-1493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近 relation() 重构中的问题，修复了在本地表和远程表之间多次进行连接的特殊视图只读关系，并且这些连接之间有一个共享列的情况。
- en: '**[orm]**'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also re-established viewonly relation() configurations that join across multiple
    tables.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时重新建立了跨多个表连接的视图只读关系配置。
- en: '**[orm]**'
  id: totrans-1496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added experimental relation() flag to help with primaryjoins across functions,
    etc., _local_remote_pairs=[tuples]. This complements a complex primaryjoin condition
    allowing you to provide the individual column pairs which comprise the relation’s
    local and remote sides. Also improved lazy load SQL generation to handle placing
    bind params inside of functions and other expressions. (partial progress towards)
  id: totrans-1497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于帮助跨函数等进行主连接的实验性 relation() 标志，_local_remote_pairs=[tuples]。这与复杂的 primaryjoin
    条件相辅相成，允许您提供构成关系本地和远程侧的个别列对。还改进了惰性加载 SQL 生成，以处理将绑定参数放置在函数和其他表达式内的情况。（部分进展）
- en: 'References: [#610](https://www.sqlalchemy.org/trac/ticket/610)'
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#610](https://www.sqlalchemy.org/trac/ticket/610)
- en: '**[orm]**'
  id: totrans-1499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: repaired single table inheritance such that you can single-table inherit from
    a joined-table inheriting mapper without issue.
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了单表继承，以便您可以从具有连接表继承的映射器进行单表继承而不会出现问题。
- en: 'References: [#1036](https://www.sqlalchemy.org/trac/ticket/1036)'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1036](https://www.sqlalchemy.org/trac/ticket/1036)
- en: '**[orm]**'
  id: totrans-1502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed “concatenate tuple” bug which could occur with Query.order_by() if clause
    adaption had taken place.
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query.order_by() 中可能发生的“连接元组”错误，如果进行了子句适应。
- en: 'References: [#1027](https://www.sqlalchemy.org/trac/ticket/1027)'
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1027](https://www.sqlalchemy.org/trac/ticket/1027)
- en: '**[orm]**'
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed ancient assertion that mapped selectables require “alias names” - the
    mapper creates its own alias now if none is present. Though in this case you need
    to use the class, not the mapped selectable, as the source of column attributes
    - so a warning is still issued.
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了关于映射可选择项需要“别名”的古老断言 - 如果没有别名，则映射现在会自己创建别名。不过，在这种情况下，您需要使用类，而不是映射的可选择项，作为列属性的来源
    - 因此仍会发出警告。
- en: '**[orm]**'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixes to the “exists” function involving inheritance (any(), has(), ~contains());
    the full target join will be rendered into the EXISTS clause for relations that
    link to subclasses.
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及继承的“exists”函数（any()、has()、~contains()）的问题；对于连接到子类的关系，完整的目标连接将被呈现到 EXISTS
    子句中。
- en: '**[orm]**'
  id: totrans-1509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored usage of append_result() extension method for primary query rows, when
    the extension is present and only a single- entity result is being returned.
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了对主查询行使用 append_result() 扩展方法的使用，当存在该扩展并且只返回单个实体结果时。
- en: '**[orm]**'
  id: totrans-1511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also re-established viewonly relation() configurations that join across multiple
    tables.
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时重新建立了跨多个表连接的视图只读关系配置。
- en: '**[orm]**'
  id: totrans-1513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: removed ancient assertion that mapped selectables require “alias names” - the
    mapper creates its own alias now if none is present. Though in this case you need
    to use the class, not the mapped selectable, as the source of column attributes
    - so a warning is still issued.
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了关于映射可选择项需要“别名”的古老断言 - 如果没有别名，则映射现在会自己创建别名。不过，在这种情况下，您需要使用类，而不是映射的可选择项，作为列属性的来源
    - 因此仍会发出警告。
- en: '**[orm]**'
  id: totrans-1515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: refined mapper._save_obj() which was unnecessarily calling __ne__() on scalar
    values during flush
  id: totrans-1516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了 mapper._save_obj()，在 flush 期间不必要地对标量值调用 __ne__()。
- en: 'References: [#1015](https://www.sqlalchemy.org/trac/ticket/1015)'
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1015](https://www.sqlalchemy.org/trac/ticket/1015)
- en: '**[orm]**'
  id: totrans-1518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a feature to eager loading whereby subqueries set as column_property()
    with explicit label names (which is not necessary, btw) will have the label anonymized
    when the instance is part of the eager join, to prevent conflicts with a subquery
    or column of the same name on the parent object.
  id: totrans-1519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了一个特性，即贪婪加载中的子查询被设置为 column_property() 并具有显式标签名称（顺便说一句，这并不是必需的）时，当实例成为贪婪连接的一部分时，标签将被匿名化，以防止与父对象上的同名子查询或列发生冲突。
- en: 'References: [#1019](https://www.sqlalchemy.org/trac/ticket/1019)'
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1019](https://www.sqlalchemy.org/trac/ticket/1019)
- en: '**[orm]**'
  id: totrans-1521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: set-based collections |=, -=, ^= and &= are stricter about their operands and
    only operate on sets, frozensets or subclasses of the collection type. Previously,
    they would accept any duck-typed set.
  id: totrans-1522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用集合操作符 |=、-=、^= 和 &= 时对其操作数的要求更为严格，只能操作集合、冻结集合或其子类的集合类型。之前，它们会接受任何类似集合的对象。
- en: '**[orm]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an example dynamic_dict/dynamic_dict.py, illustrating a simple way to
    place dictionary behavior on top of a dynamic_loader.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个示例dynamic_dict/dynamic_dict.py，演示了在dynamic_loader之上放置字典行为的简单方法。
- en: sql
  id: totrans-1525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added COLLATE support via the .collate(<collation>) expression operator and
    collate(<expr>, <collation>) sql function.
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过.collate(<collation>)表达式操作符和collate(<expr>, <collation>) sql函数添加了COLLATE支持。
- en: '**[sql]**'
  id: totrans-1528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug with union() when applied to non-Table connected select statements
  id: totrans-1529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将union()应用于非Table连接的select语句时的错误
- en: '**[sql]**'
  id: totrans-1530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: improved behavior of text() expressions when used as FROM clauses, such as select().select_from(text(“sometext”))
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为FROM子句使用时，text()表达式的行为得到改进，例如select().select_from(text(“sometext”))
- en: 'References: [#1014](https://www.sqlalchemy.org/trac/ticket/1014)'
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1014](https://www.sqlalchemy.org/trac/ticket/1014)
- en: '**[sql]**'
  id: totrans-1533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column.copy() respects the value of “autoincrement”, fixes usage with Migrate
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column.copy()尊重“autoincrement”的值，修复了与Migrate的使用
- en: 'References: [#1021](https://www.sqlalchemy.org/trac/ticket/1021)'
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1021](https://www.sqlalchemy.org/trac/ticket/1021)
- en: mssql
  id: totrans-1536
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added “odbc_autotranslate” parameter to engine / dburi parameters. Any given
    string will be passed through to the ODBC connection string as:'
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向engine / dburi参数添加了“odbc_autotranslate”参数。任何给定的字符串都将传递到ODBC连接字符串中：
- en: ”AutoTranslate=%s” % odbc_autotranslate
  id: totrans-1539
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ”AutoTranslate=%s” % odbc_autotranslate
- en: 'References: [#1005](https://www.sqlalchemy.org/trac/ticket/1005)'
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1005](https://www.sqlalchemy.org/trac/ticket/1005)
- en: '**[mssql]**'
  id: totrans-1541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added “odbc_options” parameter to engine / dburi parameters. The given string
    is simply appended to the SQLAlchemy-generated odbc connection string.
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向engine / dburi参数添加了“odbc_options”参数。给定的字符串简单地附加到SQLAlchemy生成的odbc连接字符串上。
- en: This should obviate the need of adding a myriad of ODBC options in the future.
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该消除将来添加大量ODBC选项的需要。
- en: misc
  id: totrans-1544
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative] [extension]**'
  id: totrans-1545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Joined table inheritance mappers use a slightly relaxed function to create the
    “inherit condition” to the parent table, so that other foreign keys to not-yet-declared
    Table objects don’t trigger an error.
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接表继承映射器使用稍微放松的函数来创建到父表的“继承条件”，以便对尚未声明的Table对象的其他外键不触发错误。
- en: '**[declarative] [extension]**'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: fixed reentrant mapper compile hang when a declared attribute is used within
    ForeignKey, ie. ForeignKey(MyOtherClass.someattribute)
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ForeignKey中使用已声明属性时的重入映射编译挂起问题，即ForeignKey(MyOtherClass.someattribute)
- en: '**[engines]**'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Pool listeners can now be provided as a dictionary of callables or a (possibly
    partial) duck-type of PoolListener, your choice.
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将池监听器提供为可调用的字典或（可能是部分）PoolListener的鸭子类型，任君选择。
- en: '**[engines]**'
  id: totrans-1551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: added “rollback_returned” option to Pool which will disable the rollback() issued
    when connections are returned. This flag is only safe to use with a database which
    does not support transactions (i.e. MySQL/MyISAM).
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Pool添加了“rollback_returned”选项，该选项将禁用在连接返回时发出的rollback()。此标志仅适用于不支持事务的数据库（���MySQL/MyISAM）。
- en: '**[ext]**'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: set-based association proxies |=, -=, ^= and &= are stricter about their operands
    and only operate on sets, frozensets or other association proxies. Previously,
    they would accept any duck-typed set.
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于集合的关联代理 |=, -=, ^= 和 &= 对其操作数更为严格，仅操作于集合、frozenset或其他关联代理。以前，它们会接受任何鸭子类型的集合。
- en: '**[firebird]**'
  id: totrans-1555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Handle the “SUBSTRING(:string FROM :start FOR :length)” builtin.
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理“SUBSTRING(:string FROM :start FOR :length)”内置函数。
- en: 0.4.5
  id: totrans-1557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.5
- en: 'Released: Fri Apr 04 2008'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年4月4日星期五
- en: orm
  id: totrans-1559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-1560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'A small change in behavior to session.merge() - existing objects are checked
    for based on primary key attributes, not necessarily _instance_key. So the widely
    requested capability, that:'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对session.merge()行为的微小更改 - 现有对象根据主键属性而不一定是_instance_key进行检查。因此，广泛请求的功能是：
- en: x = MyObject(id=1) x = sess.merge(x)
  id: totrans-1562
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = MyObject(id=1) x = sess.merge(x)
- en: 'will in fact load MyObject with id #1 from the database if present, is now
    available. merge() still copies the state of the given object to the persistent
    one, so an example like the above would typically have copied “None” from all
    attributes of “x” onto the persistent copy. These can be reverted using session.expire(x).'
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在，现在可以加载数据库中具有id＃1的MyObject。merge()仍将给定对象的状态复制到持久对象上，因此上述示例通常会将“x”的所有属性的“None”复制到持久副本上。这些可以使用session.expire(x)来恢复。
- en: '**[orm]**'
  id: totrans-1564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Also fixed behavior in merge() whereby collection elements present on the destination
    but not the merged collection were not being removed from the destination.
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还修复了 merge() 中的行为，合并后集合中存在但合并集合中不存在的集合元素未从目标中删除的问题。
- en: '**[orm]**'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a more aggressive check for “uncompiled mappers”, helps particularly with
    declarative layer
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“未编译的映射器”的更积极的检查，特别有助于声明性层
- en: 'References: [#995](https://www.sqlalchemy.org/trac/ticket/995)'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#995](https://www.sqlalchemy.org/trac/ticket/995)
- en: '**[orm]**'
  id: totrans-1569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The methodology behind “primaryjoin”/”secondaryjoin” has been refactored. Behavior
    should be slightly more intelligent, primarily in terms of error messages which
    have been pared down to be more readable. In a slight number of scenarios it can
    better resolve the correct foreign key than before.
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”/“secondaryjoin”背后的方法论已经重构。行为应该稍微更智能一些，主要体现在错误消息方面，已经简化为更易读的形式。在少量情况下，它可以比以前更好地解析正确的外键。
- en: '**[orm]**'
  id: totrans-1571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added comparable_property(), adds query Comparator behavior to regular, unmanaged
    Python properties
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 comparable_property()，将查询比较器行为添加到常规的、非托管的 Python 属性
- en: '**[orm] [‘machines’] [Company.employees.of_type(Engineer)]**'
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [‘machines’] [Company.employees.of_type(Engineer)]**'
- en: the functionality of query.with_polymorphic() has been added to mapper() as
    a configuration option.
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 query.with_polymorphic() 的功能添加到 mapper() 作为配置选项。
- en: 'It’s set via several forms:'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它可以通过几种形式进行设置：
- en: with_polymorphic=’*’ with_polymorphic=[mappers] with_polymorphic=(‘*’, selectable)
    with_polymorphic=([mappers], selectable)
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_polymorphic=’*’ with_polymorphic=[mappers] with_polymorphic=(‘*’，selectable)
    with_polymorphic=([mappers]，selectable)
- en: This controls the default polymorphic loading strategy for inherited mappers.
    When a selectable is not given, outer joins are created for all joined-table inheriting
    mappers requested. Note that the auto-create of joins is not compatible with concrete
    table inheritance.
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这控制了继承映射器的默认多态加载策略。当没有给出可选择项时，将为所有请求的连接表继承映射器创建外连接。请注意，连接的自动创建与具体表继承不兼容。
- en: The existing select_table flag on mapper() is now deprecated and is synonymous
    with with_polymorphic(‘*’, select_table). Note that the underlying “guts” of select_table
    have been completely removed and replaced with the newer, more flexible approach.
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的 mapper() 上的 select_table 标志现在已弃用，并且与 with_polymorphic(' *'，select_table)
    等同。请注意，select_table 的底层“要点”已完全删除并替换为更新的、更灵活的方法。
- en: 'The new approach also automatically allows eager loads to work for subclasses,
    if they are present, for example:'
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新方法还自动允许对子类进行急切加载，如果它们存在，例如：
- en: '[PRE5]'
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: to load Company objects, their employees, and the ‘machines’ collection of employees
    who happen to be Engineers. A “with_polymorphic” Query option should be introduced
    soon as well which would allow per-Query control of with_polymorphic() on relations.
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载公司对象、其员工以及偶然是工程师的员工集合的“machines”集合。很快将引入“with_polymorphic”查询选项，该选项允许每个查询对关系上的with_polymorphic()进行控制。
- en: '**[orm]**'
  id: totrans-1582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'added two “experimental” features to Query, “experimental” in that their specific
    name/behavior is not carved in stone just yet: _values() and _from_self(). We’d
    like feedback on these.'
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询中添加了两个“实验性”功能，“实验性”是因为它们的具体名称/行为尚未确定：_values() 和 _from_self()。我们希望获得对这些功能的反馈。
- en: _values(*columns) is given a list of column expressions, and returns a new Query
    that only returns those columns. When evaluated, the return value is a list of
    tuples just like when using add_column() or add_entity(), the only difference
    is that “entity zero”, i.e. the mapped class, is not included in the results.
    This means it finally makes sense to use group_by() and having() on Query, which
    have been sitting around uselessly until now.
  id: totrans-1584
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _values(*columns) 接收列表达式列表，并返回一个仅返回这些列的新查询。在评估时，返回值是一个元组列表，就像使用 add_column()
    或 add_entity() 时一样，唯一的区别是“entity zero”，即映射类，不包含在结果中。这意味着现在终于可以在查询上使用 group_by()
    和 having()，直到现在一直没有用。
- en: A future change to this method may include that its ability to join, filter
    and allow other options not related to a “resultset” are removed, so the feedback
    we’re looking for is how people want to use _values()…i.e. at the very end, or
    do people prefer to continue generating after it’s called.
  id: totrans-1585
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未来对此方法的更改可能包括删除其连接、过滤和允许与“结果集”无关的其他选项的能力，因此我们寻求的反馈是人们希望如何使用 _values()…即在最后完成后，还是人们更喜欢在调用后继续生成。
- en: _from_self() compiles the SELECT statement for the Query (minus any eager loaders),
    and returns a new Query that selects from that SELECT. So basically you can query
    from a Query without needing to extract the SELECT statement manually. This gives
    meaning to operations like query[3:5]._from_self().filter(some criterion). There’s
    not much controversial here except that you can quickly create highly nested queries
    that are less efficient, and we want feedback on the naming choice.
  id: totrans-1586
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _from_self() 编译Query的SELECT语句（减去任何急加载器），并返回一个从该SELECT选择的新Query。所以基本上你可以从一个Query中查询而不需要手动提取SELECT语句。这样做就给了query[3:5]._from_self().filter(some
    criterion)这样的操作有意义。这里没有什么争议性的，除了你可以快速创建效率较低的高度嵌套的查询，并且我们希望得到有关命名选择的反馈。
- en: '**[orm]**'
  id: totrans-1587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() and query.group_by() will accept multiple arguments using *args
    (like select() already does).
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by() 和 query.group_by() 现在将接受多个参数使用 *args（就像 select() 已经做的那样）。
- en: '**[orm]**'
  id: totrans-1589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added some convenience descriptors to Query: query.statement returns the full
    SELECT construct, query.whereclause returns just the WHERE part of the SELECT
    construct.'
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了一些便利描述符：query.statement返回完整的SELECT构造，query.whereclause只返回SELECT构造的WHERE部分。
- en: '**[orm]**'
  id: totrans-1591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed/covered case when using a False/0 value as a polymorphic discriminator.
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复/涵盖了使用False/0值作为多态判别器时的情况。
- en: '**[orm]**'
  id: totrans-1593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which was preventing synonym() attributes from being used with inheritance
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了同义词（synonym()）属性与继承一起使用。
- en: '**[orm]**'
  id: totrans-1595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed SQL function truncation of trailing underscores
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对尾随下划线的SQL函数截断
- en: 'References: [#996](https://www.sqlalchemy.org/trac/ticket/996)'
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#996](https://www.sqlalchemy.org/trac/ticket/996)
- en: '**[orm]**'
  id: totrans-1598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When attributes are expired on a pending instance, an error will not be raised
    when the “refresh” action is triggered and no result is found.
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在挂起的实例上过期属性时，当触发“刷新”操作并且未找到结果时将不会引发错误。
- en: '**[orm]**'
  id: totrans-1600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.execute can now find binds from metadata
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.execute现在可以从元数据中找到绑定
- en: '**[orm]**'
  id: totrans-1602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted the definition of “self-referential” to be any two mappers with a common
    parent (this affects whether or not aliased=True is required when joining with
    Query).
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了“自引用”的定义，使其成为具有共同父项的任何两个映射器（这会影响与Query连接时是否需要aliased=True）。
- en: '**[orm]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Made some fixes to the “from_joinpoint” argument to query.join() so that if
    the previous join was aliased and this one isn’t, the join still happens successfully.
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 query.join() 的 “from_joinpoint” 参数进行了一些修正，以便如果前一个连接被别名化，而这个连接没有，则连接仍然成功进行。
- en: '**[orm]**'
  id: totrans-1606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Assorted “cascade deletes” fixes:'
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种“级联删除”修复：
- en: Fixed “cascade delete” operation of dynamic relations, which had only been implemented
    for foreign-key nulling behavior in 0.4.2 and not actual cascading deletes
  id: totrans-1608
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了动态关系的“级联删除”操作，在0.4.2中该操作仅针对外键置空行为进行了实现，并未实际进行级联删除
- en: Delete cascade without delete-orphan cascade on a many-to-one will not delete
    orphans which were disconnected from the parent before session.delete() is called
    on the parent (one-to-many already had this).
  id: totrans-1609
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在many-to-one上没有delete-orphan级联的delete级联将不会删除与父项断开连接的孤立项，直到在父项上调用session.delete()（one-to-many已经有了这个）。
- en: Delete cascade with delete-orphan will delete orphans whether or not it remains
    attached to its also-deleted parent.
  id: totrans-1610
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: delete级联与delete-orphan将删除孤立项，无论它是否仍附加到已删除的父项。
- en: delete-orphan cascade is properly detected on relations that are present on
    superclasses when using inheritance.
  id: totrans-1611
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用继承时，delete-orphan级联现在可以正确地检测到存在于超类上的关系。
- en: 'References: [#895](https://www.sqlalchemy.org/trac/ticket/895)'
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#895](https://www.sqlalchemy.org/trac/ticket/895)
- en: '**[orm]**'
  id: totrans-1613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed order_by calculation in Query to properly alias mapper-config’ed order_by
    when using select_from()
  id: totrans-1614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中order_by计算的错误，在使用select_from()时正确别名mapper-config中的order_by。
- en: '**[orm]**'
  id: totrans-1615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Refactored the diffing logic that kicks in when replacing one collection with
    another into collections.bulk_replace, useful to anyone building multi-level collections.
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将在替换一个集合为另一个集合时启动的差异逻辑重构为collections.bulk_replace，对于构建多级集合的任何人都很有用。
- en: '**[orm]**'
  id: totrans-1617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Cascade traversal algorithm converted from recursive to iterative to support
    deep object graphs.
  id: totrans-1618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 级联遍历算法从递归转换为迭代，以支持深层对象图。
- en: sql
  id: totrans-1619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: schema-qualified tables now will place the schemaname ahead of the tablename
    in all column expressions as well as when generating column labels. This prevents
    cross- schema name collisions in all cases
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，对架构限定的表将在所有列表达式以及生成列标签时将架构名称放在表名称之前。这样可以防止在所有情况下跨架构名称冲突
- en: 'References: [#999](https://www.sqlalchemy.org/trac/ticket/999)'
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#999](https://www.sqlalchemy.org/trac/ticket/999)
- en: '**[sql]**'
  id: totrans-1623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: can now allow selects which correlate all FROM clauses and have no FROM themselves.
    These are typically used in a scalar context, i.e. SELECT x, (SELECT x WHERE y)
    FROM table. Requires explicit correlate() call.
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以允许选择将所有 FROM 子句相关联且自身没有 FROM 的选择。这些通常在标量上下文中使用，即 SELECT x, (SELECT x WHERE
    y) FROM table。需要显式 correlate() 调用。
- en: '**[sql]**'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: ’name’ is no longer a required constructor argument for Column(). It (and .key)
    may now be deferred until the column is added to a Table.
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''name'' 不再是 Column() 的必需构造函数参数。现在可以将其（和 .key）推迟到列添加到表时。'
- en: '**[sql]**'
  id: totrans-1627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: like(), ilike(), contains(), startswith(), endswith() take an optional keyword
    argument “escape=<somestring>”, which is set as the escape character using the
    syntax “x LIKE y ESCAPE ‘<somestring>’”.
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: like()、ilike()、contains()、startswith()、endswith() 接受一个可选的关键字参数“escape=<somestring>”，使用“x
    LIKE y ESCAPE '<somestring>'”语法设置为转义字符。
- en: 'References: [#791](https://www.sqlalchemy.org/trac/ticket/791), [#993](https://www.sqlalchemy.org/trac/ticket/993)'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#791](https://www.sqlalchemy.org/trac/ticket/791), [#993](https://www.sqlalchemy.org/trac/ticket/993)
- en: '**[sql]**'
  id: totrans-1630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: random() is now a generic sql function and will compile to the database’s random
    implementation, if any.
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: random() 现在是一个通用的 SQL 函数，并且将编译为数据库的随机实现（如果有）。
- en: '**[sql]**'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: update().values() and insert().values() take keyword arguments.
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update().values() 和 insert().values() 接受关键字参数。
- en: '**[sql]**'
  id: totrans-1634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed an issue in select() regarding its generation of FROM clauses, in rare
    circumstances two clauses could be produced when one was intended to cancel out
    the other. Some ORM queries with lots of eager loads might have seen this symptom.
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 select() 中关于其生成 FROM 子句的问题，在罕见情况下，两个子句可能会被生成，而实际上只想取消另一个。一些具有大量急加载的 ORM
    查询可能会出现这种症状。
- en: '**[sql]**'
  id: totrans-1636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The case() function now also takes a dictionary as its whens parameter. It also
    interprets the “THEN” expressions as values by default, meaning case([(x==y, “foo”)])
    will interpret “foo” as a bound value, not a SQL expression. use text(expr) for
    literal SQL expressions in this case. For the criterion itself, these may be literal
    strings only if the “value” keyword is present, otherwise SA will force explicit
    usage of either text() or literal().
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: case() 函数现在还接受字典作为其 whens 参数。它还默认将“THEN”表达式解释为值，这意味着 case([(x==y, “foo”)]) 将“foo”解释为绑定值，而不是
    SQL 表达式。在这种情况下，对于标准本身，这些只能是文本字符串，除非存在“value”关键字，否则 SA 将强制使用 text() 或 literal()。
- en: mysql
  id: totrans-1638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The connection.info keys the dialect uses to cache server settings have changed
    and are now namespaced.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言用于缓存服务器设置的连接信息键已更改，并且现在有了命名空间。
- en: mssql
  id: totrans-1641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Reflected tables will now automatically load other tables which are referenced
    by Foreign keys in the auto-loaded table,.
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射表现在将自动加载被自动加载表中的外键引用的其他表。
- en: 'References: [#979](https://www.sqlalchemy.org/trac/ticket/979)'
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#979](https://www.sqlalchemy.org/trac/ticket/979)
- en: '**[mssql]**'
  id: totrans-1645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added executemany check to skip identity fetch,.
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 executemany 检查以跳过标识获取。
- en: 'References: [#916](https://www.sqlalchemy.org/trac/ticket/916)'
  id: totrans-1647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#916](https://www.sqlalchemy.org/trac/ticket/916)
- en: '**[mssql]**'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added stubs for small date type.
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了小日期类型的存根。
- en: 'References: [#884](https://www.sqlalchemy.org/trac/ticket/884)'
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#884](https://www.sqlalchemy.org/trac/ticket/884)
- en: '**[mssql]**'
  id: totrans-1651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added a new ‘driver’ keyword parameter for the pyodbc dialect. Will substitute
    into the ODBC connection string if given, defaults to ‘SQL Server’.
  id: totrans-1652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pyodbc 方言添加了新的 'driver' 关键字参数。如果给出，将替代 ODBC 连接字符串，默认为 'SQL Server'。
- en: '**[mssql]**'
  id: totrans-1653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added a new ‘max_identifier_length’ keyword parameter for the pyodbc dialect.
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pyodbc 方言添加了新的 'max_identifier_length' 关键字参数。
- en: '**[mssql]**'
  id: totrans-1655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Improvements to pyodbc + Unix. If you couldn’t get that combination to work
    before, please try again.
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 pyodbc + Unix 的改进。如果以前无法使该组合工作，请再次尝试。
- en: oracle
  id: totrans-1657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The “owner” keyword on Table is now deprecated, and is exactly synonymous with
    the “schema” keyword. Tables can now be reflected with alternate “owner” attributes,
    explicitly stated on the Table object or not using “schema”.
  id: totrans-1659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table 上的 "owner" 关键字现已弃用，并且与 "schema" 关键字完全同义。现在可以在 Table 对象上明确声明或不使用 "schema"
    来反射具有替代 "owner" 属性的表。
- en: '**[oracle]**'
  id: totrans-1660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: All of the “magic” searching for synonyms, DBLINKs etc. during table reflection
    are disabled by default unless you specify “oracle_resolve_synonyms=True” on the
    Table object. Resolving synonyms necessarily leads to some messy guessing which
    we’d rather leave off by default. When the flag is set, tables and related tables
    will be resolved against synonyms in all cases, meaning if a synonym exists for
    a particular table, reflection will use it when reflecting related tables. This
    is stickier behavior than before which is why it’s off by default.
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有在表反射期间搜索同义词、DBLINK等“魔术”功能默认情况下都已禁用，除非在Table对象上指定“oracle_resolve_synonyms=True”。解析同义词必然会导致一些混乱的猜测，我们宁愿默认情况下将其排除在外。当设置了标志时，表和相关表将在所有情况下针对同义词进行解析，这意味着如果特定表存在同义词，则在反映相关表时将使用它。这比以前的行为更粘性，这就是为什么默认情况下它是关闭的。
- en: misc
  id: totrans-1662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative] [extension]**'
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: 'The “synonym” function is now directly usable with “declarative”. Pass in the
    decorated property using the “descriptor” keyword argument, e.g.: somekey = synonym(‘_somekey’,
    descriptor=property(g, s))'
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “synonym”函数现在可以直接与“declarative”一起使用。使用“descriptor”关键字参数传递装饰的属性，例如：somekey =
    synonym(‘_somekey’, descriptor=property(g, s))
- en: '**[declarative] [extension]**'
  id: totrans-1665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: 'The “deferred” function is usable with “declarative”. Simplest usage is to
    declare deferred and Column together, e.g.: data = deferred(Column(Text))'
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “deferred”函数可与“declarative”一起使用。最简单的用法是一起声明deferred和Column，例如：data = deferred(Column(Text))
- en: '**[declarative] [extension]**'
  id: totrans-1667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Declarative also gained @synonym_for(…) and @comparable_using(…), front-ends
    for synonym and comparable_property.
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative还获得了@synonym_for(…)和@comparable_using(…)，这是synonym和comparable_property的前端。
- en: '**[declarative] [extension]**'
  id: totrans-1669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Improvements to mapper compilation when using declarative; already-compiled
    mappers will still trigger compiles of other uncompiled mappers when used
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用declarative时改进mapper编译；已经编译的mapper在使用时仍会触发其他未编译的mapper的编译
- en: 'References: [#995](https://www.sqlalchemy.org/trac/ticket/995)'
  id: totrans-1671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#995](https://www.sqlalchemy.org/trac/ticket/995)
- en: '**[declarative] [extension]**'
  id: totrans-1672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Declarative will complete setup for Columns lacking names, allows a more DRY
    syntax.
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative将为缺少名称的Columns完成设置，允许更DRY的语法。
- en: 'class Foo(Base):'
  id: totrans-1674
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'class Foo(Base):'
- en: ''
  id: totrans-1675
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: __tablename__ = ‘foos’ id = Column(Integer, primary_key=True)
  id: totrans-1676
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: __tablename__ = ‘foos’ id = Column(Integer, primary_key=True)
- en: '**[declarative] [extension]**'
  id: totrans-1677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: inheritance in declarative can be disabled when sending “inherits=None” to __mapper_args__.
  id: totrans-1678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在declarative中，通过将“inherits=None”发送到__mapper_args__可以禁用继承。
- en: '**[declarative] [extension]**'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: declarative_base() takes optional kwarg “mapper”, which is any callable/class/method
    that produces a mapper, such as declarative_base(mapper=scopedsession.mapper).
    This property can also be set on individual declarative classes using the “__mapper_cls__”
    property.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declarative_base()接受可选的kwarg“mapper”，这是任何可调用/类/方法，可以生成一个mapper，比如declarative_base(mapper=scopedsession.mapper)。这个属性也可以在单独的declarative类上使用“__mapper_cls__”属性进行设置。
- en: '**[postgres]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Got PG server side cursors back into shape, added fixed unit tests as part of
    the default test suite. Added better uniqueness to the cursor ID
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将PG服务器端游标恢复正常，作为默认测试套件的一部分添加了固定的单元测试。为游标ID添加了更好的唯一性
- en: 'References: [#1001](https://www.sqlalchemy.org/trac/ticket/1001)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1001](https://www.sqlalchemy.org/trac/ticket/1001)
- en: orm
  id: totrans-1684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'A small change in behavior to session.merge() - existing objects are checked
    for based on primary key attributes, not necessarily _instance_key. So the widely
    requested capability, that:'
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对session.merge()的行为进行了一点改变 - 现有对象是基于主键属性而不一定是_instance_key进行检查的。因此，广泛请求的功能，即：
- en: x = MyObject(id=1) x = sess.merge(x)
  id: totrans-1687
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = MyObject(id=1) x = sess.merge(x)
- en: 'will in fact load MyObject with id #1 from the database if present, is now
    available. merge() still copies the state of the given object to the persistent
    one, so an example like the above would typically have copied “None” from all
    attributes of “x” onto the persistent copy. These can be reverted using session.expire(x).'
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，如果存在，将从数据库中加载具有id＃1的MyObject，现在可用。merge()仍将给定对象的状态复制到持久对象上，因此像上面的示例通常会将“x”的所有属性的“None”复制到持久副本上。这些可以使用session.expire(x)来恢复。
- en: '**[orm]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Also fixed behavior in merge() whereby collection elements present on the destination
    but not the merged collection were not being removed from the destination.
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了merge()中的行为，即目标上存在但合并集合中不存在的元素未从目标中删除。
- en: '**[orm]**'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a more aggressive check for “uncompiled mappers”, helps particularly with
    declarative layer
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“未编译的映射器”更积极的检查，特别有助于声明层
- en: 'References: [#995](https://www.sqlalchemy.org/trac/ticket/995)'
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#995](https://www.sqlalchemy.org/trac/ticket/995)
- en: '**[orm]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The methodology behind “primaryjoin”/”secondaryjoin” has been refactored. Behavior
    should be slightly more intelligent, primarily in terms of error messages which
    have been pared down to be more readable. In a slight number of scenarios it can
    better resolve the correct foreign key than before.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”/“secondaryjoin”背后的方法已经重构。行为应该稍微更智能，主要是在错误消息方面，已经简化为更易读。在少数情况下，它可以比以前更好地解析正确的外键。
- en: '**[orm]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added comparable_property(), adds query Comparator behavior to regular, unmanaged
    Python properties
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加comparable_property()，将查询比较器行为添加到常规的、未管理的Python属性
- en: '**[orm] [‘machines’] [Company.employees.of_type(Engineer)]**'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [''machines''] [Company.employees.of_type(Engineer)]**'
- en: the functionality of query.with_polymorphic() has been added to mapper() as
    a configuration option.
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.with_polymorphic()的功能已添加到mapper()作为配置选项。
- en: 'It’s set via several forms:'
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它通过几种形式设置：
- en: with_polymorphic=’*’ with_polymorphic=[mappers] with_polymorphic=(‘*’, selectable)
    with_polymorphic=([mappers], selectable)
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_polymorphic='*' with_polymorphic=[mappers] with_polymorphic=(' * ', selectable)
    with_polymorphic=([mappers], selectable)
- en: This controls the default polymorphic loading strategy for inherited mappers.
    When a selectable is not given, outer joins are created for all joined-table inheriting
    mappers requested. Note that the auto-create of joins is not compatible with concrete
    table inheritance.
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这控制了继承映射器的默认多态加载策略。当没有给出可选择项时，将为所有请求的连接表继承映射器创建外连接。请注意，连接的自动创建与具体表继承不兼容。
- en: The existing select_table flag on mapper() is now deprecated and is synonymous
    with with_polymorphic(‘*’, select_table). Note that the underlying “guts” of select_table
    have been completely removed and replaced with the newer, more flexible approach.
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的mapper()上的select_table标志现在已被弃用，并与with_polymorphic(' * ', select_table)同义。请注意，select_table的底层“内部”已被完全删除，并替换为更新更灵活的方法。
- en: 'The new approach also automatically allows eager loads to work for subclasses,
    if they are present, for example:'
  id: totrans-1704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新方法还自动允许对子类进行急加载，如果存在的话，例如：
- en: '[PRE6]'
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: to load Company objects, their employees, and the ‘machines’ collection of employees
    who happen to be Engineers. A “with_polymorphic” Query option should be introduced
    soon as well which would allow per-Query control of with_polymorphic() on relations.
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载Company对象、它们的员工以及恰好是工程师的员工的“machines”集合。很快还应该引入一个“with_polymorphic”Query选项，它将允许对关系上的with_polymorphic()进行每个Query的控制。
- en: '**[orm]**'
  id: totrans-1707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'added two “experimental” features to Query, “experimental” in that their specific
    name/behavior is not carved in stone just yet: _values() and _from_self(). We’d
    like feedback on these.'
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了两个“实验性”功能，“实验性”是因为它们的具体名称/行为尚未最终确定：_values()和_from_self()。我们希望得到这些的反馈。
- en: _values(*columns) is given a list of column expressions, and returns a new Query
    that only returns those columns. When evaluated, the return value is a list of
    tuples just like when using add_column() or add_entity(), the only difference
    is that “entity zero”, i.e. the mapped class, is not included in the results.
    This means it finally makes sense to use group_by() and having() on Query, which
    have been sitting around uselessly until now.
  id: totrans-1709
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _values(*columns)给出一个列表达式列表，并返回一个仅返回这些列的新Query。在评估时，返回值是一个元组列表，就像使用add_column()或add_entity()时一样，唯一的区别是结果中不包括“实体零”，即映射类。这意味着现在终于可以在Query上使用group_by()和having()，这些功能一直无用至今。
- en: A future change to this method may include that its ability to join, filter
    and allow other options not related to a “resultset” are removed, so the feedback
    we’re looking for is how people want to use _values()…i.e. at the very end, or
    do people prefer to continue generating after it’s called.
  id: totrans-1710
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对该方法的未来更改可能包括删除其加入、过滤和允许其他与“结果集”无关的选项的能力，因此我们寻求的反馈是人们如何想要使用_values()...即在最后，还是人们更喜欢在调用后继续生成。
- en: _from_self() compiles the SELECT statement for the Query (minus any eager loaders),
    and returns a new Query that selects from that SELECT. So basically you can query
    from a Query without needing to extract the SELECT statement manually. This gives
    meaning to operations like query[3:5]._from_self().filter(some criterion). There’s
    not much controversial here except that you can quickly create highly nested queries
    that are less efficient, and we want feedback on the naming choice.
  id: totrans-1711
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _from_self()编译Query的SELECT语句（减去任何急加载器），并返回一个新的Query，从该SELECT中选择。因此，您可以从一个Query中查询而无需手动提取SELECT语句。这使得像query[3:5]._from_self().filter(some
    criterion)这样的操作具有意义。这里没有太多争议，除了您可以快速创建效率较低的高度嵌套查询，我们希望得到有关命名选择的反馈。
- en: '**[orm]**'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() and query.group_by() will accept multiple arguments using *args
    (like select() already does).
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()和query.group_by()将接受使用*args的多个参数（就像select()已经做的那样）。
- en: '**[orm]**'
  id: totrans-1714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added some convenience descriptors to Query: query.statement returns the full
    SELECT construct, query.whereclause returns just the WHERE part of the SELECT
    construct.'
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了一些便利描述符：query.statement返回完整的SELECT结构，query.whereclause仅返回SELECT结构中的WHERE部分。
- en: '**[orm]**'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed/covered case when using a False/0 value as a polymorphic discriminator.
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用False/0值作为多态鉴别器时的情况。
- en: '**[orm]**'
  id: totrans-1718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which was preventing synonym() attributes from being used with inheritance
  id: totrans-1719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止使用继承的synonym()���性的错误。
- en: '**[orm]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed SQL function truncation of trailing underscores
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL函数截断尾随下划线。
- en: 'References: [#996](https://www.sqlalchemy.org/trac/ticket/996)'
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#996](https://www.sqlalchemy.org/trac/ticket/996)
- en: '**[orm]**'
  id: totrans-1723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When attributes are expired on a pending instance, an error will not be raised
    when the “refresh” action is triggered and no result is found.
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当挂起实例上的属性过期时，在触发“refresh”操作并且没有找到结果时不会引发错误。
- en: '**[orm]**'
  id: totrans-1725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.execute can now find binds from metadata
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.execute现在可以从元数据中找到绑定
- en: '**[orm]**'
  id: totrans-1727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted the definition of “self-referential” to be any two mappers with a common
    parent (this affects whether or not aliased=True is required when joining with
    Query).
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '调整了“自引用”的定义，即任何具有共同父级的两个映射器（这会影响是否在与Query连接时需要aliased=True）。 '
- en: '**[orm]**'
  id: totrans-1729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Made some fixes to the “from_joinpoint” argument to query.join() so that if
    the previous join was aliased and this one isn’t, the join still happens successfully.
  id: totrans-1730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.join()中的“from_joinpoint”参数进行了一些修复，以便如果前一个连接被别名化而当前连接没有，连接仍然成功进行。
- en: '**[orm]**'
  id: totrans-1731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Assorted “cascade deletes” fixes:'
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种“级联删除”修复：
- en: Fixed “cascade delete” operation of dynamic relations, which had only been implemented
    for foreign-key nulling behavior in 0.4.2 and not actual cascading deletes
  id: totrans-1733
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了动态关系的“级联删除”操作，该操作在0.4.2版本中仅实现了外键空值行为，而不是实际的级联删除。
- en: Delete cascade without delete-orphan cascade on a many-to-one will not delete
    orphans which were disconnected from the parent before session.delete() is called
    on the parent (one-to-many already had this).
  id: totrans-1734
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多对一关系上没有设置级联删除或者孤儿级联时，将不会删除那些在调用父对象的session.delete()之前与父对象断开连接的孤儿对象（一对多已经具备此功能）。
- en: Delete cascade with delete-orphan will delete orphans whether or not it remains
    attached to its also-deleted parent.
  id: totrans-1735
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置了级联删除和孤儿删除时，无论孤儿对象是否仍然与已删除的父对象相关联，都将删除孤儿对象。
- en: delete-orphan cascade is properly detected on relations that are present on
    superclasses when using inheritance.
  id: totrans-1736
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用继承时，能够正确检测到存在于超类上的关系的级联删除。
- en: 'References: [#895](https://www.sqlalchemy.org/trac/ticket/895)'
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#895](https://www.sqlalchemy.org/trac/ticket/895)
- en: '**[orm]**'
  id: totrans-1738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed order_by calculation in Query to properly alias mapper-config’ed order_by
    when using select_from()
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中order_by计算的问题，当使用select_from()时，正确别名映射器配置的order_by。
- en: '**[orm]**'
  id: totrans-1740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Refactored the diffing logic that kicks in when replacing one collection with
    another into collections.bulk_replace, useful to anyone building multi-level collections.
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了在用另一个集合替换一个集合时触发的差异逻辑为collections.bulk_replace，对于构建多级集合的任何人都很有用。
- en: '**[orm]**'
  id: totrans-1742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Cascade traversal algorithm converted from recursive to iterative to support
    deep object graphs.
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将级联遍历算法从递归转换为迭代，以支持深层对象图。
- en: sql
  id: totrans-1744
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: schema-qualified tables now will place the schemaname ahead of the tablename
    in all column expressions as well as when generating column labels. This prevents
    cross- schema name collisions in all cases
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在架构限定的表中，现在将在所有列表达式以及生成列标签时将架构名放在表名之前。这样可以在所有情况下防止跨架构名称冲突。
- en: 'References: [#999](https://www.sqlalchemy.org/trac/ticket/999)'
  id: totrans-1747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#999](https://www.sqlalchemy.org/trac/ticket/999)
- en: '**[sql]**'
  id: totrans-1748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: can now allow selects which correlate all FROM clauses and have no FROM themselves.
    These are typically used in a scalar context, i.e. SELECT x, (SELECT x WHERE y)
    FROM table. Requires explicit correlate() call.
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以允许选择将所有 FROM 子句相关联并且自身没有 FROM 的情况。这些通常在标量上下文中使用，即 SELECT x, (SELECT x WHERE
    y) FROM table。需要显式的 correlate() 调用。
- en: '**[sql]**'
  id: totrans-1750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: ’name’ is no longer a required constructor argument for Column(). It (and .key)
    may now be deferred until the column is added to a Table.
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '‘name’ 不再是 Column() 的必需构造函数参数。现在可以延迟直到将列添加到 Table 时（以及 .key）。 '
- en: '**[sql]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: like(), ilike(), contains(), startswith(), endswith() take an optional keyword
    argument “escape=<somestring>”, which is set as the escape character using the
    syntax “x LIKE y ESCAPE ‘<somestring>’”.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: like()、ilike()、contains()、startswith()、endswith() 接受一个可选的关键字参数“escape=<somestring>”，该参数被设置为使用语法“x
    LIKE y ESCAPE ‘<somestring>’”的转义字符。
- en: 'References: [#791](https://www.sqlalchemy.org/trac/ticket/791), [#993](https://www.sqlalchemy.org/trac/ticket/993)'
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#791](https://www.sqlalchemy.org/trac/ticket/791), [#993](https://www.sqlalchemy.org/trac/ticket/993)
- en: '**[sql]**'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: random() is now a generic sql function and will compile to the database’s random
    implementation, if any.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: random() 现在是一个通用的 SQL 函数，并且将编译为数据库的随机实现（如果有）。
- en: '**[sql]**'
  id: totrans-1757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: update().values() and insert().values() take keyword arguments.
  id: totrans-1758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update().values() 和 insert().values() 接受关键字参数。
- en: '**[sql]**'
  id: totrans-1759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed an issue in select() regarding its generation of FROM clauses, in rare
    circumstances two clauses could be produced when one was intended to cancel out
    the other. Some ORM queries with lots of eager loads might have seen this symptom.
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 select() 中关于生成 FROM 子句的问题，在罕见情况下可能会产生两个子句，而本意是取消对方。一些具有大量急加载的 ORM 查询可能会看到此症状。
- en: '**[sql]**'
  id: totrans-1761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The case() function now also takes a dictionary as its whens parameter. It also
    interprets the “THEN” expressions as values by default, meaning case([(x==y, “foo”)])
    will interpret “foo” as a bound value, not a SQL expression. use text(expr) for
    literal SQL expressions in this case. For the criterion itself, these may be literal
    strings only if the “value” keyword is present, otherwise SA will force explicit
    usage of either text() or literal().
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: case() 函数现在还接受字典作为其 whens 参数。它还默认将“THEN”表达式解释为值，这意味着 case([(x==y, “foo”)]) 将“foo”解释为绑定值，而不是
    SQL 表达式。在这种情况下，使用 text(expr) 来获取字面 SQL 表达式。对于标准本身，这些只能是字面字符串，如果“value”关键字不存在，那么
    SA 将强制明确使用 text() 或 literal()。
- en: mysql
  id: totrans-1763
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The connection.info keys the dialect uses to cache server settings have changed
    and are now namespaced.
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言用于缓存服务器设置的连接.info 键已更改，并且现在有命名空间。
- en: mssql
  id: totrans-1766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Reflected tables will now automatically load other tables which are referenced
    by Foreign keys in the auto-loaded table,.
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反映的表现在将自动加载由自动加载表中的外键引用的其他表。
- en: 'References: [#979](https://www.sqlalchemy.org/trac/ticket/979)'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#979](https://www.sqlalchemy.org/trac/ticket/979)
- en: '**[mssql]**'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added executemany check to skip identity fetch,.
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 executemany 检查以跳过标识获取。
- en: 'References: [#916](https://www.sqlalchemy.org/trac/ticket/916)'
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#916](https://www.sqlalchemy.org/trac/ticket/916)
- en: '**[mssql]**'
  id: totrans-1773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added stubs for small date type.
  id: totrans-1774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为小日期类型添加了存根。
- en: 'References: [#884](https://www.sqlalchemy.org/trac/ticket/884)'
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#884](https://www.sqlalchemy.org/trac/ticket/884)
- en: '**[mssql]**'
  id: totrans-1776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added a new ‘driver’ keyword parameter for the pyodbc dialect. Will substitute
    into the ODBC connection string if given, defaults to ‘SQL Server’.
  id: totrans-1777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pyodbc 方言添加了一个新的‘driver’关键字参数。如果给定，将替换为 ODBC 连接字符串，默认为‘SQL Server’。
- en: '**[mssql]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added a new ‘max_identifier_length’ keyword parameter for the pyodbc dialect.
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pyodbc 方言添加了一个新的‘max_identifier_length’关键字参数。
- en: '**[mssql]**'
  id: totrans-1780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Improvements to pyodbc + Unix. If you couldn’t get that combination to work
    before, please try again.
  id: totrans-1781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 pyodbc + Unix 进行了改进。如果以前无法使该组合工作，请再试一次。
- en: oracle
  id: totrans-1782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The “owner” keyword on Table is now deprecated, and is exactly synonymous with
    the “schema” keyword. Tables can now be reflected with alternate “owner” attributes,
    explicitly stated on the Table object or not using “schema”.
  id: totrans-1784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table 上的“owner”关键字现已弃用，与“schema”关键字完全同义。现在可以在 Table 对象上明确声明或不使用“schema”来反映具有备用“owner”属性的表。
- en: '**[oracle]**'
  id: totrans-1785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: All of the “magic” searching for synonyms, DBLINKs etc. during table reflection
    are disabled by default unless you specify “oracle_resolve_synonyms=True” on the
    Table object. Resolving synonyms necessarily leads to some messy guessing which
    we’d rather leave off by default. When the flag is set, tables and related tables
    will be resolved against synonyms in all cases, meaning if a synonym exists for
    a particular table, reflection will use it when reflecting related tables. This
    is stickier behavior than before which is why it’s off by default.
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除非在 Table 对象上指定了“oracle_resolve_synonyms=True”，否则默认情况下，表反射期间所有搜索同义词、DBLINK 等的“魔术”都将被禁用。解析同义词必然会导致一些混乱的猜测，我们宁愿默认不使用。当设置了标志时，表和相关表将在所有情况下解析同义词，这意味着如果特定表存在同义词，则在反映相关表时将使用它。这比以前的行为更具黏性，因此默认情况下关闭了它。
- en: misc
  id: totrans-1787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative] [extension]**'
  id: totrans-1788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: 'The “synonym” function is now directly usable with “declarative”. Pass in the
    decorated property using the “descriptor” keyword argument, e.g.: somekey = synonym(‘_somekey’,
    descriptor=property(g, s))'
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在“synonym”函数直接可用于“声明式”。使用“descriptor”关键字参数传递装饰的属性，例如：`somekey = synonym(‘_somekey’,
    descriptor=property(g, s))`
- en: '**[declarative] [extension]**'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: 'The “deferred” function is usable with “declarative”. Simplest usage is to
    declare deferred and Column together, e.g.: data = deferred(Column(Text))'
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “deferred”函数可与“声明式”一起使用。最简单的用法是一起声明延迟和列，例如：`data = deferred(Column(Text))`
- en: '**[declarative] [extension]**'
  id: totrans-1792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Declarative also gained @synonym_for(…) and @comparable_using(…), front-ends
    for synonym and comparable_property.
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明式还增加了`@synonym_for(…)`和`@comparable_using(…)`，这是同义词和可比较属性的前端。
- en: '**[declarative] [extension]**'
  id: totrans-1794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Improvements to mapper compilation when using declarative; already-compiled
    mappers will still trigger compiles of other uncompiled mappers when used
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用声明式时，对映射器编译进行了改进；已编译的映射器在使用时仍会触发其他未编译的映射器的编译
- en: 'References: [#995](https://www.sqlalchemy.org/trac/ticket/995)'
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#995](https://www.sqlalchemy.org/trac/ticket/995)
- en: '**[declarative] [extension]**'
  id: totrans-1797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: Declarative will complete setup for Columns lacking names, allows a more DRY
    syntax.
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明式将为缺少名称的列完成设置，允许更加 DRY 的语法。
- en: 'class Foo(Base):'
  id: totrans-1799
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'class Foo(Base):'
- en: ''
  id: totrans-1800
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: __tablename__ = ‘foos’ id = Column(Integer, primary_key=True)
  id: totrans-1801
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`__tablename__ = ‘foos’ id = Column(Integer, primary_key=True)`'
- en: '**[declarative] [extension]**'
  id: totrans-1802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: inheritance in declarative can be disabled when sending “inherits=None” to __mapper_args__.
  id: totrans-1803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明式中，当将“inherits=None”发送到`__mapper_args__`时，可以禁用继承。
- en: '**[declarative] [extension]**'
  id: totrans-1804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式] [扩展]**'
- en: declarative_base() takes optional kwarg “mapper”, which is any callable/class/method
    that produces a mapper, such as declarative_base(mapper=scopedsession.mapper).
    This property can also be set on individual declarative classes using the “__mapper_cls__”
    property.
  id: totrans-1805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`declarative_base()`接受可选参数“mapper”，它是任何可调用的函数/类/方法，用于生成一个映射器，例如`declarative_base(mapper=scopedsession.mapper)`。这个属性也可以在单独的声明类中使用“__mapper_cls__”属性设置。'
- en: '**[postgres]**'
  id: totrans-1806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[PostgreSQL]**'
- en: Got PG server side cursors back into shape, added fixed unit tests as part of
    the default test suite. Added better uniqueness to the cursor ID
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使 PG 服务器端游标恢复正常，将固定单元测试添加到默认测试套件中。为游标 ID 添加了更好的唯一性
- en: 'References: [#1001](https://www.sqlalchemy.org/trac/ticket/1001)'
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1001](https://www.sqlalchemy.org/trac/ticket/1001)
- en: 0.4.4
  id: totrans-1809
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.4
- en: 'Released: Wed Mar 12 2008'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Wed Mar 12 2008
- en: orm
  id: totrans-1811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-1812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: any(), has(), contains(), ~contains(), attribute level == and != now work properly
    with self-referential relations - the clause inside the EXISTS is aliased on the
    “remote” side to distinguish it from the parent table. This applies to single
    table self-referential as well as inheritance-based self-referential.
  id: totrans-1813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`any()`, `has()`, `contains()`, `~contains()`, 属性级别的 `==` 和 `!=` 现在与自引用关系正常工作
    - EXISTS 中的子句在“远程”一侧进行别名处理，以区别于父表。这适用于单表自引用以及基于继承的自引用。'
- en: '**[orm]**'
  id: totrans-1814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Repaired behavior of == and != operators at the relation() level when compared
    against NULL for one-to-one relations
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在关系()级别使用 == 和 != 操作符与 NULL 比较时的行为，用于一对一关系
- en: 'References: [#985](https://www.sqlalchemy.org/trac/ticket/985)'
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#985](https://www.sqlalchemy.org/trac/ticket/985)
- en: '**[orm]**'
  id: totrans-1817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug whereby session.expire() attributes were not loading on an polymorphically-mapped
    instance mapped by a select_table mapper.
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在由 select_table 映射的多态映射实例上，session.expire() 属性未加载。
- en: '**[orm]**'
  id: totrans-1819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added query.with_polymorphic() - specifies a list of classes which descend from
    the base class, which will be added to the FROM clause of the query. Allows subclasses
    to be used within filter() criterion as well as eagerly loads the attributes of
    those subclasses.
  id: totrans-1820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 query.with_polymorphic() - 指定了从基类继承的类列表，这些类将被添加到查询的 FROM 子句中。允许子类在 filter()
    条件中使用，以及急切加载这些子类的属性。
- en: '**[orm]**'
  id: totrans-1821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Your cries have been heard: removing a pending item from an attribute or collection
    with delete-orphan expunges the item from the session; no FlushError is raised.
    Note that if you session.save()’ed the pending item explicitly, the attribute/collection
    removal still knocks it out.'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的呼声已经被听到：使用 delete-orphan 从属性或集合中移除一个待处理项会将该项从会话中清除；不会引发 FlushError。请注意，如果你显式地
    session.save() 了待处理项，那么属性/集合的移除仍会将其排除在外。
- en: '**[orm]**'
  id: totrans-1823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() and session.expire() raise an error when called on instances
    which are not persistent within the session
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在会话中调用 session.refresh() 和 session.expire() 时，对于不在会话中的实例会引发错误。
- en: '**[orm]**'
  id: totrans-1825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed potential generative bug when the same Query was used to generate multiple
    Query objects using join().
  id: totrans-1826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用 join() 生成多个 Query 对象时可能出现的生成性 bug。
- en: '**[orm]**'
  id: totrans-1827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which was introduced in 0.4.3, whereby loading an already-persistent
    instance mapped with joined table inheritance would trigger a useless “secondary”
    load from its joined table, when using the default “select” polymorphic_fetch.
    This was due to attributes being marked as expired during its first load and not
    getting unmarked from the previous “secondary” load. Attributes are now unexpired
    based on presence in __dict__ after any load or commit operation succeeds.
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.4.3 中引入的 bug，当使用默认的“select” polymorphic_fetch 时，加载已经持久化的实例映射到连接表继承时，会触发一个无用的从其连接表中加载的“secondary”加载。这是由于属性在第一次加载时被标记为过期，并且在之前的“secondary”加载中没有被标记为未过期。根据任何加载或提交操作成功后在
    __dict__ 中的存在情况，现在会取消属性的过期标记。
- en: '**[orm]**'
  id: totrans-1829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Deprecated Query methods apply_sum(), apply_max(), apply_min(), apply_avg().
    Better methodologies are coming….
  id: totrans-1830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用了 Query 方法 apply_sum()、apply_max()、apply_min()、apply_avg()。更好的方法学正在到来……
- en: '**[orm]**'
  id: totrans-1831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() can accept a callable for its first argument, which returns the class
    to be related. This is in place to assist declarative packages to define relations
    without classes yet being in place.
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation() 可以接受一个可调用对象作为其第一个参数，该可调用对象返回要关联的类。这是为了帮助声明性包在类尚未就位时定义关系。
- en: '**[orm]**'
  id: totrans-1833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added a new “higher level” operator called “of_type()”: used in join() as well
    as with any() and has(), qualifies the subclass which will be used in filter criterion,
    e.g.:'
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“更高级”的操作符称为“of_type()”：在 join() 中以及与 any() 和 has() 一起使用，限定将在过滤条件中使用的子类，例如：
- en: query.filter(Company.employees.of_type(Engineer).
  id: totrans-1835
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.filter(Company.employees.of_type(Engineer).
- en: ''
  id: totrans-1836
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: any(Engineer.name==’foo’))
  id: totrans-1837
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: any(Engineer.name==’foo’))
- en: ''
  id: totrans-1838
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: or
  id: totrans-1839
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 或
- en: ''
  id: totrans-1840
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: query.join(Company.employees.of_type(Engineer)).
  id: totrans-1841
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.join(Company.employees.of_type(Engineer)).
- en: ''
  id: totrans-1842
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: filter(Engineer.name==’foo’)
  id: totrans-1843
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: filter(Engineer.name==’foo’)
- en: '**[orm]**'
  id: totrans-1844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Preventive code against a potential lost-reference bug in flush().
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对 flush() 中潜在的丢失引用 bug 的预防性代码。
- en: '**[orm]**'
  id: totrans-1846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Expressions used in filter(), filter_by() and others, when they make usage of
    a clause generated from a relation using the identity of a child object (e.g.,
    filter(Parent.child==<somechild>)), evaluate the actual primary key value of <somechild>
    at execution time so that the autoflush step of the Query can complete, thereby
    populating the PK value of <somechild> in the case that <somechild> was pending.
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 filter()、filter_by() 和其他表达式中使用时，如果它们使用从关系生成的子对象的标识（例如，filter(Parent.child==<somechild>))，则在执行时评估
    <somechild> 的实际主键值，以便 Query 的 autoflush 步骤可以完成，从而在 <somechild> 是待处理状态时填充 <somechild>
    的 PK 值。
- en: '**[orm]**'
  id: totrans-1848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: setting the relation()-level order by to a column in the many-to-many “secondary”
    table will now work with eager loading, previously the “order by” wasn’t aliased
    against the secondary table’s alias.
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将关系()-级别的 order by 设置为“secondary”表中的列现在可以与急切加载一起使用，以前的“order by”不会针对 secondary
    表的别名进行别名处理。
- en: '**[orm]**'
  id: totrans-1850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Synonyms riding on top of existing descriptors are now full proxies to those
    descriptors.
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，存在于现有描述符之上的同义词现在是这些描述符的完整代理。
- en: sql
  id: totrans-1852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Can again create aliases of selects against textual FROM clauses.
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以再次对文本 FROM 子句创建选择的别名。
- en: 'References: [#975](https://www.sqlalchemy.org/trac/ticket/975)'
  id: totrans-1855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#975](https://www.sqlalchemy.org/trac/ticket/975)
- en: '**[sql]**'
  id: totrans-1856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The value of a bindparam() can be a callable, in which case it’s evaluated at
    statement execution time to get the value.
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam() 的值可以是一个可调用对象，这样在语句执行时它会被评估以获取值。
- en: '**[sql]**'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added exception wrapping/reconnect support to result set fetching. Reconnect
    works for those databases that raise a catchable data error during results (i.e.
    doesn’t work on MySQL)
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了结果集获取的异常包装/重连支持。重新连接适用于在结果集期间引发可捕获数据错误的数据库（例如 MySQL 上不起作用）
- en: 'References: [#978](https://www.sqlalchemy.org/trac/ticket/978)'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#978](https://www.sqlalchemy.org/trac/ticket/978)
- en: '**[sql]**'
  id: totrans-1861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Implemented two-phase API for “threadlocal” engine, via engine.begin_twophase(),
    engine.prepare()
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了“线程本地”引擎的两阶段 API，通过 engine.begin_twophase()，engine.prepare()
- en: 'References: [#936](https://www.sqlalchemy.org/trac/ticket/936)'
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#936](https://www.sqlalchemy.org/trac/ticket/936)
- en: '**[sql]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug which was preventing UNIONS from being cloneable.
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个阻止 UNION 可克隆的错误。
- en: 'References: [#986](https://www.sqlalchemy.org/trac/ticket/986)'
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#986](https://www.sqlalchemy.org/trac/ticket/986)
- en: '**[sql]**'
  id: totrans-1867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “bind” keyword argument to insert(), update(), delete() and DDL(). The
    .bind property is now assignable on those statements as well as on select().
  id: totrans-1868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 insert()、update()、delete() 和 DDL() 中添加了“bind”关键字参数。这些语句上现在也可以分配 .bind 属性。
- en: '**[sql]**'
  id: totrans-1869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Insert statements can now be compiled with extra “prefix” words between INSERT
    and INTO, for vendor extensions like MySQL’s INSERT IGNORE INTO table.
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在 INSERT 和 INTO 之间编译带有额外“前缀”单词的插入语句，用于供应商扩展，如 MySQL 的 INSERT IGNORE INTO
    table。
- en: extensions
  id: totrans-1871
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-1872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: a new super-small “declarative” extension has been added, which allows Table
    and mapper() configuration to take place inline underneath a class declaration.
    This extension differs from ActiveMapper and Elixir in that it does not redefine
    any SQLAlchemy semantics at all; literal Column, Table and relation() constructs
    are used to define the class behavior and table definition.
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的超小型“声明式”扩展，它允许在类声明下方内联地进行 Table 和 mapper() 配置。该扩展与 ActiveMapper 和 Elixir
    不同之处在于它完全不重新定义任何 SQLAlchemy 语义；字面 Column、Table 和 relation() 构造用于定义类行为和表定义。
- en: misc
  id: totrans-1874
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-1875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Invalid SQLite connection URLs now raise an error.
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无效的 SQLite 连接 URL 现在会引发错误。
- en: '**[dialects]**'
  id: totrans-1877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: postgres TIMESTAMP renders correctly
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres TIMESTAMP 现在可以正确呈现
- en: 'References: [#981](https://www.sqlalchemy.org/trac/ticket/981)'
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#981](https://www.sqlalchemy.org/trac/ticket/981)
- en: '**[dialects]**'
  id: totrans-1880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: postgres PGArray is a “mutable” type by default; when used with the ORM, mutable-style
    equality/ copy-on-write techniques are used to test for changes.
  id: totrans-1881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres 的 PGArray 默认是一个“可变”类型；当与 ORM 一起使用时，使用可变风格的相等性/写时复制技术来检测更改。
- en: orm
  id: totrans-1882
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: any(), has(), contains(), ~contains(), attribute level == and != now work properly
    with self-referential relations - the clause inside the EXISTS is aliased on the
    “remote” side to distinguish it from the parent table. This applies to single
    table self-referential as well as inheritance-based self-referential.
  id: totrans-1884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: any()、has()、contains()、~contains()、属性级别的 == 和 != 现在可以与自引用关系正常工作 - 存在子句在“远程”侧上别名以区分它与父表。这适用于单表自引用以及基于继承的自引用。
- en: '**[orm]**'
  id: totrans-1885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired behavior of == and != operators at the relation() level when compared
    against NULL for one-to-one relations
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与 NULL 比较一对一关系的 relation() 级别时，== 和 != 操作符的行为已修复。
- en: 'References: [#985](https://www.sqlalchemy.org/trac/ticket/985)'
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#985](https://www.sqlalchemy.org/trac/ticket/985)
- en: '**[orm]**'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby session.expire() attributes were not loading on an polymorphically-mapped
    instance mapped by a select_table mapper.
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，该错误使 session.expire() 属性在由 select_table 映射的多态映射实例上加载时无法正常工作。
- en: '**[orm]**'
  id: totrans-1890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added query.with_polymorphic() - specifies a list of classes which descend from
    the base class, which will be added to the FROM clause of the query. Allows subclasses
    to be used within filter() criterion as well as eagerly loads the attributes of
    those subclasses.
  id: totrans-1891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 query.with_polymorphic() - 指定了从基类继承的类列表，这些类将被添加到查询的 FROM 子句中。允许在 filter()
    条件中使用子类，并且可以急切地加载这些子类的属性。
- en: '**[orm]**'
  id: totrans-1892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Your cries have been heard: removing a pending item from an attribute or collection
    with delete-orphan expunges the item from the session; no FlushError is raised.
    Note that if you session.save()’ed the pending item explicitly, the attribute/collection
    removal still knocks it out.'
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你们的呼声已经被听到：使用 delete-orphan 从属性或集合中删除待处理项会从会话中删除该项；不会引发 FlushError。请注意，如果您显式
    session.save() 待处理项，属性/集合的移除仍然会将其排除。
- en: '**[orm]**'
  id: totrans-1894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() and session.expire() raise an error when called on instances
    which are not persistent within the session
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在会话中调用session.refresh()和session.expire()时，如果调用的实例不在会话中持久化，则会引发错误。
- en: '**[orm]**'
  id: totrans-1896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed potential generative bug when the same Query was used to generate multiple
    Query objects using join().
  id: totrans-1897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用相同的Query生成多个使用join()的Query对象时可能出现的生成性bug。
- en: '**[orm]**'
  id: totrans-1898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which was introduced in 0.4.3, whereby loading an already-persistent
    instance mapped with joined table inheritance would trigger a useless “secondary”
    load from its joined table, when using the default “select” polymorphic_fetch.
    This was due to attributes being marked as expired during its first load and not
    getting unmarked from the previous “secondary” load. Attributes are now unexpired
    based on presence in __dict__ after any load or commit operation succeeds.
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.4.3版本中引入的一个bug，即在使用默认的“select” polymorphic_fetch时，加载一个已经持久化的实例，该实例映射到了联合表继承，会触发一个无用的来自其联合表的“secondary”加载。这是因为属性在第一次加载时被标记为过期，并且在之前的“secondary”加载中没有被取消标记。现在，属性在任何加载或提交操作成功后基于__dict__中的存在而被取消过期。
- en: '**[orm]**'
  id: totrans-1900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Deprecated Query methods apply_sum(), apply_max(), apply_min(), apply_avg().
    Better methodologies are coming….
  id: totrans-1901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃了Query方法apply_sum()、apply_max()、apply_min()、apply_avg()。更好的方法正在到来……
- en: '**[orm]**'
  id: totrans-1902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() can accept a callable for its first argument, which returns the class
    to be related. This is in place to assist declarative packages to define relations
    without classes yet being in place.
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()可以接受��个可调用对象作为其第一个参数，该可调用对象返回要关联的类。这是为了帮助声明性包在没有类的情况下定义关系。
- en: '**[orm]**'
  id: totrans-1904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added a new “higher level” operator called “of_type()”: used in join() as well
    as with any() and has(), qualifies the subclass which will be used in filter criterion,
    e.g.:'
  id: totrans-1905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个名为“of_type()”的新的“更高级”运算符：在join()中使用，以及与any()和has()一起使用，用于限定将在过滤条件中使用的子类，例如：
- en: query.filter(Company.employees.of_type(Engineer).
  id: totrans-1906
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.filter(Company.employees.of_type(Engineer).
- en: ''
  id: totrans-1907
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: any(Engineer.name==’foo’))
  id: totrans-1908
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: any(Engineer.name==’foo’))
- en: ''
  id: totrans-1909
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: or
  id: totrans-1910
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 或
- en: ''
  id: totrans-1911
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: query.join(Company.employees.of_type(Engineer)).
  id: totrans-1912
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query.join(Company.employees.of_type(Engineer)).
- en: ''
  id: totrans-1913
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: filter(Engineer.name==’foo’)
  id: totrans-1914
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: filter(Engineer.name==’foo’)
- en: '**[orm]**'
  id: totrans-1915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Preventive code against a potential lost-reference bug in flush().
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对flush()中潜在的丢失引用bug进行了预防性代码编写。
- en: '**[orm]**'
  id: totrans-1917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Expressions used in filter(), filter_by() and others, when they make usage of
    a clause generated from a relation using the identity of a child object (e.g.,
    filter(Parent.child==<somechild>)), evaluate the actual primary key value of <somechild>
    at execution time so that the autoflush step of the Query can complete, thereby
    populating the PK value of <somechild> in the case that <somechild> was pending.
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在filter()、filter_by()等中使用的表达式，当它们使用从关系生成的子对象的标识（例如，filter(Parent.child==<somechild>)）生成的子句时，在执行时评估<somechild>的实际主键值，以便Query的自动刷新步骤可以完成，从而在<somechild>处于挂起状态时填充<somechild>的PK值。
- en: '**[orm]**'
  id: totrans-1919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: setting the relation()-level order by to a column in the many-to-many “secondary”
    table will now work with eager loading, previously the “order by” wasn’t aliased
    against the secondary table’s alias.
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将关系()-级别的order by设置为“secondary”表中的列现在可以与急加载一起使用，以前，“order by”没有针对secondary表的别名进行别名处理。
- en: '**[orm]**'
  id: totrans-1921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Synonyms riding on top of existing descriptors are now full proxies to those
    descriptors.
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，对现有描述符进行的同义词代理是对这些描述符的完全代理。
- en: sql
  id: totrans-1923
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Can again create aliases of selects against textual FROM clauses.
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以再次对文本FROM子句的选择创建别名。
- en: 'References: [#975](https://www.sqlalchemy.org/trac/ticket/975)'
  id: totrans-1926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#975](https://www.sqlalchemy.org/trac/ticket/975)
- en: '**[sql]**'
  id: totrans-1927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The value of a bindparam() can be a callable, in which case it’s evaluated at
    statement execution time to get the value.
  id: totrans-1928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()的值可以是可调用的，这样在语句执行时会评估它以获取值。
- en: '**[sql]**'
  id: totrans-1929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added exception wrapping/reconnect support to result set fetching. Reconnect
    works for those databases that raise a catchable data error during results (i.e.
    doesn’t work on MySQL)
  id: totrans-1930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为结果集获取添加了异常包装/重新连接支持。重新连接适用于在结果集期间引发可捕获数据错误的数据库（即在MySQL上不起作用）。
- en: 'References: [#978](https://www.sqlalchemy.org/trac/ticket/978)'
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#978](https://www.sqlalchemy.org/trac/ticket/978)
- en: '**[sql]**'
  id: totrans-1932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Implemented two-phase API for “threadlocal” engine, via engine.begin_twophase(),
    engine.prepare()
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了“threadlocal”引擎的两阶段API，通过engine.begin_twophase()、engine.prepare()
- en: 'References: [#936](https://www.sqlalchemy.org/trac/ticket/936)'
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#936](https://www.sqlalchemy.org/trac/ticket/936)
- en: '**[sql]**'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug which was preventing UNIONS from being cloneable.
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止UNIONS可克隆的bug。
- en: 'References: [#986](https://www.sqlalchemy.org/trac/ticket/986)'
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#986](https://www.sqlalchemy.org/trac/ticket/986)
- en: '**[sql]**'
  id: totrans-1938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “bind” keyword argument to insert(), update(), delete() and DDL(). The
    .bind property is now assignable on those statements as well as on select().
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在insert()、update()、delete()和DDL()中添加了“bind”关键字参数。现在这些语句上的.bind属性也是可分配的，就像在select()上一样。
- en: '**[sql]**'
  id: totrans-1940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Insert statements can now be compiled with extra “prefix” words between INSERT
    and INTO, for vendor extensions like MySQL’s INSERT IGNORE INTO table.
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在INSERT和INTO之间编译带有额外“前缀”单词的插入语句，用于供应商扩展，如MySQL的INSERT IGNORE INTO table。
- en: extensions
  id: totrans-1942
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-1943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: a new super-small “declarative” extension has been added, which allows Table
    and mapper() configuration to take place inline underneath a class declaration.
    This extension differs from ActiveMapper and Elixir in that it does not redefine
    any SQLAlchemy semantics at all; literal Column, Table and relation() constructs
    are used to define the class behavior and table definition.
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了一个超小型的“声明式”扩展，允许在类声明下方内联进行Table和mapper()配置。该扩展与ActiveMapper和Elixir不同，它根本不重新定义任何SQLAlchemy语义；直接使用字面Column、Table和relation()构造来定义类行为和表定义。
- en: misc
  id: totrans-1945
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-1946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Invalid SQLite connection URLs now raise an error.
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无效的SQLite连接URL现在会引发错误。
- en: '**[dialects]**'
  id: totrans-1948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: postgres TIMESTAMP renders correctly
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres TIMESTAMP现在正确呈现
- en: 'References: [#981](https://www.sqlalchemy.org/trac/ticket/981)'
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#981](https://www.sqlalchemy.org/trac/ticket/981)
- en: '**[dialects]**'
  id: totrans-1951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: postgres PGArray is a “mutable” type by default; when used with the ORM, mutable-style
    equality/ copy-on-write techniques are used to test for changes.
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres PGArray默认是“可变”类���；在与ORM一起使用时，使用可变风格的相等性/写时复制技术来测试更改。
- en: 0.4.3
  id: totrans-1953
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.3
- en: 'Released: Thu Feb 14 2008'
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年2月14日 星期四
- en: general
  id: totrans-1955
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-1956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Fixed a variety of hidden and some not-so-hidden compatibility issues for Python
    2.3, thanks to new support for running the full test suite on 2.3.
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列隐藏的以及一些不那么隐藏的Python 2.3兼容性问题，感谢对在2.3上运行完整测试套件的新支持。
- en: '**[general]**'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Warnings are now issued as type exceptions.SAWarning.
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在警告被作为类型异常SAWarning发出。
- en: orm
  id: totrans-1960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Every Session.begin() must now be accompanied by a corresponding commit() or
    rollback() unless the session is closed with Session.close(). This also includes
    the begin() which is implicit to a session created with transactional=True. The
    biggest change introduced here is that when a Session created with transactional=True
    raises an exception during flush(), you must call Session.rollback() or Session.close()
    in order for that Session to continue after an exception.
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个Session.begin()现在必须伴随相应的commit()或rollback()，除非会话已通过Session.close()关闭。这也包括使用transactional=True创建的会话隐含的begin()。这里引入的最大变化是，当使用transactional=True创建的会话在flush()期间引发异常时，必须调用Session.rollback()或Session.close()才能使该会话在异常后继续。
- en: '**[orm]**'
  id: totrans-1963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed merge() collection-doubling bug when merging transient entities with backref’ed
    collections.
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在合并具有backref集合的瞬时实体时出现的merge()集合翻倍错误。
- en: 'References: [#961](https://www.sqlalchemy.org/trac/ticket/961)'
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#961](https://www.sqlalchemy.org/trac/ticket/961)
- en: '**[orm]**'
  id: totrans-1966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge(dont_load=True) does not accept transient entities, this is in continuation
    with the fact that merge(dont_load=True) does not accept any “dirty” objects either.
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge(dont_load=True)不接受瞬时实体，这与merge(dont_load=True)不接受任何“脏”对象的事实一致。
- en: '**[orm]**'
  id: totrans-1968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added standalone “query” class attribute generated by a scoped_session. This
    provides MyClass.query without using Session.mapper. Use via:'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了由scoped_session生成的独立“query”类属性。这提供了MyClass.query，而不使用Session.mapper。通过以下方式使用：
- en: MyClass.query = Session.query_property()
  id: totrans-1970
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MyClass.query = Session.query_property()
- en: '**[orm]**'
  id: totrans-1971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The proper error message is raised when trying to access expired instance attributes
    with no session present
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试在没有会话的情况下访问过期实例属性时，会引发适当的错误消息。
- en: '**[orm]**'
  id: totrans-1973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dynamic_loader() / lazy=”dynamic” now accepts and uses the order_by parameter
    in the same way in which it works with relation().
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dynamic_loader() / lazy=”dynamic”现在以与relation()相同的方式接受和使用order_by参数。
- en: '**[orm]**'
  id: totrans-1975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added expire_all() method to Session. Calls expire() for all persistent instances.
    This is handy in conjunction with…
  id: totrans-1976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了expire_all()方法到Session。调用expire()以使所有持久实例过期。这在与…结合使用时非常方便。
- en: '**[orm]**'
  id: totrans-1977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Instances which have been partially or fully expired will have their expired
    attributes populated during a regular Query operation which affects those objects,
    preventing a needless second SQL statement for each instance.
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分或完全过期的实例在常规Query操作期间将其过期属性填充，影响那些对象，防止每个实例需要不必要的第二个SQL语句。
- en: '**[orm]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Dynamic relations, when referenced, create a strong reference to the parent
    object so that the query still has a parent to call against even if the parent
    is only created (and otherwise dereferenced) within the scope of a single expression.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动态关系在被引用时会创建对父对象的强引用，以便查询仍然有一个父对象可以调用，即使父对象仅在单个表达式范围内创建（并且在其他情况下取消引用）。
- en: 'References: [#938](https://www.sqlalchemy.org/trac/ticket/938)'
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#938](https://www.sqlalchemy.org/trac/ticket/938)
- en: '**[orm]**'
  id: totrans-1982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a mapper() flag “eager_defaults”. When set to True, defaults that are
    generated during an INSERT or UPDATE operation are post-fetched immediately, instead
    of being deferred until later. This mimics the old 0.3 behavior.
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个mapper()标志“eager_defaults”。当设置为True时，在INSERT或UPDATE操作期间生成的默认值会立即后获取，而不是延迟到以后。这模仿了旧的0.3行为。
- en: '**[orm]**'
  id: totrans-1984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'query.join() can now accept class-mapped attributes as arguments. These can
    be used in place or in any combination with strings. In particular this allows
    construction of joins to subclasses on a polymorphic relation, i.e.:'
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()现在可以接受类映射属性作为参数。这些可以用于替代字符串或任何组合。特别是这允许在多态关系上构建到子类的连接，即：
- en: query(Company).join([‘employees’, Engineer.name])
  id: totrans-1986
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query(Company).join([‘employees’, Engineer.name])
- en: '**[orm] [(‘employees’] [Engineer.name] [people.join(engineer))]**'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [(‘employees’] [Engineer.name] [people.join(engineer))]**'
- en: 'query.join() can also accept tuples of attribute name/some selectable as arguments.
    This allows construction of joins *from* subclasses of a polymorphic relation,
    i.e.:'
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()还可以接受属性名/某些可选择的元组作为参数。这允许构建从多态关系的子类连接，即：
- en: query(Company).join(
  id: totrans-1989
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query(Company).join(
- en: ''
  id: totrans-1990
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: )
  id: totrans-1991
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: )
- en: '**[orm]**'
  id: totrans-1992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: General improvements to the behavior of join() in conjunction with polymorphic
    mappers, i.e. joining from/to polymorphic mappers and properly applying aliases.
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对join()的行为进行了一般性改进，与多态映射器一起使用时，即从/到多态映射器进行连接并正确应用别名。
- en: '**[orm]**'
  id: totrans-1994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed/improved behavior when a mapper determines the natural “primary key” of
    a mapped join, it will more effectively reduce columns which are equivalent via
    foreign key relation. This affects how many arguments need to be sent to query.get(),
    among other things.
  id: totrans-1995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当映射器确定映射连接的自然“主键”时，它将更有效地减少通过外键关系等效的列。这影响了需要发送给query.get()的参数数量，等等。
- en: 'References: [#933](https://www.sqlalchemy.org/trac/ticket/933)'
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#933](https://www.sqlalchemy.org/trac/ticket/933)
- en: '**[orm]**'
  id: totrans-1997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The lazy loader can now handle a join condition where the “bound” column (i.e.
    the one that gets the parent id sent as a bind parameter) appears more than once
    in the join condition. Specifically this allows the common task of a relation()
    which contains a parent-correlated subquery, such as “select only the most recent
    child item”.
  id: totrans-1998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 惰性加载器现在可以处理一个连接条件，其中“绑定”列（即将父id作为绑定参数发送的列）在连接条件中出现多次。具体来说，这允许了包含父相关子查询的relation()的常见任务，比如“仅选择最近的子项”。
- en: 'References: [#946](https://www.sqlalchemy.org/trac/ticket/946)'
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#946](https://www.sqlalchemy.org/trac/ticket/946)
- en: '**[orm]**'
  id: totrans-2000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in polymorphic inheritance where an incorrect exception is raised
    when base polymorphic_on column does not correspond to any columns within the
    local selectable of an inheriting mapper more than one level deep
  id: totrans-2001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态继承中的错误，当基本多态_on列与继承映射器的本地可选择中的任何列不对应时，会引发不正确的异常，超过一级深度
- en: '**[orm]**'
  id: totrans-2002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in polymorphic inheritance which made it difficult to set a working
    “order_by” on a polymorphic mapper.
  id: totrans-2003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态继承中的错误，使得在多态映射器上设置一个有效的“order_by”变得困难。
- en: '**[orm]**'
  id: totrans-2004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a rather expensive call in Query that was slowing down polymorphic queries.
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中一个较昂贵的调用，减缓了多态查询的速度。
- en: '**[orm]**'
  id: totrans-2006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”Passive defaults” and other “inline” defaults can now be loaded during a flush()
    call if needed; in particular, this allows constructing relations() where a foreign
    key column references a server-side-generated, non-primary-key column.
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，”被动默认值”和其他“内联”默认值现在可以在flush()调用期间加载；特别是，这允许构建relations()，其中外键列引用服务器端生成的非主键列。
- en: 'References: [#954](https://www.sqlalchemy.org/trac/ticket/954)'
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#954](https://www.sqlalchemy.org/trac/ticket/954)
- en: '**[orm]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Additional Session transaction fixes/changes:'
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 附加的会话事务修复/更改：
- en: 'Fixed bug with session transaction management: parent transactions weren’t
    started on the connection when adding a connection to a nested transaction.'
  id: totrans-2011
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了会话事务管理的错误：在向嵌套事务添加连接时，没有在连接上启动父事务。
- en: session.transaction now always refers to the innermost active transaction, even
    when commit/rollback are called directly on the session transaction object.
  id: totrans-2012
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.transaction现在始终指代最内层的活动事务，即使在会话事务对象上直接调用commit/rollback也是如此。
- en: Two-phase transactions can now be prepared.
  id: totrans-2013
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以准备两阶段事务。
- en: When preparing a two-phase transaction fails on one connection, all the connections
    are rolled back.
  id: totrans-2014
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个连接上的两阶段事务准备失败时，所有连接都会回滚。
- en: session.close() didn’t close all transactions when nested transactions were
    used.
  id: totrans-2015
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用嵌套事务时，session.close()没有关闭所有事务。
- en: rollback() previously erroneously set the current transaction directly to the
    parent of the transaction that could be rolled back to. Now it rolls back the
    next transaction up that can handle it, but sets the current transaction to its
    parent and inactivates the transactions in between. Inactive transactions can
    only be rolled back or closed, any other call results in an error.
  id: totrans-2016
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: rollback()之前错误地将当前事务直接设置为可回滚到的事务的父事务。现在它回滚到可以处理它的下一个事务，但将当前事务设置为其父事务，并使之间的事务无效。无效的事务只能回滚或关闭，任何其他调用都会导致错误。
- en: autoflush for commit() wasn’t flushing for simple subtransactions.
  id: totrans-2017
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于commit()，autoflush没有对简单的子事务进行刷新。
- en: unitofwork flush didn’t close the failed transaction when the session was not
    in a transaction and committing the transaction failed.
  id: totrans-2018
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: unitofwork flush在会话不在事务中且提交事务失败时没有关闭失败的事务。
- en: '**[orm]**'
  id: totrans-2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Miscellaneous tickets:'
  id: totrans-2020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 杂项票据：
- en: 'References: [#940](https://www.sqlalchemy.org/trac/ticket/940), [#964](https://www.sqlalchemy.org/trac/ticket/964)'
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#940](https://www.sqlalchemy.org/trac/ticket/940)，[#964](https://www.sqlalchemy.org/trac/ticket/964)
- en: sql
  id: totrans-2022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “schema.DDL”, an executable free-form DDL statement. DDLs can be executed
    in isolation or attached to Table or MetaData instances and executed automatically
    when those objects are created and/or dropped.
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“schema.DDL”，一条可执行的自由形式DDL语句。DDL可以单独执行，也可以附加到Table或MetaData实例上，在创建和/或删除这些对象时自动执行。
- en: '**[sql]**'
  id: totrans-2025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table columns and constraints can be overridden on a an existing table (such
    as a table that was already reflected) using the ‘useexisting=True’ flag, which
    now takes into account the arguments passed along with it.
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用‘useexisting=True’标志覆盖表的列和约束，该表已经存在（例如已经反映的表），现在还考虑了与其一起传递的参数。
- en: '**[sql]**'
  id: totrans-2027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a callable-based DDL events interface, adds hooks before and after Tables
    and MetaData create and drop.
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了基于可调用的DDL事件接口，在Tables和MetaData创建和删除之前和之后添加钩子。
- en: '**[sql]**'
  id: totrans-2029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added generative where(<criterion>) method to delete() and update() constructs
    which return a new object with criterion joined to existing criterion via AND,
    just like select().where().
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在delete()和update()构造中添加了generative where(<criterion>)方法，该方法返回一个通过AND连接到现有条件的新对象，就像select().where()一样。
- en: '**[sql]**'
  id: totrans-2031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “ilike()” operator to column operations. Compiles to ILIKE on postgres,
    lower(x) LIKE lower(y) on all others.
  id: totrans-2032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '向列操作添加了“ilike()”操作符。在postgres上编译为ILIKE，在其他所有数据库上为lower(x) LIKE lower(y)。  '
- en: 'References: [#727](https://www.sqlalchemy.org/trac/ticket/727)'
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#727](https://www.sqlalchemy.org/trac/ticket/727)
- en: '**[sql]**'
  id: totrans-2034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “now()” as a generic function; on SQLite, Oracle and MSSQL compiles as
    “CURRENT_TIMESTAMP”; “now()” on all others.
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“now()”作为通用函数；在SQLite、Oracle和MSSQL上编译为“CURRENT_TIMESTAMP”；在其他所有数据库上是“now()”。
- en: 'References: [#943](https://www.sqlalchemy.org/trac/ticket/943)'
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#943](https://www.sqlalchemy.org/trac/ticket/943)
- en: '**[sql]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The startswith(), endswith(), and contains() operators now concatenate the wildcard
    operator with the given operand in SQL, i.e. “’%’ || <bindparam>” in all cases,
    accept text(‘something’) operands properly
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: startswith()、endswith()和contains()操作符现在在SQL中将通配符操作符与给定操作数连接起来，即在所有情况下都是“’%’
    || <bindparam>”，适当地接受text(‘something’)操作数
- en: 'References: [#962](https://www.sqlalchemy.org/trac/ticket/962)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#962](https://www.sqlalchemy.org/trac/ticket/962)
- en: '**[sql]**'
  id: totrans-2040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: cast() accepts text(‘something’) and other non-literal operands properly
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cast()适当地接受text(‘something’)和其他非文字操作数
- en: 'References: [#962](https://www.sqlalchemy.org/trac/ticket/962)'
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#962](https://www.sqlalchemy.org/trac/ticket/962)
- en: '**[sql]**'
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug in result proxy where anonymously generated column labels would not
    be accessible using their straight string name
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了结果代理中匿名生成的列标签无法使用其直接字符串名称访问的错误
- en: '**[sql]**'
  id: totrans-2045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Deferrable constraints can now be defined.
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以定义可延迟的约束。
- en: '**[sql]**'
  id: totrans-2047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “autocommit=True” keyword argument to select() and text(), as well as
    generative autocommit() method on select(); for statements which modify the database
    through some user-defined means other than the usual INSERT/UPDATE/ DELETE etc.
    This flag will enable “autocommit” behavior during execution if no transaction
    is in progress.
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()和text()中添加了“autocommit=True”关键字参数，以及select()上的生成autocommit()方法；对于通过某些用户定义的方式修改数据库的语句，而不是通常的INSERT/UPDATE/DELETE等。如果没有进行事务，则此标志将在执行期间启用“autocommit”行为。
- en: 'References: [#915](https://www.sqlalchemy.org/trac/ticket/915)'
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#915](https://www.sqlalchemy.org/trac/ticket/915)
- en: '**[sql]**'
  id: totrans-2050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The ‘.c.’ attribute on a selectable now gets an entry for every column expression
    in its columns clause. Previously, “unnamed” columns like functions and CASE statements
    weren’t getting put there. Now they will, using their full string representation
    if no ‘name’ is available.
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选择上的“.c.”属性现在为其列子句中的每个列表达式添加一个条目。以前，“未命名”列（如函数和CASE语句）没有放在那里。现在，如果没有“名称”可用，它们将使用其完整字符串表示���
- en: '**[sql]**'
  id: totrans-2052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: a CompositeSelect, i.e. any union(), union_all(), intersect(), etc. now asserts
    that each selectable contains the same number of columns. This conforms to the
    corresponding SQL requirement.
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CompositeSelect，即任何union()，union_all()，intersect()等现在断言每个可选择包含相同数量的列。这符合相应的SQL要求。
- en: '**[sql]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The anonymous ‘label’ generated for otherwise unlabeled functions and expressions
    now propagates outwards at compile time for expressions like select([select([func.foo()])]).
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为否则未标记的函数和表达式生成的匿名“标签”现在在编译时向外传播，例如select([select([func.foo()])])的表达式。
- en: '**[sql]**'
  id: totrans-2056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Building on the above ideas, CompositeSelects now build up their “.c.” collection
    based on the names present in the first selectable only; corresponding_column()
    now works fully for all embedded selectables.
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于上述思想，CompositeSelects现在根据第一个可选择中存在的名称构建其“.c.”集合；corresponding_column()现在对所有嵌入式可选择完全有效。
- en: '**[sql]**'
  id: totrans-2058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Oracle and others properly encode SQL used for defaults like sequences, etc.,
    even if no unicode idents are used since identifier preparer may return a cached
    unicode identifier.
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle和其他数据库现在正确编码用于默认值（如序列等）的SQL，即使没有使用unicode标识符，因为标识符准备器可能返回缓存的unicode标识符。
- en: '**[sql]**'
  id: totrans-2060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Column and clause comparisons to datetime objects on the left hand side of the
    expression now work (d < table.c.col). (datetimes on the RHS have always worked,
    the LHS exception is a quirk of the datetime implementation.)
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在左侧表达式中的列和子句与datetime对象的比较现在可以工作（d < table.c.col）。 （RHS上的datetimes一直有效，LHS的异常是datetime实现的怪癖。）
- en: misc
  id: totrans-2062
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Better support for schemas in SQLite (linked in by ATTACH DATABASE … AS name).
    In some cases in the past, schema names were omitted from generated SQL for SQLite.
    This is no longer the case.
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite中对模式（通过ATTACH DATABASE … AS name链接）的支持更好。在过去的一些情况下，SQLite生成的SQL中省略了模式名称。现在不再这样。
- en: '**[dialects]**'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: table_names on SQLite now picks up temporary tables as well.
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite上的table_names现在也会选择临时表。
- en: '**[dialects]**'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Auto-detect an unspecified MySQL ANSI_QUOTES mode during reflection operations,
    support for changing the mode midstream. Manual mode setting is still required
    if no reflection is used.
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射操作期间自动检测未指定的MySQL ANSI_QUOTES模式，支持在中途更改模式。如果没有使用反射，则仍然需要手动设置模式。
- en: '**[dialects]**'
  id: totrans-2069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Fixed reflection of TIME columns on SQLite.
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite上TIME列的反射。
- en: '**[dialects]**'
  id: totrans-2071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Finally added PGMacAddr type to postgres
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终在postgres中添加了PGMacAddr类型
- en: 'References: [#580](https://www.sqlalchemy.org/trac/ticket/580)'
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#580](https://www.sqlalchemy.org/trac/ticket/580)
- en: '**[dialects]**'
  id: totrans-2074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Reflect the sequence associated to a PK field (typically with a BEFORE INSERT
    trigger) under Firebird
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Firebird下反映与主键字段关联的序列（通常具有BEFORE INSERT触发器）。
- en: '**[dialects]**'
  id: totrans-2076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: Oracle assembles the correct columns in the result set column mapping when generating
    a LIMIT/OFFSET subquery, allows columns to map properly to result sets even if
    long-name truncation kicks in
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当生成LIMIT/OFFSET子查询时，Oracle会组装结果集列映射中的正确列，即使长名称截断启动也允许列正确映射到结果集
- en: 'References: [#941](https://www.sqlalchemy.org/trac/ticket/941)'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#941](https://www.sqlalchemy.org/trac/ticket/941)
- en: '**[dialects]**'
  id: totrans-2079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: MSSQL now includes EXEC in the _is_select regexp, which should allow row-returning
    stored procedures to be used.
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 现在在 _is_select 正则表达式中包含 EXEC，这应该允许使用返回行的存储过程。
- en: '**[dialects]**'
  id: totrans-2081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL now includes an experimental implementation of LIMIT/OFFSET using the
    ANSI SQL row_number() function, so it requires MSSQL-2005 or higher. To enable
    the feature, add “has_window_funcs” to the keyword arguments for connect, or add
    “?has_window_funcs=1” to your dburi query arguments.
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 现在包含了使用 ANSI SQL row_number() 函数的 LIMIT/OFFSET 的实验性实现，因此需要 MSSQL-2005
    或更高版本。要启用此功能，请在 connect 的关键字参数中添加 “has_window_funcs”，或在 dburi 查询参数中添加 “?has_window_funcs=1”。
- en: '**[ext]**'
  id: totrans-2083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Changed ext.activemapper to use a non-transactional session for the objectstore.
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 ext.activemapper 以使用非事务性会话进行对象存储。
- en: '**[ext]**'
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Fixed output order of “[‘a’] + obj.proxied” binary operation on association-proxied
    lists.
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理列表上的 “[‘a’] + obj.proxied” 二进制操作的输出顺序。
- en: general
  id: totrans-2087
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-2088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Fixed a variety of hidden and some not-so-hidden compatibility issues for Python
    2.3, thanks to new support for running the full test suite on 2.3.
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列隐藏的以及一些不那么隐藏的 Python 2.3 兼容性问题，感谢对在 2.3 上运行完整测试套件的新支持。
- en: '**[general]**'
  id: totrans-2090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Warnings are now issued as type exceptions.SAWarning.
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在警告被作为异常类型 SAWarning 发出。
- en: orm
  id: totrans-2092
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Every Session.begin() must now be accompanied by a corresponding commit() or
    rollback() unless the session is closed with Session.close(). This also includes
    the begin() which is implicit to a session created with transactional=True. The
    biggest change introduced here is that when a Session created with transactional=True
    raises an exception during flush(), you must call Session.rollback() or Session.close()
    in order for that Session to continue after an exception.
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个 Session.begin() 现在必须伴随着相应的 commit() 或 rollback()，除非会话被 Session.close() 关闭。这也包括了对于使用
    transactional=True 创建的会话隐含的 begin()。这里引入的最大变化是，当使用 transactional=True 创建的会话在 flush()
    过程中引发异常时，你必须调用 Session.rollback() 或 Session.close() 以便让该会话在异常后继续运行。
- en: '**[orm]**'
  id: totrans-2095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed merge() collection-doubling bug when merging transient entities with backref’ed
    collections.
  id: totrans-2096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将瞬时实体与带有 backref 的集合合并时出现的 merge() 集合翻倍 bug。
- en: 'References: [#961](https://www.sqlalchemy.org/trac/ticket/961)'
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#961](https://www.sqlalchemy.org/trac/ticket/961)
- en: '**[orm]**'
  id: totrans-2098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: merge(dont_load=True) does not accept transient entities, this is in continuation
    with the fact that merge(dont_load=True) does not accept any “dirty” objects either.
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge(dont_load=True) 不接受瞬时实体，这是为了与 merge(dont_load=True) 不接受任何“脏”对象的事实保持一致。
- en: '**[orm]**'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Added standalone “query” class attribute generated by a scoped_session. This
    provides MyClass.query without using Session.mapper. Use via:'
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了由 scoped_session 生成的独立的 “query” 类属性。这提供了 MyClass.query 而不使用 Session.mapper。使用方式：
- en: MyClass.query = Session.query_property()
  id: totrans-2102
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MyClass.query = Session.query_property()
- en: '**[orm]**'
  id: totrans-2103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The proper error message is raised when trying to access expired instance attributes
    with no session present
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试在没有会话的情况下访问过期实例属性时，会引发适当的错误消息。
- en: '**[orm]**'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: dynamic_loader() / lazy=”dynamic” now accepts and uses the order_by parameter
    in the same way in which it works with relation().
  id: totrans-2106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dynamic_loader() / lazy=”dynamic” 现在接受并使用 order_by 参数，方式与 relation() 中的工作方式相同。
- en: '**[orm]**'
  id: totrans-2107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added expire_all() method to Session. Calls expire() for all persistent instances.
    This is handy in conjunction with…
  id: totrans-2108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Session 的 expire_all() 方法。对所有持久实例调用 expire()。这在与…
- en: '**[orm]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Instances which have been partially or fully expired will have their expired
    attributes populated during a regular Query operation which affects those objects,
    preventing a needless second SQL statement for each instance.
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分或完全过期的实例在常规查询操作中将填充其过期属性，这样可以防止每个实例需要多余的第二个 SQL 语句。
- en: '**[orm]**'
  id: totrans-2111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Dynamic relations, when referenced, create a strong reference to the parent
    object so that the query still has a parent to call against even if the parent
    is only created (and otherwise dereferenced) within the scope of a single expression.
  id: totrans-2112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动态关系在被引用时会创建对父对象的强引用，以便查询仍然有一个父对象可以调用，即使父对象仅在单个表达式范围内创建（并且在其他情况下被取消引用）。
- en: 'References: [#938](https://www.sqlalchemy.org/trac/ticket/938)'
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#938](https://www.sqlalchemy.org/trac/ticket/938)
- en: '**[orm]**'
  id: totrans-2114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added a mapper() flag “eager_defaults”. When set to True, defaults that are
    generated during an INSERT or UPDATE operation are post-fetched immediately, instead
    of being deferred until later. This mimics the old 0.3 behavior.
  id: totrans-2115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个mapper()标志“eager_defaults”。当设置为True时，在INSERT或UPDATE操作期间生成的默认值将立即后获取，而不是延迟到以后。这模仿了旧的0.3行为。
- en: '**[orm]**'
  id: totrans-2116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'query.join() can now accept class-mapped attributes as arguments. These can
    be used in place or in any combination with strings. In particular this allows
    construction of joins to subclasses on a polymorphic relation, i.e.:'
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()现在可以接受类映射属性作为参数。这些可以用于替代或与字符串任意组合。特别是这允许在多态关系上构建到子类的连接，即：
- en: query(Company).join([‘employees’, Engineer.name])
  id: totrans-2118
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query(Company).join([‘employees’, Engineer.name])
- en: '**[orm] [(‘employees’] [Engineer.name] [people.join(engineer))]**'
  id: totrans-2119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [(‘employees’] [Engineer.name] [people.join(engineer))]**'
- en: 'query.join() can also accept tuples of attribute name/some selectable as arguments.
    This allows construction of joins *from* subclasses of a polymorphic relation,
    i.e.:'
  id: totrans-2120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()还可以接受属性名称/某些可选择的元组作为参数。这允许构建从多态关系的子类连接，即：
- en: query(Company).join(
  id: totrans-2121
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: query(Company).join(
- en: ''
  id: totrans-2122
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: )
  id: totrans-2123
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: )
- en: '**[orm]**'
  id: totrans-2124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: General improvements to the behavior of join() in conjunction with polymorphic
    mappers, i.e. joining from/to polymorphic mappers and properly applying aliases.
  id: totrans-2125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对与多态映射器一起使用join()的行为进行了一般改进，即从/到多态映射器进行连接并正确应用别名。
- en: '**[orm]**'
  id: totrans-2126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed/improved behavior when a mapper determines the natural “primary key” of
    a mapped join, it will more effectively reduce columns which are equivalent via
    foreign key relation. This affects how many arguments need to be sent to query.get(),
    among other things.
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当映射器确定映射连接的自然“主键”时，它将更有效地减少通过外键关系等效的列。这影响了需要发送给query.get()的参数数量，等等。
- en: 'References: [#933](https://www.sqlalchemy.org/trac/ticket/933)'
  id: totrans-2128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#933](https://www.sqlalchemy.org/trac/ticket/933)
- en: '**[orm]**'
  id: totrans-2129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The lazy loader can now handle a join condition where the “bound” column (i.e.
    the one that gets the parent id sent as a bind parameter) appears more than once
    in the join condition. Specifically this allows the common task of a relation()
    which contains a parent-correlated subquery, such as “select only the most recent
    child item”.
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 惰性加载器现在可以处理连接条件中“绑定”列（即作为绑定参数发送父id的列）出现多次的情况。具体来说，这允许了包含父相关子查询的relation()的常见任务，比如“仅选择最近的子项”。
- en: 'References: [#946](https://www.sqlalchemy.org/trac/ticket/946)'
  id: totrans-2131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#946](https://www.sqlalchemy.org/trac/ticket/946)
- en: '**[orm]**'
  id: totrans-2132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in polymorphic inheritance where an incorrect exception is raised
    when base polymorphic_on column does not correspond to any columns within the
    local selectable of an inheriting mapper more than one level deep
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态继承中的错误，当基多态_on列与继承映射器的本地可选择中的任何列不对应时，会引发不正确的异常，超过一级深度
- en: '**[orm]**'
  id: totrans-2134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in polymorphic inheritance which made it difficult to set a working
    “order_by” on a polymorphic mapper.
  id: totrans-2135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态继承中的错误，使得在多态映射器上设置有效的“order_by”变得困难。
- en: '**[orm]**'
  id: totrans-2136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a rather expensive call in Query that was slowing down polymorphic queries.
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中一个相当昂贵的调用，导致多态查询变慢。
- en: '**[orm]**'
  id: totrans-2138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”Passive defaults” and other “inline” defaults can now be loaded during a flush()
    call if needed; in particular, this allows constructing relations() where a foreign
    key column references a server-side-generated, non-primary-key column.
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，在flush()调用期间现在可以加载“被动默认值”和其他“内联”默认值；特别是，这允许构建relations()，其中外键列引用服务器生成的非主键列。
- en: 'References: [#954](https://www.sqlalchemy.org/trac/ticket/954)'
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#954](https://www.sqlalchemy.org/trac/ticket/954)
- en: '**[orm]**'
  id: totrans-2141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Additional Session transaction fixes/changes:'
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话事务的其他修复/更改：
- en: 'Fixed bug with session transaction management: parent transactions weren’t
    started on the connection when adding a connection to a nested transaction.'
  id: totrans-2143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了会话事务管理中的错误：在将连接添加到嵌套事务时，父事务未在连接上启动。
- en: session.transaction now always refers to the innermost active transaction, even
    when commit/rollback are called directly on the session transaction object.
  id: totrans-2144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: session.transaction现在始终指向最内部的活动事务，即使在会话事务对象上直接调用commit/rollback。
- en: Two-phase transactions can now be prepared.
  id: totrans-2145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以准备两阶段事务。
- en: When preparing a two-phase transaction fails on one connection, all the connections
    are rolled back.
  id: totrans-2146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在一个连接上准备两阶段事务失败时，所有连接都将回滚。
- en: session.close() didn’t close all transactions when nested transactions were
    used.
  id: totrans-2147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用嵌套事务时，session.close()不会关闭所有事务。
- en: rollback() previously erroneously set the current transaction directly to the
    parent of the transaction that could be rolled back to. Now it rolls back the
    next transaction up that can handle it, but sets the current transaction to its
    parent and inactivates the transactions in between. Inactive transactions can
    only be rolled back or closed, any other call results in an error.
  id: totrans-2148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: rollback()先前错误地将当前事务直接设置为可以回滚到的事务的父事务。现在它将回滚到可以处理的下一个事务，但将当前事务设置为其父事务，并使中间的事务无效。无效的事务只能回滚或关闭，任何其他调用都会导致错误。
- en: autoflush for commit() wasn’t flushing for simple subtransactions.
  id: totrans-2149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单子事务，commit()的autoflush不会刷新。
- en: unitofwork flush didn’t close the failed transaction when the session was not
    in a transaction and committing the transaction failed.
  id: totrans-2150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当会话不在事务中且提交事务失败时，unitofwork flush不会关闭失败的事务。
- en: '**[orm]**'
  id: totrans-2151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Miscellaneous tickets:'
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他票据：
- en: 'References: [#940](https://www.sqlalchemy.org/trac/ticket/940), [#964](https://www.sqlalchemy.org/trac/ticket/964)'
  id: totrans-2153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#940](https://www.sqlalchemy.org/trac/ticket/940), [#964](https://www.sqlalchemy.org/trac/ticket/964)
- en: sql
  id: totrans-2154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “schema.DDL”, an executable free-form DDL statement. DDLs can be executed
    in isolation or attached to Table or MetaData instances and executed automatically
    when those objects are created and/or dropped.
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“schema.DDL”，一个可执行的自由形式DDL语句。DDL可以独立执行，也可以附加到表或MetaData实例上，并在创建和/或删除这些对象时自动执行。
- en: '**[sql]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Table columns and constraints can be overridden on a an existing table (such
    as a table that was already reflected) using the ‘useexisting=True’ flag, which
    now takes into account the arguments passed along with it.
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用“useexisting=True”标志在现有表上覆盖表列和约束（例如已经反射的表），该标志现在考虑传递的参数。
- en: '**[sql]**'
  id: totrans-2159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a callable-based DDL events interface, adds hooks before and after Tables
    and MetaData create and drop.
  id: totrans-2160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了基于可调用函数的DDL事件接口，可以在表和MetaData创建和删除之前和之后添加钩子。
- en: '**[sql]**'
  id: totrans-2161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added generative where(<criterion>) method to delete() and update() constructs
    which return a new object with criterion joined to existing criterion via AND,
    just like select().where().
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在delete()和update()构造中添加了生成where(<criterion>)方法，该方法返回一个通过AND连接到现有条件的新对象，就像select().where()一样。
- en: '**[sql]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “ilike()” operator to column operations. Compiles to ILIKE on postgres,
    lower(x) LIKE lower(y) on all others.
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在列操作中添加了“ilike()”运算符。在postgres上编译为ILIKE，在其他所有数据库上编译为lower(x) LIKE lower(y)。
- en: 'References: [#727](https://www.sqlalchemy.org/trac/ticket/727)'
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#727](https://www.sqlalchemy.org/trac/ticket/727)
- en: '**[sql]**'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “now()” as a generic function; on SQLite, Oracle and MSSQL compiles as
    “CURRENT_TIMESTAMP”; “now()” on all others.
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“now()”作为通用函数；在SQLite、Oracle和MSSQL上编译为“CURRENT_TIMESTAMP”；在其他所有数据库上为“now()”。
- en: 'References: [#943](https://www.sqlalchemy.org/trac/ticket/943)'
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#943](https://www.sqlalchemy.org/trac/ticket/943)
- en: '**[sql]**'
  id: totrans-2169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The startswith(), endswith(), and contains() operators now concatenate the wildcard
    operator with the given operand in SQL, i.e. “’%’ || <bindparam>” in all cases,
    accept text(‘something’) operands properly
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: startswith()、endswith()和contains()运算符现在在SQL中将通配符运算符与给定操作数连接，即在所有情况下，“'%' ||
    <bindparam>”，正确接受text('something')操作数
- en: 'References: [#962](https://www.sqlalchemy.org/trac/ticket/962)'
  id: totrans-2171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#962](https://www.sqlalchemy.org/trac/ticket/962)
- en: '**[sql]**'
  id: totrans-2172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: cast() accepts text(‘something’) and other non-literal operands properly
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cast()正确接受text('something')和其他非文字操作数
- en: 'References: [#962](https://www.sqlalchemy.org/trac/ticket/962)'
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#962](https://www.sqlalchemy.org/trac/ticket/962)
- en: '**[sql]**'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug in result proxy where anonymously generated column labels would not
    be accessible using their straight string name
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了结果代理中的错误，匿名生成的列标签将无法使用其直接字符串名称访问。
- en: '**[sql]**'
  id: totrans-2177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Deferrable constraints can now be defined.
  id: totrans-2178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以定义可延迟的约束。
- en: '**[sql]**'
  id: totrans-2179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added “autocommit=True” keyword argument to select() and text(), as well as
    generative autocommit() method on select(); for statements which modify the database
    through some user-defined means other than the usual INSERT/UPDATE/ DELETE etc.
    This flag will enable “autocommit” behavior during execution if no transaction
    is in progress.
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()和text()中添加了“autocommit=True”关键字参数，以及select()上的生成autocommit()方法；对于通过某些用户定义的方式修改数据库的语句，而不是通常的INSERT/UPDATE/DELETE等。如果没有进行事务，则此标志将在执行期间启用“autocommit”行为。
- en: 'References: [#915](https://www.sqlalchemy.org/trac/ticket/915)'
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#915](https://www.sqlalchemy.org/trac/ticket/915)
- en: '**[sql]**'
  id: totrans-2182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The ‘.c.’ attribute on a selectable now gets an entry for every column expression
    in its columns clause. Previously, “unnamed” columns like functions and CASE statements
    weren’t getting put there. Now they will, using their full string representation
    if no ‘name’ is available.
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，可选择项的“.c.” 属性将为其列子句中的每个列表达式添加一个条目。 以前，“未命名”列（如函数和 CASE 语句）未放置在那里。 现在，如果没有“名称”可用，它们将使用其完整的字符串表示形式。。
- en: '**[sql]**'
  id: totrans-2184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: a CompositeSelect, i.e. any union(), union_all(), intersect(), etc. now asserts
    that each selectable contains the same number of columns. This conforms to the
    corresponding SQL requirement.
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个 CompositeSelect，即任何 union()、union_all()、intersect() 等现在都断言每个可选择项包含相同数量的列。
    这符合相应的 SQL 要求。
- en: '**[sql]**'
  id: totrans-2186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The anonymous ‘label’ generated for otherwise unlabeled functions and expressions
    now propagates outwards at compile time for expressions like select([select([func.foo()])]).
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为否则未标记的函数和表达式生成的匿名“标签”现在在编译时传播出去，例如 select([select([func.foo()])]) 中的表达式。
- en: '**[sql]**'
  id: totrans-2188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Building on the above ideas, CompositeSelects now build up their “.c.” collection
    based on the names present in the first selectable only; corresponding_column()
    now works fully for all embedded selectables.
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述思想的基础上，CompositeSelects 现在根据第一个可选择项中存在的名称构建其“.c.” 集合；corresponding_column()
    现在对所有嵌套可选择项都完全有效。
- en: '**[sql]**'
  id: totrans-2190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Oracle and others properly encode SQL used for defaults like sequences, etc.,
    even if no unicode idents are used since identifier preparer may return a cached
    unicode identifier.
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 和其他数据库在生成诸如序列等默认值的 SQL 时会正确编码，即使没有使用 unicode idents 也是如此，因为标识符准备程序可能返回缓存的
    unicode 标识符。
- en: '**[sql]**'
  id: totrans-2192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Column and clause comparisons to datetime objects on the left hand side of the
    expression now work (d < table.c.col). (datetimes on the RHS have always worked,
    the LHS exception is a quirk of the datetime implementation.)
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对表达式左侧的 datetime 对象进行列和子句比较现在可以工作了（d < table.c.col）。 （RHS 上的 datetime 一直都有效，LHS
    上的异常是 datetime 实现的一个怪癖。）
- en: misc
  id: totrans-2194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Better support for schemas in SQLite (linked in by ATTACH DATABASE … AS name).
    In some cases in the past, schema names were omitted from generated SQL for SQLite.
    This is no longer the case.
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更好地支持 SQLite 中的模式（通过 ATTACH DATABASE … AS name 链接）。 在过去的某些情况下，SQLite 生成的 SQL
    中省略了模式名称。 这不再是这样。
- en: '**[dialects]**'
  id: totrans-2197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: table_names on SQLite now picks up temporary tables as well.
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 上的 table_names 现在也会拾取临时表。
- en: '**[dialects]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Auto-detect an unspecified MySQL ANSI_QUOTES mode during reflection operations,
    support for changing the mode midstream. Manual mode setting is still required
    if no reflection is used.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射操作期间自动检测未指定的 MySQL ANSI_QUOTES 模式，支持在中途更改模式。 如果不使用反射，则仍然需要手动设置模式。
- en: '**[dialects]**'
  id: totrans-2201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Fixed reflection of TIME columns on SQLite.
  id: totrans-2202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 上 TIME 列的反射。
- en: '**[dialects]**'
  id: totrans-2203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Finally added PGMacAddr type to postgres
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终在 postgres 中添加了 PGMacAddr 类型
- en: 'References: [#580](https://www.sqlalchemy.org/trac/ticket/580)'
  id: totrans-2205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#580](https://www.sqlalchemy.org/trac/ticket/580)
- en: '**[dialects]**'
  id: totrans-2206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Reflect the sequence associated to a PK field (typically with a BEFORE INSERT
    trigger) under Firebird
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Firebird 下反射与 PK 字段关联的序列（通常使用 BEFORE INSERT 触发器）。
- en: '**[dialects]**'
  id: totrans-2208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Oracle assembles the correct columns in the result set column mapping when generating
    a LIMIT/OFFSET subquery, allows columns to map properly to result sets even if
    long-name truncation kicks in
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生成 LIMIT/OFFSET 子查询时，Oracle 会将正确的列组装到结果集列映射中，即使长名称截断发生，也允许列正确映射到结果集
- en: 'References: [#941](https://www.sqlalchemy.org/trac/ticket/941)'
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#941](https://www.sqlalchemy.org/trac/ticket/941)
- en: '**[dialects]**'
  id: totrans-2211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL now includes EXEC in the _is_select regexp, which should allow row-returning
    stored procedures to be used.
  id: totrans-2212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 现在在 _is_select 正则表达式中包含 EXEC，这应该允许使用返回行的存储过程。
- en: '**[dialects]**'
  id: totrans-2213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL now includes an experimental implementation of LIMIT/OFFSET using the
    ANSI SQL row_number() function, so it requires MSSQL-2005 or higher. To enable
    the feature, add “has_window_funcs” to the keyword arguments for connect, or add
    “?has_window_funcs=1” to your dburi query arguments.
  id: totrans-2214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 现在包括对 ANSI SQL row_number() 函数的实验性 LIMIT/OFFSET 实现，因此需要 MSSQL-2005 或更高版本。要启用此功能，请在连接的关键字参数中添加“has_window_funcs”，或在
    dburi 查询参数中添加“?has_window_funcs=1”。
- en: '**[ext]**'
  id: totrans-2215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Changed ext.activemapper to use a non-transactional session for the objectstore.
  id: totrans-2216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改 ext.activemapper 以使用非事务性会话来处理对象存储。
- en: '**[ext]**'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed output order of “[‘a’] + obj.proxied” binary operation on association-proxied
    lists.
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理列表上“[‘a’] + obj.proxied” 二元操作的输出顺序。
- en: 0.4.2p3
  id: totrans-2219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.2p3
- en: 'Released: Wed Jan 09 2008'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年1月9日
- en: general
  id: totrans-2221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-2222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: sub version numbering scheme changed to suite setuptools version number rules;
    easy_install -u should now get this version over 0.4.2.
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 子版本编号方案已更改以符合setuptools版本号规则；现在应该通过easy_install -u获取此版本，而不是0.4.2以上。
- en: orm
  id: totrans-2224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: fixed bug with session.dirty when using “mutable scalars” (such as PickleTypes)
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“可变标量”（如PickleTypes）时session.dirty的bug
- en: '**[orm]**'
  id: totrans-2227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: added a more descriptive error message when flushing on a relation() that has
    non-locally-mapped columns in its primary or secondary join condition
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关系()上刷新时，当其主要或次要连接条件中存在非本地映射列时，添加了更具描述性的错误消息
- en: '**[orm]**'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: suppressing *all* errors in InstanceState.__cleanup() now.
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在InstanceState.__cleanup()中抑制*所有*错误。
- en: '**[orm]**'
  id: totrans-2231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: fixed an attribute history bug whereby assigning a new collection to a collection-based
    attribute which already had pending changes would generate incorrect history
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史记录中的一个bug，即将新集合分配给已经具有待处理更改的基于集合的属性会生成不正确的历史记录
- en: 'References: [#922](https://www.sqlalchemy.org/trac/ticket/922)'
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#922](https://www.sqlalchemy.org/trac/ticket/922)
- en: '**[orm]**'
  id: totrans-2234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: fixed delete-orphan cascade bug whereby setting the same object twice to a scalar
    attribute could log it as an orphan
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了删除孤立级联bug，即将同一对象两次设置为标量属性可能会记录为孤立对象
- en: 'References: [#925](https://www.sqlalchemy.org/trac/ticket/925)'
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#925](https://www.sqlalchemy.org/trac/ticket/925)
- en: '**[orm]**'
  id: totrans-2237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: Fixed cascades on a += assignment to a list-based relation.
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对基于列表的关系进行+=赋值时的级联。
- en: '**[orm]**'
  id: totrans-2239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: synonyms can now be created against props that don’t exist yet, which are later
    added via add_property(). This commonly includes backrefs. (i.e. you can make
    synonyms for backrefs without worrying about the order of operations)
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以针对尚不存在的属性创建同义词，稍后通过add_property()添加。这通常包括反向引用。（即，您可以为反向引用创建同义词，而不必担心操作顺序）
- en: 'References: [#919](https://www.sqlalchemy.org/trac/ticket/919)'
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#919](https://www.sqlalchemy.org/trac/ticket/919)
- en: '**[orm]**'
  id: totrans-2242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: fixed bug which could occur with polymorphic “union” mapper which falls back
    to “deferred” loading of inheriting tables
  id: totrans-2243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态“union”映射器出现bug的情况，该映射器回退到继承表的“延迟”加载
- en: '**[orm]**'
  id: totrans-2244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: the “columns” collection on a mapper/mapped class (i.e. ‘c’) is against the
    mapped table, not the select_table in the case of polymorphic “union” loading
    (this shouldn’t be noticeable).
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器/映射类（即‘c’）上的“columns”集合针对映射表，而不是在多态“union”加载的情况下的select_table（这不应该是可察觉的）。
- en: '**[orm]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: fixed fairly critical bug whereby the same instance could be listed more than
    once in the unitofwork.new collection; most typically reproduced when using a
    combination of inheriting mappers and ScopedSession.mapper, as the multiple __init__
    calls per instance could save() the object with distinct _state objects
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当关键的bug，即相同实例可能会在unitofwork.new集合中列出多次；最常在使用组合继承映射器和ScopedSession.mapper时重现，因为每个实例的多个__init__调用可能会使用不同的_state对象保存()具有不同_state对象的对象
- en: '**[orm]**'
  id: totrans-2248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: added very rudimentary yielding iterator behavior to Query. Call query.yield_per(<number
    of rows>) and evaluate the Query in an iterative context; every collection of
    N rows will be packaged up and yielded. Use this method with extreme caution since
    it does not attempt to reconcile eagerly loaded collections across result batch
    boundaries, nor will it behave nicely if the same instance occurs in more than
    one batch. This means that an eagerly loaded collection will get cleared out if
    it’s referenced in more than one batch, and in all cases attributes will be overwritten
    on instances that occur in more than one batch.
  id: totrans-2249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了非常基本的迭代器行为。调用query.yield_per(<行数>)并在迭代上下文中评估Query；每个N行的集合将被打包并产生。请谨慎使用此方法，因为它不会尝试在结果批次边界上协调急切加载的集合，也不会在同一批次中出现相同实例时表现良好。这意味着如果在多个批次中引用急切加载的集合，它将被清除，并且在所有情况下，如果在多个批次中出现相同实例，属性将被覆盖。
- en: '**[orm]**'
  id: totrans-2250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: Fixed in-place set mutation operators for set collections and association proxied
    sets.
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为集合和关联代理集合添加了原地设置变异操作符。
- en: 'References: [#920](https://www.sqlalchemy.org/trac/ticket/920)'
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#920](https://www.sqlalchemy.org/trac/ticket/920)
- en: sql
  id: totrans-2253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[结构化查询语言]**'
- en: Text type is properly exported now and does not raise a warning on DDL create;
    String types with no length only raise warnings during CREATE TABLE
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Text类型已正确导出，不会在DDL创建时引发警告；没有长度的String类型仅在CREATE TABLE期间引发警告
- en: 'References: [#912](https://www.sqlalchemy.org/trac/ticket/912)'
  id: totrans-2256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#912](https://www.sqlalchemy.org/trac/ticket/912)
- en: '**[sql]**'
  id: totrans-2257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[结构化查询语言]**'
- en: new UnicodeText type is added, to specify an encoded, unlengthed Text type
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 UnicodeText 类型，用于指定编码的、无长度的 Text 类型。
- en: '**[sql]**'
  id: totrans-2259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug in union() so that select() statements which don’t derive from FromClause
    objects can be unioned
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `union()` 中的错误，以便可以将不派生自 `FromClause` 对象的 `select()` 语句进行联合。
- en: '**[sql]**'
  id: totrans-2261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed name of TEXT to Text since its a “generic” type; TEXT name is deprecated
    until 0.5\. The “upgrading” behavior of String to Text when no length is present
    is also deprecated until 0.5; will issue a warning when used for CREATE TABLE
    statements (String with no length for SQL expression purposes is still fine)
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 TEXT 名称更改为 Text，因为它是一种“通用”类型；TEXT 名称已弃用，直到 0.5 版本。当用于 CREATE TABLE 语句时，没有长度的
    String 转为 Text 的“升级”行为也已弃用，将在使用时发出警告（对于 SQL 表达式目的而言，没有长度的 String 仍然可以正常使用）。
- en: 'References: [#912](https://www.sqlalchemy.org/trac/ticket/912)'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#912](https://www.sqlalchemy.org/trac/ticket/912)
- en: '**[sql]**'
  id: totrans-2264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generative select.order_by(None) / group_by(None) was not managing to reset
    order by/group by criterion, fixed
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成式 `select.order_by(None)` / `group_by(None)` 未能重置排序/分组准则，已修复。
- en: 'References: [#924](https://www.sqlalchemy.org/trac/ticket/924)'
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#924](https://www.sqlalchemy.org/trac/ticket/924)
- en: misc
  id: totrans-2267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Fixed reflection of mysql empty string column defaults.
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射 mysql 空字符串列默认值的问题。
- en: '**[ext]**'
  id: totrans-2270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: ’+’, ‘*’, ‘+=’ and ‘*=’ support for association proxied lists.
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于关联代理列表的 `+`、`*`、`+=` 和 `*=` 支持。
- en: '**[dialects]**'
  id: totrans-2272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: mssql - narrowed down the test for “date”/”datetime” in MSDate/ MSDateTime subclasses
    so that incoming “datetime” objects don’t get mis-interpreted as “date” objects
    and vice versa.
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `mssql` 中 `MSDate`/`MSDateTime` 子类中“日期”/“日期时间”测试的范围，以便传入的“日期时间”对象不会被误解为“日期”对象，反之亦然。
- en: 'References: [#923](https://www.sqlalchemy.org/trac/ticket/923)'
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#923](https://www.sqlalchemy.org/trac/ticket/923)
- en: '**[dialects]**'
  id: totrans-2275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Fixed the missing call to subtype result processor for the PGArray type.
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PGArray 类型的子类型结果处理器缺失的问题。
- en: 'References: [#913](https://www.sqlalchemy.org/trac/ticket/913)'
  id: totrans-2277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#913](https://www.sqlalchemy.org/trac/ticket/913)
- en: general
  id: totrans-2278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: sub version numbering scheme changed to suite setuptools version number rules;
    easy_install -u should now get this version over 0.4.2.
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 子版本编号方案更改以适应 setuptools 版本号规则；现在 easy_install -u 应该能获取此版本超过 0.4.2。
- en: orm
  id: totrans-2281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug with session.dirty when using “mutable scalars” (such as PickleTypes)
  id: totrans-2283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用“可变标量”（例如 PickleTypes）时，修复了 session.dirty 的错误。
- en: '**[orm]**'
  id: totrans-2284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a more descriptive error message when flushing on a relation() that has
    non-locally-mapped columns in its primary or secondary join condition
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在具有主要或次要连接条件中具有非本地映射列的关系()上刷新时，添加了更具描述性的错误消息。
- en: '**[orm]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: suppressing *all* errors in InstanceState.__cleanup() now.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在 `InstanceState.__cleanup()` 中抑制 *所有* 错误。
- en: '**[orm]**'
  id: totrans-2288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed an attribute history bug whereby assigning a new collection to a collection-based
    attribute which already had pending changes would generate incorrect history
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史记录中的错误，即将新集合分配给已经具有挂起更改的基于集合的属性将生成不正确的历史记录。
- en: 'References: [#922](https://www.sqlalchemy.org/trac/ticket/922)'
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#922](https://www.sqlalchemy.org/trac/ticket/922)
- en: '**[orm]**'
  id: totrans-2291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed delete-orphan cascade bug whereby setting the same object twice to a scalar
    attribute could log it as an orphan
  id: totrans-2292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了删除孤立级联错误，即将相同对象两次设置为标量属性可能会将其记录为孤立对象。
- en: 'References: [#925](https://www.sqlalchemy.org/trac/ticket/925)'
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#925](https://www.sqlalchemy.org/trac/ticket/925)
- en: '**[orm]**'
  id: totrans-2294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed cascades on a += assignment to a list-based relation.
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对列表型关系执行 `+=` 赋值时的级联问题。
- en: '**[orm]**'
  id: totrans-2296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: synonyms can now be created against props that don’t exist yet, which are later
    added via add_property(). This commonly includes backrefs. (i.e. you can make
    synonyms for backrefs without worrying about the order of operations)
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以针对尚不存在的属性创建同义词，后续通过 `add_property()` 添加。这通常包括反向引用。（即您可以为反向引用创建同义词，而不必担心操作顺序）
- en: 'References: [#919](https://www.sqlalchemy.org/trac/ticket/919)'
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#919](https://www.sqlalchemy.org/trac/ticket/919)
- en: '**[orm]**'
  id: totrans-2299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug which could occur with polymorphic “union” mapper which falls back
    to “deferred” loading of inheriting tables
  id: totrans-2300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态“union”映射器可能出现的错误，该映射器退回到继承表的“延迟”加载。
- en: '**[orm]**'
  id: totrans-2301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “columns” collection on a mapper/mapped class (i.e. ‘c’) is against the
    mapped table, not the select_table in the case of polymorphic “union” loading
    (this shouldn’t be noticeable).
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在映射器/映射类（即 'c'）上的“columns”集合针对映射表，而不是针对多态“union”加载中的 select_table（这不应该被注意到）。
- en: '**[orm]**'
  id: totrans-2303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed fairly critical bug whereby the same instance could be listed more than
    once in the unitofwork.new collection; most typically reproduced when using a
    combination of inheriting mappers and ScopedSession.mapper, as the multiple __init__
    calls per instance could save() the object with distinct _state objects
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当关键的错误，即相同的实例可能会在unitofwork.new集合中列出多次；最常见的情况是在使用继承映射器和ScopedSession.mapper的组合时，因为每个实例的多个__init__调用可能会使用不同的_state对象保存()对象。
- en: '**[orm]**'
  id: totrans-2305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: added very rudimentary yielding iterator behavior to Query. Call query.yield_per(<number
    of rows>) and evaluate the Query in an iterative context; every collection of
    N rows will be packaged up and yielded. Use this method with extreme caution since
    it does not attempt to reconcile eagerly loaded collections across result batch
    boundaries, nor will it behave nicely if the same instance occurs in more than
    one batch. This means that an eagerly loaded collection will get cleared out if
    it’s referenced in more than one batch, and in all cases attributes will be overwritten
    on instances that occur in more than one batch.
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query添加了非常基本的迭代器行为。调用query.yield_per(<行数>)并在迭代上下文中评估Query；每个N行的集合将被打包并产生。请谨慎使用此方法，因为它不会尝试在结果批次边界上协调急切加载的集合，也不会在同一批次中同一实例出现多次时表现良好。这意味着如果在多个批次中引用了急切加载的集合，它将被清除，并且在所有情况下，如果实例出现在多个批次中，属性将被覆盖。
- en: '**[orm]**'
  id: totrans-2307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed in-place set mutation operators for set collections and association proxied
    sets.
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了集合和关联代理集合的原地设置变异运算符。
- en: 'References: [#920](https://www.sqlalchemy.org/trac/ticket/920)'
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#920](https://www.sqlalchemy.org/trac/ticket/920)
- en: sql
  id: totrans-2310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Text type is properly exported now and does not raise a warning on DDL create;
    String types with no length only raise warnings during CREATE TABLE
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在正确导出文本类型，不会在DDL创建时引发警告；没有长度的字符串类型只会在CREATE TABLE时引发警告。
- en: 'References: [#912](https://www.sqlalchemy.org/trac/ticket/912)'
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#912](https://www.sqlalchemy.org/trac/ticket/912)
- en: '**[sql]**'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: new UnicodeText type is added, to specify an encoded, unlengthed Text type
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的UnicodeText类型，用于指定编码的、无长度的文本类型。
- en: '**[sql]**'
  id: totrans-2316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug in union() so that select() statements which don’t derive from FromClause
    objects can be unioned
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了union()中的错误，以便可以将不派生自FromClause对象的select()语句联合。
- en: '**[sql]**'
  id: totrans-2318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed name of TEXT to Text since its a “generic” type; TEXT name is deprecated
    until 0.5\. The “upgrading” behavior of String to Text when no length is present
    is also deprecated until 0.5; will issue a warning when used for CREATE TABLE
    statements (String with no length for SQL expression purposes is still fine)
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将TEXT的名称更改为Text，因为它是一个“通用”类型；TEXT名称在0.5版本之前已被弃用。当没有长度时，String类型升级为Text的行为也在0.5版本之前已被弃用；在用于CREATE
    TABLE语句时会发出警告（String没有长度用于SQL表达式目的仍然有效）。
- en: 'References: [#912](https://www.sqlalchemy.org/trac/ticket/912)'
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#912](https://www.sqlalchemy.org/trac/ticket/912)
- en: '**[sql]**'
  id: totrans-2321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generative select.order_by(None) / group_by(None) was not managing to reset
    order by/group by criterion, fixed
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成式select.order_by(None) / group_by(None)未能重置order by/group by条件，已修复。
- en: 'References: [#924](https://www.sqlalchemy.org/trac/ticket/924)'
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#924](https://www.sqlalchemy.org/trac/ticket/924)
- en: misc
  id: totrans-2324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Fixed reflection of mysql empty string column defaults.
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射mysql空字符串列默认值的问题。
- en: '**[ext]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: ’+’, ‘*’, ‘+=’ and ‘*=’ support for association proxied lists.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对关联代理列表支持‘+’、‘*’、‘+=’和‘*=’。
- en: '**[dialects]**'
  id: totrans-2329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: mssql - narrowed down the test for “date”/”datetime” in MSDate/ MSDateTime subclasses
    so that incoming “datetime” objects don’t get mis-interpreted as “date” objects
    and vice versa.
  id: totrans-2330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mssql - 缩小了对MSDate/MSDateTime子类中“date”/“datetime”的测试范围，以防止传入的“datetime”对象被错误解释为“date”对象或反之。
- en: 'References: [#923](https://www.sqlalchemy.org/trac/ticket/923)'
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#923](https://www.sqlalchemy.org/trac/ticket/923)
- en: '**[dialects]**'
  id: totrans-2332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Fixed the missing call to subtype result processor for the PGArray type.
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PGArray类型的子类型结果处理器的缺失调用。
- en: 'References: [#913](https://www.sqlalchemy.org/trac/ticket/913)'
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#913](https://www.sqlalchemy.org/trac/ticket/913)
- en: 0.4.2
  id: totrans-2335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.2
- en: 'Released: Wed Jan 02 2008'
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Wed Jan 02 2008
- en: orm
  id: totrans-2337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'a major behavioral change to collection-based backrefs: they no longer trigger
    lazy loads ! “reverse” adds and removes are queued up and are merged with the
    collection when it is actually read from and loaded; but do not trigger a load
    beforehand. For users who have noticed this behavior, this should be much more
    convenient than using dynamic relations in some cases; for those who have not,
    you might notice your apps using a lot fewer queries than before in some situations.'
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对基于集合的反向引用的重大行为更改：它们不再触发延迟加载！“reverse”添加和删除被排队并在实际从中读取和加载集合时与集合合并；但不会事先触发加载。对于注意到这种行为的用户，在某些情况下，这应该比在某些情况下使用动态关系更方便；对于那些没有注意到的用户，您可能会注意到您的应用程序在某些情况下使用的查询比以前少得多。
- en: 'References: [#871](https://www.sqlalchemy.org/trac/ticket/871)'
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#871](https://www.sqlalchemy.org/trac/ticket/871)
- en: '**[orm]**'
  id: totrans-2341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mutable primary key support is added. primary key columns can be changed freely,
    and the identity of the instance will change upon flush. In addition, update cascades
    of foreign key referents (primary key or not) along relations are supported, either
    in tandem with the database’s ON UPDATE CASCADE (required for DB’s like Postgres)
    or issued directly by the ORM in the form of UPDATE statements, by setting the
    flag “passive_cascades=False”.
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可变主键支持已添加。主键列可以自由更改，并且在刷新时实例的标识将发生变化。此外，支持沿关系更新外键引用（主键或非主键），可以与数据库的ON UPDATE
    CASCADE（对于像Postgres这样的数据库是必需的）一起使用，或者通过设置标志“passive_cascades=False”直接由ORM以UPDATE语句的形式发出。
- en: '**[orm]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'inheriting mappers now inherit the MapperExtensions of their parent mapper
    directly, so that all methods for a particular MapperExtension are called for
    subclasses as well. As always, any MapperExtension can return either EXT_CONTINUE
    to continue extension processing or EXT_STOP to stop processing. The order of
    mapper resolution is: <extensions declared on the classes mapper> <extensions
    declared on the classes’ parent mapper> <globally declared extensions>.'
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继承映射器现在直接继承其父映射器的MapperExtensions，以便为子类调用特定MapperExtension的所有方法。与往常一样，任何MapperExtension都可以返回EXT_CONTINUE以继续扩展处理或EXT_STOP以停止处理。映射器解析的顺序是：<在类的映射器上声明的扩展>
    <在类的父映射器上声明的扩展> <全局声明的扩展>。
- en: Note that if you instantiate the same extension class separately and then apply
    it individually for two mappers in the same inheritance chain, the extension will
    be applied twice to the inheriting class, and each method will be called twice.
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，如果您单独实例化相同的扩展类，然后分别将其应用于同一继承链中的两个映射器，该扩展将应用于继承类两次，并且每个方法将被调用两次。
- en: To apply a mapper extension explicitly to each inheriting class but have each
    method called only once per operation, use the same instance of the extension
    for both mappers.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将映射扩展明确应用于每个继承类，但每个方法每次操作只调用一次，请为两个映射器使用相同的扩展实例。
- en: 'References: [#490](https://www.sqlalchemy.org/trac/ticket/490)'
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#490](https://www.sqlalchemy.org/trac/ticket/490)
- en: '**[orm]**'
  id: totrans-2348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: MapperExtension.before_update() and after_update() are now called symmetrically;
    previously, an instance that had no modified column attributes (but had a relation()
    modification) could be called with before_update() but not after_update()
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对MapperExtension.before_update()和after_update()进行对称调用；以前，一个没有修改列属性（但有关系()修改）的实例可能会调用before_update()但不会调用after_update()
- en: 'References: [#907](https://www.sqlalchemy.org/trac/ticket/907)'
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#907](https://www.sqlalchemy.org/trac/ticket/907)
- en: '**[orm]**'
  id: totrans-2351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: columns which are missing from a Query’s select statement now get automatically
    deferred during load.
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询语句中缺少的列现在在加载时会自动延迟加载。
- en: '**[orm]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapped classes which extend “object” and do not provide an __init__() method
    will now raise TypeError if non-empty *args or **kwargs are present at instance
    construction time (and are not consumed by any extensions such as the scoped_session
    mapper), consistent with the behavior of normal Python classes
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展“object”并且在实例构造时没有提供__init__()方法的映射类现在将在实例构造时引发TypeError，如果非空*args或**kwargs在实例构造时存在（并且未被任何扩展（如scoped_session
    mapper）消耗），与普通Python类的行为一致
- en: 'References: [#908](https://www.sqlalchemy.org/trac/ticket/908)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#908](https://www.sqlalchemy.org/trac/ticket/908)
- en: '**[orm]**'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed Query bug when filter_by() compares a relation against None
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当filter_by()将关系与None进行比较时的查询错误
- en: 'References: [#899](https://www.sqlalchemy.org/trac/ticket/899)'
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#899](https://www.sqlalchemy.org/trac/ticket/899)
- en: '**[orm]**'
  id: totrans-2359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved support for pickling of mapped entities. Per-instance lazy/deferred/expired
    callables are now serializable so that they serialize and deserialize with _state.
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对映射实体的 pickling 支持。现在每个实例的 lazy/deferred/expired 可调用对象都是可序列化的，因此它们与 _state
    一起序列化和反序列化。
- en: '**[orm]**'
  id: totrans-2361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'new synonym() behavior: an attribute will be placed on the mapped class, if
    one does not exist already, in all cases. if a property already exists on the
    class, the synonym will decorate the property with the appropriate comparison
    operators so that it can be used in column expressions just like any other mapped
    attribute (i.e. usable in filter(), etc.) the “proxy=True” flag is deprecated
    and no longer means anything. Additionally, the flag “map_column=True” will automatically
    generate a ColumnProperty corresponding to the name of the synonym, i.e.: ‘somename’:synonym(‘_somename’,
    map_column=True) will map the column named ‘somename’ to the attribute ‘_somename’.
    See the example in the mapper docs.'
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 synonym() 行为：如果类上不存在属性，则会在映射类上放置一个属性。如果类上已经存在属性，则 synonym 将使用适当的比较运算符修饰该属性，以便可以像任何其他映射属性一样在列表达式中使用（即可用于
    filter() 等）。“proxy=True”标志已被弃用并且不再起作用。“map_column=True”标志将自动生成与同义词名称对应的 ColumnProperty，例如：‘somename’:synonym(‘_somename’,
    map_column=True) 将列名为 ‘somename’ 的列映射到属性 ‘_somename’。请参阅映射器文档中的示例。
- en: 'References: [#801](https://www.sqlalchemy.org/trac/ticket/801)'
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#801](https://www.sqlalchemy.org/trac/ticket/801)
- en: '**[orm]**'
  id: totrans-2364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from() now replaces all existing FROM criterion with the given
    argument; the previous behavior of constructing a list of FROM clauses was generally
    not useful as is required filter() calls to create join criterion, and new tables
    introduced within filter() already add themselves to the FROM clause. The new
    behavior allows not just joins from the main table, but select statements as well.
    Filter criterion, order bys, eager load clauses will be “aliased” against the
    given statement.
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from() 现在将给定参数替换所有现有的 FROM 条件；以前的行为构造一个 FROM 子句列表通常是没有用的，因为需要 filter()
    调用来创建连接条件，并且在 filter() 中引入的新表已经将自己添加到 FROM 子句中。新行为不仅允许从主表进行连接，还允许选择语句。过滤条件、排序条件、急加载条件将与给定语句“别名”对齐。
- en: '**[orm]**'
  id: totrans-2366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: this month’s refactoring of attribute instrumentation changes the “copy-on-load”
    behavior we’ve had since midway through 0.3 with “copy-on-modify” in most cases.
    This takes a sizable chunk of latency out of load operations and overall does
    less work as only attributes which are actually modified get their “committed
    state” copied. Only “mutable scalar” attributes (i.e. a pickled object or other
    mutable item), the reason for the copy-on-load change in the first place, retain
    the old behavior.
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本月的属性检测重构改变了自0.3中期以来我们一直拥有的“加载时复制”行为，大多数情况下将其改为“修改时复制”。这减少了加载操作的大量延迟，并且总体上做更少的工作，因为只有实际上被修改的属性才会复制其“已提交状态”。只有“可变标量”属性（即
    pickled 对象或其他可变项）保留了旧的行为。
- en: '**[orm] [attrname]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [attrname]**'
- en: a slight behavioral change to attributes is, del’ing an attribute does *not*
    cause the lazyloader of that attribute to fire off again; the “del” makes the
    effective value of the attribute “None”. To re-trigger the “loader” for an attribute,
    use session.expire(instance,).
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对属性进行 del 操作不会再次触发该属性的 lazyloader；“del”操作使属性的有效值为“None”。要重新触发属性的“loader”，请使用
    session.expire(instance,)。
- en: '**[orm]**'
  id: totrans-2370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.filter(SomeClass.somechild == None), when comparing a many-to-one property
    to None, properly generates “id IS NULL” including that the NULL is on the right
    side.
  id: totrans-2371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 many-to-one 属性与 None 进行比较时，query.filter(SomeClass.somechild == None) 将正确生成“id
    IS NULL”，包括 NULL 位于右侧的情况。
- en: '**[orm]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() takes into account aliased joins, i.e. query.join(‘orders’,
    aliased=True).order_by(Order.id)
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by() 考虑了别名连接，即 query.join('orders', aliased=True).order_by(Order.id)
- en: '**[orm]**'
  id: totrans-2374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerload(), lazyload(), eagerload_all() take an optional second class-or-mapper
    argument, which will select the mapper to apply the option towards. This can select
    among other mappers which were added using add_entity().
  id: totrans-2375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerload()、lazyload()、eagerload_all() 接受可选的第二个类或映射器参数，该参数将选择要应用选项的映射器。这可以选择其他使用
    add_entity() 添加的映射器之一。
- en: '**[orm]**'
  id: totrans-2376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerloading will work with mappers added via add_entity().
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerloading 会与通过 add_entity() 添加的映射器一起工作。
- en: '**[orm]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “cascade delete” behavior to “dynamic” relations just like that of regular
    relations. if passive_deletes flag (also just added) is not set, a delete of the
    parent item will trigger a full load of the child items so that they can be deleted
    or updated accordingly.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“动态”关系添加了“级联删除”行为，就像常规关系一样。如果未设置 `passive_deletes` 标志（也刚刚添加），则删除父项将触发对子项的完整加载，以便可以相应地删除或更新它们。
- en: '**[orm]**'
  id: totrans-2380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: also with dynamic, implemented correct count() behavior as well as other helper
    methods.
  id: totrans-2381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也使用动态，实现了正确的 `count()` 行为以及其他辅助方法。
- en: '**[orm]**'
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to cascades on polymorphic relations, such that cascades from an object
    to a polymorphic collection continue cascading along the set of attributes specific
    to each element in the collection.
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态关系上的级联，使得从对象到多态集合的级联继续沿着集合中每个元素特定的属性集进行级联。
- en: '**[orm]**'
  id: totrans-2384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() and query.load() do not take existing filter or other criterion
    into account; these methods *always* look up the given id in the database or return
    the current instance from the identity map, disregarding any existing filter,
    join, group_by or other criterion which has been configured.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`query.get()` 和 `query.load()` 不考虑现有的过滤器或其他条件；这些方法*始终*在数据库中查找给定的 id 或从标识映射中返回当前实例，而忽略已配置的任何现有过滤器、连接、group_by
    或其他条件。'
- en: 'References: [#893](https://www.sqlalchemy.org/trac/ticket/893)'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#893](https://www.sqlalchemy.org/trac/ticket/893)
- en: '**[orm]**'
  id: totrans-2387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added support for version_id_col in conjunction with inheriting mappers. version_id_col
    is typically set on the base mapper in an inheritance relationship where it takes
    effect for all inheriting mappers.
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承映射器中添加了对 `version_id_col` 的支持。 `version_id_col` 通常在继承关系的基本映射器上设置，在这种关系中，它对所有继承的映射器都生效。
- en: 'References: [#883](https://www.sqlalchemy.org/trac/ticket/883)'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#883](https://www.sqlalchemy.org/trac/ticket/883)
- en: '**[orm]**'
  id: totrans-2390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relaxed rules on column_property() expressions having labels; any ColumnElement
    is accepted now, as the compiler auto-labels non-labeled ColumnElements now. a
    selectable, like a select() statement, still requires conversion to ColumnElement
    via as_scalar() or label().
  id: totrans-2391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了对 `column_property()` 表达式标签的规则；现在任何 `ColumnElement` 都被接受了，因为编译器现在会自动给没有标签的
    `ColumnElements` 加上标签。一个可选择的，像 `select()` 语句一样，仍然需要通过 `as_scalar()` 或 `label()`
    转换为 `ColumnElement`。
- en: '**[orm]**'
  id: totrans-2392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed backref bug where you could not del instance.attr if attr was None
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反向引用错误，如果 `attr` 为 `None`，则无法删除 `instance.attr`。
- en: '**[orm]**'
  id: totrans-2394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'several ORM attributes have been removed or made private: mapper.get_attr_by_column(),
    mapper.set_attr_by_column(), mapper.pks_by_table, mapper.cascade_callable(), MapperProperty.cascade_callable(),
    mapper.canload(), mapper.save_obj(), mapper.delete_obj(), mapper._mapper_registry,
    attributes.AttributeManager'
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除或私有化了几个 ORM 属性：`mapper.get_attr_by_column()`、`mapper.set_attr_by_column()`、`mapper.pks_by_table`、`mapper.cascade_callable()`、`MapperProperty.cascade_callable()`、`mapper.canload()`、`mapper.save_obj()`、`mapper.delete_obj()`、`mapper._mapper_registry`、`attributes.AttributeManager`
- en: '**[orm]**'
  id: totrans-2396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Assigning an incompatible collection type to a relation attribute now raises
    TypeError instead of sqlalchemy’s ArgumentError.
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将不兼容的集合类型分配给关系属性现在会引发 TypeError 而不是 sqlalchemy 的 ArgumentError。
- en: '**[orm]**'
  id: totrans-2398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Bulk assignment of a MappedCollection now raises an error if a key in the incoming
    dictionary does not match the key that the collection’s keyfunc would use for
    that value.
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传入字典中的键与集合的 `keyfunc` 为该值使用的键不匹配，则对 MappedCollection 进行的批量赋值将引发错误。
- en: 'References: [#886](https://www.sqlalchemy.org/trac/ticket/886)'
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#886](https://www.sqlalchemy.org/trac/ticket/886)
- en: '**[orm] [newval1] [newval2]**'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [newval1] [newval2]**'
- en: 'Custom collections can now specify a @converter method to translate objects
    used in “bulk” assignment into a stream of values, as in:'
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在自定义集合可以指定一个 `@converter` 方法，将“批量”赋值中使用的对象转换为一系列值，例如：
- en: '[PRE7]'
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The MappedCollection uses this hook to ensure that incoming key/value pairs
    are sane from the collection’s perspective.
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MappedCollection 使用此钩子确保从集合的角度来看传入的键/值对是合理的。
- en: '**[orm]**'
  id: totrans-2405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed endless loop issue when using lazy=”dynamic” on both sides of a bi-directional
    relationship
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在双向关系的两端同时使用 `lazy="dynamic"` 时修复了无限循环问题。
- en: 'References: [#872](https://www.sqlalchemy.org/trac/ticket/872)'
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#872](https://www.sqlalchemy.org/trac/ticket/872)
- en: '**[orm]**'
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more fixes to the LIMIT/OFFSET aliasing applied with Query + eagerloads, in
    this case when mapped against a select statement
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Query + eagerloads 中应用 LIMIT/OFFSET 别名时修复了更多问题，例如当与 select 语句进行映射时。
- en: 'References: [#904](https://www.sqlalchemy.org/trac/ticket/904)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#904](https://www.sqlalchemy.org/trac/ticket/904)
- en: '**[orm]**'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to self-referential eager loading such that if the same mapped instance
    appears in two or more distinct sets of columns in the same result set, its eagerly
    loaded collection will be populated regardless of whether or not all of the rows
    contain a set of “eager” columns for that collection. this would also show up
    as a KeyError when fetching results with join_depth turned on.
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自引用的急加载问题，即使在同一结果集中的两个或更多不同列集中出现相同映射的实例，其急加载集合也将被填充，无论所有行是否包含该集合的“急加载”列集。当打开join_depth时，这也会显示为KeyError。
- en: '**[orm]**'
  id: totrans-2413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where Query would not apply a subquery to the SQL when LIMIT was used
    in conjunction with an inheriting mapper where the eager loader was only in the
    parent mapper.
  id: totrans-2414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用LIMIT与仅在父映射器中存在急加载器的继承映射器时，Query不会将子查询应用于SQL的bug。
- en: '**[orm]**'
  id: totrans-2415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: clarified the error message which occurs when you try to update() an instance
    with the same identity key as an instance already present in the session.
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 澄清了当尝试使用相同标识键更新()已经存在于会话中的实例时发生的错误消息。
- en: '**[orm]**'
  id: totrans-2417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some clarifications and fixes to merge(instance, dont_load=True). fixed bug
    where lazy loaders were getting disabled on returned instances. Also, we currently
    do not support merging an instance which has uncommitted changes on it, in the
    case that dont_load=True is used….this will now raise an error. This is due to
    complexities in merging the “committed state” of the given instance to correctly
    correspond to the newly copied instance, as well as other modified state. Since
    the use case for dont_load=True is caching, the given instances shouldn’t have
    any uncommitted changes on them anyway. We also copy the instances over without
    using any events now, so that the ‘dirty’ list on the new session remains unaffected.
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对merge(instance, dont_load=True)进行了一些澄清和修复。修复了在返回的实例上禁用延迟加载器的bug。此外，我们目前不支持在实例上有未提交更改时使用dont_load=True的合并实例的情况...这将引发错误。这是因为合并给定实例的“已提交状态”以正确对应新复制的实例以及其他修改状态的复杂性。由于dont_load=True的用例是缓存，给定实例不应该有任何未提交更改。我们现在也不使用任何事件复制实例，以便新会话上的“脏”列表保持不受影响。
- en: '**[orm]**'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug which could arise when using session.begin_nested() in conjunction
    with more than one level deep of enclosing session.begin() statements
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用session.begin_nested()与多于一级的封闭session.begin()语句时可能出现的bug
- en: '**[orm]**'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed session.refresh() with instance that has custom entity_name
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用具有自定义实体名称的实例进行session.refresh()时的问题
- en: 'References: [#914](https://www.sqlalchemy.org/trac/ticket/914)'
  id: totrans-2423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#914](https://www.sqlalchemy.org/trac/ticket/914)
- en: sql
  id: totrans-2424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generic functions ! we introduce a database of known SQL functions, such as
    current_timestamp, coalesce, and create explicit function objects representing
    them. These objects have constrained argument lists, are type aware, and can compile
    in a dialect-specific fashion. So saying func.char_length(“foo”, “bar”) raises
    an error (too many args), func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005,
    10, 15)) knows that its return type is a Date. We only have a few functions represented
    so far but will continue to add to the system
  id: totrans-2426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通用函数！我们引入了一个已知SQL函数的数据库，例如current_timestamp、coalesce，并创建了表示它们的显式函数对象。这些对象具有受限制的参数列表，具有类型意识，并且可以以特定于方言的方式编译。因此，说func.char_length(“foo”,
    “bar”)会引发错误（参数太多），func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005,
    10, 15))知道其返回类型是Date。到目前为止，我们只表示了一些函数，但将继续添加到系统中
- en: 'References: [#615](https://www.sqlalchemy.org/trac/ticket/615)'
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#615](https://www.sqlalchemy.org/trac/ticket/615)
- en: '**[sql]**'
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: auto-reconnect support improved; a Connection can now automatically reconnect
    after its underlying connection is invalidated, without needing to connect() again
    from the engine. This allows an ORM session bound to a single Connection to not
    need a reconnect. Open transactions on the Connection must be rolled back after
    an invalidation of the underlying connection else an error is raised. Also fixed
    bug where disconnect detect was not being called for cursor(), rollback(), or
    commit().
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了自动重新连接支持；现在，Connection在其基础连接失效后可以自动重新连接，而不需要再次从engine连接。这使得绑定到单个Connection的ORM会话不需要重新连接。在基础连接失效后，Connection上的未完成事务必须回滚，否则会引发错误。还修复了在cursor()、rollback()或commit()中未调用disconnect
    detect的bug。
- en: '**[sql]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added new flag to String and create_engine(), assert_unicode=(True|False|’warn’|None).
    Defaults to False or None on create_engine() and String, ‘warn’ on the Unicode
    type. When True, results in all unicode conversion operations raising an exception
    when a non-unicode bytestring is passed as a bind parameter. ‘warn’ results in
    a warning. It is strongly advised that all unicode-aware applications make proper
    use of Python unicode objects (i.e. u’hello’ and not ‘hello’) so that data round
    trips accurately.
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为String和create_engine()添加了新标志，assert_unicode=(True|False|’warn’|None)。在create_engine()和String上默认为False或None，Unicode类型上为‘warn’。当为True时，所有Unicode转换操作在传递非Unicode字节字符串作为绑定参数时会引发异常。‘warn’会产生警告。强烈建议所有支持Unicode的应用程序正确使用Python
    Unicode对象（即u’hello’而不是‘hello’），以便数据往返准确。
- en: '**[sql]**'
  id: totrans-2432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generation of “unique” bind parameters has been simplified to use the same “unique
    identifier” mechanisms as everything else. This doesn’t affect user code, except
    any code that might have been hardcoded against the generated names. Generated
    bind params now have the form “<paramname>_<num>”, whereas before only the second
    bind of the same name would have this form.
  id: totrans-2433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “unique”绑定参数的生成已简化为使用与其他所有内容相同的“唯一标识符”机制。这不会影响用户代码，除非可能已经针对生成的名称硬编码的任何代码。生成的绑定参数现在具有“<paramname>_<num>”的形式，而以前只有相同名称的第二个绑定会具有这种形式。
- en: '**[sql]**'
  id: totrans-2434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select().as_scalar() will raise an exception if the select does not have exactly
    one expression in its columns clause.
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select().as_scalar()如果select在其columns子句中没有确切一个表达式，则会引发异常。
- en: '**[sql]**'
  id: totrans-2436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: bindparam() objects themselves can be used as keys for execute(), i.e. statement.execute({bind1:’foo’,
    bind2:’bar’})
  id: totrans-2437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()对象本身可以用作execute()的键，即statement.execute({bind1:’foo’, bind2:’bar’})
- en: '**[sql]**'
  id: totrans-2438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added new methods to TypeDecorator, process_bind_param() and process_result_value(),
    which automatically take advantage of the processing of the underlying type. Ideal
    for using with Unicode or Pickletype. TypeDecorator should now be the primary
    way to augment the behavior of any existing type including other TypeDecorator
    subclasses such as PickleType.
  id: totrans-2439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了TypeDecorator的新方法，process_bind_param()和process_result_value()，它们自动利用底层类型的处理。非常适合与Unicode或PickleType一起使用。TypeDecorator现在应该是增强任何现有类型行为的主要方式，包括其他TypeDecorator子类，如PickleType。
- en: '**[sql]**'
  id: totrans-2440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: selectables (and others) will issue a warning when two columns in their exported
    columns collection conflict based on name.
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selectables（和其他对象）在其导出的列集合中基于名称冲突的两列时将发出警告。
- en: '**[sql]**'
  id: totrans-2442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: tables with schemas can still be used in sqlite, firebird, schema name just
    gets dropped
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有模式的表仍然可以在sqlite、firebird中使用，模式名称只是被删除
- en: 'References: [#890](https://www.sqlalchemy.org/trac/ticket/890)'
  id: totrans-2444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#890](https://www.sqlalchemy.org/trac/ticket/890)
- en: '**[sql]**'
  id: totrans-2445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed the various “literal” generation functions to use an anonymous bind
    parameter. not much changes here except their labels now look like “:param_1”,
    “:param_2” instead of “:literal”
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改各种“literal”生成函数以使用匿名绑定参数。这里没有太多变化，只是它们的标签现在看起来像“:param_1”，“:param_2”，而不是“:literal”
- en: '**[sql]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column labels in the form “tablename.columname”, i.e. with a dot, are now supported.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持形式为“tablename.columname”的列标签，即带有点的形式。
- en: '**[sql]**'
  id: totrans-2449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: from_obj keyword argument to select() can be a scalar or a list.
  id: totrans-2450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()的from_obj关键字参数可以是标量或列表。
- en: misc
  id: totrans-2451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: sqlite SLDate type will not erroneously render “microseconds” portion of a datetime
    or time object.
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite SLDate类型不会错误地呈现日期时间或时间对象的“微秒”部分。
- en: '**[dialects]**'
  id: totrans-2454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: oracle
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oracle
- en: added disconnect detection support for Oracle
  id: totrans-2456
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对Oracle的断开连接检测支持
- en: some cleanup to binary/raw types so that cx_oracle.LOB is detected on an ad-hoc
    basis
  id: totrans-2457
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对二进制/原始类型进行了一些清理，以便在特定情况下检测到cx_oracle.LOB
- en: 'References: [#902](https://www.sqlalchemy.org/trac/ticket/902)'
  id: totrans-2458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#902](https://www.sqlalchemy.org/trac/ticket/902)
- en: '**[dialects]**'
  id: totrans-2459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: MSSQL
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL
- en: PyODBC no longer has a global “set nocount on”.
  id: totrans-2461
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyODBC不再具有全局“set nocount on”。
- en: Fix non-identity integer PKs on autoload
  id: totrans-2462
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复自动加载时非标识整数主键
- en: Better support for convert_unicode
  id: totrans-2463
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地支持convert_unicode
- en: Less strict date conversion for pyodbc/adodbapi
  id: totrans-2464
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于pyodbc/adodbapi的日期转换不那么严格
- en: Schema-qualified tables / autoload
  id: totrans-2465
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式限定的表/自动加载
- en: 'References: [#824](https://www.sqlalchemy.org/trac/ticket/824), [#839](https://www.sqlalchemy.org/trac/ticket/839),
    [#842](https://www.sqlalchemy.org/trac/ticket/842), [#901](https://www.sqlalchemy.org/trac/ticket/901)'
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#824](https://www.sqlalchemy.org/trac/ticket/824), [#839](https://www.sqlalchemy.org/trac/ticket/839),
    [#842](https://www.sqlalchemy.org/trac/ticket/842), [#901](https://www.sqlalchemy.org/trac/ticket/901)
- en: '**[backend] [firebird]**'
  id: totrans-2467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[backend] [firebird]**'
- en: does properly reflect domains (partially fixing) and PassiveDefaults
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确反映域（部分修复）和 PassiveDefaults
- en: 'References: [#410](https://www.sqlalchemy.org/trac/ticket/410)'
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#410](https://www.sqlalchemy.org/trac/ticket/410)
- en: '**[3562] [backend] [firebird]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[3562] [backend] [firebird]**'
- en: reverted to use default poolclass (was set to SingletonThreadPool in 0.4.0 for
    test purposes)
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回退到使用默认的 poolclass（在 0.4.0 中设置为 SingletonThreadPool 用于测试目的）
- en: '**[backend] [firebird]**'
  id: totrans-2472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[backend] [firebird]**'
- en: map func.length() to ‘char_length’ (easily overridable with the UDF ‘strlen’
    on old versions of Firebird)
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 func.length() 映射到 ‘char_length’（在旧版本的 Firebird 上可以轻松通过 UDF ‘strlen’ 进行覆盖）
- en: orm
  id: totrans-2474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'a major behavioral change to collection-based backrefs: they no longer trigger
    lazy loads ! “reverse” adds and removes are queued up and are merged with the
    collection when it is actually read from and loaded; but do not trigger a load
    beforehand. For users who have noticed this behavior, this should be much more
    convenient than using dynamic relations in some cases; for those who have not,
    you might notice your apps using a lot fewer queries than before in some situations.'
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对基于集合的反向引用的重大行为更改：它们不再触发延迟加载！“reverse” 添加和删除被排队并在实际读取和加载集合时与集合合并；但不会事先触发加载。对于注意到这种行为的用户，在某些情况下，这应该比在某些情况下使用动态关系更方便；对于那些没有注意到的用户，您可能会注意到您的应用程序在某些情况下使用的查询比以前少得多。
- en: 'References: [#871](https://www.sqlalchemy.org/trac/ticket/871)'
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#871](https://www.sqlalchemy.org/trac/ticket/871)
- en: '**[orm]**'
  id: totrans-2478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mutable primary key support is added. primary key columns can be changed freely,
    and the identity of the instance will change upon flush. In addition, update cascades
    of foreign key referents (primary key or not) along relations are supported, either
    in tandem with the database’s ON UPDATE CASCADE (required for DB’s like Postgres)
    or issued directly by the ORM in the form of UPDATE statements, by setting the
    flag “passive_cascades=False”.
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可变主键支持。主键列可以自由更改，并且在刷新时实例的标识将会改变。此外，支持沿关系更新外键引用（主键或非主键），可以与数据库的 ON UPDATE
    CASCADE（对于像 Postgres 这样的数据库是必需的）一起使用，或者直接由 ORM 以 UPDATE 语句的形式发出，通过设置标志“passive_cascades=False”。
- en: '**[orm]**'
  id: totrans-2480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'inheriting mappers now inherit the MapperExtensions of their parent mapper
    directly, so that all methods for a particular MapperExtension are called for
    subclasses as well. As always, any MapperExtension can return either EXT_CONTINUE
    to continue extension processing or EXT_STOP to stop processing. The order of
    mapper resolution is: <extensions declared on the classes mapper> <extensions
    declared on the classes’ parent mapper> <globally declared extensions>.'
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继承的映射器现在直接继承其父映射器的 MapperExtensions，因此特定 MapperExtension 的所有方法也将为子类调用。与往常一样，任何
    MapperExtension 都可以返回 EXT_CONTINUE 继续扩展处理或 EXT_STOP 停止处理。映射器解析的顺序是：<在类的映射器上声明的扩展>
    <在类的父映射器上声明的扩展> <全局声明的扩展>。
- en: Note that if you instantiate the same extension class separately and then apply
    it individually for two mappers in the same inheritance chain, the extension will
    be applied twice to the inheriting class, and each method will be called twice.
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，如果您单独实例化相同的扩展类，然后分别将其应用于同一继承链中的两个映射器，那么该扩展将应用两次于继承类，并且每个方法将被调用两次。
- en: To apply a mapper extension explicitly to each inheriting class but have each
    method called only once per operation, use the same instance of the extension
    for both mappers.
  id: totrans-2483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将映射器扩展显式应用于每个继承类，但每个方法每次操作只调用一次，请为两个映射器使用相同的扩展实例。
- en: 'References: [#490](https://www.sqlalchemy.org/trac/ticket/490)'
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#490](https://www.sqlalchemy.org/trac/ticket/490)
- en: '**[orm]**'
  id: totrans-2485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: MapperExtension.before_update() and after_update() are now called symmetrically;
    previously, an instance that had no modified column attributes (but had a relation()
    modification) could be called with before_update() but not after_update()
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MapperExtension.before_update() 和 after_update() 现在被对称调用；以前，一个实例如果没有修改的列属性（但有关系()
    修改）可能会在 before_update() 被调用但不会在 after_update() 被调用。
- en: 'References: [#907](https://www.sqlalchemy.org/trac/ticket/907)'
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#907](https://www.sqlalchemy.org/trac/ticket/907)
- en: '**[orm]**'
  id: totrans-2488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: columns which are missing from a Query’s select statement now get automatically
    deferred during load.
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询语句中缺失的列现在在加载时会自动延迟加载。
- en: '**[orm]**'
  id: totrans-2490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: mapped classes which extend “object” and do not provide an __init__() method
    will now raise TypeError if non-empty *args or **kwargs are present at instance
    construction time (and are not consumed by any extensions such as the scoped_session
    mapper), consistent with the behavior of normal Python classes
  id: totrans-2491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展“object”并且在实例构造时没有提供 __init__() 方法的映射类现在会在实例构造时引发 TypeError，如果非空的 *args 或
    **kwargs 在实例构造���存在（并且没有被任何扩展（如 scoped_session 映射器）消耗），与普通 Python 类的行为一致。
- en: 'References: [#908](https://www.sqlalchemy.org/trac/ticket/908)'
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#908](https://www.sqlalchemy.org/trac/ticket/908)
- en: '**[orm]**'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed Query bug when filter_by() compares a relation against None
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 在 filter_by() 将关系与 None 进行比较时的 bug
- en: 'References: [#899](https://www.sqlalchemy.org/trac/ticket/899)'
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#899](https://www.sqlalchemy.org/trac/ticket/899)
- en: '**[orm]**'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved support for pickling of mapped entities. Per-instance lazy/deferred/expired
    callables are now serializable so that they serialize and deserialize with _state.
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对映射实体的 pickling 支持。每个实例的延迟/延迟/过期可调用现在是可序列化的，因此它们与 _state 一起序列化和反序列化。
- en: '**[orm]**'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'new synonym() behavior: an attribute will be placed on the mapped class, if
    one does not exist already, in all cases. if a property already exists on the
    class, the synonym will decorate the property with the appropriate comparison
    operators so that it can be used in column expressions just like any other mapped
    attribute (i.e. usable in filter(), etc.) the “proxy=True” flag is deprecated
    and no longer means anything. Additionally, the flag “map_column=True” will automatically
    generate a ColumnProperty corresponding to the name of the synonym, i.e.: ‘somename’:synonym(‘_somename’,
    map_column=True) will map the column named ‘somename’ to the attribute ‘_somename’.
    See the example in the mapper docs.'
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 synonym() 行为：如果映射类上不存在属性，则属性将放置在映射类上。如果类上已经存在属性，则 synonym 将使用适当的比较运算符装饰属性，以便它可以像任何其他映射属性一样在列表达式中使用（即可用于
    filter() 等）。“proxy=True”标志已被弃用，不再起作用。此外，“map_column=True”标志将自动生成与同义词名称对应的 ColumnProperty，例如：‘somename’:synonym(‘_somename’,
    map_column=True) 将将名为‘somename’的列映射到属性‘_somename’。请参阅映射器文档中的示例。
- en: 'References: [#801](https://www.sqlalchemy.org/trac/ticket/801)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#801](https://www.sqlalchemy.org/trac/ticket/801)
- en: '**[orm]**'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from() now replaces all existing FROM criterion with the given
    argument; the previous behavior of constructing a list of FROM clauses was generally
    not useful as is required filter() calls to create join criterion, and new tables
    introduced within filter() already add themselves to the FROM clause. The new
    behavior allows not just joins from the main table, but select statements as well.
    Filter criterion, order bys, eager load clauses will be “aliased” against the
    given statement.
  id: totrans-2502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from() 现在用给定的参数替换所有现有的 FROM 条件；以前构造 FROM 子句列表的行为通常不实用，因为需要 filter()
    调用来创建连接条件，并且在 filter() 中引入的新表已经添加到 FROM 子句中。新行为不仅允许从主表进行连接，还允许选择语句。过滤条件、排序和急加载子句将“针对”给定语句进行别名处理。
- en: '**[orm]**'
  id: totrans-2503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: this month’s refactoring of attribute instrumentation changes the “copy-on-load”
    behavior we’ve had since midway through 0.3 with “copy-on-modify” in most cases.
    This takes a sizable chunk of latency out of load operations and overall does
    less work as only attributes which are actually modified get their “committed
    state” copied. Only “mutable scalar” attributes (i.e. a pickled object or other
    mutable item), the reason for the copy-on-load change in the first place, retain
    the old behavior.
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本月对属性检测的重构改变了自 0.3 中期以来我们一直拥有的“加载时复制”行为，大多数情况下改为“修改时复制”。这减少了加载操作中的相当大的延迟，并且总体上做的工作更少，因为只有实际修改的属性才会复制其“已提交状态”。只有“可变标量”属性（即
    pickled 对象或其他可变项），即第一次更改加载时的复制行为的原因，保留了旧行为。
- en: '**[orm] [attrname]**'
  id: totrans-2505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [attrname]**'
- en: a slight behavioral change to attributes is, del’ing an attribute does *not*
    cause the lazyloader of that attribute to fire off again; the “del” makes the
    effective value of the attribute “None”. To re-trigger the “loader” for an attribute,
    use session.expire(instance,).
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对属性进行轻微的行为更改，删除属性不会再次触发该属性的延迟加载器；“del”使属性的有效值为“None”。要重新触发属性的“加载器”，请使用 session.expire(instance,)。
- en: '**[orm]**'
  id: totrans-2507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.filter(SomeClass.somechild == None), when comparing a many-to-one property
    to None, properly generates “id IS NULL” including that the NULL is on the right
    side.
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.filter(SomeClass.somechild == None)，当将一个多对一属性与 None 进行比较时，会正确生成“id IS
    NULL”，包括 NULL 在右侧的情况。
- en: '**[orm]**'
  id: totrans-2509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() takes into account aliased joins, i.e. query.join(‘orders’,
    aliased=True).order_by(Order.id)
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by() 考虑到别名连接，即 query.join('orders', aliased=True).order_by(Order.id)
- en: '**[orm]**'
  id: totrans-2511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerload(), lazyload(), eagerload_all() take an optional second class-or-mapper
    argument, which will select the mapper to apply the option towards. This can select
    among other mappers which were added using add_entity().
  id: totrans-2512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerload()、lazyload()、eagerload_all() 接受可选的第二个类或映射器参数，这将选择要应用选项的映射器。这可以选择使用
    add_entity() 添加的其他映射器之一。
- en: '**[orm]**'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerloading will work with mappers added via add_entity().
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerloading 将与通过 add_entity() 添加的映射器一起工作。
- en: '**[orm]**'
  id: totrans-2515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “cascade delete” behavior to “dynamic” relations just like that of regular
    relations. if passive_deletes flag (also just added) is not set, a delete of the
    parent item will trigger a full load of the child items so that they can be deleted
    or updated accordingly.
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就像普通关系一样，对“动态”关系增加了“级联删除”行为。如果未设置 passive_deletes 标志（刚刚添加），则删除父项目将触发对子项目的完整加载，以便可以相应地删除或更新它们。
- en: '**[orm]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: also with dynamic, implemented correct count() behavior as well as other helper
    methods.
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样对动态实现了正确的 count() 行为以及其他辅助方法。
- en: '**[orm]**'
  id: totrans-2519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to cascades on polymorphic relations, such that cascades from an object
    to a polymorphic collection continue cascading along the set of attributes specific
    to each element in the collection.
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于多态关系的级联错误，使得从对象到多态集合的级联继续沿着集合中每个元素特定的属性集合进行级联。
- en: '**[orm]**'
  id: totrans-2521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.get() and query.load() do not take existing filter or other criterion
    into account; these methods *always* look up the given id in the database or return
    the current instance from the identity map, disregarding any existing filter,
    join, group_by or other criterion which has been configured.
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.get() 和 query.load() 不考虑现有的过滤器或其他条件；这些方法*总是*在数据库中查找给定的 id 或从标识映射中返回当前实例，而不考虑任何已配置的现有过滤器、连接、group_by
    或其他条件。
- en: 'References: [#893](https://www.sqlalchemy.org/trac/ticket/893)'
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#893](https://www.sqlalchemy.org/trac/ticket/893)
- en: '**[orm]**'
  id: totrans-2524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added support for version_id_col in conjunction with inheriting mappers. version_id_col
    is typically set on the base mapper in an inheritance relationship where it takes
    effect for all inheriting mappers.
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承映射器的情况下增加了对 version_id_col 的支持。version_id_col 通常在继承关系中设置在基映射器上，它对所有继承映射器生效。
- en: 'References: [#883](https://www.sqlalchemy.org/trac/ticket/883)'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#883](https://www.sqlalchemy.org/trac/ticket/883)
- en: '**[orm]**'
  id: totrans-2527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relaxed rules on column_property() expressions having labels; any ColumnElement
    is accepted now, as the compiler auto-labels non-labeled ColumnElements now. a
    selectable, like a select() statement, still requires conversion to ColumnElement
    via as_scalar() or label().
  id: totrans-2528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了 column_property() 表达式的标签规则；现在接受任何 ColumnElement，因为编译器现在自动为非标记的 ColumnElement
    添加标签。可选择的，比如 select() 语句，仍然需要通过 as_scalar() 或 label() 转换为 ColumnElement。
- en: '**[orm]**'
  id: totrans-2529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed backref bug where you could not del instance.attr if attr was None
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 backref bug，如果 attr 为 None，则无法删除 instance.attr。
- en: '**[orm]**'
  id: totrans-2531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'several ORM attributes have been removed or made private: mapper.get_attr_by_column(),
    mapper.set_attr_by_column(), mapper.pks_by_table, mapper.cascade_callable(), MapperProperty.cascade_callable(),
    mapper.canload(), mapper.save_obj(), mapper.delete_obj(), mapper._mapper_registry,
    attributes.AttributeManager'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 几个 ORM 属性已被删除或设置为私有：mapper.get_attr_by_column()、mapper.set_attr_by_column()、mapper.pks_by_table、mapper.cascade_callable()、MapperProperty.cascade_callable()、mapper.canload()、mapper.save_obj()、mapper.delete_obj()、mapper._mapper_registry、attributes.AttributeManager
- en: '**[orm]**'
  id: totrans-2533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Assigning an incompatible collection type to a relation attribute now raises
    TypeError instead of sqlalchemy’s ArgumentError.
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将不兼容的集合类型分配给关系属性现在会引发 TypeError 而不是 SQLAlchemy 的 ArgumentError。
- en: '**[orm]**'
  id: totrans-2535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Bulk assignment of a MappedCollection now raises an error if a key in the incoming
    dictionary does not match the key that the collection’s keyfunc would use for
    that value.
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传入字典中的键与集合的 keyfunc 为该值使用的键不匹配，则 MappedCollection 的批量赋值现在会引发错误。
- en: 'References: [#886](https://www.sqlalchemy.org/trac/ticket/886)'
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#886](https://www.sqlalchemy.org/trac/ticket/886)
- en: '**[orm] [newval1] [newval2]**'
  id: totrans-2538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [newval1] [newval2]**'
- en: 'Custom collections can now specify a @converter method to translate objects
    used in “bulk” assignment into a stream of values, as in:'
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义集合现在可以指定一个 @converter 方法来将用于“批量”赋值的对象转换为值流，如下所示：
- en: '[PRE8]'
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The MappedCollection uses this hook to ensure that incoming key/value pairs
    are sane from the collection’s perspective.
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MappedCollection 使用此钩子来确保传入的键值对从集合的角度看是合理的。
- en: '**[orm]**'
  id: totrans-2542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed endless loop issue when using lazy=”dynamic” on both sides of a bi-directional
    relationship
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在双向关系的两侧都使用lazy=”dynamic”时出现无限循环问题
- en: 'References: [#872](https://www.sqlalchemy.org/trac/ticket/872)'
  id: totrans-2544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#872](https://www.sqlalchemy.org/trac/ticket/872)
- en: '**[orm]**'
  id: totrans-2545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more fixes to the LIMIT/OFFSET aliasing applied with Query + eagerloads, in
    this case when mapped against a select statement
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query + 急加载中应用LIMIT/OFFSET别名的更多修复，特别是在与select语句映射时
- en: 'References: [#904](https://www.sqlalchemy.org/trac/ticket/904)'
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#904](https://www.sqlalchemy.org/trac/ticket/904)
- en: '**[orm]**'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to self-referential eager loading such that if the same mapped instance
    appears in two or more distinct sets of columns in the same result set, its eagerly
    loaded collection will be populated regardless of whether or not all of the rows
    contain a set of “eager” columns for that collection. this would also show up
    as a KeyError when fetching results with join_depth turned on.
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自引用急加载的问题，即使同一映射实例出现在同一结果集中的两个或更多不同列集中，其急加载的集合也将被填充，无论所有行是否包含该集合的“急加载”列集。当打开join_depth时，这也会显示为KeyError。
- en: '**[orm]**'
  id: totrans-2550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where Query would not apply a subquery to the SQL when LIMIT was used
    in conjunction with an inheriting mapper where the eager loader was only in the
    parent mapper.
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用继承映射器时，当在父映射器中仅存在急加载器时，Query在使用LIMIT与子查询时不会将子查询应用于SQL的错误。
- en: '**[orm]**'
  id: totrans-2552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: clarified the error message which occurs when you try to update() an instance
    with the same identity key as an instance already present in the session.
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 澄清了当尝试使用相同标识键更新具有与会话中已存在实例相同标识键的实例时发生的错误消息。
- en: '**[orm]**'
  id: totrans-2554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some clarifications and fixes to merge(instance, dont_load=True). fixed bug
    where lazy loaders were getting disabled on returned instances. Also, we currently
    do not support merging an instance which has uncommitted changes on it, in the
    case that dont_load=True is used….this will now raise an error. This is due to
    complexities in merging the “committed state” of the given instance to correctly
    correspond to the newly copied instance, as well as other modified state. Since
    the use case for dont_load=True is caching, the given instances shouldn’t have
    any uncommitted changes on them anyway. We also copy the instances over without
    using any events now, so that the ‘dirty’ list on the new session remains unaffected.
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对merge(instance, dont_load=True)进行了一些澄清和修复。修复了在返回的实例上禁用延迟加载器的错误。此外，我们目前不支持在实例上有未提交更改时使用dont_load=True进行合并….这将引发错误。这是由于将给定实例的“已提交状态”正确合并到新复制的实例以正确对应其他修改状态的复杂性。由于dont_load=True的用例是缓存，因此给定实例不应该有任何未提交的更改。我们现在也在不使用任何事件的情况下复制实例，以使新会话上的“脏”列表保持不受影响。
- en: '**[orm]**'
  id: totrans-2556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug which could arise when using session.begin_nested() in conjunction
    with more than one level deep of enclosing session.begin() statements
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用session.begin_nested()与多层嵌套session.begin()语句时可能出现的错误
- en: '**[orm]**'
  id: totrans-2558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed session.refresh() with instance that has custom entity_name
  id: totrans-2559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具有自定义entity_name的实例使用session.refresh()时的无限循环问题
- en: 'References: [#914](https://www.sqlalchemy.org/trac/ticket/914)'
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#914](https://www.sqlalchemy.org/trac/ticket/914)
- en: sql
  id: totrans-2561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generic functions ! we introduce a database of known SQL functions, such as
    current_timestamp, coalesce, and create explicit function objects representing
    them. These objects have constrained argument lists, are type aware, and can compile
    in a dialect-specific fashion. So saying func.char_length(“foo”, “bar”) raises
    an error (too many args), func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005,
    10, 15)) knows that its return type is a Date. We only have a few functions represented
    so far but will continue to add to the system
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通用函数！我们引入了一个已知SQL函数的数据库，例如current_timestamp，coalesce，并创建了表示它们的显式函数对象。这些对象具有受限制的参数列表，具有类型意识，并且可以以特定于方言的方式编译。因此，说func.char_length(“foo”,
    “bar”)会引发错误（参数太多），func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005,
    10, 15))知道其返回类型是Date。到目前为止，我们只表示了一些函数，但将继续添加到系统中
- en: 'References: [#615](https://www.sqlalchemy.org/trac/ticket/615)'
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#615](https://www.sqlalchemy.org/trac/ticket/615)
- en: '**[sql]**'
  id: totrans-2565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: auto-reconnect support improved; a Connection can now automatically reconnect
    after its underlying connection is invalidated, without needing to connect() again
    from the engine. This allows an ORM session bound to a single Connection to not
    need a reconnect. Open transactions on the Connection must be rolled back after
    an invalidation of the underlying connection else an error is raised. Also fixed
    bug where disconnect detect was not being called for cursor(), rollback(), or
    commit().
  id: totrans-2566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动重新连接支持得到改进；现在连接在其底层连接失效后可以自动重新连接，而不需要再次从引擎连接()。这使得绑定到单个连接的ORM会话不需要重新连接。在底层连接失效后，连接上的打开事务必须回滚，否则会引发错误。还修复了在cursor()、rollback()或commit()中未调用断开检测的错误。
- en: '**[sql]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added new flag to String and create_engine(), assert_unicode=(True|False|’warn’|None).
    Defaults to False or None on create_engine() and String, ‘warn’ on the Unicode
    type. When True, results in all unicode conversion operations raising an exception
    when a non-unicode bytestring is passed as a bind parameter. ‘warn’ results in
    a warning. It is strongly advised that all unicode-aware applications make proper
    use of Python unicode objects (i.e. u’hello’ and not ‘hello’) so that data round
    trips accurately.
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为String和create_engine()添加了新标志，assert_unicode=(True|False|’warn’|None)。在create_engine()和String上默认为False或None，Unicode类型上为‘warn’。当为True时，当传递非Unicode字节字符串作为绑定参数时，所有Unicode转换操作都会引发异常。‘warn’会产生警告。强烈建议所有支持Unicode的应用程序正确使用Python
    Unicode对象（即u’hello’而不是‘hello’），以便数据往返准确。
- en: '**[sql]**'
  id: totrans-2569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: generation of “unique” bind parameters has been simplified to use the same “unique
    identifier” mechanisms as everything else. This doesn’t affect user code, except
    any code that might have been hardcoded against the generated names. Generated
    bind params now have the form “<paramname>_<num>”, whereas before only the second
    bind of the same name would have this form.
  id: totrans-2570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “唯一”绑定参数的生成已简化为使用与其他所有内容相同的“唯一标识符”机制。这不会影响用户代码，除非可能已经针对生成的名称进行了硬编码。生成的绑定参数现在的形式为“<paramname>_<num>”，而以前只有同名的第二个绑定才会有这种形式。
- en: '**[sql]**'
  id: totrans-2571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select().as_scalar() will raise an exception if the select does not have exactly
    one expression in its columns clause.
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select().as_scalar()如果在其列子句中没有确切一个表达式，将会引发异常。
- en: '**[sql]**'
  id: totrans-2573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: bindparam() objects themselves can be used as keys for execute(), i.e. statement.execute({bind1:’foo’,
    bind2:’bar’})
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()对象本身可以用作execute()的键，即statement.execute({bind1:’foo’, bind2:’bar’})
- en: '**[sql]**'
  id: totrans-2575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added new methods to TypeDecorator, process_bind_param() and process_result_value(),
    which automatically take advantage of the processing of the underlying type. Ideal
    for using with Unicode or Pickletype. TypeDecorator should now be the primary
    way to augment the behavior of any existing type including other TypeDecorator
    subclasses such as PickleType.
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了TypeDecorator的新方法process_bind_param()和process_result_value()，它们自动利用底层类型的处理。非常适合与Unicode或PickleType一起使用。TypeDecorator现在应该是增强任何现有类型行为的主要方式，包括其他TypeDecorator子类，如PickleType。
- en: '**[sql]**'
  id: totrans-2577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: selectables (and others) will issue a warning when two columns in their exported
    columns collection conflict based on name.
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selectables（以及其他对象）在其导出列集合中基于名称冲突的两个列时会发出警告。
- en: '**[sql]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: tables with schemas can still be used in sqlite, firebird, schema name just
    gets dropped
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlite、firebird中仍然可以使用具有模式的表，模式名称只会被删除
- en: 'References: [#890](https://www.sqlalchemy.org/trac/ticket/890)'
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#890](https://www.sqlalchemy.org/trac/ticket/890)
- en: '**[sql]**'
  id: totrans-2582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed the various “literal” generation functions to use an anonymous bind
    parameter. not much changes here except their labels now look like “:param_1”,
    “:param_2” instead of “:literal”
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将各种“literal”生成函数更改为使用匿名绑定参数。这里没有太多变化，除了它们的标签现在看起来像“:param_1”，“:param_2”而不是“:literal”
- en: '**[sql]**'
  id: totrans-2584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column labels in the form “tablename.columname”, i.e. with a dot, are now supported.
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持形式为“tablename.columname”的列标签，即带有点的形式。
- en: '**[sql]**'
  id: totrans-2586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: from_obj keyword argument to select() can be a scalar or a list.
  id: totrans-2587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()的from_obj关键字参数可以是标量或列表。
- en: misc
  id: totrans-2588
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[dialects]**'
  id: totrans-2589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: sqlite SLDate type will not erroneously render “microseconds” portion of a datetime
    or time object.
  id: totrans-2590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite SLDate类型不会错误地呈现日期时间或时间对象的“微秒”部分。
- en: '**[dialects]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: oracle
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oracle
- en: added disconnect detection support for Oracle
  id: totrans-2593
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Oracle添加了断开检测支持
- en: some cleanup to binary/raw types so that cx_oracle.LOB is detected on an ad-hoc
    basis
  id: totrans-2594
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对二进制/原始类型进行了一些清理，以便在需要时检测cx_oracle.LOB
- en: 'References: [#902](https://www.sqlalchemy.org/trac/ticket/902)'
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#902](https://www.sqlalchemy.org/trac/ticket/902)
- en: '**[dialects]**'
  id: totrans-2596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialects]**'
- en: MSSQL
  id: totrans-2597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL
- en: PyODBC no longer has a global “set nocount on”.
  id: totrans-2598
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyODBC不再具有全局“set nocount on”。
- en: Fix non-identity integer PKs on autoload
  id: totrans-2599
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复autoload上的非标识整数PKs
- en: Better support for convert_unicode
  id: totrans-2600
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地支持convert_unicode
- en: Less strict date conversion for pyodbc/adodbapi
  id: totrans-2601
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于pyodbc/adodbapi的日期转换不再那么严格
- en: Schema-qualified tables / autoload
  id: totrans-2602
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式限定的表/自动加载
- en: 'References: [#824](https://www.sqlalchemy.org/trac/ticket/824), [#839](https://www.sqlalchemy.org/trac/ticket/839),
    [#842](https://www.sqlalchemy.org/trac/ticket/842), [#901](https://www.sqlalchemy.org/trac/ticket/901)'
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#824](https://www.sqlalchemy.org/trac/ticket/824), [#839](https://www.sqlalchemy.org/trac/ticket/839),
    [#842](https://www.sqlalchemy.org/trac/ticket/842), [#901](https://www.sqlalchemy.org/trac/ticket/901)
- en: '**[backend] [firebird]**'
  id: totrans-2604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[backend] [firebird]**'
- en: does properly reflect domains (partially fixing) and PassiveDefaults
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在正确反映域（部分修复）和PassiveDefaults
- en: 'References: [#410](https://www.sqlalchemy.org/trac/ticket/410)'
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#410](https://www.sqlalchemy.org/trac/ticket/410)
- en: '**[3562] [backend] [firebird]**'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[3562] [backend] [firebird]**'
- en: reverted to use default poolclass (was set to SingletonThreadPool in 0.4.0 for
    test purposes)
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复为使用默认的poolclass（在0.4.0中设置为SingletonThreadPool仅用于测试目的）
- en: '**[backend] [firebird]**'
  id: totrans-2609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[backend] [firebird]**'
- en: map func.length() to ‘char_length’ (easily overridable with the UDF ‘strlen’
    on old versions of Firebird)
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将func.length()映射到‘char_length’（在旧版本的Firebird上可以轻松覆盖为UDF‘strlen’）
- en: 0.4.1
  id: totrans-2611
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.1
- en: 'Released: Sun Nov 18 2007'
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sun Nov 18 2007
- en: orm
  id: totrans-2613
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eager loading with LIMIT/OFFSET applied no longer adds the primary table joined
    to a limited subquery of itself; the eager loads now join directly to the subquery
    which also provides the primary table’s columns to the result set. This eliminates
    a JOIN from all eager loads with LIMIT/OFFSET.
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eager loading with LIMIT/OFFSET applied no longer adds the primary table joined
    to a limited subquery of itself; the eager loads now join directly to the subquery
    which also provides the primary table’s columns to the result set. This eliminates
    a JOIN from all eager loads with LIMIT/OFFSET.
- en: 'References: [#843](https://www.sqlalchemy.org/trac/ticket/843)'
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#843](https://www.sqlalchemy.org/trac/ticket/843)
- en: '**[orm]**'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() and session.expire() now support an additional argument “attribute_names”,
    a list of individual attribute keynames to be refreshed or expired, allowing partial
    reloads of attributes on an already-loaded instance.
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.refresh()和session.expire()现在支持额外的参数“attribute_names”，一个包含要刷新或过期的单个属性键名列表，允许对已加载实例进行部分重新加载。
- en: 'References: [#802](https://www.sqlalchemy.org/trac/ticket/802)'
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#802](https://www.sqlalchemy.org/trac/ticket/802)
- en: '**[orm]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added op() operator to instrumented attributes; i.e. User.name.op(‘ilike’)(‘%somename%’)
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加op()操作符到instrumented attributes；例如User.name.op(‘ilike’)(‘%somename%’)
- en: 'References: [#767](https://www.sqlalchemy.org/trac/ticket/767)'
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#767](https://www.sqlalchemy.org/trac/ticket/767)
- en: '**[orm]**'
  id: totrans-2623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped classes may now define __eq__, __hash__, and __nonzero__ methods with
    arbitrary semantics. The orm now handles all mapped instances on an identity-only
    basis. (e.g. ‘is’ vs ‘==’)
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类现在可以定义具有任意语义的__eq__、__hash__和__nonzero__方法。orm现在仅基于标识处理所有映射实例。（例如‘is’ vs
    ‘==’）
- en: 'References: [#676](https://www.sqlalchemy.org/trac/ticket/676)'
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#676](https://www.sqlalchemy.org/trac/ticket/676)
- en: '**[orm]**'
  id: totrans-2626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “properties” accessor on Mapper is removed; it now throws an informative
    exception explaining the usage of mapper.get_property() and mapper.iterate_properties
  id: totrans-2627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapper上的“properties”访问器已被移除；现在会抛出一个信息性异常，解释mapper.get_property()和mapper.iterate_properties的用法
- en: '**[orm]**'
  id: totrans-2628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added having() method to Query, applies HAVING to the generated statement in
    the same way as filter() appends to the WHERE clause.
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加having()方法到Query，将HAVING应用于生成的语句，方式与filter()追加到WHERE子句相同。
- en: '**[orm]**'
  id: totrans-2630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The behavior of query.options() is now fully based on paths, i.e. an option
    such as eagerload_all(‘x.y.z.y.x’) will apply eagerloading to only those paths,
    i.e. and not ‘x.y.x’; eagerload(‘children.children’) applies only to exactly two-levels
    deep, etc.
  id: totrans-2631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，query.options()的行为完全基于路径，即诸如eagerload_all(‘x.y.z.y.x’)这样的选项将仅应用于这些路径，即不包括‘x.y.x’；eagerload(‘children.children’)仅适用于确切的两级深度等。
- en: 'References: [#777](https://www.sqlalchemy.org/trac/ticket/777)'
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#777](https://www.sqlalchemy.org/trac/ticket/777)
- en: '**[orm]**'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: PickleType will compare using == when set up with mutable=False, and not the
    is operator. To use is or any other comparator, send in a custom comparison function
    using PickleType(comparator=my_custom_comparator).
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为mutable=False时，PickleType将使用==进行比较，而不是is操作符。要使用is或任何其他比较器，请使用PickleType(comparator=my_custom_comparator)发送自定义比较函数。
- en: '**[orm]**'
  id: totrans-2635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query doesn’t throw an error if you use distinct() and an order_by() containing
    UnaryExpressions (or other) together
  id: totrans-2636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果同时使用distinct()和包含UnaryExpressions（或其他）的order_by()，查询不会引发错误
- en: 'References: [#848](https://www.sqlalchemy.org/trac/ticket/848)'
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#848](https://www.sqlalchemy.org/trac/ticket/848)
- en: '**[orm]**'
  id: totrans-2638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: order_by() expressions from joined tables are properly added to columns clause
    when using distinct()
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用distinct()时，来自连接表的order_by()表达式会被正确添加到列子句中
- en: 'References: [#786](https://www.sqlalchemy.org/trac/ticket/786)'
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#786](https://www.sqlalchemy.org/trac/ticket/786)
- en: '**[orm]**'
  id: totrans-2641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed error where Query.add_column() would not accept a class-bound attribute
    as an argument; Query also raises an error if an invalid argument was sent to
    add_column() (at instances() time)
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query.add_column()不接受类绑定属性作为参数的错误；Query在add_column()（在instances()时间）发送无效参数时也会引发错误
- en: 'References: [#858](https://www.sqlalchemy.org/trac/ticket/858)'
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#858](https://www.sqlalchemy.org/trac/ticket/858)
- en: '**[orm]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a little more checking for garbage-collection dereferences in InstanceState.__cleanup()
    to reduce “gc ignored” errors on app shutdown
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在InstanceState.__cleanup()中增加了更多垃圾回收解除引用的检查，以减少应用程序关闭时的“gc ignored”错误
- en: '**[orm]**'
  id: totrans-2646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'The session API has been solidified:'
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话API已经稳定：
- en: '**[orm]**'
  id: totrans-2648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s an error to session.save() an object which is already persistent
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对已经持久化的对象进行session.save()会报错
- en: 'References: [#840](https://www.sqlalchemy.org/trac/ticket/840)'
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#840](https://www.sqlalchemy.org/trac/ticket/840)
- en: '**[orm]**'
  id: totrans-2651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s an error to session.delete() an object which is *not* persistent.
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于*非*持久化的对象进行session.delete()会报错。
- en: '**[orm]**'
  id: totrans-2653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.update() and session.delete() raise an error when updating or deleting
    an instance that is already in the session with a different identity.
  id: totrans-2654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当更新或删除已在会话中具有不同标识的实例时，session.update()和session.delete()会引发错误。
- en: '**[orm]**'
  id: totrans-2655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The session checks more carefully when determining “object X already in another
    session”; e.g. if you pickle a series of objects and unpickle (i.e. as in a Pylons
    HTTP session or similar), they can go into a new session without any conflict
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定“对象X已经在另一个会话中”时，会话会更加仔细检查；例如，如果您pickle一系列对象并unpickle（即在Pylons HTTP会话或类似情况下），它们可以进入新会话而不会发生冲突
- en: '**[orm]**'
  id: totrans-2657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() includes a keyword argument “dont_load=True”. setting this flag will
    cause the merge operation to not load any data from the database in response to
    incoming detached objects, and will accept the incoming detached object as though
    it were already present in that session. Use this to merge detached objects from
    external caching systems into the session.
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge()包括一个关键字参数“dont_load=True”。设置此标志将导致合并操作不从数据库中加载任何数据以响应传入的分离对象，并将接受传入的分离对象，就好像它已经存在于该会话中。使用此功能将外部缓存系统中的分离对象合并到会话中。
- en: '**[orm]**'
  id: totrans-2659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Deferred column attributes no longer trigger a load operation when the attribute
    is assigned to. In those cases, the newly assigned value will be present in the
    flushes’ UPDATE statement unconditionally.
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将Deferred列属性分配给时，不再触发加载操作。在这些情况下，新分配的值将无条件地出现在flushes的UPDATE语句中。
- en: '**[orm]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a truncation error when re-assigning a subset of a collection (obj.relation
    = obj.relation[1:])
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新分配集合的子集时修复了截断错误（obj.relation = obj.relation[1:]）
- en: 'References: [#834](https://www.sqlalchemy.org/trac/ticket/834)'
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#834](https://www.sqlalchemy.org/trac/ticket/834)
- en: '**[orm]**'
  id: totrans-2664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: De-cruftified backref configuration code, backrefs which step on existing properties
    now raise an error
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 精简了backref配置代码，覆盖现有属性的backrefs现在会引发错误
- en: 'References: [#832](https://www.sqlalchemy.org/trac/ticket/832)'
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#832](https://www.sqlalchemy.org/trac/ticket/832)
- en: '**[orm]**'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved behavior of add_property() etc., fixed involving synonym/deferred.
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了add_property()等的行为，修复了涉及synonym/deferred的问题。
- en: 'References: [#831](https://www.sqlalchemy.org/trac/ticket/831)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#831](https://www.sqlalchemy.org/trac/ticket/831)
- en: '**[orm]**'
  id: totrans-2670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed clear_mappers() behavior to better clean up after itself.
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了clear_mappers()行为，以更好地清理自身之后。
- en: '**[orm]**'
  id: totrans-2672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fix to “row switch” behavior, i.e. when an INSERT/DELETE is combined into a
    single UPDATE; many-to-many relations on the parent object update properly.
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“行切换”行为，即当INSERT/DELETE合并为单个UPDATE时；父对象上的多对多关系会正确更新。
- en: 'References: [#841](https://www.sqlalchemy.org/trac/ticket/841)'
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#841](https://www.sqlalchemy.org/trac/ticket/841)
- en: '**[orm]**'
  id: totrans-2675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed __hash__ for association proxy- these collections are unhashable, just
    like their mutable Python counterparts.
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理的哈希值，这些集合是不可哈希的，就像它们的可变 Python 对应物一样。
- en: '**[orm]**'
  id: totrans-2677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added proxying of save_or_update, __contains__ and __iter__ methods for scoped
    sessions.
  id: totrans-2678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为作用域会话添加了save_or_update、__contains__和__iter__方法的代理。
- en: '**[orm]**'
  id: totrans-2679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed very hard-to-reproduce issue where by the FROM clause of Query could get
    polluted by certain generative calls
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个非常难以重现的问题，即Query的FROM子句可能会被某些生成调用污染
- en: 'References: [#852](https://www.sqlalchemy.org/trac/ticket/852)'
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#852](https://www.sqlalchemy.org/trac/ticket/852)
- en: sql
  id: totrans-2682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “shortname” keyword parameter on bindparam() has been deprecated.
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()上的“shortname”关键字参数已被弃用。
- en: '**[sql]**'
  id: totrans-2685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added contains operator (generates a “LIKE %<other>%” clause).
  id: totrans-2686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了包含运算符（生成一个“LIKE %<other>%”子句）。
- en: '**[sql]**'
  id: totrans-2687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: anonymous column expressions are automatically labeled. e.g. select([x* 5])
    produces “SELECT x * 5 AS anon_1”. This allows the labelname to be present in
    the cursor.description which can then be appropriately matched to result-column
    processing rules. (we can’t reliably use positional tracking for result-column
    matches since text() expressions may represent multiple columns).
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名列表达式会自动标记。例如，select([x* 5])会产生“SELECT x * 5 AS anon_1”。这允许标签名出现在cursor.description中，然后可以与结果列处理规则适当匹配（我们无法可靠地使用位置跟踪进行结果列匹配，因为text()表达式可能代表多个列）。
- en: '**[sql]**'
  id: totrans-2689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: operator overloading is now controlled by TypeEngine objects - the one built-in
    operator overload so far is String types overloading ‘+’ to be the string concatenation
    operator. User-defined types can also define their own operator overloading by
    overriding the adapt_operator(self, op) method.
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运算符重载现在由TypeEngine对象控制 - 到目前为止内置的运算符重载是String类型重载‘+’成为字符串连接运算符。用户定义的类型也可以通过覆盖adapt_operator(self,
    op)方法来定义自己的运算符重载。
- en: '**[sql]**'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: untyped bind parameters on the right side of a binary expression will be assigned
    the type of the left side of the operation, to better enable the appropriate bind
    parameter processing to take effect
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 二元表达式右侧的无类型绑定参数将被分配为操作左侧的类型，以更好地���用适当的绑定参数处理
- en: 'References: [#819](https://www.sqlalchemy.org/trac/ticket/819)'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#819](https://www.sqlalchemy.org/trac/ticket/819)
- en: '**[sql]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed regular expression step from most statement compilations. Also fixes
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从大多数语句编译中删除了正则表达式步骤。同时修复了
- en: 'References: [#833](https://www.sqlalchemy.org/trac/ticket/833)'
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#833](https://www.sqlalchemy.org/trac/ticket/833)
- en: '**[sql]**'
  id: totrans-2697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed empty (zero column) sqlite inserts, allowing inserts on autoincrementing
    single column tables.
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了空（零列）sqlite插入，允许在自增单列表上插入。
- en: '**[sql]**'
  id: totrans-2699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed expression translation of text() clauses; this repairs various ORM scenarios
    where literal text is used for SQL expressions
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了text()子句的表达式翻译；这修复了各种ORM场景，其中使用文字文本作为SQL表达式
- en: '**[sql]**'
  id: totrans-2701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed ClauseParameters object; compiled.params returns a regular dictionary
    now, as well as result.last_inserted_params() / last_updated_params().
  id: totrans-2702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了ClauseParameters对象；现在compiled.params返回一个普通的字典，以及result.last_inserted_params()
    / last_updated_params()。
- en: '**[sql]**'
  id: totrans-2703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed INSERT statements w.r.t. primary key columns that have SQL-expression
    based default generators on them; SQL expression executes inline as normal but
    will not trigger a “postfetch” condition for the column, for those DB’s who provide
    it via cursor.lastrowid
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于具有基于SQL表达式的默认生成器的主键列的INSERT语句；SQL表达式像往常一样内联执行，但不会触发列的“postfetch”条件，对于那些通过cursor.lastrowid提供它的DB
- en: '**[sql]**'
  id: totrans-2705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func. objects can be pickled/unpickled
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.对象可以被pickle/unpickle
- en: 'References: [#844](https://www.sqlalchemy.org/trac/ticket/844)'
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#844](https://www.sqlalchemy.org/trac/ticket/844)
- en: '**[sql]**'
  id: totrans-2708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: rewrote and simplified the system used to “target” columns across selectable
    expressions. On the SQL side this is represented by the “corresponding_column()”
    method. This method is used heavily by the ORM to “adapt” elements of an expression
    to similar, aliased expressions, as well as to target result set columns originally
    bound to a table or selectable to an aliased, “corresponding” expression. The
    new rewrite features completely consistent and accurate behavior.
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写并简化了用于在可选择表达式之间“定位”列的系统。在SQL方面，这由“corresponding_column()”方法表示。这种方法在ORM中被大量使用，用于将表达式的元素“适应”到类似的，别名的表达式，以及将最初绑定到表或可选择到别名的结果集列的“对应”表达式。新的重写功能具有完全一致和准确的行为。
- en: '**[sql]**'
  id: totrans-2710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added a field (“info”) for storing arbitrary data on schema items
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个字段（“info”）用于在模式项上存储任意数据
- en: 'References: [#573](https://www.sqlalchemy.org/trac/ticket/573)'
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#573](https://www.sqlalchemy.org/trac/ticket/573)
- en: '**[sql]**'
  id: totrans-2713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The “properties” collection on Connections has been renamed “info” to match
    schema’s writable collections. Access is still available via the “properties”
    name until 0.5.
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connections 上的 “properties” 集合已重命名为 “info” 以匹配 schema 的可写集合。直到 0.5 版本，仍然可以通过
    “properties” 名称访问。
- en: '**[sql]**'
  id: totrans-2715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed the close() method on Transaction when using strategy=’threadlocal’
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 strategy=’threadlocal’ 时 Transaction 上的 close() 方法
- en: '**[sql]**'
  id: totrans-2717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to compiled bind parameters to not mistakenly populate None
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复编译绑定参数不会错误地填充 None 的问题
- en: 'References: [#853](https://www.sqlalchemy.org/trac/ticket/853)'
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#853](https://www.sqlalchemy.org/trac/ticket/853)
- en: '**[sql]**'
  id: totrans-2720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: <Engine|Connection>._execute_clauseelement becomes a public method Connectable.execute_clauseelement
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Engine|Connection>._execute_clauseelement 变为公共方法 Connectable.execute_clauseelement
- en: misc
  id: totrans-2722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Added experimental support for MaxDB (versions >= 7.6.03.007 only).
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MaxDB（版本 >= 7.6.03.007）的实验性支持。
- en: '**[dialects]**'
  id: totrans-2725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: oracle will now reflect “DATE” as an OracleDateTime column, not OracleDate
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 Oracle 将“DATE”反映为 OracleDateTime 列，而不是 OracleDate
- en: '**[dialects]**'
  id: totrans-2727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: added awareness of schema name in oracle table_names() function, fixes metadata.reflect(schema=’someschema’)
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 oracle table_names() 函数中添加了对模式名称的意识，修复了 metadata.reflect(schema=’someschema’)
    的问题
- en: 'References: [#847](https://www.sqlalchemy.org/trac/ticket/847)'
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#847](https://www.sqlalchemy.org/trac/ticket/847)
- en: '**[dialects]**'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL anonymous labels for selection of functions made deterministic
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 匿名标签用于选择函数变得确定性
- en: '**[dialects]**'
  id: totrans-2732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: sqlite will reflect “DECIMAL” as a numeric column.
  id: totrans-2733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 将“DECIMAL”反映为数字列。
- en: '**[dialects]**'
  id: totrans-2734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Made access dao detection more reliable
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使访问 dao 检测更可靠
- en: 'References: [#828](https://www.sqlalchemy.org/trac/ticket/828)'
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#828](https://www.sqlalchemy.org/trac/ticket/828)
- en: '**[dialects]**'
  id: totrans-2737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Renamed the Dialect attribute ‘preexecute_sequences’ to ‘preexecute_pk_sequences’.
    An attribute proxy is in place for out-of-tree dialects using the old name.
  id: totrans-2738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 Dialect 属性 ‘preexecute_sequences’ 重命名为 ‘preexecute_pk_sequences’。对于使用旧名称的
    out-of-tree 方言，现在有一个属性代理。
- en: '**[dialects]**'
  id: totrans-2739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Added test coverage for unknown type reflection. Fixed sqlite/mysql handling
    of type reflection for unknown types.
  id: totrans-2740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为未知类型反射添加了测试覆盖。修复了 sqlite/mysql 对未知类型的类型反射处理。
- en: '**[dialects]**'
  id: totrans-2741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Added REAL for mysql dialect (for folks exploiting the REAL_AS_FLOAT sql mode).
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mysql 方言添加了 REAL（用于利用 REAL_AS_FLOAT sql 模式的人）。
- en: '**[dialects]**'
  id: totrans-2743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: mysql Float, MSFloat and MSDouble constructed without arguments now produce
    no-argument DDL, e.g.’FLOAT’.
  id: totrans-2744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql Float、MSFloat 和 MSDouble 现在在没有参数的情况下生成无参数 DDL，例如 ‘FLOAT’。
- en: '**[misc]**'
  id: totrans-2745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项]**'
- en: Removed unused util.hash().
  id: totrans-2746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了未使用的 util.hash()。
- en: orm
  id: totrans-2747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eager loading with LIMIT/OFFSET applied no longer adds the primary table joined
    to a limited subquery of itself; the eager loads now join directly to the subquery
    which also provides the primary table’s columns to the result set. This eliminates
    a JOIN from all eager loads with LIMIT/OFFSET.
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用了 LIMIT/OFFSET 的急加载不再将主表连接到自身的限制子查询；急加载现在直接连接到提供主表列给结果集的子查询。这消除了所有带有 LIMIT/OFFSET
    的急加载的 JOIN。
- en: 'References: [#843](https://www.sqlalchemy.org/trac/ticket/843)'
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#843](https://www.sqlalchemy.org/trac/ticket/843)
- en: '**[orm]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() and session.expire() now support an additional argument “attribute_names”,
    a list of individual attribute keynames to be refreshed or expired, allowing partial
    reloads of attributes on an already-loaded instance.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.refresh() 和 session.expire() 现在支持额外的参数“attribute_names”，一个要刷新或过期的单个属性键名列表，允许对已加载实例的属性进行部分重新加载。
- en: 'References: [#802](https://www.sqlalchemy.org/trac/ticket/802)'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#802](https://www.sqlalchemy.org/trac/ticket/802)
- en: '**[orm]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added op() operator to instrumented attributes; i.e. User.name.op(‘ilike’)(‘%somename%’)
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为被检测属性添加了 op() 操作符；即 User.name.op(‘ilike’)(‘%somename%’)
- en: 'References: [#767](https://www.sqlalchemy.org/trac/ticket/767)'
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#767](https://www.sqlalchemy.org/trac/ticket/767)
- en: '**[orm]**'
  id: totrans-2757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped classes may now define __eq__, __hash__, and __nonzero__ methods with
    arbitrary semantics. The orm now handles all mapped instances on an identity-only
    basis. (e.g. ‘is’ vs ‘==’)
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射类现在可以定义具有任意语义的 __eq__、__hash__ 和 __nonzero__ 方法。orm 现在仅基于标识处理所有映射实例。（例如 ‘is’
    vs ‘==’）
- en: 'References: [#676](https://www.sqlalchemy.org/trac/ticket/676)'
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#676](https://www.sqlalchemy.org/trac/ticket/676)
- en: '**[orm]**'
  id: totrans-2760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “properties” accessor on Mapper is removed; it now throws an informative
    exception explaining the usage of mapper.get_property() and mapper.iterate_properties
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapper 上的 “properties” 访问器已移除；现在会抛出一个信息性异常，解释 mapper.get_property() 和 mapper.iterate_properties
    的用法
- en: '**[orm]**'
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added having() method to Query, applies HAVING to the generated statement in
    the same way as filter() appends to the WHERE clause.
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query 添加了 having() 方法，将 HAVING 应用于生成的语句，方式与 filter() 将条件追加到 WHERE 子句中的方式相同。
- en: '**[orm]**'
  id: totrans-2764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The behavior of query.options() is now fully based on paths, i.e. an option
    such as eagerload_all(‘x.y.z.y.x’) will apply eagerloading to only those paths,
    i.e. and not ‘x.y.x’; eagerload(‘children.children’) applies only to exactly two-levels
    deep, etc.
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 query.options() 的行为完全基于路径，即诸如 eagerload_all(‘x.y.z.y.x’) 这样的选项将仅应用于这些路径，并且不会应用于
    ‘x.y.x’；eagerload(‘children.children’) 仅应用于恰好两层深度等。
- en: 'References: [#777](https://www.sqlalchemy.org/trac/ticket/777)'
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#777](https://www.sqlalchemy.org/trac/ticket/777)
- en: '**[orm]**'
  id: totrans-2767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: PickleType will compare using == when set up with mutable=False, and not the
    is operator. To use is or any other comparator, send in a custom comparison function
    using PickleType(comparator=my_custom_comparator).
  id: totrans-2768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置 PickleType 的 mutable=False，则 PickleType 将使用 == 进行比较，而不是 is 操作符。要使用 is 或其他比较器，请使用
    PickleType(comparator=my_custom_comparator) 发送自定义比较函数。
- en: '**[orm]**'
  id: totrans-2769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query doesn’t throw an error if you use distinct() and an order_by() containing
    UnaryExpressions (or other) together
  id: totrans-2770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 query 中同时使用 distinct() 和包含 UnaryExpressions（或其他）的 order_by()，则不会抛出错误。
- en: 'References: [#848](https://www.sqlalchemy.org/trac/ticket/848)'
  id: totrans-2771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#848](https://www.sqlalchemy.org/trac/ticket/848)
- en: '**[orm]**'
  id: totrans-2772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: order_by() expressions from joined tables are properly added to columns clause
    when using distinct()
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 distinct() 时，来自连接表的 order_by() 表达式将正确添加到列子句中。
- en: 'References: [#786](https://www.sqlalchemy.org/trac/ticket/786)'
  id: totrans-2774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#786](https://www.sqlalchemy.org/trac/ticket/786)
- en: '**[orm]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed error where Query.add_column() would not accept a class-bound attribute
    as an argument; Query also raises an error if an invalid argument was sent to
    add_column() (at instances() time)
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query.add_column() 不接受类绑定属性作为参数的错误；Query 还会在传递无效参数给 add_column()（在 instances()
    时间）时报错。
- en: 'References: [#858](https://www.sqlalchemy.org/trac/ticket/858)'
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#858](https://www.sqlalchemy.org/trac/ticket/858)
- en: '**[orm]**'
  id: totrans-2778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a little more checking for garbage-collection dereferences in InstanceState.__cleanup()
    to reduce “gc ignored” errors on app shutdown
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 InstanceState.__cleanup() 中增加了更多对垃圾收集引用的检查，以减少应用程序关闭时出现的“gc ignored”错误。
- en: '**[orm]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'The session API has been solidified:'
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话 API 已经稳定：
- en: '**[orm]**'
  id: totrans-2782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s an error to session.save() an object which is already persistent
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试对已经持久化的对象进行 session.save() 时会报错。
- en: 'References: [#840](https://www.sqlalchemy.org/trac/ticket/840)'
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#840](https://www.sqlalchemy.org/trac/ticket/840)
- en: '**[orm]**'
  id: totrans-2785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s an error to session.delete() an object which is *not* persistent.
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试对 *未* 持久化的对象进行 session.delete() 时会报错。
- en: '**[orm]**'
  id: totrans-2787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.update() and session.delete() raise an error when updating or deleting
    an instance that is already in the session with a different identity.
  id: totrans-2788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试对已经在会话中以不同标识符存在的实例进行更新或删除时，session.update() 和 session.delete() 会报错。
- en: '**[orm]**'
  id: totrans-2789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The session checks more carefully when determining “object X already in another
    session”; e.g. if you pickle a series of objects and unpickle (i.e. as in a Pylons
    HTTP session or similar), they can go into a new session without any conflict
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定“对象 X 已经在另一个会话中”时，会话现在会更仔细地进行检查；例如，如果您将一系列对象进行 pickle，并在稍后反 pickle（即在 Pylons
    HTTP 会话或类似情况下），它们可以在没有任何冲突的情况下进入新会话。
- en: '**[orm]**'
  id: totrans-2791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: merge() includes a keyword argument “dont_load=True”. setting this flag will
    cause the merge operation to not load any data from the database in response to
    incoming detached objects, and will accept the incoming detached object as though
    it were already present in that session. Use this to merge detached objects from
    external caching systems into the session.
  id: totrans-2792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: merge() 包含一个名为 “dont_load=True” 的关键字参数。设置此标志将导致合并操作不会在响应传入的分离对象时从数据库中加载任何数据，并且将接受传入的分离对象，就好像它已经存在于该会话中。可以使用此功能将外部缓存系统中的分离对象合并到会话中。
- en: '**[orm]**'
  id: totrans-2793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Deferred column attributes no longer trigger a load operation when the attribute
    is assigned to. In those cases, the newly assigned value will be present in the
    flushes’ UPDATE statement unconditionally.
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当分配属性时，延迟列属性不再触发加载操作。在这些情况下，新分配的值将无条件地出现在刷新的 UPDATE 语句中。
- en: '**[orm]**'
  id: totrans-2795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a truncation error when re-assigning a subset of a collection (obj.relation
    = obj.relation[1:])
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了重新分配集合子集时出现截断错误的问题（obj.relation = obj.relation[1:]）。
- en: 'References: [#834](https://www.sqlalchemy.org/trac/ticket/834)'
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#834](https://www.sqlalchemy.org/trac/ticket/834)
- en: '**[orm]**'
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: De-cruftified backref configuration code, backrefs which step on existing properties
    now raise an error
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 精简了backref配置代码，覆盖现有属性的backrefs现在会引发错误
- en: 'References: [#832](https://www.sqlalchemy.org/trac/ticket/832)'
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#832](https://www.sqlalchemy.org/trac/ticket/832)
- en: '**[orm]**'
  id: totrans-2801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved behavior of add_property() etc., fixed involving synonym/deferred.
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了add_property()等的行为，修复了涉及synonym/deferred的问题。
- en: 'References: [#831](https://www.sqlalchemy.org/trac/ticket/831)'
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#831](https://www.sqlalchemy.org/trac/ticket/831)
- en: '**[orm]**'
  id: totrans-2804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed clear_mappers() behavior to better clean up after itself.
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了clear_mappers()行为，以更好地清理自身之后。
- en: '**[orm]**'
  id: totrans-2806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fix to “row switch” behavior, i.e. when an INSERT/DELETE is combined into a
    single UPDATE; many-to-many relations on the parent object update properly.
  id: totrans-2807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“行切换”行为，即当INSERT/DELETE合并为单个UPDATE时；父对象上的多对多关系正确更新。
- en: 'References: [#841](https://www.sqlalchemy.org/trac/ticket/841)'
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#841](https://www.sqlalchemy.org/trac/ticket/841)
- en: '**[orm]**'
  id: totrans-2809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed __hash__ for association proxy- these collections are unhashable, just
    like their mutable Python counterparts.
  id: totrans-2810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理的__hash__ - 这些集合是不可哈希的，就像它们的可变Python对应物一样。
- en: '**[orm]**'
  id: totrans-2811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added proxying of save_or_update, __contains__ and __iter__ methods for scoped
    sessions.
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为作用域会话添加了save_or_update、__contains__和__iter__方法的代理。
- en: '**[orm]**'
  id: totrans-2813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed very hard-to-reproduce issue where by the FROM clause of Query could get
    polluted by certain generative calls
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个非常难以复现的问题，即Query的FROM子句可能会被某些生成调用污染
- en: 'References: [#852](https://www.sqlalchemy.org/trac/ticket/852)'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#852](https://www.sqlalchemy.org/trac/ticket/852)
- en: sql
  id: totrans-2816
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “shortname” keyword parameter on bindparam() has been deprecated.
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()上的“shortname”关键字参数已被弃用。
- en: '**[sql]**'
  id: totrans-2819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added contains operator (generates a “LIKE %<other>%” clause).
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了contains运算符（生成一个“LIKE %<other>%”子句）。
- en: '**[sql]**'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: anonymous column expressions are automatically labeled. e.g. select([x* 5])
    produces “SELECT x * 5 AS anon_1”. This allows the labelname to be present in
    the cursor.description which can then be appropriately matched to result-column
    processing rules. (we can’t reliably use positional tracking for result-column
    matches since text() expressions may represent multiple columns).
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名列表达式会自动标记。例如，select([x* 5])会产生“SELECT x * 5 AS anon_1”。这允许标签名存在于cursor.description中，然后可以与结果列处理规则适当匹配。（我们无法可靠地使用位置跟踪进行结果列匹配，因为text()表达式可能代表多个列）。
- en: '**[sql]**'
  id: totrans-2823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: operator overloading is now controlled by TypeEngine objects - the one built-in
    operator overload so far is String types overloading ‘+’ to be the string concatenation
    operator. User-defined types can also define their own operator overloading by
    overriding the adapt_operator(self, op) method.
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运算符重载现在由TypeEngine对象控制 - 到目前为止内置的运算符重载是String类型重载‘+’成为字符串连接运算符。用户定义的类型也可以通过覆盖adapt_operator(self,
    op)方法来定义自己的运算符重载。
- en: '**[sql]**'
  id: totrans-2825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: untyped bind parameters on the right side of a binary expression will be assigned
    the type of the left side of the operation, to better enable the appropriate bind
    parameter processing to take effect
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 二元表达式右侧的无类型绑定参数将被分配为操作左侧的类型，以更好地启用适当的绑定参数处理
- en: 'References: [#819](https://www.sqlalchemy.org/trac/ticket/819)'
  id: totrans-2827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#819](https://www.sqlalchemy.org/trac/ticket/819)
- en: '**[sql]**'
  id: totrans-2828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed regular expression step from most statement compilations. Also fixes
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从大多数语句编译中移除了正则表达式步骤。还修复了
- en: 'References: [#833](https://www.sqlalchemy.org/trac/ticket/833)'
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#833](https://www.sqlalchemy.org/trac/ticket/833)
- en: '**[sql]**'
  id: totrans-2831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed empty (zero column) sqlite inserts, allowing inserts on autoincrementing
    single column tables.
  id: totrans-2832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了空（零列）sqlite插入，允许在自动递增单列表上插入。
- en: '**[sql]**'
  id: totrans-2833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed expression translation of text() clauses; this repairs various ORM scenarios
    where literal text is used for SQL expressions
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了text()子句的表达式转换；这修复了各种ORM场景中使用文字文本作为SQL表达式的情况
- en: '**[sql]**'
  id: totrans-2835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed ClauseParameters object; compiled.params returns a regular dictionary
    now, as well as result.last_inserted_params() / last_updated_params().
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了ClauseParameters对象；compiled.params现在返回一个常规字典，以及result.last_inserted_params()
    / last_updated_params()。
- en: '**[sql]**'
  id: totrans-2837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed INSERT statements w.r.t. primary key columns that have SQL-expression
    based default generators on them; SQL expression executes inline as normal but
    will not trigger a “postfetch” condition for the column, for those DB’s who provide
    it via cursor.lastrowid
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于具有基于SQL表达式的默认生成器的主键列的INSERT语句；SQL表达式像往常一样内联执行，但不会为该列触发“postfetch”条件，对于那些通过cursor.lastrowid提供它的DB
- en: '**[sql]**'
  id: totrans-2839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func. objects can be pickled/unpickled
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func. 对象可以被 pickled/unpickled
- en: 'References: [#844](https://www.sqlalchemy.org/trac/ticket/844)'
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#844](https://www.sqlalchemy.org/trac/ticket/844)
- en: '**[sql]**'
  id: totrans-2842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: rewrote and simplified the system used to “target” columns across selectable
    expressions. On the SQL side this is represented by the “corresponding_column()”
    method. This method is used heavily by the ORM to “adapt” elements of an expression
    to similar, aliased expressions, as well as to target result set columns originally
    bound to a table or selectable to an aliased, “corresponding” expression. The
    new rewrite features completely consistent and accurate behavior.
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写并简化了用于在可选择表达式之间“定位”列的系统。在 SQL 方面，这由 “corresponding_column()” 方法表示。此方法由 ORM
    大量使用，以将表达式的元素“适应”为类似的、别名的表达式，以及将原始绑定到表或可选择到别名的结果集列的表达式“定位”为相应的表达式。新的重写具有完全一致和准确的行为。
- en: '**[sql]**'
  id: totrans-2844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Added a field (“info”) for storing arbitrary data on schema items
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个字段（“info”）用于在模式项上存储任意数据
- en: 'References: [#573](https://www.sqlalchemy.org/trac/ticket/573)'
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#573](https://www.sqlalchemy.org/trac/ticket/573)
- en: '**[sql]**'
  id: totrans-2847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: The “properties” collection on Connections has been renamed “info” to match
    schema’s writable collections. Access is still available via the “properties”
    name until 0.5.
  id: totrans-2848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接上的“properties”集合已重命名为“info”，以匹配模式的可写集合。在 0.5 版本之前，仍可通过“properties”名称访问。
- en: '**[sql]**'
  id: totrans-2849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: fixed the close() method on Transaction when using strategy=’threadlocal’
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 strategy='threadlocal' 时 Transaction 上的 close() 方法
- en: '**[sql]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: fix to compiled bind parameters to not mistakenly populate None
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了编译绑定参数不会错误地填充 None 的问题
- en: 'References: [#853](https://www.sqlalchemy.org/trac/ticket/853)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#853](https://www.sqlalchemy.org/trac/ticket/853)
- en: '**[sql]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: <Engine|Connection>._execute_clauseelement becomes a public method Connectable.execute_clauseelement
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Engine|Connection>._execute_clauseelement 变为公共方法 Connectable.execute_clauseelement
- en: misc
  id: totrans-2856
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialects]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Added experimental support for MaxDB (versions >= 7.6.03.007 only).
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MaxDB（版本 >= 7.6.03.007）的实验性支持。
- en: '**[dialects]**'
  id: totrans-2859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: oracle will now reflect “DATE” as an OracleDateTime column, not OracleDate
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: oracle 现在将“DATE”反映为 OracleDateTime 列，而不是 OracleDate
- en: '**[dialects]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: added awareness of schema name in oracle table_names() function, fixes metadata.reflect(schema=’someschema’)
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 oracle table_names() 函数中增加了对模式名称的意识，修复了 metadata.reflect(schema='someschema')
- en: 'References: [#847](https://www.sqlalchemy.org/trac/ticket/847)'
  id: totrans-2863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#847](https://www.sqlalchemy.org/trac/ticket/847)
- en: '**[dialects]**'
  id: totrans-2864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: MSSQL anonymous labels for selection of functions made deterministic
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL 对函数选择的匿名标签使确定性
- en: '**[dialects]**'
  id: totrans-2866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: sqlite will reflect “DECIMAL” as a numeric column.
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 将“DECIMAL”反映为数字列。
- en: '**[dialects]**'
  id: totrans-2868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Made access dao detection more reliable
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使访问 dao 检测更可靠
- en: 'References: [#828](https://www.sqlalchemy.org/trac/ticket/828)'
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#828](https://www.sqlalchemy.org/trac/ticket/828)
- en: '**[dialects]**'
  id: totrans-2871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Renamed the Dialect attribute ‘preexecute_sequences’ to ‘preexecute_pk_sequences’.
    An attribute proxy is in place for out-of-tree dialects using the old name.
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 Dialect 属性 ‘preexecute_sequences’ 重命名为 ‘preexecute_pk_sequences’。针对使用旧名称的
    out-of-tree 方言，已放置了属性代理。
- en: '**[dialects]**'
  id: totrans-2873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Added test coverage for unknown type reflection. Fixed sqlite/mysql handling
    of type reflection for unknown types.
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为未知类型反射添加了测试覆盖。修复了 sqlite/mysql 处理未知类型反射的问题。
- en: '**[dialects]**'
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: Added REAL for mysql dialect (for folks exploiting the REAL_AS_FLOAT sql mode).
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mysql 方言添加了 REAL（供利用 REAL_AS_FLOAT sql 模式的人使用）。
- en: '**[dialects]**'
  id: totrans-2877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[方言]**'
- en: mysql Float, MSFloat and MSDouble constructed without arguments now produce
    no-argument DDL, e.g.’FLOAT’.
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql Float、MSFloat 和 MSDouble 现在构造时不带参数将产生无参数的 DDL，例如 'FLOAT'。
- en: '**[misc]**'
  id: totrans-2879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项]**'
- en: Removed unused util.hash().
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了未使用的 util.hash()。
- en: 0.4.0
  id: totrans-2881
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0
- en: 'Released: Wed Oct 17 2007'
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007 年 10 月 17 日
- en: '**[no_tags]**'
  id: totrans-2883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: (see 0.4.0beta1 for the start of major changes against 0.3, as well as [https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04](https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04)
    )
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （请参阅 0.4.0beta1，了解对 0.3 的主要更改的开始，以及 [https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04](https://www.sqlalchemy.org/trac/wiki/WhatsNewIn04)）
- en: '**[no_tags]**'
  id: totrans-2885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added initial Sybase support (mxODBC so far)
  id: totrans-2886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了初始的 Sybase 支持（目前仅支持 mxODBC）
- en: 'References: [#785](https://www.sqlalchemy.org/trac/ticket/785)'
  id: totrans-2887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#785](https://www.sqlalchemy.org/trac/ticket/785)
- en: '**[no_tags]**'
  id: totrans-2888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added partial index support for PostgreSQL. Use the postgres_where keyword on
    the Index.
  id: totrans-2889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 添加了部分索引支持。在索引上使用 postgres_where 关键字。
- en: '**[no_tags]**'
  id: totrans-2890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: string-based query param parsing/config file parser understands wider range
    of string values for booleans
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于字符串的查询参数解析/配置文件解析器理解更广泛范围的字符串值作为布尔值
- en: 'References: [#817](https://www.sqlalchemy.org/trac/ticket/817)'
  id: totrans-2892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#817](https://www.sqlalchemy.org/trac/ticket/817)
- en: '**[no_tags]**'
  id: totrans-2893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: backref remove object operation doesn’t fail if the other-side collection doesn’t
    contain the item, supports noload collections
  id: totrans-2894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果另一侧集合不包含项目，则backref删除对象操作不会失败，支持noload集合
- en: 'References: [#813](https://www.sqlalchemy.org/trac/ticket/813)'
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#813](https://www.sqlalchemy.org/trac/ticket/813)
- en: '**[no_tags]**'
  id: totrans-2896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: removed __len__ from “dynamic” collection as it would require issuing a SQL
    “count()” operation, thus forcing all list evaluations to issue redundant SQL
  id: totrans-2897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从“动态”集合中删除了__len__，因为这将需要发出SQL“count()”操作，从而迫使所有列表评估发出冗余的SQL。
- en: 'References: [#818](https://www.sqlalchemy.org/trac/ticket/818)'
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#818](https://www.sqlalchemy.org/trac/ticket/818)
- en: '**[no_tags]**'
  id: totrans-2899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: inline optimizations added to locate_dirty() which can greatly speed up repeated
    calls to flush(), as occurs with autoflush=True
  id: totrans-2900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了内联优化以定位locate_dirty()，这可以大大加快对flush()的重复调用，如autoflush=True时发生的情况。
- en: 'References: [#816](https://www.sqlalchemy.org/trac/ticket/816)'
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#816](https://www.sqlalchemy.org/trac/ticket/816)
- en: '**[no_tags]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The IdentifierPreprarer’s _requires_quotes test is now regex based. Any out-of-tree
    dialects that provide custom sets of legal_characters or illegal_initial_characters
    will need to move to regexes or override _requires_quotes.
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IdentifierPreprarer的_requires_quotes测试现在基于正则表达式。任何提供自定义合法字符集或非法初始字符集的树外方言都需要转移到正则表达式或覆盖_requires_quotes。
- en: '**[no_tags]**'
  id: totrans-2904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'Firebird has supports_sane_rowcount and supports_sane_multi_rowcount set to
    False due to ticket #370 (right way).'
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird的supports_sane_rowcount和supports_sane_multi_rowcount设置为False，因为票号#370（正确方式）。
- en: '**[no_tags]**'
  id: totrans-2906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'Improvements and fixes on Firebird reflection:'
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Firebird反射上的改进和修复：
- en: FBDialect now mimics OracleDialect, regarding case-sensitivity of TABLE and
    COLUMN names (see ‘case_sensitive remotion’ topic on this current file).
  id: totrans-2908
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FBDialect现在模仿OracleDialect，关于TABLE和COLUMN名称的大小写敏感性（请参见本文件中的“case_sensitive remotion”主题）。
- en: FBDialect.table_names() doesn’t bring system tables (ticket:796).
  id: totrans-2909
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FBDialect.table_names()不会带来系统表（票号：796）。
- en: FB now reflects Column’s nullable property correctly.
  id: totrans-2910
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FB现在正确反映了Column的nullable属性。
- en: '**[no_tags]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed SQL compiler’s awareness of top-level column labels as used in result-set
    processing; nested selects which contain the same column names don’t affect the
    result or conflict with result-column metadata.
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL编译器对结果集处理中使用的顶级列标签的意识；包含相同列名的嵌套选择不会影响结果或与结果列元数据冲突。
- en: '**[no_tags]**'
  id: totrans-2913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: query.get() and related functions (like many-to-one lazyloading) use compile-time-aliased
    bind parameter names, to prevent name conflicts with bind parameters that already
    exist in the mapped selectable.
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.get()和相关函数（如一对多的延迟加载）使用编译时别名绑定参数名称，以防止与已存在于映射可选择项中的绑定参数发生名称冲突。
- en: '**[no_tags]**'
  id: totrans-2915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed three- and multi-level select and deferred inheritance loading (i.e. abc
    inheritance with no select_table).
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了三级和多级选择以及延迟继承加载（即没有select_table的abc继承）。
- en: 'References: [#795](https://www.sqlalchemy.org/trac/ticket/795)'
  id: totrans-2917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#795](https://www.sqlalchemy.org/trac/ticket/795)
- en: '**[no_tags]**'
  id: totrans-2918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Ident passed to id_chooser in shard.py always a list.
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给shard.py中的id_chooser的标识符始终是一个列表。
- en: '**[no_tags]**'
  id: totrans-2920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The no-arg ResultProxy._row_processor() is now the class attribute _process_row.
  id: totrans-2921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无参数ResultProxy._row_processor()现在是类属性_process_row。
- en: '**[no_tags]**'
  id: totrans-2922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added support for returning values from inserts and updates for PostgreSQL 8.2+.
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对从PostgreSQL 8.2+插入和更新返回值的支持。
- en: 'References: [#797](https://www.sqlalchemy.org/trac/ticket/797)'
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#797](https://www.sqlalchemy.org/trac/ticket/797)
- en: '**[no_tags]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: PG reflection, upon seeing the default schema name being used explicitly as
    the “schema” argument in a Table, will assume that this is the user’s desired
    convention, and will explicitly set the “schema” argument in foreign-key-related
    reflected tables, thus making them match only with Table constructors that also
    use the explicit “schema” argument (even though its the default schema). In other
    words, SA assumes the user is being consistent in this usage.
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PG反射，在看到默认模式名称被明确用作表中的“模式”参数时，将假定这是用户期望的约定，并将在外键相关的反射表中明确设置“模式”参数，从而使它们仅与也使用显式“模式”参数的Table构造函数匹配（即使其为默认模式）。换句话说，SA假定用户在此使用中是一致的。
- en: '**[no_tags]**'
  id: totrans-2927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixed sqlite reflection of BOOL/BOOLEAN
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了BOOL/BOOLEAN的sqlite反射
- en: 'References: [#808](https://www.sqlalchemy.org/trac/ticket/808)'
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#808](https://www.sqlalchemy.org/trac/ticket/808)
- en: '**[no_tags]**'
  id: totrans-2930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added support for UPDATE with LIMIT on mysql.
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mysql 上添加了对带有 LIMIT 的 UPDATE 的支持。
- en: '**[no_tags]**'
  id: totrans-2932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: null foreign key on a m2o doesn’t trigger a lazyload
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: m2o 上的空外键不会触发延迟加载
- en: 'References: [#803](https://www.sqlalchemy.org/trac/ticket/803)'
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#803](https://www.sqlalchemy.org/trac/ticket/803)
- en: '**[no_tags]**'
  id: totrans-2935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: oracle does not implicitly convert to unicode for non-typed result sets (i.e.
    when no TypeEngine/String/Unicode type is even being used; previously it was detecting
    DBAPI types and converting regardless). should fix
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 不会隐式转换为 unicode 以用于非类型化结果集（即当没有使用 TypeEngine/String/Unicode 类型时；以前它会检测
    DBAPI 类型并进行转换）。应该修复
- en: 'References: [#800](https://www.sqlalchemy.org/trac/ticket/800)'
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#800](https://www.sqlalchemy.org/trac/ticket/800)
- en: '**[no_tags]**'
  id: totrans-2938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fix to anonymous label generation of long table/column names
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对长表/列名称的匿名标签生成
- en: 'References: [#806](https://www.sqlalchemy.org/trac/ticket/806)'
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#806](https://www.sqlalchemy.org/trac/ticket/806)
- en: '**[no_tags]**'
  id: totrans-2941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Firebird dialect now uses SingletonThreadPool as poolclass.
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 方言现在使用 SingletonThreadPool 作为池类。
- en: '**[no_tags]**'
  id: totrans-2943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Firebird now uses dialect.preparer to format sequences names
  id: totrans-2944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 现在使用 dialect.preparer 格式化序列名称
- en: '**[no_tags]**'
  id: totrans-2945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed breakage with postgres and multiple two-phase transactions. Two-phase
    commits and rollbacks didn’t automatically end up with a new transaction as the
    usual dbapi commits/rollbacks do.
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 postgres 和多个两阶段事务之间的故障。两阶段提交和回滚不会像通常的 dbapi 提交/回滚一样自动结束一个新事务。
- en: 'References: [#810](https://www.sqlalchemy.org/trac/ticket/810)'
  id: totrans-2947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#810](https://www.sqlalchemy.org/trac/ticket/810)
- en: '**[no_tags]**'
  id: totrans-2948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added an option to the _ScopedExt mapper extension to not automatically save
    new objects to session on object initialization.
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 _ScopedExt 映射器扩展添加了一个选项，以便在对象初始化时不自动将新对象保存到会话中。
- en: '**[no_tags]**'
  id: totrans-2950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixed Oracle non-ansi join syntax
  id: totrans-2951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 非 ANSI 连接语法
- en: '**[no_tags]**'
  id: totrans-2952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: PickleType and Interval types (on db not supporting it natively) are now slightly
    faster.
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType 和 Interval 类型（在不原生支持它的数据库上）现在稍微更快。
- en: '**[no_tags]**'
  id: totrans-2954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added Float and Time types to Firebird (FBFloat and FBTime). Fixed BLOB SUB_TYPE
    for TEXT and Binary types.
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Firebird 中添加了 Float 和 Time 类型（FBFloat 和 FBTime）。修复了 TEXT 和 Binary 类型的 BLOB
    SUB_TYPE。
- en: '**[no_tags]**'
  id: totrans-2956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Changed the API for the in_ operator. in_() now accepts a single argument that
    is a sequence of values or a selectable. The old API of passing in values as varargs
    still works but is deprecated.
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 in_ 运算符的 API。现在 in_() 接受一个参数，该参数是一个值序列或可选择的。传递值作为可变参数的旧 API 仍然有效，但已被弃用。
- en: 0.4.0beta6
  id: totrans-2958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta6
- en: 'Released: Thu Sep 27 2007'
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年9月27日星期四
- en: '**[no_tags]**'
  id: totrans-2960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The Session identity map is now *weak referencing* by default, use weak_identity_map=False
    to use a regular dict. The weak dict we are using is customized to detect instances
    which are “dirty” and maintain a temporary strong reference to those instances
    until changes are flushed.
  id: totrans-2961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话标识映射现在默认为*弱引用*，使用 weak_identity_map=False 来使用常规字典。我们正在使用的弱字典被定制为检测“脏”实例，并保持对这些实例的临时强引用，直到更改被刷新。
- en: '**[no_tags]**'
  id: totrans-2962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Mapper compilation has been reorganized such that most compilation occurs upon
    mapper construction. This allows us to have fewer calls to mapper.compile() and
    also to allow class-based properties to force a compilation (i.e. User.addresses
    == 7 will compile all mappers; this is). The only caveat here is that an inheriting
    mapper now looks for its inherited mapper upon construction; so mappers within
    inheritance relationships need to be constructed in inheritance order (which should
    be the normal case anyway).
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mapper 编译已重新组织，大部分编译发生在映射器构造时。这使我们可以减少对 mapper.compile() 的调用，并且还允许基于类的属性强制进行编译（即
    User.addresses == 7 将编译所有映射器；这是）。唯一的注意事项是，现在继承映射器在构造时会查找其继承的映射器；因此，继承关系中的映射器需要按照继承顺序进行构造（这应该是正常情况）。
- en: 'References: [#758](https://www.sqlalchemy.org/trac/ticket/758)'
  id: totrans-2964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#758](https://www.sqlalchemy.org/trac/ticket/758)
- en: '**[no_tags]**'
  id: totrans-2965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: added “FETCH” to the keywords detected by Postgres to indicate a result-row
    holding statement (i.e. in addition to “SELECT”).
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Postgres 中检测到的关键字中添加了“FETCH”，以指示一个包含结果行的语句（即除了“SELECT”之外）。
- en: '**[no_tags]**'
  id: totrans-2967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added full list of SQLite reserved keywords so that they get escaped properly.
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 SQLite 保留关键字的完整列表，以便正确转义它们。
- en: '**[no_tags]**'
  id: totrans-2969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Tightened up the relationship between the Query’s generation of “eager load”
    aliases, and Query.instances() which actually grabs the eagerly loaded rows. If
    the aliases were not specifically generated for that statement by EagerLoader,
    the EagerLoader will not take effect when the rows are fetched. This prevents
    columns from being grabbed accidentally as being part of an eager load when they
    were not meant for such, which can happen with textual SQL as well as some inheritance
    situations. It’s particularly important since the “anonymous aliasing” of columns
    uses simple integer counts now to generate labels.
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了Query生成“eager load”别名与Query.instances()之间的关系，Query.instances()实际上获取了被急加载的行。如果别名不是由EagerLoader专门为该语句生成的，则在获取行时EagerLoader将不起作用。这可以防止列被意外地抓取为急加载的一部分，当它们不是为此目的而设计时，这可能会发生在文本SQL以及一些继承情况下。这一点尤为重要，因为“匿名别名”现在使用简单的整数计数来生成标签。
- en: '**[no_tags]**'
  id: totrans-2971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Removed “parameters” argument from clauseelement.compile(), replaced with “column_keys”.
    The parameters sent to execute() only interact with the insert/update statement
    compilation process in terms of the column names present but not the values for
    those columns. Produces more consistent execute/executemany behavior, simplifies
    things a bit internally.
  id: totrans-2972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从clauseelement.compile()中删除了“parameters”参数，替换为“column_keys”。传递给execute()的参数仅与插入/更新语句的编译过程中存在的列名交互，而不涉及这些列的值。这样可以产生更一致的execute/executemany行为，内部简化了一些事情。
- en: '**[no_tags]**'
  id: totrans-2973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added ‘comparator’ keyword argument to PickleType. By default, “mutable” PickleType
    does a “deep compare” of objects using their dumps() representation. But this
    doesn’t work for dictionaries. Pickled objects which provide an adequate __eq__()
    implementation can be set up with “PickleType(comparator=operator.eq)”
  id: totrans-2974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PickleType中添加了‘comparator’关键字参数。默认情况下，“mutable” PickleType使用它们的dumps()表示进行对象的“深度比较”。但这对于字典不起作用。提供适当__eq__()实现的Pickled对象可以设置为“PickleType(comparator=operator.eq)”
- en: 'References: [#560](https://www.sqlalchemy.org/trac/ticket/560)'
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#560](https://www.sqlalchemy.org/trac/ticket/560)
- en: '**[no_tags]**'
  id: totrans-2976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added session.is_modified(obj) method; performs the same “history” comparison
    operation as occurs within a flush operation; setting include_collections=False
    gives the same result as is used when the flush determines whether or not to issue
    an UPDATE for the instance’s row.
  id: totrans-2977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了session.is_modified(obj)方法；执行与flush操作中发生的“历史”比较操作相同；设置include_collections=False会得到与flush确定是否为实例的行发出UPDATE相同的结果。
- en: '**[no_tags]**'
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added “schema” argument to Sequence; use this with Postgres /Oracle when the
    sequence is located in an alternate schema. Implements part of, should fix.
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Sequence中添加了“schema”参数；在Postgres/Oracle中，当序列位于替代模式中时，请使用此参数。实现部分，应该修复。
- en: 'References: [#584](https://www.sqlalchemy.org/trac/ticket/584), [#761](https://www.sqlalchemy.org/trac/ticket/761)'
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#584](https://www.sqlalchemy.org/trac/ticket/584), [#761](https://www.sqlalchemy.org/trac/ticket/761)
- en: '**[no_tags]**'
  id: totrans-2981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed reflection of the empty string for mysql enums.
  id: totrans-2982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mysql枚举的空字符串反射。
- en: '**[no_tags]**'
  id: totrans-2983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Changed MySQL dialect to use the older LIMIT <offset>, <limit> syntax instead
    of LIMIT <l> OFFSET <o> for folks using 3.23.
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MySQL方言更改为使用旧的LIMIT <offset>, <limit>语法，而不是对于使用3.23的人使用LIMIT <l> OFFSET <o>。
- en: 'References: [#794](https://www.sqlalchemy.org/trac/ticket/794)'
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#794](https://www.sqlalchemy.org/trac/ticket/794)
- en: '**[no_tags]**'
  id: totrans-2986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added ‘passive_deletes=”all”’ flag to relation(), disables all nulling-out of
    foreign key attributes during a flush where the parent object is deleted.
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向relation()添加了‘passive_deletes=”all”’标志，禁用了在删除父对象时刷新期间所有外键属性的置空。
- en: '**[no_tags]**'
  id: totrans-2988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Column defaults and onupdates, executing inline, will add parenthesis for subqueries
    and other parenthesis-requiring expressions
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列默认值和onupdates，在执行内联时，将为子查询和其他需要括号的表达式添加括号。
- en: '**[no_tags]**'
  id: totrans-2990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The behavior of String/Unicode types regarding that they auto-convert to TEXT/CLOB
    when no length is present now occurs *only* for an exact type of String or Unicode
    with no arguments. If you use VARCHAR or NCHAR (subclasses of String/Unicode)
    with no length, they will be interpreted by the dialect as VARCHAR/NCHAR; no “magic”
    conversion happens there. This is less surprising behavior and in particular this
    helps Oracle keep string-based bind parameters as VARCHARs and not CLOBs.
  id: totrans-2991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 String/Unicode 类型的行为，当没有长度时它们自动转换为 TEXT/CLOB 现在仅适用于没有参数的 String 或 Unicode
    精确类型。如果您使用没有长度的 VARCHAR 或 NCHAR（String/Unicode 的子类），它们将被方言解释为 VARCHAR/NCHAR；在那里不会发生“魔术”转换。这是更少令人惊讶的行为，特别是这有助于
    Oracle 将基于字符串的绑定参数保持为 VARCHAR 而不是 CLOB。
- en: 'References: [#793](https://www.sqlalchemy.org/trac/ticket/793)'
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#793](https://www.sqlalchemy.org/trac/ticket/793)
- en: '**[no_tags]**'
  id: totrans-2993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixes to ShardedSession to work with deferred columns.
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ShardedSession 与延迟列一起工作的问题。
- en: 'References: [#771](https://www.sqlalchemy.org/trac/ticket/771)'
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#771](https://www.sqlalchemy.org/trac/ticket/771)
- en: '**[no_tags]**'
  id: totrans-2996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: User-defined shard_chooser() function must accept “clause=None” argument; this
    is the ClauseElement passed to session.execute(statement) and can be used to determine
    correct shard id (since execute() doesn’t take an instance.)
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户定义的 shard_chooser() 函数必须接受“clause=None”参数；这是传递给 session.execute(statement)
    的 ClauseElement，并可用于确定正确的分片 id（因为 execute() 不接受实例）。
- en: '**[no_tags]**'
  id: totrans-2998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Adjusted operator precedence of NOT to match ‘==’ and others, so that ~(x <operator>
    y) produces NOT (x <op> y), which is better compatible with older MySQL versions..
    This doesn’t apply to “~(x==y)” as it does in 0.3 since ~(x==y) compiles to “x
    != y”, but still applies to operators like BETWEEN.
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 NOT 运算符的优先级，以匹配 '==' 和其他运算符，因此 ~(x <operator> y) 会产生 NOT (x <op> y)，这与旧版
    MySQL 更兼容。这不适用于“~(x==y)”如同在 0.3 版本中一样，因为 ~(x==y) 编译为“x != y”，但仍适用于像 BETWEEN 这样的运算符。
- en: 'References: [#764](https://www.sqlalchemy.org/trac/ticket/764)'
  id: totrans-3000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#764](https://www.sqlalchemy.org/trac/ticket/764)
- en: '**[no_tags]**'
  id: totrans-3001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Other tickets:,,.
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他票据:,,.
- en: 'References: [#728](https://www.sqlalchemy.org/trac/ticket/728), [#757](https://www.sqlalchemy.org/trac/ticket/757),
    [#768](https://www.sqlalchemy.org/trac/ticket/768), [#779](https://www.sqlalchemy.org/trac/ticket/779)'
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#728](https://www.sqlalchemy.org/trac/ticket/728), [#757](https://www.sqlalchemy.org/trac/ticket/757),
    [#768](https://www.sqlalchemy.org/trac/ticket/768), [#779](https://www.sqlalchemy.org/trac/ticket/779)
- en: 0.4.0beta5
  id: totrans-3004
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta5
- en: no release date
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: '**[no_tags]**'
  id: totrans-3006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Connection pool fixes; the better performance of beta4 remains but fixes “connection
    overflow” and other bugs which were present (like).
  id: totrans-3007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池修复；beta4 的更好性能仍然存在，但修复了“连接溢出”和其他存在的 bug（例如）。
- en: 'References: [#754](https://www.sqlalchemy.org/trac/ticket/754)'
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#754](https://www.sqlalchemy.org/trac/ticket/754)
- en: '**[no_tags]**'
  id: totrans-3009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed bugs in determining proper sync clauses from custom inherit conditions.
  id: totrans-3010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从自定义继承条件确定正确同步子句的错误。
- en: 'References: [#769](https://www.sqlalchemy.org/trac/ticket/769)'
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#769](https://www.sqlalchemy.org/trac/ticket/769)
- en: '**[no_tags]**'
  id: totrans-3012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Extended ‘engine_from_config’ coercion for QueuePool size / overflow.
  id: totrans-3013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了对 QueuePool 大小/溢出的 'engine_from_config' 强制转换。
- en: 'References: [#763](https://www.sqlalchemy.org/trac/ticket/763)'
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#763](https://www.sqlalchemy.org/trac/ticket/763)
- en: '**[no_tags]**'
  id: totrans-3015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: mysql views can be reflected again.
  id: totrans-3016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql 视图可以再次反射。
- en: 'References: [#748](https://www.sqlalchemy.org/trac/ticket/748)'
  id: totrans-3017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#748](https://www.sqlalchemy.org/trac/ticket/748)
- en: '**[no_tags]**'
  id: totrans-3018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: AssociationProxy can now take custom getters and setters.
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AssociationProxy 现在可以使用自定义的 getter 和 setter。
- en: '**[no_tags]**'
  id: totrans-3020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed malfunctioning BETWEEN in orm queries.
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 orm 查询中 BETWEEN 的故障。
- en: '**[no_tags]**'
  id: totrans-3022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed OrderedProperties pickling
  id: totrans-3023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 OrderedProperties 的 pickling
- en: 'References: [#762](https://www.sqlalchemy.org/trac/ticket/762)'
  id: totrans-3024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#762](https://www.sqlalchemy.org/trac/ticket/762)
- en: '**[no_tags]**'
  id: totrans-3025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: SQL-expression defaults and sequences now execute “inline” for all non-primary
    key columns during an INSERT or UPDATE, and for all columns during an executemany()-style
    call. inline=True flag on any insert/update statement also forces the same behavior
    with a single execute(). result.postfetch_cols() is a collection of columns for
    which the previous single insert or update statement contained a SQL-side default
    expression.
  id: totrans-3026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 表达式默认值和序列现在在 INSERT 或 UPDATE 期间对所有非主键列“内联”执行，并且在执行类似 executemany() 的调用期间对所有列执行。在任何
    insert/update 语句上的 inline=True 标志也会强制相同的行为与单个 execute()。result.postfetch_cols()
    是一个集合，其中包含上一个单个 insert 或 update 语句包含 SQL 端默认表达式的列。
- en: '**[no_tags]**'
  id: totrans-3027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed PG executemany() behavior.
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PG executemany() 的行为。
- en: 'References: [#759](https://www.sqlalchemy.org/trac/ticket/759)'
  id: totrans-3029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#759](https://www.sqlalchemy.org/trac/ticket/759)
- en: '**[no_tags]**'
  id: totrans-3030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: postgres reflects tables with autoincrement=False for primary key columns which
    have no defaults.
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres反映具有无默认值的主键列的表，autoincrement=False。
- en: '**[no_tags]**'
  id: totrans-3032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: postgres no longer wraps executemany() with individual execute() calls, instead
    favoring performance. “rowcount”/”concurrency” checks with deleted items (which
    use executemany) are disabled with PG since psycopg2 does not report proper rowcount
    for executemany().
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres不再使用单独的execute()调用包装executemany()，而是更倾向于性能。在使用PG时，对已删除项目进行“rowcount”/“concurrency”检查（使用executemany）被禁用，因为psycopg2不会为executemany()报告正确的rowcount。
- en: '**[fixed] [tickets]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已修复] [票务]**'
- en: 'References: [#742](https://www.sqlalchemy.org/trac/ticket/742)'
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#742](https://www.sqlalchemy.org/trac/ticket/742)
- en: '**[fixed] [tickets]**'
  id: totrans-3036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已修复] [票务]**'
- en: 'References: [#748](https://www.sqlalchemy.org/trac/ticket/748)'
  id: totrans-3037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#748](https://www.sqlalchemy.org/trac/ticket/748)
- en: '**[fixed] [tickets]**'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已修复] [票务]**'
- en: 'References: [#760](https://www.sqlalchemy.org/trac/ticket/760)'
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#760](https://www.sqlalchemy.org/trac/ticket/760)
- en: '**[fixed] [tickets]**'
  id: totrans-3040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已修复] [票务]**'
- en: 'References: [#762](https://www.sqlalchemy.org/trac/ticket/762)'
  id: totrans-3041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#762](https://www.sqlalchemy.org/trac/ticket/762)
- en: '**[fixed] [tickets]**'
  id: totrans-3042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已修复] [票务]**'
- en: 'References: [#763](https://www.sqlalchemy.org/trac/ticket/763)'
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#763](https://www.sqlalchemy.org/trac/ticket/763)
- en: 0.4.0beta4
  id: totrans-3044
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta4
- en: 'Released: Wed Aug 22 2007'
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月22日（星期三）
- en: '**[no_tags]**'
  id: totrans-3046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'Tidied up what ends up in your namespace when you ‘from sqlalchemy import *’:'
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您‘from sqlalchemy import *’时，整理了最终进入您命名空间的内容：
- en: '**[no_tags]**'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: ’table’ and ‘column’ are no longer imported. They remain available by direct
    reference (as in ‘sql.table’ and ‘sql.column’) or a glob import from the sql package.
    It was too easy to accidentally use a sql.expressions.table instead of schema.Table
    when just starting out with SQLAlchemy, likewise column.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‘table’和‘column’不再被导入。它们仍然可以通过直接引用（如‘sql.table’和‘sql.column’）或从sql包进行全局导入来使用。在刚开始使用SQLAlchemy时，很容易意外使用sql.expressions.table而不是schema.Table，同样也是column。
- en: '**[no_tags]**'
  id: totrans-3050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Internal-ish classes like ClauseElement, FromClause, NullTypeEngine, etc., are
    also no longer imported into your namespace
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于ClauseElement、FromClause、NullTypeEngine等的内部类也不再导入到您的命名空间中
- en: '**[no_tags]**'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The ‘Smallinteger’ compatibility name (small i!) is no longer imported, but
    remains in schema.py for now. SmallInteger (big I!) is still imported.
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‘Smallinteger’兼容性名称（小写i！）不再被导入，但目前仍保留在schema.py中。SmallInteger（大写I！）仍然被导入。
- en: '**[no_tags]**'
  id: totrans-3054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The connection pool uses a “threadlocal” strategy internally to return the same
    connection already bound to a thread, for “contextual” connections; these are
    the connections used when you do a “connectionless” execution like insert().execute().
    This is like a “partial” version of the “threadlocal” engine strategy but without
    the thread-local transaction part of it. We’re hoping it reduces connection pool
    overhead as well as database usage. However, if it proves to impact stability
    in a negative way, we’ll roll it right back.
  id: totrans-3055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池在内部使用“threadlocal”策略，以返回已绑定到线程的相同连接，用于“上下文”连接；这些连接在执行“无连接”操作时使用，如insert().execute()。这类似于“threadlocal”引擎策略的“部分”版本，但没有其中的线程本地事务部分。我们希望它能减少连接池的开销以及数据库使用。但是，如果证明对稳定性产生负面影响，我们将立即撤销。
- en: '**[no_tags]**'
  id: totrans-3056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fix to bind param processing such that “False” values (like blank strings) still
    get processed/encoded.
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了绑定参数处理，使“False”值（如空字符串）仍然被处理/编码。
- en: '**[no_tags]**'
  id: totrans-3058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fix to select() “generative” behavior, such that calling column(), select_from(),
    correlate(), and with_prefix() does not modify the original select object
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select()的“生成”行为，使调用column()、select_from()、correlate()和with_prefix()不会修改原始select对象
- en: 'References: [#752](https://www.sqlalchemy.org/trac/ticket/752)'
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#752](https://www.sqlalchemy.org/trac/ticket/752)
- en: '**[no_tags]**'
  id: totrans-3061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added a “legacy” adapter to types, such that user-defined TypeEngine and TypeDecorator
    classes which define convert_bind_param() and/or convert_result_value() will continue
    to function. Also supports calling the super() version of those methods.
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个“legacy”适配器到types，这样用户定义的TypeEngine和TypeDecorator类，定义了convert_bind_param()和/或convert_result_value()的将继续正常运行。还支持调用这些方法的super()版本。
- en: '**[no_tags]**'
  id: totrans-3063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added session.prune(), trims away instances cached in a session that are no
    longer referenced elsewhere. (A utility for strong-ref identity maps).
  id: totrans-3064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了session.prune()，清除会话中不再在其他地方引用的实例缓存。（用于强引用标识映射的实用程序）。
- en: '**[no_tags]**'
  id: totrans-3065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added close() method to Transaction. Closes out a transaction using rollback
    if it’s the outermost transaction, otherwise just ends without affecting the outer
    transaction.
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Transaction 的 close() 方法。如果是最外层事务，则使用 rollback 结束事务，否则仅结束而不影响外部事务。
- en: '**[no_tags]**'
  id: totrans-3067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Transactional and non-transactional Session integrates better with bound connection;
    a close() will ensure that connection transactional state is the same as that
    which existed on it before being bound to the Session.
  id: totrans-3068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事务性和非事务性 Session 与绑定连接更好地集成；close() 将确保连接的事务状态与绑定到 Session 前存在的状态相同。
- en: '**[no_tags]**'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Modified SQL operator functions to be module-level operators, allowing SQL expressions
    to be pickleable.
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 SQL 操作函数为模块级别的操作符，允许 SQL 表达式可被 pickle。
- en: 'References: [#735](https://www.sqlalchemy.org/trac/ticket/735)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#735](https://www.sqlalchemy.org/trac/ticket/735)
- en: '**[no_tags]**'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Small adjustment to mapper class.__init__ to allow for Py2.6 object.__init__()
    behavior.
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 mapper 类的 __init__ 进行了小的调整，以允许 Py2.6 object.__init__() 行为。
- en: '**[no_tags]**'
  id: totrans-3074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixed ‘prefix’ argument for select()
  id: totrans-3075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 select() 的 ‘prefix’ 参数
- en: '**[no_tags]**'
  id: totrans-3076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Connection.begin() no longer accepts nested=True, this logic is now all in begin_nested().
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.begin() 不再接受 nested=True，这个逻辑现在都在 begin_nested() 中。
- en: '**[no_tags]**'
  id: totrans-3078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Fixes to new “dynamic” relation loader involving cascades
  id: totrans-3079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“动态”关系加载器涉及级联的问题
- en: '**[fixed] [tickets]**'
  id: totrans-3080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [问题]**'
- en: 'References: [#735](https://www.sqlalchemy.org/trac/ticket/735)'
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#735](https://www.sqlalchemy.org/trac/ticket/735)
- en: '**[fixed] [tickets]**'
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [问题]**'
- en: 'References: [#752](https://www.sqlalchemy.org/trac/ticket/752)'
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#752](https://www.sqlalchemy.org/trac/ticket/752)
- en: 0.4.0beta3
  id: totrans-3084
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta3
- en: 'Released: Thu Aug 16 2007'
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月16日 星期四
- en: '**[no_tags]**'
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'SQL types optimization:'
  id: totrans-3087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 类型优化：
- en: '**[no_tags]**'
  id: totrans-3088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: New performance tests show a combined mass-insert/mass-select test as having
    68% fewer function calls than the same test run against 0.3.
  id: totrans-3089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的性能测试显示，与 0.3 版本相比，组合的大规模插入/选择测试的函数调用减少了 68%。
- en: '**[no_tags]**'
  id: totrans-3090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: General performance improvement of result set iteration is around 10-20%.
  id: totrans-3091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集迭代的一般性能提升约为 10-20%。
- en: '**[no_tags]**'
  id: totrans-3092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: In types.AbstractType, convert_bind_param() and convert_result_value() have
    migrated to callable-returning bind_processor() and result_processor() methods.
    If no callable is returned, no pre/post processing function is called.
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 types.AbstractType 中，convert_bind_param() 和 convert_result_value() 已迁移到返回可调用的
    bind_processor() 和 result_processor() 方法。如果没有返回可调用函数，则不会调用预处理/后处理函数。
- en: '**[no_tags]**'
  id: totrans-3094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Hooks added throughout base/sql/defaults to optimize the calling of bind param/result
    processors so that method call overhead is minimized.
  id: totrans-3095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 base/sql/defaults 中添加了钩子以优化调用 bind 参数/结果处理器的性能，以减少方法调用开销。
- en: '**[no_tags]**'
  id: totrans-3096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Support added for executemany() scenarios such that unneeded “last row id” logic
    doesn’t kick in, parameters aren’t excessively traversed.
  id: totrans-3097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 executemany() 场景的支持，以避免不必要的��最后一行 id”逻辑，参数不会被过度遍历。
- en: '**[no_tags]**'
  id: totrans-3098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added ‘inherit_foreign_keys’ arg to mapper().
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 mapper() 添加了 ‘inherit_foreign_keys’ 参数。
- en: '**[no_tags]**'
  id: totrans-3100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Added support for string date passthrough in sqlite.
  id: totrans-3101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlite 中添加了对字符串日期透传的支持。
- en: '**[fixed] [tickets]**'
  id: totrans-3102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [问题]**'
- en: 'References: [#738](https://www.sqlalchemy.org/trac/ticket/738)'
  id: totrans-3103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#738](https://www.sqlalchemy.org/trac/ticket/738)
- en: '**[fixed] [tickets]**'
  id: totrans-3104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [问题]**'
- en: 'References: [#739](https://www.sqlalchemy.org/trac/ticket/739)'
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#739](https://www.sqlalchemy.org/trac/ticket/739)
- en: '**[fixed] [tickets]**'
  id: totrans-3106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [问题]**'
- en: 'References: [#743](https://www.sqlalchemy.org/trac/ticket/743)'
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#743](https://www.sqlalchemy.org/trac/ticket/743)
- en: '**[fixed] [tickets]**'
  id: totrans-3108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[修复] [问题]**'
- en: 'References: [#744](https://www.sqlalchemy.org/trac/ticket/744)'
  id: totrans-3109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#744](https://www.sqlalchemy.org/trac/ticket/744)
- en: 0.4.0beta2
  id: totrans-3110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta2
- en: 'Released: Tue Aug 14 2007'
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月14日 星期二
- en: oracle
  id: totrans-3112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [improvements.]**'
  id: totrans-3113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: Auto-commit after LOAD DATA INFILE for mysql.
  id: totrans-3114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mysql 中的 LOAD DATA INFILE 后自动提交。
- en: '**[oracle] [improvements.]**'
  id: totrans-3115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: A rudimental SessionExtension class has been added, allowing user-defined functionality
    to take place at flush(), commit(), and rollback() boundaries.
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 rudimental SessionExtension 类，允许在 flush()、commit() 和 rollback() 边界处进行用户定义功能。
- en: '**[oracle] [improvements.]**'
  id: totrans-3117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: Added engine_from_config() function for helping to create_engine() from an .ini
    style config.
  id: totrans-3118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 engine_from_config() 函数，以帮助从 .ini 风格的配置文件创建 create_engine()。
- en: '**[oracle] [improvements.]**'
  id: totrans-3119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: base_mapper() becomes a plain attribute.
  id: totrans-3120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: base_mapper() 变为普通属性。
- en: '**[oracle] [improvements.]**'
  id: totrans-3121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [改进]**'
- en: session.execute() and scalar() can search for a Table with which to bind from
    using the given ClauseElement.
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.execute() 和 scalar() 现在可以通过给定的 ClauseElement 搜索要绑定的表。
- en: '**[oracle] [improvements.]**'
  id: totrans-3123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: Session automatically extrapolates tables from mappers with binds, also uses
    base_mapper so that inheritance hierarchies bind automatically.
  id: totrans-3124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session 自动从具有绑定的映射器中推断表，还使用 base_mapper，以便继承层次结构自动绑定。
- en: '**[oracle] [improvements.]**'
  id: totrans-3125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: Moved ClauseVisitor traversal back to inlined non-recursive.
  id: totrans-3126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ClauseVisitor 遍历移回到内联的非递归方式。
- en: misc
  id: totrans-3127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[fixed] [tickets]**'
  id: totrans-3128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#730](https://www.sqlalchemy.org/trac/ticket/730)'
  id: totrans-3129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#730](https://www.sqlalchemy.org/trac/ticket/730)
- en: '**[fixed] [tickets]**'
  id: totrans-3130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#732](https://www.sqlalchemy.org/trac/ticket/732)'
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#732](https://www.sqlalchemy.org/trac/ticket/732)
- en: '**[fixed] [tickets]**'
  id: totrans-3132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#733](https://www.sqlalchemy.org/trac/ticket/733)'
  id: totrans-3133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#733](https://www.sqlalchemy.org/trac/ticket/733)
- en: '**[fixed] [tickets]**'
  id: totrans-3134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#734](https://www.sqlalchemy.org/trac/ticket/734)'
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#734](https://www.sqlalchemy.org/trac/ticket/734)
- en: oracle
  id: totrans-3136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [improvements.]**'
  id: totrans-3137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: Auto-commit after LOAD DATA INFILE for mysql.
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql 的 LOAD DATA INFILE 后自动提交。
- en: '**[oracle] [improvements.]**'
  id: totrans-3139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: A rudimental SessionExtension class has been added, allowing user-defined functionality
    to take place at flush(), commit(), and rollback() boundaries.
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个基本的 SessionExtension 类，允许在 flush()、commit() 和 rollback() 边界处发生用户定义的功能。
- en: '**[oracle] [improvements.]**'
  id: totrans-3141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: Added engine_from_config() function for helping to create_engine() from an .ini
    style config.
  id: totrans-3142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 engine_from_config() 函数，以帮助从 .ini 样式配置创建 create_engine()。
- en: '**[oracle] [improvements.]**'
  id: totrans-3143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: base_mapper() becomes a plain attribute.
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: base_mapper() 变为普通属性。
- en: '**[oracle] [improvements.]**'
  id: totrans-3145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: session.execute() and scalar() can search for a Table with which to bind from
    using the given ClauseElement.
  id: totrans-3146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.execute() 和 scalar() 现在可以通过给定的 ClauseElement 搜索要绑定的表。
- en: '**[oracle] [improvements.]**'
  id: totrans-3147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: Session automatically extrapolates tables from mappers with binds, also uses
    base_mapper so that inheritance hierarchies bind automatically.
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session 自动从具有绑定的映射器中推断表，还使用 base_mapper，以便继承层次结构自动绑定。
- en: '**[oracle] [improvements.]**'
  id: totrans-3149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [improvements.]**'
- en: Moved ClauseVisitor traversal back to inlined non-recursive.
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ClauseVisitor 遍历移回到内联的非递归方式。
- en: misc
  id: totrans-3151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[fixed] [tickets]**'
  id: totrans-3152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#730](https://www.sqlalchemy.org/trac/ticket/730)'
  id: totrans-3153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#730](https://www.sqlalchemy.org/trac/ticket/730)
- en: '**[fixed] [tickets]**'
  id: totrans-3154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#732](https://www.sqlalchemy.org/trac/ticket/732)'
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#732](https://www.sqlalchemy.org/trac/ticket/732)
- en: '**[fixed] [tickets]**'
  id: totrans-3156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#733](https://www.sqlalchemy.org/trac/ticket/733)'
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#733](https://www.sqlalchemy.org/trac/ticket/733)
- en: '**[fixed] [tickets]**'
  id: totrans-3158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[fixed] [tickets]**'
- en: 'References: [#734](https://www.sqlalchemy.org/trac/ticket/734)'
  id: totrans-3159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#734](https://www.sqlalchemy.org/trac/ticket/734)
- en: 0.4.0beta1
  id: totrans-3160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4.0beta1
- en: 'Released: Sun Aug 12 2007'
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年8月12日 星期日
- en: orm
  id: totrans-3162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Speed! Along with recent speedups to ResultProxy, total number of function calls
    significantly reduced for large loads.
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！除了对 ResultProxy 的最近加速，大负载的函数调用总数显著减少。
- en: '**[orm]**'
  id: totrans-3165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: test/perf/masseagerload.py reports 0.4 as having the fewest number of function
    calls across all SA versions (0.1, 0.2, and 0.3).
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: test/perf/masseagerload.py 报告称 0.4 版本在所有 SA 版本（0.1、0.2 和 0.3）中具有最少的函数调用次数。
- en: '**[orm]**'
  id: totrans-3167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New collection_class api and implementation. Collections are now instrumented
    via decorations rather than proxying. You can now have collections that manage
    their own membership, and your class instance will be directly exposed on the
    relation property. The changes are transparent for most users.
  id: totrans-3168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 collection_class api 和实现。现在通过装饰而不是代理来对集合进行检测。现在可以有管理自身成员的集合，并且你的类实例将直接暴露在关系属性上。这些变化对大多数用户来说是透明的。
- en: 'References: [#213](https://www.sqlalchemy.org/trac/ticket/213)'
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#213](https://www.sqlalchemy.org/trac/ticket/213)
- en: '**[orm]**'
  id: totrans-3170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: InstrumentedList (as it was) is removed, and relation properties no longer have
    ‘clear()’, ‘.data’, or any other added methods beyond those provided by the collection
    type. You are free, of course, to add them to a custom class.
  id: totrans-3171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstrumentedList（如之前所述）已被移除，关系属性不再具有‘clear()’、‘.data’或任何其他由集合类型提供之外的附加方法。当然，你可以将它们添加到自定义类中。
- en: '**[orm]**'
  id: totrans-3172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: __setitem__-like assignments now fire remove events for the existing value,
    if any.
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __setitem__-like 分配现在会为现有值触发删除事件（如果有）。
- en: '**[orm]**'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dict-likes used as collection classes no longer need to change __iter__ semantics-
    itervalues() is used by default instead. This is a backwards incompatible change.
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为集合类使用的类似字典的对象不再需要更改__iter__语义- 默认使用itervalues()。这是一个不兼容的更改。
- en: '**[orm]**'
  id: totrans-3176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Subclassing dict for a mapped collection is no longer needed in most cases.
    orm.collections provides canned implementations that key objects by a specified
    column or a custom function of your choice.
  id: totrans-3177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于映射集合，不再需要为其子类化dict。orm.collections提供了按指定列或自定义函数键入对象的预制实现。
- en: '**[orm]**'
  id: totrans-3178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Collection assignment now requires a compatible type- assigning None to clear
    a collection or assigning a list to a dict collection will now raise an argument
    error.
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在集合赋值需要兼容的类型- 将None分配给清除集合或将列表分配给字典集合现在会引发参数错误。
- en: '**[orm]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: AttributeExtension moved to interfaces, and .delete is now .remove The event
    method signature has also been swapped around.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AttributeExtension移动到接口，并且.delete现在是.remove 事件方法签名也已经交换。
- en: '**[orm]**'
  id: totrans-3182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major overhaul for Query:'
  id: totrans-3183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query的重大改革：
- en: '**[orm]**'
  id: totrans-3184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: All selectXXX methods are deprecated. Generative methods are now the standard
    way to do things, i.e. filter(), filter_by(), all(), one(), etc. Deprecated methods
    are docstring’ed with their new replacements.
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有selectXXX方法已被弃用。生成方法现在是标准操作方式，即filter()，filter_by()，all()，one()等。弃用的方法在其新替代品中有文档字符串。
- en: '**[orm]**'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Class-level properties are now usable as query elements… no more ‘.c.’! “Class.c.propname”
    is now superseded by “Class.propname”. All clause operators are supported, as
    well as higher level operators such as Class.prop==<some instance> for scalar
    attributes, Class.prop.contains(<some instance>) and Class.prop.any(<some expression>)
    for collection-based attributes (all are also negatable). Table-based column expressions
    as well as columns mounted on mapped classes via ‘c’ are of course still fully
    available and can be freely mixed with the new attributes.
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类级属性现在可以用作查询元素…不再需要‘.c.’！“Class.c.propname”现在被“Class.propname”取代。支持所有子句操作符，以及高级操作符，如标量属性的Class.prop==<some
    instance>，基于集合的属性的Class.prop.contains(<some instance>)和Class.prop.any(<some expression>)（所有这些也是可否定的）。当然，基于表的列表达式以及通过‘c’挂载在映射类上的列仍然完全可用，并且可以自由与新属性混合使用。
- en: 'References: [#643](https://www.sqlalchemy.org/trac/ticket/643)'
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#643](https://www.sqlalchemy.org/trac/ticket/643)
- en: '**[orm]**'
  id: totrans-3189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed ancient query.select_by_attributename() capability.
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了古老的query.select_by_attributename()功能。
- en: '**[orm]**'
  id: totrans-3191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The aliasing logic used by eager loading has been generalized, so that it also
    adds full automatic aliasing support to Query. It’s no longer necessary to create
    an explicit Alias to join to the same tables multiple times; *even for self-referential
    relationships*.
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急加载使用的别名逻辑已经泛化，因此它还为Query添加了完全自动的别名支持。不再需要为多次加入相同表创建显式别名；*即使是自引用关系*。
- en: join() and outerjoin() take arguments “aliased=True”. Yhis causes their joins
    to be built on aliased tables; subsequent calls to filter() and filter_by() will
    translate all table expressions (yes, real expressions using the original mapped
    Table) to be that of the Alias for the duration of that join() (i.e. until reset_joinpoint()
    or another join() is called).
  id: totrans-3193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join()和outerjoin()接受参数“aliased=True”。这将导致它们的加入建立在别名表上；对filter()和filter_by()的后续调用将把所有表达式（是的，使用原始映射表的真实表达式）翻译为别名的表，直到join()被重置或另一个join()被调用。
- en: join() and outerjoin() take arguments “id=<somestring>”. When used with “aliased=True”,
    the id can be referenced by add_entity(cls, id=<somestring>) so that you can select
    the joined instances even if they’re from an alias.
  id: totrans-3194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join()和outerjoin()接受参数“id=<somestring>”。当与“aliased=True”一起使用时，可以通过add_entity(cls,
    id=<somestring>)引用id，以便选择加入的实例，即使它们来自别名。
- en: join() and outerjoin() now work with self-referential relationships! Using “aliased=True”,
    you can join as many levels deep as desired, i.e. query.join([‘children’, ‘children’],
    aliased=True); filter criterion will be against the rightmost joined table
  id: totrans-3195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join()和outerjoin()现在适用于自引用关系！使用“aliased=True”，可以加入任意深度的级别，即query.join(['children',
    'children'], aliased=True); 过滤条件将针对最右侧的加入表
- en: '**[orm]**'
  id: totrans-3196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added query.populate_existing(), marks the query to reload all attributes and
    collections of all instances touched in the query, including eagerly-loaded entities.
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了query.populate_existing()，标记查询以重新加载查询中触及的所有实例的所有属性和集合，包括急加载的实体。
- en: 'References: [#660](https://www.sqlalchemy.org/trac/ticket/660)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#660](https://www.sqlalchemy.org/trac/ticket/660)
- en: '**[orm]**'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added eagerload_all(), allows eagerload_all(‘x.y.z’) to specify eager loading
    of all properties in the given path.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了eagerload_all()，允许eagerload_all(‘x.y.z’)指定给定路径中所有属性的急切加载。
- en: '**[orm]**'
  id: totrans-3201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major overhaul for Session:'
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session进行了重大改革：
- en: '**[orm]**'
  id: totrans-3203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New function which “configures” a session called “sessionmaker()”. Send various
    keyword arguments to this function once, returns a new class which creates a Session
    against that stereotype.
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新函数“configures���一个会话，称为“sessionmaker()”。一次向该函数发送各种关键字参数，返回一个根据该原型创建会话的新类。
- en: '**[orm]**'
  id: totrans-3205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: SessionTransaction removed from “public” API. You now can call begin()/ commit()/rollback()
    on the Session itself.
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从“public”API中移除了SessionTransaction。现在可以在Session本身上调用begin()/commit()/rollback()。
- en: '**[orm]**'
  id: totrans-3207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session also supports SAVEPOINT transactions; call begin_nested().
  id: totrans-3208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session还支持SAVEPOINT事务；调用begin_nested()。
- en: '**[orm]**'
  id: totrans-3209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session supports two-phase commit behavior when vertically or horizontally partitioning
    (i.e., using more than one engine). Use twophase=True.
  id: totrans-3210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当垂直或水平分区（即使用多个引擎）时，Session支持两阶段提交行为。使用twophase=True。
- en: '**[orm]**'
  id: totrans-3211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session flag “transactional=True” produces a session which always places itself
    into a transaction when first used. Upon commit(), rollback() or close(), the
    transaction ends; but begins again on the next usage.
  id: totrans-3212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session标志“transactional=True”会产生一个会话，当首次使用时总是将自己放入事务中。在commit()、rollback()或close()时，事务结束；但在下一次使用时重新开始。
- en: '**[orm]**'
  id: totrans-3213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session supports “autoflush=True”. This issues a flush() before each query.
    Use in conjunction with transactional, and you can just save()/update() and then
    query, the new objects will be there. Use commit() at the end (or flush() if non-transactional)
    to flush remaining changes.
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session支持“autoflush=True”。这会在每次查询之前发出一个flush()。与transactional一起使用，您可以只需save()/update()然后查询，新对象就会出现。在最后使用commit()（或者如果不是事务性的话使用flush()）来刷新剩余的更改。
- en: '**[orm]**'
  id: totrans-3215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New scoped_session() function replaces SessionContext and assignmapper. Builds
    onto “sessionmaker()” concept to produce a class whose Session() construction
    returns the thread-local session. Or, call all Session methods as class methods,
    i.e. Session.save(foo); Session.commit(). just like the old “objectstore” days.
  id: totrans-3216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的scoped_session()函数取代了SessionContext和assignmapper。构建在“sessionmaker()”概念之上，以生成一个类，其Session()构造返回线程本地会话。或者，将所有Session方法作为类方法调用，例如Session.save(foo);
    Session.commit()。就像旧的“objectstore”时代一样。
- en: '**[orm]**'
  id: totrans-3217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added new “binds” argument to Session to support configuration of multiple binds
    with sessionmaker() function.
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session新增了“binds”参数，以支持使用sessionmaker()函数配置多个绑定。
- en: '**[orm]**'
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rudimental SessionExtension class has been added, allowing user-defined functionality
    to take place at flush(), commit(), and rollback() boundaries.
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个基本的SessionExtension类，允许在flush()、commit()和rollback()边界处进行用户定义的功能。
- en: '**[orm]**'
  id: totrans-3221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query-based relation()s available with dynamic_loader(). This is a *writable*
    collection (supporting append() and remove()) which is also a live Query object
    when accessed for reads. Ideal for dealing with very large collections where only
    partial loading is desired.
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于查询的relation()现在可以使用dynamic_loader()。这是一个*writable*集合（支持append()和remove()），在读取时也是一个活动的Query对象。适用于处理非常大的集合，只需部分加载。
- en: '**[orm]**'
  id: totrans-3223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush()-embedded inline INSERT/UPDATE expressions. Assign any SQL expression,
    like “sometable.c.column + 1”, to an instance’s attribute. Upon flush(), the mapper
    detects the expression and embeds it directly in the INSERT or UPDATE statement;
    the attribute gets deferred on the instance so it loads the new value the next
    time you access it.
  id: totrans-3224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush()-内嵌的INSERT/UPDATE表达式。将任何SQL表达式，如“sometable.c.column + 1”，分配给实例的属性。在flush()时，映射器检测到表达式并直接嵌入到INSERT或UPDATE语句中；属性在实例上被延迟，所以在下次访问时加载新值。
- en: '**[orm]**'
  id: totrans-3225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rudimental sharding (horizontal scaling) system is introduced. This system
    uses a modified Session which can distribute read and write operations among multiple
    databases, based on user-defined functions defining the “sharding strategy”. Instances
    and their dependents can be distributed and queried among multiple databases based
    on attribute values, round-robin approaches or any other user-defined system.
  id: totrans-3226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了一个基本的分片（水平扩展）系统。该系统使用修改后的Session，可以根据用户定义的“分片策略”在多个数据库之间分发读写操作。实例及其依赖项可以根据属性值、轮询方法或任何其他用户定义的系统在多个数据库之间分发和查询。
- en: 'References: [#618](https://www.sqlalchemy.org/trac/ticket/618)'
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#618](https://www.sqlalchemy.org/trac/ticket/618)
- en: '**[orm]**'
  id: totrans-3228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Eager loading has been enhanced to allow even more joins in more places. It
    now functions at any arbitrary depth along self-referential and cyclical structures.
    When loading cyclical structures, specify “join_depth” on relation() indicating
    how many times you’d like the table to join to itself; each level gets a distinct
    table alias. The alias names themselves are generated at compile time using a
    simple counting scheme now and are a lot easier on the eyes, as well as of course
    completely deterministic.
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急加载已经增强，允许在更多地方进行更多的连接。现在它可以在自引用和循环结构的任意深度处运行。在加载循环结构时，在relation()上指定“join_depth”表示您希望表自连接多少次；每个级别都会得到一个不同的表别名。别名名称现在是在编译时使用简单的计数方案生成的，更容易阅读，当然完全确定性。
- en: 'References: [#659](https://www.sqlalchemy.org/trac/ticket/659)'
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#659](https://www.sqlalchemy.org/trac/ticket/659)
- en: '**[orm]**'
  id: totrans-3231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added composite column properties. This allows you to create a type which is
    represented by more than one column, when using the ORM. Objects of the new type
    are fully functional in query expressions, comparisons, query.get() clauses, etc.
    and act as though they are regular single-column scalars… except they’re not!
    Use the function composite(cls, *columns) inside of the mapper’s “properties”
    dict, and instances of cls will be created/mapped to a single attribute, comprised
    of the values corresponding to *columns.
  id: totrans-3232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了复合列属性。这允许您在使用ORM时创建由多个列表示的类型。新类型的对象在查询表达式、比较、query.get()子句等方面都是完全功能的，并且表现得就像是常规的单列标量...
    除了它们不是！在映射器的“properties”字典中使用函数composite(cls, *columns)，并且cls的实例将被创建/映射到一个由*columns对应的值组成的单个属性。
- en: 'References: [#211](https://www.sqlalchemy.org/trac/ticket/211)'
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#211](https://www.sqlalchemy.org/trac/ticket/211)
- en: '**[orm]**'
  id: totrans-3234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved support for custom column_property() attributes which feature correlated
    subqueries, works better with eager loading now.
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对具有相关子查询的自定义column_property()属性的支持，现在在使用急加载时效果更好。
- en: '**[orm]**'
  id: totrans-3236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Primary key “collapse” behavior; the mapper will analyze all columns in its
    given selectable for primary key “equivalence”, that is, columns which are equivalent
    via foreign key relationship or via an explicit inherit_condition. primarily for
    joined-table inheritance scenarios where different named PK columns in inheriting
    tables should “collapse” into a single-valued (or fewer-valued) primary key. Fixes
    things like.
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主键“折叠”行为；映射器将分析其给定可选择的所有列，以获取主键“等效性”，即通过外键关系或显式inherit_condition等价的列。主要用于连接表继承方案，其中继承表中的不同命名的PK列应“折叠”为单值（或更少值）主键。修复了诸如此类的问题。
- en: 'References: [#611](https://www.sqlalchemy.org/trac/ticket/611)'
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#611](https://www.sqlalchemy.org/trac/ticket/611)
- en: '**[orm]**'
  id: totrans-3239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Joined-table inheritance will now generate the primary key columns of all inherited
    classes against the root table of the join only. This implies that each row in
    the root table is distinct to a single instance. If for some rare reason this
    is not desirable, explicit primary_key settings on individual mappers will override
    it.
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接表继承现在将生成所有继承类的主键列针对连接的根表。这意味着根表中的每一行对应一个实例。如果出于某种罕见原因这不是理想的情况，单独映射器上的显式primary_key设置将覆盖它。
- en: '**[orm]**'
  id: totrans-3241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When “polymorphic” flags are used with joined-table or single-table inheritance,
    all identity keys are generated against the root class of the inheritance hierarchy;
    this allows query.get() to work polymorphically using the same caching semantics
    as a non-polymorphic get. Note that this currently does not work with concrete
    inheritance.
  id: totrans-3242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用“polymorphic”标志与连接表或单表继承时，所有标识键都针对继承层次结构的根类生成；这允许query.get()以与非多态get相同的缓存语义多态地工作。请注意，这目前不适用于具体继承。
- en: '**[orm]**'
  id: totrans-3243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Secondary inheritance loading: polymorphic mappers can be constructed *without*
    a select_table argument. inheriting mappers whose tables were not represented
    in the initial load will issue a second SQL query immediately, once per instance
    (i.e. not very efficient for large lists), in order to load the remaining columns.'
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 次要继承加载：可以构建没有select_table参数的多态映射器。继承映射器的表在初始加载中未表示将立即发出第二个SQL查询，每个实例一次（即对于大型列表来说效率不高），以加载其余列。
- en: '**[orm]**'
  id: totrans-3245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Secondary inheritance loading can also move its second query into a column-level
    “deferred” load, via the “polymorphic_fetch” argument, which can be set to ‘select’
    or ‘deferred’
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 次要继承加载也可以将其第二个查询移动到列级“延迟”加载，通过“polymorphic_fetch”参数，可以设置为“select”或“deferred”。
- en: '**[orm]**'
  id: totrans-3247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s now possible to map only a subset of available selectable columns onto
    mapper properties, using include_columns/exclude_columns..
  id: totrans-3248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以仅将可用选择列的子集映射到映射器属性中，使用include_columns/exclude_columns。
- en: 'References: [#696](https://www.sqlalchemy.org/trac/ticket/696)'
  id: totrans-3249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#696](https://www.sqlalchemy.org/trac/ticket/696)
- en: '**[orm]**'
  id: totrans-3250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added undefer_group() MapperOption, sets a set of “deferred” columns joined
    by a “group” to load as “undeferred”.
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了undefer_group() MapperOption，设置一组由“group”连接的“延迟”列以作为“未延迟”加载。
- en: '**[orm]**'
  id: totrans-3252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Rewrite of the “deterministic alias name” logic to be part of the SQL layer,
    produces much simpler alias and label names more in the style of Hibernate
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了“确定性别名”逻辑，使其成为SQL层的一部分，生成更简单的别名和标签名称，更符合Hibernate的风格。
- en: sql
  id: totrans-3254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Speed! Clause compilation as well as the mechanics of SQL constructs have been
    streamlined and simplified to a significant degree, for a 20-30% improvement of
    the statement construction/compilation overhead of 0.3.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！子句编译以及SQL构造的机制已经被简化和优化到相当程度，使语句构造/编译的开销提高了20-30%。
- en: '**[sql]**'
  id: totrans-3257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: All “type” keyword arguments, such as those to bindparam(), column(), Column(),
    and func.<something>(), renamed to “type_”. Those objects still name their “type”
    attribute as “type”.
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有“type”关键字参数，如bindparam()、column()、Column()和func.<something>()中的参数，重命名为“type_”。这些对象仍然将它们的“type”属性命名为“type”。
- en: '**[sql]**'
  id: totrans-3259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: case_sensitive=(True|False) setting removed from schema items, since checking
    this state added a lot of method call overhead and there was no decent reason
    to ever set it to False. Table and column names which are all lower case will
    be treated as case-insensitive (yes we adjust for Oracle’s UPPERCASE style too).
  id: totrans-3260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从模式项中移除了case_sensitive=(True|False)设置，因为检查此状态会增加很多方法调用开销，而且从来没有合理的理由将其设置为False。所有小写的表和列名称将被视为不区分大小写（是的，我们也适应了Oracle的大写风格）。
- en: extensions
  id: totrans-3261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-3262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: proxyengine is temporarily removed, pending an actually working replacement.
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: proxyengine暂时移除，等待一个真正有效的替代品。
- en: '**[extensions]**'
  id: totrans-3264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: SelectResults has been replaced by Query. SelectResults / SelectResultsExt still
    exist but just return a slightly modified Query object for backwards-compatibility.
    join_to() method from SelectResults isn’t present anymore, need to use join().
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults已被Query取代。SelectResults / SelectResultsExt仍然存在，但只返回一个稍微修改的Query对象以保持向后兼容性。SelectResults的join_to()方法不再存在，需要使用join()。
- en: mysql
  id: totrans-3266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Table and column names loaded via reflection are now Unicode.
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过反射加载的表和列名称现在是Unicode。
- en: '**[mysql]**'
  id: totrans-3269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: All standard column types are now supported, including SET.
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持所有标准列类型，包括SET。
- en: '**[mysql]**'
  id: totrans-3271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Table reflection can now be performed in as little as one round-trip.
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表反射现在可以在一次往返中完成。
- en: '**[mysql]**'
  id: totrans-3273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ANSI and ANSI_QUOTES sql modes are now supported.
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持ANSI和ANSI_QUOTES SQL模式。
- en: '**[mysql]**'
  id: totrans-3275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Indexes are now reflected.
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 索引现在也被反射。
- en: oracle
  id: totrans-3277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Very rudimental support for OUT parameters added; use sql.outparam(name, type)
    to set up an OUT parameter, just like bindparam(); after execution, values are
    available via result.out_parameters dictionary.
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对OUT参数的非常基本的支持；使用sql.outparam(name, type)设置一个OUT参数，就像bindparam()一样；执行后，值可以通过result.out_parameters字典获得。
- en: 'References: [#507](https://www.sqlalchemy.org/trac/ticket/507)'
  id: totrans-3280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#507](https://www.sqlalchemy.org/trac/ticket/507)
- en: misc
  id: totrans-3281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[transactions]**'
  id: totrans-3282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[事务]**'
- en: Added context manager (with statement) support for transactions.
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为事务添加了上下文管理器（with语句）支持。
- en: '**[transactions]**'
  id: totrans-3284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added support for two phase commit, works with mysql and postgres so far.
  id: totrans-3285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对两阶段提交的支持，目前与mysql和postgres一起使用。
- en: '**[transactions]**'
  id: totrans-3286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[事务]**'
- en: Added a subtransaction implementation that uses savepoints.
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个使用保存点的子事务实现。
- en: '**[transactions]**'
  id: totrans-3288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[事务]**'
- en: Added support for savepoints.
  id: totrans-3289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对保存点的支持。
- en: '**[metadata]**'
  id: totrans-3290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Tables can be reflected from the database en-masse without declaring them in
    advance. MetaData(engine, reflect=True) will load all tables present in the database,
    or use metadata.reflect() for finer control.
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在不事先声明的情况下从数据库中批量反射表。MetaData(engine, reflect=True)将加载数据库中存在的所有表，或者使用metadata.reflect()进行更精细的控制。
- en: '**[metadata]**'
  id: totrans-3292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: DynamicMetaData has been renamed to ThreadLocalMetaData
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DynamicMetaData 已重命名为 ThreadLocalMetaData
- en: '**[metadata]**'
  id: totrans-3294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: The ThreadLocalMetaData constructor now takes no arguments.
  id: totrans-3295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ThreadLocalMetaData 构造函数现在不接受参数。
- en: '**[metadata]**'
  id: totrans-3296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: BoundMetaData has been removed- regular MetaData is equivalent
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BoundMetaData 已被移除- 普通 MetaData 等效。
- en: '**[metadata]**'
  id: totrans-3298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Numeric and Float types now have an “asdecimal” flag; defaults to True for Numeric,
    False for Float. When True, values are returned as decimal.Decimal objects; when
    False, values are returned as float(). The defaults of True/False are already
    the behavior for PG and MySQL’s DBAPI modules.
  id: totrans-3299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Numeric 和 Float 类型现在具有一个“asdecimal”标志；对于 Numeric，默认为 True，对于 Float，默认为 False。当为
    True 时，值以 decimal.Decimal 对象返回；当为 False 时，值以 float() 返回。True/False 的默认值已经是 PG
    和 MySQL 的 DBAPI 模块的行为。
- en: 'References: [#646](https://www.sqlalchemy.org/trac/ticket/646)'
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#646](https://www.sqlalchemy.org/trac/ticket/646)
- en: '**[metadata]**'
  id: totrans-3301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: New SQL operator implementation which removes all hardcoded operators from expression
    structures and moves them into compilation; allows greater flexibility of operator
    compilation; for example, “+” compiles to “||” when used in a string context,
    or “concat(a,b)” on MySQL; whereas in a numeric context it compiles to “+”. Fixes.
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 SQL 操作符实现将所有硬编码的操作符从表达式结构中移除，并将它们移入编译中；这样可以更灵活地编译操作符；例如，在字符串上下文中使用“+”编译为“||”，在
    MySQL 上则编译为“concat(a,b)”；而在数值上下文中则编译为“+”。修复。
- en: 'References: [#475](https://www.sqlalchemy.org/trac/ticket/475)'
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#475](https://www.sqlalchemy.org/trac/ticket/475)
- en: '**[metadata]**'
  id: totrans-3304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: ”Anonymous” alias and label names are now generated at SQL compilation time
    in a completely deterministic fashion… no more random hex IDs
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”匿名“别名和标签名称现在在 SQL 编译时以完全确定性的方式生成... 不再是随机的十六进制 ID
- en: '**[metadata]**'
  id: totrans-3306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Significant architectural overhaul to SQL elements (ClauseElement). All elements
    share a common “mutability” framework which allows a consistent approach to in-place
    modifications of elements as well as generative behavior. Improves stability of
    the ORM which makes heavy usage of mutations to SQL expressions.
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQL 元素（ClauseElement）进行了重大的架构改造。所有元素共享一个通用的“可变性”框架，允许对元素进行一致的就地修改以及生成式行为。提高了
    ORM 的稳定性，该 ORM 对 SQL 表达式进行了大量的变异。
- en: '**[metadata]**'
  id: totrans-3308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: select() and union()’s now have “generative” behavior. Methods like order_by()
    and group_by() return a *new* instance - the original instance is left unchanged.
    Non-generative methods remain as well.
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 和 union() 现在具有“生成式”行为。像 order_by() 和 group_by() 这样的方法返回一个 *新的* 实例 -
    原始实例保持不变。非生成式方法也保持不变。
- en: '**[metadata]**'
  id: totrans-3310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: The internals of select/union vastly simplified- all decision making regarding
    “is subquery” and “correlation” pushed to SQL generation phase. select() elements
    are now *never* mutated by their enclosing containers or by any dialect’s compilation
    process
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select/union 的内部大幅简化- 关于“是否子查询”和“相关性”的所有决策都推迟到 SQL 生成阶段。select() 元素现在 *永远* 不会被其封闭容器或任何方言的编译过程改变。
- en: 'References: [#52](https://www.sqlalchemy.org/trac/ticket/52), [#569](https://www.sqlalchemy.org/trac/ticket/569)'
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#52](https://www.sqlalchemy.org/trac/ticket/52)，[#569](https://www.sqlalchemy.org/trac/ticket/569)
- en: '**[metadata]**'
  id: totrans-3313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: select(scalar=True) argument is deprecated; use select(..).as_scalar(). The
    resulting object obeys the full “column” interface and plays better within expressions.
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select(scalar=True) 参数已被弃用；使用 select(..).as_scalar()。结果对象遵循完整的“列”接口，并在表达式中更好地发挥作用。
- en: '**[metadata]**'
  id: totrans-3315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added select().with_prefix(‘foo’) allowing any set of keywords to be placed
    before the columns clause of the SELECT
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 select().with_prefix('foo')，允许在 SELECT 的列子句之前放置任何一组关键字
- en: 'References: [#504](https://www.sqlalchemy.org/trac/ticket/504)'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#504](https://www.sqlalchemy.org/trac/ticket/504)
- en: '**[metadata]**'
  id: totrans-3318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added array slice support to row[<index>]
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 row[<index>] 添加了数组切片支持
- en: 'References: [#686](https://www.sqlalchemy.org/trac/ticket/686)'
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#686](https://www.sqlalchemy.org/trac/ticket/686)
- en: '**[metadata]**'
  id: totrans-3321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Result sets make a better attempt at matching the DBAPI types present in cursor.description
    to the TypeEngine objects defined by the dialect, which are then used for result-processing.
    Note this only takes effect for textual SQL; constructed SQL statements always
    have an explicit type map.
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集现在更好地尝试将游标描述中存在的 DBAPI 类型与方言定义的 TypeEngine 对象进行匹配，然后用于结果处理。请注意，这仅对文本 SQL
    有效；构造的 SQL 语句始终具有显式类型映射。
- en: '**[metadata]**'
  id: totrans-3323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Result sets from CRUD operations close their underlying cursor immediately and
    will also autoclose the connection if defined for the operation; this allows more
    efficient usage of connections for successive CRUD operations with less chance
    of “dangling connections”.
  id: totrans-3324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CRUD 操作的结果集立即关闭其底层游标，并且如果为操作定义了，还将自动关闭连接；这允许更有效地使用连接来进行连续的 CRUD 操作，减少“悬挂连接”的机会。
- en: '**[metadata]**'
  id: totrans-3325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Column defaults and onupdate Python functions (i.e. passed to ColumnDefault)
    may take zero or one arguments; the one argument is the ExecutionContext, from
    which you can call “context.parameters[someparam]” to access the other bind parameter
    values affixed to the statement. The connection used for the execution is available
    as well so that you can pre-execute statements.
  id: totrans-3326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列默认值和onupdate Python函数（即传递给ColumnDefault的函数）可能需要零个或一个参数；一个参数是 ExecutionContext，您可以从中调用
    “context.parameters[someparam]” 来访问附加到语句的其他绑定参数值。用于执行的连接也可用，以便您可以预先执行语句。
- en: 'References: [#559](https://www.sqlalchemy.org/trac/ticket/559)'
  id: totrans-3327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#559](https://www.sqlalchemy.org/trac/ticket/559)
- en: '**[metadata]**'
  id: totrans-3328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added “explicit” create/drop/execute support for sequences (i.e. you can pass
    a “connectable” to each of those methods on Sequence).
  id: totrans-3329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为序列添加了“显式”创建/删除/执行支持（即您可以将“connectable”传递给Sequence上的每个方法）。
- en: '**[metadata]**'
  id: totrans-3330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Better quoting of identifiers when manipulating schemas.
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在操作模式时更好地引用标识符。
- en: '**[metadata]**'
  id: totrans-3332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Standardized the behavior for table reflection where types can’t be located;
    NullType is substituted instead, warning is raised.
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准化了表反射的行为，其中类型无法定位时将替换为NullType，并引发警告。
- en: '**[metadata]**'
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: ColumnCollection (i.e. the ‘c’ attribute on tables) follows dictionary semantics
    for “__contains__”
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnCollection（即表上的 'c' 属性）遵循“__contains__”的字典语义
- en: 'References: [#606](https://www.sqlalchemy.org/trac/ticket/606)'
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#606](https://www.sqlalchemy.org/trac/ticket/606)
- en: '**[engines]**'
  id: totrans-3337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Speed! The mechanics of result processing and bind parameter processing have
    been overhauled, streamlined and optimized to issue as little method calls as
    possible. Bench tests for mass INSERT and mass rowset iteration both show 0.4
    to be over twice as fast as 0.3, using 68% fewer function calls.
  id: totrans-3338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！结果处理和绑定参数处理的机制已进行了全面改进、简化和优化，以尽可能少地发出方法调用。批量插入和大量行集迭代的性能测试都显示 0.4 比 0.3 快两倍以上，并且函数调用减少了
    68%。
- en: '**[engines]**'
  id: totrans-3339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: You can now hook into the pool lifecycle and run SQL statements or other logic
    at new each DBAPI connection, pool check-out and check-in.
  id: totrans-3340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在您可以钩入池的生命周期，并在每个新的 DBAPI 连接、池检出和池检入时运行 SQL 语句或其他逻辑。
- en: '**[engines]**'
  id: totrans-3341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connections gain a .properties collection, with contents scoped to the lifetime
    of the underlying DBAPI connection
  id: totrans-3342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接获得了 `.properties` 集合，其中的内容在基础 DBAPI 连接的生命周期范围内。
- en: '**[engines]**'
  id: totrans-3343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Removed auto_close_cursors and disallow_open_cursors arguments from Pool; reduces
    overhead as cursors are normally closed by ResultProxy and Connection.
  id: totrans-3344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 Pool 中删除了 `auto_close_cursors` 和 `disallow_open_cursors` 参数；由于游标通常由 ResultProxy
    和 Connection 关闭，因此减少了开销。
- en: '**[postgres]**'
  id: totrans-3345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added PGArray datatype for using postgres array datatypes.
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PGArray 数据类型以使用 PostgreSQL 数组数据类型。
- en: orm
  id: totrans-3347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-3348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Speed! Along with recent speedups to ResultProxy, total number of function calls
    significantly reduced for large loads.
  id: totrans-3349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！除了对 ResultProxy 的最近加速之外，对大型加载的函数调用总数显著减少。
- en: '**[orm]**'
  id: totrans-3350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: test/perf/masseagerload.py reports 0.4 as having the fewest number of function
    calls across all SA versions (0.1, 0.2, and 0.3).
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`test/perf/masseagerload.py` 报告称，0.4 在所有 SA 版本（0.1、0.2 和 0.3）中的函数调用次数最少。'
- en: '**[orm]**'
  id: totrans-3352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: New collection_class api and implementation. Collections are now instrumented
    via decorations rather than proxying. You can now have collections that manage
    their own membership, and your class instance will be directly exposed on the
    relation property. The changes are transparent for most users.
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 `collection_class` API 和实现。现在通过装饰来实现对集合的检测，而不是代理。现在您可以拥有管理自己成员的集合，并且您的类实例将直接暴露在关系属性上。这些更改对大多数用户是透明的。
- en: 'References: [#213](https://www.sqlalchemy.org/trac/ticket/213)'
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#213](https://www.sqlalchemy.org/trac/ticket/213)
- en: '**[orm]**'
  id: totrans-3355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: InstrumentedList (as it was) is removed, and relation properties no longer have
    ‘clear()’, ‘.data’, or any other added methods beyond those provided by the collection
    type. You are free, of course, to add them to a custom class.
  id: totrans-3356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstrumentedList（如之前的情况）已移除，并且关系属性不再具有‘clear()’、‘.data’或任何其他添加的方法，除了集合类型提供的方法。当然，您可以将它们添加到自定义类中。
- en: '**[orm]**'
  id: totrans-3357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: __setitem__-like assignments now fire remove events for the existing value,
    if any.
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似__setitem__的赋值现在会为现有值触发删除事件（如果有）。
- en: '**[orm]**'
  id: totrans-3359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dict-likes used as collection classes no longer need to change __iter__ semantics-
    itervalues() is used by default instead. This is a backwards incompatible change.
  id: totrans-3360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为集合类使用的类似字典的对象不再需要更改__iter__语义- 默认情况下使用itervalues()。这是一个不兼容的变化。
- en: '**[orm]**'
  id: totrans-3361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Subclassing dict for a mapped collection is no longer needed in most cases.
    orm.collections provides canned implementations that key objects by a specified
    column or a custom function of your choice.
  id: totrans-3362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，不再需要为映射的集合子类化dict。orm.collections提供了按指定列或自定义函数键入对象的预制实现。
- en: '**[orm]**'
  id: totrans-3363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Collection assignment now requires a compatible type- assigning None to clear
    a collection or assigning a list to a dict collection will now raise an argument
    error.
  id: totrans-3364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在集合赋值需要兼容的类型-将None分配给清除集合或将列表分配给字典集合现在将引发参数错误。
- en: '**[orm]**'
  id: totrans-3365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: AttributeExtension moved to interfaces, and .delete is now .remove The event
    method signature has also been swapped around.
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AttributeExtension移动到接口，并且.delete现在是.remove事件方法签名也已经交换。
- en: '**[orm]**'
  id: totrans-3367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major overhaul for Query:'
  id: totrans-3368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query进行了重大改进：
- en: '**[orm]**'
  id: totrans-3369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: All selectXXX methods are deprecated. Generative methods are now the standard
    way to do things, i.e. filter(), filter_by(), all(), one(), etc. Deprecated methods
    are docstring’ed with their new replacements.
  id: totrans-3370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有selectXXX方法都已弃用。生成方法现在是执行操作的标准方式，即filter()，filter_by()，all()，one()等。弃用的方法在其新替代品的文档字符串中有说明。
- en: '**[orm]**'
  id: totrans-3371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Class-level properties are now usable as query elements… no more ‘.c.’! “Class.c.propname”
    is now superseded by “Class.propname”. All clause operators are supported, as
    well as higher level operators such as Class.prop==<some instance> for scalar
    attributes, Class.prop.contains(<some instance>) and Class.prop.any(<some expression>)
    for collection-based attributes (all are also negatable). Table-based column expressions
    as well as columns mounted on mapped classes via ‘c’ are of course still fully
    available and can be freely mixed with the new attributes.
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将类级属性用作查询元素...不再需要‘.c.’！“Class.c.propname”现在被“Class.propname”取代。支持所有子句操作符，以及更高级别的操作符，如标量属性的Class.prop==<some
    instance>，基于集合的属性的Class.prop.contains(<some instance>)和Class.prop.any(<some expression>)（所有这些也是可否定的）。当然，基于表的列表达式以及通过‘c’挂载在映射类上的列仍然完全可用，并且可以自由地与新属性混合使用。
- en: 'References: [#643](https://www.sqlalchemy.org/trac/ticket/643)'
  id: totrans-3373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#643](https://www.sqlalchemy.org/trac/ticket/643)
- en: '**[orm]**'
  id: totrans-3374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed ancient query.select_by_attributename() capability.
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了古老的query.select_by_attributename()功能。
- en: '**[orm]**'
  id: totrans-3376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The aliasing logic used by eager loading has been generalized, so that it also
    adds full automatic aliasing support to Query. It’s no longer necessary to create
    an explicit Alias to join to the same tables multiple times; *even for self-referential
    relationships*.
  id: totrans-3377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急加载使用的别名逻辑已经泛化，因此它还为Query添加了完全自动的别名支持。不再需要为多次加入相同表创建显式别名；*即使是自引用关系也是如此*。
- en: join() and outerjoin() take arguments “aliased=True”. Yhis causes their joins
    to be built on aliased tables; subsequent calls to filter() and filter_by() will
    translate all table expressions (yes, real expressions using the original mapped
    Table) to be that of the Alias for the duration of that join() (i.e. until reset_joinpoint()
    or another join() is called).
  id: totrans-3378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join()和outerjoin()接受参数“aliased=True”。这将导致它们的连接建立在别名表上；随后对filter()和filter_by()的调用将把所有表达式（是的，使用原始映射表的实际表达式）翻译为别名的表达式，直到该join()结束（即直到reset_joinpoint()或另一个join()被调用）。
- en: join() and outerjoin() take arguments “id=<somestring>”. When used with “aliased=True”,
    the id can be referenced by add_entity(cls, id=<somestring>) so that you can select
    the joined instances even if they’re from an alias.
  id: totrans-3379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join()和outerjoin()接受参数“id=<somestring>”。当与“aliased=True”一起使用时，可以通过add_entity(cls,
    id=<somestring>)引用id，以便即使它们来自别名，也可以选择加入的实例。
- en: join() and outerjoin() now work with self-referential relationships! Using “aliased=True”,
    you can join as many levels deep as desired, i.e. query.join([‘children’, ‘children’],
    aliased=True); filter criterion will be against the rightmost joined table
  id: totrans-3380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: join()和outerjoin()现在可以与自引用关系一起使用！使用“aliased=True”，您可以加入任意深度的级别，即query.join([‘children’,
    ‘children’], aliased=True)；过滤条件将针对最右边的连接表
- en: '**[orm]**'
  id: totrans-3381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added query.populate_existing(), marks the query to reload all attributes and
    collections of all instances touched in the query, including eagerly-loaded entities.
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 query.populate_existing()，标记查询以重新加载查询中触及的所有实例的所有属性和集合，包括急切加载的实体。
- en: 'References: [#660](https://www.sqlalchemy.org/trac/ticket/660)'
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#660](https://www.sqlalchemy.org/trac/ticket/660)
- en: '**[orm]**'
  id: totrans-3384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added eagerload_all(), allows eagerload_all(‘x.y.z’) to specify eager loading
    of all properties in the given path.
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 eagerload_all()，允许 eagerload_all('x.y.z') 来指定在给定路径中所有属性的急切加载。
- en: '**[orm]**'
  id: totrans-3386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Major overhaul for Session:'
  id: totrans-3387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话的重大改革：
- en: '**[orm]**'
  id: totrans-3388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New function which “configures” a session called “sessionmaker()”. Send various
    keyword arguments to this function once, returns a new class which creates a Session
    against that stereotype.
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新函数“配置”一个会话称为“sessionmaker()”。向该函数发送各种关键字参数一次，返回一个新类，该类对该原型创建一个会话。
- en: '**[orm]**'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: SessionTransaction removed from “public” API. You now can call begin()/ commit()/rollback()
    on the Session itself.
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话事务从“public” API中移除。现在你可以在会话本身上调用 begin()/commit()/rollback()。
- en: '**[orm]**'
  id: totrans-3392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session also supports SAVEPOINT transactions; call begin_nested().
  id: totrans-3393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话还支持 SAVEPOINT 事务；调用 begin_nested()。
- en: '**[orm]**'
  id: totrans-3394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session supports two-phase commit behavior when vertically or horizontally partitioning
    (i.e., using more than one engine). Use twophase=True.
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当纵向或横向分区（即使用多个引擎）时，会话支持两阶段提交行为。使用 twophase=True。
- en: '**[orm]**'
  id: totrans-3396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session flag “transactional=True” produces a session which always places itself
    into a transaction when first used. Upon commit(), rollback() or close(), the
    transaction ends; but begins again on the next usage.
  id: totrans-3397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话标志“transactional=True”生成一个会话，当首次使用时总是将自身置于事务中。在 commit()、rollback() 或 close()
    时，事务结束；但在下次使用时重新开始。
- en: '**[orm]**'
  id: totrans-3398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session supports “autoflush=True”. This issues a flush() before each query.
    Use in conjunction with transactional, and you can just save()/update() and then
    query, the new objects will be there. Use commit() at the end (or flush() if non-transactional)
    to flush remaining changes.
  id: totrans-3399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话支持“autoflush=True”。这会在每次查询之前发出 flush()。与 transactional 结合使用，你可以仅保存()/更新()
    然后查询，新对象就会出现。在最后使用 commit()（或者如果不是在事务中使用 flush()）来刷新剩余的更改。
- en: '**[orm]**'
  id: totrans-3400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: New scoped_session() function replaces SessionContext and assignmapper. Builds
    onto “sessionmaker()” concept to produce a class whose Session() construction
    returns the thread-local session. Or, call all Session methods as class methods,
    i.e. Session.save(foo); Session.commit(). just like the old “objectstore” days.
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 scoped_session() 函数替换了 SessionContext 和 assignmapper。构建到“sessionmaker()”概念上，以产生一个类，其
    Session() 构造返回线程本地会话。或者，将所有 Session 方法作为类方法调用，例如 Session.save(foo); Session.commit()。就像旧的“objectstore”时代一样。
- en: '**[orm]**'
  id: totrans-3402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added new “binds” argument to Session to support configuration of multiple binds
    with sessionmaker() function.
  id: totrans-3403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了会话的新“binds”参数，以支持通过 sessionmaker() 函数配置多个绑定。
- en: '**[orm]**'
  id: totrans-3404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rudimental SessionExtension class has been added, allowing user-defined functionality
    to take place at flush(), commit(), and rollback() boundaries.
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个基本的 SessionExtension 类，允许在 flush()、commit() 和 rollback() 边界处发生用户定义的功能。
- en: '**[orm]**'
  id: totrans-3406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query-based relation()s available with dynamic_loader(). This is a *writable*
    collection (supporting append() and remove()) which is also a live Query object
    when accessed for reads. Ideal for dealing with very large collections where only
    partial loading is desired.
  id: totrans-3407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 dynamic_loader() 可用于基于查询的 relation()。这是一个 *可写* 集合（支持 append() 和 remove()），当访问时也是一个活动的查询对象。对于处理只需要部分加载的非常大的集合非常理想。
- en: '**[orm]**'
  id: totrans-3408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush()-embedded inline INSERT/UPDATE expressions. Assign any SQL expression,
    like “sometable.c.column + 1”, to an instance’s attribute. Upon flush(), the mapper
    detects the expression and embeds it directly in the INSERT or UPDATE statement;
    the attribute gets deferred on the instance so it loads the new value the next
    time you access it.
  id: totrans-3409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flush() -内嵌的内联 INSERT/UPDATE 表达式。将任何 SQL 表达式，如“sometable.c.column + 1”，分配给实例的属性。在
    flush() 时，映射器检测到表达式并将其直接嵌入到 INSERT 或 UPDATE 语句中；属性在实例上被延迟，因此在下次访问时加载新值。
- en: '**[orm]**'
  id: totrans-3410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A rudimental sharding (horizontal scaling) system is introduced. This system
    uses a modified Session which can distribute read and write operations among multiple
    databases, based on user-defined functions defining the “sharding strategy”. Instances
    and their dependents can be distributed and queried among multiple databases based
    on attribute values, round-robin approaches or any other user-defined system.
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了一个基本的分片（水平扩展）系统。该系统使用修改后的Session，可以根据用户定义的“分片策略”将读写操作分布在多个数据库之间。实例及其依赖项可以根据属性值、轮询方法或任何其他用户定义的系统在多个数据库之间分布和查询。
- en: 'References: [#618](https://www.sqlalchemy.org/trac/ticket/618)'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#618](https://www.sqlalchemy.org/trac/ticket/618)
- en: '**[orm]**'
  id: totrans-3413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Eager loading has been enhanced to allow even more joins in more places. It
    now functions at any arbitrary depth along self-referential and cyclical structures.
    When loading cyclical structures, specify “join_depth” on relation() indicating
    how many times you’d like the table to join to itself; each level gets a distinct
    table alias. The alias names themselves are generated at compile time using a
    simple counting scheme now and are a lot easier on the eyes, as well as of course
    completely deterministic.
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急切加载已经增强，允许在更多地方进行更多的连接。它现在可以在自引用和循环结构的任意深度上运行。在加载循环结构时，在relation()上指定“join_depth”，指示您希望表自连接多少次；每个级别都会获得一个不同的表别名。别名名称现在是在编译时使用简单的计数方案生成的，更容易阅读，当然完全确定性。
- en: 'References: [#659](https://www.sqlalchemy.org/trac/ticket/659)'
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#659](https://www.sqlalchemy.org/trac/ticket/659)
- en: '**[orm]**'
  id: totrans-3416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added composite column properties. This allows you to create a type which is
    represented by more than one column, when using the ORM. Objects of the new type
    are fully functional in query expressions, comparisons, query.get() clauses, etc.
    and act as though they are regular single-column scalars… except they’re not!
    Use the function composite(cls, *columns) inside of the mapper’s “properties”
    dict, and instances of cls will be created/mapped to a single attribute, comprised
    of the values corresponding to *columns.
  id: totrans-3417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了复合列属性。这允许您在使用ORM时创建由多个列表示的类型。新类型的对象在查询表达式、比较、query.get()子句等方面都是完全功能的，并且表现得就像是常规的单列标量...
    除了它们不是！在映射器的“属性”字典中使用函数composite(cls, *columns)，并且cls的实例将被创建/映射到一个属性，由与*columns对应的值组成。
- en: 'References: [#211](https://www.sqlalchemy.org/trac/ticket/211)'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#211](https://www.sqlalchemy.org/trac/ticket/211)
- en: '**[orm]**'
  id: totrans-3419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved support for custom column_property() attributes which feature correlated
    subqueries, works better with eager loading now.
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对具有相关子查询的自定义column_property()属性的支持，现在与急切加载更好地配合。
- en: '**[orm]**'
  id: totrans-3421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Primary key “collapse” behavior; the mapper will analyze all columns in its
    given selectable for primary key “equivalence”, that is, columns which are equivalent
    via foreign key relationship or via an explicit inherit_condition. primarily for
    joined-table inheritance scenarios where different named PK columns in inheriting
    tables should “collapse” into a single-valued (or fewer-valued) primary key. Fixes
    things like.
  id: totrans-3422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主键“合并”行为；映射器将分析其给定可选择的所有列以获取主键“等效性”，即通过外键关系或显式继承条件等方式等效的列。主要用于连接表继承场景，其中继承表中的不同命名主键列应“合并”为单值（或更少值）主键。修复了一些问题。
- en: 'References: [#611](https://www.sqlalchemy.org/trac/ticket/611)'
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#611](https://www.sqlalchemy.org/trac/ticket/611)
- en: '**[orm]**'
  id: totrans-3424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Joined-table inheritance will now generate the primary key columns of all inherited
    classes against the root table of the join only. This implies that each row in
    the root table is distinct to a single instance. If for some rare reason this
    is not desirable, explicit primary_key settings on individual mappers will override
    it.
  id: totrans-3425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加入表继承现在只会针对连接的根表生成所有继承类的主键列。这意味着根表中的每一行都对应一个单独的实例。如果出于某种罕见原因这不是理想的情况，那么在各个映射器上设置显式的主键设置将覆盖它。
- en: '**[orm]**'
  id: totrans-3426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When “polymorphic” flags are used with joined-table or single-table inheritance,
    all identity keys are generated against the root class of the inheritance hierarchy;
    this allows query.get() to work polymorphically using the same caching semantics
    as a non-polymorphic get. Note that this currently does not work with concrete
    inheritance.
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当“多态”标志与连接表或单表继承一起使用时，所有标识键都针对继承层次结构的根类生成；这允许query.get()以与非多态get相同的缓存语义多态工作。请注意，目前这不适用于具体继承。
- en: '**[orm]**'
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Secondary inheritance loading: polymorphic mappers can be constructed *without*
    a select_table argument. inheriting mappers whose tables were not represented
    in the initial load will issue a second SQL query immediately, once per instance
    (i.e. not very efficient for large lists), in order to load the remaining columns.'
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 次要继承加载：可以构建多态映射器，*无需*选择表参数。继承映射器，其表在初始加载中未被表示，将立即发出第二个SQL查询，每个实例一次（即对于大型列表来说效率不高），以加载剩余列。
- en: '**[orm]**'
  id: totrans-3430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Secondary inheritance loading can also move its second query into a column-level
    “deferred” load, via the “polymorphic_fetch” argument, which can be set to ‘select’
    or ‘deferred’
  id: totrans-3431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 次要继承加载也可以将其第二个查询移动到列级“延迟”加载中，通过“polymorphic_fetch”参数，可以设置为‘select’或‘deferred’。
- en: '**[orm]**'
  id: totrans-3432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It’s now possible to map only a subset of available selectable columns onto
    mapper properties, using include_columns/exclude_columns..
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以仅将可用的可选择列的子集映射到映射器属性，使用include_columns/exclude_columns。
- en: 'References: [#696](https://www.sqlalchemy.org/trac/ticket/696)'
  id: totrans-3434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#696](https://www.sqlalchemy.org/trac/ticket/696)
- en: '**[orm]**'
  id: totrans-3435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added undefer_group() MapperOption, sets a set of “deferred” columns joined
    by a “group” to load as “undeferred”.
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了undefer_group() MapperOption，设置一组由“group”连接的“延迟”列以作为“未延迟”加载。
- en: '**[orm]**'
  id: totrans-3437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Rewrite of the “deterministic alias name” logic to be part of the SQL layer,
    produces much simpler alias and label names more in the style of Hibernate
  id: totrans-3438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写了“确定性别名”逻辑，使其成为SQL层的一部分，生成更简单的别名和标签名称，更符合Hibernate的风格。
- en: sql
  id: totrans-3439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Speed! Clause compilation as well as the mechanics of SQL constructs have been
    streamlined and simplified to a significant degree, for a 20-30% improvement of
    the statement construction/compilation overhead of 0.3.
  id: totrans-3441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！子句编译以及SQL构造的机制已经被简化和简化到相当程度，使语句构造/编译的开销减少了20-30%，为0.3。
- en: '**[sql]**'
  id: totrans-3442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: All “type” keyword arguments, such as those to bindparam(), column(), Column(),
    and func.<something>(), renamed to “type_”. Those objects still name their “type”
    attribute as “type”.
  id: totrans-3443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有��type”关键字参数，如bindparam()、column()、Column()和func.<something>()，重命名为“type_”。这些对象仍然将它们的“type”属性命名为“type”。
- en: '**[sql]**'
  id: totrans-3444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: case_sensitive=(True|False) setting removed from schema items, since checking
    this state added a lot of method call overhead and there was no decent reason
    to ever set it to False. Table and column names which are all lower case will
    be treated as case-insensitive (yes we adjust for Oracle’s UPPERCASE style too).
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从模式项中删除了case_sensitive=(True|False)设置，因为检查此状态会增加很多方法调用开销，而且从来没有合理的理由将其设置为False。所有小写的表和列名将被视为不区分大小写（是的，我们也适应了Oracle的大写风格）。
- en: extensions
  id: totrans-3446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-3447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: proxyengine is temporarily removed, pending an actually working replacement.
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: proxyengine暂时移除，等待一个真正有效的替代品。
- en: '**[extensions]**'
  id: totrans-3449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: SelectResults has been replaced by Query. SelectResults / SelectResultsExt still
    exist but just return a slightly modified Query object for backwards-compatibility.
    join_to() method from SelectResults isn’t present anymore, need to use join().
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults已被Query取代。 SelectResults / SelectResultsExt仍然存在，但只是返回一个稍微修改的Query对象以保持向后兼容性。
    SelectResults的join_to()方法不再存在，需要使用join()。
- en: mysql
  id: totrans-3451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Table and column names loaded via reflection are now Unicode.
  id: totrans-3453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过反射加载的表和列名现在是Unicode。
- en: '**[mysql]**'
  id: totrans-3454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: All standard column types are now supported, including SET.
  id: totrans-3455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持所有标准列类型，包括SET。
- en: '**[mysql]**'
  id: totrans-3456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Table reflection can now be performed in as little as one round-trip.
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在一次往返中执行表反射。
- en: '**[mysql]**'
  id: totrans-3458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ANSI and ANSI_QUOTES sql modes are now supported.
  id: totrans-3459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持ANSI和ANSI_QUOTES SQL模式。
- en: '**[mysql]**'
  id: totrans-3460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Indexes are now reflected.
  id: totrans-3461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 索引现在已经反映出来。
- en: oracle
  id: totrans-3462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Very rudimental support for OUT parameters added; use sql.outparam(name, type)
    to set up an OUT parameter, just like bindparam(); after execution, values are
    available via result.out_parameters dictionary.
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对OUT参数的非常基本支持；使用sql.outparam(name, type)设置OUT参数，就像bindparam()一样；执行后，值可以通过result.out_parameters字典获得。
- en: 'References: [#507](https://www.sqlalchemy.org/trac/ticket/507)'
  id: totrans-3465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#507](https://www.sqlalchemy.org/trac/ticket/507)
- en: misc
  id: totrans-3466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[transactions]**'
  id: totrans-3467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added context manager (with statement) support for transactions.
  id: totrans-3468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为事务添加了上下文管理器（with语句）支持。
- en: '**[transactions]**'
  id: totrans-3469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added support for two phase commit, works with mysql and postgres so far.
  id: totrans-3470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持了两阶段提交，目前与mysql和postgres兼容。
- en: '**[transactions]**'
  id: totrans-3471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[transactions]**'
- en: Added a subtransaction implementation that uses savepoints.
  id: totrans-3472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了使用保存点的子事务实现。
- en: '**[transactions]**'
  id: totrans-3473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[事务]**'
- en: Added support for savepoints.
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对保存点的支持。
- en: '**[metadata]**'
  id: totrans-3475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Tables can be reflected from the database en-masse without declaring them in
    advance. MetaData(engine, reflect=True) will load all tables present in the database,
    or use metadata.reflect() for finer control.
  id: totrans-3476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以从数据库中反射表，而无需事先声明它们。MetaData(engine, reflect=True)将加载数据库中存在的所有表，或使用metadata.reflect()进行更精细的控制。
- en: '**[metadata]**'
  id: totrans-3477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: DynamicMetaData has been renamed to ThreadLocalMetaData
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DynamicMetaData已更名为ThreadLocalMetaData。
- en: '**[metadata]**'
  id: totrans-3479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: The ThreadLocalMetaData constructor now takes no arguments.
  id: totrans-3480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ThreadLocalMetaData构造函数现在不接受任何参数。
- en: '**[metadata]**'
  id: totrans-3481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: BoundMetaData has been removed- regular MetaData is equivalent
  id: totrans-3482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BoundMetaData已被移除- 普通的MetaData是等效的。
- en: '**[metadata]**'
  id: totrans-3483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Numeric and Float types now have an “asdecimal” flag; defaults to True for Numeric,
    False for Float. When True, values are returned as decimal.Decimal objects; when
    False, values are returned as float(). The defaults of True/False are already
    the behavior for PG and MySQL’s DBAPI modules.
  id: totrans-3484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数值和浮点类型现在有一个“asdecimal”标志；Numeric默认为True，Float默认为False。当为True时，值以decimal.Decimal对象返回；当为False时，值以float()返回。对于PG和MySQL的DBAPI模块，True/False的默认值已经是行为。
- en: 'References: [#646](https://www.sqlalchemy.org/trac/ticket/646)'
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#646](https://www.sqlalchemy.org/trac/ticket/646)
- en: '**[metadata]**'
  id: totrans-3486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: New SQL operator implementation which removes all hardcoded operators from expression
    structures and moves them into compilation; allows greater flexibility of operator
    compilation; for example, “+” compiles to “||” when used in a string context,
    or “concat(a,b)” on MySQL; whereas in a numeric context it compiles to “+”. Fixes.
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的SQL运算符实现将所有硬编码的运算符从表达式结构中移除，并将它们移到编译中；允许更大的运算符编译灵活性；例如，在字符串上下文中使用“+”时，编译为“||”，或在MySQL上使用“concat(a,b)”；而在数值上下文中编译为“+”。修复。
- en: 'References: [#475](https://www.sqlalchemy.org/trac/ticket/475)'
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#475](https://www.sqlalchemy.org/trac/ticket/475)
- en: '**[metadata]**'
  id: totrans-3489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: ”Anonymous” alias and label names are now generated at SQL compilation time
    in a completely deterministic fashion… no more random hex IDs
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “匿名”别名和标签名称现在在SQL编译时以完全确定性的方式生成…不再是随机的十六进制ID。
- en: '**[metadata]**'
  id: totrans-3491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Significant architectural overhaul to SQL elements (ClauseElement). All elements
    share a common “mutability” framework which allows a consistent approach to in-place
    modifications of elements as well as generative behavior. Improves stability of
    the ORM which makes heavy usage of mutations to SQL expressions.
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SQL元素（ClauseElement）进行了重大的架构改造。所有元素共享一个通用的“可变性”框架，允许对元素进行一致的原地修改以及生成行为。改进了ORM的稳定性，ORM大量使用对SQL表达式的修改。
- en: '**[metadata]**'
  id: totrans-3493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: select() and union()’s now have “generative” behavior. Methods like order_by()
    and group_by() return a *new* instance - the original instance is left unchanged.
    Non-generative methods remain as well.
  id: totrans-3494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()和union()现在具有“生成”行为。像order_by()和group_by()这样的方法返回一个*新*实例-原始实例保持不变。非生成方法也保留。
- en: '**[metadata]**'
  id: totrans-3495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: The internals of select/union vastly simplified- all decision making regarding
    “is subquery” and “correlation” pushed to SQL generation phase. select() elements
    are now *never* mutated by their enclosing containers or by any dialect’s compilation
    process
  id: totrans-3496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select/union的内部大幅简化- 所有关于“是否为子查询”和“相关性”的决策都推迟到SQL生成阶段。select()元素现在*永远*不会被其封闭容器或任何方言的编译过程改变。
- en: 'References: [#52](https://www.sqlalchemy.org/trac/ticket/52), [#569](https://www.sqlalchemy.org/trac/ticket/569)'
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#52](https://www.sqlalchemy.org/trac/ticket/52), [#569](https://www.sqlalchemy.org/trac/ticket/569)
- en: '**[metadata]**'
  id: totrans-3498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: select(scalar=True) argument is deprecated; use select(..).as_scalar(). The
    resulting object obeys the full “column” interface and plays better within expressions.
  id: totrans-3499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select(scalar=True)参数已弃用；使用select(..).as_scalar()。生成的对象遵循完整的“列”接口，并在表达式中更好地发挥作用。
- en: '**[metadata]**'
  id: totrans-3500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added select().with_prefix(‘foo’) allowing any set of keywords to be placed
    before the columns clause of the SELECT
  id: totrans-3501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了select().with_prefix(‘foo’)方法，允许在SELECT语句的列子句之前放置任何关键字。
- en: 'References: [#504](https://www.sqlalchemy.org/trac/ticket/504)'
  id: totrans-3502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#504](https://www.sqlalchemy.org/trac/ticket/504)
- en: '**[metadata]**'
  id: totrans-3503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added array slice support to row[<index>]
  id: totrans-3504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对行[<index>]的数组切片支持。
- en: 'References: [#686](https://www.sqlalchemy.org/trac/ticket/686)'
  id: totrans-3505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#686](https://www.sqlalchemy.org/trac/ticket/686)
- en: '**[metadata]**'
  id: totrans-3506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Result sets make a better attempt at matching the DBAPI types present in cursor.description
    to the TypeEngine objects defined by the dialect, which are then used for result-processing.
    Note this only takes effect for textual SQL; constructed SQL statements always
    have an explicit type map.
  id: totrans-3507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集更好地尝试将cursor.description中存在的DBAPI类型与方言定义的TypeEngine对象进行匹配，然后用于结果处理。请注意，这仅对文本SQL生效；构造的SQL语句始终具有显式的类型映射。
- en: '**[metadata]**'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Result sets from CRUD operations close their underlying cursor immediately and
    will also autoclose the connection if defined for the operation; this allows more
    efficient usage of connections for successive CRUD operations with less chance
    of “dangling connections”.
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CRUD操作的结果集立即关闭其底层游标，并且如果为操作定义了自动关闭连接，则也会自动关闭连接；这样可以更有效地使用连接来进行连续的CRUD操作，减少“悬空连接”的可能性。
- en: '**[metadata]**'
  id: totrans-3510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Column defaults and onupdate Python functions (i.e. passed to ColumnDefault)
    may take zero or one arguments; the one argument is the ExecutionContext, from
    which you can call “context.parameters[someparam]” to access the other bind parameter
    values affixed to the statement. The connection used for the execution is available
    as well so that you can pre-execute statements.
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列默认值和onupdate Python函数（即传递给ColumnDefault的函数）可以接受零个或一个参数；一个参数是ExecutionContext，您可以从中调用“context.parameters[someparam]”来访问附加到语句的其他绑定参数值。执行使用的连接也可用，以便您可以预执行语句。
- en: 'References: [#559](https://www.sqlalchemy.org/trac/ticket/559)'
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#559](https://www.sqlalchemy.org/trac/ticket/559)
- en: '**[metadata]**'
  id: totrans-3513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Added “explicit” create/drop/execute support for sequences (i.e. you can pass
    a “connectable” to each of those methods on Sequence).
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为序列添加了“显式”创建/删除/执行支持（即您可以将“connectable”传递给Sequence上的这些方法）。
- en: '**[metadata]**'
  id: totrans-3515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Better quoting of identifiers when manipulating schemas.
  id: totrans-3516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在操作模式模式时更好地引用标识符。
- en: '**[metadata]**'
  id: totrans-3517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: Standardized the behavior for table reflection where types can’t be located;
    NullType is substituted instead, warning is raised.
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准化了无法定位类型的表反射的行为；NullType将替换为警告被引发。
- en: '**[metadata]**'
  id: totrans-3519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[元数据]**'
- en: ColumnCollection (i.e. the ‘c’ attribute on tables) follows dictionary semantics
    for “__contains__”
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnCollection（即表上的‘c’属性）遵循字典语义中的“__contains__”
- en: 'References: [#606](https://www.sqlalchemy.org/trac/ticket/606)'
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#606](https://www.sqlalchemy.org/trac/ticket/606)
- en: '**[engines]**'
  id: totrans-3522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Speed! The mechanics of result processing and bind parameter processing have
    been overhauled, streamlined and optimized to issue as little method calls as
    possible. Bench tests for mass INSERT and mass rowset iteration both show 0.4
    to be over twice as fast as 0.3, using 68% fewer function calls.
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 速度！结果处理和绑定参数处理的机制已经进行了彻底的改进、简化和优化，以尽可能少地发出方法调用。批量INSERT和批量行集迭代的基准测试都表明0.4版本比0.3版本快两倍以上，使用的函数调用次数减少了68%。
- en: '**[engines]**'
  id: totrans-3524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: You can now hook into the pool lifecycle and run SQL statements or other logic
    at new each DBAPI connection, pool check-out and check-in.
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以钩入池生命周期，并在每次新的DBAPI连接、池签出和签入时运行SQL语句或其他逻辑。
- en: '**[engines]**'
  id: totrans-3526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Connections gain a .properties collection, with contents scoped to the lifetime
    of the underlying DBAPI connection
  id: totrans-3527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接获取一个.properties集合，其内容范围限定在底层DBAPI连接的生命周期内。
- en: '**[engines]**'
  id: totrans-3528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Removed auto_close_cursors and disallow_open_cursors arguments from Pool; reduces
    overhead as cursors are normally closed by ResultProxy and Connection.
  id: totrans-3529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从池中移除了auto_close_cursors和disallow_open_cursors参数；由于游标通常由ResultProxy和Connection关闭，因此减少了开销。
- en: '**[postgres]**'
  id: totrans-3530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Postgres]**'
- en: Added PGArray datatype for using postgres array datatypes.
  id: totrans-3531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了PGArray数据类型，用于使用Postgres数组数据类型。
