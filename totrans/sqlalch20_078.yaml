- en: Column Elements and Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列元素和表达式
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/sqlelement.html](https://docs.sqlalchemy.org/en/20/core/sqlelement.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/sqlelement.html](https://docs.sqlalchemy.org/en/20/core/sqlelement.html)
- en: The expression API consists of a series of classes each of which represents
    a specific lexical element within a SQL string. Composed together into a larger
    structure, they form a statement construct that may be *compiled* into a string
    representation that can be passed to a database. The classes are organized into
    a hierarchy that begins at the basemost [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") class. Key subclasses include [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), which represents the role of any column-based
    expression in a SQL statement, such as in the columns clause, WHERE clause, and
    ORDER BY clause, and [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause"), which represents the role of a token
    that is placed in the FROM clause of a SELECT statement.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式API由一系列类组成，每个类代表SQL字符串中的特定词法元素。将它们组合成一个更大的结构，形成一个语句构造，可以*编译*成一个字符串表示，可以传递给数据库。这些类被组织成一个从最基本的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类开始的层次结构。关键子类包括[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，它代表SQL语句中任何基于列的表达式的角色，例如在列子句、WHERE子句和ORDER
    BY子句中，以及[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")，它代表放置在SELECT语句的FROM子句中的令牌的角色。
- en: '## Column Element Foundational Constructors'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 列元素基础构造函数'
- en: Standalone functions imported from the `sqlalchemy` namespace which are used
    when building up SQLAlchemy Expression Language constructs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从`sqlalchemy`命名空间导入的独立函数，用于构建SQLAlchemy表达语言构造时使用。
- en: '| Object Name | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [and_](#sqlalchemy.sql.expression.and_)(*clauses) | Produce a conjunction
    of expressions joined by `AND`. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [and_](#sqlalchemy.sql.expression.and_)(*clauses) | 生成一个由`AND`连接的表达式的合取。
    |'
- en: '| [bindparam](#sqlalchemy.sql.expression.bindparam)(key[, value, type_, unique,
    ...]) | Produce a “bound expression”. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [bindparam](#sqlalchemy.sql.expression.bindparam)(key[, value, type_, unique,
    ...]) | 生成一个“绑定表达式”。 |'
- en: '| [bitwise_not](#sqlalchemy.sql.expression.bitwise_not)(expr) | Produce a unary
    bitwise NOT clause, typically via the `~` operator. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [bitwise_not](#sqlalchemy.sql.expression.bitwise_not)(expr) | 生成一个一元按位取反子句，通常通过`~`运算符实现。
    |'
- en: '| [case](#sqlalchemy.sql.expression.case)(*whens, [value, else_]) | Produce
    a `CASE` expression. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [case](#sqlalchemy.sql.expression.case)(*whens, [value, else_]) | 生成一个`CASE`表达式。
    |'
- en: '| [cast](#sqlalchemy.sql.expression.cast)(expression, type_) | Produce a `CAST`
    expression. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [cast](#sqlalchemy.sql.expression.cast)(expression, type_) | 生成一个`CAST`表达式。
    |'
- en: '| [column](#sqlalchemy.sql.expression.column)(text[, type_, is_literal, _selectable])
    | Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [column](#sqlalchemy.sql.expression.column)(text[, type_, is_literal, _selectable])
    | 生成一个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")对象。
    |'
- en: '| [custom_op](#sqlalchemy.sql.expression.custom_op) | Represent a ‘custom’
    operator. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [custom_op](#sqlalchemy.sql.expression.custom_op) | 表示一个‘自定义’运算符。 |'
- en: '| [distinct](#sqlalchemy.sql.expression.distinct)(expr) | Produce an column-expression-level
    unary `DISTINCT` clause. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [distinct](#sqlalchemy.sql.expression.distinct)(expr) | 生成一个列表达级别的一元`DISTINCT`子句。
    |'
- en: '| [extract](#sqlalchemy.sql.expression.extract)(field, expr) | Return a [`Extract`](#sqlalchemy.sql.expression.Extract
    "sqlalchemy.sql.expression.Extract") construct. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [extract](#sqlalchemy.sql.expression.extract)(field, expr) | 返回一个[`Extract`](#sqlalchemy.sql.expression.Extract
    "sqlalchemy.sql.expression.Extract")构造。 |'
- en: '| [false](#sqlalchemy.sql.expression.false)() | Return a [`False_`](#sqlalchemy.sql.expression.False_
    "sqlalchemy.sql.expression.False_") construct. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [false](#sqlalchemy.sql.expression.false)() | 返回一个[`False_`](#sqlalchemy.sql.expression.False_
    "sqlalchemy.sql.expression.False_")构造。 |'
- en: '| [func](#sqlalchemy.sql.expression.func) | Generate SQL function expressions.
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [func](#sqlalchemy.sql.expression.func) | 生成SQL函数表达式。 |'
- en: '| [lambda_stmt](#sqlalchemy.sql.expression.lambda_stmt)(lmb[, enable_tracking,
    track_closure_variables, track_on, ...]) | Produce a SQL statement that is cached
    as a lambda. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [lambda_stmt](#sqlalchemy.sql.expression.lambda_stmt)(lmb[, enable_tracking,
    track_closure_variables, track_on, ...]) | 生成一个被缓存为lambda的SQL语句。 |'
- en: '| [literal](#sqlalchemy.sql.expression.literal)(value[, type_, literal_execute])
    | Return a literal clause, bound to a bind parameter. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [literal](#sqlalchemy.sql.expression.literal)(value[, type_, literal_execute])
    | 返回一个文字子句，绑定到绑定参数。 |'
- en: '| [literal_column](#sqlalchemy.sql.expression.literal_column)(text[, type_])
    | Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object that has the [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") flag set to True. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [literal_column](#sqlalchemy.sql.expression.literal_column)(text[, type_])
    | 生成一个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")对象，其[`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column")标志设置为True。 |'
- en: '| [not_](#sqlalchemy.sql.expression.not_)(clause) | Return a negation of the
    given clause, i.e. `NOT(clause)`. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [not_](#sqlalchemy.sql.expression.not_)(clause) | 返回给定子句的否定，即`NOT(clause)`。
    |'
- en: '| [null](#sqlalchemy.sql.expression.null)() | Return a constant [`Null`](#sqlalchemy.sql.expression.Null
    "sqlalchemy.sql.expression.Null") construct. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [null](#sqlalchemy.sql.expression.null)() | 返回一个常量[`Null`](#sqlalchemy.sql.expression.Null
    "sqlalchemy.sql.expression.Null")构造。 |'
- en: '| [or_](#sqlalchemy.sql.expression.or_)(*clauses) | Produce a conjunction of
    expressions joined by `OR`. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [or_](#sqlalchemy.sql.expression.or_)(*clauses) | 生成由`OR`连接的表达式的合取。 |'
- en: '| [outparam](#sqlalchemy.sql.expression.outparam)(key[, type_]) | Create an
    ‘OUT’ parameter for usage in functions (stored procedures), for databases which
    support them. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [outparam](#sqlalchemy.sql.expression.outparam)(key[, type_]) | 为可以支持的数据库中的函数（存储过程）创建一个‘OUT’参数。
    |'
- en: '| [quoted_name](#sqlalchemy.sql.expression.quoted_name) | Represent a SQL identifier
    combined with quoting preferences. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [quoted_name](#sqlalchemy.sql.expression.quoted_name) | 表示与引号偏好组合的SQL标识符。
    |'
- en: '| [text](#sqlalchemy.sql.expression.text)(text) | Construct a new [`TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") clause, representing a textual SQL string
    directly. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [text](#sqlalchemy.sql.expression.text)(text) | 构造一个新的[`TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")子句，直接表示文本型的SQL字符串。 |'
- en: '| [true](#sqlalchemy.sql.expression.true)() | Return a constant [`True_`](#sqlalchemy.sql.expression.True_
    "sqlalchemy.sql.expression.True_") construct. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [true](#sqlalchemy.sql.expression.true)() | 返回一个常量[`True_`](#sqlalchemy.sql.expression.True_
    "sqlalchemy.sql.expression.True_")构造。 |'
- en: '| [try_cast](#sqlalchemy.sql.expression.try_cast)(expression, type_) | Produce
    a `TRY_CAST` expression for backends which support it; this is a `CAST` which
    returns NULL for un-castable conversions. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [try_cast](#sqlalchemy.sql.expression.try_cast)(expression, type_) | 为支持它的后端生成一个`TRY_CAST`表达式；这是一个返回NULL的`CAST`，用于不可转换的转换。
    |'
- en: '| [tuple_](#sqlalchemy.sql.expression.tuple_)(*clauses, [types]) | Return a
    [`Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple").
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [tuple_](#sqlalchemy.sql.expression.tuple_)(*clauses, [types]) | 返回一个[`Tuple`](#sqlalchemy.sql.expression.Tuple
    "sqlalchemy.sql.expression.Tuple")。 |'
- en: '| [type_coerce](#sqlalchemy.sql.expression.type_coerce)(expression, type_)
    | Associate a SQL expression with a particular type, without rendering `CAST`.
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [type_coerce](#sqlalchemy.sql.expression.type_coerce)(expression, type_)
    | 将SQL表达式与特定类型关联，而不会渲染`CAST`。 |'
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Produce a conjunction of expressions joined by `AND`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 生成由`AND`连接的表达式的合取。
- en: 'E.g.:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    conjunction is also available using the Python `&` operator (though note that
    compound expressions need to be parenthesized in order to function with Python
    operator precedence behavior):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")合取也可使用Python的`&`运算符（但请注意，为了与Python运算符优先级行为配合使用，复合表达式需要加括号）：'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    operation is also implicit in some cases; the [`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method for example can be invoked multiple
    times against a statement, which will have the effect of each clause being combined
    using [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")操作在某些情况下也是隐式的；例如，[`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")方法可以对语句多次调用，每个子句都会使用[`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")结合：'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    construct must be given at least one positional argument in order to be valid;
    a [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    construct with no arguments is ambiguous. To produce an “empty” or dynamically
    generated [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    expression, from a given list of expressions, a “default” element of [`true()`](#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") (or just `True`) should be specified:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    构造必须至少给定一个位置参数才能有效；没有参数的[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    构造是模棱两可的。为了生成一个“空”或动态生成的[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    表达式，从给定的表达式列表中，应指定一个“默认”元素[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")（或只是`True`）：'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above expression will compile to SQL as the expression `true` or `1 = 1`,
    depending on backend, if no other expressions are present. If expressions are
    present, then the [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    value is ignored as it does not affect the outcome of an AND expression that has
    other elements.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式将编译为 SQL 表达式`true`或`1 = 1`，取决于后端，如果没有其他表达式存在。如果存在表达式，则[`true()`](#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true")值将被忽略，因为它不影响具有其他元素的 AND 表达式的结果。
- en: 'Deprecated since version 1.4: The [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") element now requires that at least one argument
    is passed; creating the [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    construct with no arguments is deprecated, and will emit a deprecation warning
    while continuing to produce a blank SQL string.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    元素现在要求至少传递一个参数；创建没有参数的[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    构造已被弃用，并将发出弃用警告，同时继续生成空白的 SQL 字符串。
- en: See also
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Produce a “bound expression”.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个“绑定表达式”。
- en: The return value is an instance of [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter"); this is a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass which represents a so-called
    “placeholder” value in a SQL expression, the value of which is supplied at the
    point at which the statement in executed against a database connection.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")的一个实例；这是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的子类，表示 SQL 表达式中的所谓“占位符”值，在执行语句时会根据数据库连接提供的值。
- en: In SQLAlchemy, the [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    construct has the ability to carry along the actual value that will be ultimately
    used at expression time. In this way, it serves not just as a “placeholder” for
    eventual population, but also as a means of representing so-called “unsafe” values
    which should not be rendered directly in a SQL statement, but rather should be
    passed along to the [DBAPI](../glossary.html#term-DBAPI) as values which need
    to be correctly escaped and potentially handled for type-safety.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 中，[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    构造具有携带最终在表达式时间使用的实际值的能力。通过这种方式，它不仅作为最终填充的“占位符”，还作为表示所谓“不安全”值的一种方式，这些值不应直接呈现在 SQL
    语句中，而应作为需要正确转义和可能处理类型安全性的值传递给[DBAPI](../glossary.html#term-DBAPI)。
- en: 'When using [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    explicitly, the use case is typically one of traditional deferment of parameters;
    the [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    construct accepts a name which can then be referred to at execution time:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在显式使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")时，典型用例通常是传统参数的延迟；[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造接受一个名称，然后可以在执行时引用：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The above statement, when rendered, will produce SQL similar to:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句在渲染时将生成类似于 SQL 的内容：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order to populate the value of `:username` above, the value would typically
    be applied at execution time to a method like [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充上面的`:username`的值，通常会在执行时将该值应用到[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法中：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Explicit use of [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    is also common when producing UPDATE or DELETE statements that are to be invoked
    multiple times, where the WHERE criterion of the statement is to change on each
    invocation, such as:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当产生要多次调用的UPDATE或DELETE语句时，明确使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")也很常见，其中语句的WHERE条件在每次调用时都会更改，例如：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'SQLAlchemy’s Core expression system makes wide use of [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") in an implicit sense. It is typical that
    Python literal values passed to virtually all SQL expression functions are coerced
    into fixed [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    constructs. For example, given a comparison operation such as:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的核心表达式系统在隐式意义上广泛使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")。几乎所有SQL表达式函数传递给Python字面值都会被强制转换为固定的[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造。例如，给定一个比较操作，如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The above expression will produce a [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") construct, where the left side is
    the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object representing the `name` column, and the right side is a [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") representing the literal value:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式将生成一个[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression "sqlalchemy.sql.expression.BinaryExpression")结构，其中左侧是代表`name`列的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，右侧是代表字面值的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The expression above will render SQL such as:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式将渲染出如下的SQL：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Where the `:name_1` parameter name is an anonymous name. The actual string
    `Wendy` is not in the rendered string, but is carried along where it is later
    used within statement execution. If we invoke a statement like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`:name_1`参数名是匿名的。实际字符串`Wendy`不在渲染的字符串中，但在稍后在语句执行中使用时会一起传递。如果我们调用以下语句：'
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We would see SQL logging output as:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会看到SQL日志输出如下：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Above, we see that `Wendy` is passed as a parameter to the database, while the
    placeholder `:name_1` is rendered in the appropriate form for the target database,
    in this case the PostgreSQL database.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们看到`Wendy`作为参数传递给数据库，而占位符`:name_1`在适当形式下被渲染到目标数据库中，这里是PostgreSQL数据库。
- en: 'Similarly, [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    is invoked automatically when working with [CRUD](../glossary.html#term-CRUD)
    statements as far as the “VALUES” portion is concerned. The [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct produces an `INSERT` expression
    which will, at statement execution time, generate bound placeholders based on
    the arguments passed, as in:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当处理[CRUD](../glossary.html#term-CRUD)语句的“VALUES”部分时，[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")会在自动调用时进行处理。[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造生成一个`INSERT`表达式，在语句执行时，将根据传递的参数生成绑定占位符，如下所示：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The above will produce SQL output as:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作将产生如下的SQL输出：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, at compilation/execution time, rendered a single [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") mirroring the column name `name` as a result
    of the single `name` parameter we passed to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造在编译/执行时，根据我们传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法的单个`name`参数，生成一个单个的[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")镜像列名`name`。'
- en: 'Parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`key` –'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: the key (e.g. the name) for this bind param. Will be used in the generated SQL
    statement for dialects that use named parameters. This value may be modified when
    part of a compilation operation, if other [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects exist with the same key, or
    if its length is too long and truncation is required.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此绑定参数的键（例如名称）。对于使用命名参数的方言，将在生成的 SQL 语句中使用此键。在编译操作的一部分时，如果存在具有相同键的其他 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象，或者如果其长度太长并且需要截断，则可能会修改此值。
- en: If omitted, an “anonymous” name is generated for the bound parameter; when given
    a value to bind, the end result is equivalent to calling upon the [`literal()`](#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") function with a value to bind, particularly
    if the [`bindparam.unique`](#sqlalchemy.sql.expression.bindparam.params.unique
    "sqlalchemy.sql.expression.bindparam") parameter is also provided.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果省略，则为绑定参数生成一个“匿名”名称；当给定一个要绑定的值时，最终结果相当于使用一个值来绑定调用 [`literal()`](#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") 函数，特别是如果还提供了 [`bindparam.unique`](#sqlalchemy.sql.expression.bindparam.params.unique
    "sqlalchemy.sql.expression.bindparam") 参数。
- en: '`value` – Initial value for this bind param. Will be used at statement execution
    time as the value for this parameter passed to the DBAPI, if no other value is
    indicated to the statement execution method for this particular parameter name.
    Defaults to `None`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 此绑定参数的初始值。如果没有为此特定参数名称指示语句执行方法的其他值，则在语句执行时将用作传递给 DBAPI 的此参数的值。默认为
    `None`。'
- en: '`callable_` – A callable function that takes the place of “value”. The function
    will be called at statement execution time to determine the ultimate value. Used
    for scenarios where the actual bind value cannot be determined at the point at
    which the clause construct is created, but embedded bind values are still desirable.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用函数，用于取代“value”。该函数将在语句执行时被调用，以确定最终值。用于无法在创建子句构造时确定实际绑定值，但仍希望使用嵌入式绑定值的情况。'
- en: '`type_` –'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` –'
- en: A [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance representing an optional datatype for this [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"). If not passed, a type may be determined
    automatically for the bind, based on the given value; for example, trivial Python
    types such as `str`, `int`, `bool` may result in the [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"), [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") or [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") types being automatically selected.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示此 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    的可选数据类型的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类或实例。如果未传递，则可以根据给定值自动确定绑定的类型；例如，trivial Python 类型，如 `str`、`int`、`bool` 可能会自动选择
    [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")、[`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 或 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 类型。
- en: The type of a [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    is significant especially in that the type will apply pre-processing to the value
    before it is passed to the database. For example, a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") which refers to a datetime value, and is
    specified as holding the [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") type, may apply conversion needed to the value (such
    as stringification on SQLite) before passing the value to the database.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    的类型尤其重要，因为该类型将在将值传递到数据库之前对值进行预处理。例如，引用 datetime 值的 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，并且被指定为持有 [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") 类型，可能会在将值传递到数据库之前对值进行所需的转换（例如在 SQLite 上进行字符串化）。'
- en: '`unique` – if True, the key name of this [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") will be modified if another [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") of the same name already has been located
    within the containing expression. This flag is used generally by the internals
    when producing so-called “anonymous” bound expressions, it isn’t generally applicable
    to explicitly-named [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    constructs.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique` – 如果为True，则此 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 的键名将被修改，如果同名的另一个 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 已经存在于包含表达式中。这个标志通常由内部使用，当产生所谓的“匿名”绑定表达式时，它通常不适用于明确命名的
    [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    构造。'
- en: '`required` – If `True`, a value is required at execution time. If not passed,
    it defaults to `True` if neither [`bindparam.value`](#sqlalchemy.sql.expression.bindparam.params.value
    "sqlalchemy.sql.expression.bindparam") or [`bindparam.callable`](#sqlalchemy.sql.expression.bindparam.params.callable
    "sqlalchemy.sql.expression.bindparam") were passed. If either of these parameters
    are present, then [`bindparam.required`](#sqlalchemy.sql.expression.bindparam.params.required
    "sqlalchemy.sql.expression.bindparam") defaults to `False`.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required` – 如果为`True`，则在执行时需要一个值。如果未传递，且既未传递 [`bindparam.value`](#sqlalchemy.sql.expression.bindparam.params.value
    "sqlalchemy.sql.expression.bindparam") 也未传递 [`bindparam.callable`](#sqlalchemy.sql.expression.bindparam.params.callable
    "sqlalchemy.sql.expression.bindparam")，则默认为`True`。如果存在这些参数中的任何一个，则 [`bindparam.required`](#sqlalchemy.sql.expression.bindparam.params.required
    "sqlalchemy.sql.expression.bindparam") 默认为`False`。'
- en: '`quote` – True if this parameter name requires quoting and is not currently
    known as a SQLAlchemy reserved word; this currently only applies to the Oracle
    backend, where bound names must sometimes be quoted.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 如果此参数名需要引用，并且当前不被认为是SQLAlchemy保留字，则为True；目前仅适用于Oracle后端，其中绑定名称有时必须被引用。'
- en: '`isoutparam` – if True, the parameter should be treated like a stored procedure
    “OUT” parameter. This applies to backends such as Oracle which support OUT parameters.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isoutparam` – 如果为True，则应将参数视为存储过程的“OUT”参数。这适用于诸如Oracle之类支持OUT参数的后端。'
- en: '`expanding` –'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expanding` –'
- en: if True, this parameter will be treated as an “expanding” parameter at execution
    time; the parameter value is expected to be a sequence, rather than a scalar value,
    and the string SQL statement will be transformed on a per-execution basis to accommodate
    the sequence with a variable number of parameter slots passed to the DBAPI. This
    is to allow statement caching to be used in conjunction with an IN clause.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则此参数在执行时将被视为“扩展”参数；参数值应为序列，而不是标量值，并且字符串SQL语句将在每次执行时进行转换，以适应具有可变数量参数槽的序列传递给DBAPI。这是为了允许语句缓存与IN子句一起使用。
- en: See also
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[Using IN expressions](../orm/extensions/baked.html#baked-in) - with baked
    queries'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用IN表达式](../orm/extensions/baked.html#baked-in) - 使用烘焙查询'
- en: Note
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The “expanding” feature does not support “executemany”- style parameter sets.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “扩展”功能不支持“executemany”式参数集。
- en: New in version 1.2.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.2新增。
- en: 'Changed in version 1.3: the “expanding” bound parameter feature now supports
    empty lists.'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.3更改：现在，“扩展”绑定参数功能支持空列表。
- en: '`literal_execute` –'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`literal_execute` –'
- en: if True, the bound parameter will be rendered in the compile phase with a special
    “POSTCOMPILE” token, and the SQLAlchemy compiler will render the final value of
    the parameter into the SQL statement at statement execution time, omitting the
    value from the parameter dictionary / list passed to DBAPI `cursor.execute()`.
    This produces a similar effect as that of using the `literal_binds`, compilation
    flag, however takes place as the statement is sent to the DBAPI `cursor.execute()`
    method, rather than when the statement is compiled. The primary use of this capability
    is for rendering LIMIT / OFFSET clauses for database drivers that can’t accommodate
    for bound parameters in these contexts, while allowing SQL constructs to be cacheable
    at the compilation level.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则绑定参数将在编译阶段呈现为特殊的“POSTCOMPILE”令牌，并且 SQLAlchemy 编译器将在语句执行时将参数的最终值呈现为
    SQL 语句，省略了传递给 DBAPI `cursor.execute()` 的参数字典/列表中的值。这产生了与使用 `literal_binds` 编译标志类似的效果，但是发生在将语句发送到
    DBAPI `cursor.execute()` 方法时，而不是在语句编译时。此功能的主要用途是在数据库驱动程序无法在这些上下文中容纳绑定参数的情况下呈现
    LIMIT/OFFSET 子句，同时允许 SQL 结构在编译级别可缓存。
- en: 'New in version 1.4: Added “post compile” bound parameters'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能：添加了“编译后”绑定参数
- en: See also
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “post compile” bound parameters used for LIMIT/OFFSET in Oracle, SQL Server](../changelog/migration_14.html#change-4808).'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle、SQL Server 中用于 LIMIT/OFFSET 的新的“编译后”绑定参数](../changelog/migration_14.html#change-4808)。'
- en: See also
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sending Parameters](../tutorial/dbapi_transactions.html#tutorial-sending-parameters)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[发送参数](../tutorial/dbapi_transactions.html#tutorial-sending-parameters) - 在
    [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Produce a unary bitwise NOT clause, typically via the `~` operator.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一元位取反子句，通常通过 `~` 运算符实现。
- en: Not to be confused with boolean negation [`not_()`](#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_").
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 不要与布尔取反 [`not_()`](#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")
    混淆。
- en: New in version 2.0.2.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Produce a `CASE` expression.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 `CASE` 表达式。
- en: The `CASE` construct in SQL is a conditional object that acts somewhat analogously
    to an “if/then” construct in other languages. It returns an instance of [`Case`](#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case").
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的 `CASE` 结构是一个条件对象，其作用类似于其他语言中的“if/then”结构。它返回一个 [`Case`](#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") 的实例。
- en: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    in its usual form is passed a series of “when” constructs, that is, a list of
    conditions and results as tuples:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`case()` 通常形式下传递了一系列“when”构造，即一系列条件和结果的元组：'
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The above statement will produce SQL resembling:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于以下的 SQL：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When simple equality expressions of several values against a single parent
    column are needed, [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    also has a “shorthand” format used via the [`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case") parameter, which is passed a column expression
    to be compared. In this form, the [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") parameter is passed as a dictionary containing
    expressions to be compared against keyed to result expressions. The statement
    below is equivalent to the preceding statement:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要针对单个父列的几个值进行简单等式表达式时，[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    也有一种“简写”格式，通过 [`case.value`](#sqlalchemy.sql.expression.case.params.value "sqlalchemy.sql.expression.case")
    参数传递，该参数传递了要比较的列表达式。在这种形式下，[`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") 参数作为包含要与键入结果表达式比较的表达式的字典传递。下面的语句与前面的语句等效：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The values which are accepted as result values in [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") as well as with [`case.else_`](#sqlalchemy.sql.expression.case.params.else_
    "sqlalchemy.sql.expression.case") are coerced from Python literals into [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs. SQL expressions, e.g. [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs, are accepted as well. To
    coerce a literal string expression into a constant expression rendered inline,
    use the [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    construct, as in:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`case.whens`](#sqlalchemy.sql.expression.case.params.whens "sqlalchemy.sql.expression.case")
    中作为结果值接受的值以及与 [`case.else_`](#sqlalchemy.sql.expression.case.params.else_ "sqlalchemy.sql.expression.case")
    相同的值从 Python 文字转换为 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    构造。 SQL 表达式，例如 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    构造，也被接受。要将文字字符串表达式强制转换为内联渲染的常量表达式，请使用 [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 构造，例如：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The above will render the given constants without using bound parameters for
    the result values (but still for the comparison values), as in:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以上将渲染给定的常量，而不是使用绑定参数作为结果值（但仍然适用于比较值），例如：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Parameters:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*whens` –'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*whens` –'
- en: The criteria to be compared against, [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") accepts two different forms, based on whether
    or not [`case.value`](#sqlalchemy.sql.expression.case.params.value "sqlalchemy.sql.expression.case")
    is used.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要进行比较的条件，[`case.whens`](#sqlalchemy.sql.expression.case.params.whens "sqlalchemy.sql.expression.case")
    接受两种不同形式，基于是否使用了 [`case.value`](#sqlalchemy.sql.expression.case.params.value "sqlalchemy.sql.expression.case")。
- en: 'Changed in version 1.4: the [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    function now accepts the series of WHEN conditions positionally'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版更改：[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    函数现在按位置接受 WHEN 条件的系列。
- en: 'In the first form, it accepts multiple 2-tuples passed as positional arguments;
    each 2-tuple consists of `(<sql expression>, <value>)`, where the SQL expression
    is a boolean expression and “value” is a resulting value, e.g.:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一种形式中，它接受多个以位置参数传递的 2 元组；每个 2 元组由 `(<sql expression>, <value>)` 组成，其中 SQL
    表达式是布尔表达式，而“value”是一个结果值，例如：
- en: '[PRE24]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the second form, it accepts a Python dictionary of comparison values mapped
    to a resulting value; this form requires [`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case") to be present, and values will be compared using
    the `==` operator, e.g.:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第二种形式中，它接受一个将比较值映射到结果值的 Python 字典；此形式需要 [`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case") 存在，并且值将使用 `==` 运算符进行比较，例如：
- en: '[PRE25]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`value` – An optional SQL expression which will be used as a fixed “comparison
    point” for candidate values within a dictionary passed to [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case").'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 一个可选的 SQL 表达式，它将作为传递给 [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") 的字典中的候选值的固定“比较点”。'
- en: '`else_` – An optional SQL expression which will be the evaluated result of
    the `CASE` construct if all expressions within [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") evaluate to false. When omitted, most databases
    will produce a result of NULL if none of the “when” expressions evaluate to true.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else_` – 一个可选的 SQL 表达式，如果 [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") 中的所有表达式都为 false，则将其作为 `CASE` 构造的评估结果。如果省略，大多数数据库在所有“when”表达式均未评估为
    true 时会产生 NULL 结果。'
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Produce a `CAST` expression.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 `CAST` 表达式。
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    returns an instance of [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast").'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    返回 [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    的实例。'
- en: 'E.g.:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The above statement will produce SQL resembling:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将产生类似的 SQL：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function performs two distinct functions when used. The first is that it renders
    the `CAST` expression within the resulting SQL string. The second is that it associates
    the given type (e.g. [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or instance) with the column expression on
    the Python side, which means the expression will take on the expression operator
    behavior associated with that type, as well as the bound-value handling and result-row-handling
    behavior of the type.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用时，[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    函数执行两个不同的功能。第一个是它在结果 SQL 字符串中呈现 `CAST` 表达式。第二个是它将给定类型（例如[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或实例）与 Python 端的列表达式关联起来，这意味着表达式将采用与该类型关联的表达式运算符行为，以及该类型的绑定值处理和结果行处理行为。
- en: An alternative to [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    is the [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    function. This function performs the second task of associating an expression
    with a specific type, but does not render the `CAST` expression in SQL.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")的替代方法是[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")函数。该函数执行了将表达式与特定类型关联的第二个任务，但不会在 SQL 中呈现
    `CAST` 表达式。'
- en: 'Parameters:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`expression` – A SQL expression, such as a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression or a Python string which
    will be coerced into a bound literal value.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression` – 一个 SQL 表达式，比如一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式或一个将被强制转换为绑定文字值的 Python 字符串。'
- en: '`type_` – A [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance indicating the type to which the `CAST` should apply.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个指示 `CAST` 应用的类型的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或实例。'
- en: See also
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制](../tutorial/data_select.html#tutorial-casts)'
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    - an alternative to CAST that results in NULLs when the cast fails, instead of
    raising an error. Only supported by some dialects.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    - CAST 的一种替代方法，当转换失败时返回 NULL，而不是引发错误。仅受一些方言支持。'
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - an alternative to CAST that coerces the type on the Python side only, which
    is often sufficient to generate the correct SQL and data coercion.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - CAST 的替代方法，仅在 Python 端强制转换类型，这通常足以生成正确的 SQL 和数据强制转换。'
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    对象。
- en: 'The [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    is a lightweight analogue to the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") class. The [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function can be invoked with just a name alone,
    as in:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    是 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    类的轻量级模拟。[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    函数可以仅使用名称调用，如下所示：'
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The above statement would produce SQL like:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于以下的 SQL：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once constructed, [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    may be used like any other SQL expression element such as within [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 构造完毕后，[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    可以像其他 SQL 表达式元素一样使用，比如在 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造中：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The text handled by [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    is assumed to be handled like the name of a database column; if the string contains
    mixed case, special characters, or matches a known reserved word on the target
    backend, the column expression will render using the quoting behavior determined
    by the backend. To produce a textual SQL expression that is rendered exactly without
    any quoting, use [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") instead, or pass `True` as the value
    of [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal "sqlalchemy.sql.expression.column").
    Additionally, full SQL statements are best handled using the [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    处理的文本被假定处理为数据库列的名称；如果字符串包含混合大小写、特殊字符，或与目标后端的已知保留字匹配，则列表达式将使用由后端确定的引用行为渲染。若要生成一个确切的文本
    SQL 表达式而不应用任何引用，请改用 [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")，或将 [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") 的值传递为 `True`。此外，完整的 SQL 语句最好使用 [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造处理。
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    can be used in a table-like fashion by combining it with the [`table()`](selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") function (which is the lightweight analogue
    to [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) to produce a working table construct with minimal boilerplate:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    可以通过与 [`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    函数组合（它是 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的轻量级类比）以表格方式使用，以产生一个带有最小样板的可用表构造：'
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    / [`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    construct like that illustrated above can be created in an ad-hoc fashion and
    is not associated with any [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), DDL, or events, unlike its [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") counterpart.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 像上面示例的 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    / [`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造可以以临时方式创建，并且与任何 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")、DDL
    或事件无关，不像它的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对应物。
- en: 'Parameters:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`text` – the text of the element.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` – 元素的文本。'
- en: '`type` – [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object which can associate this [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") with a type.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` – [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    对象，可以将此 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    与类型关联。'
- en: '`is_literal` – if True, the [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") is assumed to be an exact expression
    that will be delivered to the output with no quoting rules applied regardless
    of case sensitive settings. the [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") function essentially invokes [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") while passing `is_literal=True`.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_literal` – 如果为 True，则假定 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 是一个精确的表达式，将以不考虑大小写设置的情况下，无论如何都不会应用任何引用规则传递到输出。
    [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    函数本质上调用 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")，同时传递
    `is_literal=True`。'
- en: See also
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
- en: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")'
- en: '[`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")'
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '[Selecting with Textual Column Expressions](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用文本列表达式进行选择](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Represent a ‘custom’ operator.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 表示“自定义”运算符。
- en: '[`custom_op`](#sqlalchemy.sql.expression.custom_op "sqlalchemy.sql.expression.custom_op")
    is normally instantiated when the [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") or [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") methods are used to create a custom
    operator callable. The class can also be used directly when programmatically constructing
    expressions. E.g. to represent the “factorial” operation:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")或[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法创建自定义运算符可调用时，通常会实例化[`custom_op`](#sqlalchemy.sql.expression.custom_op
    "sqlalchemy.sql.expression.custom_op")。该类也可以直接在编程构建表达式时使用。例如，表示“阶乘”操作：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: See also
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '**Class signature**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.custom_op`](#sqlalchemy.sql.expression.custom_op
    "sqlalchemy.sql.expression.custom_op") (`sqlalchemy.sql.expression.OperatorType`,
    `typing.Generic`)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.custom_op`](#sqlalchemy.sql.expression.custom_op
    "sqlalchemy.sql.expression.custom_op")（`sqlalchemy.sql.expression.OperatorType`，`typing.Generic`）
- en: '[PRE36]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Produce an column-expression-level unary `DISTINCT` clause.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个列表达式级别的一元`DISTINCT`子句。
- en: 'This applies the `DISTINCT` keyword to an **individual column expression**
    (e.g. not the whole statement), and renders **specifically in that column position**;
    this is used for containment within an aggregate function, as in:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在**单独的列表达式**上应用`DISTINCT`关键字（例如，不是整个语句），并**特定地在该列位置呈现**；这用于在聚合函数内部进行包含，如：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The above would produce an statement resembling:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将产生类似于以下语句：
- en: '[PRE38]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    function does **not** apply DISTINCT to the full SELECT statement, instead applying
    a DISTINCT modifier to **individual column expressions**. For general `SELECT
    DISTINCT` support, use the [`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") method on [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")函数**不会**将DISTINCT应用于完整的SELECT语句，而是将DISTINCT修饰符应用于**单独的列表达式**。要获得一般的`SELECT
    DISTINCT`支持，请在[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")上使用[`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct")方法。'
- en: 'The [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    function is also available as a column-level method, e.g. [`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct"), as in:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")函数也可作为列级方法使用，例如[`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct")，如下所示：'
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    operator is different from the [`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") method of [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), which produces a `SELECT` statement with
    `DISTINCT` applied to the result set as a whole, e.g. a `SELECT DISTINCT` expression.
    See that method for further information.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")运算符与[`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct")方法不同，后者会在整个结果集上应用`DISTINCT`，例如`SELECT
    DISTINCT`表达式。有关更多信息，请参阅该方法。'
- en: See also
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct")'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct")'
- en: '[`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct")'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct")'
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Return a [`Extract`](#sqlalchemy.sql.expression.Extract "sqlalchemy.sql.expression.Extract")
    construct.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`Extract`](#sqlalchemy.sql.expression.Extract "sqlalchemy.sql.expression.Extract")
    结构。
- en: This is typically available as [`extract()`](#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") as well as `func.extract` from the [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可从 [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    命名空间中的 `extract()` 或 `func.extract` 中获得此功能。
- en: 'Parameters:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`field` – The field to extract.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field` – 要提取的字段。'
- en: '`expr` – A column or Python scalar expression serving as the right side of
    the `EXTRACT` expression.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expr` – 作为 `EXTRACT` 表达式右侧的列或 Python 标量表达式。'
- en: 'E.g.:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the above example, the statement is used to select ids from the database
    where the `YEAR` component matches a specific value.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，该语句用于从数据库中选择 `YEAR` 组件与特定值匹配的 id。
- en: 'Similarly, one can also select an extracted component:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也可以选择提取的组件：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The implementation of `EXTRACT` may vary across database backends. Users are
    reminded to consult their database documentation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXTRACT` 的实现可能因数据库后端而异。提醒用户查阅其数据库文档。'
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Return a [`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    construct.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    结构。
- en: 'E.g.:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'A backend which does not support true/false constants will render as an expression
    against 1 or 0:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端不支持真/假常量，将呈现为针对 1 或 0 的表达式：
- en: '[PRE45]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    and [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    constants also feature “short circuit” operation within an [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") or [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") conjunction:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    和 [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    常量也在 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    或 [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 连接中具有“短路”操作：'
- en: '[PRE46]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: See also
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")'
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Generate SQL function expressions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 SQL 函数表达式。
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    is a special object instance which generates SQL functions based on name-based
    attributes, e.g.:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    是一个特殊的对象实例，根据基于名称的属性生成 SQL 函数，例如：'
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The returned object is an instance of [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"), and is a column-oriented SQL element like
    any other, and is used in that way:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    的实例，并且是一个面向列的 SQL 元素，可以以这种方式使用：
- en: '[PRE49]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Any name can be given to [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func").
    If the function name is unknown to SQLAlchemy, it will be rendered exactly as
    is. For common SQL functions which SQLAlchemy is aware of, the name may be interpreted
    as a *generic function* which will be compiled appropriately to the target database:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    可以指定任何名称。如果 SQLAlchemy 不认识函数名称，则会按原样呈现。对于 SQLAlchemy 认识的常见 SQL 函数，名称可能被解释为*通用函数*，将根据目标数据库适当编译：'
- en: '[PRE50]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To call functions which are present in dot-separated packages, specify them
    in the same manner:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用点分包中存在的函数，以相同的方式指定它们：
- en: '[PRE51]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'SQLAlchemy can be made aware of the return type of functions to enable type-specific
    lexical and result-based behavior. For example, to ensure that a string-based
    function returns a Unicode value and is similarly treated as a string in expressions,
    specify [`Unicode`](type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    as the type:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 可以了解函数的返回类型，以启用特定类型的词法和基于结果的行为。例如，要确保基于字符串的函数返回 Unicode 值，并且在表达式中类似地对待为字符串，请将
    [`Unicode`](type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    指定为类型：
- en: '[PRE52]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The object returned by a [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    call is usually an instance of [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"). This object meets the “column” interface,
    including comparison and labeling functions. The object can also be passed the
    `Connectable.execute()` method of a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), where it will be wrapped inside of a SELECT statement
    first:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    调用返回的对象通常是 [`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    的实例。该对象符合“列”接口，包括比较和标记函数。该对象也可以传递给 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的 `Connectable.execute()` 方法，它首先将被包装在 SELECT 语句中：
- en: '[PRE53]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In a few exception cases, the [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    accessor will redirect a name to a built-in expression such as [`cast()`](#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") or [`extract()`](#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract"), as these names have well-known meaning but
    are not exactly the same as “functions” from a SQLAlchemy perspective.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些例外情况下，[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    访问器将名称重定向到内置表达式，如 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    或 [`extract()`](#sqlalchemy.sql.expression.extract "sqlalchemy.sql.expression.extract")
    ，因为这些名称具有众所周知的含义，但从 SQLAlchemy 的角度来看并不完全相同于“函数”。
- en: Functions which are interpreted as “generic” functions know how to calculate
    their return type automatically. For a listing of known generic functions, see
    [SQL and Generic Functions](functions.html#generic-functions).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 被解释为“通用”函数的函数知道如何自动计算它们的返回类型。有关已知通用函数的列表，请参阅[SQL 和通用函数](functions.html#generic-functions)。
- en: Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    construct has only limited support for calling standalone “stored procedures”,
    especially those with special parameterization concerns.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    结构对于调用独立的“存储过程”仅有有限的支持，特别是那些具有特殊参数化关注的情况。'
- en: See the section [Calling Stored Procedures and User Defined Functions](connections.html#stored-procedures)
    for details on how to use the DBAPI-level `callproc()` method for fully traditional
    stored procedures.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用 DBAPI 级别的 `callproc()` 方法来完全传统的存储过程的详细信息，请参阅 [调用存储过程和用户定义的函数](connections.html#stored-procedures)
    部分。
- en: See also
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SQL 函数](../tutorial/data_select.html#tutorial-functions) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
- en: '[PRE54]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Produce a SQL statement that is cached as a lambda.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个 SQL 语句制作成一个缓存为 lambda。
- en: The Python code object within the lambda is scanned for both Python literals
    that will become bound parameters as well as closure variables that refer to Core
    or ORM constructs that may vary. The lambda itself will be invoked only once per
    particular set of constructs detected.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 中的 Python 代码对象会被扫描，其中既包括将变为绑定参数的 Python 字面量，也包括引用可能不同的 Core 或 ORM 构造的闭包变量。
    lambda 本身仅在检测到特定一组构造时才会被调用一次。
- en: 'E.g.:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE55]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The object returned is an instance of [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement").
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 的实例。
- en: New in version 1.4.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中新增。
- en: 'Parameters:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`lmb` – a Python function, typically a lambda, which takes no arguments and
    returns a SQL expression construct'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lmb` – 一个 Python 函数，通常是一个 lambda，不接受任何参数并返回一个 SQL 表达式构造'
- en: '`enable_tracking` – when False, all scanning of the given lambda for changes
    in closure variables or bound parameters is disabled. Use for a lambda that produces
    the identical results in all cases with no parameterization.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_tracking` – 当为 False 时，所有对给定 lambda 的扫描，以检测闭包变量或绑定参数的更改都将被禁用。对于在所有情况下都产生相同结果且没有参数化的
    lambda 使用。'
- en: '`track_closure_variables` – when False, changes in closure variables within
    the lambda will not be scanned. Use for a lambda where the state of its closure
    variables will never change the SQL structure returned by the lambda.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_closure_variables` – 当为 False 时，将不会扫描 lambda 中闭包变量的更改。用于闭包变量的状态永远不会改变
    lambda 返回的 SQL 结构的 lambda。'
- en: '`track_bound_values` – when False, bound parameter tracking will be disabled
    for the given lambda. Use for a lambda that either does not produce any bound
    values, or where the initial bound values never change.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_bound_values` – 当为 False 时，将禁用给定 lambda 的绑定参数跟踪。用于不生成任何绑定值的 lambda，或者初始绑定值永远不会更改的
    lambda。'
- en: '`global_track_bound_values` – when False, bound parameter tracking will be
    disabled for the entire statement including additional links added via the [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global_track_bound_values` – 当为 False 时，整个语句的绑定参数跟踪将被禁用，包括通过[`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria")方法添加的其他链接。'
- en: '`lambda_cache` – a dictionary or other mapping-like object where information
    about the lambda’s Python code as well as the tracked closure variables in the
    lambda itself will be stored. Defaults to a global LRU cache. This cache is independent
    of the “compiled_cache” used by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lambda_cache` – 一个字典或其他类似映射的对象，其中将存储有关 lambda 的 Python 代码以及 lambda 本身中跟踪的闭包变量的信息。默认为全局
    LRU 缓存。此缓存独立于 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象使用的“compiled_cache”。'
- en: See also
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Lambdas to add significant speed gains to statement production](connections.html#engine-lambda-caching)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Lambdas 为语句生成添加显著的速度增益](connections.html#engine-lambda-caching)'
- en: '[PRE56]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Return a literal clause, bound to a bind parameter.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个文字子句，绑定到一个绑定参数。
- en: Literal clauses are created automatically when non- [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects (such as strings, ints, dates,
    etc.) are used in a comparison operation with a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass, such as a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. Use this function to force the generation
    of a literal clause, which will be created as a [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") with a bound value.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用非[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")对象（例如字符串、整数、日期等）与[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")子类（如 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象）进行比较操作时，会自动创建文字子句。使用此函数强制生成文字子句，它将作为具有绑定值的 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 创建。
- en: 'Parameters:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`value` – the value to be bound. Can be any Python object supported by the
    underlying DB-API, or is translatable via the given type argument.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 要绑定的值。可以是底层 DB-API 支持的任何 Python 对象，或者可以通过给定的类型参数进行翻译。'
- en: '`type_` – an optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") which will provide bind-parameter translation for
    this literal.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个可选的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")，它将为此文字提供绑定参数翻译。'
- en: '`literal_execute` –'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`literal_execute` –'
- en: optional bool, when True, the SQL engine will attempt to render the bound value
    directly in the SQL statement at execution time rather than providing as a parameter
    value.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选布尔值，当为 True 时，SQL 引擎将尝试在执行时直接在 SQL 语句中渲染绑定值，而不是提供作为参数值。
- en: New in version 2.0.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE57]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object that has the [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") flag set to True.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个具有 [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") 标志设置为 True 的 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 对象。
- en: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    is similar to [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column"),
    except that it is more often used as a “standalone” column expression that renders
    exactly as stated; while [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    stores a string name that will be assumed to be part of a table and may be quoted
    as such, [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    can be that, or any other arbitrary column-oriented expression.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    类似于 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")，但更常用作“独立的”列表达式，其呈现方式与所述完全相同；而
    [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    存储一个假设为表的一部分并可能被引用为此类的字符串名称， [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") 可以是那个，或任何其他任意的面向列的表达式。'
- en: 'Parameters:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`text` – the text of the expression; can be any SQL expression. Quoting rules
    will not be applied. To specify a column-name expression which should be subject
    to quoting rules, use the [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    function.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` – 表达式的文本；可以是任何 SQL 表达式。引号规则不会应用。要指定应受引号规则约束的列名表达式，请使用 [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 函数。'
- en: '`type_` – an optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object which will provide result-set translation
    and additional expression semantics for this column. If left as `None` the type
    will be [`NullType`](type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType").'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个可选的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    对象，将为该列提供结果集转换和附加表达语义。如果保持为 `None`，类型将是 [`NullType`](type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")。'
- en: See also
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '[Selecting with Textual Column Expressions](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用文本列表达式进行选择](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
- en: '[PRE58]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Return a negation of the given clause, i.e. `NOT(clause)`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定子句的否定，即 `NOT(clause)`。
- en: The `~` operator is also overloaded on all [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclasses to produce the same result.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`~` 操作符也对所有 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    子类进行了重载，以产生相同的结果。'
- en: '[PRE59]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return a constant [`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    construct.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个常量 [`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    结构。
- en: '[PRE60]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Produce a conjunction of expressions joined by `OR`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 生成由 `OR` 连接的表达式。
- en: 'E.g.:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE61]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    conjunction is also available using the Python `|` operator (though note that
    compound expressions need to be parenthesized in order to function with Python
    operator precedence behavior):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 连接词也可使用
    Python 的 `|` 操作符（但请注意，复合表达式需要用括号括起来以与 Python 运算符优先级行为一起使用）：'
- en: '[PRE62]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    construct must be given at least one positional argument in order to be valid;
    a [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") construct
    with no arguments is ambiguous. To produce an “empty” or dynamically generated
    [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") expression,
    from a given list of expressions, a “default” element of [`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") (or just `False`) should be specified:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 结构必须至少给定一个位置参数才能有效；没有参数的
    [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 结构是模棱两可的。为了生成一个“空”的或动态生成的
    [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 表达式，从给定的表达式列表中，应指定一个“默认”元素
    [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    （或只是 `False`）：'
- en: '[PRE63]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The above expression will compile to SQL as the expression `false` or `0 = 1`,
    depending on backend, if no other expressions are present. If expressions are
    present, then the [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    value is ignored as it does not affect the outcome of an OR expression which has
    other elements.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他表达式存在，则上述表达式将编译为SQL表达式`false`或`0 = 1`，取决于后端。 如果存在表达式，则[`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")值将被忽略，因为它不影响具有其他元素的OR表达式的结果。
- en: 'Deprecated since version 1.4: The [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") element now requires that at least one argument
    is passed; creating the [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    construct with no arguments is deprecated, and will emit a deprecation warning
    while continuing to produce a blank SQL string.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")元素现在要求至少传递一个参数；创建没有参数的[`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")结构已被弃用，并将发出弃用警告，同时继续生成空白SQL字符串。
- en: See also
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")'
- en: '[PRE64]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Create an ‘OUT’ parameter for usage in functions (stored procedures), for databases
    which support them.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 为在支持它们的数据库中使用的函数（存储过程）创建一个“OUT”参数。
- en: The `outparam` can be used like a regular function parameter. The “output” value
    will be available from the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object via its `out_parameters` attribute, which
    returns a dictionary containing the values.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`outparam`可以像常规函数参数一样使用。 “输出”值将通过其`out_parameters`属性从[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")对象中获取，该属性返回一个包含值的字典。'
- en: '[PRE65]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Construct a new [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    clause, representing a textual SQL string directly.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")子句，直接表示文本SQL字符串。
- en: 'E.g.:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE66]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The advantages [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    provides over a plain string are backend-neutral support for bind parameters,
    per-statement execution options, as well as bind parameter and result-column typing
    behavior, allowing SQLAlchemy type constructs to play a role when executing a
    statement that is specified literally. The construct can also be provided with
    a `.c` collection of column elements, allowing it to be embedded in other SQL
    expression constructs as a subquery.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")相对于普通字符串提供的优势是，后端中立地支持绑定参数，每个语句的执行选项，以及绑定参数和结果列类型行为，允许SQLAlchemy类型构造在执行字面上指定的语句时发挥作用。该构造还可以提供一个`.c`列元素集合，允许将其嵌入到其他SQL表达式构造中作为子查询。'
- en: 'Bind parameters are specified by name, using the format `:name`. E.g.:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 通过名称指定绑定参数，使用格式`:name`。 例如：
- en: '[PRE67]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'For SQL statements where a colon is required verbatim, as within an inline
    string, use a backslash to escape:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要直接使用冒号的SQL语句，如在内联字符串中，使用反斜杠进行转义：
- en: '[PRE68]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct includes methods which can provide information about the bound parameters
    as well as the column values which would be returned from the textual statement,
    assuming it’s an executable SELECT type of statement. The [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method is used to provide bound
    parameter detail, and [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method allows specification of
    return columns including names and types:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")构造包括可以提供有关绑定参数的信息以及从文本语句返回的列值的方法，假设它是可执行的SELECT类型语句。
    [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams "sqlalchemy.sql.expression.TextClause.bindparams")方法用于提供绑定参数详细信息，[`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法允许指定返回列，包括名称和类型：'
- en: '[PRE69]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct is used in cases when a literal string SQL fragment is specified as
    part of a larger query, such as for the WHERE clause of a SELECT statement:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定较大查询的一部分（例如SELECT语句的WHERE子句）时，使用[`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造表示文本字符串SQL片段的情况：
- en: '[PRE70]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    is also used for the construction of a full, standalone statement using plain
    text. As such, SQLAlchemy refers to it as an [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") object and may be used like any other
    statement passed to an `.execute()` method.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")还用于构建完整的、独立的文本语句。因此，SQLAlchemy将其称为[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")对象，并且可以像传递给`.execute()`方法的任何其他语句一样使用。'
- en: 'Parameters:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**text** –'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**text** –'
- en: the text of the SQL statement to be created. Use `:<param>` to specify bind
    parameters; they will be compiled to their engine-specific format.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建的SQL语句的文本。使用`:<param>`指定绑定参数；它们将被编译为特定于引擎的格式。
- en: Warning
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`text.text`](#sqlalchemy.sql.expression.text.params.text "sqlalchemy.sql.expression.text")
    argument to [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    can be passed as a Python string argument, which will be treated as **trusted
    SQL text** and rendered as given. **DO NOT PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")函数的[`text.text`](#sqlalchemy.sql.expression.text.params.text
    "sqlalchemy.sql.expression.text")参数可以作为Python字符串参数传递，它将被视为**受信任的SQL文本**并按照给定的方式呈现。**不要将不受信任的输入传递给此参数**。'
- en: See also
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 亦可参见
- en: '[Selecting with Textual Column Expressions](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用文本列表达式进行选择](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
- en: '[PRE71]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Return a constant [`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    construct.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个常量[`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")构造。
- en: 'E.g.:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE72]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'A backend which does not support true/false constants will render as an expression
    against 1 or 0:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持true/false常量的后端将呈现为针对1或0的表达式：
- en: '[PRE73]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    and [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    constants also feature “short circuit” operation within an [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") or [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") conjunction:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")和[`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")常量在[`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")或[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")连接中也具有“短路”操作：'
- en: '[PRE74]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: See also
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 亦可参见
- en: '[`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")'
- en: '[PRE75]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Produce a `TRY_CAST` expression for backends which support it; this is a `CAST`
    which returns NULL for un-castable conversions.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 为支持它的后端生成一个`TRY_CAST`表达式；这是一个返回不可转换的转换为NULL的`CAST`。
- en: In SQLAlchemy, this construct is supported **only** by the SQL Server dialect,
    and will raise a [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used on other included backends. However, third
    party backends may also support this construct.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，这种构造仅由SQL Server方言支持，如果在其他包含的后端使用将引发[`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。但是，第三方后端也可能支持此构造。
- en: Tip
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: As [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    originates from the SQL Server dialect, it’s importable both from `sqlalchemy.`
    as well as from `sqlalchemy.dialects.mssql`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")源自SQL
    Server方言，因此可以从`sqlalchemy.`以及`sqlalchemy.dialects.mssql`导入它。
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    returns an instance of [`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    and generally behaves similarly to the [`Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") construct; at the SQL level, the difference
    between `CAST` and `TRY_CAST` is that `TRY_CAST` returns NULL for an un-castable
    expression, such as attempting to cast a string `"hi"` to an integer value.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    返回 [`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    的实例，并且通常行为类似于 [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    构造；在 SQL 级别上，`CAST` 和 `TRY_CAST` 之间的区别是 `TRY_CAST` 对于无法转换的表达式（例如尝试将字符串`"hi"`转换为整数值）返回
    NULL。'
- en: 'E.g.:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE76]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The above would render on Microsoft SQL Server as:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft SQL Server 上，上述内容将呈现为：
- en: '[PRE77]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'New in version 2.0.14: [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    has been generalized from the SQL Server dialect into a general use construct
    that may be supported by additional dialects.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.14 开始：[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    已从 SQL Server 方言泛化为一个通用构造，可能会受到其他方言的支持。
- en: '[PRE78]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Return a [`Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple").
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple")。
- en: Main usage is to produce a composite IN construct using [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用途是使用[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")生成复合的 IN 构造。
- en: '[PRE79]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Changed in version 1.3.6: Added support for SQLite IN tuples.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.3.6 中更改：添加对 SQLite IN 元组的支持。
- en: Warning
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The composite IN construct is not supported by all backends, and is currently
    known to work on PostgreSQL, MySQL, and SQLite. Unsupported backends will raise
    a subclass of [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    when such an expression is invoked.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有后端都支持复合的 IN 构造，目前已知的仅支持 PostgreSQL、MySQL 和 SQLite。当调用这样的表达式时，不支持的后端将引发 [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError") 的子类。
- en: '[PRE80]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Associate a SQL expression with a particular type, without rendering `CAST`.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 将 SQL 表达式与特定类型关联，而不会渲染`CAST`。
- en: 'E.g.:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE81]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The above construct will produce a [`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce
    "sqlalchemy.sql.expression.TypeCoerce") object, which does not modify the rendering
    in any way on the SQL side, with the possible exception of a generated label if
    used in a columns clause context:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 上述构造将生成一个 [`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce "sqlalchemy.sql.expression.TypeCoerce")
    对象，在 SQL 方面不会以任何方式修改呈现，可能的例外情况是在列子句上下文中使用时生成的标签：
- en: '[PRE82]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: When result rows are fetched, the `StringDateTime` type processor will be applied
    to result rows on behalf of the `date_string` column.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 当提取结果行时，`StringDateTime` 类型处理器将代表`date_string`列应用于结果行。
- en: Note
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: the [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    construct does not render any SQL syntax of its own, including that it does not
    imply parenthesization. Please use [`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") if explicit parenthesization
    is required.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    构造不会渲染任何自己的 SQL 语法，包括不会暗示添加括号。如果需要显式添加括号，请使用 [`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group")。'
- en: 'In order to provide a named label for the expression, use [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label"):'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为表达式提供一个命名标签，请使用 [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label")：
- en: '[PRE83]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'A type that features bound-value handling will also have that behavior take
    effect when literal values or [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs are passed to [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") as targets. For example, if a type implements
    the [`TypeEngine.bind_expression()`](type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") method or [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method or equivalent, these functions
    will take effect at statement compilation/execution time when a literal value
    is passed, as in:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 具有绑定值处理功能的类型在将文字值或[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")构造传递给[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")作为目标时也会产生该行为。例如，如果一个类型实现了[`TypeEngine.bind_expression()`](type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression")方法或[`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor")方法或等效方法，这些函数将在语句编译/执行时生效，当传递文字值时，如：
- en: '[PRE84]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'When using [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    with composed expressions, note that **parenthesis are not applied**. If [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") is being used in an operator context
    where the parenthesis normally present from CAST are necessary, use the [`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") method:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")与组合表达式时，请注意**不要应用括号**。如果在需要
    CAST 中通常存在的括号的运算符上下文中使用[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")，请使用[`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group")方法：
- en: '[PRE85]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Parameters:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`expression` – A SQL expression, such as a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression or a Python string which
    will be coerced into a bound literal value.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression` – 一个 SQL 表达式，例如一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式或一个将被强制转换为绑定文字值的 Python 字符串。'
- en: '`type_` – A [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance indicating the type to which the expression is coerced.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个指示表达式被强制转换为的类型的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或实例。'
- en: See also
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[PRE86]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Represent a SQL identifier combined with quoting preferences.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与引号偏好结合的 SQL 标识符。
- en: '[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    is a Python unicode/str subclass which represents a particular identifier name
    along with a `quote` flag. This `quote` flag, when set to `True` or `False`, overrides
    automatic quoting behavior for this identifier in order to either unconditionally
    quote or to not quote the name. If left at its default of `None`, quoting behavior
    is applied to the identifier on a per-backend basis based on an examination of
    the token itself.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")是一个表示特定标识符名称的
    Python unicode/str 子类，以及一个`quote`标志。当将此`quote`标志设置为`True`或`False`时，将覆盖此标识符的自动引号行为，以便无条件引用或不引用名称。如果保持默认值`None`，则引号行为将根据对标记本身的检查在每个后端基础上应用于标识符。'
- en: A [`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    object with `quote=True` is also prevented from being modified in the case of
    a so-called “name normalize” option. Certain database backends, such as Oracle,
    Firebird, and DB2 “normalize” case-insensitive names as uppercase. The SQLAlchemy
    dialects for these backends convert from SQLAlchemy’s lower-case-means-insensitive
    convention to the upper-case-means-insensitive conventions of those backends.
    The `quote=True` flag here will prevent this conversion from occurring to support
    an identifier that’s quoted as all lower case against such a backend.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    对象的 `quote=True` 时，还会防止出现所谓的“名称规范化”选项。某些数据库后端（如 Oracle、Firebird 和 DB2）将不区分大小写的名称规范化为大写。这些后端的
    SQLAlchemy 方言将从 SQLAlchemy 的小写表示不敏感约定转换为这些后端的大写表示不敏感约定。在此处的 `quote=True` 标志将阻止此转换发生，以支持针对此类后端引用的标识符为全部小写。
- en: 'The [`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    object is normally created automatically when specifying the name for key schema
    constructs such as [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    and others. The class can also be passed explicitly as the name to any function
    that receives a name which can be quoted. Such as to use the `Engine.has_table()`
    method with an unconditionally quoted name:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    对象通常在指定键架构构造的名称时自动生成，如 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 等。该类也可以显式地作为任何接收可引用名称的函数的名称传递。例如，要在未经条件引用的名称上使用 `Engine.has_table()`
    方法：'
- en: '[PRE87]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The above logic will run the “has table” logic against the Oracle backend, passing
    the name exactly as `"some_table"` without converting to upper case.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 上述逻辑将针对 Oracle 后端运行“has table”逻辑，将名称传递为 `"some_table"`，而不会转换为大写。
- en: 'Changed in version 1.2: The [`quoted_name`](#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now importable from `sqlalchemy.sql`,
    in addition to the previous location of `sqlalchemy.sql.elements`.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.2 开始更改：[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    构造现在可以从 `sqlalchemy.sql` 导入，而不仅仅是以前的位置 `sqlalchemy.sql.elements`。
- en: '**Members**'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[quote](#sqlalchemy.sql.expression.quoted_name.quote)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[quote](#sqlalchemy.sql.expression.quoted_name.quote)'
- en: '**Class signature**'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.quoted_name`](#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    `builtins.str`)
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.quoted_name`](#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    `builtins.str`)
- en: '[PRE88]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'whether the string should be unconditionally quoted  ## Column Element Modifier
    Constructors'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '字符串是否应该被无条件引用  ## Column Element Modifier Constructors'
- en: Functions listed here are more commonly available as methods from any [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") construct, for example, the [`label()`](#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label") function is usually invoked via the [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 此处列出的函数通常作为任何 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    构造的方法更常见。例如，[`label()`](#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")
    函数通常通过 [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") 方法调用。
- en: '| Object Name | Description |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [all_](#sqlalchemy.sql.expression.all_)(expr) | Produce an ALL expression.
    |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| [all_](#sqlalchemy.sql.expression.all_)(expr) | 生成一个 ALL 表达式。 |'
- en: '| [any_](#sqlalchemy.sql.expression.any_)(expr) | Produce an ANY expression.
    |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| [any_](#sqlalchemy.sql.expression.any_)(expr) | 生成一个 ANY 表达式。 |'
- en: '| [asc](#sqlalchemy.sql.expression.asc)(column) | Produce an ascending `ORDER
    BY` clause element. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| [asc](#sqlalchemy.sql.expression.asc)(column) | 生成一个升序的 `ORDER BY` 子句元素。
    |'
- en: '| [between](#sqlalchemy.sql.expression.between)(expr, lower_bound, upper_bound[,
    symmetric]) | Produce a `BETWEEN` predicate clause. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| [between](#sqlalchemy.sql.expression.between)(expr, lower_bound, upper_bound[,
    symmetric]) | 生成一个 `BETWEEN` 谓词子句。 |'
- en: '| [collate](#sqlalchemy.sql.expression.collate)(expression, collation) | Return
    the clause `expression COLLATE collation`. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| [collate](#sqlalchemy.sql.expression.collate)(expression, collation) | 返回子句
    `expression COLLATE collation`。 |'
- en: '| [desc](#sqlalchemy.sql.expression.desc)(column) | Produce a descending `ORDER
    BY` clause element. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| [desc](#sqlalchemy.sql.expression.desc)(column) | 生成一个降序的 `ORDER BY` 子句元素。
    |'
- en: '| [funcfilter](#sqlalchemy.sql.expression.funcfilter)(func, *criterion) | Produce
    a [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    object against a function. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| [funcfilter](#sqlalchemy.sql.expression.funcfilter)(func, *criterion) | 生成一个
    [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    对象来对函数进行操作。 |'
- en: '| [label](#sqlalchemy.sql.expression.label)(name, element[, type_]) | Return
    a [`Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    object for the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"). |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| [label](#sqlalchemy.sql.expression.label)(name, element[, type_]) | 返回给定
    [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    的 [`Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    对象。 |'
- en: '| [nulls_first](#sqlalchemy.sql.expression.nulls_first)(column) | Produce the
    `NULLS FIRST` modifier for an `ORDER BY` expression. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| [nulls_first](#sqlalchemy.sql.expression.nulls_first)(column) | 生成一个用于 `ORDER
    BY` 表达式的 `NULLS FIRST` 修饰符。 |'
- en: '| [nulls_last](#sqlalchemy.sql.expression.nulls_last)(column) | Produce the
    `NULLS LAST` modifier for an `ORDER BY` expression. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| [nulls_last](#sqlalchemy.sql.expression.nulls_last)(column) | 生成一个用于 `ORDER
    BY` 表达式的 `NULLS LAST` 修饰符。 |'
- en: '| [nullsfirst](#sqlalchemy.sql.expression.nullsfirst) | Synonym for the [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") function. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| [nullsfirst](#sqlalchemy.sql.expression.nullsfirst) | [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 函数的同义词。 |'
- en: '| [nullslast](#sqlalchemy.sql.expression.nullslast) | Legacy synonym for the
    [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    function. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| [nullslast](#sqlalchemy.sql.expression.nullslast) | [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 函数的传统同义词。 |'
- en: '| [over](#sqlalchemy.sql.expression.over)(element[, partition_by, order_by,
    range_, ...]) | Produce an [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    object against a function. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| [over](#sqlalchemy.sql.expression.over)(element[, partition_by, order_by,
    range_, ...]) | 生成一个 [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    对象来对函数进行操作。 |'
- en: '| [within_group](#sqlalchemy.sql.expression.within_group)(element, *order_by)
    | Produce a [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    object against a function. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [within_group](#sqlalchemy.sql.expression.within_group)(element, *order_by)
    | 生成一个 [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    对象来对函数进行操作。 |'
- en: '[PRE89]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Produce an ALL expression.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 ALL 表达式。
- en: 'For dialects such as that of PostgreSQL, this operator applies to usage of
    the [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype, for that of MySQL, it may apply to a subquery. e.g.:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 PostgreSQL 的方言，这个运算符适用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 数据类型的用法，对于 MySQL，它可能适用于子查询。例如：
- en: '[PRE90]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Comparison to NULL may work using `None`:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NULL 的比较可以使用 `None`：
- en: '[PRE91]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The any_() / all_() operators also feature a special “operand flipping” behavior
    such that if any_() / all_() are used on the left side of a comparison using a
    standalone operator such as `==`, `!=`, etc. (not including operator methods such
    as [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_"))
    the rendered expression is flipped:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`any_()` / `all_()` 运算符还具有特殊的“操作数翻转”行为，即如果 `any_()` / `all_()` 用于比较的左侧是独立运算符，如
    `==`、`!=` 等（不包括操作符方法，比如 [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")），则渲染的表达式会被翻转：'
- en: '[PRE92]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Or with `None`, which note will not perform the usual step of rendering “IS”
    as is normally the case for NULL:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `None`，需要注意的是，通常情况下不会像对待 NULL 一样渲染 “IS”：
- en: '[PRE93]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Changed in version 1.4.26: repaired the use of any_() / all_() comparing to
    NULL on the right side to be flipped to the left.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.26 开始更改：修复了 any_() / all_() 将 NULL 与右侧比较时翻转为左侧的问题。
- en: 'The column-level [`ColumnElement.all_()`](#sqlalchemy.sql.expression.ColumnElement.all_
    "sqlalchemy.sql.expression.ColumnElement.all_") method (not to be confused with
    [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") level
    [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all"))
    is shorthand for `all_(col)`:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 列级别的 [`ColumnElement.all_()`](#sqlalchemy.sql.expression.ColumnElement.all_
    "sqlalchemy.sql.expression.ColumnElement.all_") 方法（不要与 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 级别的 [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 混淆）是 `all_(col)` 的速记形式：
- en: '[PRE94]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: See also
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")'
- en: '[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
- en: '[PRE95]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Produce an ANY expression.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 ANY 表达式。
- en: 'For dialects such as that of PostgreSQL, this operator applies to usage of
    the [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype, for that of MySQL, it may apply to a subquery. e.g.:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 PostgreSQL 这样的方言，此运算符适用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 数据类型的使用，对于 MySQL，它可能适用于子查询。例如：
- en: '[PRE96]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Comparison to NULL may work using `None` or [`null()`](#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null"):'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `None` 或 [`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    可能会与 NULL 进行比较：
- en: '[PRE97]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The any_() / all_() operators also feature a special “operand flipping” behavior
    such that if any_() / all_() are used on the left side of a comparison using a
    standalone operator such as `==`, `!=`, etc. (not including operator methods such
    as [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_"))
    the rendered expression is flipped:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: any_() / all_() 运算符还具有特殊的“操作数翻转”行为，即如果 any_() / all_() 用于比较的左侧，使用独立运算符如 `==`、`!=`
    等（不包括操作符方法如 [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")）则渲染的表达式会被翻转：
- en: '[PRE98]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Or with `None`, which note will not perform the usual step of rendering “IS”
    as is normally the case for NULL:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `None`，这个注释不会执行通常用于 NULL 的“IS”渲染步骤：
- en: '[PRE99]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Changed in version 1.4.26: repaired the use of any_() / all_() comparing to
    NULL on the right side to be flipped to the left.'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.26 中更改：修复了 any_() / all_() 与右侧 NULL 进行比较时翻转到左侧的问题。
- en: 'The column-level [`ColumnElement.any_()`](#sqlalchemy.sql.expression.ColumnElement.any_
    "sqlalchemy.sql.expression.ColumnElement.any_") method (not to be confused with
    [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") level
    [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any"))
    is shorthand for `any_(col)`:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 列级别的 [`ColumnElement.any_()`](#sqlalchemy.sql.expression.ColumnElement.any_
    "sqlalchemy.sql.expression.ColumnElement.any_") 方法（不要与 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 级别的 [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 混淆）是 `any_(col)` 的简写：
- en: '[PRE100]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: See also
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")'
- en: '[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
- en: '[PRE101]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Produce an ascending `ORDER BY` clause element.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个升序的 `ORDER BY` 子句元素。
- en: 'e.g.:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE102]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'will produce SQL as:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生 SQL 如下：
- en: '[PRE103]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    function is a standalone version of the [`ColumnElement.asc()`](#sqlalchemy.sql.expression.ColumnElement.asc
    "sqlalchemy.sql.expression.ColumnElement.asc") method available on all SQL expressions,
    e.g.:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc") 函数是所有
    SQL 表达式上可用的 [`ColumnElement.asc()`](#sqlalchemy.sql.expression.ColumnElement.asc
    "sqlalchemy.sql.expression.ColumnElement.asc") 方法的独立版本，例如：'
- en: '[PRE104]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Parameters:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**column** – A [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    (e.g. scalar SQL expression) with which to apply the [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") operation.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '**column** – 一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")（例如标量 SQL 表达式），用于应用 [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") 操作。'
- en: See also
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE105]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Produce a `BETWEEN` predicate clause.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 `BETWEEN` 谓词子句。
- en: 'E.g.:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE106]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Would produce SQL resembling:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 会产生类似的 SQL：
- en: '[PRE107]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    function is a standalone version of the [`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between") method available on all SQL
    expressions, as in:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")函数是所有
    SQL 表达式上都可用的[`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between")方法的独立版本，如下所示：'
- en: '[PRE108]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'All arguments passed to [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between"),
    including the left side column expression, are coerced from Python scalar values
    if a the value is not a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass. For example, three fixed
    values can be compared as in:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 所有传递给[`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")的参数，包括左侧列表达式，如果值不是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")子类，则从 Python 标量值转换。例如，可以像这样比较三个固定值：
- en: '[PRE109]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Which would produce:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生：
- en: '[PRE110]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Parameters:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`expr` – a column expression, typically a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") instance or alternatively a Python
    scalar expression to be coerced into a column expression, serving as the left
    side of the `BETWEEN` expression.'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expr` – 一个列表达式，通常是一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实例，或者作为要强制转换为列表达式的 Python 标量表达式，用作`BETWEEN`表达式的左侧。'
- en: '`lower_bound` – a column or Python scalar expression serving as the lower bound
    of the right side of the `BETWEEN` expression.'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower_bound` – 作为`BETWEEN`表达式右侧下限的列或 Python 标量表达式。'
- en: '`upper_bound` – a column or Python scalar expression serving as the upper bound
    of the right side of the `BETWEEN` expression.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upper_bound` – 作为`BETWEEN`表达式右侧上限的列或 Python 标量表达式。'
- en: '`symmetric` – if True, will render “ BETWEEN SYMMETRIC “. Note that not all
    databases support this syntax.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symmetric` – 如果为 True，则渲染“ BETWEEN SYMMETRIC ”。请注意，并非所有数据库都支持此语法。'
- en: See also
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between")'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between")'
- en: '[PRE111]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Return the clause `expression COLLATE collation`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 返回子句`expression COLLATE collation`。
- en: 'e.g.:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE112]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'produces:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE113]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: The collation expression is also quoted if it is a case sensitive identifier,
    e.g. contains uppercase characters.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 如果排序表达式是大小写敏感的标识符，例如包含大写字符，则排序表达式也会被引用。
- en: 'Changed in version 1.2: quoting is automatically applied to COLLATE expressions
    if they are case sensitive.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.2 开始更改：如果 COLLATE 表达式是大小写敏感的，则会自动应用引用。
- en: '[PRE114]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Produce a descending `ORDER BY` clause element.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个降序的`ORDER BY`子句元素。
- en: 'e.g.:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE115]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'will produce SQL as:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成 SQL 如下：
- en: '[PRE116]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    function is a standalone version of the [`ColumnElement.desc()`](#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") method available on all SQL expressions,
    e.g.:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")函数是所有
    SQL 表达式上可用的[`ColumnElement.desc()`](#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc")方法的独立版本，例如：'
- en: '[PRE117]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Parameters:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**column** – A [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    (e.g. scalar SQL expression) with which to apply the [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") operation.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '**column** – 一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")（例如标量
    SQL 表达式），用于应用[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")操作。'
- en: See also
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE118]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Produce a [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    object against a function.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 对函数产生一个[`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")对象。
- en: Used against aggregate and window functions, for database backends that support
    the “FILTER” clause.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 对支持“FILTER”子句的数据库后端使用于聚合和窗口函数。
- en: 'E.g.:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE119]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Would produce “COUNT(1) FILTER (WHERE myclass.name = ‘some name’)”.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 会产生“COUNT(1) FILTER (WHERE myclass.name = ‘some name’)”。
- en: This function is also available from the [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct itself via the [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") method.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数也可通过[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")构造本身通过[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")方法使用。
- en: See also
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '[组内特殊修改器，过滤器](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
- en: '[PRE120]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Return a [`Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    object for the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")返回一个[`Label`](#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")对象。
- en: A label changes the name of an element in the columns clause of a `SELECT` statement,
    typically via the `AS` SQL keyword.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 标签通过`AS` SQL关键字通常在`SELECT`语句的列子句中更改元素的名称。
- en: This functionality is more conveniently available via the [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method on [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label "sqlalchemy.sql.expression.ColumnElement.label")方法更方便地使用[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。
- en: 'Parameters:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – label name'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 标签名称'
- en: '`obj` – a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement").'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")。'
- en: '[PRE121]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Produce the `NULLS FIRST` modifier for an `ORDER BY` expression.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 为`ORDER BY`表达式生成`NULLS FIRST`修饰符。
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    is intended to modify the expression produced by [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") or [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc"), and indicates how NULL values should be handled
    when they are encountered during ordering:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")旨在修改由[`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc")或[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")产生的表达式，并指示在排序过程中遇到NULL值时应如何处理：'
- en: '[PRE122]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The SQL expression from the above would resemble:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的SQL表达式类似于：
- en: '[PRE123]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Like [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    and [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc"),
    [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    is typically invoked from the column expression itself using [`ColumnElement.nulls_first()`](#sqlalchemy.sql.expression.ColumnElement.nulls_first
    "sqlalchemy.sql.expression.ColumnElement.nulls_first"), rather than as its standalone
    function version, as in:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")和[`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")，[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")通常是从列表达式本身使用[`ColumnElement.nulls_first()`](#sqlalchemy.sql.expression.ColumnElement.nulls_first
    "sqlalchemy.sql.expression.ColumnElement.nulls_first")调用的，而不是作为其独立的函数版本，如下所示：
- en: '[PRE124]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Changed in version 1.4: [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") is renamed from [`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") in previous releases. The previous name
    remains available for backwards compatibility.'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")从以前的版本中的[`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")重命名。以前的名称仍然可用于向后兼容性。
- en: See also
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
- en: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE125]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Synonym for the [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    function.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    函数的同义词。'
- en: 'Changed in version 2.0.5: restored missing legacy symbol [`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst").'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.5 版本更改：恢复了丢失的遗留符号 [`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")。
- en: '[PRE126]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Produce the `NULLS LAST` modifier for an `ORDER BY` expression.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 `ORDER BY` 表达式的 `NULLS LAST` 修饰符。
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    is intended to modify the expression produced by [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") or [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc"), and indicates how NULL values should be handled
    when they are encountered during ordering:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    旨在修改由 [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    或 [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    生成的表达式，并指示在排序过程中遇到 NULL 值时应如何处理：'
- en: '[PRE127]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The SQL expression from the above would resemble:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 SQL 表达式将类似于：
- en: '[PRE128]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Like [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    and [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc"),
    [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    is typically invoked from the column expression itself using [`ColumnElement.nulls_last()`](#sqlalchemy.sql.expression.ColumnElement.nulls_last
    "sqlalchemy.sql.expression.ColumnElement.nulls_last"), rather than as its standalone
    function version, as in:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 像 [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    和 [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    一样，[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    通常是通过列表达式本身使用 [`ColumnElement.nulls_last()`](#sqlalchemy.sql.expression.ColumnElement.nulls_last
    "sqlalchemy.sql.expression.ColumnElement.nulls_last") 而不是作为其独立函数版本调用的，如下所示：
- en: '[PRE129]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Changed in version 1.4: [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") is renamed from [`nullslast()`](#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") in previous releases. The previous name
    remains available for backwards compatibility.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    在之前的版本中被重命名为 [`nullslast()`](#sqlalchemy.sql.expression.nullslast "sqlalchemy.sql.expression.nullslast")。
    以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
- en: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE130]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Legacy synonym for the [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") function.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    函数的旧词语同义词。'
- en: 'Changed in version 2.0.5: restored missing legacy symbol [`nullslast()`](#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast").'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.5 版本更改：恢复了丢失的遗留符号 [`nullslast()`](#sqlalchemy.sql.expression.nullslast "sqlalchemy.sql.expression.nullslast")。
- en: '[PRE131]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Produce an [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    object against a function.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 对函数生成一个 [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    对象。
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 用于针对聚合或所谓的“窗口”函数，在支持窗口函数的数据库后端使用。
- en: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    is usually called using the [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over") method, e.g.:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")通常使用[`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over")方法调用，例如：'
- en: '[PRE132]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Would produce:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 会产生：
- en: '[PRE133]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Ranges are also possible using the [`over.range_`](#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over") and [`over.rows`](#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over") parameters. These mutually-exclusive parameters
    each accept a 2-tuple, which contains a combination of integers and None:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用[`over.range_`](#sqlalchemy.sql.expression.over.params.range_ "sqlalchemy.sql.expression.over")和[`over.rows`](#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over")参数进行范围设置。这两个互斥参数各自接受一个二元组，其中包含整数和None的组合：
- en: '[PRE134]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'The above would produce:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将产生：
- en: '[PRE135]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'A value of `None` indicates “unbounded”, a value of zero indicates “current
    row”, and negative / positive integers indicate “preceding” and “following”:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '`None`的值表示“无限制”，零的值表示“当前行”，负/正整数表示“前面”和“后面”：'
- en: 'RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING:'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING:'
- en: '[PRE136]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW:'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW:'
- en: '[PRE137]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING:'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING:'
- en: '[PRE138]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'RANGE BETWEEN 1 FOLLOWING AND 3 FOLLOWING:'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RANGE BETWEEN 1 FOLLOWING AND 3 FOLLOWING:'
- en: '[PRE139]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Parameters:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"), [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup"), or other compatible construct.'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")、[`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")或其他兼容的构造。'
- en: '`partition_by` – a column element or string, or a list of such, that will be
    used as the PARTITION BY clause of the OVER construct.'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition_by` – 作为OVER构造的PARTITION BY子句使用的列元素或字符串，或这些列元素或字符串的列表。'
- en: '`order_by` – a column element or string, or a list of such, that will be used
    as the ORDER BY clause of the OVER construct.'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_by` – 作为OVER构造的ORDER BY子句使用的列元素或字符串，或这些列元素或字符串的列表。'
- en: '`range_` – optional range clause for the window. This is a tuple value which
    can contain integer values or `None`, and will render a RANGE BETWEEN PRECEDING
    / FOLLOWING clause.'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`range_` – 窗口的可选范围子句。这是一个元组值，可以包含整数值或`None`，并将呈现为一个RANGE BETWEEN PRECEDING
    / FOLLOWING子句。'
- en: '`rows` – optional rows clause for the window. This is a tuple value which can
    contain integer values or None, and will render a ROWS BETWEEN PRECEDING / FOLLOWING
    clause.'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rows` – 窗口的可选行子句。这是一个元组值，可以包含整数值或None，并将呈现为一个ROWS BETWEEN PRECEDING / FOLLOWING子句。'
- en: This function is also available from the [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct itself via the [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over") method.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数也可以通过[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")构造本身使用[`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over")方法。
- en: See also
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using Window Functions](../tutorial/data_select.html#tutorial-window-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数](../tutorial/data_select.html#tutorial-window-functions) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")'
- en: '[PRE140]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Produce a [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    object against a function.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个[`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")对象与一个函数。
- en: Used against so-called “ordered set aggregate” and “hypothetical set aggregate”
    functions, including [`percentile_cont`](functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`rank`](functions.html#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank"), [`dense_rank`](functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank"), etc.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 用于所谓的“有序集聚合”和“假设集聚合”函数，包括 [`percentile_cont`](functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")、[`rank`](functions.html#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank")、[`dense_rank`](functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank") 等。
- en: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")
    is usually called using the [`FunctionElement.within_group()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") method, e.g.:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")
    通常使用 [`FunctionElement.within_group()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") 方法来调用，例如：'
- en: '[PRE141]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: The above statement would produce SQL similar to `SELECT department.id, percentile_cont(0.5)
    WITHIN GROUP (ORDER BY department.salary DESC)`.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将产生类似于 `SELECT department.id, percentile_cont(0.5) WITHIN GROUP (ORDER BY
    department.salary DESC)` 的 SQL。
- en: 'Parameters:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`element` – a [`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") construct, typically generated by
    [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func").'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个 [`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") 结构，通常由 [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 生成。'
- en: '`*order_by` – one or more column elements that will be used as the ORDER BY
    clause of the WITHIN GROUP construct.'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*order_by` – 一个或多个列元素，将用作 WITHIN GROUP 构造的 ORDER BY 子句。'
- en: See also
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[特殊修饰符 WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
- en: Column Element Class Documentation
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列元素类文档
- en: The classes here are generated using the constructors listed at [Column Element
    Foundational Constructors](#sqlelement-foundational-constructors) and [Column
    Element Modifier Constructors](#sqlelement-modifier-constructors).
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的类是使用 [列元素基础构造函数](#sqlelement-foundational-constructors) 和 [列元素修饰符构造函数](#sqlelement-modifier-constructors)
    列出的构造函数生成的。
- en: '| Object Name | Description |'
  id: totrans-579
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-580
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BinaryExpression](#sqlalchemy.sql.expression.BinaryExpression) | Represent
    an expression that is `LEFT <operator> RIGHT`. |'
  id: totrans-581
  prefs: []
  type: TYPE_TB
  zh: '| [BinaryExpression](#sqlalchemy.sql.expression.BinaryExpression) | 表示 `LEFT
    <operator> RIGHT` 的表达式。 |'
- en: '| [BindParameter](#sqlalchemy.sql.expression.BindParameter) | Represent a “bound
    expression”. |'
  id: totrans-582
  prefs: []
  type: TYPE_TB
  zh: '| [BindParameter](#sqlalchemy.sql.expression.BindParameter) | 表示“绑定表达式”。 |'
- en: '| [Case](#sqlalchemy.sql.expression.Case) | Represent a `CASE` expression.
    |'
  id: totrans-583
  prefs: []
  type: TYPE_TB
  zh: '| [Case](#sqlalchemy.sql.expression.Case) | 表示 `CASE` 表达式。 |'
- en: '| [Cast](#sqlalchemy.sql.expression.Cast) | Represent a `CAST` expression.
    |'
  id: totrans-584
  prefs: []
  type: TYPE_TB
  zh: '| [Cast](#sqlalchemy.sql.expression.Cast) | 表示 `CAST` 表达式。 |'
- en: '| [ClauseList](#sqlalchemy.sql.expression.ClauseList) | Describe a list of
    clauses, separated by an operator. |'
  id: totrans-585
  prefs: []
  type: TYPE_TB
  zh: '| [ClauseList](#sqlalchemy.sql.expression.ClauseList) | 描述由操作符分隔的子句列表。 |'
- en: '| [ColumnClause](#sqlalchemy.sql.expression.ColumnClause) | Represents a column
    expression from any textual string. |'
  id: totrans-586
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnClause](#sqlalchemy.sql.expression.ColumnClause) | 表示来自任何文本字符串的列表达式。
    |'
- en: '| [ColumnCollection](#sqlalchemy.sql.expression.ColumnCollection) | Collection
    of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    instances, typically for [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects. |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnCollection](#sqlalchemy.sql.expression.ColumnCollection) | [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象的 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 实例的集合。 |'
- en: '| [ColumnElement](#sqlalchemy.sql.expression.ColumnElement) | Represent a column-oriented
    SQL expression suitable for usage in the “columns” clause, WHERE clause etc. of
    a statement. |'
  id: totrans-588
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnElement](#sqlalchemy.sql.expression.ColumnElement) | 代表适用于语句的“列”子句、WHERE子句等的面向列的SQL表达式。
    |'
- en: '| [ColumnExpressionArgument](#sqlalchemy.sql.expression.ColumnExpressionArgument)
    | General purpose “column expression” argument. |'
  id: totrans-589
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnExpressionArgument](#sqlalchemy.sql.expression.ColumnExpressionArgument)
    | 通用的“列表达式”参数。 |'
- en: '| [ColumnOperators](#sqlalchemy.sql.expression.ColumnOperators) | Defines boolean,
    comparison, and other operators for [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions. |'
  id: totrans-590
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnOperators](#sqlalchemy.sql.expression.ColumnOperators) | 为[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式定义布尔、比较和其他运算符。 |'
- en: '| [Extract](#sqlalchemy.sql.expression.Extract) | Represent a SQL EXTRACT clause,
    `extract(field FROM expr)`. |'
  id: totrans-591
  prefs: []
  type: TYPE_TB
  zh: '| [Extract](#sqlalchemy.sql.expression.Extract) | 代表一个SQL EXTRACT子句，`extract(field
    FROM expr)`。 |'
- en: '| [False_](#sqlalchemy.sql.expression.False_) | Represent the `false` keyword,
    or equivalent, in a SQL statement. |'
  id: totrans-592
  prefs: []
  type: TYPE_TB
  zh: '| [False_](#sqlalchemy.sql.expression.False_) | 代表SQL语句中的`false`关键字或等效关键字。
    |'
- en: '| [FunctionFilter](#sqlalchemy.sql.expression.FunctionFilter) | Represent a
    function FILTER clause. |'
  id: totrans-593
  prefs: []
  type: TYPE_TB
  zh: '| [FunctionFilter](#sqlalchemy.sql.expression.FunctionFilter) | 代表一个函数FILTER子句。
    |'
- en: '| [Label](#sqlalchemy.sql.expression.Label) | Represents a column label (AS).
    |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| [Label](#sqlalchemy.sql.expression.Label) | 代表列标签（AS）。 |'
- en: '| [Null](#sqlalchemy.sql.expression.Null) | Represent the NULL keyword in a
    SQL statement. |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| [Null](#sqlalchemy.sql.expression.Null) | 代表SQL语句中的NULL关键字。 |'
- en: '| [Operators](#sqlalchemy.sql.expression.Operators) | Base of comparison and
    logical operators. |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
  zh: '| [Operators](#sqlalchemy.sql.expression.Operators) | 比较和逻辑运算符的基类。 |'
- en: '| [Over](#sqlalchemy.sql.expression.Over) | Represent an OVER clause. |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
  zh: '| [Over](#sqlalchemy.sql.expression.Over) | 代表一个OVER子句。 |'
- en: '| [SQLColumnExpression](#sqlalchemy.sql.expression.SQLColumnExpression) | A
    type that may be used to indicate any SQL column element or object that acts in
    place of one. |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
  zh: '| [SQLColumnExpression](#sqlalchemy.sql.expression.SQLColumnExpression) | 可用于指示任何SQL列元素或充当其替代品的对象的类型。
    |'
- en: '| [TextClause](#sqlalchemy.sql.expression.TextClause) | Represent a literal
    SQL text fragment. |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| [TextClause](#sqlalchemy.sql.expression.TextClause) | 代表一个字面的SQL文本片段。 |'
- en: '| [True_](#sqlalchemy.sql.expression.True_) | Represent the `true` keyword,
    or equivalent, in a SQL statement. |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| [True_](#sqlalchemy.sql.expression.True_) | 代表SQL语句中的`true`关键字或等效关键字。 |'
- en: '| [TryCast](#sqlalchemy.sql.expression.TryCast) | Represent a TRY_CAST expression.
    |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
  zh: '| [TryCast](#sqlalchemy.sql.expression.TryCast) | 代表一个TRY_CAST表达式。 |'
- en: '| [Tuple](#sqlalchemy.sql.expression.Tuple) | Represent a SQL tuple. |'
  id: totrans-602
  prefs: []
  type: TYPE_TB
  zh: '| [Tuple](#sqlalchemy.sql.expression.Tuple) | 代表一个SQL元组。 |'
- en: '| [TypeCoerce](#sqlalchemy.sql.expression.TypeCoerce) | Represent a Python-side
    type-coercion wrapper. |'
  id: totrans-603
  prefs: []
  type: TYPE_TB
  zh: '| [TypeCoerce](#sqlalchemy.sql.expression.TypeCoerce) | 代表一个Python端的类型强制转换包装器。
    |'
- en: '| [UnaryExpression](#sqlalchemy.sql.expression.UnaryExpression) | Define a
    ‘unary’ expression. |'
  id: totrans-604
  prefs: []
  type: TYPE_TB
  zh: '| [UnaryExpression](#sqlalchemy.sql.expression.UnaryExpression) | 定义一个“一元”表达式。
    |'
- en: '| [WithinGroup](#sqlalchemy.sql.expression.WithinGroup) | Represent a WITHIN
    GROUP (ORDER BY) clause. |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| [WithinGroup](#sqlalchemy.sql.expression.WithinGroup) | 代表一个WITHIN GROUP（ORDER
    BY）子句。 |'
- en: '| [WrapsColumnExpression](#sqlalchemy.sql.elements.WrapsColumnExpression) |
    Mixin that defines a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as a wrapper with special labeling
    behavior for an expression that already has a name. |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| [WrapsColumnExpression](#sqlalchemy.sql.elements.WrapsColumnExpression) |
    定义一个具有特殊标签行为的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")包装器的混合类，用于已经具有名称的表达式。
    |'
- en: '[PRE142]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Represent an expression that is `LEFT <operator> RIGHT`.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个`LEFT <operator> RIGHT`的表达式。
- en: 'A [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression "sqlalchemy.sql.expression.BinaryExpression")
    is generated automatically whenever two column expressions are used in a Python
    binary expression:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个列表达式在Python二元表达式中使用时，会自动生成一个[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")：
- en: '[PRE143]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '**Class signature**'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") (`sqlalchemy.sql.expression.OperatorExpression`)
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")（`sqlalchemy.sql.expression.OperatorExpression`）
- en: '[PRE144]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Represent a “bound expression”.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个“绑定表达式”。
- en: '[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    is invoked explicitly using the [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") function, as in:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")是通过使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")函数显式调用的，如下所示：'
- en: '[PRE145]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Detailed discussion of how [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is used is at [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam").
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 详细讨论了[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")的使用方法在[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")中。
- en: See also
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")'
- en: '**Members**'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[effective_value](#sqlalchemy.sql.expression.BindParameter.effective_value),
    [inherit_cache](#sqlalchemy.sql.expression.BindParameter.inherit_cache), [render_literal_execute()](#sqlalchemy.sql.expression.BindParameter.render_literal_execute)'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '[effective_value](#sqlalchemy.sql.expression.BindParameter.effective_value),
    [inherit_cache](#sqlalchemy.sql.expression.BindParameter.inherit_cache), [render_literal_execute()](#sqlalchemy.sql.expression.BindParameter.render_literal_execute)'
- en: '**Class signature**'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.KeyedColumnElement`)
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.KeyedColumnElement`)
- en: '[PRE146]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Return the value of this bound parameter, taking into account if the `callable`
    parameter was set.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此绑定参数的值，考虑是否设置了`callable`参数。
- en: The `callable` value will be evaluated and returned if present, else `value`.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在`callable`值，则将对其进行评估并返回，否则返回`value`。
- en: '[PRE147]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否适合参与缓存; 这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与对象对应的SQL不基于仅属于此类而不是其超类的属性更改，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 有关为第三方或用户定义的SQL构造设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE148]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Produce a copy of this bound parameter that will enable the [`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter") flag.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此绑定参数的副本，将启用[`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter")标志。
- en: The [`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter") flag will have the effect of the parameter
    rendered in the compiled SQL string using `[POSTCOMPILE]` form, which is a special
    form that is converted to be a rendering of the literal value of the parameter
    at SQL execution time. The rationale is to support caching of SQL statement strings
    that can embed per-statement literal values, such as LIMIT and OFFSET parameters,
    in the final SQL string that is passed to the DBAPI. Dialects in particular may
    want to use this method within custom compilation schemes.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter") 标志将使参数在编译后的 SQL 字符串中以`[POSTCOMPILE]`形式呈现，这是一种特殊形式，会在
    SQL 执行时转换为参数的字面值。其目的是支持缓存可以嵌入每个语句字面值的 SQL 语句字符串，例如 LIMIT 和 OFFSET 参数，在传递给 DBAPI
    的最终 SQL 字符串中。特别是方言可能希望在自定义编译方案中使用此方法。'
- en: New in version 1.4.5.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.5 版中新增。
- en: See also
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Caching for Third Party Dialects](connections.html#engine-thirdparty-caching)'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三方方言的缓存](connections.html#engine-thirdparty-caching)'
- en: '[PRE149]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Represent a `CASE` expression.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 `CASE` 表达式。
- en: '[`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    is produced using the [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    factory function, as in:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    是使用 [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    工厂函数生成的，如下所示：'
- en: '[PRE150]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Details on [`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    usage is at [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case").
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    的详细用法请参阅 [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")。
- en: See also
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")'
- en: '**Class signature**'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE151]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Represent a `CAST` expression.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 `CAST` 表达式。
- en: '[`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    is produced using the [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    factory function, as in:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    是使用 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    工厂函数生成的，如下所示：'
- en: '[PRE152]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Details on [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    usage is at [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast").
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    的详细用法请参阅 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")。
- en: See also
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - an alternative to CAST that coerces the type on the Python side only, which
    is often sufficient to generate the correct SQL and data coercion.'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - 一种仅在 Python 端强制类型的 CAST 替代方法，通常足以生成正确的 SQL 和数据强制转换。'
- en: '**Class signature**'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    (`sqlalchemy.sql.expression.WrapsColumnExpression`)
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    (`sqlalchemy.sql.expression.WrapsColumnExpression`)
- en: '[PRE153]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Describe a list of clauses, separated by an operator.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 描述由运算符分隔的子句列表。
- en: By default, is comma-separated, such as a column listing.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，以逗号分隔，例如列清单。
- en: '**Members**'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.ClauseList.self_group)'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.ClauseList.self_group)'
- en: '**Class signature**'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.roles.OrderByRole`, `sqlalchemy.sql.roles.ColumnsClauseRole`,
    `sqlalchemy.sql.roles.DMLColumnRole`, `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList")（`sqlalchemy.sql.roles.InElementRole`，`sqlalchemy.sql.roles.OrderByRole`，`sqlalchemy.sql.roles.ColumnsClauseRole`，`sqlalchemy.sql.roles.DMLColumnRole`，`sqlalchemy.sql.expression.DQLDMLClauseElement`）。
- en: '[PRE154]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是当“二元”表达式被放置到较大表达式中时，它们会提供自己周围的分组，以及当[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。（注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group
    "sqlalchemy.sql.expression.ClauseList.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group "sqlalchemy.sql.expression.ClauseList.self_group")的应用是自动的
    - 最终用户代码不应直接使用此方法。注意，SQLAlchemy的子句构造会考虑运算符优先级 - 所以可能不需要括号，例如，在像`x OR (y AND z)`这样的表达式中
    - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group "sqlalchemy.sql.expression.ClauseList.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group
    "sqlalchemy.sql.expression.ClauseList.self_group")方法只返回自身。'
- en: '[PRE155]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Represents a column expression from any textual string.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 表示来自任何文本字符串的列表达式。
- en: 'The [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause"),
    a lightweight analogue to the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") class, is typically invoked using the [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function, as in:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")，类似于[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")类的轻量级模拟，通常使用[`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")函数调用，如下所示：'
- en: '[PRE156]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'The above statement would produce SQL like:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于的SQL：
- en: '[PRE157]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    is the immediate superclass of the schema-specific [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. While the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") class has all the same capabilities as [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), the [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") class is usable by itself in those cases
    where behavioral requirements are limited to simple SQL expression generation.
    The object has none of the associations with schema-level metadata or with execution-time
    behavior that [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    does, so in that sense is a “lightweight” version of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")是模式特定的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的直接超类。虽然[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")类具有与[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")相同的所有功能，但[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")类可单独使用，用于那些行为要求仅限于简单的SQL表达式生成的情况。该对象没有与模式级元数据或执行时行为相关的关联，因此在这个意义上是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的“轻量级”版本。'
- en: Full details on [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    usage is at [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column").
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")用法的完整详细信息在[`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")。'
- en: See also
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
- en: '**Members**'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_children()](#sqlalchemy.sql.expression.ColumnClause.get_children)'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_children()](#sqlalchemy.sql.expression.ColumnClause.get_children)'
- en: '**Class signature**'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") (`sqlalchemy.sql.roles.DDLReferredColumnRole`,
    `sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.roles.StrAsPlainColumnRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedColumn`)
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") (`sqlalchemy.sql.roles.DDLReferredColumnRole`,
    `sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.roles.StrAsPlainColumnRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedColumn`)
- en: '[PRE158]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`HasTraverseInternals`的直接子`HasTraverseInternals`元素。
- en: This is used for visit traversal.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw可能包含更改返回集合的标志，例如返回子项的子集以减少更大的遍历，或者从不同上下文返回子项（例如模式级集合而不是子句级）。'
- en: '[PRE159]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Collection of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    instances, typically for [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")实例的集合，通常用于[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象。'
- en: The [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    object is most commonly available as the [`Table.c`](metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c") or [`Table.columns`](metadata.html#sqlalchemy.schema.Table.columns
    "sqlalchemy.schema.Table.columns") collection on the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, introduced at [Accessing Tables and Columns](metadata.html#metadata-tables-and-columns).
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")对象通常作为[`Table.c`](metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c")或[`Table.columns`](metadata.html#sqlalchemy.schema.Table.columns
    "sqlalchemy.schema.Table.columns")集合在[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上最常用，介绍在[访问表和列](metadata.html#metadata-tables-and-columns)。'
- en: The [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    has both mapping- and sequence- like behaviors. A [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") usually stores [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, which are then accessible both via mapping
    style access as well as attribute access style.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    具有类似映射和序列的行为。 [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 通常存储 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，然后可以通过映射样式访问以及属性访问样式访问。'
- en: 'To access [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects using ordinary attribute-style access, specify the name like any other
    object attribute, such as below a column named `employee_name` is accessed:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用普通属性样式访问方式访问 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象，请像访问任何其他对象属性一样指定名称，例如下面访问了一个名为 `employee_name` 的列：
- en: '[PRE160]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'To access columns that have names with special characters or spaces, index-style
    access is used, such as below which illustrates a column named `employee '' payment`
    is accessed:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问具有特殊字符或空格名称的列，使用索引样式访问，例如下面演示了如何访问名为 `employee ' payment` 的列：
- en: '[PRE161]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'As the [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    object provides a Python dictionary interface, common dictionary method names
    like [`ColumnCollection.keys()`](#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys"), [`ColumnCollection.values()`](#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values"), and [`ColumnCollection.items()`](#sqlalchemy.sql.expression.ColumnCollection.items
    "sqlalchemy.sql.expression.ColumnCollection.items") are available, which means
    that database columns that are keyed under these names also need to use indexed
    access:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    对象提供了 Python 字典接口，因此常见的字典方法名称如 [`ColumnCollection.keys()`](#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys")、[`ColumnCollection.values()`](#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values") 和 [`ColumnCollection.items()`](#sqlalchemy.sql.expression.ColumnCollection.items
    "sqlalchemy.sql.expression.ColumnCollection.items") 都可用，这意味着键入这些名称的数据库列也需要使用索引访问：
- en: '[PRE162]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'The name for which a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would be present is normally that of the [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") parameter. In some contexts, such as a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object that uses a label style set using the
    [`Select.set_label_style()`](selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") method, a column of a certain
    key may instead be represented under a particular label name such as `tablename_columnname`:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")存在的名称是
    [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key "sqlalchemy.schema.Column")
    参数的值。在某些上下文中，例如使用 [`Select.set_label_style()`](selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") 方法设置标签样式的 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象，某个键的列可能被表示为特定标签名称，如`tablename_columnname`：
- en: '[PRE163]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    also indexes the columns in order and allows them to be accessible by their integer
    position:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    还按顺序索引列，并允许通过它们的整数位置访问它们：'
- en: '[PRE164]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'New in version 1.4: [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") allows integer-based index access
    to the collection.'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版开始：[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    允许基于整数的索引访问集合。
- en: 'Iterating the collection yields the column expressions in order:'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历集合按顺序产生列表达式：
- en: '[PRE165]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'The base [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    object can store duplicates, which can mean either two columns with the same key,
    in which case the column returned by key access is **arbitrary**:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")对象可以存储重复项，这可能意味着具有相同键的两个列，此时通过键访问返回的列是**任意的**：
- en: '[PRE166]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Or it can also mean the same column multiple times. These cases are supported
    as [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    is used to represent the columns in a SELECT statement which may include duplicates.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 或者它也可以多次表示相同的列。这些情况是支持的，因为[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")用于表示SELECT语句中的列，该语句可能包含重复项。
- en: A special subclass `DedupeColumnCollection` exists which instead maintains SQLAlchemy’s
    older behavior of not allowing duplicates; this collection is used for schema
    level objects like [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") where this deduping is helpful. The
    `DedupeColumnCollection` class also has additional mutation methods as the schema
    constructs have more use cases that require removal and replacement of columns.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个特殊的子类`DedupeColumnCollection`，它维护的是SQLAlchemy的旧行为，即不允许重复项；这个集合用于模式级对象，如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")，在这些情况下去重是有帮助的。`DedupeColumnCollection`类还具有额外的变异方法，因为模式构造具有更多需要移除和替换列的用例。
- en: 'Changed in version 1.4: [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") now stores duplicate column keys
    as well as the same column in multiple positions. The `DedupeColumnCollection`
    class is added to maintain the former behavior in those cases where deduplication
    as well as additional replace/remove operations are needed.'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4更改：[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")现在也存储重复的列键以及同一列在多个位置的情况。在这些情况下，添加了`DedupeColumnCollection`类以保持以前的行为，其中需要去重以及额外的替换/移除操作。
- en: '**Members**'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add()](#sqlalchemy.sql.expression.ColumnCollection.add), [as_readonly()](#sqlalchemy.sql.expression.ColumnCollection.as_readonly),
    [clear()](#sqlalchemy.sql.expression.ColumnCollection.clear), [compare()](#sqlalchemy.sql.expression.ColumnCollection.compare),
    [contains_column()](#sqlalchemy.sql.expression.ColumnCollection.contains_column),
    [corresponding_column()](#sqlalchemy.sql.expression.ColumnCollection.corresponding_column),
    [get()](#sqlalchemy.sql.expression.ColumnCollection.get), [items()](#sqlalchemy.sql.expression.ColumnCollection.items),
    [keys()](#sqlalchemy.sql.expression.ColumnCollection.keys), [update()](#sqlalchemy.sql.expression.ColumnCollection.update),
    [values()](#sqlalchemy.sql.expression.ColumnCollection.values)'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '[add()](#sqlalchemy.sql.expression.ColumnCollection.add), [as_readonly()](#sqlalchemy.sql.expression.ColumnCollection.as_readonly),
    [clear()](#sqlalchemy.sql.expression.ColumnCollection.clear), [compare()](#sqlalchemy.sql.expression.ColumnCollection.compare),
    [contains_column()](#sqlalchemy.sql.expression.ColumnCollection.contains_column),
    [corresponding_column()](#sqlalchemy.sql.expression.ColumnCollection.corresponding_column),
    [get()](#sqlalchemy.sql.expression.ColumnCollection.get), [items()](#sqlalchemy.sql.expression.ColumnCollection.items),
    [keys()](#sqlalchemy.sql.expression.ColumnCollection.keys), [update()](#sqlalchemy.sql.expression.ColumnCollection.update),
    [values()](#sqlalchemy.sql.expression.ColumnCollection.values)'
- en: '**Class signature**'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") (`typing.Generic`)
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") (`typing.Generic`)
- en: '[PRE167]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Add a column to this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 向这个[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")添加一列。
- en: Note
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is **not normally used by user-facing code**, as the [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") is usually part of an existing object
    such as a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    To add a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to an existing [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, use the [`Table.append_column()`](metadata.html#sqlalchemy.schema.Table.append_column
    "sqlalchemy.schema.Table.append_column") method.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法**通常不会被用户界面代码使用**，因为[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")通常是现有对象的一部分，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。要向现有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象添加[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，请使用[`Table.append_column()`](metadata.html#sqlalchemy.schema.Table.append_column
    "sqlalchemy.schema.Table.append_column")方法。
- en: '[PRE168]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Return a “read only” form of this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")的“只读”形式。
- en: '[PRE169]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Dictionary clear() is not implemented for [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")，未实现字典清除()。
- en: '[PRE170]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Compare this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") to another based on the names of
    the keys
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 根据键的名称将此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")与另一个进行比较
- en: '[PRE171]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Checks if a column object exists in this collection
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 检查此集合中是否存在列对象
- en: '[PRE172]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Given a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement"),
    return the exported [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which corresponds to that original
    [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    via a common ancestor column.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")，从此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")中返回导出的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，该对象通过共同祖先列与原始[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")相对应。
- en: 'Parameters:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅在给定的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实际存在于此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中时返回相应的列。通常，如果列仅与此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列之一共享共同的祖先，则列将匹配。'
- en: See also
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") - invokes this method
    against the collection returned by [`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns").'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") - 调用此方法以针对[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")返回的集合。'
- en: 'Changed in version 1.4: the implementation for `corresponding_column` was moved
    onto the [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    itself.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`corresponding_column`的实现已移至[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")本身。
- en: '[PRE173]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Get a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    or [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object based on a string key name from this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")中的字符串键名获取一个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")或[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: '[PRE174]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Return a sequence of (key, column) tuples for all columns in this collection
    each consisting of a string key name and a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 为此集合中的所有列返回一个(key, column)元组序列，每个元组由一个字符串键名和[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")或[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象组成。
- en: '[PRE175]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Return a sequence of string key names for all columns in this collection.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此集合中所有列的字符串键名序列。
- en: '[PRE176]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Dictionary update() is not implemented for [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")，未实现字典的update()方法。
- en: '[PRE177]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Return a sequence of [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects for all columns in this collection.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 为此集合中的所有列返回一个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")或[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象序列。
- en: '[PRE178]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Represent a column-oriented SQL expression suitable for usage in the “columns”
    clause, WHERE clause etc. of a statement.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 表示适用于语句的“columns”子句、WHERE子句等的面向列的SQL表达式。
- en: While the most familiar kind of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") serves as the basis for any unit that
    may be present in a SQL expression, including the expressions themselves, SQL
    functions, bound parameters, literal expressions, keywords such as `NULL`, etc.
    [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    is the ultimate base class for all such elements.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最熟悉的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")类型是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，但[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")作为可能出现在SQL表达式中的任何单元的基础，包括表达式本身、SQL函数、绑定参数、文字表达式、关键字如`NULL`等。[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")是所有这些元素的最终基类。
- en: 'A wide variety of SQLAlchemy Core functions work at the SQL expression level,
    and are intended to accept instances of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as arguments. These functions will
    typically document that they accept a “SQL expression” as an argument. What this
    means in terms of SQLAlchemy usually refers to an input which is either already
    in the form of a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    object, or a value which can be **coerced** into one. The coercion rules followed
    by most, but not all, SQLAlchemy Core functions with regards to SQL expressions
    are as follows:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列广泛的SQLAlchemy核心函数在SQL表达式级别工作，并旨在接受[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的实例作为参数。这些函数通常会记录它们接受一个“SQL表达式”作为参数。在SQLAlchemy中，这通常指的是一个已经是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象形式的输入，或者可以**强制转换**为其中一个的值。大多数SQLAlchemy核心函数关于SQL表达式的强制转换规则如下：
- en: a literal Python value, such as a string, integer or floating point value, boolean,
    datetime, `Decimal` object, or virtually any other Python object, will be coerced
    into a “literal bound value”. This generally means that a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") will be produced featuring the given value
    embedded into the construct; the resulting [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object is an instance of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"). The Python value will ultimately be
    sent to the DBAPI at execution time as a parameterized argument to the `execute()`
    or `executemany()` methods, after SQLAlchemy type-specific converters (e.g. those
    provided by any associated [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") objects) are applied to the value.
  id: totrans-751
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面的Python值，比如字符串、整数或浮点值、布尔值、日期时间、`Decimal`对象，或者几乎任何其他Python对象，都将被强制转换为“字面绑定值”。这通常意味着将生成一个包含给定值嵌入到结构中的[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")；最终产生的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的一个实例。Python值最终将在执行时作为参数化参数传递给`execute()`或`executemany()`方法，之后会应用SQLAlchemy类型特定的转换器（例如任何相关的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象提供的转换器）。
- en: ''
  id: totrans-752
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-753
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: any special object value, typically ORM-level constructs, which feature an accessor
    called `__clause_element__()`. The Core expression system looks for this method
    when an object of otherwise unknown type is passed to a function that is looking
    to coerce the argument into a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") and sometimes a [`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") expression. It is used within the ORM
    to convert from ORM-specific objects like mapped classes and mapped attributes
    into Core expression objects.
  id: totrans-754
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何特殊对象值，通常是ORM级别的构造，其中包含一个名为`__clause_element__()`的访问器。当将一个否则未知类型的对象传递给一个希望将参数强制转换为[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")和有时是[`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")表达式的函数时，核心表达式系统会查找这个方法。在ORM中，它用于将ORM特定的对象（如映射类和映射属性）转换为核心表达式对象。
- en: ''
  id: totrans-755
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-756
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The Python `None` value is typically interpreted as `NULL`, which in SQLAlchemy
    Core produces an instance of [`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null").
  id: totrans-757
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的`None`值通常被解释为`NULL`，在SQLAlchemy Core中会产生一个[`null()`](#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")的实例。
- en: 'A [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    provides the ability to generate new [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects using Python expressions. This
    means that Python operators such as `==`, `!=` and `<` are overloaded to mimic
    SQL operations, and allow the instantiation of further [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") instances which are composed from other,
    more fundamental [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    objects. For example, two [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects can be added together with the
    addition operator `+` to produce a [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"). Both [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") and [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") are subclasses of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"):'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    提供了使用 Python 表达式生成新的 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象的能力。这意味着 Python 操作符如`==`、`!=`和`<`被重载以模仿
    SQL 操作，并允许实例化更多由其他更基本的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 对象组成的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 实例。例如，两个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 对象可以使用加法运算符`+`相加，生成一个[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")。[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 和[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") 都是 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 的子类。'
- en: '[PRE179]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: See also
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
- en: '**Members**'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.sql.expression.ColumnElement.__eq__), [__le__()](#sqlalchemy.sql.expression.ColumnElement.__le__),
    [__lt__()](#sqlalchemy.sql.expression.ColumnElement.__lt__), [__ne__()](#sqlalchemy.sql.expression.ColumnElement.__ne__),
    [all_()](#sqlalchemy.sql.expression.ColumnElement.all_), [allows_lambda](#sqlalchemy.sql.expression.ColumnElement.allows_lambda),
    [anon_key_label](#sqlalchemy.sql.expression.ColumnElement.anon_key_label), [anon_label](#sqlalchemy.sql.expression.ColumnElement.anon_label),
    [any_()](#sqlalchemy.sql.expression.ColumnElement.any_), [asc()](#sqlalchemy.sql.expression.ColumnElement.asc),
    [base_columns](#sqlalchemy.sql.expression.ColumnElement.base_columns), [between()](#sqlalchemy.sql.expression.ColumnElement.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnElement.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnElement.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnElement.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_rshift), [bitwise_xor()](#sqlalchemy.sql.expression.ColumnElement.bitwise_xor),
    [bool_op()](#sqlalchemy.sql.expression.ColumnElement.bool_op), [cast()](#sqlalchemy.sql.expression.ColumnElement.cast),
    [collate()](#sqlalchemy.sql.expression.ColumnElement.collate), [comparator](#sqlalchemy.sql.expression.ColumnElement.comparator),
    [compare()](#sqlalchemy.sql.expression.ColumnElement.compare), [compile()](#sqlalchemy.sql.expression.ColumnElement.compile),
    [concat()](#sqlalchemy.sql.expression.ColumnElement.concat), [contains()](#sqlalchemy.sql.expression.ColumnElement.contains),
    [desc()](#sqlalchemy.sql.expression.ColumnElement.desc), [description](#sqlalchemy.sql.expression.ColumnElement.description),
    [distinct()](#sqlalchemy.sql.expression.ColumnElement.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnElement.endswith),
    [entity_namespace](#sqlalchemy.sql.expression.ColumnElement.entity_namespace),
    [expression](#sqlalchemy.sql.expression.ColumnElement.expression), [foreign_keys](#sqlalchemy.sql.expression.ColumnElement.foreign_keys),
    [get_children()](#sqlalchemy.sql.expression.ColumnElement.get_children), [icontains()](#sqlalchemy.sql.expression.ColumnElement.icontains),
    [iendswith()](#sqlalchemy.sql.expression.ColumnElement.iendswith), [ilike()](#sqlalchemy.sql.expression.ColumnElement.ilike),
    [in_()](#sqlalchemy.sql.expression.ColumnElement.in_), [inherit_cache](#sqlalchemy.sql.expression.ColumnElement.inherit_cache),
    [is_()](#sqlalchemy.sql.expression.ColumnElement.is_), [is_clause_element](#sqlalchemy.sql.expression.ColumnElement.is_clause_element),
    [is_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_distinct_from),
    [is_dml](#sqlalchemy.sql.expression.ColumnElement.is_dml), [is_not()](#sqlalchemy.sql.expression.ColumnElement.is_not),
    [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_not_distinct_from),
    [is_selectable](#sqlalchemy.sql.expression.ColumnElement.is_selectable), [isnot()](#sqlalchemy.sql.expression.ColumnElement.isnot),
    [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnElement.istartswith), [key](#sqlalchemy.sql.expression.ColumnElement.key),
    [label()](#sqlalchemy.sql.expression.ColumnElement.label), [like()](#sqlalchemy.sql.expression.ColumnElement.like),
    [match()](#sqlalchemy.sql.expression.ColumnElement.match), [negation_clause](#sqlalchemy.sql.expression.ColumnElement.negation_clause),
    [not_ilike()](#sqlalchemy.sql.expression.ColumnElement.not_ilike), [not_in()](#sqlalchemy.sql.expression.ColumnElement.not_in),
    [not_like()](#sqlalchemy.sql.expression.ColumnElement.not_like), [notilike()](#sqlalchemy.sql.expression.ColumnElement.notilike),
    [notin_()](#sqlalchemy.sql.expression.ColumnElement.notin_), [notlike()](#sqlalchemy.sql.expression.ColumnElement.notlike),
    [nulls_first()](#sqlalchemy.sql.expression.ColumnElement.nulls_first), [nulls_last()](#sqlalchemy.sql.expression.ColumnElement.nulls_last),
    [nullsfirst()](#sqlalchemy.sql.expression.ColumnElement.nullsfirst), [nullslast()](#sqlalchemy.sql.expression.ColumnElement.nullslast),
    [op()](#sqlalchemy.sql.expression.ColumnElement.op), [operate()](#sqlalchemy.sql.expression.ColumnElement.operate),
    [params()](#sqlalchemy.sql.expression.ColumnElement.params), [primary_key](#sqlalchemy.sql.expression.ColumnElement.primary_key),
    [proxy_set](#sqlalchemy.sql.expression.ColumnElement.proxy_set), [regexp_match()](#sqlalchemy.sql.expression.ColumnElement.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnElement.regexp_replace), [reverse_operate()](#sqlalchemy.sql.expression.ColumnElement.reverse_operate),
    [self_group()](#sqlalchemy.sql.expression.ColumnElement.self_group), [shares_lineage()](#sqlalchemy.sql.expression.ColumnElement.shares_lineage),
    [startswith()](#sqlalchemy.sql.expression.ColumnElement.startswith), [stringify_dialect](#sqlalchemy.sql.expression.ColumnElement.stringify_dialect),
    [supports_execution](#sqlalchemy.sql.expression.ColumnElement.supports_execution),
    [timetuple](#sqlalchemy.sql.expression.ColumnElement.timetuple), [type](#sqlalchemy.sql.expression.ColumnElement.type),
    [unique_params()](#sqlalchemy.sql.expression.ColumnElement.unique_params), [uses_inspection](#sqlalchemy.sql.expression.ColumnElement.uses_inspection)'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.sql.expression.ColumnElement.__eq__), [__le__()](#sqlalchemy.sql.expression.ColumnElement.__le__),
    [__lt__()](#sqlalchemy.sql.expression.ColumnElement.__lt__), [__ne__()](#sqlalchemy.sql.expression.ColumnElement.__ne__),
    [all_()](#sqlalchemy.sql.expression.ColumnElement.all_), [allows_lambda](#sqlalchemy.sql.expression.ColumnElement.allows_lambda),
    [anon_key_label](#sqlalchemy.sql.expression.ColumnElement.anon_key_label), [anon_label](#sqlalchemy.sql.expression.ColumnElement.anon_label),
    [any_()](#sqlalchemy.sql.expression.ColumnElement.any_), [asc()](#sqlalchemy.sql.expression.ColumnElement.asc),
    [base_columns](#sqlalchemy.sql.expression.ColumnElement.base_columns), [between()](#sqlalchemy.sql.expression.ColumnElement.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnElement.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnElement.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnElement.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_rshift), [bitwise_xor()](#sqlalchemy.sql.expression.ColumnElement.bitwise_xor),
    [bool_op()](#sqlalchemy.sql.expression.ColumnElement.bool_op), [cast()](#sqlalchemy.sql.expression.ColumnElement.cast),
    [collate()](#sqlalchemy.sql.expression.ColumnElement.collate), [comparator](#sqlalchemy.sql.expression.ColumnElement.comparator),
    [compare()](#sqlalchemy.sql.expression.ColumnElement.compare), [compile()](#sqlalchemy.sql.expression.ColumnElement.compile),
    [concat()](#sqlalchemy.sql.expression.ColumnElement.concat), [contains()](#sqlalchemy.sql.expression.ColumnElement.contains),
    [desc()](#sqlalchemy.sql.expression.ColumnElement.desc), [description](#sqlalchemy.sql.expression.ColumnElement.description),
    [distinct()](#sqlalchemy.sql.expression.ColumnElement.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnElement.endswith),
    [entity_namespace](#sqlalchemy.sql.expression.ColumnElement.entity_namespace),
    [expression](#sqlalchemy.sql.expression.ColumnElement.expression), [foreign_keys](#sqlalchemy.sql.expression.ColumnElement.foreign_keys),
    [get_children()](#sqlalchemy.sql.expression.ColumnElement.get_children), [icontains()](#sqlalchemy.sql.expression.ColumnElement.icontains),
    [iendswith()](#sqlalchemy.sql.expression.ColumnElement.iendswith), [ilike()](#sqlalchemy.sql.expression.ColumnElement.ilike),
    [in_()](#sqlalchemy.sql.expression.ColumnElement.in_), [inherit_cache](#sqlalchemy.sql.expression.ColumnElement.inherit_cache),
    [is_()](#sqlalchemy.sql.expression.ColumnElement.is_), [is_clause_element](#sqlalchemy.sql.expression.ColumnElement.is_clause_element),
    [is_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_distinct_from),
    [is_dml](#sqlalchemy.sql.expression.ColumnElement.is_dml), [is_not()](#sqlalchemy.sql.expression.ColumnElement.is_not),
    [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_not_distinct_from),
    [is_selectable](#sqlalchemy.sql.expression.ColumnElement.is_selectable), [isnot()](#sqlalchemy.sql.expression.ColumnElement.isnot),
    [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnElement.istartswith), [key](#sqlalchemy.sql.expression.ColumnElement.key),
    [label()](#sqlalchemy.sql.expression.ColumnElement.label), [like()](#sqlalchemy.sql.expression.ColumnElement.like),
    [match()](#sqlalchemy.sql.expression.ColumnElement.match), [negation_clause](#sqlalchemy.sql.expression.ColumnElement.negation_clause),
    [not_ilike()](#sqlalchemy.sql.expression.ColumnElement.not_ilike), [not_in()](#sqlalchemy.sql.expression.ColumnElement.not_in),
    [not_like()](#sqlalchemy.sql.expression.ColumnElement.not_like), [notilike()](#sqlalchemy.sql.expression.ColumnElement.notilike),
    [notin_()](#sqlalchemy.sql.expression.ColumnElement.notin_), [notlike()](#sqlalchemy.sql.expression.ColumnElement.notlike),
    [nulls_first()](#sqlalchemy.sql.expression.ColumnElement.nulls_first), [nulls_last()](#sqlalchemy.sql.expression.ColumnElement.nulls_last),
    [nullsfirst()](#sqlalchemy.sql.expression.ColumnElement.nullsfirst), [nullslast()](#sqlalchemy.sql.expression.ColumnElement.nullslast),
    [op()](#sqlalchemy.sql.expression.ColumnElement.op), [operate()](#sqlalchemy.sql.expression.ColumnElement.operate),
    [params()](#sqlalchemy.sql.expression.ColumnElement.params), [primary_key](#sqlalchemy.sql.expression.ColumnElement.primary_key),
    [proxy_set](#sqlalchemy.sql.expression.ColumnElement.proxy_set), [regexp_match()](#sqlalchemy.sql.expression.ColumnElement.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnElement.regexp_replace), [reverse_operate()](#sqlalchemy.sql.expression.ColumnElement.reverse_operate),
    [self_group()](#sqlalchemy.sql.expression.ColumnElement.self_group), [shares_lineage()](#sqlalchemy.sql.expression.ColumnElement.shares_lineage),
    [startswith()](#sqlalchemy.sql.expression.ColumnElement.startswith), [stringify_dialect](#sqlalchemy.sql.expression.ColumnElement.stringify_dialect),
    [supports_execution](#sqlalchemy.sql.expression.ColumnElement.supports_execution),
    [timetuple](#sqlalchemy.sql.expression.ColumnElement.timetuple), [type](#sqlalchemy.sql.expression.ColumnElement.type),
    [unique_params()](#sqlalchemy.sql.expression.ColumnElement.unique_params), [uses_inspection](#sqlalchemy.sql.expression.ColumnElement.uses_inspection)'
- en: '**Class signature**'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") (`sqlalchemy.sql.roles.ColumnArgumentOrKeyRole`,
    `sqlalchemy.sql.roles.StatementOptionRole`, `sqlalchemy.sql.roles.WhereHavingRole`,
    `sqlalchemy.sql.roles.BinaryElementRole`, `sqlalchemy.sql.roles.OrderByRole`,
    `sqlalchemy.sql.roles.ColumnsClauseRole`, `sqlalchemy.sql.roles.LimitOffsetRole`,
    `sqlalchemy.sql.roles.DMLColumnRole`, `sqlalchemy.sql.roles.DDLConstraintColumnRole`,
    `sqlalchemy.sql.roles.DDLExpressionRole`, [`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"), `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")（`sqlalchemy.sql.roles.ColumnArgumentOrKeyRole`、`sqlalchemy.sql.roles.StatementOptionRole`、`sqlalchemy.sql.roles.WhereHavingRole`、`sqlalchemy.sql.roles.BinaryElementRole`、`sqlalchemy.sql.roles.OrderByRole`、`sqlalchemy.sql.roles.ColumnsClauseRole`、`sqlalchemy.sql.roles.LimitOffsetRole`、`sqlalchemy.sql.roles.DMLColumnRole`、`sqlalchemy.sql.roles.DDLConstraintColumnRole`、`sqlalchemy.sql.roles.DDLExpressionRole`、[`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")、`sqlalchemy.sql.expression.DQLDMLClauseElement`）
- en: '[PRE180]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `==` operator.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标是`None`，则生成`a IS NULL`。
- en: '[PRE181]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__le__` *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `<=` operator.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE182]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `<` operator.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE183]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `!=` operator.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a != b`。如果目标是`None`，则生成`a IS NOT NULL`。
- en: '[PRE184]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '*inherited from the* [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    for examples.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档以获取示例。
- en: Note
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要注意不要将新的[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与**旧版**方法混淆，旧版方法是[`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，该方法专用于[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，其使用不同的调用风格。
- en: '[PRE185]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_key_label`](#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`ColumnElement.anon_key_label`](#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") 属性现在是私有的，公共访问器已弃用。
- en: '[PRE187]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_label`](#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`ColumnElement.anon_label`](#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") 属性现在是私有的，公共访问器已弃用。
- en: '[PRE188]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '*inherited from the* [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    for examples.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    的文档以获取示例。
- en: Note
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的 [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法与这个方法的**传统**版本，即特定于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的 [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法，它使用不同的调用风格。
- en: '[PRE189]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '*inherited from the* [`ColumnOperators.asc()`](#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE190]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '*inherited from the* [`ColumnOperators.between()`](#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的[`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")子句，给定下限和上限范围。
- en: '[PRE192]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个按位与操作，通常通过`&`运算符实现。
- en: New in version 2.0.2.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.2中新增。
- en: See also
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE193]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 LSHIFT 操作，通常通过 `<<` 运算符。
- en: New in version 2.0.2.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新内容。
- en: See also
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE194]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 NOT 操作，通常通过 `~` 运算符。
- en: New in version 2.0.2.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新内容。
- en: See also
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE195]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 OR 操作，通常通过 `|` 运算符。
- en: New in version 2.0.2.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新内容。
- en: See also
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE196]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 RSHIFT 操作，通常通过 `>>` 运算符。
- en: New in version 2.0.2.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新内容。
- en: See also
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE197]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位异或操作，通常通过 `^` 运算符，或者对于 PostgreSQL 是 `#`。
- en: New in version 2.0.2.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新内容。
- en: See also
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE198]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '*inherited from the* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    is that when using column constructs, the “boolean” nature of the returned expression
    will be present for [**PEP 484**](https://peps.python.org/pep-0484/) purposes.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是调用 [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    并传递 [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的快捷方式。 使用 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的上。
- en: See also
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE199]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Produce a type cast, i.e. `CAST(<expression> AS <type>)`.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个类型转换，即 `CAST(<expression> AS <type>)`。
- en: This is a shortcut to the [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    函数的快捷方式。
- en: See also
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
- en: '[PRE200]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '*inherited from the* [`ColumnOperators.collate()`](#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    子句，给定排序字符串。
- en: See also
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE201]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 进行比较。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该覆盖默认行为，即直接的身份比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可以用来修改比较的标准（参见 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE203]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 编译这个 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。对返回值调用 `str()` 或 `unicode()` 将产生结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 对象还可以使用 `params` 访问器返回一个绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，可以提供一个
    [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    以生成一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。如果 `bind` 和 `dialect` 参数都被省略，则使用默认的 SQL 编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于 INSERT 和 UPDATE 语句，一个列名的列表，应该在编译后的语句的 VALUES 子句中出现。如果为 `None`，则从目标表对象中渲染所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    实例，可以生成一个 [`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    对象。此参数优先于 `bind` 参数。'
- en: '`compile_kwargs` –'
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的字典，包含将传递给所有“visit”方法中的编译器的附加参数。这允许传递任何自定义标志到自定义编译构造中，例如。它还用于通过以下方式传递 `literal_binds`
    标志：
- en: '[PRE204]'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: See also
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 SQL 表达式渲染为字符串，可能会内联绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE205]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '*inherited from the* [`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'concat' 运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a || b`，或在 MySQL 上使用 `concat()` 运算符。
- en: '[PRE206]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '*inherited from the* [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'contains' 运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于测试字符串值中间的匹配：
- en: '[PRE207]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'E.g.:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE208]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用 `LIKE`，因此 `<other>` 表达式内部存在的通配符字符 `"%"` 和 `"_"` 也会像通配符一样行为。对于字面字符串值，可以将
    [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志设置为 `True`，以将转义应用于字符串值中这些字符的出现次数，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是纯字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会转义，除非设置了
    [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志为 True。'
- en: '`autoescape` –'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有的 `"%"`、`"_"` 和转义字符本身的出现次数，假定比较值为字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE209]'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'Will render as:'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE210]'
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为 `:param` 的情况下为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将呈现为带有 `ESCAPE` 关键字以将该字符设定为转义字符。然后，可以将该字符放置在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE211]'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Will render as:'
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE212]'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 结合使用：
- en: '[PRE213]'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE214]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '*inherited from the* [`ColumnOperators.desc()`](#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")子句。
- en: '[PRE215]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '*inherited from the* `ClauseElement.description` *attribute of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") *的* `ClauseElement.description` *属性*'
- en: '[PRE216]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    clause against the parent object.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")子句。
- en: '[PRE217]'
  id: totrans-922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的结尾是否匹配：
- en: '[PRE218]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'E.g.:'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE219]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于文字字符串值，可能会将[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为`True`，以将这些字符出现在字符串值中的转义，使它们匹配为自己而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定字符作为转义字符，这在目标表达式不是文字字符串时可能有用。
- en: 'Parameters:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为True，否则不会转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE220]'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Will render as:'
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE221]'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`：param`作为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定的字符，当使用时将呈现为`ESCAPE`关键字，以将该字符作为转义字符。然后，此字符可以放置在`%`和`_`的前面，以允许它们像自己一样工作，而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE222]'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Will render as:'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE223]'
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE224]'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE225]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '*inherited from the* `ClauseElement.entity_namespace` *attribute of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") *的* `ClauseElement.entity_namespace`
    *属性*'
- en: '[PRE226]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Return a column expression.
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 返回列表达式。
- en: Part of the inspection interface; returns self.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 检查界面的一部分；返回自身。
- en: '[PRE227]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals` *的* `HasTraverseInternals.get_children()` *方法*'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`HasTraverseInternals`的即时子元素。
- en: This is used for visit traversal.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw可能包含更改返回的集合的标志，例如返回子集以减少较大的遍历，或者返回不同上下文的子项（例如模式级别的集合而不是子句级别）。'
- en: '[PRE229]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值中间的不区分大小写匹配进行测试：
- en: '[PRE230]'
  id: totrans-967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'E.g.:'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE231]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用了`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样行事。对于字面字符串值，可以将[`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立给定的字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通字符串值，但也可以是任意SQL表达式。除非将[`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains)标志设置为True，否则不会转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE232]'
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Will render as:'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE233]'
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将值`:param`设为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符建立为转义字符。然后可以将该字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE234]'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'Will render as:'
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE235]'
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape)结合使用：
- en: '[PRE236]'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数在传递给数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE237]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的末尾进行不区分大小写匹配：
- en: '[PRE238]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'E.g.:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE239]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个简单的字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE 通配符字符 `%` 和 `_` 不会被转义，除非将
    [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值内的所有 `"%"`、`"_"` 和转义字符本身的出现，假设比较值是一个文字字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE240]'
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Will render as:'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE241]'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中，`:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定的字符会与 `ESCAPE` 关键字一起渲染，以将该字符确定为转义字符。然后可以将此字符放置在 `%` 和 `_` 的前面，以使它们能够充当它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE242]'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'Will render as:'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE243]'
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE244]'
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述情况下，给定的文字参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE245]'
  id: totrans-1019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `ilike` 运算符，例如大小写不敏感的 LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成形式为以下之一的表达式：
- en: '[PRE246]'
  id: totrans-1023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持 ILIKE 运算符的后端上：
- en: '[PRE247]'
  id: totrans-1025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'E.g.:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE248]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'Parameters:'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-1030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE249]'
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: See also
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE250]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '*inherited from the* [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `in` 运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 给定参数 `other` 可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字面值的列表，例如：
- en: '[PRE251]'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表被转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE252]'
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的 [`tuple_()`](#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")，则可以提供元组的列表：
- en: '[PRE253]'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'An empty list, e.g.:'
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空列表，例如：
- en: '[PRE254]'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，该表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，并且通常试图将空SELECT语句作为子查询。例如在SQLite上，该表达式是：
- en: '[PRE255]'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：所有情况下，空IN表达式现在都使用执行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包括 [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志，则可以使用绑定参数，例如 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")：
- en: '[PRE256]'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，该表达式呈现一个特殊的非SQL占位符表达式，看起来像：
- en: '[PRE257]'
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，以转换为前面示例中的变量数量的绑定参数形式。如果执行语句为：
- en: '[PRE258]'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个值，数据库将传递一个绑定参数：
- en: '[PRE259]'
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2版本中的新功能：添加了“expanding”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了空列表，则会呈现一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在SQLite上，这将是：
- en: '[PRE260]'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3版本中的新功能：现在“expanding”绑定参数支持空列表
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个相关的标量选择：
- en: '[PRE261]'
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'In this calling form, [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")如下呈现：
- en: '[PRE262]'
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Parameters:'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他** – 一组文字，[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者包括 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造的 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造，并将 [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志设置为 True。'
- en: '[PRE263]'
  id: totrans-1069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") 的 `HasCacheKey.inherit_cache` *属性*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存密钥生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑其是否适合参与缓存；这在功能上等效于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象对于本类是本地的，而不是其超类，则可以在特定类上将此标志设置为`True`，如果SQL不基于本类的属性而变化。
- en: See also
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 结构的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的通用指南。'
- en: '[PRE264]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '*inherited from the* [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS` 运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 的值进行比较时会自动生成 `IS`，这会解析为 `NULL`。但是，如果在某些平台上与布尔值进行比较时，可能希望显式使用
    `IS`。
- en: See also
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE265]'
  id: totrans-1082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-1083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS DISTINCT FROM` 运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现为 “a IS DISTINCT FROM b”；在某些平台上（例如 SQLite）可能呈现为 “a IS NOT b”。
- en: '[PRE267]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-1088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 的值进行比较时会自动生成 `IS NOT`，这会解析为 `NULL`。但是，如果在某些平台上与布尔值进行比较时，可能希望显式使用
    `IS NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not()` 运算符从先前的发布中重命名为 `isnot()`。以前的名称仍然可用以保持向后兼容性。
- en: See also
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE269]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现为 “a IS NOT DISTINCT FROM b”；在某些平台上（例如 SQLite）可能呈现为 “a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not_distinct_from()` 运算符从先前的发布中重命名为 `isnot_distinct_from()`。以前的名称仍然可用以保持向后兼容性。
- en: '[PRE270]'
  id: totrans-1100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-1101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，其解析为`NULL`。然而，如果在某些平台上与布尔值进行比较时，显式使用`IS NOT`可能是可取的。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not()`运算符从以前的版本中的`isnot()`更名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[PRE272]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS NOT DISTINCT FROM b”；在某些平台（如SQLite）上可能渲染为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not_distinct_from()`运算符从以前的版本中的`isnot_distinct_from()`更名。以前的名称仍然可用于向后兼容。
- en: '[PRE273]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`istartswith`运算符，例如[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的开头进行不区分大小写匹配：
- en: '[PRE274]'
  id: totrans-1117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'E.g.:'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE275]'
  id: totrans-1119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样行为。对于字面字符串值，可以将[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，以使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个普通的字符串值，但也可以是任意的 SQL 表达式。默认情况下，LIKE 通配符`%`和`_`不会被转义，除非[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-1123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值为字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如下面的表达式：
- en: '[PRE276]'
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: 'Will render as:'
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE277]'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`:param`的`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，给定时将使用`ESCAPE`关键字来建立该字符作为转义字符。然后，可以将此字符放置在`%`和`_`之前，以允许它们充当自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如下面的表达式：
- en: '[PRE278]'
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: 'Will render as:'
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE279]'
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")结合使用：
- en: '[PRE280]'
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE281]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: The ‘key’ that in some circumstances refers to this object in a Python namespace.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下指的是 Python 命名空间中的对象的“键”。
- en: This typically refers to the “key” of the column as present in the `.c` collection
    of a selectable, e.g. `sometable.c["somekey"]` would return a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") with a `.key` of “somekey”.
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是指在可选择的`.c`集合中出现的列的“键”，例如`sometable.c["somekey"]`将返回具有“somekey”`.key`的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE282]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Produce a column label, i.e. `<columnname> AS <name>`.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列标签，即`<columnname> AS <name>`。
- en: This is a shortcut to the [`label()`](#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")
    function.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`label()`](#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")函数的快捷方式。
- en: If ‘name’ is `None`, an anonymous label name will be generated.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘name’为 `None`，将生成一个匿名标签名称。
- en: '[PRE283]'
  id: totrans-1148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '*inherited from the* [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`like`操作符。
- en: 'In a column context, produces the expression:'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE284]'
  id: totrans-1152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'E.g.:'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE285]'
  id: totrans-1154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'Parameters:'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-1157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE286]'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: See also
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE287]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '*inherited from the* [`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘match’运算符。
- en: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的类似MATCH的函数或运算符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-1167
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在版本2.0中更改：现在对于PostgreSQL，使用`plainto_tsquery()`代替`to_tsquery()`；为了与其他形式兼容，请参见[全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的MySQL特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-1172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符发出为“MATCH”。例如，这与SQLite兼容。
- en: '[PRE288]'
  id: totrans-1174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-1175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用否定与[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中更改：`not_ilike()`运算符从先前版本的`notilike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参��
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE290]'
  id: totrans-1182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")进行否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是一个空序列，编译器会生成一个“空not in”表达式。默认情况下，这会产生表达式“1 = 1”，以在所有情况下产生true。可以使用[`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")来更改这种行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中更改：`not_in()`运算符从先前版本的`notin_()`重命名。以前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.2版本开始更改：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下为一个空的IN序列生成“静态”表达式。
- en: See also
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE291]'
  id: totrans-1191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用带有[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")的否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：`not_like()`运算符从先前版本的`notlike()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE292]'
  id: totrans-1198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用带有[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")的否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：`not_ilike()`运算符从先前版本的`notilike()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE293]'
  id: totrans-1205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用带有[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")的否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`为空序列的情况下，编译器生成一个“空not in”表达式。这默认为表达式“1 = 1”，以在所有情况下产生true。[`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中发生了变化：`not_in()` 运算符从之前的版本中的 `notin_()` 重新命名。以前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.2中发生了变化：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下会针对空的 IN 序列生成一个“静态”表达式。
- en: See also
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE294]'
  id: totrans-1214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.notlike()`](#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法继承* *自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: implement the `NOT LIKE` operator.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用 [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 进行否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中发生了变化：`not_like()` 运算符从之前的版本中的 `notlike()` 重新命名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE295]'
  id: totrans-1221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.nulls_first()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法继承* *自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象产生一个 [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中发生了变化：`nulls_first()` 运算符从之前的版本中的 `nullsfirst()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE296]'
  id: totrans-1225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.nulls_last()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法继承* *自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象产生一个 [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中发生了变化：`nulls_last()` 运算符从之前的版本中的 `nullslast()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE297]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.nullsfirst()`](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法继承* *自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_first()`运算符从先前的版本中的`nullsfirst()`重命名。之前的名称仍然可用于向后兼容。
- en: '[PRE298]'
  id: totrans-1233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()`运算符从先前的版本中的`nullslast()`重命名。之前的名称仍然可用于向后兼容。
- en: '[PRE299]'
  id: totrans-1237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '*inherited from the* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    *方法* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 生成通用运算符函数。
- en: 'e.g.:'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE300]'
  id: totrans-1241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'produces:'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE301]'
  id: totrans-1243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数也可用于使位运算符明确化。例如：
- en: '[PRE302]'
  id: totrans-1245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中的值的按位与。
- en: 'Parameters:'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 将作为此元素与传递给生成函数的表达式之间的中缀运算符输出的字符串。'
- en: '`precedence` –'
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预期应用于SQL表达式中的运算符的优先级。这个整数值作为一个提示，让SQL编译器知道何时应该在特定操作周围渲染明确的括号。较低的数字将导致在与具有更高优先级的另一个运算符应用时对表达式进行括号化。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，-100将低于或等于所有运算符。
- en: See also
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我使用op()生成自定义运算符，但我的括号没有正确显示](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统上；如果为True，则该运算符将被视为“比较”运算符，即评估为布尔值true/false的运算符，例如`==`、`>`等。提供此标志是为了让ORM关系在自定义连接条件中使用时确认该运算符是一个比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已经被使用[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的运算符会自动设置该参数，但也会提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表达“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-1256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或对象，将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定了[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而没有指定的运算符将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-1257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的 Python 函数，可以以与数据库服务器上运行此运算符时相同的方式评估两个 Python 值。用于在 Python 中的 SQL 表达式评估函数，例如
    ORM 混合属性，以及在多行更新或删除后用于匹配会话中的对象的 ORM“评估器”。
- en: 'e.g.:'
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE303]'
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也适用于非 SQL 的左右对象：
- en: '[PRE304]'
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: New in version 2.0.
  id: totrans-1263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的运算符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE305]'
  id: totrans-1268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: Operate on an argument.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最低级别的操作，默认情况下会引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖这个可以允许将通用行为应用于所有操作。例如，覆盖[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左右侧：
- en: '[PRE306]'
  id: totrans-1272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: 'Parameters:'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-1275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“另一侧”。对于大多数操作，将是一个单一的标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-1276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊的运算符传递，比如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE307]'
  id: totrans-1277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '*inherited from the* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    elements replaced.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中包含替换的[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")元素。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    元素替换为给定字典中的值的此 ClauseElement 的副本：
- en: '[PRE308]'
  id: totrans-1281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-1282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-1283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: set of all columns we are proxying
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在代理的所有列的集合
- en: as of 2.0 this is explicitly deannotated columns. previously it was effectively
    deannotated columns but wasn’t enforced. annotated columns should basically not
    go into sets if at all possible because their hashing behavior is very non-performant.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 开始，这是显式的去注释列。之前它实际上是去注释的列，但并没有被强制执行。注释列应该尽可能不要进入集合，因为它们的哈希行为非常低效。
- en: '[PRE311]'
  id: totrans-1286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的“正则表达式匹配”操作符。
- en: 'E.g.:'
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE312]'
  id: totrans-1290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 试图解析为后端提供的类似于 REGEXP
    的函数或操作符，但是具体的正则表达式语法和可用的标志并**不是后端无关的**。'
- en: 'Examples include:'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时渲染 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-1294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符运算符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-1296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将作为“REGEXP”或“NOT REGEXP”发出该操作符。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 当前实现了 Oracle、PostgreSQL、MySQL 和 MariaDB 的正则表达式支持。对 SQLite 提供了部分支持。第三方方言之间的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为纯 Python 字符串传递。这些标志是特定于后端的。某些后端，如 PostgreSQL
    和 MariaDB，也可以将标志作为模式的一部分指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写的正则表达式匹配运算符 `~*`
    或 `!~*`。'
- en: New in version 1.4.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.48 改变：2.0.18 注意，由于一个实现错误，“flags”参数先前接受了 SQL 表达式对象，如列表达式，除了普通的 Python
    字符串。这种实现与缓存一起使用时不能正常工作，已被删除；应该只传递字符串作为“flags”参数，因为这些标志在 SQL 表达式中被呈现为文字内联值。
- en: See also
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE313]'
  id: totrans-1306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* [`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法*'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘正则表达式替换’运算符。
- en: 'E.g.:'
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE314]'
  id: totrans-1310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 试图解析后端提供的类似 REGEXP_REPLACE
    的函数，通常会生成函数 `REGEXP_REPLACE()`。但是，具体的正则表达式语法和可用标志**不是跨后端的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 已实现正则表达式替换支持。第三方方言的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-1316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅传递为普通的 Python 字符串。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 新版版本 1.4。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.48 改动：2.0.18 请注意，由于实现错误，之前“flags”参数接受 SQL 表达式对象，例如列表达式，而不仅限于普通的 Python
    字符串。这种实现与缓存不兼容，并已删除；应仅传递字符串作为“flags”参数，因为这些标志会作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE315]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Reverse operate on an argument.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 在参数上执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate").
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法与 [`operate()`](#sqlalchemy.sql.expression.ColumnElement.operate "sqlalchemy.sql.expression.ColumnElement.operate")
    相同。
- en: '[PRE316]'
  id: totrans-1324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用一个‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法由子类重写，以返回一个“分组”构造，即括号。特别是当“二元”表达式放置到更大表达式中时，它被“二元”表达式使用以提供环绕自己的分组，以及当 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。（请注意，子查询通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") 的应用是自动的 - 最终用户代码不应该直接使用这个方法。请注意，SQLAlchemy的子句构造会考虑运算符优先级
    - 因此在诸如 `x OR (y AND z)` 这样的表达式中，可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group "sqlalchemy.sql.expression.ColumnElement.self_group")
    方法只返回自身。'
- en: '[PRE317]'
  id: totrans-1329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Return True if the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") has a common ancestor to this [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    有一个与这个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    共同的祖先，则返回 True。
- en: '[PRE318]'
  id: totrans-1331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法*'
- en: Implement the `startswith` operator.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `startswith` 操作符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值的开头是否匹配：
- en: '[PRE319]'
  id: totrans-1335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: 'E.g.:'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE320]'
  id: totrans-1337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用 `LIKE`，存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 `True`，以对字符串值中这些字符的出现应用转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-1340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通字符串值，但也可以是任意 SQL 表达式。除非将 [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 True，否则不会对 LIKE
    通配符字符 `%` 和 `_` 进行转义。'
- en: '`autoescape` –'
  id: totrans-1341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE321]'
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'Will render as:'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE322]'
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值 `:param` 作为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来将该字符确定为转义字符。然后可以将此字符放在`%`和`_`之前，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE323]'
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'Will render as:'
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE324]'
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")结合使用：
- en: '[PRE325]'
  id: totrans-1355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE326]'
  id: totrans-1361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-1362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-1363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许将日期时间对象与左侧进行比较。
- en: '[PRE329]'
  id: totrans-1366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-1367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '*inherited from the* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    elements replaced.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同功能，只是将unique=True添加到受影响的绑定参数中，以便可以使用多个语句。
- en: '[PRE331]'
  id: totrans-1371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-1372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: General purpose “column expression” argument.
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 通用“列表达式”参数。
- en: New in version 2.0.13.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.13中新增。
- en: This type is used for “column” kinds of expressions that typically represent
    a single SQL column expression, including [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), as well as ORM-mapped attributes that
    will have a `__clause_element__()` method.
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于通常表示单个SQL列表达式的“列”类型表达式，包括[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，以及将具有`__clause_element__()`方法的ORM映射属性。
- en: '[PRE333]'
  id: totrans-1376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Defines boolean, comparison, and other operators for [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")表达式定义布尔、比较和其他运算符。
- en: 'By default, all methods call down to [`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate
    "sqlalchemy.sql.expression.ColumnOperators.operate") or [`reverse_operate()`](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate
    "sqlalchemy.sql.expression.ColumnOperators.reverse_operate"), passing in the appropriate
    operator function from the Python builtin `operator` module or a SQLAlchemy-specific
    operator function from `sqlalchemy.expression.operators`. For example the `__eq__`
    function:'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有方法都调用 [`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate
    "sqlalchemy.sql.expression.ColumnOperators.operate") 或 [`reverse_operate()`](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate
    "sqlalchemy.sql.expression.ColumnOperators.reverse_operate")，传入 Python 内置 `operator`
    模块的适当运算符函数或来自 `sqlalchemy.expression.operators` 的特定于 SQLAlchemy 的运算符函数。例如 `__eq__`
    函数：
- en: '[PRE334]'
  id: totrans-1379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'Where `operators.eq` is essentially:'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `operators.eq` 实际上是：
- en: '[PRE335]'
  id: totrans-1381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: The core column expression unit [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") overrides [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") and others to return further [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs, so that the `==` operation
    above is replaced by a clause construct.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 核心列表达单元 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    覆盖 [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate "sqlalchemy.sql.expression.Operators.operate")
    和其他方法以返回更多的 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    构造，因此上述的 `==` 操作被替换为一个子句构造。
- en: See also
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的运算符](custom_types.html#types-operators)'
- en: '[`TypeEngine.comparator_factory`](type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
- en: '[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
- en: '**Members**'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__add__()](#sqlalchemy.sql.expression.ColumnOperators.__add__), [__and__()](#sqlalchemy.sql.expression.ColumnOperators.__and__),
    [__eq__()](#sqlalchemy.sql.expression.ColumnOperators.__eq__), [__floordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__),
    [__ge__()](#sqlalchemy.sql.expression.ColumnOperators.__ge__), [__getitem__()](#sqlalchemy.sql.expression.ColumnOperators.__getitem__),
    [__gt__()](#sqlalchemy.sql.expression.ColumnOperators.__gt__), [__hash__()](#sqlalchemy.sql.expression.ColumnOperators.__hash__),
    [__invert__()](#sqlalchemy.sql.expression.ColumnOperators.__invert__), [__le__()](#sqlalchemy.sql.expression.ColumnOperators.__le__),
    [__lshift__()](#sqlalchemy.sql.expression.ColumnOperators.__lshift__), [__lt__()](#sqlalchemy.sql.expression.ColumnOperators.__lt__),
    [__mod__()](#sqlalchemy.sql.expression.ColumnOperators.__mod__), [__mul__()](#sqlalchemy.sql.expression.ColumnOperators.__mul__),
    [__ne__()](#sqlalchemy.sql.expression.ColumnOperators.__ne__), [__neg__()](#sqlalchemy.sql.expression.ColumnOperators.__neg__),
    [__or__()](#sqlalchemy.sql.expression.ColumnOperators.__or__), [__radd__()](#sqlalchemy.sql.expression.ColumnOperators.__radd__),
    [__rfloordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__), [__rmod__()](#sqlalchemy.sql.expression.ColumnOperators.__rmod__),
    [__rmul__()](#sqlalchemy.sql.expression.ColumnOperators.__rmul__), [__rshift__()](#sqlalchemy.sql.expression.ColumnOperators.__rshift__),
    [__rsub__()](#sqlalchemy.sql.expression.ColumnOperators.__rsub__), [__rtruediv__()](#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__),
    [__sa_operate__()](#sqlalchemy.sql.expression.ColumnOperators.__sa_operate__),
    [__sub__()](#sqlalchemy.sql.expression.ColumnOperators.__sub__), [__truediv__()](#sqlalchemy.sql.expression.ColumnOperators.__truediv__),
    [all_()](#sqlalchemy.sql.expression.ColumnOperators.all_), [any_()](#sqlalchemy.sql.expression.ColumnOperators.any_),
    [asc()](#sqlalchemy.sql.expression.ColumnOperators.asc), [between()](#sqlalchemy.sql.expression.ColumnOperators.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor), [bool_op()](#sqlalchemy.sql.expression.ColumnOperators.bool_op),
    [collate()](#sqlalchemy.sql.expression.ColumnOperators.collate), [concat()](#sqlalchemy.sql.expression.ColumnOperators.concat),
    [contains()](#sqlalchemy.sql.expression.ColumnOperators.contains), [desc()](#sqlalchemy.sql.expression.ColumnOperators.desc),
    [distinct()](#sqlalchemy.sql.expression.ColumnOperators.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnOperators.endswith),
    [icontains()](#sqlalchemy.sql.expression.ColumnOperators.icontains), [iendswith()](#sqlalchemy.sql.expression.ColumnOperators.iendswith),
    [ilike()](#sqlalchemy.sql.expression.ColumnOperators.ilike), [in_()](#sqlalchemy.sql.expression.ColumnOperators.in_),
    [is_()](#sqlalchemy.sql.expression.ColumnOperators.is_), [is_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from),
    [is_not()](#sqlalchemy.sql.expression.ColumnOperators.is_not), [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from),
    [isnot()](#sqlalchemy.sql.expression.ColumnOperators.isnot), [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnOperators.istartswith), [like()](#sqlalchemy.sql.expression.ColumnOperators.like),
    [match()](#sqlalchemy.sql.expression.ColumnOperators.match), [not_ilike()](#sqlalchemy.sql.expression.ColumnOperators.not_ilike),
    [not_in()](#sqlalchemy.sql.expression.ColumnOperators.not_in), [not_like()](#sqlalchemy.sql.expression.ColumnOperators.not_like),
    [notilike()](#sqlalchemy.sql.expression.ColumnOperators.notilike), [notin_()](#sqlalchemy.sql.expression.ColumnOperators.notin_),
    [notlike()](#sqlalchemy.sql.expression.ColumnOperators.notlike), [nulls_first()](#sqlalchemy.sql.expression.ColumnOperators.nulls_first),
    [nulls_last()](#sqlalchemy.sql.expression.ColumnOperators.nulls_last), [nullsfirst()](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst),
    [nullslast()](#sqlalchemy.sql.expression.ColumnOperators.nullslast), [op()](#sqlalchemy.sql.expression.ColumnOperators.op),
    [operate()](#sqlalchemy.sql.expression.ColumnOperators.operate), [regexp_match()](#sqlalchemy.sql.expression.ColumnOperators.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace),
    [reverse_operate()](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate),
    [startswith()](#sqlalchemy.sql.expression.ColumnOperators.startswith), [timetuple](#sqlalchemy.sql.expression.ColumnOperators.timetuple)'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: '[__add__()](#sqlalchemy.sql.expression.ColumnOperators.__add__), [__and__()](#sqlalchemy.sql.expression.ColumnOperators.__and__),
    [__eq__()](#sqlalchemy.sql.expression.ColumnOperators.__eq__), [__floordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__),
    [__ge__()](#sqlalchemy.sql.expression.ColumnOperators.__ge__), [__getitem__()](#sqlalchemy.sql.expression.ColumnOperators.__getitem__),
    [__gt__()](#sqlalchemy.sql.expression.ColumnOperators.__gt__), [__hash__()](#sqlalchemy.sql.expression.ColumnOperators.__hash__),
    [__invert__()](#sqlalchemy.sql.expression.ColumnOperators.__invert__), [__le__()](#sqlalchemy.sql.expression.ColumnOperators.__le__),
    [__lshift__()](#sqlalchemy.sql.expression.ColumnOperators.__lshift__), [__lt__()](#sqlalchemy.sql.expression.ColumnOperators.__lt__),
    [__mod__()](#sqlalchemy.sql.expression.ColumnOperators.__mod__), [__mul__()](#sqlalchemy.sql.expression.ColumnOperators.__mul__),
    [__ne__()](#sqlalchemy.sql.expression.ColumnOperators.__ne__), [__neg__()](#sqlalchemy.sql.expression.ColumnOperators.__neg__),
    [__or__()](#sqlalchemy.sql.expression.ColumnOperators.__or__), [__radd__()](#sqlalchemy.sql.expression.ColumnOperators.__radd__),
    [__rfloordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__), [__rmod__()](#sqlalchemy.sql.expression.ColumnOperators.__rmod__),
    [__rmul__()](#sqlalchemy.sql.expression.ColumnOperators.__rmul__), [__rshift__()](#sqlalchemy.sql.expression.ColumnOperators.__rshift__),
    [__rsub__()](#sqlalchemy.sql.expression.ColumnOperators.__rsub__), [__rtruediv__()](#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__),
    [__sa_operate__()](#sqlalchemy.sql.expression.ColumnOperators.__sa_operate__),
    [__sub__()](#sqlalchemy.sql.expression.ColumnOperators.__sub__), [__truediv__()](#sqlalchemy.sql.expression.ColumnOperators.__truediv__),
    [all_()](#sqlalchemy.sql.expression.ColumnOperators.all_), [any_()](#sqlalchemy.sql.expression.ColumnOperators.any_),
    [asc()](#sqlalchemy.sql.expression.ColumnOperators.asc), [between()](#sqlalchemy.sql.expression.ColumnOperators.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor), [bool_op()](#sqlalchemy.sql.expression.ColumnOperators.bool_op),
    [collate()](#sqlalchemy.sql.expression.ColumnOperators.collate), [concat()](#sqlalchemy.sql.expression.ColumnOperators.concat),
    [contains()](#sqlalchemy.sql.expression.ColumnOperators.contains), [desc()](#sqlalchemy.sql.expression.ColumnOperators.desc),
    [distinct()](#sqlalchemy.sql.expression.ColumnOperators.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnOperators.endswith),
    [icontains()](#sqlalchemy.sql.expression.ColumnOperators.icontains), [iendswith()](#sqlalchemy.sql.expression.ColumnOperators.iendswith),
    [ilike()](#sqlalchemy.sql.expression.ColumnOperators.ilike), [in_()](#sqlalchemy.sql.expression.ColumnOperators.in_),
    [is_()](#sqlalchemy.sql.expression.ColumnOperators.is_), [is_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from),
    [is_not()](#sqlalchemy.sql.expression.ColumnOperators.is_not), [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from),
    [isnot()](#sqlalchemy.sql.expression.ColumnOperators.isnot), [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnOperators.istartswith), [like()](#sqlalchemy.sql.expression.ColumnOperators.like),
    [match()](#sqlalchemy.sql.expression.ColumnOperators.match), [not_ilike()](#sqlalchemy.sql.expression.ColumnOperators.not_ilike),
    [not_in()](#sqlalchemy.sql.expression.ColumnOperators.not_in), [not_like()](#sqlalchemy.sql.expression.ColumnOperators.not_like),
    [notilike()](#sqlalchemy.sql.expression.ColumnOperators.notilike), [notin_()](#sqlalchemy.sql.expression.ColumnOperators.notin_),
    [notlike()](#sqlalchemy.sql.expression.ColumnOperators.notlike), [nulls_first()](#sqlalchemy.sql.expression.ColumnOperators.nulls_first),
    [nulls_last()](#sqlalchemy.sql.expression.ColumnOperators.nulls_last), [nullsfirst()](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst),
    [nullslast()](#sqlalchemy.sql.expression.ColumnOperators.nullslast), [op()](#sqlalchemy.sql.expression.ColumnOperators.op),
    [operate()](#sqlalchemy.sql.expression.ColumnOperators.operate), [regexp_match()](#sqlalchemy.sql.expression.ColumnOperators.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace),
    [reverse_operate()](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate),
    [startswith()](#sqlalchemy.sql.expression.ColumnOperators.startswith), [timetuple](#sqlalchemy.sql.expression.ColumnOperators.timetuple)'
- en: '**Class signature**'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") ([`sqlalchemy.sql.expression.Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators"))
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")（[`sqlalchemy.sql.expression.Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")）
- en: '[PRE336]'
  id: totrans-1392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: Implement the `+` operator.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`+`运算符。
- en: In a column context, produces the clause `a + b` if the parent object has non-string
    affinity. If the parent object has a string affinity, produces the concatenation
    operator, `a || b` - see [`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat").
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，如果父对象具有非字符串亲和性，则生成子句`a + b`。如果父对象具有字符串亲和性，则生成连接运算符`a || b` - 请参阅[`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat")。
- en: '[PRE337]'
  id: totrans-1395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__and__` *method
    of* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__and__` *方法*。'
- en: Implement the `&` operator.
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`&`运算符。
- en: 'When used with SQL expressions, results in an AND operation, equivalent to
    [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"),
    that is:'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQL 表达式一起使用时，会导致 AND 操作，等同于 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")，即：
- en: '[PRE338]'
  id: totrans-1399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'is equivalent to:'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE339]'
  id: totrans-1401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'Care should be taken when using `&` regarding operator precedence; the `&`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`&`时应注意运算符优先级；`&`运算符具有最高优先级。如果操作数包含更多子表达式，则应将其括在括号中：
- en: '[PRE340]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-1404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: Implement the `==` operator.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标为`None`，则生成`a IS NULL`。
- en: '[PRE342]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: Implement the `//` operator.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`//`运算符。
- en: In a column context, produces the clause `a / b`, which is the same as “truediv”,
    but considers the result type to be integer.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a / b`，这与“truediv”相同，但考虑结果类型为整数。
- en: New in version 2.0.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE343]'
  id: totrans-1411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Implement the `>=` operator.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`>=`运算符。
- en: In a column context, produces the clause `a >= b`.
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a >= b`。
- en: '[PRE344]'
  id: totrans-1414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Implement the [] operator.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`[]`运算符。
- en: This can be used by some database-specific types such as PostgreSQL ARRAY and
    HSTORE.
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以被某些特定于数据库的类型使用，例如 PostgreSQL ARRAY 和 HSTORE。
- en: '[PRE345]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Implement the `>` operator.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`>`运算符。
- en: In a column context, produces the clause `a > b`.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a > b`。
- en: '[PRE346]'
  id: totrans-1420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: Return hash(self).
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`hash(self)`。
- en: '[PRE347]'
  id: totrans-1422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__invert__` *method
    of* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__invert__` *方法*。'
- en: Implement the `~` operator.
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`~`运算符。
- en: 'When used with SQL expressions, results in a NOT operation, equivalent to [`not_()`](#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_"), that is:'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQL 表达式一起使用时，会导致 NOT 操作，等同于 [`not_()`](#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")，即：
- en: '[PRE348]'
  id: totrans-1426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'is equivalent to:'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE349]'
  id: totrans-1428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-1429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: Implement the `<=` operator.
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE351]'
  id: totrans-1432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: implement the << operator.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<<`运算符。
- en: Not used by SQLAlchemy core, this is provided for custom operator systems which
    want to use << as an extension point.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 不被 SQLAlchemy 核心使用，这是为想要使用 << 作为扩展点的自定义运算符系统提供的。
- en: '[PRE352]'
  id: totrans-1435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: Implement the `<` operator.
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE353]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: Implement the `%` operator.
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`%`运算符。
- en: In a column context, produces the clause `a % b`.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a % b`。
- en: '[PRE354]'
  id: totrans-1441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: Implement the `*` operator.
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`*`运算符。
- en: In a column context, produces the clause `a * b`.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a * b`。
- en: '[PRE355]'
  id: totrans-1444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: Implement the `!=` operator.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a != b`。如果目标为`None`，则生成`a IS NOT NULL`。
- en: '[PRE356]'
  id: totrans-1447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Implement the `-` operator.
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`-`运算符。
- en: In a column context, produces the clause `-a`.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`-a`。
- en: '[PRE357]'
  id: totrans-1450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__or__` *method of*
    [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__or__` *方法*'
- en: Implement the `|` operator.
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `|` 运算符。
- en: 'When used with SQL expressions, results in an OR operation, equivalent to [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_"), that is:'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 SQL 表达式一起使用时，导致 OR 操作的结果，等效于 [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")，即：
- en: '[PRE358]'
  id: totrans-1454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: 'is equivalent to:'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于：
- en: '[PRE359]'
  id: totrans-1456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'Care should be taken when using `|` regarding operator precedence; the `|`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `|` 时应注意运算符优先级；`|` 运算符具有最高优先级。如果操作数包含更多子表达式，则应将其括在括号中：
- en: '[PRE360]'
  id: totrans-1458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-1459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: Implement the `+` operator in reverse.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向方式实现 `+` 运算符。
- en: See [`ColumnOperators.__add__()`](#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__").
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ColumnOperators.__add__()`](#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__")。
- en: '[PRE362]'
  id: totrans-1462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: Implement the `//` operator in reverse.
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向方式实现 `//` 运算符。
- en: See [`ColumnOperators.__floordiv__()`](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__").
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ColumnOperators.__floordiv__()`](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__")。
- en: '[PRE363]'
  id: totrans-1465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: Implement the `%` operator in reverse.
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向方式实现 `%` 运算符。
- en: See [`ColumnOperators.__mod__()`](#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__").
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ColumnOperators.__mod__()`](#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__")。
- en: '[PRE364]'
  id: totrans-1468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: Implement the `*` operator in reverse.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向方式实现 `*` 运算符。
- en: See [`ColumnOperators.__mul__()`](#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__").
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ColumnOperators.__mul__()`](#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__")。
- en: '[PRE365]'
  id: totrans-1471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: implement the >> operator.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `>>` 运算符。
- en: Not used by SQLAlchemy core, this is provided for custom operator systems which
    want to use >> as an extension point.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 核心未使用此运算符，而是为希望使用 `>>` 作为扩展点的自定义运算符系统提供的。
- en: '[PRE366]'
  id: totrans-1474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: Implement the `-` operator in reverse.
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向方式实现 `-` 运算符。
- en: See [`ColumnOperators.__sub__()`](#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__").
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ColumnOperators.__sub__()`](#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__")。
- en: '[PRE367]'
  id: totrans-1477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: Implement the `/` operator in reverse.
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向方式实现 `/` 运算符。
- en: See [`ColumnOperators.__truediv__()`](#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__").
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ColumnOperators.__truediv__()`](#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__")。
- en: '[PRE368]'
  id: totrans-1480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__sa_operate__` *method
    of* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__sa_operate__` *方法*'
- en: Operate on an argument.
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖此方法可以使常见行为适用于所有操作。例如，覆盖 [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左右两侧：
- en: '[PRE369]'
  id: totrans-1485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'Parameters:'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-1487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“other”一侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-1489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊运算符传递，如 [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE370]'
  id: totrans-1490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: Implement the `-` operator.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `-` 运算符。
- en: In a column context, produces the clause `a - b`.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a - b`。
- en: '[PRE371]'
  id: totrans-1493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: Implement the `/` operator.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `/` 运算符。
- en: In a column context, produces the clause `a / b`, and considers the result type
    to be numeric.
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a / b`，并将结果类型视为数字。
- en: 'Changed in version 2.0: The truediv operator against two integers is now considered
    to return a numeric value. Behavior on specific backends may vary.'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的更改：针对两个整数的 truediv 运算现在被认为返回数值。在特定后端上的行为可能会有所不同。
- en: '[PRE372]'
  id: totrans-1497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: Produce an [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    子句。
- en: See the documentation for [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    for examples.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    的文档以获取示例。
- en: Note
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要将较新的 [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法与此方法的**传统**版本混淆，即 [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，该方法专用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，其使用不同的调用样式。
- en: '[PRE373]'
  id: totrans-1502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: Produce an [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    子句。
- en: See the documentation for [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    for examples.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    的文档以获取示例。
- en: Note
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要将较新的 [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法与此方法的**传统**版本混淆，即 [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法，该方法专用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，其使用不同的调用样式。
- en: '[PRE374]'
  id: totrans-1507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: Produce a [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    子句。
- en: '[PRE375]'
  id: totrans-1509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: Produce a [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    子句，给定下限和上限范围。
- en: '[PRE376]'
  id: totrans-1511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 AND 运算，通常通过 `&` 运算符执行。
- en: New in version 2.0.2.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中的更新。
- en: See also
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE377]'
  id: totrans-1516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 LSHIFT 运算，通常通过 `<<` 运算符执行。
- en: New in version 2.0.2.
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中的更新。
- en: See also
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE378]'
  id: totrans-1521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 NOT 运算，通常通过 `~` 运算符执行。
- en: New in version 2.0.2.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中的更新。
- en: See also
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE379]'
  id: totrans-1526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 OR 运算，通常通过 `|` 运算符执行。
- en: New in version 2.0.2.
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中的更新。
- en: See also
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE380]'
  id: totrans-1531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 RSHIFT 运算，通常通过 `>>` 运算符执行。
- en: New in version 2.0.2.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中的更新。
- en: See also
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE381]'
  id: totrans-1536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位 XOR 运算，通常通过 `^` 运算符执行，或 PostgreSQL 中使用 `#`。
- en: New in version 2.0.2.
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中的更新。
- en: See also
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE382]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '*inherited from the* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    is that when using column constructs, the “boolean” nature of the returned expression
    will be present for [**PEP 484**](https://peps.python.org/pep-0484/) purposes.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")并传递[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志为True的简写。使用[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")的一个关键优势是，在使用列构造时，返回的表达式的“布尔”性质将出现在[**PEP
    484**](https://peps.python.org/pep-0484/)中。
- en: See also
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE383]'
  id: totrans-1547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: Produce a [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")子句，给定排序规则字符串。
- en: See also
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE384]'
  id: totrans-1551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: Implement the ‘concat’ operator.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a || b`，或在MySQL上使用`concat()`运算符。
- en: '[PRE385]'
  id: totrans-1554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Implement the ‘contains’ operator.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘contains’运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对字符串值中间的匹配的LIKE表达式：
- en: '[PRE386]'
  id: totrans-1557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: 'E.g.:'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE387]'
  id: totrans-1559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样行为。对于字面字符串值，可以将[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为`True`，以对字符串值中这些字符的出现进行转义，以便它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains")参数将建立给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个简单的字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为True，否则LIKE通配符字符`%`和`_`不会被转义。'
- en: '`autoescape` –'
  id: totrans-1563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值为字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE388]'
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'Will render as:'
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE389]'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以值 `:param` 为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字来将该字符建立为转义字符。然后，可以将该字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE390]'
  id: totrans-1573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'Will render as:'
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE391]'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE392]'
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况中，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE393]'
  id: totrans-1583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Produce a [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    子句。
- en: '[PRE394]'
  id: totrans-1585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: Produce a [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    clause against the parent object.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    子句。
- en: '[PRE395]'
  id: totrans-1587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: Implement the ‘endswith’ operator.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'endswith' 运算符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对字符串值结尾的匹配的 LIKE 表达式：
- en: '[PRE396]'
  id: totrans-1590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'E.g.:'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE397]'
  id: totrans-1592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，因此在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时，这可能是有用的。
- en: 'Parameters:'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-1595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会被转义，除非
    [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志被设置为 True。'
- en: '`autoescape` –'
  id: totrans-1596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE398]'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'Will render as:'
  id: totrans-1600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE399]'
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值 `:param` 作为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字来将该字符设定为转义字符。然后可以将该字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE400]'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: 'Will render as:'
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE401]'
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 结合使用：
- en: '[PRE402]'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE403]'
  id: totrans-1616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `icontains` 操作符，例如 [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值中间的大小写不敏感匹配进行测试：
- en: '[PRE404]'
  id: totrans-1619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: 'E.g.:'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE405]'
  id: totrans-1621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用 `LIKE`，在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-1624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符 `%` 和 `_` 默认情况下不会被转义，除非设置了
    [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志为 True。'
- en: '`autoescape` –'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有的 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE406]'
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: 'Will render as:'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE407]'
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字呈现，以将该字符作为转义字符。然后，可以将此字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE408]'
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: 'Will render as:'
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE409]'
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains)结合使用：
- en: '[PRE410]'
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains)'
- en: '[PRE411]'
  id: totrans-1643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`运算符，例如，[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith)的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个对字符串值末尾进行不区分大小写匹配的 LIKE 表达式：
- en: '[PRE412]'
  id: totrans-1646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'E.g.:'
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE413]'
  id: totrans-1648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，因此在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith)标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith)参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-1651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。除非将[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith)标志设置为True，否则
    LIKE 通配符字符`%`和`_`默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-1652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE414]'
  id: totrans-1655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'Will render as:'
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE415]'
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字呈现，以将该字符作为转义字符。然后，可以将此字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE416]'
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: 'Will render as:'
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE417]'
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-1665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE418]'
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的文字参数将在传递给数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE419]'
  id: totrans-1670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如，大小写不敏感的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成的表达式形式为：
- en: '[PRE420]'
  id: totrans-1673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持ILIKE运算符的后端上：
- en: '[PRE421]'
  id: totrans-1675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'E.g.:'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE422]'
  id: totrans-1677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: 'Parameters:'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-1680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE423]'
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: See also
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE424]'
  id: totrans-1685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Implement the `in` operator.
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数`other`可以是：
- en: 'A list of literal values, e.g.:'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文字值列表，例如：
- en: '[PRE425]'
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表将转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE426]'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-1693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的[`tuple_()`](#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")的元组，则可以提供一个元组列表：
- en: '[PRE427]'
  id: totrans-1694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'An empty list, e.g.:'
  id: totrans-1695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE428]'
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现出一个“空集”表达式。这些表达式针对各个后端进行了定制，通常试图得到一个空的SELECT语句作为子查询。例如，在SQLite上，表达式是：
- en: '[PRE429]'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：在所有情况下，空IN表达式现在都使用运行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-1700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包含了[`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志，则可以使用绑定的参数，例如[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")：
- en: '[PRE430]'
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现出一个特殊的非SQL占位符表达式，看起来像：
- en: '[PRE431]'
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-1704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，以转换为前面所示的可变数量的绑定参数形式。如果执行语句为：
- en: '[PRE432]'
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE433]'
  id: totrans-1707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.2中：添加了“expanding”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了空列表，则会呈现一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在SQLite上，这将是：
- en: '[PRE434]'
  id: totrans-1710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-1711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.3中：现在“expanding”绑定参数支持空列表
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，通常是相关的标量选择：
- en: '[PRE435]'
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: 'In this calling form, [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")呈现如下：
- en: '[PRE436]'
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: 'Parameters:'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一系列文字、一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者一个包含设置为 True 的 [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志的 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造。'
- en: '[PRE437]'
  id: totrans-1718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: Implement the `IS` operator.
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS` 操作符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 值进行比较时会自动生成 `IS`，其解析为 `NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用
    `IS`。
- en: See also
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE438]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS DISTINCT FROM` 操作符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台上，例如 SQLite 可以呈现“a IS NOT b”。
- en: '[PRE439]'
  id: totrans-1726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: Implement the `IS NOT` operator.
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 值进行比较时会自动生成 `IS NOT`，其解析为 `NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用
    `IS NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not()` 操作符从以前的版本中重命名为 `isnot()`。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE440]'
  id: totrans-1732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，例如 SQLite 可以呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not_distinct_from()` 操作符从以前的版本中重命名为 `isnot_distinct_from()`。以前的名称仍可用于向后兼容。
- en: '[PRE441]'
  id: totrans-1736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: Implement the `IS NOT` operator.
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 值进行比较时会自动生成 `IS NOT`，其解析为 `NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用
    `IS NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not()` 操作符从以前的版本中重命名为 `isnot()`。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE442]'
  id: totrans-1742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，例如 SQLite 可以呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not_distinct_from()` 操作符从以前的版本中重命名为 `isnot_distinct_from()`。以前的名称仍可用于向后兼容。
- en: '[PRE443]'
  id: totrans-1746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 操作符，例如 [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的开头进行不区分大小写的匹配：
- en: '[PRE444]'
  id: totrans-1749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'E.g.:'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE445]'
  id: totrans-1751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用了`LIKE`，所以存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于字面字符串值，可以将[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为`True`，以将这些字符在字符串值中的出现进行转义，使它们作为自身匹配，而不是作为通配符字符。另外，[`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-1754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是普通字符串值，但也可以是任意的SQL表达式。除非设置了[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志为True，否则LIKE通配符字符`%`和`_`不会被转义。'
- en: '`autoescape` –'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如以下表达式：
- en: '[PRE446]'
  id: totrans-1758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'Will render as:'
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE447]'
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`:param`，为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定时，将呈现一个字符与`ESCAPE`关键字以建立该字符作为转义字符。然后可以将此字符放在`%`和`_`的前面以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如以下表达式：
- en: '[PRE448]'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: 'Will render as:'
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE449]'
  id: totrans-1767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")组合使用：
- en: '[PRE450]'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE451]'
  id: totrans-1773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: Implement the `like` operator.
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`like`运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生表达式：
- en: '[PRE452]'
  id: totrans-1776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: 'E.g.:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE453]'
  id: totrans-1778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'Parameters:'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`escape` –'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE454]'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: See also
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE455]'
  id: totrans-1786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘match’运算符。
- en: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的类似 MATCH 的函数或操作符。
    例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-1789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-1790
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自版本2.0起：现在对于 PostgreSQL 使用 `plainto_tsquery()` 而不是 `to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-1791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的 MySQL 特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-1794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-1795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-1796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将操作符输出为“MATCH”。 例如，这与 SQLite 兼容。
- en: '[PRE456]'
  id: totrans-1797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 使用否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起：`not_ilike()` 操作符从先前版本的 `notilike()` 重命名。 以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE457]'
  id: totrans-1803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: implement the `NOT IN` operator.
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 使用否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，则编译器会生成一个“空 not in” 表达式。 默认情况下，这将产生一个“1 = 1” 表达式，以在所有情况下产生
    true。 可以使用 [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起：`not_in()` 操作符从先前版本的 `notin_()` 重命名。 以前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.2起：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认为一个空的 IN 序列生成一个“静态”
    表达式。
- en: See also
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE458]'
  id: totrans-1811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: implement the `NOT LIKE` operator.
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 使用否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()` 操作符在先前版本中从 `notlike()` 重命名。 以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE459]'
  id: totrans-1817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 使用否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()` 操作符在先前版本中从 `notilike()` 重命名。 以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE460]'
  id: totrans-1823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: implement the `NOT IN` operator.
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 使用否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `other` 是空序列的情况下，编译器生成一个“空的 not in” 表达式。 这默认为表达式 “1 = 1”，以在所有情况下生成 true。 [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_in()` 操作符在先前版本中从 `notin_()` 重命名。 以前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认情况下会为空的 IN 序列生成一个“静态”表达式。
- en: See also
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE461]'
  id: totrans-1831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: implement the `NOT LIKE` operator.
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于对 [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 使用否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()` 操作符在先前版本中从 `notlike()` 重命名。 以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE462]'
  id: totrans-1837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_first()` 操作符在先前版本中从 `nullsfirst()` 重命名。 以前的名称仍然可用于向后兼容。
- en: '[PRE463]'
  id: totrans-1840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_last()`运算符在以前的版本中从`nullslast()`重命名。以前的名称仍然可用以实现向后兼容。
- en: '[PRE464]'
  id: totrans-1843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_first()`运算符在以前的版本中从`nullsfirst()`重命名。以前的名称仍然可用以实现向后兼容。
- en: '[PRE465]'
  id: totrans-1846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_last()`运算符在以前的版本中从`nullslast()`重命名。以前的名称仍然可用以实现向后兼容。
- en: '[PRE466]'
  id: totrans-1849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '*inherited from the* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的操作符函数。
- en: 'e.g.:'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE467]'
  id: totrans-1853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: 'produces:'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE468]'
  id: totrans-1855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可用于明确表示位运算符。例如：
- en: '[PRE469]'
  id: totrans-1857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 是在`somecolumn`中的值的按位与。
- en: 'Parameters:'
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-1860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将在此元素和传递给生成函数的表达式之间输出为中缀操作符。'
- en: '`precedence` –'
  id: totrans-1861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期数据库在SQL表达式中应用于操作符的优先级。此整数值作为SQL编译器的提示，用于确定何时应在特定操作周围呈现显式括号。当应用于具有更高优先级的另一个操作符时，较低的数字将导致表达式被括在括号中。默认值`0`低于所有操作符，除了逗号（`,`）和`AS`操作符外。值为100将高于或等于所有操作符，-100将低于或等于所有操作符。
- en: See also
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义操作符，但是我的括号不正确](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-1865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: legacy；如果为True，则将操作符视为“比较”操作符，即评估为布尔值true/false的操作符，如`==`、`>`等。提供此标志是为了让ORM关系能够确定当在自定义连接条件中使用操作符时，该操作符是比较操作符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已经被使用[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的操作符会自动设置这个参数，但也会提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，它将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而不指定的运算符将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-1869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 Python 函数，可以以与在数据库服务器上运行此运算符时运行相同的方式评估两个 Python 值。用于在 Python 中进行 SQL 表达式评估函数，例如用于
    ORM 混合属性的函数，以及用于在多行更新或删除后匹配会话中的对象的 ORM “评估器”。
- en: 'e.g.:'
  id: totrans-1871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE470]'
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也将适用于非 SQL 左侧和右侧对象：
- en: '[PRE471]'
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: New in version 2.0.
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE472]'
  id: totrans-1880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '*inherited from the* [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate "sqlalchemy.sql.expression.Operators.operate")
    *方法继承*'
- en: Operate on an argument.
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类中重写这一点可以使常见行为应用于所有操作。例如，重写[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左侧和右侧：
- en: '[PRE473]'
  id: totrans-1885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: 'Parameters:'
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-1887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“其他”一侧。对于大多数操作，它将是一个单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-1889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能由特殊运算符传递，如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE474]'
  id: totrans-1890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: 实现数据库特定的‘正则表达式匹配’运算符。
- en: 'E.g.:'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE475]'
  id: totrans-1893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 试图解析为后端提供的类似 REGEXP
    的函数或操作符，然而具体的正则表达式语法和可用标志**与后端无关**。'
- en: 'Examples include:'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-1896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染为 `x ~ y` 或当否定时 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-1897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染为 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-1898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符操作符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-1899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-1900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将生成操作符为 “REGEXP” 或 “NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式支持当前已经在 Oracle、PostgreSQL、MySQL 和 MariaDB 中实现。对于 SQLite，提供了部分支持。第三方方言的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-1904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通的 Python 字符串传递。这些标志是后端特定的。一些后端，如 PostgreSQL
    和 MariaDB，可能也会将标志作为模式的一部分来指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写的正则表达式匹配操作符
    `~*` 或 `!~*`。'
- en: New in version 1.4.
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 改变，：2.0.18 请注意，由于实现错误，“flags” 参数先前接受了 SQL 表达式对象，如列表达式，除了普通的 Python
    字符串。这个实现与缓存一起无法正确工作，因此被删除；应该只传递字符串给 “flags” 参数，因为这些标志将作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE476]'
  id: totrans-1909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的“正则表达式替换”操作符。
- en: 'E.g.:'
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE477]'
  id: totrans-1912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 试图解析为由后端提供的类似 REGEXP_REPLACE
    的函数，通常会生成函数 `REGEXP_REPLACE()`。然而，具体的正则表达式语法和可用标志**与后端相关**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式替换支持当前已在 Oracle、PostgreSQL、MySQL 8 或更高版本以及 MariaDB 中实现。第三方方言的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-1917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-1918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通的 Python 字符串传递。这些标志是后端特定的。一些后端，如 PostgreSQL
    和 MariaDB，可能也会将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: '自版本1.4.48更改，: 2.0.18 请注意，由于实现错误，"flags"参数先前接受了SQL表达式对象，例如列表达式，而不仅仅是普通的Python字符串。该实现与缓存一起不正确地工作，并已被删除；"flags"参数应仅传递字符串，因为这些标志被呈现为SQL表达式中的文字内联值。'
- en: See also
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE478]'
  id: totrans-1923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '*inherited from the* [`Operators.reverse_operate()`](#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* [`Operators.reverse_operate()`](#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators") *方法继承的*'
- en: Reverse operate on an argument.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate
    "sqlalchemy.sql.expression.ColumnOperators.operate").
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法与[`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate "sqlalchemy.sql.expression.ColumnOperators.operate")相同。
- en: '[PRE479]'
  id: totrans-1927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Implement the `startswith` operator.
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`操作符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值开头的匹配：
- en: '[PRE480]'
  id: totrans-1930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: 'E.g.:'
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE481]'
  id: totrans-1932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样运行。对于文字字符串值，可以将[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为`True`，以将这些字符的出现转义为字符串值内部的这些字符，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个纯字符串值，但也可以是任意的SQL表达式。除非设置了[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志为True，否则`LIKE`通配符字符`%`和`_`默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-1936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个类似于：
- en: '[PRE482]'
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: 'Will render as:'
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE483]'
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来建立该字符作为转义字符。然后可以将该字符放在`%`和`_`之前的位置，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE484]'
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: 'Will render as:'
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE485]'
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 结合使用：
- en: '[PRE486]'
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE487]'
  id: totrans-1956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客，允许在左边比较日期时间对象。
- en: '[PRE488]'
  id: totrans-1958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: Represent a SQL EXTRACT clause, `extract(field FROM expr)`.
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 SQL EXTRACT 子句，`extract(field FROM expr)`。
- en: '**Class signature**'
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Extract`](#sqlalchemy.sql.expression.Extract
    "sqlalchemy.sql.expression.Extract") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Extract`](#sqlalchemy.sql.expression.Extract "sqlalchemy.sql.expression.Extract")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE489]'
  id: totrans-1962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Represent the `false` keyword, or equivalent, in a SQL statement.
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL 语句中的 `false` 关键字，或者等效的。
- en: '[`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    is accessed as a constant via the [`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") function.'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: '[`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    通过 [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    函数被访问为一个常量。'
- en: '**Class signature**'
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.False_`](#sqlalchemy.sql.expression.False_
    "sqlalchemy.sql.expression.False_") (`sqlalchemy.sql.expression.SingletonConstant`,
    `sqlalchemy.sql.roles.ConstExprRole`, [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE490]'
  id: totrans-1967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: Represent a function FILTER clause.
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个函数 FILTER 子句。
- en: This is a special operator against aggregate and window functions, which controls
    which rows are passed to it. It’s supported only by certain database backends.
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对聚合和窗口函数的特殊操作符，用于控制传递给它的行。仅受某些数据库后端支持。
- en: 'Invocation of [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter") is via [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter"):'
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    是通过 [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") 进行的：
- en: '[PRE491]'
  id: totrans-1971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: See also
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
- en: '**Members**'
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[filter()](#sqlalchemy.sql.expression.FunctionFilter.filter), [over()](#sqlalchemy.sql.expression.FunctionFilter.over),
    [self_group()](#sqlalchemy.sql.expression.FunctionFilter.self_group)'
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: '[filter()](#sqlalchemy.sql.expression.FunctionFilter.filter), [over()](#sqlalchemy.sql.expression.FunctionFilter.over),
    [self_group()](#sqlalchemy.sql.expression.FunctionFilter.self_group)'
- en: '**Class signature**'
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE492]'
  id: totrans-1978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Produce an additional FILTER against the function.
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: 对该函数进行额外的过滤。
- en: This method adds additional criteria to the initial criteria set up by [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter").
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法向由[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")设置的初始条件添加额外的条件。
- en: Multiple criteria are joined together at SQL render time via `AND`.
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: 多个条件在SQL渲染时通过`AND`连接在一起。
- en: '[PRE493]'
  id: totrans-1982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: Produce an OVER clause against this filtered function.
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个过滤函数产生一个OVER子句。
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: 用于聚合或所谓的“窗口”函数，适用于支持窗口函数的数据库后端。
- en: 'The expression:'
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式：
- en: '[PRE494]'
  id: totrans-1986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: 'is shorthand for:'
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: 是以下内容的简写：
- en: '[PRE495]'
  id: totrans-1988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: See [`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    for a full description.
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")获取完整描述。
- en: '[PRE496]'
  id: totrans-1990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二进制”表达式使用，当它们被放置到更大的表达式中时提供一个围绕自身的分组，以及当它们被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时，由[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造使用。（请注意，子查询通常应该使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group")的应用是自动的 - 最终用户代码不应该直接使用这个方法。请注意，SQLAlchemy的子句构造考虑了运算符优先级
    - 因此在表达式中可能不需要括号，例如，`x OR (y AND z)` - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group")方法只返回自身。'
- en: '[PRE497]'
  id: totrans-1995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Represents a column label (AS).
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个列标签（AS）。
- en: Represent a label, as typically applied to any column-level element using the
    `AS` sql keyword.
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个标签，通常使用`AS` sql关键字应用于任何列级元素。
- en: '**Members**'
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[foreign_keys](#sqlalchemy.sql.expression.Label.foreign_keys), [primary_key](#sqlalchemy.sql.expression.Label.primary_key),
    [self_group()](#sqlalchemy.sql.expression.Label.self_group)'
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: '[foreign_keys](#sqlalchemy.sql.expression.Label.foreign_keys), [primary_key](#sqlalchemy.sql.expression.Label.primary_key),
    [self_group()](#sqlalchemy.sql.expression.Label.self_group)'
- en: '**Class signature**'
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    (`sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.expression.NamedColumn`)
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    (`sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.expression.NamedColumn`)
- en: '[PRE498]'
  id: totrans-2002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-2003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-2004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: 子类会重写此方法以返回“分组”结构，即括号。特别是，当“二进制”表达式放置到更大的表达式中时，它们会提供围绕自己的分组，以及当[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。 （请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.Label.self_group "sqlalchemy.sql.expression.Label.self_group")的应用是自动的
    - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了操作符优先级 - 因此，可能不需要括号，例如，在表达式`x OR (y AND
    z)`中 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Label.self_group "sqlalchemy.sql.expression.Label.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group")方法只返回自身。'
- en: '[PRE501]'
  id: totrans-2009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: Represent the NULL keyword in a SQL statement.
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL语句中表示NULL关键字。
- en: '[`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    is accessed as a constant via the [`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    function.'
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")通过[`null()`](#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")函数作为常量访问。'
- en: '**Class signature**'
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    (`sqlalchemy.sql.expression.SingletonConstant`，`sqlalchemy.sql.roles.ConstExprRole`，[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE502]'
  id: totrans-2014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Base of comparison and logical operators.
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: 比较基础和逻辑运算符。
- en: Implements base methods `Operators.operate()` and `Operators.reverse_operate()`,
    as well as `Operators.__and__()`, `Operators.__or__()`, `Operators.__invert__()`.
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: 实现基本方法`Operators.operate()`和`Operators.reverse_operate()`，以及`Operators.__and__()`，`Operators.__or__()`，`Operators.__invert__()`。
- en: '**Members**'
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__and__()](#sqlalchemy.sql.expression.Operators.__and__), [__invert__()](#sqlalchemy.sql.expression.Operators.__invert__),
    [__or__()](#sqlalchemy.sql.expression.Operators.__or__), [__sa_operate__()](#sqlalchemy.sql.expression.Operators.__sa_operate__),
    [bool_op()](#sqlalchemy.sql.expression.Operators.bool_op), [op()](#sqlalchemy.sql.expression.Operators.op),
    [operate()](#sqlalchemy.sql.expression.Operators.operate), [reverse_operate()](#sqlalchemy.sql.expression.Operators.reverse_operate)'
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
  zh: '[__and__()](#sqlalchemy.sql.expression.Operators.__and__), [__invert__()](#sqlalchemy.sql.expression.Operators.__invert__),
    [__or__()](#sqlalchemy.sql.expression.Operators.__or__), [__sa_operate__()](#sqlalchemy.sql.expression.Operators.__sa_operate__),
    [bool_op()](#sqlalchemy.sql.expression.Operators.bool_op), [op()](#sqlalchemy.sql.expression.Operators.op),
    [operate()](#sqlalchemy.sql.expression.Operators.operate), [reverse_operate()](#sqlalchemy.sql.expression.Operators.reverse_operate)'
- en: Usually is used via its most common subclass [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators").
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 通常通过其最常见的子类[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")使用。
- en: '[PRE503]'
  id: totrans-2020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: Implement the `&` operator.
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`&`运算符。
- en: 'When used with SQL expressions, results in an AND operation, equivalent to
    [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"),
    that is:'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: 当与SQL表达式一起使用时，会导致一个AND操作，相当于[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")，即：
- en: '[PRE504]'
  id: totrans-2023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: 'is equivalent to:'
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于：
- en: '[PRE505]'
  id: totrans-2025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: 'Care should be taken when using `&` regarding operator precedence; the `&`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`&`时应注意运算符优先级；`&`运算符具有最高优先级。如果操作数包含进一步的子表达式，则应将其括在括号中：
- en: '[PRE506]'
  id: totrans-2027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-2028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: Implement the `~` operator.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`~`运算符。
- en: 'When used with SQL expressions, results in a NOT operation, equivalent to [`not_()`](#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_"), that is:'
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: 当与SQL表达式一起使用时，会导致一个NOT操作，相当于[`not_()`](#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")，即：
- en: '[PRE508]'
  id: totrans-2031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: 'is equivalent to:'
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于：
- en: '[PRE509]'
  id: totrans-2033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-2034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: Implement the `|` operator.
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`|`运算符。
- en: 'When used with SQL expressions, results in an OR operation, equivalent to [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_"), that is:'
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: 当与SQL表达式一起使用时，会导致一个OR操作，相当于[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")，即：
- en: '[PRE511]'
  id: totrans-2037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: 'is equivalent to:'
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于：
- en: '[PRE512]'
  id: totrans-2039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: 'Care should be taken when using `|` regarding operator precedence; the `|`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`|`时应注意运算符优先级；`|`运算符具有最高优先级。如果操作数包含进一步的子表达式，则应将其括在括号中：
- en: '[PRE513]'
  id: totrans-2041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-2042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: Operate on an argument.
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，通常默认引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖这个可以允许将常见行为应用于所有操作。例如，覆盖[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左侧和右侧：
- en: '[PRE515]'
  id: totrans-2046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: 'Parameters:'
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-2049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘另一’侧。对于大多数操作，将是一个单一标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-2050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊运算符传递，比如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE516]'
  id: totrans-2051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: Return a custom boolean operator.
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    is that when using column constructs, the “boolean” nature of the returned expression
    will be present for [**PEP 484**](https://peps.python.org/pep-0484/) purposes.
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")并传递带有True的[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志的简写。使用[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在[**PEP
    484**](https://peps.python.org/pep-0484/)中。
- en: See also
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE517]'
  id: totrans-2056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: Produce a generic operator function.
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用运算符函数。
- en: 'e.g.:'
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE518]'
  id: totrans-2059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: 'produces:'
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE519]'
  id: totrans-2061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可用于使位运算符明确。例如：
- en: '[PRE520]'
  id: totrans-2063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位AND。
- en: 'Parameters:'
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-2066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将作为此元素与传递给生成函数的表达式之间的中缀运算符输出。'
- en: '`precedence` –'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作符在 SQL 表达式中预期数据库应用的优先级。此整数值作为 SQL 编译器的提示，用于了解何时应在特定操作周围呈现显式括号。较低的数字将导致在与具有较高优先级的另一个操作符应用时对表达式进行括号化。默认值为`0`，低于所有操作符，除了逗号（`,`）和
    `AS` 操作符。值为 100 将高于或等于所有操作符，-100 将低于或等于所有操作符。
- en: See also
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用 op() 生成自定义操作符，但我的括号不正确](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL 编译器如何呈现括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-2071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统的；如果为 True，则将该操作符视为“比较”操作符，即评估为布尔真/假值的操作符，如 `==`、`>` 等。提供此标志是为了当在自定义连接条件中使用时，ORM
    关系可以确认该操作符是比较操作符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `is_comparison` 参数已被使用 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 方法替代；此更简洁的操作符会自动设置此参数，但也会提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即 `BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-2074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制此操作符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的操作符将解析为[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的操作符将与左操作数相同类型。'
- en: '`python_impl` –'
  id: totrans-2075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的 Python 函数，可以在数据库服务器上运行此操作符时以与此操作符相同的方式评估两个 Python 值。对于在 Python 中的 SQL
    表达式评估函数非常有用，例如 ORM 混合属性，以及用于在多行更新或删除后匹配会话中的对象的 ORM“评估器”。
- en: 'e.g.:'
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE521]'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的操作符也将适用于非 SQL 左右对象：
- en: '[PRE522]'
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: New in version 2.0.
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的操作符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE523]'
  id: totrans-2086
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: Operate on an argument.
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重写此方法可以使常见行为适用于所有操作。例如，重写 [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左侧和右侧：
- en: '[PRE524]'
  id: totrans-2090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: 'Parameters:'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-2092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-2093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“other”一侧。对于大多数操作，将是一个单一标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-2094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能会被特殊操作符（例如 [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")）传递。'
- en: '[PRE525]'
  id: totrans-2095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Reverse operate on an argument.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate").
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 [`operate()`](#sqlalchemy.sql.expression.Operators.operate "sqlalchemy.sql.expression.Operators.operate")
    相同。
- en: '[PRE526]'
  id: totrans-2098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: Represent an OVER clause.
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 OVER 子句。
- en: This is a special operator against a so-called “window” function, as well as
    any aggregate function, which produces results relative to the result set itself.
    Most modern SQL backends now support window functions.
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对所谓的“窗口”函数以及任何聚合函数的特殊操作符，它产生相对于结果集本身的结果。大多数现代 SQL 后端现在支持窗口函数。
- en: '**Members**'
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[element](#sqlalchemy.sql.expression.Over.element)'
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: '[element](#sqlalchemy.sql.expression.Over.element)'
- en: '**Class signature**'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE527]'
  id: totrans-2105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: The underlying expression object to which this [`Over`](#sqlalchemy.sql.expression.Over
    "sqlalchemy.sql.expression.Over") object refers.
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    对象引用的基础表达式对象。
- en: '[PRE528]'
  id: totrans-2107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: A type that may be used to indicate any SQL column element or object that acts
    in place of one.
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于指示任何 SQL 列元素或充当其替代物的对象的类型。
- en: '[`SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression "sqlalchemy.sql.expression.SQLColumnExpression")
    is a base of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement"),
    as well as within the bases of ORM elements such as [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute"), and may be used in [**PEP 484**](https://peps.python.org/pep-0484/)
    typing to indicate arguments or return values that should behave as column expressions.'
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression "sqlalchemy.sql.expression.SQLColumnExpression")
    是 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    的基类，并且在 ORM 元素的基类中也是 [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 中的一部分，可以在 [**PEP 484**](https://peps.python.org/pep-0484/)
    类型提示中用于指示应该像列表达式一样行为的参数或返回值。'
- en: New in version 2.0.0b4.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.0b4 中新增。
- en: '**Class signature**'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") (`sqlalchemy.sql.expression.SQLCoreOperations`,
    `sqlalchemy.sql.roles.ExpressionElementRole`, `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") (`sqlalchemy.sql.expression.SQLCoreOperations`,
    `sqlalchemy.sql.roles.ExpressionElementRole`, `sqlalchemy.util.langhelpers.TypingOnly`)
- en: '[PRE529]'
  id: totrans-2113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Represent a literal SQL text fragment.
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个文字 SQL 文本片段。
- en: 'E.g.:'
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE530]'
  id: totrans-2116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: The [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct is produced using the [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    function; see that function for full documentation.
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    函数生成 [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    构造; 参见该函数以获取完整文档。
- en: See also
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '**Members**'
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[bindparams()](#sqlalchemy.sql.expression.TextClause.bindparams), [columns()](#sqlalchemy.sql.expression.TextClause.columns),
    [self_group()](#sqlalchemy.sql.expression.TextClause.self_group)'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: '[bindparams()](#sqlalchemy.sql.expression.TextClause.bindparams), [columns()](#sqlalchemy.sql.expression.TextClause.columns),
    [self_group()](#sqlalchemy.sql.expression.TextClause.self_group)'
- en: '**Class signature**'
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") (`sqlalchemy.sql.roles.DDLConstraintColumnRole`,
    `sqlalchemy.sql.roles.DDLExpressionRole`, `sqlalchemy.sql.roles.StatementOptionRole`,
    `sqlalchemy.sql.roles.WhereHavingRole`, `sqlalchemy.sql.roles.OrderByRole`, `sqlalchemy.sql.roles.FromClauseRole`,
    `sqlalchemy.sql.roles.SelectStatementRole`, `sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `sqlalchemy.sql.expression.DQLDMLClauseElement`,
    `sqlalchemy.sql.roles.BinaryElementRole`, `sqlalchemy.inspection.Inspectable`)
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.sql.expression.TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")类（`sqlalchemy.sql.roles.DDLConstraintColumnRole`、`sqlalchemy.sql.roles.DDLExpressionRole`、`sqlalchemy.sql.roles.StatementOptionRole`、`sqlalchemy.sql.roles.WhereHavingRole`、`sqlalchemy.sql.roles.OrderByRole`、`sqlalchemy.sql.roles.FromClauseRole`、`sqlalchemy.sql.roles.SelectStatementRole`、`sqlalchemy.sql.roles.InElementRole`、`sqlalchemy.sql.expression.Generative`、[`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")、`sqlalchemy.sql.expression.DQLDMLClauseElement`、`sqlalchemy.sql.roles.BinaryElementRole`、`sqlalchemy.inspection.Inspectable`）'
- en: '[PRE531]'
  id: totrans-2124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: Establish the values and/or types of bound parameters within this [`TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") construct.
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")结构中确定绑定参数的值和/或类型。
- en: 'Given a text construct such as:'
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: 给定文本构造如下：
- en: '[PRE532]'
  id: totrans-2127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: 'the [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method can be used to establish
    the initial value of `:name` and `:timestamp`, using simple keyword arguments:'
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")方法可用于使用简单的关键字参数来确定`:name`和`:timestamp`的初始值：'
- en: '[PRE533]'
  id: totrans-2129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: Where above, new [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects will be generated with the
    names `name` and `timestamp`, and values of `jack` and `datetime.datetime(2012,
    10, 8, 15, 12, 5)`, respectively. The types will be inferred from the values given,
    in this case [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    and [`DateTime`](type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime").
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，将生成新的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")对象，名称分别为`name`和`timestamp`，值分别为`jack`和`datetime.datetime(2012,
    10, 8, 15, 12, 5)`。类型将根据给定的值推断，在这种情况下为[`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")和[`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")。
- en: 'When specific typing behavior is needed, the positional `*binds` argument can
    be used in which to specify [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs directly. These constructs must
    include at least the `key` argument, then an optional value and type:'
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要特定的类型行为时，可以使用位置参数`*binds`来直接指定[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造。这些构造必须至少包括`key`参数，然后是一个可选的值和类型：
- en: '[PRE534]'
  id: totrans-2132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: Above, we specified the type of [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") for the `timestamp` bind, and the type of [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") for the `name` bind. In the case of `name` we also
    set the default value of `"jack"`.
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们为`timestamp`绑定指定了[`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")类型，并为`name`绑定指定了[`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")类型。对于`name`，我们还设置了默认值为`"jack"`。
- en: 'Additional bound parameters can be supplied at statement execution time, e.g.:'
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在语句执行时提供额外的绑定参数，例如：
- en: '[PRE535]'
  id: totrans-2135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: 'The [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method can be called repeatedly,
    where it will re-use existing [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to add new information. For
    example, we can call [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") first with typing information,
    and a second time with value information, and it will be combined:'
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")方法可以重复调用，在这里它将重用现有的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象来添加新的信息。例如，我们可以首先调用[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")来传递类型信息，然后第二次传递值信息，它将被合并：'
- en: '[PRE536]'
  id: totrans-2137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: 'The [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method also supports the concept
    of **unique** bound parameters. These are parameters that are “uniquified” on
    name at statement compilation time, so that multiple [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs may be combined together without
    the names conflicting. To use this feature, specify the [`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter") flag on each [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") object:'
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")方法还支持**unique**绑定参数的概念。这些是在语句编译时按名称“唯一化”的参数，因此多个[`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造可以合并在一起而不会冲突。要使用此功能，请在每个[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")对象上指定[`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter")标志：'
- en: '[PRE537]'
  id: totrans-2139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: 'The above statement will render as:'
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将呈现为：
- en: '[PRE538]'
  id: totrans-2141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: 'New in version 1.3.11: Added support for the [`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter") flag to work with [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs.'
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.3.11中新增：支持[`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter")标志与[`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造一起使用。
- en: '[PRE539]'
  id: totrans-2143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: Turn this [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    object into a [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") object that serves the same role as
    a SELECT statement.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")对象转换为一个[`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")对象，它扮演了与SELECT语句相同的角色。
- en: The [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") is part of the [`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") hierarchy and can be embedded into another
    statement by using the [`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery") method to produce a [`Subquery`](selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") object, which can then be SELECTed from.
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")是[`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")层次结构的一部分，可以通过使用[`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery")方法嵌入到另一个语句中，以生成一个[`Subquery`](selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")对象，然后可以从中进行SELECT操作。'
- en: 'This function essentially bridges the gap between an entirely textual SELECT
    statement and the SQL expression language concept of a “selectable”:'
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数本质上填补了纯文本SELECT语句与SQL表达式语言中“可选择”的概念之间的差距：
- en: '[PRE540]'
  id: totrans-2147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: Above, we pass a series of [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    elements to the [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method positionally. These [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") elements now become first class elements upon
    the [`TextualSelect.selected_columns`](selectable.html#sqlalchemy.sql.expression.TextualSelect.selected_columns
    "sqlalchemy.sql.expression.TextualSelect.selected_columns") column collection,
    which then become part of the `Subquery.c` collection after [`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery") is invoked.
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们按位置传递了一系列 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    元素给 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns")
    方法。这些 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    元素现在成为 [`TextualSelect.selected_columns`](selectable.html#sqlalchemy.sql.expression.TextualSelect.selected_columns
    "sqlalchemy.sql.expression.TextualSelect.selected_columns") 列集合的一部分，之后在调用 [`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery") 后成为 `Subquery.c` 集合的一部分。
- en: 'The column expressions we pass to [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") may also be typed; when we do
    so, these [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    objects become the effective return type of the column, so that SQLAlchemy’s result-set-processing
    systems may be used on the return values. This is often needed for types such
    as date or boolean types, as well as for unicode processing on some dialect configurations:'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") 的列表达式也可以具有类型；当我们这样做时，这些 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 对象将成为列的有效返回类型，因此 SQLAlchemy 的结果集处理系统可以用于返回值。对于诸如日期或布尔类型以及在某些方言配置中进行Unicode处理等类型，这通常是必需的：
- en: '[PRE541]'
  id: totrans-2150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: 'As a shortcut to the above syntax, keyword arguments referring to types alone
    may be used, if only type conversion is needed:'
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: 作为上述语法的一种快捷方式，如果只需要类型转换，则可以使用仅指向类型的关键字参数：
- en: '[PRE542]'
  id: totrans-2152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: 'The positional form of [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") also provides the unique feature
    of **positional column targeting**, which is particularly useful when using the
    ORM with complex textual queries. If we specify the columns from our model to
    [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns"),
    the result set will match to those columns positionally, meaning the name or origin
    of the column in the textual SQL doesn’t matter:'
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns")
    的位置形式还提供了**位置列定位**的独特功能，当使用 ORM 处理复杂的文本查询时，这一点尤其有用。如果我们将模型中的列指定给 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")，则结果集将按位置与这些列匹配，这意味着文本 SQL 中列的名称或来源并不重要：'
- en: '[PRE543]'
  id: totrans-2154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: 'The [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method provides a direct route
    to calling `FromClause.subquery()` as well as [`SelectBase.cte()`](selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") against a textual SELECT statement:'
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns")
    方法提供了直接调用 `FromClause.subquery()` 和 [`SelectBase.cte()`](selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") 对象的途径，用于针对文本 SELECT 语句：'
- en: '[PRE544]'
  id: totrans-2156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: 'Parameters:'
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – A series of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects, typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects from a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or ORM level column-mapped attributes, representing
    a set of columns that this textual string will SELECT from.'
  id: totrans-2158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    对象，通常是来自 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    或 ORM 级列映射属性的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象，代表此文本字符串将从中进行选择的列集合。'
- en: '`**types` – A mapping of string names to [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") type objects indicating the datatypes to use for
    names that are SELECTed from the textual string. Prefer to use the `*cols` argument
    as it also indicates positional ordering.'
  id: totrans-2159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**types` – 一个将字符串名称映射到[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类型对象的映射，指示从文本字符串中选择的名称使用的数据类型。最好使用`*cols`参数，因为它还指示位置顺序。'
- en: '[PRE545]'
  id: totrans-2160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: 子类会重写此方法以返回一个“分组”构造，即括号。特别是当“二进制”表达式被放置到更大的表达式中时，它们会提供一个围绕自身的分组，以及当[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。 （请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group
    "sqlalchemy.sql.expression.TextClause.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group
    "sqlalchemy.sql.expression.TextClause.self_group")的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造会考虑运算符优先级
    - 因此在表达式中可能不需要括号，例如，`x OR (y AND z)` - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group "sqlalchemy.sql.expression.TextClause.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group
    "sqlalchemy.sql.expression.TextClause.self_group")方法只返回自身。'
- en: '[PRE546]'
  id: totrans-2165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: Represent a TRY_CAST expression.
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个TRY_CAST表达式。
- en: Details on [`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    usage is at [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast").
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")用法的详细信息在[`try_cast()`](#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")处。'
- en: See also
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '**Members**'
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.expression.TryCast.inherit_cache)'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.expression.TryCast.inherit_cache)'
- en: '**Class signature**'
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TryCast`](#sqlalchemy.sql.expression.TryCast
    "sqlalchemy.sql.expression.TryCast") ([`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast"))
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")（[`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast"))
- en: '[PRE547]'
  id: totrans-2175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性默认为`None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为`False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标志可以在特定类上设置为`True`，如果与对象对应的 SQL 不基于此类的局部属性而改变，而不是其超类。
- en: See also
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE548]'
  id: totrans-2181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: Represent a SQL tuple.
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL 元组。
- en: '**Members**'
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.Tuple.self_group)'
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: '[`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group)'
- en: '**Class signature**'
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple")
    ([`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList"), [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple")（[`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList")，[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE549]'
  id: totrans-2187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: 将“分组”应用于此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当它们被放置到较大的表达式中时，提供一个围绕自身的分组，以及被 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造在另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 （注意，子查询通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group
    "sqlalchemy.sql.expression.Tuple.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，[`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group "sqlalchemy.sql.expression.Tuple.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy 的子句构造会考虑运算符优先级 - 因此可能不需要括号，例如，在表达式中像`x
    OR (y AND z)` - AND 的优先级高于 OR，可能不需要括号。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group "sqlalchemy.sql.expression.Tuple.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group "sqlalchemy.sql.expression.Tuple.self_group")
    方法只返回自身。'
- en: '[PRE550]'
  id: totrans-2192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: Represent a WITHIN GROUP (ORDER BY) clause.
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 WITHIN GROUP (ORDER BY) 子句。
- en: This is a special operator against so-called “ordered set aggregate” and “hypothetical
    set aggregate” functions, including `percentile_cont()`, `rank()`, `dense_rank()`,
    etc.
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对所谓的“有序集合聚合”和“假设集合聚合”函数的特殊运算符，包括 `percentile_cont()`、`rank()`、`dense_rank()`
    等。
- en: It’s supported only by certain database backends, such as PostgreSQL, Oracle
    and MS SQL Server.
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: 仅受某些数据库后端支持，如 PostgreSQL、Oracle 和 MS SQL Server。
- en: The [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    construct extracts its type from the method [`FunctionElement.within_group_type()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group_type
    "sqlalchemy.sql.functions.FunctionElement.within_group_type"). If this returns
    `None`, the function’s `.type` is used.
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    构造从方法 [`FunctionElement.within_group_type()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group_type
    "sqlalchemy.sql.functions.FunctionElement.within_group_type") 中提取其类型。如果此返回 `None`，则使用函数的
    `.type`。'
- en: '**Members**'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[over()](#sqlalchemy.sql.expression.WithinGroup.over)'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: '[over()](#sqlalchemy.sql.expression.WithinGroup.over)'
- en: '**Class signature**'
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")（[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE551]'
  id: totrans-2201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: Produce an OVER clause against this [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct.
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    构造生成一个 OVER 子句。
- en: This function has the same signature as that of [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over").
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数具有与 [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over") 相同的签名。
- en: '[PRE552]'
  id: totrans-2204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: Mixin that defines a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as a wrapper with special labeling
    behavior for an expression that already has a name.
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    作为具有特殊标签行为的包装器的混合体，用于已经具有名称的表达式。
- en: New in version 1.4.
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 新增。
- en: See also
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Improved column labeling for simple column expressions using CAST or similar](../changelog/migration_14.html#change-4449)'
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 CAST 或类似方法改进简单列表达式的列标签](../changelog/migration_14.html#change-4449)'
- en: '**Class signature**'
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.sql.expression.WrapsColumnExpression` ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.sql.expression.WrapsColumnExpression`（[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE553]'
  id: totrans-2211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: Represent the `true` keyword, or equivalent, in a SQL statement.
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 SQL 语句中的 `true` 关键字或等效物。
- en: '[`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    is accessed as a constant via the [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    function.'
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    函数访问 [`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    作为常量。
- en: '**Class signature**'
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")（`sqlalchemy.sql.expression.SingletonConstant`、`sqlalchemy.sql.roles.ConstExprRole`、[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE554]'
  id: totrans-2216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: Represent a Python-side type-coercion wrapper.
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 Python 端的类型强制转换包装器。
- en: '[`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce "sqlalchemy.sql.expression.TypeCoerce")
    supplies the [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    function; see that function for usage details.'
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce "sqlalchemy.sql.expression.TypeCoerce")
    提供了 [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    函数；请参阅该函数以获取使用详情。'
- en: See also
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '**Members**'
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.TypeCoerce.self_group)'
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.TypeCoerce.self_group)'
- en: '**Class signature**'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce
    "sqlalchemy.sql.expression.TypeCoerce") (`sqlalchemy.sql.expression.WrapsColumnExpression`)
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce
    "sqlalchemy.sql.expression.TypeCoerce")（`sqlalchemy.sql.expression.WrapsColumnExpression`）
- en: '[PRE555]'
  id: totrans-2226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当它们放置到更大的表达式中时提供一个围绕自身的分组，以及当它们被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造的FROM子句中时，也被[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造使用。（请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，自动应用[`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了运算符优先级
    - 因此在表达式中可能不需要括号，例如`x OR (y AND z)` - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group "sqlalchemy.sql.expression.TypeCoerce.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的[`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group "sqlalchemy.sql.expression.TypeCoerce.self_group")方法在[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")中只返回自身。
- en: '[PRE556]'
  id: totrans-2231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: Define a ‘unary’ expression.
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个“一元”表达式。
- en: A unary expression has a single column expression and an operator. The operator
    can be placed on the left (where it is called the ‘operator’) or right (where
    it is called the ‘modifier’) of the column expression.
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: 一元表达式有一个单独的列表达式和一个运算符。运算符可以放在列表达式的左侧（称为“运算符”）或右侧（称为“修饰符”）。
- en: '[`UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression "sqlalchemy.sql.expression.UnaryExpression")
    is the basis for several unary operators including those used by [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc"), [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc"),
    [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct"),
    [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    and [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last").'
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression "sqlalchemy.sql.expression.UnaryExpression")是几个一元运算符的基础，包括[`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")、[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")、[`distinct()`](#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")、[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")和[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")。'
- en: '**Members**'
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.UnaryExpression.self_group)'
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.UnaryExpression.self_group)'
- en: '**Class signature**'
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression")（[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE557]'
  id: totrans-2239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是它被“二元”表达式使用，当放置到更大的表达式中时提供一个围绕自身的分组，以及当放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的 FROM 子句中时，由 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造使用。（请注意，子查询通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group") 的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy
    的子句构造考虑了运算符优先级 - 因此在表达式中可能不需要括号，例如在表达式 `x OR (y AND z)` 中 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group "sqlalchemy.sql.expression.UnaryExpression.self_group")
    方法只返回自身。'
- en: Column Element Typing Utilities
  id: totrans-2244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列元素类型化实用程序
- en: Standalone utility functions imported from the `sqlalchemy` namespace to improve
    support by type checkers.
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `sqlalchemy` 命名空间导入的独立实用函数，以提高类型检查器的支持。
- en: '| Object Name | Description |'
  id: totrans-2246
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2247
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [NotNullable](#sqlalchemy.NotNullable)(val) | Types a column or ORM class
    as not nullable. |'
  id: totrans-2248
  prefs: []
  type: TYPE_TB
  zh: '| [NotNullable](#sqlalchemy.NotNullable)(val) | 将列或 ORM 类型标记为非空。 |'
- en: '| [Nullable](#sqlalchemy.Nullable)(val) | Types a column or ORM class as nullable.
    |'
  id: totrans-2249
  prefs: []
  type: TYPE_TB
  zh: '| [Nullable](#sqlalchemy.Nullable)(val) | 将列或 ORM 类型标记为可空。 |'
- en: '[PRE558]'
  id: totrans-2250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: Types a column or ORM class as not nullable.
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: 将列或 ORM 类型标记为非空。
- en: 'This can be used in select and other contexts to express that the value of
    a column cannot be null, for example due to a where condition on a nullable column:'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在选择和其他上下文中使用，以表达列的值不能为 null，例如由于可为空列上的 where 条件：
- en: '[PRE559]'
  id: totrans-2253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: At runtime this method returns the input unchanged.
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此方法返回未更改的输入。
- en: New in version 2.0.20.
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.20 中新增。
- en: '[PRE560]'
  id: totrans-2256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: Types a column or ORM class as nullable.
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: 将列或 ORM 类型标记为可空。
- en: 'This can be used in select and other contexts to express that the value of
    a column can be null, for example due to an outer join:'
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在选择和其他上下文中使用，以表达列的值可以为 null，例如由于外连接：
- en: '[PRE561]'
  id: totrans-2259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: At runtime this method returns the input unchanged.
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此方法返回未更改的输入。
- en: New in version 2.0.20.
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.20 中新增。
- en: '## Column Element Foundational Constructors'
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: '## 列元素基础构造函数'
- en: Standalone functions imported from the `sqlalchemy` namespace which are used
    when building up SQLAlchemy Expression Language constructs.
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `sqlalchemy` 命名空间导入的独立函数，用于构建 SQLAlchemy 表达语言构造时使用。
- en: '| Object Name | Description |'
  id: totrans-2264
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2265
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [and_](#sqlalchemy.sql.expression.and_)(*clauses) | Produce a conjunction
    of expressions joined by `AND`. |'
  id: totrans-2266
  prefs: []
  type: TYPE_TB
  zh: '| [and_](#sqlalchemy.sql.expression.and_)(*clauses) | 生成由 `AND` 连接的表达式的合取。'
- en: '| [bindparam](#sqlalchemy.sql.expression.bindparam)(key[, value, type_, unique,
    ...]) | Produce a “bound expression”. |'
  id: totrans-2267
  prefs: []
  type: TYPE_TB
  zh: '| [bindparam](#sqlalchemy.sql.expression.bindparam)(key[, value, type_, unique,
    ...]) | 生成一个“绑定表达式”。'
- en: '| [bitwise_not](#sqlalchemy.sql.expression.bitwise_not)(expr) | Produce a unary
    bitwise NOT clause, typically via the `~` operator. |'
  id: totrans-2268
  prefs: []
  type: TYPE_TB
  zh: '| [bitwise_not](#sqlalchemy.sql.expression.bitwise_not)(expr) | 生成一个一元位非子句，通常通过
    `~` 运算符。'
- en: '| [case](#sqlalchemy.sql.expression.case)(*whens, [value, else_]) | Produce
    a `CASE` expression. |'
  id: totrans-2269
  prefs: []
  type: TYPE_TB
  zh: '| [case](#sqlalchemy.sql.expression.case)(*whens, [value, else_]) | 生成一个 `CASE`
    表达式。'
- en: '| [cast](#sqlalchemy.sql.expression.cast)(expression, type_) | Produce a `CAST`
    expression. |'
  id: totrans-2270
  prefs: []
  type: TYPE_TB
  zh: '| [cast](#sqlalchemy.sql.expression.cast)(expression, type_) | 生成一个 `CAST`
    表达式。'
- en: '| [column](#sqlalchemy.sql.expression.column)(text[, type_, is_literal, _selectable])
    | Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object. |'
  id: totrans-2271
  prefs: []
  type: TYPE_TB
  zh: '| [column](#sqlalchemy.sql.expression.column)(text[, type_, is_literal, _selectable])
    | 生成一个 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    对象。'
- en: '| [custom_op](#sqlalchemy.sql.expression.custom_op) | Represent a ‘custom’
    operator. |'
  id: totrans-2272
  prefs: []
  type: TYPE_TB
  zh: '| [custom_op](#sqlalchemy.sql.expression.custom_op) | 代表一个“自定义”操作符。'
- en: '| [distinct](#sqlalchemy.sql.expression.distinct)(expr) | Produce an column-expression-level
    unary `DISTINCT` clause. |'
  id: totrans-2273
  prefs: []
  type: TYPE_TB
  zh: '| [distinct](#sqlalchemy.sql.expression.distinct)(expr) | 生成一个列表达式级的一元 `DISTINCT`
    子句。'
- en: '| [extract](#sqlalchemy.sql.expression.extract)(field, expr) | Return a [`Extract`](#sqlalchemy.sql.expression.Extract
    "sqlalchemy.sql.expression.Extract") construct. |'
  id: totrans-2274
  prefs: []
  type: TYPE_TB
  zh: '| [extract](#sqlalchemy.sql.expression.extract)(field, expr) | 返回一个 [`Extract`](#sqlalchemy.sql.expression.Extract
    "sqlalchemy.sql.expression.Extract") 构造。'
- en: '| [false](#sqlalchemy.sql.expression.false)() | Return a [`False_`](#sqlalchemy.sql.expression.False_
    "sqlalchemy.sql.expression.False_") construct. |'
  id: totrans-2275
  prefs: []
  type: TYPE_TB
  zh: '| [false](#sqlalchemy.sql.expression.false)() | 返回一个 [`False_`](#sqlalchemy.sql.expression.False_
    "sqlalchemy.sql.expression.False_") 构造。'
- en: '| [func](#sqlalchemy.sql.expression.func) | Generate SQL function expressions.
    |'
  id: totrans-2276
  prefs: []
  type: TYPE_TB
  zh: '| [func](#sqlalchemy.sql.expression.func) | 生成 SQL 函数表达式。'
- en: '| [lambda_stmt](#sqlalchemy.sql.expression.lambda_stmt)(lmb[, enable_tracking,
    track_closure_variables, track_on, ...]) | Produce a SQL statement that is cached
    as a lambda. |'
  id: totrans-2277
  prefs: []
  type: TYPE_TB
  zh: '| [lambda_stmt](#sqlalchemy.sql.expression.lambda_stmt)(lmb[, enable_tracking,
    track_closure_variables, track_on, ...]) | 生成一个作为 lambda 缓存的 SQL 语句。'
- en: '| [literal](#sqlalchemy.sql.expression.literal)(value[, type_, literal_execute])
    | Return a literal clause, bound to a bind parameter. |'
  id: totrans-2278
  prefs: []
  type: TYPE_TB
  zh: '| [literal](#sqlalchemy.sql.expression.literal)(value[, type_, literal_execute])
    | 返回一个与绑定参数绑定的文字子句。'
- en: '| [literal_column](#sqlalchemy.sql.expression.literal_column)(text[, type_])
    | Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object that has the [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") flag set to True. |'
  id: totrans-2279
  prefs: []
  type: TYPE_TB
  zh: '| [literal_column](#sqlalchemy.sql.expression.literal_column)(text[, type_])
    | 生成一个具有 [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") 标志设置为 True 的 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 对象。'
- en: '| [not_](#sqlalchemy.sql.expression.not_)(clause) | Return a negation of the
    given clause, i.e. `NOT(clause)`. |'
  id: totrans-2280
  prefs: []
  type: TYPE_TB
  zh: '| [not_](#sqlalchemy.sql.expression.not_)(clause) | 返回给定子句的否定，即 `NOT(clause)`。'
- en: '| [null](#sqlalchemy.sql.expression.null)() | Return a constant [`Null`](#sqlalchemy.sql.expression.Null
    "sqlalchemy.sql.expression.Null") construct. |'
  id: totrans-2281
  prefs: []
  type: TYPE_TB
  zh: '| [null](#sqlalchemy.sql.expression.null)() | 返回一个常量 [`Null`](#sqlalchemy.sql.expression.Null
    "sqlalchemy.sql.expression.Null") 构造。'
- en: '| [or_](#sqlalchemy.sql.expression.or_)(*clauses) | Produce a conjunction of
    expressions joined by `OR`. |'
  id: totrans-2282
  prefs: []
  type: TYPE_TB
  zh: '| [or_](#sqlalchemy.sql.expression.or_)(*clauses) | 生成由 `OR` 连接的表达式的合取。'
- en: '| [outparam](#sqlalchemy.sql.expression.outparam)(key[, type_]) | Create an
    ‘OUT’ parameter for usage in functions (stored procedures), for databases which
    support them. |'
  id: totrans-2283
  prefs: []
  type: TYPE_TB
  zh: '| [outparam](#sqlalchemy.sql.expression.outparam)(key[, type_]) | 为在支持它们的数据库中的函数（存储过程）使用而创建一个“OUT”参数。'
- en: '| [quoted_name](#sqlalchemy.sql.expression.quoted_name) | Represent a SQL identifier
    combined with quoting preferences. |'
  id: totrans-2284
  prefs: []
  type: TYPE_TB
  zh: '| [quoted_name](#sqlalchemy.sql.expression.quoted_name) | 表示与引用偏好结合的 SQL 标识符。'
- en: '| [text](#sqlalchemy.sql.expression.text)(text) | Construct a new [`TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") clause, representing a textual SQL string
    directly. |'
  id: totrans-2285
  prefs: []
  type: TYPE_TB
  zh: '| [text](#sqlalchemy.sql.expression.text)(text) | 构造一个新的[`TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause")子句，直接表示文本型的 SQL 字符串。'
- en: '| [true](#sqlalchemy.sql.expression.true)() | Return a constant [`True_`](#sqlalchemy.sql.expression.True_
    "sqlalchemy.sql.expression.True_") construct. |'
  id: totrans-2286
  prefs: []
  type: TYPE_TB
  zh: '| [true](#sqlalchemy.sql.expression.true)() | 返回一个常量 [`True_`](#sqlalchemy.sql.expression.True_
    "sqlalchemy.sql.expression.True_") 构造。'
- en: '| [try_cast](#sqlalchemy.sql.expression.try_cast)(expression, type_) | Produce
    a `TRY_CAST` expression for backends which support it; this is a `CAST` which
    returns NULL for un-castable conversions. |'
  id: totrans-2287
  prefs: []
  type: TYPE_TB
  zh: '| [try_cast](#sqlalchemy.sql.expression.try_cast)(expression, type_) | 为支持的后端生成一个
    `TRY_CAST` 表达式；这是一个返回不可转换为 NULL 的 `CAST`。'
- en: '| [tuple_](#sqlalchemy.sql.expression.tuple_)(*clauses, [types]) | Return a
    [`Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple").
    |'
  id: totrans-2288
  prefs: []
  type: TYPE_TB
  zh: '| [tuple_](#sqlalchemy.sql.expression.tuple_)(*clauses, [types]) | 返回一个 [`Tuple`](#sqlalchemy.sql.expression.Tuple
    "sqlalchemy.sql.expression.Tuple")。'
- en: '| [type_coerce](#sqlalchemy.sql.expression.type_coerce)(expression, type_)
    | Associate a SQL expression with a particular type, without rendering `CAST`.
    |'
  id: totrans-2289
  prefs: []
  type: TYPE_TB
  zh: '| [type_coerce](#sqlalchemy.sql.expression.type_coerce)(expression, type_)
    | 将 SQL 表达式与特定类型关联，而不会渲染 `CAST`。'
- en: '[PRE562]'
  id: totrans-2290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: Produce a conjunction of expressions joined by `AND`.
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 生成由 `AND` 连接的表达式的合取。
- en: 'E.g.:'
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE563]'
  id: totrans-2293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: 'The [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    conjunction is also available using the Python `&` operator (though note that
    compound expressions need to be parenthesized in order to function with Python
    operator precedence behavior):'
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python `&` 运算符也可以获得 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    合取（注意，复合表达式需要用括号括起来，以便与 Python 运算符优先级行为一起使用）：
- en: '[PRE564]'
  id: totrans-2295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: 'The [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    operation is also implicit in some cases; the [`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") method for example can be invoked multiple
    times against a statement, which will have the effect of each clause being combined
    using [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"):'
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    操作在某些情况下也是隐式的；例如，[`Select.where()`](selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") 方法可以针对一个语句多次调用，这将导致每个子句使用 [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 进行组合：'
- en: '[PRE565]'
  id: totrans-2297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: 'The [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    construct must be given at least one positional argument in order to be valid;
    a [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    construct with no arguments is ambiguous. To produce an “empty” or dynamically
    generated [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    expression, from a given list of expressions, a “default” element of [`true()`](#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") (or just `True`) should be specified:'
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    构造必须至少给定一个位置参数才能有效；没有参数的 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    构造是模棱两可的。要从给定的表达式列表生成一个“空”或动态生成的 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    表达式，应指定一个“默认”元素为 [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")（或只是
    `True`）：'
- en: '[PRE566]'
  id: totrans-2299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: The above expression will compile to SQL as the expression `true` or `1 = 1`,
    depending on backend, if no other expressions are present. If expressions are
    present, then the [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    value is ignored as it does not affect the outcome of an AND expression that has
    other elements.
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他表达式存在，上述表达式将编译为 SQL 表达式 `true` 或 `1 = 1`，取决于后端。如果存在其他表达式，则 [`true()`](#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") 值将被忽略，因为它不会影响具有其他元素的 AND 表达式的结果。
- en: 'Deprecated since version 1.4: The [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") element now requires that at least one argument
    is passed; creating the [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    construct with no arguments is deprecated, and will emit a deprecation warning
    while continuing to produce a blank SQL string.'
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：现在 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    元素要求至少传递一个参数；创建没有参数的 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    构造已被弃用，并将发出弃用警告，同时继续生成空白的 SQL 字符串。
- en: See also
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: 另���参阅
- en: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")'
- en: '[PRE567]'
  id: totrans-2304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: Produce a “bound expression”.
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个“绑定表达式”。
- en: The return value is an instance of [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter"); this is a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass which represents a so-called
    “placeholder” value in a SQL expression, the value of which is supplied at the
    point at which the statement in executed against a database connection.
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")的一个实例；这是一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")子类，代表了SQL表达式中的所谓“占位符”值，其值在执行语句针对数据库连接时提供。
- en: In SQLAlchemy, the [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    construct has the ability to carry along the actual value that will be ultimately
    used at expression time. In this way, it serves not just as a “placeholder” for
    eventual population, but also as a means of representing so-called “unsafe” values
    which should not be rendered directly in a SQL statement, but rather should be
    passed along to the [DBAPI](../glossary.html#term-DBAPI) as values which need
    to be correctly escaped and potentially handled for type-safety.
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")构造具有在表达式时间最终使用的实际值的能力。通过这种方式，它不仅作为最终填充的“占位符”，还作为表示所谓“不安全”值的一种方式，这些值不应直接呈现在SQL语句中，而应作为需要正确转义并可能处理类型安全性的值传递给[DBAPI](../glossary.html#term-DBAPI)。
- en: 'When using [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    explicitly, the use case is typically one of traditional deferment of parameters;
    the [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    construct accepts a name which can then be referred to at execution time:'
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: 明确使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")时，典型用例通常是传统参数的延迟；[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造接受一个名称，然后可以在执行时引用：
- en: '[PRE568]'
  id: totrans-2309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: 'The above statement, when rendered, will produce SQL similar to:'
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句在渲染时将生成类似以下的SQL：
- en: '[PRE569]'
  id: totrans-2311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: 'In order to populate the value of `:username` above, the value would typically
    be applied at execution time to a method like [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"):'
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充上述`:username`的值，该值通常会在执行时应用到类似[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的方法中：
- en: '[PRE570]'
  id: totrans-2313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: 'Explicit use of [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    is also common when producing UPDATE or DELETE statements that are to be invoked
    multiple times, where the WHERE criterion of the statement is to change on each
    invocation, such as:'
  id: totrans-2314
  prefs: []
  type: TYPE_NORMAL
  zh: 明确使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")在多次调用的情况下生成UPDATE或DELETE语句时也很常见，其中语句的WHERE条件在每次调用时都会更改，例如：
- en: '[PRE571]'
  id: totrans-2315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: 'SQLAlchemy’s Core expression system makes wide use of [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") in an implicit sense. It is typical that
    Python literal values passed to virtually all SQL expression functions are coerced
    into fixed [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    constructs. For example, given a comparison operation such as:'
  id: totrans-2316
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的核心表达式系统在隐式意义上广泛使用[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")。通常，传递给几乎所有SQL表达式函数的Python字面值都会被强制转换为固定的[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造。例如，给定一个比较操作，如下所示：
- en: '[PRE572]'
  id: totrans-2317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: 'The above expression will produce a [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") construct, where the left side is
    the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object representing the `name` column, and the right side is a [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") representing the literal value:'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式将产生一个[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression "sqlalchemy.sql.expression.BinaryExpression")构造，其中左侧是代表`name`列的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，右侧是代表字面值的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")：
- en: '[PRE573]'
  id: totrans-2319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: 'The expression above will render SQL such as:'
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式将生成类似以下的SQL：
- en: '[PRE574]'
  id: totrans-2321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: 'Where the `:name_1` parameter name is an anonymous name. The actual string
    `Wendy` is not in the rendered string, but is carried along where it is later
    used within statement execution. If we invoke a statement like the following:'
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `:name_1` 参数名是匿名的。实际字符串 `Wendy` 不在生成的字符串中，但在稍后在语句执行中使用时一直保留。如果我们调用如下语句：
- en: '[PRE575]'
  id: totrans-2323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: 'We would see SQL logging output as:'
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到 SQL 日志输出为：
- en: '[PRE576]'
  id: totrans-2325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: Above, we see that `Wendy` is passed as a parameter to the database, while the
    placeholder `:name_1` is rendered in the appropriate form for the target database,
    in this case the PostgreSQL database.
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，`Wendy` 被传递为参数到数据库，而占位符 `:name_1` 在适当形式上呈现给目标数据库，在本例中是 PostgreSQL 数据库。
- en: 'Similarly, [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    is invoked automatically when working with [CRUD](../glossary.html#term-CRUD)
    statements as far as the “VALUES” portion is concerned. The [`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct produces an `INSERT` expression
    which will, at statement execution time, generate bound placeholders based on
    the arguments passed, as in:'
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在处理 [CRUD](../glossary.html#term-CRUD) 语句的“VALUES”部分时，当自动调用 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")。[`insert()`](dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 结构产生一个 `INSERT` 表达式，在语句执行时，基于传递的参数生成绑定的占位符，如下所示：
- en: '[PRE577]'
  id: totrans-2328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'The above will produce SQL output as:'
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将产生以下 SQL 输出：
- en: '[PRE578]'
  id: totrans-2330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: The [`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, at compilation/execution time, rendered a single [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") mirroring the column name `name` as a result
    of the single `name` parameter we passed to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method.
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
  zh: 编译/执行时，[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    结构会生成一个 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")，镜像了列名
    `name`，这是由于我们传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法的单个 `name` 参数。
- en: 'Parameters:'
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`key` –'
  id: totrans-2333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` –'
- en: the key (e.g. the name) for this bind param. Will be used in the generated SQL
    statement for dialects that use named parameters. This value may be modified when
    part of a compilation operation, if other [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects exist with the same key, or
    if its length is too long and truncation is required.
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此绑定参数的键（例如名称）。将用于使用命名参数的方言生成的 SQL 语句中。如果存在具有相同键的其他 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象，或者如果其长度太长并且需要截断，则此值在编译操作的一部分时可能会被修改。
- en: If omitted, an “anonymous” name is generated for the bound parameter; when given
    a value to bind, the end result is equivalent to calling upon the [`literal()`](#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") function with a value to bind, particularly
    if the [`bindparam.unique`](#sqlalchemy.sql.expression.bindparam.params.unique
    "sqlalchemy.sql.expression.bindparam") parameter is also provided.
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果省略，将为绑定参数生成一个“匿名”名称；在给定要绑定的值时，最终结果等同于调用 [`literal()`](#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") 函数与要绑定的值，特别是如果还提供了 [`bindparam.unique`](#sqlalchemy.sql.expression.bindparam.params.unique
    "sqlalchemy.sql.expression.bindparam") 参数时。
- en: '`value` – Initial value for this bind param. Will be used at statement execution
    time as the value for this parameter passed to the DBAPI, if no other value is
    indicated to the statement execution method for this particular parameter name.
    Defaults to `None`.'
  id: totrans-2336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 此绑定参数的初始值。如果在为此特定参数名的语句执行方法中未指示其他值，则将在语句执行时作为传递给 DBAPI 的此参数的值使用。默认为
    `None`。'
- en: '`callable_` – A callable function that takes the place of “value”. The function
    will be called at statement execution time to determine the ultimate value. Used
    for scenarios where the actual bind value cannot be determined at the point at
    which the clause construct is created, but embedded bind values are still desirable.'
  id: totrans-2337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用函数，代替“value”。该函数将在语句执行时被调用，以确定最终值。用于无法在创建子句构造时确定实际绑定值的情况，但仍希望使用嵌入式绑定值的情况。'
- en: '`type_` –'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` –'
- en: A [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance representing an optional datatype for this [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"). If not passed, a type may be determined
    automatically for the bind, based on the given value; for example, trivial Python
    types such as `str`, `int`, `bool` may result in the [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String"), [`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") or [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") types being automatically selected.
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示此 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    的可选数据类型的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    类或实例。如果未传递，类型可能会根据给定的值自动确定绑定；例如，trivial Python 类型，如 `str`、`int`、`bool`，可能会导致自动选择
    [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")、[`Integer`](type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 或 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 类型。
- en: The type of a [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    is significant especially in that the type will apply pre-processing to the value
    before it is passed to the database. For example, a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") which refers to a datetime value, and is
    specified as holding the [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") type, may apply conversion needed to the value (such
    as stringification on SQLite) before passing the value to the database.
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    的类型非常重要，特别是该类型将在将值传递给数据库之前对值进行预处理。例如，引用 datetime 值的 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，并且指定为持有 [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") 类型，可能会在传递值之前对值进行所需的转换（例如，在 SQLite 上进行字符串化）。'
- en: '`unique` – if True, the key name of this [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") will be modified if another [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") of the same name already has been located
    within the containing expression. This flag is used generally by the internals
    when producing so-called “anonymous” bound expressions, it isn’t generally applicable
    to explicitly-named [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    constructs.'
  id: totrans-2341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique` – 如果为 True，则此 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 的键名将被修改，如果已经在包含表达式中找到具有相同名称的另一个 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")。此标志通常由内部使用，用于生成所谓的“匿名”绑定表达式，通常不适用于显式命名的
    [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    结构。'
- en: '`required` – If `True`, a value is required at execution time. If not passed,
    it defaults to `True` if neither [`bindparam.value`](#sqlalchemy.sql.expression.bindparam.params.value
    "sqlalchemy.sql.expression.bindparam") or [`bindparam.callable`](#sqlalchemy.sql.expression.bindparam.params.callable
    "sqlalchemy.sql.expression.bindparam") were passed. If either of these parameters
    are present, then [`bindparam.required`](#sqlalchemy.sql.expression.bindparam.params.required
    "sqlalchemy.sql.expression.bindparam") defaults to `False`.'
  id: totrans-2342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required` – 如果为 `True`，则在执行时需要一个值。如果未传递，则默认为 `True`，如果没有传递 [`bindparam.value`](#sqlalchemy.sql.expression.bindparam.params.value
    "sqlalchemy.sql.expression.bindparam") 或 [`bindparam.callable`](#sqlalchemy.sql.expression.bindparam.params.callable
    "sqlalchemy.sql.expression.bindparam")，则为 `True`。如果这些参数中的任何一个存在，则 [`bindparam.required`](#sqlalchemy.sql.expression.bindparam.params.required
    "sqlalchemy.sql.expression.bindparam") 默认为 `False`。'
- en: '`quote` – True if this parameter name requires quoting and is not currently
    known as a SQLAlchemy reserved word; this currently only applies to the Oracle
    backend, where bound names must sometimes be quoted.'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` – 如果此参数名需要引号，并且当前不被认为是 SQLAlchemy 的保留字，则为 True；目前仅适用于 Oracle 后端，在那里绑定的名称有时必须用引号括起来。'
- en: '`isoutparam` – if True, the parameter should be treated like a stored procedure
    “OUT” parameter. This applies to backends such as Oracle which support OUT parameters.'
  id: totrans-2344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isoutparam` – 如果为 True，则应该将该参数视为存储过程的“OUT”参数。这适用于支持 OUT 参数的后端，如 Oracle。'
- en: '`expanding` –'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expanding` –'
- en: if True, this parameter will be treated as an “expanding” parameter at execution
    time; the parameter value is expected to be a sequence, rather than a scalar value,
    and the string SQL statement will be transformed on a per-execution basis to accommodate
    the sequence with a variable number of parameter slots passed to the DBAPI. This
    is to allow statement caching to be used in conjunction with an IN clause.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则此参数将在执行时被视为“扩展”参数；参数值应为序列，而不是标量值，并且字符串 SQL 语句将在每次执行时进行转换，以适应具有可变数量参数槽的序列传递给
    DBAPI。这是为了允许语句缓存与 IN 子句结合使用。
- en: See also
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[Using IN expressions](../orm/extensions/baked.html#baked-in) - with baked
    queries'
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 IN 表达式](../orm/extensions/baked.html#baked-in) - 使用烘焙查询'
- en: Note
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The “expanding” feature does not support “executemany”- style parameter sets.
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “扩展”功能不支持“executemany”样式的参数集。
- en: New in version 1.2.
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.2 中新增。
- en: 'Changed in version 1.3: the “expanding” bound parameter feature now supports
    empty lists.'
  id: totrans-2353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.3 中更改：现在“扩展”边界参数功能支持空列表。
- en: '`literal_execute` –'
  id: totrans-2354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`literal_execute` –'
- en: if True, the bound parameter will be rendered in the compile phase with a special
    “POSTCOMPILE” token, and the SQLAlchemy compiler will render the final value of
    the parameter into the SQL statement at statement execution time, omitting the
    value from the parameter dictionary / list passed to DBAPI `cursor.execute()`.
    This produces a similar effect as that of using the `literal_binds`, compilation
    flag, however takes place as the statement is sent to the DBAPI `cursor.execute()`
    method, rather than when the statement is compiled. The primary use of this capability
    is for rendering LIMIT / OFFSET clauses for database drivers that can’t accommodate
    for bound parameters in these contexts, while allowing SQL constructs to be cacheable
    at the compilation level.
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则绑定参数将在编译阶段以特殊的“POSTCOMPILE”标记呈现，并且 SQLAlchemy 编译器将在语句执行时将参数的最终值呈现到
    SQL 语句中，省略了参数字典/列表中传递给 DBAPI `cursor.execute()` 的值。这产生了类似于使用 `literal_binds` 编译标志的效果，但是发生在语句发送到
    DBAPI `cursor.execute()` 方法时，而不是在语句编译时。此功能的主要用途是为无法在这些上下文中适应绑定参数的数据库驱动程序渲染 LIMIT
    / OFFSET 子句，同时允许 SQL 构造在编译级别可缓存。
- en: 'New in version 1.4: Added “post compile” bound parameters'
  id: totrans-2356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 1.4 中新增：“编译后”边界参数。
- en: See also
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “post compile” bound parameters used for LIMIT/OFFSET in Oracle, SQL Server](../changelog/migration_14.html#change-4808).'
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Oracle、SQL Server 中用于 LIMIT/OFFSET 的新“编译后”边界参数](../changelog/migration_14.html#change-4808)。'
- en: See also
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sending Parameters](../tutorial/dbapi_transactions.html#tutorial-sending-parameters)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
  zh: '[发送参数](../tutorial/dbapi_transactions.html#tutorial-sending-parameters) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE579]'
  id: totrans-2361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: Produce a unary bitwise NOT clause, typically via the `~` operator.
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个一元位取反子句，通常通过 `~` 运算符。
- en: Not to be confused with boolean negation [`not_()`](#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_").
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: 请勿与布尔取反 [`not_()`](#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")
    混淆。
- en: New in version 2.0.2.
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.2 中新增。
- en: See also
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE580]'
  id: totrans-2367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: Produce a `CASE` expression.
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 `CASE` 表达式。
- en: The `CASE` construct in SQL is a conditional object that acts somewhat analogously
    to an “if/then” construct in other languages. It returns an instance of [`Case`](#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case").
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的 `CASE` 构造是一个条件对象，其行为在某种程度上类似于其他语言中的“if/then”构造。它返回 [`Case`](#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") 的实例。
- en: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    in its usual form is passed a series of “when” constructs, that is, a list of
    conditions and results as tuples:'
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    通常形式下被传递一系列“when”构造，即条件和结果作为元组的列表：'
- en: '[PRE581]'
  id: totrans-2371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: 'The above statement will produce SQL resembling:'
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将产生类似于：
- en: '[PRE582]'
  id: totrans-2373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: 'When simple equality expressions of several values against a single parent
    column are needed, [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    also has a “shorthand” format used via the [`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case") parameter, which is passed a column expression
    to be compared. In this form, the [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") parameter is passed as a dictionary containing
    expressions to be compared against keyed to result expressions. The statement
    below is equivalent to the preceding statement:'
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要针对单个父列的多个值的简单相等表达式时，[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")还具有通过[`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case")参数使用的“简写”格式，该参数传递一个要比较的列表达式。在这种形式中，通过包含要与键控结果表达式进行比较的表达式的字典传递[`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case")参数。下面的语句等效于前面的语句：
- en: '[PRE583]'
  id: totrans-2375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: 'The values which are accepted as result values in [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") as well as with [`case.else_`](#sqlalchemy.sql.expression.case.params.else_
    "sqlalchemy.sql.expression.case") are coerced from Python literals into [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs. SQL expressions, e.g. [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs, are accepted as well. To
    coerce a literal string expression into a constant expression rendered inline,
    use the [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    construct, as in:'
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`case.whens`](#sqlalchemy.sql.expression.case.params.whens "sqlalchemy.sql.expression.case")中接受的结果值以及在[`case.else_`](#sqlalchemy.sql.expression.case.params.else_
    "sqlalchemy.sql.expression.case")中接受的值都从Python文字转换为[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造。也接受SQL表达式，例如[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")构造。要将文字字符串表达式转换为内联呈现的常量表达式，请使用[`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造，如下所示：
- en: '[PRE584]'
  id: totrans-2377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: 'The above will render the given constants without using bound parameters for
    the result values (but still for the comparison values), as in:'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: 以上将呈现给定的常量，而不使用绑定参数作为结果值（但仍然用于比较值），如下所示：
- en: '[PRE585]'
  id: totrans-2379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: 'Parameters:'
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*whens` –'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*whens` –'
- en: The criteria to be compared against, [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") accepts two different forms, based on whether
    or not [`case.value`](#sqlalchemy.sql.expression.case.params.value "sqlalchemy.sql.expression.case")
    is used.
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要进行比较的标准，[`case.whens`](#sqlalchemy.sql.expression.case.params.whens "sqlalchemy.sql.expression.case")接受两种不同形式，取决于是否使用[`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case")。
- en: 'Changed in version 1.4: the [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    function now accepts the series of WHEN conditions positionally'
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")函数现在按位置接受WHEN条件的系列
- en: 'In the first form, it accepts multiple 2-tuples passed as positional arguments;
    each 2-tuple consists of `(<sql expression>, <value>)`, where the SQL expression
    is a boolean expression and “value” is a resulting value, e.g.:'
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一种形式中，它接受多个作为位置参数传递的2元组；每个2元组由`(<sql表达式>, <值>)`组成，其中SQL表达式是布尔表达式，“值”是一个结果值，例如：
- en: '[PRE586]'
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE586]'
- en: 'In the second form, it accepts a Python dictionary of comparison values mapped
    to a resulting value; this form requires [`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case") to be present, and values will be compared using
    the `==` operator, e.g.:'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第二种形式中，它接受一个Python字典，将比较值映射到一个结果值；这种形式需要[`case.value`](#sqlalchemy.sql.expression.case.params.value
    "sqlalchemy.sql.expression.case")存在，并且值将使用`==`运算符进行比较，例如：
- en: '[PRE587]'
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '`value` – An optional SQL expression which will be used as a fixed “comparison
    point” for candidate values within a dictionary passed to [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case").'
  id: totrans-2388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 一个可选的SQL表达式，将用作传递给[`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case")的字典中的候选值的固定“比较点”。'
- en: '`else_` – An optional SQL expression which will be the evaluated result of
    the `CASE` construct if all expressions within [`case.whens`](#sqlalchemy.sql.expression.case.params.whens
    "sqlalchemy.sql.expression.case") evaluate to false. When omitted, most databases
    will produce a result of NULL if none of the “when” expressions evaluate to true.'
  id: totrans-2389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else_` – 如果[`case.whens`](#sqlalchemy.sql.expression.case.params.whens "sqlalchemy.sql.expression.case")中的所有表达式求值结果都为false，则将是`CASE`构造中的可选SQL表达式的评估结果。如果省略，则大多数数据库将在“when”表达式没有一个求值结果为true时产生一个NULL的结果。'
- en: '[PRE588]'
  id: totrans-2390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: Produce a `CAST` expression.
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个`CAST`表达式。
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    returns an instance of [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast").'
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")返回一个[`Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast")的实例。'
- en: 'E.g.:'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE589]'
  id: totrans-2394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: 'The above statement will produce SQL resembling:'
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于：
- en: '[PRE590]'
  id: totrans-2396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: The [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function performs two distinct functions when used. The first is that it renders
    the `CAST` expression within the resulting SQL string. The second is that it associates
    the given type (e.g. [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or instance) with the column expression on
    the Python side, which means the expression will take on the expression operator
    behavior associated with that type, as well as the bound-value handling and result-row-handling
    behavior of the type.
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用时，[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")函数执行两个不同的功能。首先，它在生成的SQL字符串中呈现`CAST`表达式。其次，它将给定类型（例如[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或实例）与Python端的列表达式关联，这意味着表达式将具有与该类型关联的表达式运算符行为，以及该类型的绑定值处理和结果行处理行为。
- en: An alternative to [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    is the [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    function. This function performs the second task of associating an expression
    with a specific type, but does not render the `CAST` expression in SQL.
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: 一个替代[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")的函数是[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")。此函数执行关联表达式与特定类型的第二个任务，但不会在SQL中渲染`CAST`表达式。
- en: 'Parameters:'
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`expression` – A SQL expression, such as a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression or a Python string which
    will be coerced into a bound literal value.'
  id: totrans-2400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression` – 一个SQL表达式，例如[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")表达式或将被强制转换为绑定字面值的Python字符串。'
- en: '`type_` – A [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance indicating the type to which the `CAST` should apply.'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")类或实例，指示`CAST`应用的类型。'
- en: See also
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    - an alternative to CAST that results in NULLs when the cast fails, instead of
    raising an error. Only supported by some dialects.'
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    - 一个替代`CAST`的函数，当转换失败时会产生NULL，而不是引发错误。只有一些方言支持。'
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - an alternative to CAST that coerces the type on the Python side only, which
    is often sufficient to generate the correct SQL and data coercion.'
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - 一个替代`CAST`的函数，仅在Python端强制转换类型，通常足以生成正确的SQL和数据强制转换。'
- en: '[PRE591]'
  id: totrans-2406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object.
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")对象。
- en: 'The [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    is a lightweight analogue to the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") class. The [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function can be invoked with just a name alone,
    as in:'
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")类的轻量级类比。可以仅使用名称调用[`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")函数，如下所示：'
- en: '[PRE592]'
  id: totrans-2409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: 'The above statement would produce SQL like:'
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将产生如下 SQL：
- en: '[PRE593]'
  id: totrans-2411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: 'Once constructed, [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    may be used like any other SQL expression element such as within [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs:'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构造完成，[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    可以像其他 SQL 表达式元素一样在 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造中使用：
- en: '[PRE594]'
  id: totrans-2413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: The text handled by [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    is assumed to be handled like the name of a database column; if the string contains
    mixed case, special characters, or matches a known reserved word on the target
    backend, the column expression will render using the quoting behavior determined
    by the backend. To produce a textual SQL expression that is rendered exactly without
    any quoting, use [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") instead, or pass `True` as the value
    of [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal "sqlalchemy.sql.expression.column").
    Additionally, full SQL statements are best handled using the [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct.
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    处理的文本被假定为像处理数据库列名一样；如果字符串包含混合大小写、特殊字符或与目标后端的已知保留字匹配，列表达式将使用后端确定的引用行为呈现。要生成一个完全不带引用的文本
    SQL 表达式，请使用 [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    ，或者将 [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") 的值传递为 `True`。此外，最好使用 [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造来处理完整的 SQL 语句。'
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    can be used in a table-like fashion by combining it with the [`table()`](selectable.html#sqlalchemy.sql.expression.table
    "sqlalchemy.sql.expression.table") function (which is the lightweight analogue
    to [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) to produce a working table construct with minimal boilerplate:'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    可以通过与 [`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    函数（它是 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的轻量级类比）结合使用，以生成具有最小样板的工作表构造：'
- en: '[PRE595]'
  id: totrans-2416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: A [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    / [`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    construct like that illustrated above can be created in an ad-hoc fashion and
    is not associated with any [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), DDL, or events, unlike its [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") counterpart.
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: 像上面示例的 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    / [`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")
    构造可以以临时方式创建，并且不与任何 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")、DDL
    或事件关联，不像它的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对应物。
- en: 'Parameters:'
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`text` – the text of the element.'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` – 元素的文本。'
- en: '`type` – [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object which can associate this [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") with a type.'
  id: totrans-2420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` – [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    对象，它可以将此 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    与一个类型关联。'
- en: '`is_literal` – if True, the [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") is assumed to be an exact expression
    that will be delivered to the output with no quoting rules applied regardless
    of case sensitive settings. the [`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") function essentially invokes [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") while passing `is_literal=True`.'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_literal` – 如果为 True，则假定 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 是一个精确的表达式，无论大小写设置如何，都将以不应用引用规则的方式传递到输出中。
    [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    函数本质上调用 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    ，同时传递 `is_literal=True`。'
- en: See also
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
- en: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")'
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")'
- en: '[`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")'
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: '[`table()`](selectable.html#sqlalchemy.sql.expression.table "sqlalchemy.sql.expression.table")'
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '[Selecting with Textual Column Expressions](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用文本列表达式进行选择](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
- en: '[PRE596]'
  id: totrans-2428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: Represent a ‘custom’ operator.
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个“自定义”操作符。
- en: '[`custom_op`](#sqlalchemy.sql.expression.custom_op "sqlalchemy.sql.expression.custom_op")
    is normally instantiated when the [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") or [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") methods are used to create a custom
    operator callable. The class can also be used directly when programmatically constructing
    expressions. E.g. to represent the “factorial” operation:'
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    或 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    方法创建自定义操作符可调用时，通常会实例化 [`custom_op`](#sqlalchemy.sql.expression.custom_op "sqlalchemy.sql.expression.custom_op")。该类也可在以编程方式构建表达式时直接使用。例如，表示“阶乘”操作：
- en: '[PRE597]'
  id: totrans-2431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: See also
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '**Class signature**'
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.custom_op`](#sqlalchemy.sql.expression.custom_op
    "sqlalchemy.sql.expression.custom_op") (`sqlalchemy.sql.expression.OperatorType`,
    `typing.Generic`)
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.custom_op`](#sqlalchemy.sql.expression.custom_op
    "sqlalchemy.sql.expression.custom_op") (`sqlalchemy.sql.expression.OperatorType`,
    `typing.Generic`)
- en: '[PRE598]'
  id: totrans-2437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: Produce an column-expression-level unary `DISTINCT` clause.
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个基于列表达式的一元 `DISTINCT` 子句。
- en: 'This applies the `DISTINCT` keyword to an **individual column expression**
    (e.g. not the whole statement), and renders **specifically in that column position**;
    this is used for containment within an aggregate function, as in:'
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向 **单个列表达式** 应用 `DISTINCT` 关键字（例如，不是整个语句），并且**具体在该列位置上**呈现；这用于在聚合函数中的包含，例如：
- en: '[PRE599]'
  id: totrans-2440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: 'The above would produce an statement resembling:'
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将产生类似于以下语句：
- en: '[PRE600]'
  id: totrans-2442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: Tip
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    function does **not** apply DISTINCT to the full SELECT statement, instead applying
    a DISTINCT modifier to **individual column expressions**. For general `SELECT
    DISTINCT` support, use the [`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") method on [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select").
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    函数 **不会** 将 DISTINCT 应用于完整的 SELECT 语句，而是将 DISTINCT 修饰符应用于 **单个列表达式**。对于一般的 `SELECT
    DISTINCT` 支持，请在 [`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") 上使用方法 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")。'
- en: 'The [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    function is also available as a column-level method, e.g. [`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct"), as in:'
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    函数也可以作为列级方法使用，例如 [`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct")，如下所示：'
- en: '[PRE601]'
  id: totrans-2446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: The [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    operator is different from the [`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") method of [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), which produces a `SELECT` statement with
    `DISTINCT` applied to the result set as a whole, e.g. a `SELECT DISTINCT` expression.
    See that method for further information.
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    操作符与 [`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") 方法不同，后者会将 `DISTINCT` 应用于整个结果集，例如
    `SELECT DISTINCT` 表达式。有关该方法的更多信息，请参见该方法。'
- en: See also
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct")'
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.distinct()`](#sqlalchemy.sql.expression.ColumnElement.distinct
    "sqlalchemy.sql.expression.ColumnElement.distinct")'
- en: '[`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct")'
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.distinct()`](selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct")'
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[PRE602]'
  id: totrans-2452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: Return a [`Extract`](#sqlalchemy.sql.expression.Extract "sqlalchemy.sql.expression.Extract")
    construct.
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`Extract`](#sqlalchemy.sql.expression.Extract "sqlalchemy.sql.expression.Extract")
    构造。
- en: This is typically available as [`extract()`](#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") as well as `func.extract` from the [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") namespace.
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常也可以通过 [`extract()`](#sqlalchemy.sql.expression.extract "sqlalchemy.sql.expression.extract")
    或 [`func.extract`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    从 [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func") 命名空间中获取。
- en: 'Parameters:'
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`field` – The field to extract.'
  id: totrans-2456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field` – 要提取的字段。'
- en: '`expr` – A column or Python scalar expression serving as the right side of
    the `EXTRACT` expression.'
  id: totrans-2457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expr` – 作为 `EXTRACT` 表达式右侧的列或 Python 标量表达式。'
- en: 'E.g.:'
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE603]'
  id: totrans-2459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: In the above example, the statement is used to select ids from the database
    where the `YEAR` component matches a specific value.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，该语句用于从数据库中选择 `YEAR` 组件与特定值匹配的 ids。
- en: 'Similarly, one can also select an extracted component:'
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，也可以选择提取的组件：
- en: '[PRE604]'
  id: totrans-2462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: The implementation of `EXTRACT` may vary across database backends. Users are
    reminded to consult their database documentation.
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXTRACT` 的实现在不同的数据库后端可能会有所不同。用户被提醒要查阅其数据库文档。'
- en: '[PRE605]'
  id: totrans-2464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: Return a [`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    construct.
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    构造。
- en: 'E.g.:'
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE606]'
  id: totrans-2467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: 'A backend which does not support true/false constants will render as an expression
    against 1 or 0:'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不支持真/假常量的后端将以对 1 或 0 的表达式形式呈现：
- en: '[PRE607]'
  id: totrans-2469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: 'The [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    and [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    constants also feature “short circuit” operation within an [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") or [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") conjunction:'
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    和 [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    常量还在 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    或 [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 连接中具有“短路”操作：'
- en: '[PRE608]'
  id: totrans-2471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: See also
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")'
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")'
- en: '[PRE609]'
  id: totrans-2474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: Generate SQL function expressions.
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 SQL 函数表达式。
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    is a special object instance which generates SQL functions based on name-based
    attributes, e.g.:'
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    是一个特殊的对象实例，它基于基于名称的属性生成 SQL 函数，例如：'
- en: '[PRE610]'
  id: totrans-2477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: 'The returned object is an instance of [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"), and is a column-oriented SQL element like
    any other, and is used in that way:'
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")
    的一个实例，与任何其他列导向的 SQL 元素一样，并以那种方式使用：
- en: '[PRE611]'
  id: totrans-2479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: 'Any name can be given to [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func").
    If the function name is unknown to SQLAlchemy, it will be rendered exactly as
    is. For common SQL functions which SQLAlchemy is aware of, the name may be interpreted
    as a *generic function* which will be compiled appropriately to the target database:'
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: 可以给[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")任何名称。如果SQLAlchemy不知道函数名称，则将按原样呈现。对于SQLAlchemy知道的常见SQL函数，该名称可能被解释为*通用函数*，将被适当地编译到目标数据库：
- en: '[PRE612]'
  id: totrans-2481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: 'To call functions which are present in dot-separated packages, specify them
    in the same manner:'
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用位于点分隔包中的函数，请以相同的方式指定它们：
- en: '[PRE613]'
  id: totrans-2483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: 'SQLAlchemy can be made aware of the return type of functions to enable type-specific
    lexical and result-based behavior. For example, to ensure that a string-based
    function returns a Unicode value and is similarly treated as a string in expressions,
    specify [`Unicode`](type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    as the type:'
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy可以意识到函数的返回类型，以启用特定类型的词法和基于结果的行为。例如，要确保基于字符串的函数返回Unicode值，并在表达式中类似地对待为字符串，请指定[`Unicode`](type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")作为类型：
- en: '[PRE614]'
  id: totrans-2485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: 'The object returned by a [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    call is usually an instance of [`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function"). This object meets the “column” interface,
    including comparison and labeling functions. The object can also be passed the
    `Connectable.execute()` method of a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), where it will be wrapped inside of a SELECT statement
    first:'
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")调用返回的对象通常是[`Function`](functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function")的实例。此对象符合“列”接口，包括比较和标记函数。该对象还可以传递给[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的`Connectable.execute()`方法，在那里它首先将被包装在SELECT语句中：
- en: '[PRE615]'
  id: totrans-2487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: In a few exception cases, the [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    accessor will redirect a name to a built-in expression such as [`cast()`](#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") or [`extract()`](#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract"), as these names have well-known meaning but
    are not exactly the same as “functions” from a SQLAlchemy perspective.
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些特殊情况下，[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")访问器将将名称重定向到内置表达式，例如[`cast()`](#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")或[`extract()`](#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract")，因为这些名称具有众所周知的含义，但从SQLAlchemy的角度来看并不完全相同于“函数”。
- en: Functions which are interpreted as “generic” functions know how to calculate
    their return type automatically. For a listing of known generic functions, see
    [SQL and Generic Functions](functions.html#generic-functions).
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: 被解释为“通用”函数的函数知道如何自动计算其返回类型。有关已知通用函数的列表，请参见[SQL和通用函数](functions.html#generic-functions)。
- en: Note
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    construct has only limited support for calling standalone “stored procedures”,
    especially those with special parameterization concerns.
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")构造仅对调用独立的“存储过程”提供有限支持，特别是那些具有特殊参数化问题的存储过程。'
- en: See the section [Calling Stored Procedures and User Defined Functions](connections.html#stored-procedures)
    for details on how to use the DBAPI-level `callproc()` method for fully traditional
    stored procedures.
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用DBAPI级别的`callproc()`方法完全传统存储过程的详细信息，请参见[调用存储过程和用户定义函数](connections.html#stored-procedures)部分。
- en: See also
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Working with SQL Functions](../tutorial/data_select.html#tutorial-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SQL函数](../tutorial/data_select.html#tutorial-functions) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Function`](functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")'
- en: '[PRE616]'
  id: totrans-2496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: Produce a SQL statement that is cached as a lambda.
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个作为lambda缓存的SQL语句。
- en: The Python code object within the lambda is scanned for both Python literals
    that will become bound parameters as well as closure variables that refer to Core
    or ORM constructs that may vary. The lambda itself will be invoked only once per
    particular set of constructs detected.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 内部的 Python 代码对象将被扫描，其中包括将成为绑定参数的 Python 字面值，以及引用可能变化的 Core 或 ORM 构造的闭包变量。lambda
    本身将仅在检测到特定构造集的情况下调用一次。
- en: 'E.g.:'
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE617]'
  id: totrans-2500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: The object returned is an instance of [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement").
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`StatementLambdaElement`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 的实例。
- en: New in version 1.4.
  id: totrans-2502
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中的新增内容 1.4。
- en: 'Parameters:'
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`lmb` – a Python function, typically a lambda, which takes no arguments and
    returns a SQL expression construct'
  id: totrans-2504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lmb` – 一个 Python 函数，通常是 lambda，它不带参数并返回一个 SQL 表达式构造'
- en: '`enable_tracking` – when False, all scanning of the given lambda for changes
    in closure variables or bound parameters is disabled. Use for a lambda that produces
    the identical results in all cases with no parameterization.'
  id: totrans-2505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_tracking` – 当为 False 时，将禁用对给定 lambda 进行闭包变量或绑定参数更改的所有扫描。用于在所有情况下产生相同结果且不进行参数化的
    lambda。'
- en: '`track_closure_variables` – when False, changes in closure variables within
    the lambda will not be scanned. Use for a lambda where the state of its closure
    variables will never change the SQL structure returned by the lambda.'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_closure_variables` – 当为 False 时，将不会扫描 lambda 内部闭包变量的更改。用于一个 lambda，其闭包变量的状态永远不会改变
    lambda 返回的 SQL 结构。'
- en: '`track_bound_values` – when False, bound parameter tracking will be disabled
    for the given lambda. Use for a lambda that either does not produce any bound
    values, or where the initial bound values never change.'
  id: totrans-2507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_bound_values` – 当为 False 时，将禁用对给定 lambda 的绑定参数跟踪。用于要么不产生任何绑定值的 lambda，要么初始绑定值永远不会更改的
    lambda。'
- en: '`global_track_bound_values` – when False, bound parameter tracking will be
    disabled for the entire statement including additional links added via the [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") method.'
  id: totrans-2508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global_track_bound_values` – 当为 False 时，将禁用整个语句的参数跟踪，包括通过 [`StatementLambdaElement.add_criteria()`](foundation.html#sqlalchemy.sql.expression.StatementLambdaElement.add_criteria
    "sqlalchemy.sql.expression.StatementLambdaElement.add_criteria") 方法添加的额外链接。'
- en: '`lambda_cache` – a dictionary or other mapping-like object where information
    about the lambda’s Python code as well as the tracked closure variables in the
    lambda itself will be stored. Defaults to a global LRU cache. This cache is independent
    of the “compiled_cache” used by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object.'
  id: totrans-2509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lambda_cache` – 一个字典或其他类似映射的对象，其中将存储关于 lambda 的 Python 代码以及 lambda 本身中跟踪的闭包变量的信息。默认为全局
    LRU 缓存。此缓存独立于 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象使用的“compiled_cache”。'
- en: See also
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using Lambdas to add significant speed gains to statement production](connections.html#engine-lambda-caching)'
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Lambdas 加快语句生成速度](connections.html#engine-lambda-caching)'
- en: '[PRE618]'
  id: totrans-2512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: Return a literal clause, bound to a bind parameter.
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个字面值子句，绑定到一个绑定参数。
- en: Literal clauses are created automatically when non- [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects (such as strings, ints, dates,
    etc.) are used in a comparison operation with a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass, such as a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. Use this function to force the generation
    of a literal clause, which will be created as a [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") with a bound value.
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: 当非 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 对象（如字符串、整数、日期等）与 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 子类进行比较操作时，将自动创建字面值子句，例如 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。使用此函数强制生成字面值子句，将其创建为具有绑定值的 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")。
- en: 'Parameters:'
  id: totrans-2515
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`value` – the value to be bound. Can be any Python object supported by the
    underlying DB-API, or is translatable via the given type argument.'
  id: totrans-2516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 要绑定的值。可以是底层 DB-API 支持的任何 Python 对象，或者可以通过给定类型参数进行转换。'
- en: '`type_` – an optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") which will provide bind-parameter translation for
    this literal.'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个可选的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")，将为此文字提供绑定参数转换。'
- en: '`literal_execute` –'
  id: totrans-2518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`literal_execute` –'
- en: optional bool, when True, the SQL engine will attempt to render the bound value
    directly in the SQL statement at execution time rather than providing as a parameter
    value.
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的布尔值，当为True时，SQL 引擎将尝试在执行时直接将绑定值呈现在 SQL 语句中，而不是作为参数值提供。
- en: New in version 2.0.
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: '[PRE619]'
  id: totrans-2521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: Produce a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    object that has the [`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column") flag set to True.
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个具有[`column.is_literal`](#sqlalchemy.sql.expression.column.params.is_literal
    "sqlalchemy.sql.expression.column")标志设置为 True 的 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") 对象。
- en: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    is similar to [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column"),
    except that it is more often used as a “standalone” column expression that renders
    exactly as stated; while [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    stores a string name that will be assumed to be part of a table and may be quoted
    as such, [`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")
    can be that, or any other arbitrary column-oriented expression.'
  id: totrans-2523
  prefs: []
  type: TYPE_NORMAL
  zh: '[`literal_column()`](#sqlalchemy.sql.expression.literal_column "sqlalchemy.sql.expression.literal_column")类似于[`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")，只是更常用作“独立”的列表达式，以确切的方式呈现；而[`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")存储一个字符串名称，将被假定为表的一部分，并可能被引用为这样，[`literal_column()`](#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")可以是那样，或者任何其他任意的面向列的表达式。'
- en: 'Parameters:'
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`text` – the text of the expression; can be any SQL expression. Quoting rules
    will not be applied. To specify a column-name expression which should be subject
    to quoting rules, use the [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    function.'
  id: totrans-2525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` – 表达式的文本；可以是任何 SQL 表达式。不会应用引用规则。要指定应该受引用规则约束的列名表达式，请使用 [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 函数。'
- en: '`type_` – an optional [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object which will provide result-set translation
    and additional expression semantics for this column. If left as `None` the type
    will be [`NullType`](type_api.html#sqlalchemy.types.NullType "sqlalchemy.types.NullType").'
  id: totrans-2526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个可选的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    对象，它将为此列提供结果集转换和其他表达式语义。如果留空，类型将是 [`NullType`](type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")。'
- en: See also
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '[Selecting with Textual Column Expressions](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用文本列表达式进行选择](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
- en: '[PRE620]'
  id: totrans-2531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: Return a negation of the given clause, i.e. `NOT(clause)`.
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定子句的否定，即`NOT(clause)`。
- en: The `~` operator is also overloaded on all [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclasses to produce the same result.
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
  zh: '`~`运算符也对所有[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")子类进行了重载，以产生相同的结果。'
- en: '[PRE621]'
  id: totrans-2534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: Return a constant [`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    construct.
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个常量[`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")构造。
- en: '[PRE622]'
  id: totrans-2536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: Produce a conjunction of expressions joined by `OR`.
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: 生成由`OR`连接的表达式的合取。
- en: 'E.g.:'
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE623]'
  id: totrans-2539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: 'The [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    conjunction is also available using the Python `|` operator (though note that
    compound expressions need to be parenthesized in order to function with Python
    operator precedence behavior):'
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑或[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")也可使用
    Python 的`|`运算符（尽管请注意，为了与 Python 运算符优先级行为相匹配，复合表达式需要括号化）：
- en: '[PRE624]'
  id: totrans-2541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: 'The [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    construct must be given at least one positional argument in order to be valid;
    a [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") construct
    with no arguments is ambiguous. To produce an “empty” or dynamically generated
    [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") expression,
    from a given list of expressions, a “default” element of [`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") (or just `False`) should be specified:'
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
  zh: '[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")构造必须至少给出一个位置参数才能有效；没有参数的[`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")构造是含糊的。 为了生成一个“空”或动态生成的[`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")表达式，从给定的表达式列表中，应指定一个[`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")（或仅`False`）的“默认”元素：'
- en: '[PRE625]'
  id: totrans-2543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: The above expression will compile to SQL as the expression `false` or `0 = 1`,
    depending on backend, if no other expressions are present. If expressions are
    present, then the [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    value is ignored as it does not affect the outcome of an OR expression which has
    other elements.
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他表达式存在，上述表达式将编译为SQL作为表达式`false`或`0 = 1`，具体取决于后端。 如果存在表达式，则[`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")值将被忽略，因为它不影响具有其他元素的OR表达式的结果。
- en: 'Deprecated since version 1.4: The [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") element now requires that at least one argument
    is passed; creating the [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    construct with no arguments is deprecated, and will emit a deprecation warning
    while continuing to produce a blank SQL string.'
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")元素现在要求至少传递一个参数；
    创建没有参数的[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")构造已经被弃用，并且将发出弃用警告，同时继续生成空的SQL字符串。
- en: See also
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")'
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
  zh: '[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")'
- en: '[PRE626]'
  id: totrans-2548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: Create an ‘OUT’ parameter for usage in functions (stored procedures), for databases
    which support them.
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: 为在支持它们的数据库中使用的函数（存储过程）创建一个“OUT”参数。
- en: The `outparam` can be used like a regular function parameter. The “output” value
    will be available from the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object via its `out_parameters` attribute, which
    returns a dictionary containing the values.
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
  zh: '`outparam`可以像普通函数参数一样使用。 “输出”值将通过其`out_parameters`属性从[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")对象中获得，该属性返回一个包含值的字典。'
- en: '[PRE627]'
  id: totrans-2551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: Construct a new [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    clause, representing a textual SQL string directly.
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")子句，表示直接的文本SQL字符串。
- en: 'E.g.:'
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE628]'
  id: totrans-2554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: The advantages [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    provides over a plain string are backend-neutral support for bind parameters,
    per-statement execution options, as well as bind parameter and result-column typing
    behavior, allowing SQLAlchemy type constructs to play a role when executing a
    statement that is specified literally. The construct can also be provided with
    a `.c` collection of column elements, allowing it to be embedded in other SQL
    expression constructs as a subquery.
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")相比于纯字符串提供的优势是，它提供了对绑定参数的后端中立支持，每个语句的执行选项，以及绑定参数和结果列类型化行为，允许在字面上指定的语句执行时使用SQLAlchemy类型构造。
    该构造还可以提供一个`.c`列元素的集合，允许它作为子查询嵌入到其他SQL表达式构造中。'
- en: 'Bind parameters are specified by name, using the format `:name`. E.g.:'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定参数通过名称指定，使用格式`:name`。 例如：
- en: '[PRE629]'
  id: totrans-2557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: 'For SQL statements where a colon is required verbatim, as within an inline
    string, use a backslash to escape:'
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要直接输入冒号的SQL语句，例如内联字符串中，请使用反斜杠进行转义：
- en: '[PRE630]'
  id: totrans-2559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: 'The [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct includes methods which can provide information about the bound parameters
    as well as the column values which would be returned from the textual statement,
    assuming it’s an executable SELECT type of statement. The [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method is used to provide bound
    parameter detail, and [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method allows specification of
    return columns including names and types:'
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    结构包括可以提供有关绑定参数的信息以及假定它是可执行 SELECT 类型语句时将从文本语句返回的列值的方法。使用 [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") 方法来提供绑定参数的详细信息，而 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") 方法允许指定返回列，包括名称和类型：'
- en: '[PRE631]'
  id: totrans-2561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: 'The [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct is used in cases when a literal string SQL fragment is specified as
    part of a larger query, such as for the WHERE clause of a SELECT statement:'
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: 当在较大查询的一部分，如 SELECT 语句的 WHERE 子句中指定了文字字符串 SQL 片段时，使用 [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 结构：
- en: '[PRE632]'
  id: totrans-2563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    is also used for the construction of a full, standalone statement using plain
    text. As such, SQLAlchemy refers to it as an [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") object and may be used like any other
    statement passed to an `.execute()` method.'
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    也可用于使用纯文本构建完整的、独立的语句。因此，SQLAlchemy 将其称为一个 [`Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") 对象，并可以像传递给 `.execute()` 方法的任何其他语句一样使用。'
- en: 'Parameters:'
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**text** –'
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
  zh: '**text** –'
- en: the text of the SQL statement to be created. Use `:<param>` to specify bind
    parameters; they will be compiled to their engine-specific format.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建的 SQL 语句的文本。使用 `:<param>` 来指定绑定参数；它们将编译为其引擎特定的格式。
- en: Warning
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`text.text`](#sqlalchemy.sql.expression.text.params.text "sqlalchemy.sql.expression.text")
    argument to [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    can be passed as a Python string argument, which will be treated as **trusted
    SQL text** and rendered as given. **DO NOT PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text.text`](#sqlalchemy.sql.expression.text.params.text "sqlalchemy.sql.expression.text")
    参数可以作为 Python 字符串参数传递，它将被视为**受信任的 SQL 文本**并按照给定的方式呈现。**不要传递不受信任的输入给此参数**。'
- en: See also
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Selecting with Textual Column Expressions](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用文本列表达式进行选择](../tutorial/data_select.html#tutorial-select-arbitrary-text)'
- en: '[PRE633]'
  id: totrans-2572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: Return a constant [`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    construct.
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个常量[`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")构造。
- en: 'E.g.:'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE634]'
  id: totrans-2575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: 'A backend which does not support true/false constants will render as an expression
    against 1 or 0:'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不支持 true/false 常量的后端将呈现为针对 1 或 0 的表达式：
- en: '[PRE635]'
  id: totrans-2577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: 'The [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    and [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    constants also feature “short circuit” operation within an [`and_()`](#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") or [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") conjunction:'
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: '[`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    和 [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    常量还在 [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    或 [`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_") 连接中具有“短路”操作：'
- en: '[PRE636]'
  id: totrans-2579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: See also
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")'
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: '[`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")'
- en: '[PRE637]'
  id: totrans-2582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: Produce a `TRY_CAST` expression for backends which support it; this is a `CAST`
    which returns NULL for un-castable conversions.
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
  zh: 为支持的后端生成一个 `TRY_CAST` 表达式；这是一个返回不可转换为 NULL 的 `CAST`。
- en: In SQLAlchemy, this construct is supported **only** by the SQL Server dialect,
    and will raise a [`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used on other included backends. However, third
    party backends may also support this construct.
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，这个结构**仅**被SQL Server方言支持，如果在其他包含的后端上使用，将会引发[`CompileError`](exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。但是，第三方后端也可能支持这个结构。
- en: Tip
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: As [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    originates from the SQL Server dialect, it’s importable both from `sqlalchemy.`
    as well as from `sqlalchemy.dialects.mssql`.
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")源自SQL
    Server方言，因此可以从`sqlalchemy.`以及`sqlalchemy.dialects.mssql`中导入。
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    returns an instance of [`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    and generally behaves similarly to the [`Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") construct; at the SQL level, the difference
    between `CAST` and `TRY_CAST` is that `TRY_CAST` returns NULL for an un-castable
    expression, such as attempting to cast a string `"hi"` to an integer value.'
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")返回一个[`TryCast`](#sqlalchemy.sql.expression.TryCast
    "sqlalchemy.sql.expression.TryCast")的实例，并且通常类似于[`Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast")结构；在SQL级别，`CAST`和`TRY_CAST`之间的区别是`TRY_CAST`对于无法转换的表达式返回NULL，例如尝试将字符串`"hi"`转换为整数值。'
- en: 'E.g.:'
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE638]'
  id: totrans-2589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: 'The above would render on Microsoft SQL Server as:'
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft SQL Server上，上述内容将呈现为：
- en: '[PRE639]'
  id: totrans-2591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: 'New in version 2.0.14: [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    has been generalized from the SQL Server dialect into a general use construct
    that may be supported by additional dialects.'
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.14中新增：[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")已经从SQL
    Server方言泛化为一个通用的构造，可能会被其他方言支持。
- en: '[PRE640]'
  id: totrans-2593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: Return a [`Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple").
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple")。
- en: Main usage is to produce a composite IN construct using [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用途是使用[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")生成一个复合IN结构
- en: '[PRE641]'
  id: totrans-2596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: 'Changed in version 1.3.6: Added support for SQLite IN tuples.'
  id: totrans-2597
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.3.6中更改：增加了对SQLite中IN元组的支持。
- en: Warning
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The composite IN construct is not supported by all backends, and is currently
    known to work on PostgreSQL, MySQL, and SQLite. Unsupported backends will raise
    a subclass of [`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError "sqlalchemy.exc.DBAPIError")
    when such an expression is invoked.
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
  zh: 复合IN结构并不被所有后端支持，目前已知可以在PostgreSQL、MySQL和SQLite上工作。当调用这样的表达式时，不支持的后端将引发[`DBAPIError`](exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")的子类。
- en: '[PRE642]'
  id: totrans-2600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: Associate a SQL expression with a particular type, without rendering `CAST`.
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: 将SQL表达式与特定类型关联，而不渲染`CAST`。
- en: 'E.g.:'
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE643]'
  id: totrans-2603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: 'The above construct will produce a [`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce
    "sqlalchemy.sql.expression.TypeCoerce") object, which does not modify the rendering
    in any way on the SQL side, with the possible exception of a generated label if
    used in a columns clause context:'
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结构将生成一个[`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce "sqlalchemy.sql.expression.TypeCoerce")对象，在SQL端不会以任何方式修改渲染，可能的例外是在列子句上下文中使用时生成的标签：
- en: '[PRE644]'
  id: totrans-2605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: When result rows are fetched, the `StringDateTime` type processor will be applied
    to result rows on behalf of the `date_string` column.
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: 当获取结果行时，`StringDateTime`类型处理器将代表`date_string`列应用于结果行。
- en: Note
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: the [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    construct does not render any SQL syntax of its own, including that it does not
    imply parenthesization. Please use [`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") if explicit parenthesization
    is required.
  id: totrans-2608
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")结构不会渲染任何自己的SQL语法，包括不意味着括号化。如果需要显式括号化，请使用[`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group")。'
- en: 'In order to provide a named label for the expression, use [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label"):'
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
  zh: '为了为表达式提供一个命名标签，使用 [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label"):'
- en: '[PRE645]'
  id: totrans-2610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: 'A type that features bound-value handling will also have that behavior take
    effect when literal values or [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs are passed to [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") as targets. For example, if a type implements
    the [`TypeEngine.bind_expression()`](type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") method or [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") method or equivalent, these functions
    will take effect at statement compilation/execution time when a literal value
    is passed, as in:'
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有绑定值处理功能的类型在将字面值或 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    构造传递给 [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    作为目标时也会生效。例如，如果一个类型实现了 [`TypeEngine.bind_expression()`](type_api.html#sqlalchemy.types.TypeEngine.bind_expression
    "sqlalchemy.types.TypeEngine.bind_expression") 方法或 [`TypeEngine.bind_processor()`](type_api.html#sqlalchemy.types.TypeEngine.bind_processor
    "sqlalchemy.types.TypeEngine.bind_processor") 方法或等效方法，当传递字面值时，这些函数将在语句编译/执行时生效，如下所示：
- en: '[PRE646]'
  id: totrans-2612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: 'When using [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    with composed expressions, note that **parenthesis are not applied**. If [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") is being used in an operator context
    where the parenthesis normally present from CAST are necessary, use the [`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") method:'
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
  zh: 当在组合表达式中使用 [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    时，请注意**不会应用括号**。如果 [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    被用在一个操作符上下文中，通常来自 CAST 的括号是必要的，那么可以使用 [`TypeCoerce.self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") 方法：
- en: '[PRE647]'
  id: totrans-2614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: 'Parameters:'
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`expression` – A SQL expression, such as a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expression or a Python string which
    will be coerced into a bound literal value.'
  id: totrans-2616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression` – 一个 SQL 表达式，比如一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式或一个将被强制转换为绑定字面值的 Python 字符串。'
- en: '`type_` – A [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    class or instance indicating the type to which the expression is coerced.'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type_` – 一个指示表达式被强制转换为的类型的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或实例。'
- en: See also
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[PRE648]'
  id: totrans-2621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: Represent a SQL identifier combined with quoting preferences.
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个与引号偏好结合的 SQL 标识符。
- en: '[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    is a Python unicode/str subclass which represents a particular identifier name
    along with a `quote` flag. This `quote` flag, when set to `True` or `False`, overrides
    automatic quoting behavior for this identifier in order to either unconditionally
    quote or to not quote the name. If left at its default of `None`, quoting behavior
    is applied to the identifier on a per-backend basis based on an examination of
    the token itself.'
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    是一个 Python unicode/str 子类，表示特定的标识符名称以及一个 `quote` 标志。当 `quote` 标志设置为 `True` 或 `False`
    时，将覆盖此标识符的自动引用行为，以便无条件引用或不引用名称。如果保持默认值 `None`，则引用行为将根据标记本身的检查在每个后端基础上应用到标识符上。'
- en: A [`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    object with `quote=True` is also prevented from being modified in the case of
    a so-called “name normalize” option. Certain database backends, such as Oracle,
    Firebird, and DB2 “normalize” case-insensitive names as uppercase. The SQLAlchemy
    dialects for these backends convert from SQLAlchemy’s lower-case-means-insensitive
    convention to the upper-case-means-insensitive conventions of those backends.
    The `quote=True` flag here will prevent this conversion from occurring to support
    an identifier that’s quoted as all lower case against such a backend.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`quote=True`的[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")对象也在所谓的“名称规范化”选项的情况下被阻止修改。某些数据库后端，如Oracle、Firebird和DB2，将大小写不敏感的名称“规范化”为大写。这些后端的SQLAlchemy方言将从SQLAlchemy的小写表示不敏感约定转换为这些后端的大写表示不敏感约定。这里的`quote=True`标志将阻止此转换发生，以支持针对此类后端作为全小写引用的标识符。
- en: 'The [`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")
    object is normally created automatically when specifying the name for key schema
    constructs such as [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    and others. The class can also be passed explicitly as the name to any function
    that receives a name which can be quoted. Such as to use the `Engine.has_table()`
    method with an unconditionally quoted name:'
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
  zh: 当为键模式构造指定名称时，[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")对象通常会自动创建，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")等的构造。该类还可以显式传递为任何接收可引用名称的函数的名称。例如，使用`Engine.has_table()`方法时使用无条件引用名称：
- en: '[PRE649]'
  id: totrans-2626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: The above logic will run the “has table” logic against the Oracle backend, passing
    the name exactly as `"some_table"` without converting to upper case.
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: 上述逻辑��针对Oracle后端运行“has table”逻辑，将名称传递为`"some_table"`而不转换为大写。
- en: 'Changed in version 1.2: The [`quoted_name`](#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") construct is now importable from `sqlalchemy.sql`,
    in addition to the previous location of `sqlalchemy.sql.elements`.'
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`quoted_name`](#sqlalchemy.sql.expression.quoted_name "sqlalchemy.sql.expression.quoted_name")构造现在可以从`sqlalchemy.sql`导入，而不仅仅是以前的位置`sqlalchemy.sql.elements`。
- en: '**Members**'
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[quote](#sqlalchemy.sql.expression.quoted_name.quote)'
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: '[quote](#sqlalchemy.sql.expression.quoted_name.quote)'
- en: '**Class signature**'
  id: totrans-2631
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.quoted_name`](#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    `builtins.str`)
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.quoted_name`](#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    `builtins.str`)
- en: '[PRE650]'
  id: totrans-2633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: whether the string should be unconditionally quoted
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是否应该被无条件引用
- en: '## Column Element Modifier Constructors'
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
  zh: '## 列元素修饰符构造函数'
- en: Functions listed here are more commonly available as methods from any [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") construct, for example, the [`label()`](#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label") function is usually invoked via the [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method.
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: 此处列出的函数通常作为任何[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")构造的方法更常见，例如，[`label()`](#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label")函数通常通过[`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label")方法调用。
- en: '| Object Name | Description |'
  id: totrans-2637
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2638
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [all_](#sqlalchemy.sql.expression.all_)(expr) | Produce an ALL expression.
    |'
  id: totrans-2639
  prefs: []
  type: TYPE_TB
  zh: '| [all_](#sqlalchemy.sql.expression.all_)(expr) | 生成一个ALL表达式。 |'
- en: '| [any_](#sqlalchemy.sql.expression.any_)(expr) | Produce an ANY expression.
    |'
  id: totrans-2640
  prefs: []
  type: TYPE_TB
  zh: '| [any_](#sqlalchemy.sql.expression.any_)(expr) | 生成一个ANY表达式。 |'
- en: '| [asc](#sqlalchemy.sql.expression.asc)(column) | Produce an ascending `ORDER
    BY` clause element. |'
  id: totrans-2641
  prefs: []
  type: TYPE_TB
  zh: '| [asc](#sqlalchemy.sql.expression.asc)(column) | 生成升序`ORDER BY`子句元素。 |'
- en: '| [between](#sqlalchemy.sql.expression.between)(expr, lower_bound, upper_bound[,
    symmetric]) | Produce a `BETWEEN` predicate clause. |'
  id: totrans-2642
  prefs: []
  type: TYPE_TB
  zh: '| [between](#sqlalchemy.sql.expression.between)(expr, lower_bound, upper_bound[,
    symmetric]) | 生成一个`BETWEEN`谓词子句。 |'
- en: '| [collate](#sqlalchemy.sql.expression.collate)(expression, collation) | Return
    the clause `expression COLLATE collation`. |'
  id: totrans-2643
  prefs: []
  type: TYPE_TB
  zh: '| [collate](#sqlalchemy.sql.expression.collate)(expression, collation) | 返回子句`expression
    COLLATE collation`。 |'
- en: '| [desc](#sqlalchemy.sql.expression.desc)(column) | Produce a descending `ORDER
    BY` clause element. |'
  id: totrans-2644
  prefs: []
  type: TYPE_TB
  zh: '| [desc](#sqlalchemy.sql.expression.desc)(column) | 生成一个降序 `ORDER BY` 子句元素。
    |'
- en: '| [funcfilter](#sqlalchemy.sql.expression.funcfilter)(func, *criterion) | Produce
    a [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    object against a function. |'
  id: totrans-2645
  prefs: []
  type: TYPE_TB
  zh: '| [funcfilter](#sqlalchemy.sql.expression.funcfilter)(func, *criterion) | 为函数生成一个
    [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    对象。 |'
- en: '| [label](#sqlalchemy.sql.expression.label)(name, element[, type_]) | Return
    a [`Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    object for the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"). |'
  id: totrans-2646
  prefs: []
  type: TYPE_TB
  zh: '| [label](#sqlalchemy.sql.expression.label)(name, element[, type_]) | 返回给定
    [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    的 [`Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    对象。 |'
- en: '| [nulls_first](#sqlalchemy.sql.expression.nulls_first)(column) | Produce the
    `NULLS FIRST` modifier for an `ORDER BY` expression. |'
  id: totrans-2647
  prefs: []
  type: TYPE_TB
  zh: '| [nulls_first](#sqlalchemy.sql.expression.nulls_first)(column) | 为 `ORDER
    BY` 表达式生成 `NULLS FIRST` 修饰符。 |'
- en: '| [nulls_last](#sqlalchemy.sql.expression.nulls_last)(column) | Produce the
    `NULLS LAST` modifier for an `ORDER BY` expression. |'
  id: totrans-2648
  prefs: []
  type: TYPE_TB
  zh: '| [nulls_last](#sqlalchemy.sql.expression.nulls_last)(column) | 为 `ORDER BY`
    表达式生成 `NULLS LAST` 修饰符。 |'
- en: '| [nullsfirst](#sqlalchemy.sql.expression.nullsfirst) | Synonym for the [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") function. |'
  id: totrans-2649
  prefs: []
  type: TYPE_TB
  zh: '| [nullsfirst](#sqlalchemy.sql.expression.nullsfirst) | 同义词，用于 [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 函数。 |'
- en: '| [nullslast](#sqlalchemy.sql.expression.nullslast) | Legacy synonym for the
    [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    function. |'
  id: totrans-2650
  prefs: []
  type: TYPE_TB
  zh: '| [nullslast](#sqlalchemy.sql.expression.nullslast) | [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 函数的传统同义词。 |'
- en: '| [over](#sqlalchemy.sql.expression.over)(element[, partition_by, order_by,
    range_, ...]) | Produce an [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    object against a function. |'
  id: totrans-2651
  prefs: []
  type: TYPE_TB
  zh: '| [over](#sqlalchemy.sql.expression.over)(element[, partition_by, order_by,
    range_, ...]) | 为函数生成一个 [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    对象。 |'
- en: '| [within_group](#sqlalchemy.sql.expression.within_group)(element, *order_by)
    | Produce a [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    object against a function. |'
  id: totrans-2652
  prefs: []
  type: TYPE_TB
  zh: '| [within_group](#sqlalchemy.sql.expression.within_group)(element, *order_by)
    | 为函数生成一个 [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    对象。 |'
- en: '[PRE651]'
  id: totrans-2653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: Produce an ALL expression.
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 ALL 表达式。
- en: 'For dialects such as that of PostgreSQL, this operator applies to usage of
    the [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype, for that of MySQL, it may apply to a subquery. e.g.:'
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如 PostgreSQL 的方言，该运算符适用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 数据类型的使用，对于 MySQL 的方言，它可能适用于子查询。例如：
- en: '[PRE652]'
  id: totrans-2656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: 'Comparison to NULL may work using `None`:'
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NULL 的比较可能使用 `None` 进行：
- en: '[PRE653]'
  id: totrans-2658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: 'The any_() / all_() operators also feature a special “operand flipping” behavior
    such that if any_() / all_() are used on the left side of a comparison using a
    standalone operator such as `==`, `!=`, etc. (not including operator methods such
    as [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_"))
    the rendered expression is flipped:'
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 any_() / all_() 运算符还具有特殊的“操作数翻转”行为，以便如果 any_() / all_() 用于比较操作的左侧，使用独立运算符（例如
    `==`，`!=` 等）（不包括操作符方法，如 [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")），则渲染的表达式将被翻转：
- en: '[PRE654]'
  id: totrans-2660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: 'Or with `None`, which note will not perform the usual step of rendering “IS”
    as is normally the case for NULL:'
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用 `None`，请注意，这不会执行通常情况下针对 NULL 渲染 “IS” 的常规步骤：
- en: '[PRE655]'
  id: totrans-2662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: 'Changed in version 1.4.26: repaired the use of any_() / all_() comparing to
    NULL on the right side to be flipped to the left.'
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.26 中的更改：修复了 any_() / all_() 与右侧 NULL 比较时翻转到左侧的使用。
- en: 'The column-level [`ColumnElement.all_()`](#sqlalchemy.sql.expression.ColumnElement.all_
    "sqlalchemy.sql.expression.ColumnElement.all_") method (not to be confused with
    [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") level
    [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all "sqlalchemy.types.ARRAY.Comparator.all"))
    is shorthand for `all_(col)`:'
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 列级别的 [`ColumnElement.all_()`](#sqlalchemy.sql.expression.ColumnElement.all_
    "sqlalchemy.sql.expression.ColumnElement.all_") 方法（不要与 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 级别的 [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 混淆）是 `all_(col)` 的速记形式：
- en: '[PRE656]'
  id: totrans-2665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: See also
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")'
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")'
- en: '[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")'
- en: '[PRE657]'
  id: totrans-2669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: Produce an ANY expression.
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 ANY 表达式。
- en: 'For dialects such as that of PostgreSQL, this operator applies to usage of
    the [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    datatype, for that of MySQL, it may apply to a subquery. e.g.:'
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如 PostgreSQL 的方言，此运算符适用于 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 数据类型的使用，对于 MySQL，它可能适用于子查询。例如：
- en: '[PRE658]'
  id: totrans-2672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: 'Comparison to NULL may work using `None` or [`null()`](#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null"):'
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `None` 或 [`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    可能会与 NULL 进行比较：
- en: '[PRE659]'
  id: totrans-2674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: 'The any_() / all_() operators also feature a special “operand flipping” behavior
    such that if any_() / all_() are used on the left side of a comparison using a
    standalone operator such as `==`, `!=`, etc. (not including operator methods such
    as [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_"))
    the rendered expression is flipped:'
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
  zh: '`any_()` / `all_()` 运算符还具有特殊的“操作数翻转”行为，即如果 `any_()` / `all_()` 用于比较的左侧使用独立运算符（如
    `==`、`!=` 等）（不包括操作符方法，如 [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")），则渲染的表达式会被翻转：'
- en: '[PRE660]'
  id: totrans-2676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: 'Or with `None`, which note will not perform the usual step of rendering “IS”
    as is normally the case for NULL:'
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `None`，请注意，这不会像通常情况下对 NULL 渲染“IS”那样执行：
- en: '[PRE661]'
  id: totrans-2678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: 'Changed in version 1.4.26: repaired the use of any_() / all_() comparing to
    NULL on the right side to be flipped to the left.'
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.26 中更改：修复了将 any_() / all_() 与 NULL 比较在右侧时翻转到左侧的问题。
- en: 'The column-level [`ColumnElement.any_()`](#sqlalchemy.sql.expression.ColumnElement.any_
    "sqlalchemy.sql.expression.ColumnElement.any_") method (not to be confused with
    [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY") level
    [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any "sqlalchemy.types.ARRAY.Comparator.any"))
    is shorthand for `any_(col)`:'
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
  zh: 列级别的 [`ColumnElement.any_()`](#sqlalchemy.sql.expression.ColumnElement.any_
    "sqlalchemy.sql.expression.ColumnElement.any_") 方法（不要与 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 级别的 [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 混淆）是 `any_(col)` 的简写：
- en: '[PRE662]'
  id: totrans-2681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: See also
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")'
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")'
- en: '[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: '[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")'
- en: '[PRE663]'
  id: totrans-2685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: Produce an ascending `ORDER BY` clause element.
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个升序的 `ORDER BY` 子句元素。
- en: 'e.g.:'
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE664]'
  id: totrans-2688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: 'will produce SQL as:'
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成以下 SQL：
- en: '[PRE665]'
  id: totrans-2690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: 'The [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    function is a standalone version of the [`ColumnElement.asc()`](#sqlalchemy.sql.expression.ColumnElement.asc
    "sqlalchemy.sql.expression.ColumnElement.asc") method available on all SQL expressions,
    e.g.:'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc") 函数是所有
    SQL 表达式上都可用的 [`ColumnElement.asc()`](#sqlalchemy.sql.expression.ColumnElement.asc
    "sqlalchemy.sql.expression.ColumnElement.asc") 方法的独立版本，例如：'
- en: '[PRE666]'
  id: totrans-2692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: 'Parameters:'
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**column** – A [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    (e.g. scalar SQL expression) with which to apply the [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") operation.'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: '**column** – 一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")（例如，标量 SQL 表达式），用于应用 [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") 操作。'
- en: See also
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-2699
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE667]'
  id: totrans-2700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: Produce a `BETWEEN` predicate clause.
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 `BETWEEN` 谓词子句。
- en: 'E.g.:'
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE668]'
  id: totrans-2703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: 'Would produce SQL resembling:'
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成类似于以下 SQL：
- en: '[PRE669]'
  id: totrans-2705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: 'The [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    function is a standalone version of the [`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between") method available on all SQL
    expressions, as in:'
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")函数是所有SQL表达式上都可用的[`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between")方法的独立版本，例如：'
- en: '[PRE670]'
  id: totrans-2707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: 'All arguments passed to [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between"),
    including the left side column expression, are coerced from Python scalar values
    if a the value is not a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass. For example, three fixed
    values can be compared as in:'
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")的所有参数（包括左侧列表达式）如果该值不是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")子类，则将从Python标量值强制转换。例如，可以比较三个固定值，如下所示：
- en: '[PRE671]'
  id: totrans-2709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: 'Which would produce:'
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生：
- en: '[PRE672]'
  id: totrans-2711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: 'Parameters:'
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`expr` – a column expression, typically a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") instance or alternatively a Python
    scalar expression to be coerced into a column expression, serving as the left
    side of the `BETWEEN` expression.'
  id: totrans-2713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expr` – 列表达式，通常是一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实例，或者是要强制转换为列表达式的Python标量表达式，用作`BETWEEN`表达式的左侧。'
- en: '`lower_bound` – a column or Python scalar expression serving as the lower bound
    of the right side of the `BETWEEN` expression.'
  id: totrans-2714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower_bound` – 作为`BETWEEN`表达式右侧下限的列或Python标量表达式。'
- en: '`upper_bound` – a column or Python scalar expression serving as the upper bound
    of the right side of the `BETWEEN` expression.'
  id: totrans-2715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upper_bound` – 作为`BETWEEN`表达式右侧上限的列或Python标量表达式。'
- en: '`symmetric` – if True, will render “ BETWEEN SYMMETRIC “. Note that not all
    databases support this syntax.'
  id: totrans-2716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symmetric` – 如果为True，则渲染“ BETWEEN SYMMETRIC ”。请注意，并非所有数据库都支持此语法。'
- en: See also
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between")'
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement.between()`](#sqlalchemy.sql.expression.ColumnElement.between
    "sqlalchemy.sql.expression.ColumnElement.between")'
- en: '[PRE673]'
  id: totrans-2719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: Return the clause `expression COLLATE collation`.
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
  zh: 返回子句`expression COLLATE collation`。
- en: 'e.g.:'
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE674]'
  id: totrans-2722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: 'produces:'
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE675]'
  id: totrans-2724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: The collation expression is also quoted if it is a case sensitive identifier,
    e.g. contains uppercase characters.
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是区分大小写的标识符，例如包含大写字符，则也会引用排序表达式。
- en: 'Changed in version 1.2: quoting is automatically applied to COLLATE expressions
    if they are case sensitive.'
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.2中更改：如果它们是区分大小写的，则对COLLATE表达式自动应用引用。
- en: '[PRE676]'
  id: totrans-2727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: Produce a descending `ORDER BY` clause element.
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个降序的`ORDER BY`子句元素。
- en: 'e.g.:'
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE677]'
  id: totrans-2730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: 'will produce SQL as:'
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生SQL如下：
- en: '[PRE678]'
  id: totrans-2732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'The [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    function is a standalone version of the [`ColumnElement.desc()`](#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") method available on all SQL expressions,
    e.g.:'
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")函数是所有SQL表达式上可用的[`ColumnElement.desc()`](#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc")方法的独立版本，例如：'
- en: '[PRE679]'
  id: totrans-2734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: 'Parameters:'
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**column** – A [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    (e.g. scalar SQL expression) with which to apply the [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") operation.'
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
  zh: '**column** – 一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")（例如标量SQL表达式），用于应用[`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")操作。'
- en: See also
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
  id: totrans-2740
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE680]'
  id: totrans-2742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: Produce a [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    object against a function.
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: 对函数生成一个[`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")对象。
- en: Used against aggregate and window functions, for database backends that support
    the “FILTER” clause.
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持“FILTER”子句的聚合和窗口函数。
- en: 'E.g.:'
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE681]'
  id: totrans-2746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: Would produce “COUNT(1) FILTER (WHERE myclass.name = ‘some name’)”.
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: 会产生“COUNT(1) FILTER (WHERE myclass.name = ‘some name’)”。
- en: This function is also available from the [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct itself via the [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") method.
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以通过[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")构造本身通过[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")方法获得。
- en: See also
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2750
  prefs: []
  type: TYPE_NORMAL
  zh: '[特殊修饰符 WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
- en: '[PRE682]'
  id: totrans-2752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: Return a [`Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    object for the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")对象返回一个[`Label`](#sqlalchemy.sql.expression.Label
    "sqlalchemy.sql.expression.Label")对象。
- en: A label changes the name of an element in the columns clause of a `SELECT` statement,
    typically via the `AS` SQL keyword.
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
  zh: 标签通过`AS` SQL 关键字通常修改`SELECT`语句中列子句中元素的名称。
- en: This functionality is more conveniently available via the [`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label") method on [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能更方便地通过[`ColumnElement.label()`](#sqlalchemy.sql.expression.ColumnElement.label
    "sqlalchemy.sql.expression.ColumnElement.label")方法在[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")上使用。
- en: 'Parameters:'
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – label name'
  id: totrans-2757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 标签名'
- en: '`obj` – a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement").'
  id: totrans-2758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")。'
- en: '[PRE683]'
  id: totrans-2759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: Produce the `NULLS FIRST` modifier for an `ORDER BY` expression.
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
  zh: 为`ORDER BY`表达式生成`NULLS FIRST`修饰符。
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    is intended to modify the expression produced by [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") or [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc"), and indicates how NULL values should be handled
    when they are encountered during ordering:'
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")用于修改由[`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc")或[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")产生的表达式，并指示在排序过程中遇到
    NULL 值时应如何处理：'
- en: '[PRE684]'
  id: totrans-2762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: 'The SQL expression from the above would resemble:'
  id: totrans-2763
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 SQL 表达式将类似于：
- en: '[PRE685]'
  id: totrans-2764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: 'Like [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    and [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc"),
    [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    is typically invoked from the column expression itself using [`ColumnElement.nulls_first()`](#sqlalchemy.sql.expression.ColumnElement.nulls_first
    "sqlalchemy.sql.expression.ColumnElement.nulls_first"), rather than as its standalone
    function version, as in:'
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")和[`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")，[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")通常从列表达式本身使用[`ColumnElement.nulls_first()`](#sqlalchemy.sql.expression.ColumnElement.nulls_first
    "sqlalchemy.sql.expression.ColumnElement.nulls_first")调用，而不是作为其独立的函数版本，如下所示：
- en: '[PRE686]'
  id: totrans-2766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: 'Changed in version 1.4: [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") is renamed from [`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") in previous releases. The previous name
    remains available for backwards compatibility.'
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")从以前的版本中的[`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")重命名。 以前的名称仍可供向后兼容使用。
- en: See also
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
- en: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE687]'
  id: totrans-2773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: Synonym for the [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    function.
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")函数的同义词。'
- en: 'Changed in version 2.0.5: restored missing legacy symbol [`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst").'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.5中更改：恢复了缺失的传统符号[`nullsfirst()`](#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")。
- en: '[PRE688]'
  id: totrans-2776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: Produce the `NULLS LAST` modifier for an `ORDER BY` expression.
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: 生成`ORDER BY`表达式的`NULLS LAST`修饰符。
- en: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    is intended to modify the expression produced by [`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") or [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc"), and indicates how NULL values should be handled
    when they are encountered during ordering:'
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")旨在修改由[`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc")或[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")生成的表达式，并指示在排序过程中遇到NULL值时应如何处理：'
- en: '[PRE689]'
  id: totrans-2779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: 'The SQL expression from the above would resemble:'
  id: totrans-2780
  prefs: []
  type: TYPE_NORMAL
  zh: 上述SQL表达式类似于：
- en: '[PRE690]'
  id: totrans-2781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: 'Like [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    and [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc"),
    [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    is typically invoked from the column expression itself using [`ColumnElement.nulls_last()`](#sqlalchemy.sql.expression.ColumnElement.nulls_last
    "sqlalchemy.sql.expression.ColumnElement.nulls_last"), rather than as its standalone
    function version, as in:'
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")和[`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")类似，[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")通常是从列表达式本身使用[`ColumnElement.nulls_last()`](#sqlalchemy.sql.expression.ColumnElement.nulls_last
    "sqlalchemy.sql.expression.ColumnElement.nulls_last")调用的，而不是作为独立的函数版本，如下所示：
- en: '[PRE691]'
  id: totrans-2783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: 'Changed in version 1.4: [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") is renamed from [`nullslast()`](#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") in previous releases. The previous name
    remains available for backwards compatibility.'
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中更改：[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")从先前版本的[`nullslast()`](#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast")重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
  id: totrans-2786
  prefs: []
  type: TYPE_NORMAL
  zh: '[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")'
- en: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: '[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")'
- en: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")'
- en: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
  id: totrans-2789
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")'
- en: '[PRE692]'
  id: totrans-2790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: Legacy synonym for the [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") function.
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")函数的传统同义词。'
- en: 'Changed in version 2.0.5: restored missing legacy symbol [`nullslast()`](#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast").'
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.5中更改：恢复了缺失的传统符号[`nullslast()`](#sqlalchemy.sql.expression.nullslast "sqlalchemy.sql.expression.nullslast")。
- en: '[PRE693]'
  id: totrans-2793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: Produce an [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    object against a function.
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对函数的[`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")对象。
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
  zh: 用于聚合或所谓的“窗口”函数，适用于支持窗口函数的数据库后端。
- en: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    is usually called using the [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over") method, e.g.:'
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
  zh: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")通常使用[`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over")方法调用，例如：'
- en: '[PRE694]'
  id: totrans-2797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: 'Would produce:'
  id: totrans-2798
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生：
- en: '[PRE695]'
  id: totrans-2799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: 'Ranges are also possible using the [`over.range_`](#sqlalchemy.sql.expression.over.params.range_
    "sqlalchemy.sql.expression.over") and [`over.rows`](#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over") parameters. These mutually-exclusive parameters
    each accept a 2-tuple, which contains a combination of integers and None:'
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`over.range_`](#sqlalchemy.sql.expression.over.params.range_ "sqlalchemy.sql.expression.over")和[`over.rows`](#sqlalchemy.sql.expression.over.params.rows
    "sqlalchemy.sql.expression.over")参数也可以实现范围。这些互斥参数每个都接受一个2元组，其中包含整数和None的组合：
- en: '[PRE696]'
  id: totrans-2801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: 'The above would produce:'
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
  zh: 以上将产生：
- en: '[PRE697]'
  id: totrans-2803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: 'A value of `None` indicates “unbounded”, a value of zero indicates “current
    row”, and negative / positive integers indicate “preceding” and “following”:'
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
  zh: '`None`值表示“无界”，零值表示“当前行”，负/正整数表示“前面”和“后面”：'
- en: 'RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING:'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING:'
- en: '[PRE698]'
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE698]'
- en: 'ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW:'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW:'
- en: '[PRE699]'
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE699]'
- en: 'RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING:'
  id: totrans-2809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING:'
- en: '[PRE700]'
  id: totrans-2810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE700]'
- en: 'RANGE BETWEEN 1 FOLLOWING AND 3 FOLLOWING:'
  id: totrans-2811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RANGE BETWEEN 1 FOLLOWING AND 3 FOLLOWING:'
- en: '[PRE701]'
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE701]'
- en: 'Parameters:'
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement"), [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup"), or other compatible construct.'
  id: totrans-2814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")、[`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup")或其他兼容的构造。'
- en: '`partition_by` – a column element or string, or a list of such, that will be
    used as the PARTITION BY clause of the OVER construct.'
  id: totrans-2815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition_by` – 一个列元素或字符串，或者一个这样的列表，将用作OVER构造的PARTITION BY子句。'
- en: '`order_by` – a column element or string, or a list of such, that will be used
    as the ORDER BY clause of the OVER construct.'
  id: totrans-2816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_by` – 一个列元素或字符串，或者一个这样的列表，将用作OVER构造的ORDER BY子句。'
- en: '`range_` – optional range clause for the window. This is a tuple value which
    can contain integer values or `None`, and will render a RANGE BETWEEN PRECEDING
    / FOLLOWING clause.'
  id: totrans-2817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`range_` – 可选的窗口范围子句。这是一个元组值，可以包含整数值或`None`，并将呈现一个RANGE BETWEEN PRECEDING /
    FOLLOWING子句。'
- en: '`rows` – optional rows clause for the window. This is a tuple value which can
    contain integer values or None, and will render a ROWS BETWEEN PRECEDING / FOLLOWING
    clause.'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rows` – 可选的行子句，用于窗口。这是一个元组值，可以包含整数值或None，并将呈现一个ROWS BETWEEN PRECEDING / FOLLOWING子句。'
- en: This function is also available from the [`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct itself via the [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over") method.
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数也可以通过[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")构造本身的[`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over")方法来调用。
- en: See also
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Window Functions](../tutorial/data_select.html#tutorial-window-functions)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数](../tutorial/data_select.html#tutorial-window-functions) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")'
  id: totrans-2823
  prefs: []
  type: TYPE_NORMAL
  zh: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")'
- en: '[PRE702]'
  id: totrans-2824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: Produce a [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    object against a function.
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个[`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")对象针对一个函数。
- en: Used against so-called “ordered set aggregate” and “hypothetical set aggregate”
    functions, including [`percentile_cont`](functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont"), [`rank`](functions.html#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank"), [`dense_rank`](functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank"), etc.
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
  zh: 用于所谓的“有序集合聚合”和“假设集合聚合”函数，包括[`percentile_cont`](functions.html#sqlalchemy.sql.functions.percentile_cont
    "sqlalchemy.sql.functions.percentile_cont")，[`rank`](functions.html#sqlalchemy.sql.functions.rank
    "sqlalchemy.sql.functions.rank")，[`dense_rank`](functions.html#sqlalchemy.sql.functions.dense_rank
    "sqlalchemy.sql.functions.dense_rank")等。
- en: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")
    is usually called using the [`FunctionElement.within_group()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group") method, e.g.:'
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
  zh: '[`within_group()`](#sqlalchemy.sql.expression.within_group "sqlalchemy.sql.expression.within_group")通常使用[`FunctionElement.within_group()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group
    "sqlalchemy.sql.functions.FunctionElement.within_group")方法调用，例如：'
- en: '[PRE703]'
  id: totrans-2828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: The above statement would produce SQL similar to `SELECT department.id, percentile_cont(0.5)
    WITHIN GROUP (ORDER BY department.salary DESC)`.
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将生成类似于`SELECT department.id, percentile_cont(0.5) WITHIN GROUP (ORDER BY
    department.salary DESC)`的SQL。
- en: 'Parameters:'
  id: totrans-2830
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – a [`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") construct, typically generated by
    [`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func").'
  id: totrans-2831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 一个[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement")构造，通常由[`func`](#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")生成。'
- en: '`*order_by` – one or more column elements that will be used as the ORDER BY
    clause of the WITHIN GROUP construct.'
  id: totrans-2832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*order_by` – 一个或多个列元素，将用作WITHIN GROUP构造的ORDER BY子句。'
- en: See also
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Special Modifiers WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-2834
  prefs: []
  type: TYPE_NORMAL
  zh: '[特殊修饰符WITHIN GROUP, FILTER](../tutorial/data_select.html#tutorial-functions-within-group)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
  zh: '[`func`](#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")'
- en: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
  zh: '[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")'
- en: Column Element Class Documentation
  id: totrans-2837
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列元素类文档
- en: The classes here are generated using the constructors listed at [Column Element
    Foundational Constructors](#sqlelement-foundational-constructors) and [Column
    Element Modifier Constructors](#sqlelement-modifier-constructors).
  id: totrans-2838
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的类是使用[列元素基础构造函数](#sqlelement-foundational-constructors)和[列元素修饰符构造函数](#sqlelement-modifier-constructors)列出的构造函数生成的。
- en: '| Object Name | Description |'
  id: totrans-2839
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2840
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BinaryExpression](#sqlalchemy.sql.expression.BinaryExpression) | Represent
    an expression that is `LEFT <operator> RIGHT`. |'
  id: totrans-2841
  prefs: []
  type: TYPE_TB
  zh: '| [BinaryExpression](#sqlalchemy.sql.expression.BinaryExpression) | 代表一个`LEFT
    <operator> RIGHT`的表达式。'
- en: '| [BindParameter](#sqlalchemy.sql.expression.BindParameter) | Represent a “bound
    expression”. |'
  id: totrans-2842
  prefs: []
  type: TYPE_TB
  zh: '| [BindParameter](#sqlalchemy.sql.expression.BindParameter) | 代表一个“绑定表达式”。'
- en: '| [Case](#sqlalchemy.sql.expression.Case) | Represent a `CASE` expression.
    |'
  id: totrans-2843
  prefs: []
  type: TYPE_TB
  zh: '| [Case](#sqlalchemy.sql.expression.Case) | 代表一个`CASE`表达式。'
- en: '| [Cast](#sqlalchemy.sql.expression.Cast) | Represent a `CAST` expression.
    |'
  id: totrans-2844
  prefs: []
  type: TYPE_TB
  zh: '| [Cast](#sqlalchemy.sql.expression.Cast) | 代表一个`CAST`表达式。'
- en: '| [ClauseList](#sqlalchemy.sql.expression.ClauseList) | Describe a list of
    clauses, separated by an operator. |'
  id: totrans-2845
  prefs: []
  type: TYPE_TB
  zh: '| [ClauseList](#sqlalchemy.sql.expression.ClauseList) | 描述由运算符分隔的子句列表。'
- en: '| [ColumnClause](#sqlalchemy.sql.expression.ColumnClause) | Represents a column
    expression from any textual string. |'
  id: totrans-2846
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnClause](#sqlalchemy.sql.expression.ColumnClause) | 代表来自任何文本字符串的列表达式。'
- en: '| [ColumnCollection](#sqlalchemy.sql.expression.ColumnCollection) | Collection
    of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    instances, typically for [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects. |'
  id: totrans-2847
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnCollection](#sqlalchemy.sql.expression.ColumnCollection) | 包含[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实例的集合，通常用于[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象。'
- en: '| [ColumnElement](#sqlalchemy.sql.expression.ColumnElement) | Represent a column-oriented
    SQL expression suitable for usage in the “columns” clause, WHERE clause etc. of
    a statement. |'
  id: totrans-2848
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnElement](#sqlalchemy.sql.expression.ColumnElement) | 代表一个以列为导向的 SQL
    表达式，适用于语句的“columns”子句、WHERE 子句等。 |'
- en: '| [ColumnExpressionArgument](#sqlalchemy.sql.expression.ColumnExpressionArgument)
    | General purpose “column expression” argument. |'
  id: totrans-2849
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnExpressionArgument](#sqlalchemy.sql.expression.ColumnExpressionArgument)
    | 通用的“列表达式”参数。 |'
- en: '| [ColumnOperators](#sqlalchemy.sql.expression.ColumnOperators) | Defines boolean,
    comparison, and other operators for [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions. |'
  id: totrans-2850
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnOperators](#sqlalchemy.sql.expression.ColumnOperators) | 为 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 表达式定义布尔、比较和其他运算符。 |'
- en: '| [Extract](#sqlalchemy.sql.expression.Extract) | Represent a SQL EXTRACT clause,
    `extract(field FROM expr)`. |'
  id: totrans-2851
  prefs: []
  type: TYPE_TB
  zh: '| [Extract](#sqlalchemy.sql.expression.Extract) | 代表一个 SQL EXTRACT 子句，`extract(field
    FROM expr)`。 |'
- en: '| [False_](#sqlalchemy.sql.expression.False_) | Represent the `false` keyword,
    or equivalent, in a SQL statement. |'
  id: totrans-2852
  prefs: []
  type: TYPE_TB
  zh: '| [False_](#sqlalchemy.sql.expression.False_) | 代表 SQL 语句中的 `false` 关键字或等效项。
    |'
- en: '| [FunctionFilter](#sqlalchemy.sql.expression.FunctionFilter) | Represent a
    function FILTER clause. |'
  id: totrans-2853
  prefs: []
  type: TYPE_TB
  zh: '| [FunctionFilter](#sqlalchemy.sql.expression.FunctionFilter) | 代表一个函数 FILTER
    子句。 |'
- en: '| [Label](#sqlalchemy.sql.expression.Label) | Represents a column label (AS).
    |'
  id: totrans-2854
  prefs: []
  type: TYPE_TB
  zh: '| [Label](#sqlalchemy.sql.expression.Label) | 表示列标签 (AS)。 |'
- en: '| [Null](#sqlalchemy.sql.expression.Null) | Represent the NULL keyword in a
    SQL statement. |'
  id: totrans-2855
  prefs: []
  type: TYPE_TB
  zh: '| [Null](#sqlalchemy.sql.expression.Null) | 代表 SQL 语句中的 NULL 关键字。 |'
- en: '| [Operators](#sqlalchemy.sql.expression.Operators) | Base of comparison and
    logical operators. |'
  id: totrans-2856
  prefs: []
  type: TYPE_TB
  zh: '| [Operators](#sqlalchemy.sql.expression.Operators) | 比较和逻辑运算符的基础。 |'
- en: '| [Over](#sqlalchemy.sql.expression.Over) | Represent an OVER clause. |'
  id: totrans-2857
  prefs: []
  type: TYPE_TB
  zh: '| [Over](#sqlalchemy.sql.expression.Over) | 代表一个 OVER 子句。 |'
- en: '| [SQLColumnExpression](#sqlalchemy.sql.expression.SQLColumnExpression) | A
    type that may be used to indicate any SQL column element or object that acts in
    place of one. |'
  id: totrans-2858
  prefs: []
  type: TYPE_TB
  zh: '| [SQLColumnExpression](#sqlalchemy.sql.expression.SQLColumnExpression) | 可以用来表示任何
    SQL 列元素或充当之一的对象的类型。 |'
- en: '| [TextClause](#sqlalchemy.sql.expression.TextClause) | Represent a literal
    SQL text fragment. |'
  id: totrans-2859
  prefs: []
  type: TYPE_TB
  zh: '| [TextClause](#sqlalchemy.sql.expression.TextClause) | 代表一个文字 SQL 文本片段。 |'
- en: '| [True_](#sqlalchemy.sql.expression.True_) | Represent the `true` keyword,
    or equivalent, in a SQL statement. |'
  id: totrans-2860
  prefs: []
  type: TYPE_TB
  zh: '| [True_](#sqlalchemy.sql.expression.True_) | 代表 SQL 语句中的 `true` 关键字或等效项。 |'
- en: '| [TryCast](#sqlalchemy.sql.expression.TryCast) | Represent a TRY_CAST expression.
    |'
  id: totrans-2861
  prefs: []
  type: TYPE_TB
  zh: '| [TryCast](#sqlalchemy.sql.expression.TryCast) | 代表一个 TRY_CAST 表达式。 |'
- en: '| [Tuple](#sqlalchemy.sql.expression.Tuple) | Represent a SQL tuple. |'
  id: totrans-2862
  prefs: []
  type: TYPE_TB
  zh: '| [Tuple](#sqlalchemy.sql.expression.Tuple) | 代表一个 SQL 元组。 |'
- en: '| [TypeCoerce](#sqlalchemy.sql.expression.TypeCoerce) | Represent a Python-side
    type-coercion wrapper. |'
  id: totrans-2863
  prefs: []
  type: TYPE_TB
  zh: '| [TypeCoerce](#sqlalchemy.sql.expression.TypeCoerce) | 代表一个 Python 端的类型强制转换包装器。
    |'
- en: '| [UnaryExpression](#sqlalchemy.sql.expression.UnaryExpression) | Define a
    ‘unary’ expression. |'
  id: totrans-2864
  prefs: []
  type: TYPE_TB
  zh: '| [UnaryExpression](#sqlalchemy.sql.expression.UnaryExpression) | 定义一个‘一元’表达式。
    |'
- en: '| [WithinGroup](#sqlalchemy.sql.expression.WithinGroup) | Represent a WITHIN
    GROUP (ORDER BY) clause. |'
  id: totrans-2865
  prefs: []
  type: TYPE_TB
  zh: '| [WithinGroup](#sqlalchemy.sql.expression.WithinGroup) | 代表一个 WITHIN GROUP
    (ORDER BY) 子句。 |'
- en: '| [WrapsColumnExpression](#sqlalchemy.sql.elements.WrapsColumnExpression) |
    Mixin that defines a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as a wrapper with special labeling
    behavior for an expression that already has a name. |'
  id: totrans-2866
  prefs: []
  type: TYPE_TB
  zh: '| [WrapsColumnExpression](#sqlalchemy.sql.elements.WrapsColumnExpression) |
    定义一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    作为具有特殊标签行为的包装器的混合。 |'
- en: '[PRE704]'
  id: totrans-2867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: Represent an expression that is `LEFT <operator> RIGHT`.
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 `LEFT <operator> RIGHT` 的表达式。
- en: 'A [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression "sqlalchemy.sql.expression.BinaryExpression")
    is generated automatically whenever two column expressions are used in a Python
    binary expression:'
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个列表达式在 Python 二进制表达式中使用时，会自动生成一个 [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")：
- en: '[PRE705]'
  id: totrans-2870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: '**Class signature**'
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") (`sqlalchemy.sql.expression.OperatorExpression`)
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") (`sqlalchemy.sql.expression.OperatorExpression`)
- en: '[PRE706]'
  id: totrans-2873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: Represent a “bound expression”.
  id: totrans-2874
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个“绑定表达式”。
- en: '[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    is invoked explicitly using the [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") function, as in:'
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")是通过[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")函数显式调用的，如下所示：'
- en: '[PRE707]'
  id: totrans-2876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: Detailed discussion of how [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is used is at [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam").
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用[`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")的详细讨论在[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")处。
- en: See also
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")'
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")'
- en: '**Members**'
  id: totrans-2880
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[effective_value](#sqlalchemy.sql.expression.BindParameter.effective_value),
    [inherit_cache](#sqlalchemy.sql.expression.BindParameter.inherit_cache), [render_literal_execute()](#sqlalchemy.sql.expression.BindParameter.render_literal_execute)'
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: '[effective_value](#sqlalchemy.sql.expression.BindParameter.effective_value)，[inherit_cache](#sqlalchemy.sql.expression.BindParameter.inherit_cache)，[render_literal_execute()](#sqlalchemy.sql.expression.BindParameter.render_literal_execute)'
- en: '**Class signature**'
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.KeyedColumnElement`)
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")（`sqlalchemy.sql.roles.InElementRole`，`sqlalchemy.sql.expression.KeyedColumnElement`）
- en: '[PRE708]'
  id: totrans-2884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: Return the value of this bound parameter, taking into account if the `callable`
    parameter was set.
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此绑定参数的值，考虑到是否设置了`callable`参数。
- en: The `callable` value will be evaluated and returned if present, else `value`.
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在`callable`值，则将其计算并返回，否则返回`value`。
- en: '[PRE709]'
  id: totrans-2887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑是否应该参与缓存；这在功能上等同于将值设置为`False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与此类本地属性相关而不是其超类的属性的SQL不会更改，则可以在特定类上将此标志设置为`True`。
- en: See also
  id: totrans-2891
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义结构启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的SQL结构设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE710]'
  id: totrans-2893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: Produce a copy of this bound parameter that will enable the [`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter") flag.
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此绑定参数的副本，该副本将启用[`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter")标志。
- en: The [`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter") flag will have the effect of the parameter
    rendered in the compiled SQL string using `[POSTCOMPILE]` form, which is a special
    form that is converted to be a rendering of the literal value of the parameter
    at SQL execution time. The rationale is to support caching of SQL statement strings
    that can embed per-statement literal values, such as LIMIT and OFFSET parameters,
    in the final SQL string that is passed to the DBAPI. Dialects in particular may
    want to use this method within custom compilation schemes.
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BindParameter.literal_execute`](#sqlalchemy.sql.expression.BindParameter.params.literal_execute
    "sqlalchemy.sql.expression.BindParameter") 标志会使参数在编译后的 SQL 字符串中以 `[POSTCOMPILE]`
    形式呈现，这是一种特殊形式，会在 SQL 执行时转换为参数的字面值。其目的是支持缓存 SQL 语句字符串，其中可以嵌入每个语句的字面值，如 LIMIT 和
    OFFSET 参数，在传递给 DBAPI 的最终 SQL 字符串中。特别是方言可能希望在自定义编译方案中使用此方法。'
- en: New in version 1.4.5.
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.5 版中的新内容。
- en: See also
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Caching for Third Party Dialects](connections.html#engine-thirdparty-caching)'
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三方方言的缓存](connections.html#engine-thirdparty-caching)'
- en: '[PRE711]'
  id: totrans-2899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: Represent a `CASE` expression.
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 `CASE` 表达式。
- en: '[`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    is produced using the [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    factory function, as in:'
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    是使用 [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    工厂函数生成的，如下所示：'
- en: '[PRE712]'
  id: totrans-2902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: Details on [`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    usage is at [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case").
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    用法的详细信息位于 [`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")。'
- en: See also
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")'
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
  zh: '[`case()`](#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")'
- en: '**Class signature**'
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-2907
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Case`](#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE713]'
  id: totrans-2908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: Represent a `CAST` expression.
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 `CAST` 表达式。
- en: '[`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    is produced using the [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    factory function, as in:'
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    是使用 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    工厂函数生成的，如下所示：'
- en: '[PRE714]'
  id: totrans-2911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: Details on [`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    usage is at [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast").
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    的用法详见 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")。'
- en: See also
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - an alternative to CAST that coerces the type on the Python side only, which
    is often sufficient to generate the correct SQL and data coercion.'
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    - 一种在 Python 端仅强制类型的替代方法，通常足以生成正确的 SQL 和数据强制转换。'
- en: '**Class signature**'
  id: totrans-2918
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    (`sqlalchemy.sql.expression.WrapsColumnExpression`)
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    (`sqlalchemy.sql.expression.WrapsColumnExpression`)
- en: '[PRE715]'
  id: totrans-2920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: Describe a list of clauses, separated by an operator.
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: 描述一系列由运算符分隔的子句。
- en: By default, is comma-separated, such as a column listing.
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，以逗号分隔，例如列列表。
- en: '**Members**'
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.ClauseList.self_group)'
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.ClauseList.self_group)'
- en: '**Class signature**'
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.roles.OrderByRole`, `sqlalchemy.sql.roles.ColumnsClauseRole`,
    `sqlalchemy.sql.roles.DMLColumnRole`, `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  id: totrans-2926
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList") (`sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.roles.OrderByRole`, `sqlalchemy.sql.roles.ColumnsClauseRole`,
    `sqlalchemy.sql.roles.DMLColumnRole`, `sqlalchemy.sql.expression.DQLDMLClauseElement`)
- en: '[PRE716]'
  id: totrans-2927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是在“二元”表达式中被用来在放置到较大表达式中时提供自身周围的分组，以及在放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时被[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造使用。（请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group
    "sqlalchemy.sql.expression.ClauseList.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，会自动应用[`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group
    "sqlalchemy.sql.expression.ClauseList.self_group") - 最终用户代码通常不需要直接使用这个方法。请注意，SQLAlchemy的子句构造考虑了操作符优先级
    - 因此在像`x OR (y AND z)`这样的表达式中可能不需要括号 - AND的优先级高于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group "sqlalchemy.sql.expression.ClauseList.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.ClauseList.self_group
    "sqlalchemy.sql.expression.ClauseList.self_group")方法只是返回自身。'
- en: '[PRE717]'
  id: totrans-2932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: Represents a column expression from any textual string.
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
  zh: 表示来自任何文本字符串的列表达式。
- en: 'The [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause"),
    a lightweight analogue to the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") class, is typically invoked using the [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") function, as in:'
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")，是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")类的一个轻量级类似物，通常使用[`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")函数来调用，如下所示：'
- en: '[PRE718]'
  id: totrans-2935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: 'The above statement would produce SQL like:'
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将产生类似的SQL：
- en: '[PRE719]'
  id: totrans-2937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    is the immediate superclass of the schema-specific [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object. While the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") class has all the same capabilities as [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), the [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") class is usable by itself in those cases
    where behavioral requirements are limited to simple SQL expression generation.
    The object has none of the associations with schema-level metadata or with execution-time
    behavior that [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    does, so in that sense is a “lightweight” version of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    是模式特定的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的直接超类。虽然 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    类具有与 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    相同的功能，但 [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    类本身可在那些行为要求仅限于简单的 SQL 表达式生成的情况下使用。该对象没有与模式级元数据或执行时行为的关联，因此在这个意义上是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的“轻量级”版本。'
- en: Full details on [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    usage is at [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column").
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    的完整用法详情请参阅 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")。'
- en: See also
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
- en: '**Members**'
  id: totrans-2943
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[get_children()](#sqlalchemy.sql.expression.ColumnClause.get_children)'
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: '[get_children()](#sqlalchemy.sql.expression.ColumnClause.get_children)'
- en: '**Class signature**'
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") (`sqlalchemy.sql.roles.DDLReferredColumnRole`,
    `sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.roles.StrAsPlainColumnRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedColumn`)
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") (`sqlalchemy.sql.roles.DDLReferredColumnRole`,
    `sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.roles.StrAsPlainColumnRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.expression.NamedColumn`)
- en: '[PRE720]'
  id: totrans-2947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的即时子 `HasTraverseInternals` 元素。
- en: This is used for visit traversal.
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含改变返回集合的标志，例如返回子集以减少更大的遍历，或从不同的上下文返回子项（例如模式级别集合而不是子句级别）。**'
- en: '[PRE721]'
  id: totrans-2951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: Collection of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    instances, typically for [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    实例的集合，通常用于 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象。'
- en: The [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    object is most commonly available as the [`Table.c`](metadata.html#sqlalchemy.schema.Table.c
    "sqlalchemy.schema.Table.c") or [`Table.columns`](metadata.html#sqlalchemy.schema.Table.columns
    "sqlalchemy.schema.Table.columns") collection on the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object, introduced at [Accessing Tables and Columns](metadata.html#metadata-tables-and-columns).
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    对象最常见的形式是作为 [`Table.c`](metadata.html#sqlalchemy.schema.Table.c "sqlalchemy.schema.Table.c")
    或 [`Table.columns`](metadata.html#sqlalchemy.schema.Table.columns "sqlalchemy.schema.Table.columns")
    在 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 对象上的集合，引入自
    [访问表和列](metadata.html#metadata-tables-and-columns)。'
- en: The [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    has both mapping- and sequence- like behaviors. A [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") usually stores [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, which are then accessible both via mapping
    style access as well as attribute access style.
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")具有映射和序列类似的行为。[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")通常存储[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，然后可以通过映射样式访问以及属性访问样式访问：'
- en: 'To access [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects using ordinary attribute-style access, specify the name like any other
    object attribute, such as below a column named `employee_name` is accessed:'
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用普通的属性样式访问来访问[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，请像访问任何其他对象属性一样指定名称，例如下面访问了一个名为`employee_name`的列：
- en: '[PRE722]'
  id: totrans-2956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: 'To access columns that have names with special characters or spaces, index-style
    access is used, such as below which illustrates a column named `employee '' payment`
    is accessed:'
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问具有特殊字符或空格名称的列，需要使用索引样式访问，例如下面演示了如何访问名为`employee ' payment`的列：
- en: '[PRE723]'
  id: totrans-2958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: 'As the [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    object provides a Python dictionary interface, common dictionary method names
    like [`ColumnCollection.keys()`](#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys"), [`ColumnCollection.values()`](#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values"), and [`ColumnCollection.items()`](#sqlalchemy.sql.expression.ColumnCollection.items
    "sqlalchemy.sql.expression.ColumnCollection.items") are available, which means
    that database columns that are keyed under these names also need to use indexed
    access:'
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")对象提供了Python字典接口，因此可用常见的字典方法名称如[`ColumnCollection.keys()`](#sqlalchemy.sql.expression.ColumnCollection.keys
    "sqlalchemy.sql.expression.ColumnCollection.keys")、[`ColumnCollection.values()`](#sqlalchemy.sql.expression.ColumnCollection.values
    "sqlalchemy.sql.expression.ColumnCollection.values")和[`ColumnCollection.items()`](#sqlalchemy.sql.expression.ColumnCollection.items
    "sqlalchemy.sql.expression.ColumnCollection.items")，这意味着以这些名称为键的数据库列也需要使用索引访问：
- en: '[PRE724]'
  id: totrans-2960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: 'The name for which a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would be present is normally that of the [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") parameter. In some contexts, such as a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object that uses a label style set using the
    [`Select.set_label_style()`](selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") method, a column of a certain
    key may instead be represented under a particular label name such as `tablename_columnname`:'
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")存在的名称通常是[`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column")参数的名称。在某些上下文中，例如使用[`Select.set_label_style()`](selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style")方法设置标签样式的[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象中，某个键的列可能会以特定的标签名称表示，例如`tablename_columnname`：'
- en: '[PRE725]'
  id: totrans-2962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    also indexes the columns in order and allows them to be accessible by their integer
    position:'
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")还按顺序索引列，并允许通过它们的整数位置访问它们：'
- en: '[PRE726]'
  id: totrans-2964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: 'New in version 1.4: [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") allows integer-based index access
    to the collection.'
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")允许对集合进行基于整数的索引访问。
- en: 'Iterating the collection yields the column expressions in order:'
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代集合以按顺序生成列表达式：
- en: '[PRE727]'
  id: totrans-2967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: 'The base [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    object can store duplicates, which can mean either two columns with the same key,
    in which case the column returned by key access is **arbitrary**:'
  id: totrans-2968
  prefs: []
  type: TYPE_NORMAL
  zh: 基础 [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    对象可以存储重复项，这可能意味着两个具有相同键的列，此时通过键访问的列是**任意的**：
- en: '[PRE728]'
  id: totrans-2969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: Or it can also mean the same column multiple times. These cases are supported
    as [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    is used to represent the columns in a SELECT statement which may include duplicates.
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
  zh: 或者也可能意味着同一列多次出现。这些情况都受到支持，因为 [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 用于表示 SELECT 语句中的列，其中可能包括重复项。
- en: A special subclass `DedupeColumnCollection` exists which instead maintains SQLAlchemy’s
    older behavior of not allowing duplicates; this collection is used for schema
    level objects like [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    and [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") where this deduping is helpful. The
    `DedupeColumnCollection` class also has additional mutation methods as the schema
    constructs have more use cases that require removal and replacement of columns.
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在一个特殊的子类 `DedupeColumnCollection`，它保留了 SQLAlchemy 的旧行为，不允许重复项；此集合用于模式级对象，如
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 和 [`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")，其中这种去重是有帮助的。`DedupeColumnCollection`
    类还具有额外的变异方法，因为模式构造具有更多需要删除和替换列的用例。
- en: 'Changed in version 1.4: [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") now stores duplicate column keys
    as well as the same column in multiple positions. The `DedupeColumnCollection`
    class is added to maintain the former behavior in those cases where deduplication
    as well as additional replace/remove operations are needed.'
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 更改：[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 现在存储重复列键以及同一列在多个位置。添加了 `DedupeColumnCollection`
    类以维护以前的行为，在这些情况下需要去重以及额外的替换/删除操作。
- en: '**Members**'
  id: totrans-2973
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add()](#sqlalchemy.sql.expression.ColumnCollection.add), [as_readonly()](#sqlalchemy.sql.expression.ColumnCollection.as_readonly),
    [clear()](#sqlalchemy.sql.expression.ColumnCollection.clear), [compare()](#sqlalchemy.sql.expression.ColumnCollection.compare),
    [contains_column()](#sqlalchemy.sql.expression.ColumnCollection.contains_column),
    [corresponding_column()](#sqlalchemy.sql.expression.ColumnCollection.corresponding_column),
    [get()](#sqlalchemy.sql.expression.ColumnCollection.get), [items()](#sqlalchemy.sql.expression.ColumnCollection.items),
    [keys()](#sqlalchemy.sql.expression.ColumnCollection.keys), [update()](#sqlalchemy.sql.expression.ColumnCollection.update),
    [values()](#sqlalchemy.sql.expression.ColumnCollection.values)'
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
  zh: '[add()](#sqlalchemy.sql.expression.ColumnCollection.add), [as_readonly()](#sqlalchemy.sql.expression.ColumnCollection.as_readonly),
    [clear()](#sqlalchemy.sql.expression.ColumnCollection.clear), [compare()](#sqlalchemy.sql.expression.ColumnCollection.compare),
    [contains_column()](#sqlalchemy.sql.expression.ColumnCollection.contains_column),
    [corresponding_column()](#sqlalchemy.sql.expression.ColumnCollection.corresponding_column),
    [get()](#sqlalchemy.sql.expression.ColumnCollection.get), [items()](#sqlalchemy.sql.expression.ColumnCollection.items),
    [keys()](#sqlalchemy.sql.expression.ColumnCollection.keys), [update()](#sqlalchemy.sql.expression.ColumnCollection.update),
    [values()](#sqlalchemy.sql.expression.ColumnCollection.values)'
- en: '**Class signature**'
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") (`typing.Generic`)
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") (`typing.Generic`)
- en: '[PRE729]'
  id: totrans-2977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: Add a column to this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    添加一列。
- en: Note
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is **not normally used by user-facing code**, as the [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") is usually part of an existing object
    such as a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    To add a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    to an existing [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, use the [`Table.append_column()`](metadata.html#sqlalchemy.schema.Table.append_column
    "sqlalchemy.schema.Table.append_column") method.
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法通常**不由用户界面代码**使用，因为[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")通常是现有对象的一部分，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。要将[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")添加到现有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象中，请使用[`Table.append_column()`](metadata.html#sqlalchemy.schema.Table.append_column
    "sqlalchemy.schema.Table.append_column")方法。
- en: '[PRE730]'
  id: totrans-2981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: Return a “read only” form of this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")的“只读”形式。
- en: '[PRE731]'
  id: totrans-2983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: Dictionary clear() is not implemented for [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")，字典清除()方法未实现。
- en: '[PRE732]'
  id: totrans-2985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: Compare this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") to another based on the names of
    the keys
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: 根据键的名称将此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")与另一个进行比较
- en: '[PRE733]'
  id: totrans-2987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: Checks if a column object exists in this collection
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
  zh: 检查此集合中是否存在列对象
- en: '[PRE734]'
  id: totrans-2989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: Given a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement"),
    return the exported [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") object from this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which corresponds to that original
    [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    via a common ancestor column.
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")，从此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")返回对应于该原始[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的导出[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象，通过一个公共祖先列。
- en: 'Parameters:'
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – the target [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") to be matched.'
  id: totrans-2992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 要匹配的目标[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")。'
- en: '`require_embedded` – only return corresponding columns for the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), if the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is actually present within a sub-element
    of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable "sqlalchemy.sql.expression.Selectable").
    Normally the column will match if it merely shares a common ancestor with one
    of the exported columns of this [`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").'
  id: totrans-2993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_embedded` – 仅当给定的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")存在于此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的子元素中时，返回相应的列。通常情况下，如果列仅与此[`Selectable`](selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的导出列共享一个公共祖先，则列将匹配。'
- en: See also
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") - invokes this method
    against the collection returned by [`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns").'
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Selectable.corresponding_column()`](selectable.html#sqlalchemy.sql.expression.Selectable.corresponding_column
    "sqlalchemy.sql.expression.Selectable.corresponding_column") - 对由[`Selectable.exported_columns`](selectable.html#sqlalchemy.sql.expression.Selectable.exported_columns
    "sqlalchemy.sql.expression.Selectable.exported_columns")返回的集合调用此方法。'
- en: 'Changed in version 1.4: the implementation for `corresponding_column` was moved
    onto the [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")
    itself.'
  id: totrans-2996
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`corresponding_column`的实现已移至[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")本身。
- en: '[PRE735]'
  id: totrans-2997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: Get a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")
    or [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object based on a string key name from this [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")中的字符串键名获取一个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")或[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: '[PRE736]'
  id: totrans-2999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: Return a sequence of (key, column) tuples for all columns in this collection
    each consisting of a string key name and a [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object.
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此集合中所有列的(key, column)元组序列，每个元组由字符串键名和[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")或[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象组成。
- en: '[PRE737]'
  id: totrans-3001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: Return a sequence of string key names for all columns in this collection.
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此集合中所有列的字符串键名序列。
- en: '[PRE738]'
  id: totrans-3003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: Dictionary update() is not implemented for [`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection").
  id: totrans-3004
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`ColumnCollection`](#sqlalchemy.sql.expression.ColumnCollection "sqlalchemy.sql.expression.ColumnCollection")，字典的update()方法未实现。
- en: '[PRE739]'
  id: totrans-3005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: Return a sequence of [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects for all columns in this collection.
  id: totrans-3006
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此集合中所有列的[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")或[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象序列。
- en: '[PRE740]'
  id: totrans-3007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: Represent a column-oriented SQL expression suitable for usage in the “columns”
    clause, WHERE clause etc. of a statement.
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: 表示适用于语句的“columns”子句、WHERE子句等的面向列的SQL表达式。
- en: While the most familiar kind of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") is the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") serves as the basis for any unit that
    may be present in a SQL expression, including the expressions themselves, SQL
    functions, bound parameters, literal expressions, keywords such as `NULL`, etc.
    [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    is the ultimate base class for all such elements.
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
  zh: 最熟悉的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")类型是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")作为SQL表达式中可能存在的任何单元的基础，包括表达式本身、SQL函数、绑定参数、文字表达式、`NULL`等关键字。[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")是所有这些元素的最终基类。
- en: 'A wide variety of SQLAlchemy Core functions work at the SQL expression level,
    and are intended to accept instances of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as arguments. These functions will
    typically document that they accept a “SQL expression” as an argument. What this
    means in terms of SQLAlchemy usually refers to an input which is either already
    in the form of a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    object, or a value which can be **coerced** into one. The coercion rules followed
    by most, but not all, SQLAlchemy Core functions with regards to SQL expressions
    are as follows:'
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: 大量的SQLAlchemy核心函数在SQL表达式级别工作，并且旨在接受[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实例作为参数。这些函数通常会记录它们接受一个“SQL表达式”作为参数。在SQLAlchemy中，这通常指的是一个已经是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象形式的输入，或者可以*强制转换*为其中一个的值。大多数但不是所有SQLAlchemy核心函数关于SQL表达式的强制转换规则如下：
- en: a literal Python value, such as a string, integer or floating point value, boolean,
    datetime, `Decimal` object, or virtually any other Python object, will be coerced
    into a “literal bound value”. This generally means that a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") will be produced featuring the given value
    embedded into the construct; the resulting [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object is an instance of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"). The Python value will ultimately be
    sent to the DBAPI at execution time as a parameterized argument to the `execute()`
    or `executemany()` methods, after SQLAlchemy type-specific converters (e.g. those
    provided by any associated [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") objects) are applied to the value.
  id: totrans-3011
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面的Python值，比如字符串、整数或浮点值、布尔值、日期时间、`Decimal`对象，或几乎任何其他Python对象，将被强制转换为“字面绑定值”。这通常意味着将生成一个包含给定值嵌入到构造中的[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")；生成的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的一个实例。Python值最终将在执行时作为参数化参数传递给DBAPI，作为`execute()`或`executemany()`方法的参数，之前会应用SQLAlchemy类型特定的转换器（例如任何相关的[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象提供的转换器）。
- en: ''
  id: totrans-3012
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3013
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: any special object value, typically ORM-level constructs, which feature an accessor
    called `__clause_element__()`. The Core expression system looks for this method
    when an object of otherwise unknown type is passed to a function that is looking
    to coerce the argument into a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") and sometimes a [`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") expression. It is used within the ORM
    to convert from ORM-specific objects like mapped classes and mapped attributes
    into Core expression objects.
  id: totrans-3014
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何特殊对象值，通常是ORM级别的构造，具有名为`__clause_element__()`的访问器。当将一个否则未知类型的对象传递给一个希望将参数强制转换为[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")和有时是[`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")表达式的函数时，核心表达式系统会查找此方法。它在ORM中用于将ORM特定对象（如映射类和映射属性）转换为核心表达式对象。
- en: ''
  id: totrans-3015
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3016
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The Python `None` value is typically interpreted as `NULL`, which in SQLAlchemy
    Core produces an instance of [`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null").
  id: totrans-3017
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的`None`值通常被解释为`NULL`，在SQLAlchemy Core中会产生一个[`null()`](#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")的实例。
- en: 'A [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    provides the ability to generate new [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects using Python expressions. This
    means that Python operators such as `==`, `!=` and `<` are overloaded to mimic
    SQL operations, and allow the instantiation of further [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") instances which are composed from other,
    more fundamental [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    objects. For example, two [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects can be added together with the
    addition operator `+` to produce a [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"). Both [`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") and [`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") are subclasses of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"):'
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")提供了使用Python表达式生成新的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象的能力。这意味着Python运算符如`==`、`!=`和`<`被重载以模仿SQL操作，并允许从其他更基本的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")对象实例化进一步的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")实例。例如，两个[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")对象可以使用加法运算符`+`相加，以生成一个[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")。[`ColumnClause`](#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")和[`BinaryExpression`](#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")都是[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的子类：
- en: '[PRE741]'
  id: totrans-3019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: See also
  id: totrans-3020
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")'
- en: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")'
- en: '**Members**'
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.sql.expression.ColumnElement.__eq__), [__le__()](#sqlalchemy.sql.expression.ColumnElement.__le__),
    [__lt__()](#sqlalchemy.sql.expression.ColumnElement.__lt__), [__ne__()](#sqlalchemy.sql.expression.ColumnElement.__ne__),
    [all_()](#sqlalchemy.sql.expression.ColumnElement.all_), [allows_lambda](#sqlalchemy.sql.expression.ColumnElement.allows_lambda),
    [anon_key_label](#sqlalchemy.sql.expression.ColumnElement.anon_key_label), [anon_label](#sqlalchemy.sql.expression.ColumnElement.anon_label),
    [any_()](#sqlalchemy.sql.expression.ColumnElement.any_), [asc()](#sqlalchemy.sql.expression.ColumnElement.asc),
    [base_columns](#sqlalchemy.sql.expression.ColumnElement.base_columns), [between()](#sqlalchemy.sql.expression.ColumnElement.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnElement.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnElement.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnElement.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_rshift), [bitwise_xor()](#sqlalchemy.sql.expression.ColumnElement.bitwise_xor),
    [bool_op()](#sqlalchemy.sql.expression.ColumnElement.bool_op), [cast()](#sqlalchemy.sql.expression.ColumnElement.cast),
    [collate()](#sqlalchemy.sql.expression.ColumnElement.collate), [comparator](#sqlalchemy.sql.expression.ColumnElement.comparator),
    [compare()](#sqlalchemy.sql.expression.ColumnElement.compare), [compile()](#sqlalchemy.sql.expression.ColumnElement.compile),
    [concat()](#sqlalchemy.sql.expression.ColumnElement.concat), [contains()](#sqlalchemy.sql.expression.ColumnElement.contains),
    [desc()](#sqlalchemy.sql.expression.ColumnElement.desc), [description](#sqlalchemy.sql.expression.ColumnElement.description),
    [distinct()](#sqlalchemy.sql.expression.ColumnElement.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnElement.endswith),
    [entity_namespace](#sqlalchemy.sql.expression.ColumnElement.entity_namespace),
    [expression](#sqlalchemy.sql.expression.ColumnElement.expression), [foreign_keys](#sqlalchemy.sql.expression.ColumnElement.foreign_keys),
    [get_children()](#sqlalchemy.sql.expression.ColumnElement.get_children), [icontains()](#sqlalchemy.sql.expression.ColumnElement.icontains),
    [iendswith()](#sqlalchemy.sql.expression.ColumnElement.iendswith), [ilike()](#sqlalchemy.sql.expression.ColumnElement.ilike),
    [in_()](#sqlalchemy.sql.expression.ColumnElement.in_), [inherit_cache](#sqlalchemy.sql.expression.ColumnElement.inherit_cache),
    [is_()](#sqlalchemy.sql.expression.ColumnElement.is_), [is_clause_element](#sqlalchemy.sql.expression.ColumnElement.is_clause_element),
    [is_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_distinct_from),
    [is_dml](#sqlalchemy.sql.expression.ColumnElement.is_dml), [is_not()](#sqlalchemy.sql.expression.ColumnElement.is_not),
    [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_not_distinct_from),
    [is_selectable](#sqlalchemy.sql.expression.ColumnElement.is_selectable), [isnot()](#sqlalchemy.sql.expression.ColumnElement.isnot),
    [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnElement.istartswith), [key](#sqlalchemy.sql.expression.ColumnElement.key),
    [label()](#sqlalchemy.sql.expression.ColumnElement.label), [like()](#sqlalchemy.sql.expression.ColumnElement.like),
    [match()](#sqlalchemy.sql.expression.ColumnElement.match), [negation_clause](#sqlalchemy.sql.expression.ColumnElement.negation_clause),
    [not_ilike()](#sqlalchemy.sql.expression.ColumnElement.not_ilike), [not_in()](#sqlalchemy.sql.expression.ColumnElement.not_in),
    [not_like()](#sqlalchemy.sql.expression.ColumnElement.not_like), [notilike()](#sqlalchemy.sql.expression.ColumnElement.notilike),
    [notin_()](#sqlalchemy.sql.expression.ColumnElement.notin_), [notlike()](#sqlalchemy.sql.expression.ColumnElement.notlike),
    [nulls_first()](#sqlalchemy.sql.expression.ColumnElement.nulls_first), [nulls_last()](#sqlalchemy.sql.expression.ColumnElement.nulls_last),
    [nullsfirst()](#sqlalchemy.sql.expression.ColumnElement.nullsfirst), [nullslast()](#sqlalchemy.sql.expression.ColumnElement.nullslast),
    [op()](#sqlalchemy.sql.expression.ColumnElement.op), [operate()](#sqlalchemy.sql.expression.ColumnElement.operate),
    [params()](#sqlalchemy.sql.expression.ColumnElement.params), [primary_key](#sqlalchemy.sql.expression.ColumnElement.primary_key),
    [proxy_set](#sqlalchemy.sql.expression.ColumnElement.proxy_set), [regexp_match()](#sqlalchemy.sql.expression.ColumnElement.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnElement.regexp_replace), [reverse_operate()](#sqlalchemy.sql.expression.ColumnElement.reverse_operate),
    [self_group()](#sqlalchemy.sql.expression.ColumnElement.self_group), [shares_lineage()](#sqlalchemy.sql.expression.ColumnElement.shares_lineage),
    [startswith()](#sqlalchemy.sql.expression.ColumnElement.startswith), [stringify_dialect](#sqlalchemy.sql.expression.ColumnElement.stringify_dialect),
    [supports_execution](#sqlalchemy.sql.expression.ColumnElement.supports_execution),
    [timetuple](#sqlalchemy.sql.expression.ColumnElement.timetuple), [type](#sqlalchemy.sql.expression.ColumnElement.type),
    [unique_params()](#sqlalchemy.sql.expression.ColumnElement.unique_params), [uses_inspection](#sqlalchemy.sql.expression.ColumnElement.uses_inspection)'
  id: totrans-3024
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.sql.expression.ColumnElement.__eq__), [__le__()](#sqlalchemy.sql.expression.ColumnElement.__le__),
    [__lt__()](#sqlalchemy.sql.expression.ColumnElement.__lt__), [__ne__()](#sqlalchemy.sql.expression.ColumnElement.__ne__),
    [all_()](#sqlalchemy.sql.expression.ColumnElement.all_), [allows_lambda](#sqlalchemy.sql.expression.ColumnElement.allows_lambda),
    [anon_key_label](#sqlalchemy.sql.expression.ColumnElement.anon_key_label), [anon_label](#sqlalchemy.sql.expression.ColumnElement.anon_label),
    [any_()](#sqlalchemy.sql.expression.ColumnElement.any_), [asc()](#sqlalchemy.sql.expression.ColumnElement.asc),
    [base_columns](#sqlalchemy.sql.expression.ColumnElement.base_columns), [between()](#sqlalchemy.sql.expression.ColumnElement.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnElement.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnElement.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnElement.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnElement.bitwise_rshift), [bitwise_xor()](#sqlalchemy.sql.expression.ColumnElement.bitwise_xor),
    [bool_op()](#sqlalchemy.sql.expression.ColumnElement.bool_op), [cast()](#sqlalchemy.sql.expression.ColumnElement.cast),
    [collate()](#sqlalchemy.sql.expression.ColumnElement.collate), [comparator](#sqlalchemy.sql.expression.ColumnElement.comparator),
    [compare()](#sqlalchemy.sql.expression.ColumnElement.compare), [compile()](#sqlalchemy.sql.expression.ColumnElement.compile),
    [concat()](#sqlalchemy.sql.expression.ColumnElement.concat), [contains()](#sqlalchemy.sql.expression.ColumnElement.contains),
    [desc()](#sqlalchemy.sql.expression.ColumnElement.desc), [description](#sqlalchemy.sql.expression.ColumnElement.description),
    [distinct()](#sqlalchemy.sql.expression.ColumnElement.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnElement.endswith),
    [entity_namespace](#sqlalchemy.sql.expression.ColumnElement.entity_namespace),
    [expression](#sqlalchemy.sql.expression.ColumnElement.expression), [foreign_keys](#sqlalchemy.sql.expression.ColumnElement.foreign_keys),
    [get_children()](#sqlalchemy.sql.expression.ColumnElement.get_children), [icontains()](#sqlalchemy.sql.expression.ColumnElement.icontains),
    [iendswith()](#sqlalchemy.sql.expression.ColumnElement.iendswith), [ilike()](#sqlalchemy.sql.expression.ColumnElement.ilike),
    [in_()](#sqlalchemy.sql.expression.ColumnElement.in_), [inherit_cache](#sqlalchemy.sql.expression.ColumnElement.inherit_cache),
    [is_()](#sqlalchemy.sql.expression.ColumnElement.is_), [is_clause_element](#sqlalchemy.sql.expression.ColumnElement.is_clause_element),
    [is_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_distinct_from),
    [is_dml](#sqlalchemy.sql.expression.ColumnElement.is_dml), [is_not()](#sqlalchemy.sql.expression.ColumnElement.is_not),
    [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.is_not_distinct_from),
    [is_selectable](#sqlalchemy.sql.expression.ColumnElement.is_selectable), [isnot()](#sqlalchemy.sql.expression.ColumnElement.isnot),
    [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnElement.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnElement.istartswith), [key](#sqlalchemy.sql.expression.ColumnElement.key),
    [label()](#sqlalchemy.sql.expression.ColumnElement.label), [like()](#sqlalchemy.sql.expression.ColumnElement.like),
    [match()](#sqlalchemy.sql.expression.ColumnElement.match), [negation_clause](#sqlalchemy.sql.expression.ColumnElement.negation_clause),
    [not_ilike()](#sqlalchemy.sql.expression.ColumnElement.not_ilike), [not_in()](#sqlalchemy.sql.expression.ColumnElement.not_in),
    [not_like()](#sqlalchemy.sql.expression.ColumnElement.not_like), [notilike()](#sqlalchemy.sql.expression.ColumnElement.notilike),
    [notin_()](#sqlalchemy.sql.expression.ColumnElement.notin_), [notlike()](#sqlalchemy.sql.expression.ColumnElement.notlike),
    [nulls_first()](#sqlalchemy.sql.expression.ColumnElement.nulls_first), [nulls_last()](#sqlalchemy.sql.expression.ColumnElement.nulls_last),
    [nullsfirst()](#sqlalchemy.sql.expression.ColumnElement.nullsfirst), [nullslast()](#sqlalchemy.sql.expression.ColumnElement.nullslast),
    [op()](#sqlalchemy.sql.expression.ColumnElement.op), [operate()](#sqlalchemy.sql.expression.ColumnElement.operate),
    [params()](#sqlalchemy.sql.expression.ColumnElement.params), [primary_key](#sqlalchemy.sql.expression.ColumnElement.primary_key),
    [proxy_set](#sqlalchemy.sql.expression.ColumnElement.proxy_set), [regexp_match()](#sqlalchemy.sql.expression.ColumnElement.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnElement.regexp_replace), [reverse_operate()](#sqlalchemy.sql.expression.ColumnElement.reverse_operate),
    [self_group()](#sqlalchemy.sql.expression.ColumnElement.self_group), [shares_lineage()](#sqlalchemy.sql.expression.ColumnElement.shares_lineage),
    [startswith()](#sqlalchemy.sql.expression.ColumnElement.startswith), [stringify_dialect](#sqlalchemy.sql.expression.ColumnElement.stringify_dialect),
    [supports_execution](#sqlalchemy.sql.expression.ColumnElement.supports_execution),
    [timetuple](#sqlalchemy.sql.expression.ColumnElement.timetuple), [type](#sqlalchemy.sql.expression.ColumnElement.type),
    [unique_params()](#sqlalchemy.sql.expression.ColumnElement.unique_params), [uses_inspection](#sqlalchemy.sql.expression.ColumnElement.uses_inspection)'
- en: '**Class signature**'
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") (`sqlalchemy.sql.roles.ColumnArgumentOrKeyRole`,
    `sqlalchemy.sql.roles.StatementOptionRole`, `sqlalchemy.sql.roles.WhereHavingRole`,
    `sqlalchemy.sql.roles.BinaryElementRole`, `sqlalchemy.sql.roles.OrderByRole`,
    `sqlalchemy.sql.roles.ColumnsClauseRole`, `sqlalchemy.sql.roles.LimitOffsetRole`,
    `sqlalchemy.sql.roles.DMLColumnRole`, `sqlalchemy.sql.roles.DDLConstraintColumnRole`,
    `sqlalchemy.sql.roles.DDLExpressionRole`, [`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"), `sqlalchemy.sql.expression.DQLDMLClauseElement`)
  id: totrans-3026
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")（`sqlalchemy.sql.roles.ColumnArgumentOrKeyRole`、`sqlalchemy.sql.roles.StatementOptionRole`、`sqlalchemy.sql.roles.WhereHavingRole`、`sqlalchemy.sql.roles.BinaryElementRole`、`sqlalchemy.sql.roles.OrderByRole`、`sqlalchemy.sql.roles.ColumnsClauseRole`、`sqlalchemy.sql.roles.LimitOffsetRole`、`sqlalchemy.sql.roles.DMLColumnRole`、`sqlalchemy.sql.roles.DDLConstraintColumnRole`、`sqlalchemy.sql.roles.DDLExpressionRole`、[`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")、`sqlalchemy.sql.expression.DQLDMLClauseElement`）
- en: '[PRE742]'
  id: totrans-3027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *方法。'
- en: Implement the `==` operator.
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标是`None`，则生成`a IS NULL`。
- en: '[PRE743]'
  id: totrans-3031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3032
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* `sqlalchemy.sql.expression.ColumnOperators.__le__` *方法。'
- en: Implement the `<=` operator.
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE744]'
  id: totrans-3035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *方法。'
- en: Implement the `<` operator.
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-3038
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE745]'
  id: totrans-3039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *方法。'
- en: Implement the `!=` operator.
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a != b`。如果目标是`None`，则生成`a IS NOT NULL`。
- en: '[PRE746]'
  id: totrans-3043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: '*inherited from the* [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    的 [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_ "sqlalchemy.sql.expression.ColumnOperators.all_")
    *方法。'
- en: Produce an [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    子句。
- en: See the documentation for [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    for examples.
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    的文档以获取示例。
- en: Note
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-3048
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法与此方法的**传统**版本，即特定于[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的 [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，其使用不同的调用风格。
- en: '[PRE747]'
  id: totrans-3049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: '[PRE748]'
  id: totrans-3050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_key_label`](#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-3051
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版起弃用：[`ColumnElement.anon_key_label`](#sqlalchemy.sql.expression.ColumnElement.anon_key_label
    "sqlalchemy.sql.expression.ColumnElement.anon_key_label") 属性现在是私有的，公共访问器已被弃用。
- en: '[PRE749]'
  id: totrans-3052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: 'Deprecated since version 1.4: The [`ColumnElement.anon_label`](#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") attribute is now private,
    and the public accessor is deprecated.'
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版起弃用：[`ColumnElement.anon_label`](#sqlalchemy.sql.expression.ColumnElement.anon_label
    "sqlalchemy.sql.expression.ColumnElement.anon_label") 属性现在是私有的，公共访问器已被弃用。
- en: '[PRE750]'
  id: totrans-3054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: '*inherited from the* [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    子句。
- en: See the documentation for [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    for examples.
  id: totrans-3057
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    的文档以获取示例。
- en: Note
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要将新版 [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法与这个方法的 **旧版**，即 [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法混淆，后者是专门针对 [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的，并且使用了不同的调用样式。
- en: '[PRE751]'
  id: totrans-3060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: '*inherited from the* [`ColumnOperators.asc()`](#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3061
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    子句。
- en: '[PRE752]'
  id: totrans-3063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: '[PRE753]'
  id: totrans-3064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: '*inherited from the* [`ColumnOperators.between()`](#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    子句，给定下限和上限范围。
- en: '[PRE754]'
  id: totrans-3067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3068
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
  zh: 生成按位与操作，通常通过 `&` 运算符进行。
- en: New in version 2.0.2.
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2 版中新增。
- en: See also
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE755]'
  id: totrans-3073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位左移操作，通常通过`<<`运算符。
- en: New in version 2.0.2.
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.2中新增。
- en: See also
  id: totrans-3077
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE756]'
  id: totrans-3079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-3081
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位非操作，通常通过`~`运算符。
- en: New in version 2.0.2.
  id: totrans-3082
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.2中新增。
- en: See also
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE757]'
  id: totrans-3085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-3087
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位或操作，通常通过`|`运算符。
- en: New in version 2.0.2.
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.2中新增。
- en: See also
  id: totrans-3089
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE758]'
  id: totrans-3091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位右移操作，通常通过`>>`运算符。
- en: New in version 2.0.2.
  id: totrans-3094
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.2中新增。
- en: See also
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE759]'
  id: totrans-3097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3098
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位异或操作，通常通过`^`运算符，或者对于PostgreSQL使用`#`。
- en: New in version 2.0.2.
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.2中新增。
- en: See also
  id: totrans-3101
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3102
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](operators.html#operators-bitwise)'
- en: '[PRE760]'
  id: totrans-3103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE760]'
- en: '*inherited from the* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-3105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    is that when using column constructs, the “boolean” nature of the returned expression
    will be present for [**PEP 484**](https://peps.python.org/pep-0484/) purposes.
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是调用 [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    并传递 [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。 使用 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，当使用列构造时，返回的表达式的“布尔”性质将出现在[**PEP
    484**](https://peps.python.org/pep-0484/)的目的。
- en: See also
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE761]'
  id: totrans-3109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE761]'
- en: Produce a type cast, i.e. `CAST(<expression> AS <type>)`.
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: 生成类型转换，即 `CAST(<expression> AS <type>)`。
- en: This is a shortcut to the [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function.
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对 [`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    函数的快捷方式。
- en: See also
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据类型转换和强制类型转换](../tutorial/data_select.html#tutorial-casts)'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
- en: '[PRE762]'
  id: totrans-3116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE762]'
- en: '*inherited from the* [`ColumnOperators.collate()`](#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  id: totrans-3118
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    子句，给定排序规则字符串。
- en: See also
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE763]'
  id: totrans-3121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE763]'
- en: '[PRE764]'
  id: totrans-3122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE764]'
- en: '*inherited from the* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.compare()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compare
    "sqlalchemy.sql.expression.ClauseElement.compare") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Compare this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to the given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
  zh: 比较此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 与给定的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。
- en: Subclasses should override the default behavior, which is a straight identity
    comparison.
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应该重写默认行为，即简单的标识比较。
- en: '**kw are arguments consumed by subclass `compare()` methods and may be used
    to modify the criteria for comparison (see [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")).'
  id: totrans-3126
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 是子类 `compare()` 方法消耗的参数，可以用来修改比较的条件（参见 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）。'
- en: '[PRE765]'
  id: totrans-3127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE765]'
- en: '*inherited from the* `CompilerElement.compile()` *method of* `CompilerElement`'
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `CompilerElement.compile()` *方法的* `CompilerElement`'
- en: Compile this SQL expression.
  id: totrans-3129
  prefs: []
  type: TYPE_NORMAL
  zh: 编译此 SQL 表达式。
- en: The return value is a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. Calling `str()` or `unicode()` on the returned
    value will yield a string representation of the result. The [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object also can return a dictionary of bind parameter
    names and values using the `params` accessor.
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。调用`str()`或`unicode()`返回的值将得到结果的字符串表示。[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象还可以使用`params`访问器返回绑定参数名称和值的字典。
- en: 'Parameters:'
  id: totrans-3131
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – An [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which can provide a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in order to generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. If the `bind` and `dialect` parameters are
    both omitted, a default SQL compiler is used.'
  id: totrans-3132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，它可以提供一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。如果`bind`和`dialect`参数都被省略，则使用默认的SQL编译器。'
- en: '`column_keys` – Used for INSERT and UPDATE statements, a list of column names
    which should be present in the VALUES clause of the compiled statement. If `None`,
    all columns from the target table object are rendered.'
  id: totrans-3133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 用于INSERT和UPDATE语句，应该出现在编译语句的VALUES子句中的列名列表。如果是`None`，则渲染目标表对象的所有列。'
- en: '`dialect` – A [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    instance which can generate a [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object. This argument takes precedence over the
    `bind` argument.'
  id: totrans-3134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")实例，它可以生成一个[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")对象。此参数优先于`bind`参数。'
- en: '`compile_kwargs` –'
  id: totrans-3135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` –'
- en: 'optional dictionary of additional parameters that will be passed through to
    the compiler within all “visit” methods. This allows any custom flag to be passed
    through to a custom compilation construct, for example. It is also used for the
    case of passing the `literal_binds` flag through:'
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的额外参数字典，将在所有“visit”方法中传递给编译器。这允许将任何自定义标志传递给自定义编译构造，例如。它还用于传递`literal_binds`标志的情况：
- en: '[PRE766]'
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE766]'
- en: See also
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将SQL表达式渲染为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '[PRE767]'
  id: totrans-3140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE767]'
- en: '*inherited from the* [`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-3143
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a || b`，或者在MySQL上使用`concat()`运算符。
- en: '[PRE768]'
  id: totrans-3144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE768]'
- en: '*inherited from the* [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3145
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘contains’运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-3147
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的中间匹配：
- en: '[PRE769]'
  id: totrans-3148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE769]'
- en: 'E.g.:'
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE770]'
  id: totrans-3150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE770]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符。或者，[`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains")参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常是一个普通字符串值，但也可以是任意的SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会被转义，除非设置了[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志为True。'
- en: '`autoescape` –'
  id: totrans-3154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE771]'
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE771]'
- en: 'Will render as:'
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE772]'
  id: totrans-3159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE772]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中参数的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来将该字符作为转义字符。然后可以将该字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE773]'
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE773]'
- en: 'Will render as:'
  id: totrans-3165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE774]'
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE774]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-3167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE775]'
  id: totrans-3168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE775]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3171
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE776]'
  id: totrans-3174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE776]'
- en: '*inherited from the* [`ColumnOperators.desc()`](#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
  zh: 产生针对父对象的 [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    子句。
- en: '[PRE777]'
  id: totrans-3177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: '*inherited from the* `ClauseElement.description` *attribute of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") *的* `ClauseElement.description` *属性*'
- en: '[PRE778]'
  id: totrans-3179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* [`ColumnOperators.distinct()`](#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法*'
- en: Produce a [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    clause against the parent object.
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    子句。
- en: '[PRE779]'
  id: totrans-3182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE779]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3183
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the ‘endswith’ operator.
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，测试是否匹配字符串值的结尾：
- en: '[PRE780]'
  id: totrans-3186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE780]'
- en: 'E.g.:'
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE781]'
  id: totrans-3188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE781]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3189
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了`LIKE`，所以存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自己而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-3191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` - 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。除非设置了[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志为True，否则LIKE通配符字符`%`和`_`默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-3192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` -'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE782]'
  id: totrans-3195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE782]'
- en: 'Will render as:'
  id: totrans-3196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE783]'
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE783]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`：param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` -'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将以`ESCAPE`关键字呈现，以建立该字符作为转义字符。然后可以将该字符放置在`%`和`_`之前，以使它们能够作为它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE784]'
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE784]'
- en: 'Will render as:'
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE785]'
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE785]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE786]'
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE786]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此之上，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE787]'
  id: totrans-3212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE787]'
- en: '*inherited from the* `ClauseElement.entity_namespace` *attribute of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") *的* `ClauseElement.entity_namespace`
    *属性'
- en: '[PRE788]'
  id: totrans-3214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE788]'
- en: Return a column expression.
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个列表达式。
- en: Part of the inspection interface; returns self.
  id: totrans-3216
  prefs: []
  type: TYPE_NORMAL
  zh: 检查接口的一部分；返回自身。
- en: '[PRE789]'
  id: totrans-3217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE789]'
- en: '[PRE790]'
  id: totrans-3218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE790]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-3219
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`HasTraverseInternals`的直接子`HasTraverseInternals`元素。
- en: This is used for visit traversal.
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw可能包含更改返回的集合的标志，例如返回子项的子集以减少更大的遍历，或者返回来自不同上下文的子项（例如模式级集合而不是子句级集合）。'
- en: '[PRE791]'
  id: totrans-3223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE791]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* [`ColumnOperators.icontains()`](#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators") *方法'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-3225
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`操作符，例如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的中间进行不区分大小写匹配：
- en: '[PRE792]'
  id: totrans-3227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE792]'
- en: 'E.g.:'
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE793]'
  id: totrans-3229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE793]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以设置[`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志为`True`，以对字符串值中这些字符的出现应用转义，使它们作为自身而不是通配符字符匹配。或者，[`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-3232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个普通的字符串值，但也可以是任意的 SQL 表达式。默认情况下，LIKE 通配符字符 `%` 和 `_`
    不会被转义，除非设置了 [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志为 True。'
- en: '`autoescape` –'
  id: totrans-3233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值内的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，如下所示：
- en: '[PRE794]'
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE794]'
- en: 'Will render as:'
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE795]'
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE795]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值 `:param` 为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将以 `ESCAPE` 关键字进行渲染，以将该字符建立为转义字符。然后，可以将此字符放置在 `%` 和 `_` 的前面，以使它们作为它们自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，如下所示：
- en: '[PRE796]'
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE796]'
- en: 'Will render as:'
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE797]'
  id: totrans-3245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE797]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数还可以与 [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 结合使用：
- en: '[PRE798]'
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE798]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE799]'
  id: totrans-3251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE799]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3252
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")
    *的* [`ColumnOperators.iendswith()`](#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法*'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-3253
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `iendswith` 运算符，例如 [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对字符串值末尾的不区分大小写匹配的 LIKE 表达式：
- en: '[PRE800]'
  id: totrans-3255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE800]'
- en: 'E.g.:'
  id: totrans-3256
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE801]'
  id: totrans-3257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE801]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3258
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用了 `LIKE`，存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 标志设置为 `True`，以对字符串值内这些字符的出现应用转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时可以派上用场。
- en: 'Parameters:'
  id: totrans-3259
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-3260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通字符串值，但也可以是任意SQL表达式。默认情况下，LIKE通配符`%`和`_`不会被转义，除非设置了[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-3261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE802]'
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE802]'
- en: 'Will render as:'
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE803]'
  id: totrans-3266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE803]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为`:param`，为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来确定该字符作为转义字符。然后可以将此字符放在`%`和`_`之前，以使它们可以作为它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE804]'
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE804]'
- en: 'Will render as:'
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE805]'
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE805]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE806]'
  id: totrans-3275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE806]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3277
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE807]'
  id: totrans-3279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE807]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3280
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-3281
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如，不区分大小写的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-3282
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成一个形式为：
- en: '[PRE808]'
  id: totrans-3283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE808]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-3284
  prefs: []
  type: TYPE_NORMAL
  zh: 或在支持ILIKE运算符的后端上：
- en: '[PRE809]'
  id: totrans-3285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE809]'
- en: 'E.g.:'
  id: totrans-3286
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE810]'
  id: totrans-3287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE810]'
- en: 'Parameters:'
  id: totrans-3288
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-3289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-3290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE811]'
  id: totrans-3292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE811]'
- en: See also
  id: totrans-3293
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE812]'
  id: totrans-3295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE812]'
- en: '*inherited from the* [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数`other`可以是：
- en: 'A list of literal values, e.g.:'
  id: totrans-3300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文字值列表，例如：
- en: '[PRE813]'
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE813]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表将转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE814]'
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE814]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-3304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的[`tuple_()`](#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")的元组列表：
- en: '[PRE815]'
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE815]'
- en: 'An empty list, e.g.:'
  id: totrans-3306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE816]'
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE816]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-3308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，该表达式渲染为一个“空集合”表达式。这些表达式针对各个后端进行了定制，并且通常试图将一个空的 SELECT 语句作为子查询。例如在 SQLite
    上，该表达式为：
- en: '[PRE817]'
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE817]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-3310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版本中的更改：空的 IN 表达式现在在所有情况下都使用执行时生成的 SELECT 子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-3311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用绑定参数，例如 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")，如果它包含了
    [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志：
- en: '[PRE818]'
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE818]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-3313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，该表达式渲染为一个特殊的非 SQL 占位符表达式，看起来像：
- en: '[PRE819]'
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE819]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，转换为前面示例中所示的可变数量的绑定参数形式。如果执行的语句为：
- en: '[PRE820]'
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE820]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE821]'
  id: totrans-3318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE821]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2 版本中的新功能：添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，则会渲染一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在 SQLite 上，这将是：
- en: '[PRE822]'
  id: totrans-3321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE822]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3 版本中的新功能：“扩展”绑定参数现在支持空列表
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-3323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个相关的标量选择：
- en: '[PRE823]'
  id: totrans-3324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE823]'
- en: 'In this calling form, [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 渲染如下：
- en: '[PRE824]'
  id: totrans-3326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE824]'
- en: 'Parameters:'
  id: totrans-3327
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-3328
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个字面值列表，一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者一个包含设置了 [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志的 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造。'
- en: '[PRE825]'
  id: totrans-3329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE825]'
- en: '*inherited from the* `HasCacheKey.inherit_cache` *attribute of* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey")'
  id: totrans-3330
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey") *的* `HasCacheKey.inherit_cache` *属性*'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应该使用其直接父类所使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为 `None`，表示构造尚未考虑是否适合参与缓存；这在功能上等同于将值设置为 `False`，只是还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于特定的类设置了此标志为 `True`，则表示该对象对应的 SQL 不会根据本类而不是其超类的属性而改变。
- en: See also
  id: totrans-3334
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-3335
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 为第三方或用户定义的SQL构造设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性的一般指南。'
- en: '[PRE826]'
  id: totrans-3336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE826]'
- en: '*inherited from the* [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3337
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-3338
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS`，这会解析为`NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-3340
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-3341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE827]'
  id: totrans-3342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE827]'
- en: '[PRE828]'
  id: totrans-3343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE828]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3344
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-3345
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台上，如SQLite，可能呈现“a IS NOT b”。
- en: '[PRE829]'
  id: totrans-3347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE829]'
- en: '[PRE830]'
  id: totrans-3348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE830]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-3350
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，这会解析为`NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()`运算符从先前版本的`isnot()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-3353
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-3354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE831]'
  id: totrans-3355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE831]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3356
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-3357
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，如SQLite，可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-3359
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not_distinct_from()`运算符从先前版本的`isnot_distinct_from()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE832]'
  id: totrans-3360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE832]'
- en: '[PRE833]'
  id: totrans-3361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE833]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，将自动生成`IS NOT`，这会解析为`NULL`。但是，如果在某些平台上与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3365
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的更改：`is_not()`操作符从先前的发布中的`isnot()`重新命名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE834]'
  id: totrans-3368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE834]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3369
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-3371
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS NOT DISTINCT FROM b”；在某些平台上（如 SQLite）可能渲染为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-3372
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的更改：`is_not_distinct_from()`操作符从先前的发布中的`isnot_distinct_from()`重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE835]'
  id: totrans-3373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE835]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-3375
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`istartswith`操作符，例如，不区分大小写版本的[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的起始部分进行不区分大小写的匹配：
- en: '[PRE836]'
  id: totrans-3377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE836]'
- en: 'E.g.:'
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE837]'
  id: totrans-3379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE837]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3380
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样运行。对于文字字符串值，可以将[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，以便它们匹配为它们自己而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3381
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-3382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通的字符串值，但也可以是任意的SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会被转义，除非设置了[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-3383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值内的所有`"%"`、`"_"`和转义字符本身的出现，假设比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比如这样一个表达式：
- en: '[PRE838]'
  id: totrans-3386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE838]'
- en: 'Will render as:'
  id: totrans-3387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE839]'
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE839]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，给定时将以`ESCAPE`关键字呈现，以建立该字符作为转义字符。然后可以在`%`和`_`之前放置此字符，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比如这样一个表达式：
- en: '[PRE840]'
  id: totrans-3393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE840]'
- en: 'Will render as:'
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE841]'
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE841]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-3396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")结合使用：
- en: '[PRE842]'
  id: totrans-3397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE842]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况中，给定的文字参数在传递给数据库之前将转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3399
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3400
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE843]'
  id: totrans-3401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE843]'
- en: The ‘key’ that in some circumstances refers to this object in a Python namespace.
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下引用此对象的‘键’在Python命名空间中。
- en: This typically refers to the “key” of the column as present in the `.c` collection
    of a selectable, e.g. `sometable.c["somekey"]` would return a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") with a `.key` of “somekey”.
  id: totrans-3403
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是指在可选择项的`.c`集合中出现的列的“键”，例如，`sometable.c["somekey"]`会返回一个具有“somekey”`.key`的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE844]'
  id: totrans-3404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE844]'
- en: Produce a column label, i.e. `<columnname> AS <name>`.
  id: totrans-3405
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列标签，即 `<columnname> AS <name>`。
- en: This is a shortcut to the [`label()`](#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")
    function.
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[`label()`](#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")函数的快捷方式。
- en: If ‘name’ is `None`, an anonymous label name will be generated.
  id: totrans-3407
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘name’是`None`，将生成一个匿名标签名称。
- en: '[PRE845]'
  id: totrans-3408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE845]'
- en: '*inherited from the* [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3409
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-3410
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`like`运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-3411
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE846]'
  id: totrans-3412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE846]'
- en: 'E.g.:'
  id: totrans-3413
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE847]'
  id: totrans-3414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE847]'
- en: 'Parameters:'
  id: totrans-3415
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-3416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-3417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE848]'
  id: totrans-3419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE848]'
- en: See also
  id: totrans-3420
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE849]'
  id: totrans-3422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE849]'
- en: '*inherited from the* [`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3423
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *的方法* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-3424
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘match’运算符。
- en: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")尝试解析为后端提供的类似MATCH的函数或运算符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-3426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染`x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-3427
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从版本2.0开始：现在对于PostgreSQL使用`plainto_tsquery()`而不是`to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染`MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的MySQL特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-3431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染`CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-3432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-3433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符发出为“MATCH”。例如，这与SQLite兼容。
- en: '[PRE850]'
  id: totrans-3434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE850]'
- en: '[PRE851]'
  id: totrans-3435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE851]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3436
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-3438
  prefs: []
  type: TYPE_NORMAL
  zh: 这等效于使用否定与[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`运算符从先前版本的`notilike()`重命名。以保持向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3441
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE852]'
  id: totrans-3442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE852]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3443
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-3444
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-3445
  prefs: []
  type: TYPE_NORMAL
  zh: 这等效于使用[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")进行否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-3446
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`为空序列的情况下，编译器会生成一个“空not in”表达式。这默认为表达式“1 = 1”，以在所有情况下产生true。[`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_in()`运算符从先前版本的`notin_()`重命名。以保持向后兼容性，先前的名称仍然可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-3448
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始变更：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")操作现在默认为一个空的IN序列生成一个“静态”表达式。
- en: See also
  id: totrans-3449
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE853]'
  id: totrans-3451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE853]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3452
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-3453
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")的否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3455
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始变更：`not_like()`运算符从先前的版本中的`notlike()`重命名。以前的名称仍然可用以实现向后兼容。
- en: See also
  id: totrans-3456
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3457
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE854]'
  id: totrans-3458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE854]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-3460
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-3461
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")的否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始变更：`not_ilike()`运算符从先前的版本中的`notilike()`重命名。以前的名称仍然可用以实现向后兼容。
- en: See also
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3464
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE855]'
  id: totrans-3465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE855]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3466
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-3467
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")的否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是一个空序列，编译器会生成一个“空不在其中”的表达式。这会默认为表达式“1 = 1”，在所有情况下都返回true。[`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")可以用来改变这种行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3470
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本开始：`not_in()` 操作符在之前的版本中从 `notin_()` 重命名。以前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-3471
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版本开始：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作现在默认生成空的 IN 序列的“静态”表达式。
- en: See also
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE856]'
  id: totrans-3474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE856]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3475
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-3476
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-3477
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在 [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 中使用否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3478
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本开始：`not_like()` 操作符在之前的版本中从 `notlike()` 重命名。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-3479
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE857]'
  id: totrans-3481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE857]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3482
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-3483
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3484
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本开始：`nulls_first()` 操作符在之前的版本中从 `nullsfirst()` 重命名。以前的名称仍然可用于向后兼容。
- en: '[PRE858]'
  id: totrans-3485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE858]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3486
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-3487
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3488
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本开始：`nulls_last()` 操作符在之前的版本中从 `nullslast()` 重命名。以前的名称仍然可用于向后兼容。
- en: '[PRE859]'
  id: totrans-3489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE859]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3490
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-3491
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3492
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的变更：`nulls_first()` 操作符从先前版本的 `nullsfirst()` 重命名。以前的名称仍可用于向后兼容。
- en: '[PRE860]'
  id: totrans-3493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE860]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3494
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-3495
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3496
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的变更：`nulls_last()` 操作符从先前版本的 `nullslast()` 重命名。以前的名称仍可用于向后兼容。
- en: '[PRE861]'
  id: totrans-3497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE861]'
- en: '*inherited from the* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3498
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-3499
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的操作符函数。
- en: 'e.g.:'
  id: totrans-3500
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE862]'
  id: totrans-3501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE862]'
- en: 'produces:'
  id: totrans-3502
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE863]'
  id: totrans-3503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE863]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-3504
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可用于显式地指定按位运算符。例如：
- en: '[PRE864]'
  id: totrans-3505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE864]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-3506
  prefs: []
  type: TYPE_NORMAL
  zh: 是 `somecolumn` 中值的按位 AND。
- en: 'Parameters:'
  id: totrans-3507
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 将作为中缀操作符输出在此元素和传递给生成函数的表达式之间的字符串。'
- en: '`precedence` –'
  id: totrans-3509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-3510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库在 SQL 表达式中预期应用于操作符的优先级。此整数值充当 SQL 编译器的提示，以便知道何时应在特定操作周围呈现显式括号。较低的数字将导致在应用于具有较高优先级的另一个操作符时，表达式被括起来。默认值
    `0` 低于所有操作符，除了逗号 (`,`) 和 `AS` 操作符。值为 100 将高于或等于所有操作符，而 -100 将低于或等于所有操作符。
- en: See also
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用 op() 生成自定义操作符，但我的括号没有正确显示](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL 编译器如何呈现括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-3513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 遗留; 如果为 True，则该操作符将被视为“比较”操作符，即评估为布尔值 true/false 的操作符，类似于 `==`、`>` 等。此标志提供了当在自定义连接条件中使用操作符时，ORM
    关系可以建立该操作符是比较操作符的信息。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-3515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `is_comparison` 参数被使用 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 方法所取代；这个更简洁的运算符会自动设置这个参数，但也提供了正确的
    [**PEP 484**](https://peps.python.org/pep-0484/) 类型支持，因为返回的对象将表达一个“布尔”数据类型，即 `BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-3516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或对象，将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定 [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 的运算符将解析为 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而那些不指定的则与左操作数具有相同的类型。'
- en: '`python_impl` –'
  id: totrans-3517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的 Python 函数，可以在与数据库服务器上运行此运算符时以相同方式评估两个 Python 值。用于在 Python 中进行 SQL 表达式评估函数，例如
    ORM 混合属性，以及 ORM “评估器”用于在多行更新或删除后匹配会话中的对象。
- en: 'e.g.:'
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE865]'
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE865]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也适用于非 SQL 左右对象：
- en: '[PRE866]'
  id: totrans-3522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE866]'
- en: New in version 2.0.
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: See also
  id: totrans-3524
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-3525
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-3526
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-3527
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE867]'
  id: totrans-3528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE867]'
- en: Operate on an argument.
  id: totrans-3529
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-3530
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下会引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-3531
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖此方法可以使常见行为应用于所有操作。例如，覆盖 [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左右两侧：
- en: '[PRE868]'
  id: totrans-3532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE868]'
- en: 'Parameters:'
  id: totrans-3533
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-3534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用对象。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-3535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘另一’侧。对于大多数操作来说，将是一个单一标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-3536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊运算符传递，比如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE869]'
  id: totrans-3537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE869]'
- en: '*inherited from the* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-3538
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") *的* [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params") *方法*'
- en: Return a copy with [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    elements replaced.
  id: totrans-3539
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有替换了 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    元素的副本。
- en: 'Returns a copy of this ClauseElement with [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") elements replaced with values taken from
    the given dictionary:'
  id: totrans-3540
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 ClauseElement 的副本，其中包含从给定字典中取出的 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 元素的值：
- en: '[PRE870]'
  id: totrans-3541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE870]'
- en: '[PRE871]'
  id: totrans-3542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE871]'
- en: '[PRE872]'
  id: totrans-3543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE872]'
- en: set of all columns we are proxying
  id: totrans-3544
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在代理的所有列的集合
- en: as of 2.0 this is explicitly deannotated columns. previously it was effectively
    deannotated columns but wasn’t enforced. annotated columns should basically not
    go into sets if at all possible because their hashing behavior is very non-performant.
  id: totrans-3545
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始，这是显式取消注释的列。以前它实际上是取消注释的列，但没有强制执行。如果可能的话，注释的列基本上不应该进入集合，因为它们的哈希行为非常低效。
- en: '[PRE873]'
  id: totrans-3546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE873]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3547
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-3548
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的 ‘regexp match’ 运算符。
- en: 'E.g.:'
  id: totrans-3549
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE874]'
  id: totrans-3550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE874]'
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-3551
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为由后端提供的类似 REGEXP
    的函数或运算符，但是具体的正则表达式语法和可用标志 **不是后端无关的**。'
- en: 'Examples include:'
  id: totrans-3552
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-3553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染为 `x ~ y` 或当否定时 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-3554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染为 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-3555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符运算符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-3556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-3557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将该运算符呈现为 “REGEXP” 或 “NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-3558
  prefs: []
  type: TYPE_NORMAL
  zh: 目前已为 Oracle、PostgreSQL、MySQL 和 MariaDB 实现了正则表达式支持。SQLite 有部分支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-3559
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-3560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-3561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅以普通的 Python 字符串形式传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，也可以将标志作为模式的一部分指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写的正则表达式匹配运算符 `~*`
    或 `!~*`。'
- en: New in version 1.4.
  id: totrans-3562
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4.48 更改为：2.0.18 请注意，由于实现错误，以前的 “flags” 参数接受了 SQL 表达式对象，例如列表达式，除了普通的 Python
    字符串。这种实现与缓存一起使用时无法正常工作，并已删除；应仅传递字符串以用于 “flags” 参数，因为这些标志被渲染为 SQL 表达式中的文字内联值。
- en: See also
  id: totrans-3564
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-3565
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE875]'
  id: totrans-3566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE875]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3567
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-3568
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了数据库特定的“正则替换”运算符。
- en: 'E.g.:'
  id: totrans-3569
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE876]'
  id: totrans-3570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE876]'
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-3571
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会发出函数 `REGEXP_REPLACE()`。但是，可用的特定于后端的正则表达式语法和标志是 **不可后端通用的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-3572
  prefs: []
  type: TYPE_NORMAL
  zh: 目前已为 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 实现了正则表达式替换支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-3573
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-3574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-3575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-3576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通的 Python 字符串传递。这些标志是后端特定的。一些后端，如 PostgreSQL
    和 MariaDB，也可以将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-3577
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-3578
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 改变为：2.0.18 请注意，由于实现错误，先前的 “flags” 参数接受了 SQL 表达式对象，如列表达式，而不仅仅是普通的
    Python 字符串。这种实现与缓存不兼容，已被删除；只应传递字符串以用于 “flags” 参数，因为这些标志将作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-3579
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-3580
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE877]'
  id: totrans-3581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE877]'
- en: Reverse operate on an argument.
  id: totrans-3582
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.sql.expression.ColumnElement.operate
    "sqlalchemy.sql.expression.ColumnElement.operate").
  id: totrans-3583
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 [`operate()`](#sqlalchemy.sql.expression.ColumnElement.operate "sqlalchemy.sql.expression.ColumnElement.operate")
    相同。
- en: '[PRE878]'
  id: totrans-3584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE878]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-3585
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-3586
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类覆盖以返回一个“分组”构造，即括号。特别是当“二元”表达式被放置到较大表达式中时，它们会提供一个围绕自己的分组，以及当 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句中时。 (请注意，子查询通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句必须具有名称)。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-3587
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") 的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了运算符优先级
    - 因此，例如，在表达式`x OR (y AND z)`中可能不需要括号 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-3588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.ColumnElement.self_group
    "sqlalchemy.sql.expression.ColumnElement.self_group")方法只返回自身。'
- en: '[PRE879]'
  id: totrans-3589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE879]'
- en: Return True if the given [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") has a common ancestor to this [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement").
  id: totrans-3590
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")具有与此[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")的共同祖先，则返回True。
- en: '[PRE880]'
  id: totrans-3591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE880]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3592
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-3593
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`操作符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-3594
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，用于测试字符串值的开头是否有匹配项：
- en: '[PRE881]'
  id: totrans-3595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE881]'
- en: 'E.g.:'
  id: totrans-3596
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE882]'
  id: totrans-3597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE882]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3598
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于文字字符串值，可以将[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为`True`，以将这些字符在字符串值中的出现情况应用转义，使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3599
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-3600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` - 要比较的表达式。这通常是一个纯字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非将[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-3601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` -'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现次数，假定比较值是一个文字字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-3603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，表达式如下：
- en: '[PRE883]'
  id: totrans-3604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE883]'
- en: 'Will render as:'
  id: totrans-3605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE884]'
  id: totrans-3606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE884]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来将该字符设为转义字符。然后可以将此字符放在`%`和`_`的前面，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE885]'
  id: totrans-3611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE885]'
- en: 'Will render as:'
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE886]'
  id: totrans-3613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE886]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-3614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")结合使用：
- en: '[PRE887]'
  id: totrans-3615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE887]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3617
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3618
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3620
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE888]'
  id: totrans-3621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE888]'
- en: '[PRE889]'
  id: totrans-3622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE889]'
- en: '[PRE890]'
  id: totrans-3623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE890]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3624
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-3625
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许将日期时间对象与左侧进行比较。
- en: '[PRE891]'
  id: totrans-3626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE891]'
- en: '[PRE892]'
  id: totrans-3627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE892]'
- en: '*inherited from the* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *method of* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ClauseElement.unique_params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.unique_params
    "sqlalchemy.sql.expression.ClauseElement.unique_params") *方法的* [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: Return a copy with [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    elements replaced.
  id: totrans-3629
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个副本，其中[`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")元素被替换。
- en: Same functionality as [`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params"), except adds unique=True to
    affected bind parameters so that multiple statements can be used.
  id: totrans-3630
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ClauseElement.params()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.params
    "sqlalchemy.sql.expression.ClauseElement.params")具有相同功能，只是将unique=True添加到受影响的绑定参数中，以便可以使用多个语句。
- en: '[PRE893]'
  id: totrans-3631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE893]'
- en: '[PRE894]'
  id: totrans-3632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE894]'
- en: General purpose “column expression” argument.
  id: totrans-3633
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的“列表达式”参数。
- en: New in version 2.0.13.
  id: totrans-3634
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.13中新增。
- en: This type is used for “column” kinds of expressions that typically represent
    a single SQL column expression, including [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"), as well as ORM-mapped attributes that
    will have a `__clause_element__()` method.
  id: totrans-3635
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于通常表示单个SQL列表达式的“列”类型表达式，包括[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")，以及将具有`__clause_element__()`方法的ORM映射属性。
- en: '[PRE895]'
  id: totrans-3636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE895]'
- en: Defines boolean, comparison, and other operators for [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") expressions.
  id: totrans-3637
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")表达式定义布尔、比较和其他运算符。
- en: 'By default, all methods call down to [`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate
    "sqlalchemy.sql.expression.ColumnOperators.operate") or [`reverse_operate()`](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate
    "sqlalchemy.sql.expression.ColumnOperators.reverse_operate"), passing in the appropriate
    operator function from the Python builtin `operator` module or a SQLAlchemy-specific
    operator function from `sqlalchemy.expression.operators`. For example the `__eq__`
    function:'
  id: totrans-3638
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有方法都会调用[`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate
    "sqlalchemy.sql.expression.ColumnOperators.operate") 或 [`reverse_operate()`](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate
    "sqlalchemy.sql.expression.ColumnOperators.reverse_operate")，传入适当的 Python 内置 `operator`
    模块中的操作函数或来自 `sqlalchemy.expression.operators` 的 SQLAlchemy 特定操作函数。例如 `__eq__`
    函数：
- en: '[PRE896]'
  id: totrans-3639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE896]'
- en: 'Where `operators.eq` is essentially:'
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
  zh: '`operators.eq` 本质上是：'
- en: '[PRE897]'
  id: totrans-3641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE897]'
- en: The core column expression unit [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") overrides [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") and others to return further [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") constructs, so that the `==` operation
    above is replaced by a clause construct.
  id: totrans-3642
  prefs: []
  type: TYPE_NORMAL
  zh: 核心列表达式单元[`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    重写 [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate "sqlalchemy.sql.expression.Operators.operate")
    等方法，以返回进一步的 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    构造，因此上述的 `==` 操作被替换为一个子句构造。
- en: See also
  id: totrans-3643
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-3644
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的运算符](custom_types.html#types-operators)'
- en: '[`TypeEngine.comparator_factory`](type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  id: totrans-3645
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
- en: '[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  id: totrans-3647
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PropComparator`](../orm/internals.html#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
- en: '**Members**'
  id: totrans-3648
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__add__()](#sqlalchemy.sql.expression.ColumnOperators.__add__), [__and__()](#sqlalchemy.sql.expression.ColumnOperators.__and__),
    [__eq__()](#sqlalchemy.sql.expression.ColumnOperators.__eq__), [__floordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__),
    [__ge__()](#sqlalchemy.sql.expression.ColumnOperators.__ge__), [__getitem__()](#sqlalchemy.sql.expression.ColumnOperators.__getitem__),
    [__gt__()](#sqlalchemy.sql.expression.ColumnOperators.__gt__), [__hash__()](#sqlalchemy.sql.expression.ColumnOperators.__hash__),
    [__invert__()](#sqlalchemy.sql.expression.ColumnOperators.__invert__), [__le__()](#sqlalchemy.sql.expression.ColumnOperators.__le__),
    [__lshift__()](#sqlalchemy.sql.expression.ColumnOperators.__lshift__), [__lt__()](#sqlalchemy.sql.expression.ColumnOperators.__lt__),
    [__mod__()](#sqlalchemy.sql.expression.ColumnOperators.__mod__), [__mul__()](#sqlalchemy.sql.expression.ColumnOperators.__mul__),
    [__ne__()](#sqlalchemy.sql.expression.ColumnOperators.__ne__), [__neg__()](#sqlalchemy.sql.expression.ColumnOperators.__neg__),
    [__or__()](#sqlalchemy.sql.expression.ColumnOperators.__or__), [__radd__()](#sqlalchemy.sql.expression.ColumnOperators.__radd__),
    [__rfloordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__), [__rmod__()](#sqlalchemy.sql.expression.ColumnOperators.__rmod__),
    [__rmul__()](#sqlalchemy.sql.expression.ColumnOperators.__rmul__), [__rshift__()](#sqlalchemy.sql.expression.ColumnOperators.__rshift__),
    [__rsub__()](#sqlalchemy.sql.expression.ColumnOperators.__rsub__), [__rtruediv__()](#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__),
    [__sa_operate__()](#sqlalchemy.sql.expression.ColumnOperators.__sa_operate__),
    [__sub__()](#sqlalchemy.sql.expression.ColumnOperators.__sub__), [__truediv__()](#sqlalchemy.sql.expression.ColumnOperators.__truediv__),
    [all_()](#sqlalchemy.sql.expression.ColumnOperators.all_), [any_()](#sqlalchemy.sql.expression.ColumnOperators.any_),
    [asc()](#sqlalchemy.sql.expression.ColumnOperators.asc), [between()](#sqlalchemy.sql.expression.ColumnOperators.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor), [bool_op()](#sqlalchemy.sql.expression.ColumnOperators.bool_op),
    [collate()](#sqlalchemy.sql.expression.ColumnOperators.collate), [concat()](#sqlalchemy.sql.expression.ColumnOperators.concat),
    [contains()](#sqlalchemy.sql.expression.ColumnOperators.contains), [desc()](#sqlalchemy.sql.expression.ColumnOperators.desc),
    [distinct()](#sqlalchemy.sql.expression.ColumnOperators.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnOperators.endswith),
    [icontains()](#sqlalchemy.sql.expression.ColumnOperators.icontains), [iendswith()](#sqlalchemy.sql.expression.ColumnOperators.iendswith),
    [ilike()](#sqlalchemy.sql.expression.ColumnOperators.ilike), [in_()](#sqlalchemy.sql.expression.ColumnOperators.in_),
    [is_()](#sqlalchemy.sql.expression.ColumnOperators.is_), [is_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from),
    [is_not()](#sqlalchemy.sql.expression.ColumnOperators.is_not), [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from),
    [isnot()](#sqlalchemy.sql.expression.ColumnOperators.isnot), [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnOperators.istartswith), [like()](#sqlalchemy.sql.expression.ColumnOperators.like),
    [match()](#sqlalchemy.sql.expression.ColumnOperators.match), [not_ilike()](#sqlalchemy.sql.expression.ColumnOperators.not_ilike),
    [not_in()](#sqlalchemy.sql.expression.ColumnOperators.not_in), [not_like()](#sqlalchemy.sql.expression.ColumnOperators.not_like),
    [notilike()](#sqlalchemy.sql.expression.ColumnOperators.notilike), [notin_()](#sqlalchemy.sql.expression.ColumnOperators.notin_),
    [notlike()](#sqlalchemy.sql.expression.ColumnOperators.notlike), [nulls_first()](#sqlalchemy.sql.expression.ColumnOperators.nulls_first),
    [nulls_last()](#sqlalchemy.sql.expression.ColumnOperators.nulls_last), [nullsfirst()](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst),
    [nullslast()](#sqlalchemy.sql.expression.ColumnOperators.nullslast), [op()](#sqlalchemy.sql.expression.ColumnOperators.op),
    [operate()](#sqlalchemy.sql.expression.ColumnOperators.operate), [regexp_match()](#sqlalchemy.sql.expression.ColumnOperators.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace),
    [reverse_operate()](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate),
    [startswith()](#sqlalchemy.sql.expression.ColumnOperators.startswith), [timetuple](#sqlalchemy.sql.expression.ColumnOperators.timetuple)'
  id: totrans-3649
  prefs: []
  type: TYPE_NORMAL
  zh: '[__add__()](#sqlalchemy.sql.expression.ColumnOperators.__add__), [__and__()](#sqlalchemy.sql.expression.ColumnOperators.__and__),
    [__eq__()](#sqlalchemy.sql.expression.ColumnOperators.__eq__), [__floordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__),
    [__ge__()](#sqlalchemy.sql.expression.ColumnOperators.__ge__), [__getitem__()](#sqlalchemy.sql.expression.ColumnOperators.__getitem__),
    [__gt__()](#sqlalchemy.sql.expression.ColumnOperators.__gt__), [__hash__()](#sqlalchemy.sql.expression.ColumnOperators.__hash__),
    [__invert__()](#sqlalchemy.sql.expression.ColumnOperators.__invert__), [__le__()](#sqlalchemy.sql.expression.ColumnOperators.__le__),
    [__lshift__()](#sqlalchemy.sql.expression.ColumnOperators.__lshift__), [__lt__()](#sqlalchemy.sql.expression.ColumnOperators.__lt__),
    [__mod__()](#sqlalchemy.sql.expression.ColumnOperators.__mod__), [__mul__()](#sqlalchemy.sql.expression.ColumnOperators.__mul__),
    [__ne__()](#sqlalchemy.sql.expression.ColumnOperators.__ne__), [__neg__()](#sqlalchemy.sql.expression.ColumnOperators.__neg__),
    [__or__()](#sqlalchemy.sql.expression.ColumnOperators.__or__), [__radd__()](#sqlalchemy.sql.expression.ColumnOperators.__radd__),
    [__rfloordiv__()](#sqlalchemy.sql.expression.ColumnOperators.__rfloordiv__), [__rmod__()](#sqlalchemy.sql.expression.ColumnOperators.__rmod__),
    [__rmul__()](#sqlalchemy.sql.expression.ColumnOperators.__rmul__), [__rshift__()](#sqlalchemy.sql.expression.ColumnOperators.__rshift__),
    [__rsub__()](#sqlalchemy.sql.expression.ColumnOperators.__rsub__), [__rtruediv__()](#sqlalchemy.sql.expression.ColumnOperators.__rtruediv__),
    [__sa_operate__()](#sqlalchemy.sql.expression.ColumnOperators.__sa_operate__),
    [__sub__()](#sqlalchemy.sql.expression.ColumnOperators.__sub__), [__truediv__()](#sqlalchemy.sql.expression.ColumnOperators.__truediv__),
    [all_()](#sqlalchemy.sql.expression.ColumnOperators.all_), [any_()](#sqlalchemy.sql.expression.ColumnOperators.any_),
    [asc()](#sqlalchemy.sql.expression.ColumnOperators.asc), [between()](#sqlalchemy.sql.expression.ColumnOperators.between),
    [bitwise_and()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_and), [bitwise_lshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_not), [bitwise_or()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor), [bool_op()](#sqlalchemy.sql.expression.ColumnOperators.bool_op),
    [collate()](#sqlalchemy.sql.expression.ColumnOperators.collate), [concat()](#sqlalchemy.sql.expression.ColumnOperators.concat),
    [contains()](#sqlalchemy.sql.expression.ColumnOperators.contains), [desc()](#sqlalchemy.sql.expression.ColumnOperators.desc),
    [distinct()](#sqlalchemy.sql.expression.ColumnOperators.distinct), [endswith()](#sqlalchemy.sql.expression.ColumnOperators.endswith),
    [icontains()](#sqlalchemy.sql.expression.ColumnOperators.icontains), [iendswith()](#sqlalchemy.sql.expression.ColumnOperators.iendswith),
    [ilike()](#sqlalchemy.sql.expression.ColumnOperators.ilike), [in_()](#sqlalchemy.sql.expression.ColumnOperators.in_),
    [is_()](#sqlalchemy.sql.expression.ColumnOperators.is_), [is_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from),
    [is_not()](#sqlalchemy.sql.expression.ColumnOperators.is_not), [is_not_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from),
    [isnot()](#sqlalchemy.sql.expression.ColumnOperators.isnot), [isnot_distinct_from()](#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from),
    [istartswith()](#sqlalchemy.sql.expression.ColumnOperators.istartswith), [like()](#sqlalchemy.sql.expression.ColumnOperators.like),
    [match()](#sqlalchemy.sql.expression.ColumnOperators.match), [not_ilike()](#sqlalchemy.sql.expression.ColumnOperators.not_ilike),
    [not_in()](#sqlalchemy.sql.expression.ColumnOperators.not_in), [not_like()](#sqlalchemy.sql.expression.ColumnOperators.not_like),
    [notilike()](#sqlalchemy.sql.expression.ColumnOperators.notilike), [notin_()](#sqlalchemy.sql.expression.ColumnOperators.notin_),
    [notlike()](#sqlalchemy.sql.expression.ColumnOperators.notlike), [nulls_first()](#sqlalchemy.sql.expression.ColumnOperators.nulls_first),
    [nulls_last()](#sqlalchemy.sql.expression.ColumnOperators.nulls_last), [nullsfirst()](#sqlalchemy.sql.expression.ColumnOperators.nullsfirst),
    [nullslast()](#sqlalchemy.sql.expression.ColumnOperators.nullslast), [op()](#sqlalchemy.sql.expression.ColumnOperators.op),
    [operate()](#sqlalchemy.sql.expression.ColumnOperators.operate), [regexp_match()](#sqlalchemy.sql.expression.ColumnOperators.regexp_match),
    [regexp_replace()](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace),
    [reverse_operate()](#sqlalchemy.sql.expression.ColumnOperators.reverse_operate),
    [startswith()](#sqlalchemy.sql.expression.ColumnOperators.startswith), [timetuple](#sqlalchemy.sql.expression.ColumnOperators.timetuple)'
- en: '**Class signature**'
  id: totrans-3650
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") ([`sqlalchemy.sql.expression.Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators"))
  id: totrans-3651
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")（[`sqlalchemy.sql.expression.Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")）
- en: '[PRE898]'
  id: totrans-3652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE898]'
- en: Implement the `+` operator.
  id: totrans-3653
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `+` 运算符。
- en: In a column context, produces the clause `a + b` if the parent object has non-string
    affinity. If the parent object has a string affinity, produces the concatenation
    operator, `a || b` - see [`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat").
  id: totrans-3654
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，如果父对象具有非字符串亲和性，则生成子句 `a + b`。如果父对象具有字符串亲和性，则生成连接运算符 `a || b` - 参见[`ColumnOperators.concat()`](#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat")。
- en: '[PRE899]'
  id: totrans-3655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE899]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__and__` *method
    of* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-3656
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__and__` *方法*'
- en: Implement the `&` operator.
  id: totrans-3657
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `&` 运算符。
- en: 'When used with SQL expressions, results in an AND operation, equivalent to
    [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"),
    that is:'
  id: totrans-3658
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQL 表达式一起使用时，导致一个 AND 操作，相当于[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")，即：
- en: '[PRE900]'
  id: totrans-3659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE900]'
- en: 'is equivalent to:'
  id: totrans-3660
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于：
- en: '[PRE901]'
  id: totrans-3661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE901]'
- en: 'Care should be taken when using `&` regarding operator precedence; the `&`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-3662
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `&` 时应注意运算符的优先级；`&` 运算符具有最高优先级。如果操作数包含进一步的子表达式，则应将其括在括号中：
- en: '[PRE902]'
  id: totrans-3663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE902]'
- en: '[PRE903]'
  id: totrans-3664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE903]'
- en: Implement the `==` operator.
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `==` 运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-3666
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a = b`。如果目标为 `None`，则生成 `a IS NULL`。
- en: '[PRE904]'
  id: totrans-3667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE904]'
- en: Implement the `//` operator.
  id: totrans-3668
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `//` 运算符。
- en: In a column context, produces the clause `a / b`, which is the same as “truediv”,
    but considers the result type to be integer.
  id: totrans-3669
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a / b`，这与“truediv”相同，但考虑结果类型为整数。
- en: New in version 2.0.
  id: totrans-3670
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE905]'
  id: totrans-3671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE905]'
- en: Implement the `>=` operator.
  id: totrans-3672
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `>=` 运算符。
- en: In a column context, produces the clause `a >= b`.
  id: totrans-3673
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a >= b`。
- en: '[PRE906]'
  id: totrans-3674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE906]'
- en: Implement the [] operator.
  id: totrans-3675
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 [] 运算符。
- en: This can be used by some database-specific types such as PostgreSQL ARRAY and
    HSTORE.
  id: totrans-3676
  prefs: []
  type: TYPE_NORMAL
  zh: 这可被一些特定于数据库的类型使用，例如 PostgreSQL ARRAY 和 HSTORE。
- en: '[PRE907]'
  id: totrans-3677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE907]'
- en: Implement the `>` operator.
  id: totrans-3678
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `>` 运算符。
- en: In a column context, produces the clause `a > b`.
  id: totrans-3679
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a > b`。
- en: '[PRE908]'
  id: totrans-3680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE908]'
- en: Return hash(self).
  id: totrans-3681
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 hash(self)。
- en: '[PRE909]'
  id: totrans-3682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE909]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__invert__` *method
    of* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-3683
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__invert__` *方法*'
- en: Implement the `~` operator.
  id: totrans-3684
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `~` 运算符。
- en: 'When used with SQL expressions, results in a NOT operation, equivalent to [`not_()`](#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_"), that is:'
  id: totrans-3685
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQL 表达式一起使用时，导致一个 NOT 操作，相当于[`not_()`](#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")，即：
- en: '[PRE910]'
  id: totrans-3686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE910]'
- en: 'is equivalent to:'
  id: totrans-3687
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于：
- en: '[PRE911]'
  id: totrans-3688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE911]'
- en: '[PRE912]'
  id: totrans-3689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE912]'
- en: Implement the `<=` operator.
  id: totrans-3690
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<=` 运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-3691
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a <= b`。
- en: '[PRE913]'
  id: totrans-3692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE913]'
- en: implement the << operator.
  id: totrans-3693
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 << 运算符。
- en: Not used by SQLAlchemy core, this is provided for custom operator systems which
    want to use << as an extension point.
  id: totrans-3694
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 核心不使用此功能，这是为希望使用 << 作为扩展点的自定义运算符系统提供的。
- en: '[PRE914]'
  id: totrans-3695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE914]'
- en: Implement the `<` operator.
  id: totrans-3696
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<` 运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-3697
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a < b`。
- en: '[PRE915]'
  id: totrans-3698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE915]'
- en: Implement the `%` operator.
  id: totrans-3699
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `%` 运算符。
- en: In a column context, produces the clause `a % b`.
  id: totrans-3700
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a % b`。
- en: '[PRE916]'
  id: totrans-3701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE916]'
- en: Implement the `*` operator.
  id: totrans-3702
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `*` 运算符。
- en: In a column context, produces the clause `a * b`.
  id: totrans-3703
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a * b`。
- en: '[PRE917]'
  id: totrans-3704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE917]'
- en: Implement the `!=` operator.
  id: totrans-3705
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `!=` 运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-3706
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a != b`。如果目标为 `None`，则生成 `a IS NOT NULL`。
- en: '[PRE918]'
  id: totrans-3707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE918]'
- en: Implement the `-` operator.
  id: totrans-3708
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `-` 运算符。
- en: In a column context, produces the clause `-a`.
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `-a`。
- en: '[PRE919]'
  id: totrans-3710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE919]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__or__` *method of*
    [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__or__` *方法*'
- en: Implement the `|` operator.
  id: totrans-3712
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`|`操作符。
- en: 'When used with SQL expressions, results in an OR operation, equivalent to [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_"), that is:'
  id: totrans-3713
  prefs: []
  type: TYPE_NORMAL
  zh: 与SQL表达式一起使用时，结果为OR操作，等同于[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")，即：
- en: '[PRE920]'
  id: totrans-3714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE920]'
- en: 'is equivalent to:'
  id: totrans-3715
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE921]'
  id: totrans-3716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE921]'
- en: 'Care should be taken when using `|` regarding operator precedence; the `|`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`|`时应注意运算符优先级；`|`运算符具有最高优先级。如果操作数包含进一步的子表达式，则应将其括在括号中：
- en: '[PRE922]'
  id: totrans-3718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE922]'
- en: '[PRE923]'
  id: totrans-3719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE923]'
- en: Implement the `+` operator in reverse.
  id: totrans-3720
  prefs: []
  type: TYPE_NORMAL
  zh: 反向实现`+`操作符。
- en: See [`ColumnOperators.__add__()`](#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__").
  id: totrans-3721
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`ColumnOperators.__add__()`](#sqlalchemy.sql.expression.ColumnOperators.__add__
    "sqlalchemy.sql.expression.ColumnOperators.__add__")。
- en: '[PRE924]'
  id: totrans-3722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE924]'
- en: Implement the `//` operator in reverse.
  id: totrans-3723
  prefs: []
  type: TYPE_NORMAL
  zh: 反向实现`//`操作符。
- en: See [`ColumnOperators.__floordiv__()`](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__").
  id: totrans-3724
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`ColumnOperators.__floordiv__()`](#sqlalchemy.sql.expression.ColumnOperators.__floordiv__
    "sqlalchemy.sql.expression.ColumnOperators.__floordiv__")。
- en: '[PRE925]'
  id: totrans-3725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE925]'
- en: Implement the `%` operator in reverse.
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
  zh: 反向实现`%`操作符。
- en: See [`ColumnOperators.__mod__()`](#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__").
  id: totrans-3727
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`ColumnOperators.__mod__()`](#sqlalchemy.sql.expression.ColumnOperators.__mod__
    "sqlalchemy.sql.expression.ColumnOperators.__mod__")。
- en: '[PRE926]'
  id: totrans-3728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE926]'
- en: Implement the `*` operator in reverse.
  id: totrans-3729
  prefs: []
  type: TYPE_NORMAL
  zh: 反向实现`*`操作符。
- en: See [`ColumnOperators.__mul__()`](#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__").
  id: totrans-3730
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`ColumnOperators.__mul__()`](#sqlalchemy.sql.expression.ColumnOperators.__mul__
    "sqlalchemy.sql.expression.ColumnOperators.__mul__")。
- en: '[PRE927]'
  id: totrans-3731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE927]'
- en: implement the >> operator.
  id: totrans-3732
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`>>`操作符。
- en: Not used by SQLAlchemy core, this is provided for custom operator systems which
    want to use >> as an extension point.
  id: totrans-3733
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy核心未使用此操作符，这是为想要使用`>>`作为扩展点的自定义操作符系统提供的。
- en: '[PRE928]'
  id: totrans-3734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE928]'
- en: Implement the `-` operator in reverse.
  id: totrans-3735
  prefs: []
  type: TYPE_NORMAL
  zh: 反向实现`-`操作符。
- en: See [`ColumnOperators.__sub__()`](#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__").
  id: totrans-3736
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`ColumnOperators.__sub__()`](#sqlalchemy.sql.expression.ColumnOperators.__sub__
    "sqlalchemy.sql.expression.ColumnOperators.__sub__")。
- en: '[PRE929]'
  id: totrans-3737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE929]'
- en: Implement the `/` operator in reverse.
  id: totrans-3738
  prefs: []
  type: TYPE_NORMAL
  zh: 反向实现`/`操作符。
- en: See [`ColumnOperators.__truediv__()`](#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__").
  id: totrans-3739
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`ColumnOperators.__truediv__()`](#sqlalchemy.sql.expression.ColumnOperators.__truediv__
    "sqlalchemy.sql.expression.ColumnOperators.__truediv__")。
- en: '[PRE930]'
  id: totrans-3740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE930]'
- en: '*inherited from the* `sqlalchemy.sql.expression.Operators.__sa_operate__` *method
    of* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")'
  id: totrans-3741
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](#sqlalchemy.sql.expression.Operators "sqlalchemy.sql.expression.Operators")
    *的* `sqlalchemy.sql.expression.Operators.__sa_operate__` *方法*'
- en: Operate on an argument.
  id: totrans-3742
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-3743
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-3744
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类中覆盖此方法可以使常见行为应用于所有操作。例如，覆盖[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左右两侧：
- en: '[PRE931]'
  id: totrans-3745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE931]'
- en: 'Parameters:'
  id: totrans-3746
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-3747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用对象。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-3748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘other’一侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-3749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能会被特殊操作符传递，如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE932]'
  id: totrans-3750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE932]'
- en: Implement the `-` operator.
  id: totrans-3751
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`-`操作符。
- en: In a column context, produces the clause `a - b`.
  id: totrans-3752
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a - b`。
- en: '[PRE933]'
  id: totrans-3753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE933]'
- en: Implement the `/` operator.
  id: totrans-3754
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`/`操作符。
- en: In a column context, produces the clause `a / b`, and considers the result type
    to be numeric.
  id: totrans-3755
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a / b`，并将结果类型视为数值型。
- en: 'Changed in version 2.0: The truediv operator against two integers is now considered
    to return a numeric value. Behavior on specific backends may vary.'
  id: totrans-3756
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：两个整数之间的truediv运算符现在被认为返回一个数值。特定后端的行为可能有所不同。
- en: '[PRE934]'
  id: totrans-3757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE934]'
- en: Produce an [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    clause against the parent object.
  id: totrans-3758
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象生成一个[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    for examples.
  id: totrans-3759
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`all_()`](#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档以获取示例。
- en: Note
  id: totrans-3760
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-3761
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.all_()`](#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与这个方法的**旧版**，即特定于[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")的[`Comparator.all()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，它使用不同的调用风格。
- en: '[PRE935]'
  id: totrans-3762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE935]'
- en: Produce an [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    clause against the parent object.
  id: totrans-3763
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象生成一个[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    for examples.
  id: totrans-3764
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`any_()`](#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")的文档以获取示例。
- en: Note
  id: totrans-3765
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-3766
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.any_()`](#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法与这个方法的**旧版**，即特定于[`ARRAY`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")的[`Comparator.any()`](type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法，它使用不同的调用风格。
- en: '[PRE936]'
  id: totrans-3767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE936]'
- en: Produce a [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-3768
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象生成一个[`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE937]'
  id: totrans-3769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE937]'
- en: Produce a [`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")
    clause against the parent object, given the lower and upper range.
  id: totrans-3770
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象生成一个[`between()`](#sqlalchemy.sql.expression.between "sqlalchemy.sql.expression.between")子句，给定下限和上限范围。
- en: '[PRE938]'
  id: totrans-3771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE938]'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-3772
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位与操作，通常通过`&`运算符。
- en: New in version 2.0.2.
  id: totrans-3773
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-3774
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3775
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE939]'
  id: totrans-3776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE939]'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-3777
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位左移操作，通常通过`<<`运算符。
- en: New in version 2.0.2.
  id: totrans-3778
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-3779
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3780
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE940]'
  id: totrans-3781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE940]'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-3782
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位非操作，通常通过`~`运算符。
- en: New in version 2.0.2.
  id: totrans-3783
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-3784
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3785
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE941]'
  id: totrans-3786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE941]'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-3787
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位或操作，通常通过`|`运算符。
- en: New in version 2.0.2.
  id: totrans-3788
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-3789
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3790
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE942]'
  id: totrans-3791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE942]'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-3792
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位右移操作，通常通过`>>`运算符。
- en: New in version 2.0.2.
  id: totrans-3793
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-3794
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3795
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE943]'
  id: totrans-3796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE943]'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-3797
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位异或操作，通常通过`^`运算符，或者对于PostgreSQL使用`#`。
- en: New in version 2.0.2.
  id: totrans-3798
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-3799
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](operators.html#operators-bitwise)'
  id: totrans-3800
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](operators.html#operators-bitwise)'
- en: '[PRE944]'
  id: totrans-3801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE944]'
- en: '*inherited from the* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3802
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-3803
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    is that when using column constructs, the “boolean” nature of the returned expression
    will be present for [**PEP 484**](https://peps.python.org/pep-0484/) purposes.
  id: totrans-3804
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是调用 [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    并传递 [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。使用 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回的表达式的“布尔”性质将用于
    [**PEP 484**](https://peps.python.org/pep-0484/)。
- en: See also
  id: totrans-3805
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-3806
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE945]'
  id: totrans-3807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE945]'
- en: Produce a [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    clause against the parent object, given the collation string.
  id: totrans-3808
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的排序字符串生成针对父对象的 [`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")
    子句。
- en: See also
  id: totrans-3809
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-3810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE946]'
  id: totrans-3811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE946]'
- en: Implement the ‘concat’ operator.
  id: totrans-3812
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-3813
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生子句 `a || b`，或在 MySQL 上使用 `concat()` 运算符。
- en: '[PRE947]'
  id: totrans-3814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE947]'
- en: Implement the ‘contains’ operator.
  id: totrans-3815
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘包含’运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-3816
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，测试字符串值的中间是否存在匹配项：
- en: '[PRE948]'
  id: totrans-3817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE948]'
- en: 'E.g.:'
  id: totrans-3818
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE949]'
  id: totrans-3819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE949]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3820
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志设置为 `True`，以对字符串值中这些字符的出现应用转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.contains.escape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-3821
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-3822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认不会被转义，除非将
    [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-3823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE950]'
  id: totrans-3826
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE950]'
- en: 'Will render as:'
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE951]'
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE951]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中 `:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给出一个字符时，将使用 `ESCAPE` 关键字将其渲染为转义字符。然后可以将此字符放在 `%` 和 `_` 的前面，以允许它们作为自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE952]'
  id: totrans-3833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE952]'
- en: 'Will render as:'
  id: totrans-3834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE953]'
  id: totrans-3835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE953]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-3836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与 [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 结合使用：
- en: '[PRE954]'
  id: totrans-3837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE954]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前被转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-3839
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3840
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3841
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3842
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE955]'
  id: totrans-3843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE955]'
- en: Produce a [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    clause against the parent object.
  id: totrans-3844
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")
    子句。
- en: '[PRE956]'
  id: totrans-3845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE956]'
- en: Produce a [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    clause against the parent object.
  id: totrans-3846
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct")
    子句。
- en: '[PRE957]'
  id: totrans-3847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE957]'
- en: Implement the ‘endswith’ operator.
  id: totrans-3848
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 ‘endswith’ 操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-3849
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于测试字符串值的结尾匹配：
- en: '[PRE958]'
  id: totrans-3850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE958]'
- en: 'E.g.:'
  id: totrans-3851
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE959]'
  id: totrans-3852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE959]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3853
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了 `LIKE`，所以在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也会像通配符一样运作。对于字面字符串值，可以将
    [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志设置为 `True`，以将这些字符在字符串值中的出现转义，使它们匹配为它们自身而不是通配符字符。另外，参数
    [`ColumnOperators.endswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 可以将给定字符确定为转义字符，这在目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3854
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-3855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。这通常是一个简单的字符串值，但也可以是任意的 SQL 表达式。除非将 [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志设置为 True，否则 LIKE 通配符字符
    `%` 和 `_` 默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-3856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE960]'
  id: totrans-3859
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE960]'
- en: 'Will render as:'
  id: totrans-3860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE961]'
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE961]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用参数的值`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给出时，将使用`ESCAPE`关键字将该字符确定为转义字符。然后，该字符可以放置在`%`和`_`之前，使它们能够按其自身方式而不是通配符字符进行操作。
- en: 'An expression such as:'
  id: totrans-3865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE962]'
  id: totrans-3866
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE962]'
- en: 'Will render as:'
  id: totrans-3867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE963]'
  id: totrans-3868
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE963]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-3869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与[`ColumnOperators.endswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE964]'
  id: totrans-3870
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE964]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况中，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3872
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3873
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3874
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3875
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE965]'
  id: totrans-3876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE965]'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-3877
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如，[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-3878
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，用于对字符串值的中间进行不区分大小写的匹配：
- en: '[PRE966]'
  id: totrans-3879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE966]'
- en: 'E.g.:'
  id: totrans-3880
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE967]'
  id: totrans-3881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE967]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3882
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于文字字符串值，可以将[`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为`True`，以对字符串值内部的这些字符的出现应用转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.icontains.escape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将确定给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3883
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-3884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常这是一个简单的字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`"%"`和`"_"`不会被转义，除非将[`ColumnOperators.icontains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-3885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假设比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE968]'
  id: totrans-3888
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE968]'
- en: 'Will render as:'
  id: totrans-3889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE969]'
  id: totrans-3890
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE969]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值为`:param`的`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将与`ESCAPE`关键字一起渲染，将该字符建立为转义字符。然后可以将此字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE970]'
  id: totrans-3895
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE970]'
- en: 'Will render as:'
  id: totrans-3896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE971]'
  id: totrans-3897
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE971]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-3898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数还可以与[`ColumnOperators.contains.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE972]'
  id: totrans-3899
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE972]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3901
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3902
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE973]'
  id: totrans-3903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE973]'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-3904
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`运算符，例如[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-3905
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值末尾的不区分大小写匹配：
- en: '[PRE974]'
  id: totrans-3906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE974]'
- en: 'E.g.:'
  id: totrans-3907
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE975]'
  id: totrans-3908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE975]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3909
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith)标志设置为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith)参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3910
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-3911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意SQL表达式。除非将[`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith)标志设置为True，否则默认情况下不会转义LIKE通配符字符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-3912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值为字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE976]'
  id: totrans-3915
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE976]'
- en: 'Will render as:'
  id: totrans-3916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE977]'
  id: totrans-3917
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE977]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值为`:param`的`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将与`ESCAPE`关键字一起渲染，将该字符建立为转义字符。然后可以将此字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE978]'
  id: totrans-3922
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE978]'
- en: 'Will render as:'
  id: totrans-3923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE979]'
  id: totrans-3924
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE979]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-3925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.iendswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape") 结合使用：
- en: '[PRE980]'
  id: totrans-3926
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE980]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的情况下，给定的字面参数在传递到数据库之前将被转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-3928
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3929
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE981]'
  id: totrans-3930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE981]'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-3931
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `ilike` 运算符，例如不区分大小写的 LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-3932
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成一个表达式，形式为：
- en: '[PRE982]'
  id: totrans-3933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE982]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-3934
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持 ILIKE 运算符的后端上：
- en: '[PRE983]'
  id: totrans-3935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE983]'
- en: 'E.g.:'
  id: totrans-3936
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE984]'
  id: totrans-3937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE984]'
- en: 'Parameters:'
  id: totrans-3938
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-3939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-3940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-3941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现 `ESCAPE` 关键字，例如：
- en: '[PRE985]'
  id: totrans-3942
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE985]'
- en: See also
  id: totrans-3943
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3944
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE986]'
  id: totrans-3945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE986]'
- en: Implement the `in` operator.
  id: totrans-3946
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `in` 运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-3947
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-3948
  prefs: []
  type: TYPE_NORMAL
  zh: 给定参数 `other` 可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-3949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字面值列表，例如：
- en: '[PRE987]'
  id: totrans-3950
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE987]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-3951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，项目列表将转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE988]'
  id: totrans-3952
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE988]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-3953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的 [`tuple_()`](#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")，则可以提供元组列表：
- en: '[PRE989]'
  id: totrans-3954
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE989]'
- en: 'An empty list, e.g.:'
  id: totrans-3955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空列表，例如：
- en: '[PRE990]'
  id: totrans-3956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE990]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-3957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，表达式呈现为空集合表达式。这些表达式针对各个后端进行了定制，并且通常尝试将一个空的 SELECT 语句作为子查询。例如在 SQLite
    上，表达式为：
- en: '[PRE991]'
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE991]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-3959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版本中的变更：在所有情况下，空 IN 表达式现在都使用执行时生成的 SELECT 子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-3960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用绑定参数，例如 [`bindparam()`](#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")，如果包含
    [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志：
- en: '[PRE992]'
  id: totrans-3961
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE992]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-3962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，表达式呈现为一个特殊的非SQL占位符表达式，如下所示：
- en: '[PRE993]'
  id: totrans-3963
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE993]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-3964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时拦截，以转换为前面所示的变量数目的绑定参数形式。如果语句执行如下所示：
- en: '[PRE994]'
  id: totrans-3965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE994]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-3966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE995]'
  id: totrans-3967
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE995]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-3968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2 版本中新增：“expanding” 绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-3969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递空列表，则呈现特殊的“空列表”表达式，该表达式针对使用的数据库特定。在 SQLite 上，这将是：
- en: '[PRE996]'
  id: totrans-3970
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE996]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-3971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3 版本中新增：“expanding” 绑定参数现在支持空列表
- en: 'a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-3972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个关联的标量选择：
- en: '[PRE997]'
  id: totrans-3973
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE997]'
- en: 'In this calling form, [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-3974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的呈现如下：
- en: '[PRE998]'
  id: totrans-3975
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE998]'
- en: 'Parameters:'
  id: totrans-3976
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-3977
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个字面量列表，一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或一个包含设置为True的[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造，其中包括[`bindparam.expanding`](#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志。'
- en: '[PRE999]'
  id: totrans-3978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE999]'
- en: Implement the `IS` operator.
  id: totrans-3979
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-3980
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS`，这会解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-3981
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-3982
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE1000]'
  id: totrans-3983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1000]'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-3984
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-3985
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上呈现“a IS DISTINCT FROM b”; 在某些平台上，如SQLite，可能呈现“a IS NOT b”。
- en: '[PRE1001]'
  id: totrans-3986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1001]'
- en: Implement the `IS NOT` operator.
  id: totrans-3987
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-3988
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，这会解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3989
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not()`运算符从先前版本的`isnot()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-3990
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-3991
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE1002]'
  id: totrans-3992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1002]'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-3993
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-3994
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上呈现“a IS NOT DISTINCT FROM b”; 在某些平台上���如SQLite，可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-3995
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not_distinct_from()`运算符从先前版本的`isnot_distinct_from()`重命名。以前的名称仍可用于向后兼容。
- en: '[PRE1003]'
  id: totrans-3996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1003]'
- en: Implement the `IS NOT` operator.
  id: totrans-3997
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-3998
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，这会解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3999
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not()`运算符从先前版本的`isnot()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-4000
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-4001
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](#sqlalchemy.sql.expression.ColumnOperators.is_ "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE1004]'
  id: totrans-4002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1004]'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-4003
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-4004
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上呈现“a IS NOT DISTINCT FROM b”; 在某些平台上，如SQLite，可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-4005
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not_distinct_from()`运算符从先前版本的`isnot_distinct_from()`重命名。以前的名称仍可用于向后兼容。
- en: '[PRE1005]'
  id: totrans-4006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1005]'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-4007
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`istartswith`运算符，例如[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-4008
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的开头进行不区分大小写匹配：
- en: '[PRE1006]'
  id: totrans-4009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1006]'
- en: 'E.g.:'
  id: totrans-4010
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1007]'
  id: totrans-4011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1007]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-4012
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样行为。对于字面字符串值，可以设置
    [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志为 `True`，以对字符串值中这些字符的出现应用转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-4013
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-4014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会转义，除非
    [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-4015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-4016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE1008]'
  id: totrans-4018
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1008]'
- en: 'Will render as:'
  id: totrans-4019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE1009]'
  id: totrans-4020
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1009]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-4021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为 `:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-4022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字将其渲染为转义字符。然后，可以将此字符放在 `%` 和 `_` 的前面，以使它们像自己一样而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-4024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE1010]'
  id: totrans-4025
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1010]'
- en: 'Will render as:'
  id: totrans-4026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE1011]'
  id: totrans-4027
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1011]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-4028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与 [`ColumnOperators.istartswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 结合使用：
- en: '[PRE1012]'
  id: totrans-4029
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1012]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-4030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-4031
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-4032
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE1013]'
  id: totrans-4033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1013]'
- en: Implement the `like` operator.
  id: totrans-4034
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-4035
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE1014]'
  id: totrans-4036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1014]'
- en: 'E.g.:'
  id: totrans-4037
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1015]'
  id: totrans-4038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1015]'
- en: 'Parameters:'
  id: totrans-4039
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-4040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-4041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-4042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE1016]'
  id: totrans-4043
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1016]'
- en: See also
  id: totrans-4044
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-4045
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE1017]'
  id: totrans-4046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1017]'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-4047
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了数据库特定的 ‘match’ 运算符。
- en: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-4048
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的类似MATCH的函数或运算符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-4049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-4050
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自版本2.0更改：现在对于PostgreSQL，使用 `plainto_tsquery()` 而不是 `to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-4051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-4052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-4053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的MySQL特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-4054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-4055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-4056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符发出为“MATCH”。例如，��与SQLite兼容。
- en: '[PRE1018]'
  id: totrans-4057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1018]'
- en: implement the `NOT ILIKE` operator.
  id: totrans-4058
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-4059
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 的否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4060
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4更改：`not_ilike()` 运算符从先前版本的 `notilike()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-4061
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-4062
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE1019]'
  id: totrans-4063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1019]'
- en: implement the `NOT IN` operator.
  id: totrans-4064
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-4065
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-4066
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是一个空序列，编译器将生成一个“空not in”表达式。这默认为表达式“1 = 1”，在所有情况下产生true。可以使用 [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4067
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4更改：`not_in()` 运算符从先前版本的 `notin_()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-4068
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.2更改：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认生成一个空IN序列的“静态”表达式。
- en: See also
  id: totrans-4069
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-4070
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE1020]'
  id: totrans-4071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1020]'
- en: implement the `NOT LIKE` operator.
  id: totrans-4072
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-4073
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4074
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起：`not_like()` 操作符从先前版本的 `notlike()` 重命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-4075
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-4076
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE1021]'
  id: totrans-4077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1021]'
- en: implement the `NOT ILIKE` operator.
  id: totrans-4078
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-4079
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 的否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4080
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起：`not_ilike()` 操作符从先前版本的 `notilike()` 重命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-4081
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-4082
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE1022]'
  id: totrans-4083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1022]'
- en: implement the `NOT IN` operator.
  id: totrans-4084
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-4085
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-4086
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，则编译器会生成一个“空 not in” 表达式。这默认为表达式“1 = 1”，以在所有情况下生成 true。可以使用
    [`create_engine.empty_in_strategy`](engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4087
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起：`not_in()` 操作符从先前版本的 `notin_()` 重命名。先前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-4088
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.2 起：[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认情况下为一个空 IN 序列生成一个“静态”表达式。
- en: See also
  id: totrans-4089
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-4090
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](#sqlalchemy.sql.expression.ColumnOperators.in_ "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE1023]'
  id: totrans-4091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1023]'
- en: implement the `NOT LIKE` operator.
  id: totrans-4092
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-4093
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4094
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起：`not_like()` 操作符从先前版本的 `notlike()` 重命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-4095
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-4096
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE1024]'
  id: totrans-4097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1024]'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-4098
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    从句对父对象。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4099
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起：`nulls_first()` 操作符从先前版本的 `nullsfirst()` 重命名。先前的名称仍然可用于向后兼容。
- en: '[PRE1025]'
  id: totrans-4100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1025]'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-4101
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4102
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()`运算符从之前的版本中的`nullslast()`重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE1026]'
  id: totrans-4103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1026]'
- en: Produce a [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    clause against the parent object.
  id: totrans-4104
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4105
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_first()`运算符从之前的版本中的`nullsfirst()`重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE1027]'
  id: totrans-4106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1027]'
- en: Produce a [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")
    clause against the parent object.
  id: totrans-4107
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-4108
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`nulls_last()`运算符从之前的版本中的`nullslast()`重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE1028]'
  id: totrans-4109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1028]'
- en: '*inherited from the* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-4110
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")
    *方法继承*'
- en: Produce a generic operator function.
  id: totrans-4111
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-4112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1029]'
  id: totrans-4113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1029]'
- en: 'produces:'
  id: totrans-4114
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE1030]'
  id: totrans-4115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1030]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-4116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来使位运算符明确。例如：
- en: '[PRE1031]'
  id: totrans-4117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1031]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-4118
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位AND。
- en: 'Parameters:'
  id: totrans-4119
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-4120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将作为中缀运算符输出在此元素和传递给生成函数的表达式之间。'
- en: '`precedence` –'
  id: totrans-4121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-4122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预期在SQL表达式中应用于运算符的优先级。这个整数值充当SQL编译器的提示，以便知道何时应该在特定操作周围渲染显式括号。当应用于具有更高优先级的另一个运算符时，较低的数字将导致表达式被括在括号中。默认值为`0`，低于除逗号（`,`）和`AS`运算符之外的所有运算符。值为100将高于或等于所有运算符，而-100将低于或等于所有运算符。
- en: See also
  id: totrans-4123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-4124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义运算符，但是我的括号没有正确出现](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何呈现括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-4125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-4126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: legacy；如果为True，则运算符将被视为“比较”运算符，即评估为布尔真/假值的运算符，例如`==`，`>`等。提供此标志是为了让ORM关系能够在自定义连接条件中使用时确定该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-4127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `is_comparison` 参数被 [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 方法取代；这个更简洁的运算符会自动设置这个参数，但也会提供正确的
    [**PEP 484**](https://peps.python.org/pep-0484/) 类型支持，因为返回的对象将表示“布尔”数据类型，即 `BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-4128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或对象，将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定了 [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 的运算符将解析为 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的将与左操作数具有相同的类型。'
- en: '`python_impl` –'
  id: totrans-4129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-4130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的 Python 函数，可以像在数据库服务器上运行此运算符时一样评估两个 Python 值。适用于在 Python 中进行 SQL 表达式评估函数，例如用于
    ORM 混合属性的，以及 ORM “评估器” 用于在多行更新或删除后匹配会话中的对象。
- en: 'e.g.:'
  id: totrans-4131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1032]'
  id: totrans-4132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1032]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-4133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也将适用于非 SQL 左对象和右对象：
- en: '[PRE1033]'
  id: totrans-4134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1033]'
- en: New in version 2.0.
  id: totrans-4135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-4136
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-4137
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-4138
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-4139
  prefs: []
  type: TYPE_NORMAL
  zh: '[在联接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE1034]'
  id: totrans-4140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1034]'
- en: '*inherited from the* [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-4141
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Operate on an argument.
  id: totrans-4142
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-4143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别， 默认情况下会引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-4144
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖这个可以让常见的行为应用于所有操作。例如，覆盖 [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 来将 `func.lower()` 应用于左边和右边：
- en: '[PRE1035]'
  id: totrans-4145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1035]'
- en: 'Parameters:'
  id: totrans-4146
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-4147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-4148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘其他’一侧。对于大多数操作来说，它将是一个单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-4149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修改器。这些可以通过特殊运算符传递，例如 [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")。'
- en: '[PRE1036]'
  id: totrans-4150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1036]'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-4151
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘regexp 匹配’运算符。
- en: 'E.g.:'
  id: totrans-4152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1037]'
  id: totrans-4153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1037]'
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-4154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似于 REGEXP
    的函数或运算符，但是特定的正则表达式语法和可用标志**不是与后端无关**。'
- en: 'Examples include:'
  id: totrans-4155
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-4156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时呈现 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-4157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 在 Oracle 中呈现 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-4158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符运算符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-4159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-4160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将生成运算符为“REGEXP”或“NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-4161
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，正则表达式支持已经实现了 Oracle、PostgreSQL、MySQL 和 MariaDB。对 SQLite 的支持是部分的。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-4162
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-4163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-4164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写的正则表达式匹配运算符 `~*`
    或 `!~*`。'
- en: New in version 1.4.
  id: totrans-4165
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-4166
  prefs: []
  type: TYPE_NORMAL
  zh: '从 1.4.48 版更改，: 2.0.18 请注意，由于实现错误，以前的 “flags” 参数接受了 SQL 表达式对象，例如列表达式，而不仅仅是普通的
    Python 字符串。这种实现不能正确地与缓存一起使用，并且已被移除；应该仅传递字符串作为 “flags” 参数，因为这些标志将作为 SQL 表达式中的字面内联值呈现。'
- en: See also
  id: totrans-4167
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-4168
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE1038]'
  id: totrans-4169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1038]'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-4170
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个特定于数据库的‘正则表达式替换’运算符。
- en: 'E.g.:'
  id: totrans-4171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1039]'
  id: totrans-4172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1039]'
- en: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-4173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析为由后端提供的类似于 REGEXP_REPLACE
    的函数，通常会生成函数 `REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用标志**不是与后端无关**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-4174
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，正则表达式替换支持的数据库包括 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-4175
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-4176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-4177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-4178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。'
- en: New in version 1.4.
  id: totrans-4179
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-4180
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.48 中更改为：2.0.18 请注意，由于实现错误，“flags”参数先前接受了SQL表达式对象，例如列表达式，而不仅仅是普通的Python字符串。
    这种实现与缓存不兼容，并已删除； 仅应传递字符串作为“flags”参数，因为这些标志将作为SQL表达式中的文字内联值呈现。
- en: See also
  id: totrans-4181
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-4182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE1040]'
  id: totrans-4183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1040]'
- en: '*inherited from the* [`Operators.reverse_operate()`](#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-4184
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Reverse operate on an argument.
  id: totrans-4185
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate
    "sqlalchemy.sql.expression.ColumnOperators.operate").
  id: totrans-4186
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与[`operate()`](#sqlalchemy.sql.expression.ColumnOperators.operate "sqlalchemy.sql.expression.ColumnOperators.operate")相同。
- en: '[PRE1041]'
  id: totrans-4187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1041]'
- en: Implement the `startswith` operator.
  id: totrans-4188
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-4189
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值开头的匹配项：
- en: '[PRE1042]'
  id: totrans-4190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1042]'
- en: 'E.g.:'
  id: totrans-4191
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1043]'
  id: totrans-4192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1043]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-4193
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。 对于文字字符串值，可以将[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，以便它们作为自身而不是通配符字符进行匹配。
    或者，[`ColumnOperators.startswith.escape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-4194
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-4195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。 这通常是一个普通字符串值，但也可以是任意SQL表达式。 除非将[`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为True，否则不会转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-4196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-4197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值； 当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`，`"_"`和转义字符本身，假定比较值是文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-4198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE1044]'
  id: totrans-4199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1044]'
- en: 'Will render as:'
  id: totrans-4200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE1045]'
  id: totrans-4201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1045]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-4202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-4203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-4204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符建立���转义字符。 然后，可以将此字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-4205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE1046]'
  id: totrans-4206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1046]'
- en: 'Will render as:'
  id: totrans-4207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE1047]'
  id: totrans-4208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1047]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-4209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数还可以与 [`ColumnOperators.startswith.autoescape`](#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 结合使用：
- en: '[PRE1048]'
  id: totrans-4210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1048]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-4211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-4212
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-4213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-4214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-4215
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE1049]'
  id: totrans-4216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1049]'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-4217
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左手边比较 datetime 对象。
- en: '[PRE1050]'
  id: totrans-4218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1050]'
- en: Represent a SQL EXTRACT clause, `extract(field FROM expr)`.
  id: totrans-4219
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL EXTRACT 子句，`extract(field FROM expr)`。
- en: '**Class signature**'
  id: totrans-4220
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Extract`](#sqlalchemy.sql.expression.Extract
    "sqlalchemy.sql.expression.Extract") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4221
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Extract`](#sqlalchemy.sql.expression.Extract "sqlalchemy.sql.expression.Extract")（[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE1051]'
  id: totrans-4222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1051]'
- en: Represent the `false` keyword, or equivalent, in a SQL statement.
  id: totrans-4223
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL 语句中的 `false` 关键字，或等效的内容。
- en: '[`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    is accessed as a constant via the [`false()`](#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") function.'
  id: totrans-4224
  prefs: []
  type: TYPE_NORMAL
  zh: '[`False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")
    通过 [`false()`](#sqlalchemy.sql.expression.false "sqlalchemy.sql.expression.false")
    函数作为常量访问。'
- en: '**Class signature**'
  id: totrans-4225
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.False_`](#sqlalchemy.sql.expression.False_
    "sqlalchemy.sql.expression.False_") (`sqlalchemy.sql.expression.SingletonConstant`,
    `sqlalchemy.sql.roles.ConstExprRole`, [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4226
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.False_`](#sqlalchemy.sql.expression.False_ "sqlalchemy.sql.expression.False_")（`sqlalchemy.sql.expression.SingletonConstant`、`sqlalchemy.sql.roles.ConstExprRole`、[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE1052]'
  id: totrans-4227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1052]'
- en: Represent a function FILTER clause.
  id: totrans-4228
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个函数 FILTER 子句。
- en: This is a special operator against aggregate and window functions, which controls
    which rows are passed to it. It’s supported only by certain database backends.
  id: totrans-4229
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对聚合和窗口函数的特殊操作符，用于控制传递给它的行。仅受某些数据库后端支持。
- en: 'Invocation of [`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter") is via [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter"):'
  id: totrans-4230
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter "sqlalchemy.sql.expression.FunctionFilter")
    的调用通过 [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter") 完成：'
- en: '[PRE1053]'
  id: totrans-4231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1053]'
- en: See also
  id: totrans-4232
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
  id: totrans-4233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")'
- en: '**Members**'
  id: totrans-4234
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[filter()](#sqlalchemy.sql.expression.FunctionFilter.filter), [over()](#sqlalchemy.sql.expression.FunctionFilter.over),
    [self_group()](#sqlalchemy.sql.expression.FunctionFilter.self_group)'
  id: totrans-4235
  prefs: []
  type: TYPE_NORMAL
  zh: '[filter()](#sqlalchemy.sql.expression.FunctionFilter.filter), [over()](#sqlalchemy.sql.expression.FunctionFilter.over),
    [self_group()](#sqlalchemy.sql.expression.FunctionFilter.self_group)'
- en: '**Class signature**'
  id: totrans-4236
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4237
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.FunctionFilter`](#sqlalchemy.sql.expression.FunctionFilter
    "sqlalchemy.sql.expression.FunctionFilter")（[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE1054]'
  id: totrans-4238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1054]'
- en: Produce an additional FILTER against the function.
  id: totrans-4239
  prefs: []
  type: TYPE_NORMAL
  zh: '对函数执行额外的 FILTER。 '
- en: This method adds additional criteria to the initial criteria set up by [`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter").
  id: totrans-4240
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在[`FunctionElement.filter()`](functions.html#sqlalchemy.sql.functions.FunctionElement.filter
    "sqlalchemy.sql.functions.FunctionElement.filter")设置的初始条件之上添加了额外的条件。
- en: Multiple criteria are joined together at SQL render time via `AND`.
  id: totrans-4241
  prefs: []
  type: TYPE_NORMAL
  zh: 多个条件在SQL渲染时通过`AND`连接在一起。
- en: '[PRE1055]'
  id: totrans-4242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1055]'
- en: Produce an OVER clause against this filtered function.
  id: totrans-4243
  prefs: []
  type: TYPE_NORMAL
  zh: 对此过滤函数生成一个OVER子句。
- en: Used against aggregate or so-called “window” functions, for database backends
    that support window functions.
  id: totrans-4244
  prefs: []
  type: TYPE_NORMAL
  zh: 用于对聚合或所谓的“窗口”函数进行操作，适用于支持窗口函数的数据库后端。
- en: 'The expression:'
  id: totrans-4245
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式：
- en: '[PRE1056]'
  id: totrans-4246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1056]'
- en: 'is shorthand for:'
  id: totrans-4247
  prefs: []
  type: TYPE_NORMAL
  zh: 是的速记为：
- en: '[PRE1057]'
  id: totrans-4248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1057]'
- en: See [`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")
    for a full description.
  id: totrans-4249
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细说明，请参见[`over()`](#sqlalchemy.sql.expression.over "sqlalchemy.sql.expression.over")。
- en: '[PRE1058]'
  id: totrans-4250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1058]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4251
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4252
  prefs: []
  type: TYPE_NORMAL
  zh: 子类重写此方法以返回“分组”结构，即括号。特别是它被“二进制”表达式使用时，在放置到较大表达式中时提供了一个围绕自身的分组，以及当放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时，由[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")结构使用。 （请注意，通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建子查询，因为许多平台要求嵌套SELECT语句被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-4253
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，对[`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group")的应用是自动的 - 最终用户代码不应该直接使用这个方法。请注意，SQLAlchemy的子句构造会考虑运算符优先级
    - 因此可能不需要括号，例如，在`x OR (y AND z)`这样的表达式中 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4254
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.FunctionFilter.self_group
    "sqlalchemy.sql.expression.FunctionFilter.self_group")方法只返回自身。'
- en: '[PRE1059]'
  id: totrans-4255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1059]'
- en: Represents a column label (AS).
  id: totrans-4256
  prefs: []
  type: TYPE_NORMAL
  zh: 表示列标签（AS）。
- en: Represent a label, as typically applied to any column-level element using the
    `AS` sql keyword.
  id: totrans-4257
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个标签，通常使用`AS` SQL关键字应用到任何列级元素上。
- en: '**Members**'
  id: totrans-4258
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[foreign_keys](#sqlalchemy.sql.expression.Label.foreign_keys), [primary_key](#sqlalchemy.sql.expression.Label.primary_key),
    [self_group()](#sqlalchemy.sql.expression.Label.self_group)'
  id: totrans-4259
  prefs: []
  type: TYPE_NORMAL
  zh: '[foreign_keys](#sqlalchemy.sql.expression.Label.foreign_keys), [primary_key](#sqlalchemy.sql.expression.Label.primary_key),
    [self_group()](#sqlalchemy.sql.expression.Label.self_group)'
- en: '**Class signature**'
  id: totrans-4260
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    (`sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.expression.NamedColumn`)
  id: totrans-4261
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Label`](#sqlalchemy.sql.expression.Label "sqlalchemy.sql.expression.Label")
    (`sqlalchemy.sql.roles.LabeledColumnExprRole`, `sqlalchemy.sql.expression.NamedColumn`)
- en: '[PRE1060]'
  id: totrans-4262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1060]'
- en: '[PRE1061]'
  id: totrans-4263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1061]'
- en: '[PRE1062]'
  id: totrans-4264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1062]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4265
  prefs: []
  type: TYPE_NORMAL
  zh: 对此[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4266
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写为返回“分组”构造，即括号。特别是它被“二进制”表达式用于在放置到更大的表达式中时提供自己周围的分组，以及当放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时，被[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造使用。 （请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须具有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-4267
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，自动应用[`self_group()`](#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group") - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造会考虑运算符优先级
    - 因此在表达式中可能不需要括号，例如`x OR (y AND z)` - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Label.self_group "sqlalchemy.sql.expression.Label.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.Label.self_group
    "sqlalchemy.sql.expression.Label.self_group")方法只返回自身。'
- en: '[PRE1063]'
  id: totrans-4269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1063]'
- en: Represent the NULL keyword in a SQL statement.
  id: totrans-4270
  prefs: []
  type: TYPE_NORMAL
  zh: 表示SQL语句中的NULL关键字。
- en: '[`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    is accessed as a constant via the [`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")
    function.'
  id: totrans-4271
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    通过[`null()`](#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")函数作为常量访问。'
- en: '**Class signature**'
  id: totrans-4272
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4273
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Null`](#sqlalchemy.sql.expression.Null "sqlalchemy.sql.expression.Null")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))。
- en: '[PRE1064]'
  id: totrans-4274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1064]'
- en: Base of comparison and logical operators.
  id: totrans-4275
  prefs: []
  type: TYPE_NORMAL
  zh: 比较和逻辑运算符的基础。
- en: Implements base methods `Operators.operate()` and `Operators.reverse_operate()`,
    as well as `Operators.__and__()`, `Operators.__or__()`, `Operators.__invert__()`.
  id: totrans-4276
  prefs: []
  type: TYPE_NORMAL
  zh: 实现基本方法`Operators.operate()`和`Operators.reverse_operate()`，以及`Operators.__and__()`、`Operators.__or__()`、`Operators.__invert__()`。
- en: '**Members**'
  id: totrans-4277
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__and__()](#sqlalchemy.sql.expression.Operators.__and__), [__invert__()](#sqlalchemy.sql.expression.Operators.__invert__),
    [__or__()](#sqlalchemy.sql.expression.Operators.__or__), [__sa_operate__()](#sqlalchemy.sql.expression.Operators.__sa_operate__),
    [bool_op()](#sqlalchemy.sql.expression.Operators.bool_op), [op()](#sqlalchemy.sql.expression.Operators.op),
    [operate()](#sqlalchemy.sql.expression.Operators.operate), [reverse_operate()](#sqlalchemy.sql.expression.Operators.reverse_operate)'
  id: totrans-4278
  prefs: []
  type: TYPE_NORMAL
  zh: '[__and__()](#sqlalchemy.sql.expression.Operators.__and__), [__invert__()](#sqlalchemy.sql.expression.Operators.__invert__),
    [__or__()](#sqlalchemy.sql.expression.Operators.__or__), [__sa_operate__()](#sqlalchemy.sql.expression.Operators.__sa_operate__),
    [bool_op()](#sqlalchemy.sql.expression.Operators.bool_op), [op()](#sqlalchemy.sql.expression.Operators.op),
    [operate()](#sqlalchemy.sql.expression.Operators.operate), [reverse_operate()](#sqlalchemy.sql.expression.Operators.reverse_operate)'
- en: Usually is used via its most common subclass [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators").
  id: totrans-4279
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是通过其最常见的子类[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators "sqlalchemy.sql.expression.ColumnOperators")来使用。
- en: '[PRE1065]'
  id: totrans-4280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1065]'
- en: Implement the `&` operator.
  id: totrans-4281
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`&`运算符。
- en: 'When used with SQL expressions, results in an AND operation, equivalent to
    [`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_"),
    that is:'
  id: totrans-4282
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 SQL 表达式一起使用时，会导致 AND 操作，等同于[`and_()`](#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")，即：
- en: '[PRE1066]'
  id: totrans-4283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1066]'
- en: 'is equivalent to:'
  id: totrans-4284
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE1067]'
  id: totrans-4285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1067]'
- en: 'Care should be taken when using `&` regarding operator precedence; the `&`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-4286
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`&`时应注意运算符优先级；`&`运算符具有最高优先级。如果操作数包含进一步的子表达式，则应将其括在括号中：
- en: '[PRE1068]'
  id: totrans-4287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1068]'
- en: '[PRE1069]'
  id: totrans-4288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1069]'
- en: Implement the `~` operator.
  id: totrans-4289
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`~`运算符。
- en: 'When used with SQL expressions, results in a NOT operation, equivalent to [`not_()`](#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_"), that is:'
  id: totrans-4290
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 SQL 表达式一起使用时，会导致 NOT 操作，等同于[`not_()`](#sqlalchemy.sql.expression.not_ "sqlalchemy.sql.expression.not_")，即：
- en: '[PRE1070]'
  id: totrans-4291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1070]'
- en: 'is equivalent to:'
  id: totrans-4292
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE1071]'
  id: totrans-4293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1071]'
- en: '[PRE1072]'
  id: totrans-4294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1072]'
- en: Implement the `|` operator.
  id: totrans-4295
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`|`运算符。
- en: 'When used with SQL expressions, results in an OR operation, equivalent to [`or_()`](#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_"), that is:'
  id: totrans-4296
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 SQL 表达式一起使用时，会导致 OR 操作，等同于[`or_()`](#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")，即：
- en: '[PRE1073]'
  id: totrans-4297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1073]'
- en: 'is equivalent to:'
  id: totrans-4298
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE1074]'
  id: totrans-4299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1074]'
- en: 'Care should be taken when using `|` regarding operator precedence; the `|`
    operator has the highest precedence. The operands should be enclosed in parenthesis
    if they contain further sub expressions:'
  id: totrans-4300
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`|`时应注意运算符优先级；`|`运算符具有最高优先级。如果操作数包含进一步的子表达式，则应将其括在括号中：
- en: '[PRE1075]'
  id: totrans-4301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1075]'
- en: '[PRE1076]'
  id: totrans-4302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1076]'
- en: Operate on an argument.
  id: totrans-4303
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-4304
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最低级别的操作， 默认情况下会引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-4305
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖此操作可以使常见行为应用于所有操作。例如，覆盖[`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左侧和右侧：
- en: '[PRE1077]'
  id: totrans-4306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1077]'
- en: 'Parameters:'
  id: totrans-4307
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-4308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-4309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘other’一侧。对于大多数操作，将是一个单一标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-4310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊运算符（如[`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")）传递。'
- en: '[PRE1078]'
  id: totrans-4311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1078]'
- en: Return a custom boolean operator.
  id: totrans-4312
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")
    is that when using column constructs, the “boolean” nature of the returned expression
    will be present for [**PEP 484**](https://peps.python.org/pep-0484/) purposes.
  id: totrans-4313
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")并传递带有
    True 的[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志的简写。使用[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在[**PEP
    484**](https://peps.python.org/pep-0484/)中。
- en: See also
  id: totrans-4314
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-4315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](#sqlalchemy.sql.expression.Operators.op "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE1079]'
  id: totrans-4316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1079]'
- en: Produce a generic operator function.
  id: totrans-4317
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-4318
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1080]'
  id: totrans-4319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1080]'
- en: 'produces:'
  id: totrans-4320
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE1081]'
  id: totrans-4321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1081]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-4322
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可用于使位运算符明确。例如：
- en: '[PRE1082]'
  id: totrans-4323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1082]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-4324
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位 AND。
- en: 'Parameters:'
  id: totrans-4325
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-4326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将作为中缀运算符输出在此元素和传递给生成函数的表达式之间。'
- en: '`precedence` –'
  id: totrans-4327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-4328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预期在SQL表达式中应用的运算符的优先级。这个整数值作为SQL编译器的提示，以便知道何时应该在特定操作周围呈现显式括号。较低的数字将导致在应用于具有更高优先级的另一个运算符时表达式被括号括起来。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，-100将低于或等于所有运算符。
- en: See also
  id: totrans-4329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-4330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义运算符，但我的括号没有正确显示](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何呈现括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-4331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-4332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统的；如果为True，则将运算符视为“比较”运算符，即评估为布尔值的运算符，如`==`，`>`等。提供此标志是为了ORM关系可以在自定义连接条件中使用时建立该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-4333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的运算符会自动设置此参数，但同时提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-4334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的运算符将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-4335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-4336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的Python函数，可以在数据库服务器上运行时以与此运算符相同的方式评估两个Python值。对于在Python中的SQL表达式评估函数非常有用，例如用于ORM混合属性的函数，以及用于在多行更新或删除后匹配会话中的对象的ORM“评估器”。
- en: 'e.g.:'
  id: totrans-4337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1083]'
  id: totrans-4338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1083]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-4339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也适用于非SQL左右对象：
- en: '[PRE1084]'
  id: totrans-4340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1084]'
- en: New in version 2.0.
  id: totrans-4341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: See also
  id: totrans-4342
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-4343
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](#sqlalchemy.sql.expression.Operators.bool_op "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](custom_types.html#types-operators)'
  id: totrans-4344
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-4345
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '[PRE1085]'
  id: totrans-4346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1085]'
- en: Operate on an argument.
  id: totrans-4347
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-4348
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下会引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-4349
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重写这个可以允许将通用行为应用于所有操作。例如，重写 [`ColumnOperators`](#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 来将 `func.lower()` 应用于左侧和右侧：
- en: '[PRE1086]'
  id: totrans-4350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1086]'
- en: 'Parameters:'
  id: totrans-4351
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-4352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-4353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“其他”方。对于大多数操作，将是一个单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").'
  id: totrans-4354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以由特殊操作符（如 [`ColumnOperators.contains()`](#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")）传递。'
- en: '[PRE1087]'
  id: totrans-4355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1087]'
- en: Reverse operate on an argument.
  id: totrans-4356
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate").
  id: totrans-4357
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 [`operate()`](#sqlalchemy.sql.expression.Operators.operate "sqlalchemy.sql.expression.Operators.operate")
    相同。
- en: '[PRE1088]'
  id: totrans-4358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1088]'
- en: Represent an OVER clause.
  id: totrans-4359
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个OVER子句。
- en: This is a special operator against a so-called “window” function, as well as
    any aggregate function, which produces results relative to the result set itself.
    Most modern SQL backends now support window functions.
  id: totrans-4360
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对所谓的“窗口”函数以及任何聚合函数的特殊操作符，它生成相对于结果集本身的结果。现代大多数 SQL 后端现在都支持窗口函数。
- en: '**Members**'
  id: totrans-4361
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[element](#sqlalchemy.sql.expression.Over.element)'
  id: totrans-4362
  prefs: []
  type: TYPE_NORMAL
  zh: '[element](#sqlalchemy.sql.expression.Over.element)'
- en: '**Class signature**'
  id: totrans-4363
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4364
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    （[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE1089]'
  id: totrans-4365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1089]'
- en: The underlying expression object to which this [`Over`](#sqlalchemy.sql.expression.Over
    "sqlalchemy.sql.expression.Over") object refers.
  id: totrans-4366
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Over`](#sqlalchemy.sql.expression.Over "sqlalchemy.sql.expression.Over")
    对象所引用的底层表达式对象。
- en: '[PRE1090]'
  id: totrans-4367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1090]'
- en: A type that may be used to indicate any SQL column element or object that acts
    in place of one.
  id: totrans-4368
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于表示任何 SQL 列元素或充当其中之一的对象的类型。
- en: '[`SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression "sqlalchemy.sql.expression.SQLColumnExpression")
    is a base of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement"),
    as well as within the bases of ORM elements such as [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute"), and may be used in [**PEP 484**](https://peps.python.org/pep-0484/)
    typing to indicate arguments or return values that should behave as column expressions.'
  id: totrans-4369
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression "sqlalchemy.sql.expression.SQLColumnExpression")
    是 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    的一个基类，也是 ORM 元素的基类，如 [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 中所述，并且可以在 [**PEP 484**](https://peps.python.org/pep-0484/)
    中用于指示应该作为列表达式行为的参数或返回值。'
- en: New in version 2.0.0b4.
  id: totrans-4370
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.0b4 中引入。
- en: '**Class signature**'
  id: totrans-4371
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") (`sqlalchemy.sql.expression.SQLCoreOperations`,
    `sqlalchemy.sql.roles.ExpressionElementRole`, `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-4372
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.SQLColumnExpression`](#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") （`sqlalchemy.sql.expression.SQLCoreOperations`、`sqlalchemy.sql.roles.ExpressionElementRole`、`sqlalchemy.util.langhelpers.TypingOnly`）
- en: '[PRE1091]'
  id: totrans-4373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1091]'
- en: Represent a literal SQL text fragment.
  id: totrans-4374
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个文字 SQL 文本片段。
- en: 'E.g.:'
  id: totrans-4375
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1092]'
  id: totrans-4376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1092]'
- en: The [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    construct is produced using the [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    function; see that function for full documentation.
  id: totrans-4377
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    函数生成 [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    构造; 请参阅该函数以获取完整文档。
- en: See also
  id: totrans-4378
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
  id: totrans-4379
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")'
- en: '**Members**'
  id: totrans-4380
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[bindparams()](#sqlalchemy.sql.expression.TextClause.bindparams), [columns()](#sqlalchemy.sql.expression.TextClause.columns),
    [self_group()](#sqlalchemy.sql.expression.TextClause.self_group)'
  id: totrans-4381
  prefs: []
  type: TYPE_NORMAL
  zh: '[bindparams()](#sqlalchemy.sql.expression.TextClause.bindparams), [columns()](#sqlalchemy.sql.expression.TextClause.columns),
    [self_group()](#sqlalchemy.sql.expression.TextClause.self_group)'
- en: '**Class signature**'
  id: totrans-4382
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") (`sqlalchemy.sql.roles.DDLConstraintColumnRole`,
    `sqlalchemy.sql.roles.DDLExpressionRole`, `sqlalchemy.sql.roles.StatementOptionRole`,
    `sqlalchemy.sql.roles.WhereHavingRole`, `sqlalchemy.sql.roles.OrderByRole`, `sqlalchemy.sql.roles.FromClauseRole`,
    `sqlalchemy.sql.roles.SelectStatementRole`, `sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `sqlalchemy.sql.expression.DQLDMLClauseElement`,
    `sqlalchemy.sql.roles.BinaryElementRole`, `sqlalchemy.inspection.Inspectable`)
  id: totrans-4383
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.sql.expression.TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") (`sqlalchemy.sql.roles.DDLConstraintColumnRole`,
    `sqlalchemy.sql.roles.DDLExpressionRole`, `sqlalchemy.sql.roles.StatementOptionRole`,
    `sqlalchemy.sql.roles.WhereHavingRole`, `sqlalchemy.sql.roles.OrderByRole`, `sqlalchemy.sql.roles.FromClauseRole`,
    `sqlalchemy.sql.roles.SelectStatementRole`, `sqlalchemy.sql.roles.InElementRole`,
    `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `sqlalchemy.sql.expression.DQLDMLClauseElement`,
    `sqlalchemy.sql.roles.BinaryElementRole`, `sqlalchemy.inspection.Inspectable`)
- en: '[PRE1093]'
  id: totrans-4384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1093]'
- en: Establish the values and/or types of bound parameters within this [`TextClause`](#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") construct.
  id: totrans-4385
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    构造中建立绑定参数的值和/或类型。
- en: 'Given a text construct such as:'
  id: totrans-4386
  prefs: []
  type: TYPE_NORMAL
  zh: 给定文本构造，例如：
- en: '[PRE1094]'
  id: totrans-4387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1094]'
- en: 'the [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method can be used to establish
    the initial value of `:name` and `:timestamp`, using simple keyword arguments:'
  id: totrans-4388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") 方法可用于使用简单的关键字参数来建立 `:name`
    和 `:timestamp` 的初始值：'
- en: '[PRE1095]'
  id: totrans-4389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1095]'
- en: Where above, new [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects will be generated with the
    names `name` and `timestamp`, and values of `jack` and `datetime.datetime(2012,
    10, 8, 15, 12, 5)`, respectively. The types will be inferred from the values given,
    in this case [`String`](type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    and [`DateTime`](type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime").
  id: totrans-4390
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，将生成新的 [`BindParameter`](#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    对象，其名称分别为 `name` 和 `timestamp`，值分别为 `jack` 和 `datetime.datetime(2012, 10, 8, 15,
    12, 5)`。类型将根据给定的值推断，本例中分别为 [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") 和 [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")。
- en: 'When specific typing behavior is needed, the positional `*binds` argument can
    be used in which to specify [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs directly. These constructs must
    include at least the `key` argument, then an optional value and type:'
  id: totrans-4391
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要特定的类型行为时，可以使用位置参数 `*binds` 来直接指定 [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造。这些构造必须至少包括 `key` 参数，然后是可选的值和类型：
- en: '[PRE1096]'
  id: totrans-4392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1096]'
- en: Above, we specified the type of [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") for the `timestamp` bind, and the type of [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") for the `name` bind. In the case of `name` we also
    set the default value of `"jack"`.
  id: totrans-4393
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们为 `timestamp` 绑定指定了 [`DateTime`](type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") 类型，并为 `name` 绑定指定了 [`String`](type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") 类型。对于 `name`，我们还设置了默认值为 `"jack"`。
- en: 'Additional bound parameters can be supplied at statement execution time, e.g.:'
  id: totrans-4394
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的绑定参数可以在语句执行时提供，例如：
- en: '[PRE1097]'
  id: totrans-4395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1097]'
- en: 'The [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method can be called repeatedly,
    where it will re-use existing [`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects to add new information. For
    example, we can call [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") first with typing information,
    and a second time with value information, and it will be combined:'
  id: totrans-4396
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")方法可以重复调用，在其中将重用现有的[`BindParameter`](#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象以添加新信息。例如，我们可以首先使用类型信息调用[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")，然后再次使用值信息调用，它们将被合并：'
- en: '[PRE1098]'
  id: totrans-4397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1098]'
- en: 'The [`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams") method also supports the concept
    of **unique** bound parameters. These are parameters that are “uniquified” on
    name at statement compilation time, so that multiple [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs may be combined together without
    the names conflicting. To use this feature, specify the [`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter") flag on each [`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") object:'
  id: totrans-4398
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.bindparams()`](#sqlalchemy.sql.expression.TextClause.bindparams
    "sqlalchemy.sql.expression.TextClause.bindparams")方法还支持**唯一**绑定参数的概念。这些参数在语句编译时通过名称“唯一化”，以便多个[`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造可以组合在一起而不发生名称冲突。要使用此功能，请在每个[`bindparam()`](#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")对象上指定[`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter")标志：'
- en: '[PRE1099]'
  id: totrans-4399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1099]'
- en: 'The above statement will render as:'
  id: totrans-4400
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句将呈现为：
- en: '[PRE1100]'
  id: totrans-4401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1100]'
- en: 'New in version 1.3.11: Added support for the [`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter") flag to work with [`text()`](#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") constructs.'
  id: totrans-4402
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.11中的新功能：添加了对与[`text()`](#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")构造一起使用的[`BindParameter.unique`](#sqlalchemy.sql.expression.BindParameter.params.unique
    "sqlalchemy.sql.expression.BindParameter")标志的支持。
- en: '[PRE1101]'
  id: totrans-4403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1101]'
- en: Turn this [`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")
    object into a [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") object that serves the same role as
    a SELECT statement.
  id: totrans-4404
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`TextClause`](#sqlalchemy.sql.expression.TextClause "sqlalchemy.sql.expression.TextClause")对象转换为一个[`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")对象，其作用与SELECT语句相同。
- en: The [`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") is part of the [`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase") hierarchy and can be embedded into another
    statement by using the [`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery") method to produce a [`Subquery`](selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery") object, which can then be SELECTed from.
  id: totrans-4405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextualSelect`](selectable.html#sqlalchemy.sql.expression.TextualSelect "sqlalchemy.sql.expression.TextualSelect")是[`SelectBase`](selectable.html#sqlalchemy.sql.expression.SelectBase
    "sqlalchemy.sql.expression.SelectBase")层次结构的一部分，可以通过使用[`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery")方法将其嵌入到另一个语句中，从而产生一个[`Subquery`](selectable.html#sqlalchemy.sql.expression.Subquery
    "sqlalchemy.sql.expression.Subquery")对象，然后可以从中进行SELECT。'
- en: 'This function essentially bridges the gap between an entirely textual SELECT
    statement and the SQL expression language concept of a “selectable”:'
  id: totrans-4406
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数本质上是在完全文本的SELECT语句与SQL表达式语言概念“可选择”的之间架起了桥梁：
- en: '[PRE1102]'
  id: totrans-4407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1102]'
- en: Above, we pass a series of [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    elements to the [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method positionally. These [`column()`](#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") elements now become first class elements upon
    the [`TextualSelect.selected_columns`](selectable.html#sqlalchemy.sql.expression.TextualSelect.selected_columns
    "sqlalchemy.sql.expression.TextualSelect.selected_columns") column collection,
    which then become part of the `Subquery.c` collection after [`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery") is invoked.
  id: totrans-4408
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们按位置传递了一系列 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    元素给 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns")
    方法。这些 [`column()`](#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    元素现在成为 [`TextualSelect.selected_columns`](selectable.html#sqlalchemy.sql.expression.TextualSelect.selected_columns
    "sqlalchemy.sql.expression.TextualSelect.selected_columns") 列集合的一等元素，然后在调用 [`TextualSelect.subquery()`](selectable.html#sqlalchemy.sql.expression.TextualSelect.subquery
    "sqlalchemy.sql.expression.TextualSelect.subquery") 之后成为 `Subquery.c` 集合的一部分。
- en: 'The column expressions we pass to [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") may also be typed; when we do
    so, these [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    objects become the effective return type of the column, so that SQLAlchemy’s result-set-processing
    systems may be used on the return values. This is often needed for types such
    as date or boolean types, as well as for unicode processing on some dialect configurations:'
  id: totrans-4409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") 的列表达式也可以被类型化；当我们这样做时，这些 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 对象成为列的有效返回类型，以便 SQLAlchemy 的结果集处理系统可以用于返回值。这通常对于诸如日期或布尔类型以及某些方言配置上的
    Unicode 处理是必要的：
- en: '[PRE1103]'
  id: totrans-4410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1103]'
- en: 'As a shortcut to the above syntax, keyword arguments referring to types alone
    may be used, if only type conversion is needed:'
  id: totrans-4411
  prefs: []
  type: TYPE_NORMAL
  zh: 作为上述语法的快捷方式，如果只需要类型转换，则可以使用仅引用类型的关键字参数：
- en: '[PRE1104]'
  id: totrans-4412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1104]'
- en: 'The positional form of [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") also provides the unique feature
    of **positional column targeting**, which is particularly useful when using the
    ORM with complex textual queries. If we specify the columns from our model to
    [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns"),
    the result set will match to those columns positionally, meaning the name or origin
    of the column in the textual SQL doesn’t matter:'
  id: totrans-4413
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns")
    的位置形式还提供了**位置列定位**的独特功能，当使用 ORM 处理复杂的文本查询时特别有用。如果我们将模型中的列指定给 [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")，则结果集将按位置匹配到这些列，这意味着文本 SQL 中列的名称或来源并不重要：'
- en: '[PRE1105]'
  id: totrans-4414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1105]'
- en: 'The [`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method provides a direct route
    to calling `FromClause.subquery()` as well as [`SelectBase.cte()`](selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") against a textual SELECT statement:'
  id: totrans-4415
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TextClause.columns()`](#sqlalchemy.sql.expression.TextClause.columns "sqlalchemy.sql.expression.TextClause.columns")
    方法提供了直接调用 `FromClause.subquery()` 以及针对文本 SELECT 语句调用 [`SelectBase.cte()`](selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") 的途径：'
- en: '[PRE1106]'
  id: totrans-4416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1106]'
- en: 'Parameters:'
  id: totrans-4417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – A series of [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects, typically [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects from a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or ORM level column-mapped attributes, representing
    a set of columns that this textual string will SELECT from.'
  id: totrans-4418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    对象，通常是从 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    或 ORM 级别的列映射属性中获取的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象，表示此文本字符串将从中选择的列集。'
- en: '`**types` – A mapping of string names to [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") type objects indicating the datatypes to use for
    names that are SELECTed from the textual string. Prefer to use the `*cols` argument
    as it also indicates positional ordering.'
  id: totrans-4419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**types` – 一个将字符串名称映射到 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类型对象的映射，指示从文本字符串中选择的名称要使用的数据类型。最好使用 `*cols` 参数，因为它还指示了位置顺序。'
- en: '[PRE1107]'
  id: totrans-4420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1107]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4421
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4422
  prefs: []
  type: TYPE_NORMAL
  zh: 子类会重写此方法以返回一个“分组”构造，即括号。特别是它被“二进制”表达式使用，当它们被放置到更大的表达式中时，提供了一个围绕自身的分组，以及当 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造被放置到另一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的 FROM 子句时。 （请注意，子查询通常应使用 [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法创建，因为许多平台要求嵌套的 SELECT 语句被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group
    "sqlalchemy.sql.expression.TextClause.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-4423
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式组合在一起时，自动应用 [`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group
    "sqlalchemy.sql.expression.TextClause.self_group") 方法 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy
    的子句构造考虑了运算符优先级 - 因此在表达式中可能不需要括号，例如在 `x OR (y AND z)` 这样的表达式中 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group "sqlalchemy.sql.expression.TextClause.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本 [`self_group()`](#sqlalchemy.sql.expression.TextClause.self_group "sqlalchemy.sql.expression.TextClause.self_group")
    方法只返回自身。'
- en: '[PRE1108]'
  id: totrans-4425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1108]'
- en: Represent a TRY_CAST expression.
  id: totrans-4426
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 TRY_CAST 表达式。
- en: Details on [`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    usage is at [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast").
  id: totrans-4427
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 [`TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    使用的详细信息请参见 [`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")。
- en: See also
  id: totrans-4428
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
  id: totrans-4429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`try_cast()`](#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")'
- en: '[Data Casts and Type Coercion](../tutorial/data_select.html#tutorial-casts)'
  id: totrans-4430
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据转换和类型强制转换](../tutorial/data_select.html#tutorial-casts)'
- en: '**Members**'
  id: totrans-4431
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[inherit_cache](#sqlalchemy.sql.expression.TryCast.inherit_cache)'
  id: totrans-4432
  prefs: []
  type: TYPE_NORMAL
  zh: '[inherit_cache](#sqlalchemy.sql.expression.TryCast.inherit_cache)'
- en: '**Class signature**'
  id: totrans-4433
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TryCast`](#sqlalchemy.sql.expression.TryCast
    "sqlalchemy.sql.expression.TryCast") ([`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast"))
  id: totrans-4434
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.TryCast`](#sqlalchemy.sql.expression.TryCast "sqlalchemy.sql.expression.TryCast")
    ([`sqlalchemy.sql.expression.Cast`](#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast"))
- en: '[PRE1109]'
  id: totrans-4435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1109]'
- en: Indicate if this [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") instance should make use of the cache
    key generation scheme used by its immediate superclass.
  id: totrans-4436
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    实例是否应使用其直接超类使用的缓存键生成方案。
- en: The attribute defaults to `None`, which indicates that a construct has not yet
    taken into account whether or not its appropriate for it to participate in caching;
    this is functionally equivalent to setting the value to `False`, except that a
    warning is also emitted.
  id: totrans-4437
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性默认为`None`，表示构造尚未考虑它是否适合参与缓存；这在功能上等同于将值设置为`False`，除了还会发出警告。
- en: This flag can be set to `True` on a particular class, if the SQL that corresponds
    to the object does not change based on attributes which are local to this class,
    and not its superclass.
  id: totrans-4438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与本类局部属性无关，而不是它的超类，则可以在特定类上将此标志设置为`True`，则与对象对应的SQL不会根据本类的属性更改。
- en: See also
  id: totrans-4439
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Enabling Caching Support for Custom Constructs](compiler.html#compilerext-caching)
    - General guideslines for setting the [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute for third-party
    or user defined SQL constructs.'
  id: totrans-4440
  prefs: []
  type: TYPE_NORMAL
  zh: '[为自定义构造启用缓存支持](compiler.html#compilerext-caching) - 设置第三方或用户定义的 SQL 构造的 [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") 属性的一般指南。'
- en: '[PRE1110]'
  id: totrans-4441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1110]'
- en: Represent a SQL tuple.
  id: totrans-4442
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL 元组。
- en: '**Members**'
  id: totrans-4443
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.Tuple.self_group)'
  id: totrans-4444
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.Tuple.self_group)'
- en: '**Class signature**'
  id: totrans-4445
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple")
    ([`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList"), [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4446
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Tuple`](#sqlalchemy.sql.expression.Tuple "sqlalchemy.sql.expression.Tuple")（[`sqlalchemy.sql.expression.ClauseList`](#sqlalchemy.sql.expression.ClauseList
    "sqlalchemy.sql.expression.ClauseList")，[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE1111]'
  id: totrans-4447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1111]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4448
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个“分组”应用于这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4449
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法被子类重写，以返回一个“分组”结构，即括号。特别是它被“二进制”表达式使用，当它们被放置到更大的表达式中时，提供了一个围绕自身的分组，以及当它们被放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造的FROM子句中时。（注意，子查询应该通常使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句被命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group
    "sqlalchemy.sql.expression.Tuple.self_group") is automatic - end-user code should
    never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-4450
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group "sqlalchemy.sql.expression.Tuple.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。注意，SQLAlchemy的子句构造考虑了操作符的优先级 - 因此在表达式中可能不需要括号，例如在表达式`x
    OR (y AND z)`中 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group "sqlalchemy.sql.expression.Tuple.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本[`self_group()`](#sqlalchemy.sql.expression.Tuple.self_group "sqlalchemy.sql.expression.Tuple.self_group")方法只返回自身。'
- en: '[PRE1112]'
  id: totrans-4452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1112]'
- en: Represent a WITHIN GROUP (ORDER BY) clause.
  id: totrans-4453
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 WITHIN GROUP (ORDER BY) 子句。
- en: This is a special operator against so-called “ordered set aggregate” and “hypothetical
    set aggregate” functions, including `percentile_cont()`, `rank()`, `dense_rank()`,
    etc.
  id: totrans-4454
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对所谓的“有序集合聚合”和“假设集合聚合”函数的特殊运算符，包括`percentile_cont()`、`rank()`、`dense_rank()`等。
- en: It’s supported only by certain database backends, such as PostgreSQL, Oracle
    and MS SQL Server.
  id: totrans-4455
  prefs: []
  type: TYPE_NORMAL
  zh: 仅受某些数据库后端支持，如 PostgreSQL、Oracle 和 MS SQL Server。
- en: The [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    construct extracts its type from the method [`FunctionElement.within_group_type()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group_type
    "sqlalchemy.sql.functions.FunctionElement.within_group_type"). If this returns
    `None`, the function’s `.type` is used.
  id: totrans-4456
  prefs: []
  type: TYPE_NORMAL
  zh: '[`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    构造从方法 [`FunctionElement.within_group_type()`](functions.html#sqlalchemy.sql.functions.FunctionElement.within_group_type
    "sqlalchemy.sql.functions.FunctionElement.within_group_type") 中提取其类型。如果返回`None`，则使用函数的`.type`。'
- en: '**Members**'
  id: totrans-4457
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[over()](#sqlalchemy.sql.expression.WithinGroup.over)'
  id: totrans-4458
  prefs: []
  type: TYPE_NORMAL
  zh: '[over()](#sqlalchemy.sql.expression.WithinGroup.over)'
- en: '**Class signature**'
  id: totrans-4459
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4460
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE1113]'
  id: totrans-4461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1113]'
- en: Produce an OVER clause against this [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup
    "sqlalchemy.sql.expression.WithinGroup") construct.
  id: totrans-4462
  prefs: []
  type: TYPE_NORMAL
  zh: 产生针对此 [`WithinGroup`](#sqlalchemy.sql.expression.WithinGroup "sqlalchemy.sql.expression.WithinGroup")
    构造的 OVER 子句。
- en: This function has the same signature as that of [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over").
  id: totrans-4463
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数具有与 [`FunctionElement.over()`](functions.html#sqlalchemy.sql.functions.FunctionElement.over
    "sqlalchemy.sql.functions.FunctionElement.over") 相同的签名���
- en: '[PRE1114]'
  id: totrans-4464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1114]'
- en: Mixin that defines a [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as a wrapper with special labeling
    behavior for an expression that already has a name.
  id: totrans-4465
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个 [`ColumnElement`](#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    作为一个包装器，具有对已经具有名称的表达式的特殊标签行为。
- en: New in version 1.4.
  id: totrans-4466
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-4467
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved column labeling for simple column expressions using CAST or similar](../changelog/migration_14.html#change-4449)'
  id: totrans-4468
  prefs: []
  type: TYPE_NORMAL
  zh: '[改进的列标签，用于使用CAST或类似方法的简单列表达式](../changelog/migration_14.html#change-4449)'
- en: '**Class signature**'
  id: totrans-4469
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.sql.expression.WrapsColumnExpression` ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4470
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.sql.expression.WrapsColumnExpression` ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE1115]'
  id: totrans-4471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1115]'
- en: Represent the `true` keyword, or equivalent, in a SQL statement.
  id: totrans-4472
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 SQL 语句中的 `true` 关键字或等效关键字。
- en: '[`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    is accessed as a constant via the [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    function.'
  id: totrans-4473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    通过 [`true()`](#sqlalchemy.sql.expression.true "sqlalchemy.sql.expression.true")
    函数作为常量访问。'
- en: '**Class signature**'
  id: totrans-4474
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4475
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.True_`](#sqlalchemy.sql.expression.True_ "sqlalchemy.sql.expression.True_")
    (`sqlalchemy.sql.expression.SingletonConstant`, `sqlalchemy.sql.roles.ConstExprRole`,
    [`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
- en: '[PRE1116]'
  id: totrans-4476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1116]'
- en: Represent a Python-side type-coercion wrapper.
  id: totrans-4477
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 Python 端的类型强制转换包装器。
- en: '[`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce "sqlalchemy.sql.expression.TypeCoerce")
    supplies the [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    function; see that function for usage details.'
  id: totrans-4478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce "sqlalchemy.sql.expression.TypeCoerce")
    提供 [`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")
    函数；请参阅该函数以获取使用详细信息。'
- en: See also
  id: totrans-4479
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
  id: totrans-4480
  prefs: []
  type: TYPE_NORMAL
  zh: '[`type_coerce()`](#sqlalchemy.sql.expression.type_coerce "sqlalchemy.sql.expression.type_coerce")'
- en: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
  id: totrans-4481
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cast()`](#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")'
- en: '**Members**'
  id: totrans-4482
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.TypeCoerce.self_group)'
  id: totrans-4483
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.TypeCoerce.self_group)'
- en: '**Class signature**'
  id: totrans-4484
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce
    "sqlalchemy.sql.expression.TypeCoerce") (`sqlalchemy.sql.expression.WrapsColumnExpression`)
  id: totrans-4485
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.TypeCoerce`](#sqlalchemy.sql.expression.TypeCoerce
    "sqlalchemy.sql.expression.TypeCoerce") (`sqlalchemy.sql.expression.WrapsColumnExpression`)
- en: '[PRE1117]'
  id: totrans-4486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1117]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4487
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 应用‘分组’。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4488
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写以返回一个“分组”构造，即括号。特别是当“二元”表达式放入更大的表达式中时，它被“二元”表达式用于提供围绕自身的分组，以及当[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造放入另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中时。 （请注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句必须命名）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group
    "sqlalchemy.sql.expression.TypeCoerce.self_group") is automatic - end-user code
    should never need to use this method directly. Note that SQLAlchemy’s clause constructs
    take operator precedence into account - so parenthesis might not be needed, for
    example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.
  id: totrans-4489
  prefs: []
  type: TYPE_NORMAL
  zh: 随着表达式的组合，[`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group "sqlalchemy.sql.expression.TypeCoerce.self_group")
    的应用是自动的 - 最终用户代码不应直接使用此方法。请注意，SQLAlchemy的子句构造考虑了运算符优先级 - 因此在诸如 `x OR (y AND z)`
    这样的表达式中可能不需要括号 - AND 优先于 OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group "sqlalchemy.sql.expression.TypeCoerce.self_group")
    method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4490
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    的基本[`self_group()`](#sqlalchemy.sql.expression.TypeCoerce.self_group "sqlalchemy.sql.expression.TypeCoerce.self_group")
    方法只返回自身。'
- en: '[PRE1118]'
  id: totrans-4491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1118]'
- en: Define a ‘unary’ expression.
  id: totrans-4492
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个‘一元’表达式。
- en: A unary expression has a single column expression and an operator. The operator
    can be placed on the left (where it is called the ‘operator’) or right (where
    it is called the ‘modifier’) of the column expression.
  id: totrans-4493
  prefs: []
  type: TYPE_NORMAL
  zh: 一元表达式有一个单列表达式和一个运算符。 运算符可以放在列表达式的左侧（称为‘运算符’）或右侧（称为‘修饰符’）。
- en: '[`UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression "sqlalchemy.sql.expression.UnaryExpression")
    is the basis for several unary operators including those used by [`desc()`](#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc"), [`asc()`](#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc"),
    [`distinct()`](#sqlalchemy.sql.expression.distinct "sqlalchemy.sql.expression.distinct"),
    [`nulls_first()`](#sqlalchemy.sql.expression.nulls_first "sqlalchemy.sql.expression.nulls_first")
    and [`nulls_last()`](#sqlalchemy.sql.expression.nulls_last "sqlalchemy.sql.expression.nulls_last").'
  id: totrans-4494
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression "sqlalchemy.sql.expression.UnaryExpression")
    是几个一元运算符的基础，包括[`desc()`](#sqlalchemy.sql.expression.desc "sqlalchemy.sql.expression.desc")、[`asc()`](#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc")、[`distinct()`](#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")、[`nulls_first()`](#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 和[`nulls_last()`](#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")。'
- en: '**Members**'
  id: totrans-4495
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[self_group()](#sqlalchemy.sql.expression.UnaryExpression.self_group)'
  id: totrans-4496
  prefs: []
  type: TYPE_NORMAL
  zh: '[self_group()](#sqlalchemy.sql.expression.UnaryExpression.self_group)'
- en: '**Class signature**'
  id: totrans-4497
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression") ([`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement"))
  id: totrans-4498
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.UnaryExpression`](#sqlalchemy.sql.expression.UnaryExpression
    "sqlalchemy.sql.expression.UnaryExpression")（[`sqlalchemy.sql.expression.ColumnElement`](#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")）
- en: '[PRE1119]'
  id: totrans-4499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1119]'
- en: Apply a ‘grouping’ to this [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-4500
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")应用一个“分组”。
- en: This method is overridden by subclasses to return a “grouping” construct, i.e.
    parenthesis. In particular it’s used by “binary” expressions to provide a grouping
    around themselves when placed into a larger expression, as well as by [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs when placed into the FROM clause
    of another [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select").
    (Note that subqueries should be normally created using the [`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") method, as many platforms require nested
    SELECT statements to be named).
  id: totrans-4501
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法被子类重写为返回一个“分组”构造，即括号。特别是它被“二元”表达式用于在放置到更大表达式中时提供自身周围的分组，以及被[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造用于放置到另一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的FROM子句中。（注意，子查询通常应使用[`Select.alias()`](selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法创建，因为许多平台要求嵌套的SELECT语句有名称）。
- en: As expressions are composed together, the application of [`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group") is automatic - end-user
    code should never need to use this method directly. Note that SQLAlchemy’s clause
    constructs take operator precedence into account - so parenthesis might not be
    needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence
    over OR.
  id: totrans-4502
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式组合在一起时，自动应用[`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group") - 最终用户代码不应直接使用此方法。注意，SQLAlchemy的子句构造考虑了运算符优先级
    - 因此可能不需要括号，例如，在表达式`x OR (y AND z)`中 - AND优先于OR。
- en: The base [`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") just returns self.
  id: totrans-4503
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")的基本[`self_group()`](#sqlalchemy.sql.expression.UnaryExpression.self_group
    "sqlalchemy.sql.expression.UnaryExpression.self_group")方法只返回自身。'
- en: Column Element Typing Utilities
  id: totrans-4504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列元素类型工具
- en: Standalone utility functions imported from the `sqlalchemy` namespace to improve
    support by type checkers.
  id: totrans-4505
  prefs: []
  type: TYPE_NORMAL
  zh: 从`sqlalchemy`命名空间导入的独立实用函数，以提高类型检查器的支持。
- en: '| Object Name | Description |'
  id: totrans-4506
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4507
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [NotNullable](#sqlalchemy.NotNullable)(val) | Types a column or ORM class
    as not nullable. |'
  id: totrans-4508
  prefs: []
  type: TYPE_TB
  zh: '| [NotNullable](#sqlalchemy.NotNullable)(val) | 将列或ORM类的类型定义为非空。 |'
- en: '| [Nullable](#sqlalchemy.Nullable)(val) | Types a column or ORM class as nullable.
    |'
  id: totrans-4509
  prefs: []
  type: TYPE_TB
  zh: '| [Nullable](#sqlalchemy.Nullable)(val) | 将列或ORM类的类型定义为可空。 |'
- en: '[PRE1120]'
  id: totrans-4510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1120]'
- en: Types a column or ORM class as not nullable.
  id: totrans-4511
  prefs: []
  type: TYPE_NORMAL
  zh: 将列或ORM类的类型定义为非空。
- en: 'This can be used in select and other contexts to express that the value of
    a column cannot be null, for example due to a where condition on a nullable column:'
  id: totrans-4512
  prefs: []
  type: TYPE_NORMAL
  zh: 这可用于选择和其他上下文中，以表达列的值不能为null，例如由于对可空列的where条件：
- en: '[PRE1121]'
  id: totrans-4513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1121]'
- en: At runtime this method returns the input unchanged.
  id: totrans-4514
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此方法返回未更改的输入。
- en: New in version 2.0.20.
  id: totrans-4515
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.20 中的新功能。
- en: '[PRE1122]'
  id: totrans-4516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1122]'
- en: Types a column or ORM class as nullable.
  id: totrans-4517
  prefs: []
  type: TYPE_NORMAL
  zh: 将列或ORM类的类型定义为可空。
- en: 'This can be used in select and other contexts to express that the value of
    a column can be null, for example due to an outer join:'
  id: totrans-4518
  prefs: []
  type: TYPE_NORMAL
  zh: 这可用于选择和其他上下文中，以表达列的值可以为null，例如由于外连接：
- en: '[PRE1123]'
  id: totrans-4519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1123]'
- en: At runtime this method returns the input unchanged.
  id: totrans-4520
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此方法返回未更改的输入。
- en: New in version 2.0.20.
  id: totrans-4521
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.20 中的新功能。
