["```py\npip install sqlalchemy[mypy]\n```", "```py\n[mypy]\nplugins = sqlalchemy.ext.mypy.plugin\n```", "```py\nfrom sqlalchemy import Column, Integer, String, select\nfrom sqlalchemy.orm import declarative_base\n\n# \"Base\" is a class that is created dynamically from the\n# declarative_base() function\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n# \"some_user\" is an instance of the User class, which\n# accepts \"id\" and \"name\" kwargs based on the mapping\nsome_user = User(id=5, name=\"user\")\n\n# it has an attribute called .name that's a string\nprint(f\"Username: {some_user.name}\")\n\n# a select() construct makes use of SQL expressions derived from the\n# User class itself\nselect_stmt = select(User).where(User.id.in_([3, 4, 5])).where(User.name.contains(\"s\"))\n```", "```py\nfrom sqlalchemy import Column, Integer, String, select\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm.decl_api import DeclarativeMeta\n\nclass Base(metaclass=DeclarativeMeta):\n    __abstract__ = True\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[Optional[int]] = Mapped._special_method(\n        Column(Integer, primary_key=True)\n    )\n    name: Mapped[Optional[str]] = Mapped._special_method(Column(String))\n\n    def __init__(self, id: Optional[int] = ..., name: Optional[str] = ...) -> None: ...\n\nsome_user = User(id=5, name=\"user\")\n\nprint(f\"Username: {some_user.name}\")\n\nselect_stmt = select(User).where(User.id.in_([3, 4, 5])).where(User.name.contains(\"s\"))\n```", "```py\nclass MyClass(Base):\n    # ...\n\n    id = Column(Integer, primary_key=True)\n    name = Column(\"employee_name\", String(50), nullable=False)\n    other_name = Column(String(50))\n```", "```py\n>>> m1 = MyClass()\n>>> m1.id\nNone\n```", "```py\nclass MyClass(Base):\n    # ...\n\n    id: int = Column(Integer, primary_key=True)\n    name: str = Column(\"employee_name\", String(50), nullable=False)\n    other_name: Optional[str] = Column(String(50))\n```", "```py\nfrom sqlalchemy.orm import Mapped\n\nclass MyClass(Base):\n    # ...\n\n    id: Mapped[int] = Column(Integer, primary_key=True)\n    name: Mapped[str] = Column(\"employee_name\", String(50), nullable=False)\n    other_name: Mapped[Optional[str]] = Column(String(50))\n```", "```py\nmc = MyClass(...)\n\n# will pass mypy --strict\nname: str = mc.name\n```", "```py\nmc = MyClass(...)\n\n# will pass mypy --strict\nother_name: Optional[str] = mc.name\n```", "```py\n# .. other imports\nfrom sqlalchemy.sql.schema import ForeignKey\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(ForeignKey(\"user.id\"))\n```", "```py\n$ mypy test3.py --strict\ntest3.py:20: error: [SQLAlchemy Mypy plugin] Can't infer type from\nORM mapped expression assigned to attribute 'user_id'; please specify a\nPython type or Mapped[<python type>] on the left hand side.\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n```", "```py\nclass MyClass(Base):\n    __table__ = Table(\n        \"mytable\",\n        Base.metadata,\n        Column(Integer, primary_key=True),\n        Column(\"employee_name\", String(50), nullable=False),\n        Column(String(50)),\n    )\n\n    id: Mapped[int]\n    name: Mapped[str]\n    other_name: Mapped[Optional[str]]\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user = relationship(User)\n```", "```py\ntest3.py:22: error: [SQLAlchemy Mypy plugin] Can't infer scalar or\ncollection for ORM mapped expression assigned to attribute 'user'\nif both 'uselist' and 'collection_class' arguments are absent from the\nrelationship(); please specify a type annotation on the left hand side.\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user: User = relationship(User)\n```", "```py\nfrom typing import TYPE_CHECKING, List\n\nfrom .mymodel import Base\n\nif TYPE_CHECKING:\n    # if the target of the relationship is in another module\n    # that cannot normally be imported at runtime\n    from .myaddressmodel import Address\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    addresses: List[\"Address\"] = relationship(\"Address\")\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    addresses: Mapped[List[\"Address\"]] = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user: Mapped[User] = relationship(User, back_populates=\"addresses\")\n```", "```py\nfrom sqlalchemy.orm import declarative_mixin, declared_attr\n\n@declarative_mixin\nclass HasUpdatedAt:\n    @declared_attr\n    def updated_at(cls) -> Column[DateTime]:  # uses Column\n        return Column(DateTime)\n\n@declarative_mixin\nclass HasCompany:\n    @declared_attr\n    def company_id(cls) -> Mapped[int]:  # uses Mapped\n        return Column(ForeignKey(\"company.id\"))\n\n    @declared_attr\n    def company(cls) -> Mapped[\"Company\"]:\n        return relationship(\"Company\")\n\nclass Employee(HasUpdatedAt, HasCompany, Base):\n    __tablename__ = \"employee\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n```", "```py\n# what Mypy sees\nclass HasCompany:\n    company_id: Mapped[int]\n    company: Mapped[\"Company\"]\n```", "```py\nmapper_registry: registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str] = None\n    nickname: Optional[str] = None\n    addresses: List[Address] = field(default_factory=list)\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\"addresses\": relationship(\"Address\")}\n    }\n```", "```py\nstmt = select(User.name).where(User.id.in_([1, 2, 3]))\n```", "```py\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str]\n    nickname: Optional[str]\n    addresses: List[Address] = field(default_factory=list)\n\n    if TYPE_CHECKING:\n        _mypy_mapped_attrs = [id, name, \"fullname\", \"nickname\", addresses]\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\"addresses\": relationship(\"Address\")}\n    }\n```", "```py\npip install sqlalchemy[mypy]\n```", "```py\n[mypy]\nplugins = sqlalchemy.ext.mypy.plugin\n```", "```py\nfrom sqlalchemy import Column, Integer, String, select\nfrom sqlalchemy.orm import declarative_base\n\n# \"Base\" is a class that is created dynamically from the\n# declarative_base() function\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n# \"some_user\" is an instance of the User class, which\n# accepts \"id\" and \"name\" kwargs based on the mapping\nsome_user = User(id=5, name=\"user\")\n\n# it has an attribute called .name that's a string\nprint(f\"Username: {some_user.name}\")\n\n# a select() construct makes use of SQL expressions derived from the\n# User class itself\nselect_stmt = select(User).where(User.id.in_([3, 4, 5])).where(User.name.contains(\"s\"))\n```", "```py\nfrom sqlalchemy import Column, Integer, String, select\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm.decl_api import DeclarativeMeta\n\nclass Base(metaclass=DeclarativeMeta):\n    __abstract__ = True\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[Optional[int]] = Mapped._special_method(\n        Column(Integer, primary_key=True)\n    )\n    name: Mapped[Optional[str]] = Mapped._special_method(Column(String))\n\n    def __init__(self, id: Optional[int] = ..., name: Optional[str] = ...) -> None: ...\n\nsome_user = User(id=5, name=\"user\")\n\nprint(f\"Username: {some_user.name}\")\n\nselect_stmt = select(User).where(User.id.in_([3, 4, 5])).where(User.name.contains(\"s\"))\n```", "```py\nclass MyClass(Base):\n    # ...\n\n    id = Column(Integer, primary_key=True)\n    name = Column(\"employee_name\", String(50), nullable=False)\n    other_name = Column(String(50))\n```", "```py\n>>> m1 = MyClass()\n>>> m1.id\nNone\n```", "```py\nclass MyClass(Base):\n    # ...\n\n    id: int = Column(Integer, primary_key=True)\n    name: str = Column(\"employee_name\", String(50), nullable=False)\n    other_name: Optional[str] = Column(String(50))\n```", "```py\nfrom sqlalchemy.orm import Mapped\n\nclass MyClass(Base):\n    # ...\n\n    id: Mapped[int] = Column(Integer, primary_key=True)\n    name: Mapped[str] = Column(\"employee_name\", String(50), nullable=False)\n    other_name: Mapped[Optional[str]] = Column(String(50))\n```", "```py\nmc = MyClass(...)\n\n# will pass mypy --strict\nname: str = mc.name\n```", "```py\nmc = MyClass(...)\n\n# will pass mypy --strict\nother_name: Optional[str] = mc.name\n```", "```py\n# .. other imports\nfrom sqlalchemy.sql.schema import ForeignKey\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(ForeignKey(\"user.id\"))\n```", "```py\n$ mypy test3.py --strict\ntest3.py:20: error: [SQLAlchemy Mypy plugin] Can't infer type from\nORM mapped expression assigned to attribute 'user_id'; please specify a\nPython type or Mapped[<python type>] on the left hand side.\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n```", "```py\nclass MyClass(Base):\n    __table__ = Table(\n        \"mytable\",\n        Base.metadata,\n        Column(Integer, primary_key=True),\n        Column(\"employee_name\", String(50), nullable=False),\n        Column(String(50)),\n    )\n\n    id: Mapped[int]\n    name: Mapped[str]\n    other_name: Mapped[Optional[str]]\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user = relationship(User)\n```", "```py\ntest3.py:22: error: [SQLAlchemy Mypy plugin] Can't infer scalar or\ncollection for ORM mapped expression assigned to attribute 'user'\nif both 'uselist' and 'collection_class' arguments are absent from the\nrelationship(); please specify a type annotation on the left hand side.\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user: User = relationship(User)\n```", "```py\nfrom typing import TYPE_CHECKING, List\n\nfrom .mymodel import Base\n\nif TYPE_CHECKING:\n    # if the target of the relationship is in another module\n    # that cannot normally be imported at runtime\n    from .myaddressmodel import Address\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    addresses: List[\"Address\"] = relationship(\"Address\")\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    addresses: Mapped[List[\"Address\"]] = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user: Mapped[User] = relationship(User, back_populates=\"addresses\")\n```", "```py\nfrom sqlalchemy.orm import declarative_mixin, declared_attr\n\n@declarative_mixin\nclass HasUpdatedAt:\n    @declared_attr\n    def updated_at(cls) -> Column[DateTime]:  # uses Column\n        return Column(DateTime)\n\n@declarative_mixin\nclass HasCompany:\n    @declared_attr\n    def company_id(cls) -> Mapped[int]:  # uses Mapped\n        return Column(ForeignKey(\"company.id\"))\n\n    @declared_attr\n    def company(cls) -> Mapped[\"Company\"]:\n        return relationship(\"Company\")\n\nclass Employee(HasUpdatedAt, HasCompany, Base):\n    __tablename__ = \"employee\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n```", "```py\n# what Mypy sees\nclass HasCompany:\n    company_id: Mapped[int]\n    company: Mapped[\"Company\"]\n```", "```py\nmapper_registry: registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str] = None\n    nickname: Optional[str] = None\n    addresses: List[Address] = field(default_factory=list)\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\"addresses\": relationship(\"Address\")}\n    }\n```", "```py\nstmt = select(User.name).where(User.id.in_([1, 2, 3]))\n```", "```py\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str]\n    nickname: Optional[str]\n    addresses: List[Address] = field(default_factory=list)\n\n    if TYPE_CHECKING:\n        _mypy_mapped_attrs = [id, name, \"fullname\", \"nickname\", addresses]\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\"addresses\": relationship(\"Address\")}\n    }\n```", "```py\nclass MyClass(Base):\n    # ...\n\n    id = Column(Integer, primary_key=True)\n    name = Column(\"employee_name\", String(50), nullable=False)\n    other_name = Column(String(50))\n```", "```py\n>>> m1 = MyClass()\n>>> m1.id\nNone\n```", "```py\nclass MyClass(Base):\n    # ...\n\n    id: int = Column(Integer, primary_key=True)\n    name: str = Column(\"employee_name\", String(50), nullable=False)\n    other_name: Optional[str] = Column(String(50))\n```", "```py\nfrom sqlalchemy.orm import Mapped\n\nclass MyClass(Base):\n    # ...\n\n    id: Mapped[int] = Column(Integer, primary_key=True)\n    name: Mapped[str] = Column(\"employee_name\", String(50), nullable=False)\n    other_name: Mapped[Optional[str]] = Column(String(50))\n```", "```py\nmc = MyClass(...)\n\n# will pass mypy --strict\nname: str = mc.name\n```", "```py\nmc = MyClass(...)\n\n# will pass mypy --strict\nother_name: Optional[str] = mc.name\n```", "```py\n# .. other imports\nfrom sqlalchemy.sql.schema import ForeignKey\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(ForeignKey(\"user.id\"))\n```", "```py\n$ mypy test3.py --strict\ntest3.py:20: error: [SQLAlchemy Mypy plugin] Can't infer type from\nORM mapped expression assigned to attribute 'user_id'; please specify a\nPython type or Mapped[<python type>] on the left hand side.\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n```", "```py\nclass MyClass(Base):\n    __table__ = Table(\n        \"mytable\",\n        Base.metadata,\n        Column(Integer, primary_key=True),\n        Column(\"employee_name\", String(50), nullable=False),\n        Column(String(50)),\n    )\n\n    id: Mapped[int]\n    name: Mapped[str]\n    other_name: Mapped[Optional[str]]\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user = relationship(User)\n```", "```py\ntest3.py:22: error: [SQLAlchemy Mypy plugin] Can't infer scalar or\ncollection for ORM mapped expression assigned to attribute 'user'\nif both 'uselist' and 'collection_class' arguments are absent from the\nrelationship(); please specify a type annotation on the left hand side.\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user: User = relationship(User)\n```", "```py\nfrom typing import TYPE_CHECKING, List\n\nfrom .mymodel import Base\n\nif TYPE_CHECKING:\n    # if the target of the relationship is in another module\n    # that cannot normally be imported at runtime\n    from .myaddressmodel import Address\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    addresses: List[\"Address\"] = relationship(\"Address\")\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    addresses: Mapped[List[\"Address\"]] = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = Column(Integer, primary_key=True)\n    user_id: int = Column(ForeignKey(\"user.id\"))\n\n    user: Mapped[User] = relationship(User, back_populates=\"addresses\")\n```", "```py\nfrom sqlalchemy.orm import declarative_mixin, declared_attr\n\n@declarative_mixin\nclass HasUpdatedAt:\n    @declared_attr\n    def updated_at(cls) -> Column[DateTime]:  # uses Column\n        return Column(DateTime)\n\n@declarative_mixin\nclass HasCompany:\n    @declared_attr\n    def company_id(cls) -> Mapped[int]:  # uses Mapped\n        return Column(ForeignKey(\"company.id\"))\n\n    @declared_attr\n    def company(cls) -> Mapped[\"Company\"]:\n        return relationship(\"Company\")\n\nclass Employee(HasUpdatedAt, HasCompany, Base):\n    __tablename__ = \"employee\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n```", "```py\n# what Mypy sees\nclass HasCompany:\n    company_id: Mapped[int]\n    company: Mapped[\"Company\"]\n```", "```py\nmapper_registry: registry = registry()\n\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str] = None\n    nickname: Optional[str] = None\n    addresses: List[Address] = field(default_factory=list)\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\"addresses\": relationship(\"Address\")}\n    }\n```", "```py\nstmt = select(User.name).where(User.id.in_([1, 2, 3]))\n```", "```py\n@mapper_registry.mapped\n@dataclass\nclass User:\n    __table__ = Table(\n        \"user\",\n        mapper_registry.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"fullname\", String(50)),\n        Column(\"nickname\", String(12)),\n    )\n    id: int = field(init=False)\n    name: Optional[str] = None\n    fullname: Optional[str]\n    nickname: Optional[str]\n    addresses: List[Address] = field(default_factory=list)\n\n    if TYPE_CHECKING:\n        _mypy_mapped_attrs = [id, name, \"fullname\", \"nickname\", addresses]\n\n    __mapper_args__ = {  # type: ignore\n        \"properties\": {\"addresses\": relationship(\"Address\")}\n    }\n```"]