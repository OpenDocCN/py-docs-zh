["```py\n>>> from sqlalchemy import select\n>>> stmt = select(Manager).order_by(Manager.id)\n>>> managers = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  manager.id,  employee.id  AS  id_1,  employee.name,  employee.type,  employee.company_id,  manager.manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id  ORDER  BY  manager.id\n[...]  ()\n>>> print(managers)\n[Manager('Mr. Krabs')]\n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = select(Employee).order_by(Employee.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> mr_krabs = objects[0]\n>>> print(mr_krabs.manager_name)\nSELECT  manager.manager_name  AS  manager_manager_name\nFROM  manager\nWHERE  ?  =  manager.id\n[...]  (1,)\nEugene H. Krabs\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> loader_opt = selectin_polymorphic(Employee, [Manager, Engineer])\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> loader_opt = selectin_polymorphic(Employee, [Manager, Engineer])\n>>> stmt = select(Employee).order_by(Employee.id).options(loader_opt)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> print(objects[0].manager_name)\nEugene H. Krabs\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).selectin_polymorphic([Manager, Engineer])\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,\nmanager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,\nengineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nemployees: [Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> stmt = (\n...     select(Employee)\n...     .order_by(Employee.id)\n...     .options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\n>>> print(objects[0])\nManager('Mr. Krabs')\n>>> print(objects[0].paperwork)\n[Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     for employee in company.employees:\n...         if isinstance(employee, Manager):\n...             print(f\"manager: {employee.name} paperwork: {employee.paperwork}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nmanager: Mr. Krabs paperwork: [Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\n>>> from sqlalchemy.orm import with_polymorphic\n>>> employee_poly = with_polymorphic(Employee, [Engineer, Manager])\n```", "```py\n>>> employee_poly = with_polymorphic(Employee, \"*\")\n```", "```py\n>>> stmt = select(employee_poly).order_by(employee_poly.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id,\nmanager.id  AS  id_1,  manager.manager_name,  engineer.id  AS  id_2,  engineer.engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id  ORDER  BY  employee.id\n[...]  ()\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> print(objects[0].manager_name)\nEugene H. Krabs\n```", "```py\n>>> from sqlalchemy import or_\n>>> employee_poly = with_polymorphic(Employee, [Engineer, Manager])\n>>> stmt = (\n...     select(employee_poly)\n...     .where(\n...         or_(\n...             employee_poly.Manager.manager_name == \"Eugene H. Krabs\",\n...             employee_poly.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n...     .order_by(employee_poly.id)\n... )\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id,  manager.id  AS  id_1,\nmanager.manager_name,  engineer.id  AS  id_2,  engineer.engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  manager.manager_name  =  ?  OR  engineer.engineer_info  =  ?\nORDER  BY  employee.id\n[...]  ('Eugene H. Krabs',  'Senior Customer Engagement Engineer')\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('Squidward')]\n```", "```py\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True, flat=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True, flat=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> for manager, engineer in session.execute(stmt):\n...     print(f\"{manager} {engineer}\")\nSELECT\nemployee_1.id,  employee_1.name,  employee_1.type,  employee_1.company_id,\nmanager_1.id  AS  id_1,  manager_1.manager_name,\nemployee_2.id  AS  id_2,  employee_2.name  AS  name_1,  employee_2.type  AS  type_1,\nemployee_2.company_id  AS  company_id_1,  engineer_1.id  AS  id_3,  engineer_1.engineer_info\nFROM  employee  AS  employee_1\nLEFT  OUTER  JOIN  manager  AS  manager_1  ON  employee_1.id  =  manager_1.id\nJOIN\n  (employee  AS  employee_2  LEFT  OUTER  JOIN  engineer  AS  engineer_1  ON  employee_2.id  =  engineer_1.id)\nON  employee_2.company_id  =  employee_1.company_id\nWHERE  employee_1.name  =  ?  OR  manager_1.manager_name  =  ?\nORDER  BY  employee_2.name,  employee_1.name\n[...]  ('Mr. Krabs',  'Eugene H. Krabs')\nManager('Mr. Krabs') Manager('Mr. Krabs')\nManager('Mr. Krabs') Engineer('SpongeBob')\nManager('Mr. Krabs') Engineer('Squidward')\n```", "```py\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> print(stmt)\nSELECT  anon_1.employee_id,  anon_1.employee_name,  anon_1.employee_type,\nanon_1.employee_company_id,  anon_1.manager_id,  anon_1.manager_manager_name,  anon_2.employee_id  AS  employee_id_1,\nanon_2.employee_name  AS  employee_name_1,  anon_2.employee_type  AS  employee_type_1,\nanon_2.employee_company_id  AS  employee_company_id_1,  anon_2.engineer_id,  anon_2.engineer_engineer_info\nFROM\n(SELECT  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.company_id  AS  employee_company_id,\nmanager.id  AS  manager_id,  manager.manager_name  AS  manager_manager_name\nFROM  employee  LEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id)  AS  anon_1\nJOIN\n(SELECT  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.company_id  AS  employee_company_id,  engineer.id  AS  engineer_id,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  LEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id)  AS  anon_2\nON  anon_2.employee_company_id  =  anon_1.employee_company_id\nWHERE  anon_1.employee_name  =  :employee_name_2  OR  anon_1.manager_manager_name  =  :manager_manager_name_1\nORDER  BY  anon_2.employee_name,  anon_1.employee_name \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nprint(select(Employee))\nSELECT  employee.id,  employee.name,  employee.type,  engineer.id  AS  id_1,\nengineer.engineer_info,  manager.id  AS  id_2,  manager.manager_name\nFROM  employee\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id \n```", "```py\nprint(\n select(Employee).where(\n or_(Manager.manager_name == \"x\", Engineer.engineer_info == \"y\")\n )\n)\nSELECT  employee.id,  employee.name,  employee.type,  engineer.id  AS  id_1,\nengineer.engineer_info,  manager.id  AS  id_2,  manager.manager_name\nFROM  employee\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  manager.manager_name  =  :manager_name_1\nOR  engineer.engineer_info  =  :engineer_info_1 \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_on\": type,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\n>>> employee_plus_engineer = with_polymorphic(Employee, [Engineer])\n>>> stmt = (\n...     select(Company.name, employee_plus_engineer.name)\n...     .join(Company.employees.of_type(employee_plus_engineer))\n...     .where(\n...         or_(\n...             employee_plus_engineer.name == \"SpongeBob\",\n...             employee_plus_engineer.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n... )\n>>> for company_name, emp_name in session.execute(stmt):\n...     print(f\"{company_name} {emp_name}\")\nSELECT  company.name,  employee.name  AS  name_1\nFROM  company  JOIN  (employee  LEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id)  ON  company.id  =  employee.company_id\nWHERE  employee.name  =  ?  OR  engineer.engineer_info  =  ?\n[...]  ('SpongeBob',  'Senior Customer Engagement Engineer')\nKrusty Krab SpongeBob\nKrusty Krab Squidward\n```", "```py\n>>> stmt = (\n...     select(Company.name, Engineer.name)\n...     .join(Company.employees.of_type(Engineer))\n...     .where(\n...         or_(\n...             Engineer.name == \"SpongeBob\",\n...             Engineer.engineer_info == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n... )\n>>> for company_name, emp_name in session.execute(stmt):\n...     print(f\"{company_name} {emp_name}\")\nSELECT  company.name,  employee.name  AS  name_1\nFROM  company  JOIN  (employee  JOIN  engineer  ON  employee.id  =  engineer.id)  ON  company.id  =  employee.company_id\nWHERE  employee.name  =  ?  OR  engineer.engineer_info  =  ?\n[...]  ('SpongeBob',  'Senior Customer Engagement Engineer')\nKrusty Krab SpongeBob\nKrusty Krab Squidward\n```", "```py\n>>> all_employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(Company).options(selectinload(Company.employees.of_type(all_employees)))\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type,  manager.id  AS  manager_id,\nmanager.manager_name  AS  manager_manager_name,  engineer.id  AS  engineer_id,\nengineer.engineer_info  AS  engineer_engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\ncompany:  Krusty  Krab\nemployees:  [Manager('Mr. Krabs'),  Engineer('SpongeBob'),  Engineer('Squidward')] \n```", "```py\n>>> stmt = select(Employee).order_by(Employee.id)\n>>> for obj in session.scalars(stmt):\n...     print(f\"{obj}\")\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nManager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n```", "```py\n>>> stmt = select(Engineer).order_by(Engineer.id)\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.engineer_info\nFROM  employee\nWHERE  employee.type  IN  (?)  ORDER  BY  employee.id\n[...]  ('engineer',)\n>>> for obj in objects:\n...     print(f\"{obj}\")\nEngineer('SpongeBob')\nEngineer('Squidward')\n```", "```py\n>>> mr_krabs = session.scalars(select(Employee).where(Employee.name == \"Mr. Krabs\")).one()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type\nFROM  employee\nWHERE  employee.name  =  ?\n[...]  ('Mr. Krabs',)\n>>> mr_krabs.manager_name\nSELECT  employee.manager_name  AS  employee_manager_name\nFROM  employee\nWHERE  employee.id  =  ?  AND  employee.type  IN  (?)\n[...]  (1,  'manager')\n'Eugene H. Krabs'\n```", "```py\n>>> employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(employees).order_by(employees.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,\nemployee.manager_name,  employee.engineer_info\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\n>>> for obj in objects:\n...     print(f\"{obj}\")\nManager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n>>> objects[0].manager_name\n'Eugene H. Krabs'\n```", "```py\n>>> class Base(DeclarativeBase):\n...     pass\n>>> class Employee(Base):\n...     __tablename__ = \"employee\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     type: Mapped[str]\n...\n...     def __repr__(self):\n...         return f\"{self.__class__.__name__}({self.name!r})\"\n...\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"employee\",\n...         \"polymorphic_on\": \"type\",\n...     }\n>>> class Manager(Employee):\n...     manager_name: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"manager\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n>>> class Engineer(Employee):\n...     engineer_info: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"engineer\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n```", "```py\n>>> print(select(Employee))\nSELECT  employee.id,  employee.name,  employee.type,\nemployee.manager_name,  employee.engineer_info\nFROM  employee \n```", "```py\nfunction sqlalchemy.orm.with_polymorphic(base: Type[_O] | Mapper[_O], classes: Literal['*'] | Iterable[Type[Any]], selectable: Literal[False, None] | FromClause = False, flat: bool = False, polymorphic_on: ColumnElement[Any] | None = None, aliased: bool = False, innerjoin: bool = False, adapt_on_names: bool = False, _use_mapper_path: bool = False) \u2192 AliasedClass[_O]\n```", "```py\nfunction sqlalchemy.orm.selectin_polymorphic(base_cls: _EntityType[Any], classes: Iterable[Type[Any]]) \u2192 _AbstractLoad\n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = select(Manager).order_by(Manager.id)\n>>> managers = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  manager.id,  employee.id  AS  id_1,  employee.name,  employee.type,  employee.company_id,  manager.manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id  ORDER  BY  manager.id\n[...]  ()\n>>> print(managers)\n[Manager('Mr. Krabs')]\n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = select(Employee).order_by(Employee.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> mr_krabs = objects[0]\n>>> print(mr_krabs.manager_name)\nSELECT  manager.manager_name  AS  manager_manager_name\nFROM  manager\nWHERE  ?  =  manager.id\n[...]  (1,)\nEugene H. Krabs\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> loader_opt = selectin_polymorphic(Employee, [Manager, Engineer])\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> loader_opt = selectin_polymorphic(Employee, [Manager, Engineer])\n>>> stmt = select(Employee).order_by(Employee.id).options(loader_opt)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> print(objects[0].manager_name)\nEugene H. Krabs\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).selectin_polymorphic([Manager, Engineer])\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,\nmanager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,\nengineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nemployees: [Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> stmt = (\n...     select(Employee)\n...     .order_by(Employee.id)\n...     .options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\n>>> print(objects[0])\nManager('Mr. Krabs')\n>>> print(objects[0].paperwork)\n[Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     for employee in company.employees:\n...         if isinstance(employee, Manager):\n...             print(f\"manager: {employee.name} paperwork: {employee.paperwork}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nmanager: Mr. Krabs paperwork: [Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).selectin_polymorphic([Manager, Engineer])\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,\nmanager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,\nemployee.type  AS  employee_type,\nengineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nemployees: [Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> stmt = (\n...     select(Employee)\n...     .order_by(Employee.id)\n...     .options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\n>>> print(objects[0])\nManager('Mr. Krabs')\n>>> print(objects[0].paperwork)\n[Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     for employee in company.employees:\n...         if isinstance(employee, Manager):\n...             print(f\"manager: {employee.name} paperwork: {employee.paperwork}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nmanager: Mr. Krabs paperwork: [Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Company).options(\n...     selectinload(Company.employees).options(\n...         selectin_polymorphic(Employee, [Manager, Engineer]),\n...         selectinload(Manager.paperwork),\n...     )\n... )\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     for employee in company.employees:\n...         if isinstance(employee, Manager):\n...             print(f\"manager: {employee.name} paperwork: {employee.paperwork}\")\nBEGIN  (implicit)\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type\nFROM  employee\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\nSELECT  manager.id  AS  manager_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  manager.manager_name  AS  manager_manager_name\nFROM  employee  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  employee.id  IN  (?)  ORDER  BY  employee.id\n[...]  (1,)\nSELECT  paperwork.manager_id  AS  paperwork_manager_id,  paperwork.id  AS  paperwork_id,  paperwork.document_name  AS  paperwork_document_name\nFROM  paperwork\nWHERE  paperwork.manager_id  IN  (?)\n[...]  (1,)\nSELECT  engineer.id  AS  engineer_id,  employee.id  AS  employee_id,  employee.type  AS  employee_type,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.id  IN  (?,  ?)  ORDER  BY  employee.id\n[...]  (2,  3)\ncompany: Krusty Krab\nmanager: Mr. Krabs paperwork: [Paperwork('Secret Recipes'), Paperwork('Krabby Patty Orders')]\n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\n>>> from sqlalchemy.orm import with_polymorphic\n>>> employee_poly = with_polymorphic(Employee, [Engineer, Manager])\n```", "```py\n>>> employee_poly = with_polymorphic(Employee, \"*\")\n```", "```py\n>>> stmt = select(employee_poly).order_by(employee_poly.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id,\nmanager.id  AS  id_1,  manager.manager_name,  engineer.id  AS  id_2,  engineer.engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id  ORDER  BY  employee.id\n[...]  ()\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```", "```py\n>>> print(objects[0].manager_name)\nEugene H. Krabs\n```", "```py\n>>> from sqlalchemy import or_\n>>> employee_poly = with_polymorphic(Employee, [Engineer, Manager])\n>>> stmt = (\n...     select(employee_poly)\n...     .where(\n...         or_(\n...             employee_poly.Manager.manager_name == \"Eugene H. Krabs\",\n...             employee_poly.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n...     .order_by(employee_poly.id)\n... )\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id,  manager.id  AS  id_1,\nmanager.manager_name,  engineer.id  AS  id_2,  engineer.engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  manager.manager_name  =  ?  OR  engineer.engineer_info  =  ?\nORDER  BY  employee.id\n[...]  ('Eugene H. Krabs',  'Senior Customer Engagement Engineer')\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('Squidward')]\n```", "```py\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True, flat=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True, flat=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> for manager, engineer in session.execute(stmt):\n...     print(f\"{manager} {engineer}\")\nSELECT\nemployee_1.id,  employee_1.name,  employee_1.type,  employee_1.company_id,\nmanager_1.id  AS  id_1,  manager_1.manager_name,\nemployee_2.id  AS  id_2,  employee_2.name  AS  name_1,  employee_2.type  AS  type_1,\nemployee_2.company_id  AS  company_id_1,  engineer_1.id  AS  id_3,  engineer_1.engineer_info\nFROM  employee  AS  employee_1\nLEFT  OUTER  JOIN  manager  AS  manager_1  ON  employee_1.id  =  manager_1.id\nJOIN\n  (employee  AS  employee_2  LEFT  OUTER  JOIN  engineer  AS  engineer_1  ON  employee_2.id  =  engineer_1.id)\nON  employee_2.company_id  =  employee_1.company_id\nWHERE  employee_1.name  =  ?  OR  manager_1.manager_name  =  ?\nORDER  BY  employee_2.name,  employee_1.name\n[...]  ('Mr. Krabs',  'Eugene H. Krabs')\nManager('Mr. Krabs') Manager('Mr. Krabs')\nManager('Mr. Krabs') Engineer('SpongeBob')\nManager('Mr. Krabs') Engineer('Squidward')\n```", "```py\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> print(stmt)\nSELECT  anon_1.employee_id,  anon_1.employee_name,  anon_1.employee_type,\nanon_1.employee_company_id,  anon_1.manager_id,  anon_1.manager_manager_name,  anon_2.employee_id  AS  employee_id_1,\nanon_2.employee_name  AS  employee_name_1,  anon_2.employee_type  AS  employee_type_1,\nanon_2.employee_company_id  AS  employee_company_id_1,  anon_2.engineer_id,  anon_2.engineer_engineer_info\nFROM\n(SELECT  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.company_id  AS  employee_company_id,\nmanager.id  AS  manager_id,  manager.manager_name  AS  manager_manager_name\nFROM  employee  LEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id)  AS  anon_1\nJOIN\n(SELECT  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.company_id  AS  employee_company_id,  engineer.id  AS  engineer_id,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  LEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id)  AS  anon_2\nON  anon_2.employee_company_id  =  anon_1.employee_company_id\nWHERE  anon_1.employee_name  =  :employee_name_2  OR  anon_1.manager_manager_name  =  :manager_manager_name_1\nORDER  BY  anon_2.employee_name,  anon_1.employee_name \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nprint(select(Employee))\nSELECT  employee.id,  employee.name,  employee.type,  engineer.id  AS  id_1,\nengineer.engineer_info,  manager.id  AS  id_2,  manager.manager_name\nFROM  employee\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id \n```", "```py\nprint(\n select(Employee).where(\n or_(Manager.manager_name == \"x\", Engineer.engineer_info == \"y\")\n )\n)\nSELECT  employee.id,  employee.name,  employee.type,  engineer.id  AS  id_1,\nengineer.engineer_info,  manager.id  AS  id_2,  manager.manager_name\nFROM  employee\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  manager.manager_name  =  :manager_name_1\nOR  engineer.engineer_info  =  :engineer_info_1 \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_on\": type,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\n>>> from sqlalchemy import or_\n>>> employee_poly = with_polymorphic(Employee, [Engineer, Manager])\n>>> stmt = (\n...     select(employee_poly)\n...     .where(\n...         or_(\n...             employee_poly.Manager.manager_name == \"Eugene H. Krabs\",\n...             employee_poly.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n...     .order_by(employee_poly.id)\n... )\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.company_id,  manager.id  AS  id_1,\nmanager.manager_name,  engineer.id  AS  id_2,  engineer.engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  manager.manager_name  =  ?  OR  engineer.engineer_info  =  ?\nORDER  BY  employee.id\n[...]  ('Eugene H. Krabs',  'Senior Customer Engagement Engineer')\n>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('Squidward')]\n```", "```py\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True, flat=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True, flat=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> for manager, engineer in session.execute(stmt):\n...     print(f\"{manager} {engineer}\")\nSELECT\nemployee_1.id,  employee_1.name,  employee_1.type,  employee_1.company_id,\nmanager_1.id  AS  id_1,  manager_1.manager_name,\nemployee_2.id  AS  id_2,  employee_2.name  AS  name_1,  employee_2.type  AS  type_1,\nemployee_2.company_id  AS  company_id_1,  engineer_1.id  AS  id_3,  engineer_1.engineer_info\nFROM  employee  AS  employee_1\nLEFT  OUTER  JOIN  manager  AS  manager_1  ON  employee_1.id  =  manager_1.id\nJOIN\n  (employee  AS  employee_2  LEFT  OUTER  JOIN  engineer  AS  engineer_1  ON  employee_2.id  =  engineer_1.id)\nON  employee_2.company_id  =  employee_1.company_id\nWHERE  employee_1.name  =  ?  OR  manager_1.manager_name  =  ?\nORDER  BY  employee_2.name,  employee_1.name\n[...]  ('Mr. Krabs',  'Eugene H. Krabs')\nManager('Mr. Krabs') Manager('Mr. Krabs')\nManager('Mr. Krabs') Engineer('SpongeBob')\nManager('Mr. Krabs') Engineer('Squidward')\n```", "```py\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> print(stmt)\nSELECT  anon_1.employee_id,  anon_1.employee_name,  anon_1.employee_type,\nanon_1.employee_company_id,  anon_1.manager_id,  anon_1.manager_manager_name,  anon_2.employee_id  AS  employee_id_1,\nanon_2.employee_name  AS  employee_name_1,  anon_2.employee_type  AS  employee_type_1,\nanon_2.employee_company_id  AS  employee_company_id_1,  anon_2.engineer_id,  anon_2.engineer_engineer_info\nFROM\n(SELECT  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.company_id  AS  employee_company_id,\nmanager.id  AS  manager_id,  manager.manager_name  AS  manager_manager_name\nFROM  employee  LEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id)  AS  anon_1\nJOIN\n(SELECT  employee.id  AS  employee_id,  employee.name  AS  employee_name,  employee.type  AS  employee_type,\nemployee.company_id  AS  employee_company_id,  engineer.id  AS  engineer_id,  engineer.engineer_info  AS  engineer_engineer_info\nFROM  employee  LEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id)  AS  anon_2\nON  anon_2.employee_company_id  =  anon_1.employee_company_id\nWHERE  anon_1.employee_name  =  :employee_name_2  OR  anon_1.manager_manager_name  =  :manager_manager_name_1\nORDER  BY  anon_2.employee_name,  anon_1.employee_name \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\nprint(select(Employee))\nSELECT  employee.id,  employee.name,  employee.type,  engineer.id  AS  id_1,\nengineer.engineer_info,  manager.id  AS  id_2,  manager.manager_name\nFROM  employee\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id \n```", "```py\nprint(\n select(Employee).where(\n or_(Manager.manager_name == \"x\", Engineer.engineer_info == \"y\")\n )\n)\nSELECT  employee.id,  employee.name,  employee.type,  engineer.id  AS  id_1,\nengineer.engineer_info,  manager.id  AS  id_2,  manager.manager_name\nFROM  employee\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nWHERE  manager.manager_name  =  :manager_name_1\nOR  engineer.engineer_info  =  :engineer_info_1 \n```", "```py\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_on\": type,\n    }\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```", "```py\n>>> employee_plus_engineer = with_polymorphic(Employee, [Engineer])\n>>> stmt = (\n...     select(Company.name, employee_plus_engineer.name)\n...     .join(Company.employees.of_type(employee_plus_engineer))\n...     .where(\n...         or_(\n...             employee_plus_engineer.name == \"SpongeBob\",\n...             employee_plus_engineer.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n... )\n>>> for company_name, emp_name in session.execute(stmt):\n...     print(f\"{company_name} {emp_name}\")\nSELECT  company.name,  employee.name  AS  name_1\nFROM  company  JOIN  (employee  LEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id)  ON  company.id  =  employee.company_id\nWHERE  employee.name  =  ?  OR  engineer.engineer_info  =  ?\n[...]  ('SpongeBob',  'Senior Customer Engagement Engineer')\nKrusty Krab SpongeBob\nKrusty Krab Squidward\n```", "```py\n>>> stmt = (\n...     select(Company.name, Engineer.name)\n...     .join(Company.employees.of_type(Engineer))\n...     .where(\n...         or_(\n...             Engineer.name == \"SpongeBob\",\n...             Engineer.engineer_info == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n... )\n>>> for company_name, emp_name in session.execute(stmt):\n...     print(f\"{company_name} {emp_name}\")\nSELECT  company.name,  employee.name  AS  name_1\nFROM  company  JOIN  (employee  JOIN  engineer  ON  employee.id  =  engineer.id)  ON  company.id  =  employee.company_id\nWHERE  employee.name  =  ?  OR  engineer.engineer_info  =  ?\n[...]  ('SpongeBob',  'Senior Customer Engagement Engineer')\nKrusty Krab SpongeBob\nKrusty Krab Squidward\n```", "```py\n>>> all_employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(Company).options(selectinload(Company.employees.of_type(all_employees)))\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type,  manager.id  AS  manager_id,\nmanager.manager_name  AS  manager_manager_name,  engineer.id  AS  engineer_id,\nengineer.engineer_info  AS  engineer_engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\ncompany:  Krusty  Krab\nemployees:  [Manager('Mr. Krabs'),  Engineer('SpongeBob'),  Engineer('Squidward')] \n```", "```py\n>>> all_employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(Company).options(selectinload(Company.employees.of_type(all_employees)))\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\nSELECT  company.id,  company.name\nFROM  company\n[...]  ()\nSELECT  employee.company_id  AS  employee_company_id,  employee.id  AS  employee_id,\nemployee.name  AS  employee_name,  employee.type  AS  employee_type,  manager.id  AS  manager_id,\nmanager.manager_name  AS  manager_manager_name,  engineer.id  AS  engineer_id,\nengineer.engineer_info  AS  engineer_engineer_info\nFROM  employee\nLEFT  OUTER  JOIN  manager  ON  employee.id  =  manager.id\nLEFT  OUTER  JOIN  engineer  ON  employee.id  =  engineer.id\nWHERE  employee.company_id  IN  (?)\n[...]  (1,)\ncompany:  Krusty  Krab\nemployees:  [Manager('Mr. Krabs'),  Engineer('SpongeBob'),  Engineer('Squidward')] \n```", "```py\n>>> stmt = select(Employee).order_by(Employee.id)\n>>> for obj in session.scalars(stmt):\n...     print(f\"{obj}\")\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\nManager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n```", "```py\n>>> stmt = select(Engineer).order_by(Engineer.id)\n>>> objects = session.scalars(stmt).all()\nSELECT  employee.id,  employee.name,  employee.type,  employee.engineer_info\nFROM  employee\nWHERE  employee.type  IN  (?)  ORDER  BY  employee.id\n[...]  ('engineer',)\n>>> for obj in objects:\n...     print(f\"{obj}\")\nEngineer('SpongeBob')\nEngineer('Squidward')\n```", "```py\n>>> mr_krabs = session.scalars(select(Employee).where(Employee.name == \"Mr. Krabs\")).one()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type\nFROM  employee\nWHERE  employee.name  =  ?\n[...]  ('Mr. Krabs',)\n>>> mr_krabs.manager_name\nSELECT  employee.manager_name  AS  employee_manager_name\nFROM  employee\nWHERE  employee.id  =  ?  AND  employee.type  IN  (?)\n[...]  (1,  'manager')\n'Eugene H. Krabs'\n```", "```py\n>>> employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(employees).order_by(employees.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,\nemployee.manager_name,  employee.engineer_info\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\n>>> for obj in objects:\n...     print(f\"{obj}\")\nManager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n>>> objects[0].manager_name\n'Eugene H. Krabs'\n```", "```py\n>>> class Base(DeclarativeBase):\n...     pass\n>>> class Employee(Base):\n...     __tablename__ = \"employee\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     type: Mapped[str]\n...\n...     def __repr__(self):\n...         return f\"{self.__class__.__name__}({self.name!r})\"\n...\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"employee\",\n...         \"polymorphic_on\": \"type\",\n...     }\n>>> class Manager(Employee):\n...     manager_name: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"manager\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n>>> class Engineer(Employee):\n...     engineer_info: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"engineer\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n```", "```py\n>>> print(select(Employee))\nSELECT  employee.id,  employee.name,  employee.type,\nemployee.manager_name,  employee.engineer_info\nFROM  employee \n```", "```py\n>>> mr_krabs = session.scalars(select(Employee).where(Employee.name == \"Mr. Krabs\")).one()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type\nFROM  employee\nWHERE  employee.name  =  ?\n[...]  ('Mr. Krabs',)\n>>> mr_krabs.manager_name\nSELECT  employee.manager_name  AS  employee_manager_name\nFROM  employee\nWHERE  employee.id  =  ?  AND  employee.type  IN  (?)\n[...]  (1,  'manager')\n'Eugene H. Krabs'\n```", "```py\n>>> employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(employees).order_by(employees.id)\n>>> objects = session.scalars(stmt).all()\nBEGIN  (implicit)\nSELECT  employee.id,  employee.name,  employee.type,\nemployee.manager_name,  employee.engineer_info\nFROM  employee  ORDER  BY  employee.id\n[...]  ()\n>>> for obj in objects:\n...     print(f\"{obj}\")\nManager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n>>> objects[0].manager_name\n'Eugene H. Krabs'\n```", "```py\n>>> class Base(DeclarativeBase):\n...     pass\n>>> class Employee(Base):\n...     __tablename__ = \"employee\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     type: Mapped[str]\n...\n...     def __repr__(self):\n...         return f\"{self.__class__.__name__}({self.name!r})\"\n...\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"employee\",\n...         \"polymorphic_on\": \"type\",\n...     }\n>>> class Manager(Employee):\n...     manager_name: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"manager\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n>>> class Engineer(Employee):\n...     engineer_info: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"engineer\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n```", "```py\n>>> print(select(Employee))\nSELECT  employee.id,  employee.name,  employee.type,\nemployee.manager_name,  employee.engineer_info\nFROM  employee \n```", "```py\nfunction sqlalchemy.orm.with_polymorphic(base: Type[_O] | Mapper[_O], classes: Literal['*'] | Iterable[Type[Any]], selectable: Literal[False, None] | FromClause = False, flat: bool = False, polymorphic_on: ColumnElement[Any] | None = None, aliased: bool = False, innerjoin: bool = False, adapt_on_names: bool = False, _use_mapper_path: bool = False) \u2192 AliasedClass[_O]\n```", "```py\nfunction sqlalchemy.orm.selectin_polymorphic(base_cls: _EntityType[Any], classes: Iterable[Type[Any]]) \u2192 _AbstractLoad\n```"]