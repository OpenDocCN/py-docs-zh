- en: 'Public API: jax package'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共 API：jax 包
- en: 原文：[`jax.readthedocs.io/en/latest/jax.html`](https://jax.readthedocs.io/en/latest/jax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.html`](https://jax.readthedocs.io/en/latest/jax.html)
- en: Subpackages
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子包
- en: '`jax.numpy` module'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.numpy` 模块'
- en: '`jax.scipy` module'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.scipy` 模块'
- en: '`jax.lax` module'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.lax` 模块'
- en: '`jax.random` module'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.random` 模块'
- en: '`jax.sharding` module'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.sharding` 模块'
- en: '`jax.debug` module'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.debug` 模块'
- en: '`jax.dlpack` module'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.dlpack` 模块'
- en: '`jax.distributed` module'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.distributed` 模块'
- en: '`jax.dtypes` module'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.dtypes` 模块'
- en: '`jax.flatten_util` module'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.flatten_util` 模块'
- en: '`jax.image` module'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.image` 模块'
- en: '`jax.nn` module'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.nn` 模块'
- en: '`jax.ops` module'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.ops` 模块'
- en: '`jax.profiler` module'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.profiler` 模块'
- en: '`jax.stages` module'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.stages` 模块'
- en: '`jax.tree` module'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree` 模块'
- en: '`jax.tree_util` module'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util` 模块'
- en: '`jax.typing` module'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.typing` 模块'
- en: '`jax.export` module'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.export` 模块'
- en: '`jax.extend` module'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.extend` 模块'
- en: '`jax.example_libraries` module'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.example_libraries` 模块'
- en: '`jax.experimental` module'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.experimental` 模块'
- en: Configuration
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: '| `config` |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `config` |  |'
- en: '| `check_tracer_leaks` | Context manager for jax_check_tracer_leaks config
    option. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `check_tracer_leaks` | jax_check_tracer_leaks 配置选项的上下文管理器。 |'
- en: '| `checking_leaks` | Context manager for jax_check_tracer_leaks config option.
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `checking_leaks` | jax_check_tracer_leaks 配置选项的上下文管理器。 |'
- en: '| `debug_nans` | Context manager for jax_debug_nans config option. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `debug_nans` | jax_debug_nans 配置选项的上下文管理器。 |'
- en: '| `debug_infs` | Context manager for jax_debug_infs config option. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `debug_infs` | jax_debug_infs 配置选项的上下文管理器。 |'
- en: '| `default_device` | Context manager for jax_default_device config option.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `default_device` | jax_default_device 配置选项的上下文管理器。 |'
- en: '| `default_matmul_precision` | Context manager for jax_default_matmul_precision
    config option. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `default_matmul_precision` | jax_default_matmul_precision 配置选项的上下文管理器。 |'
- en: '| `default_prng_impl` | Context manager for jax_default_prng_impl config option.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `default_prng_impl` | jax_default_prng_impl 配置选项的上下文管理器。 |'
- en: '| `enable_checks` | Context manager for jax_enable_checks config option. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `enable_checks` | jax_enable_checks 配置选项的上下文管理器。 |'
- en: '| `enable_custom_prng` | Context manager for jax_enable_custom_prng config
    option (transient). |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `enable_custom_prng` | jax_enable_custom_prng 配置选项的上下文管理器（临时）。 |'
- en: '| `enable_custom_vjp_by_custom_transpose` | Context manager for jax_enable_custom_vjp_by_custom_transpose
    config option (transient). |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `enable_custom_vjp_by_custom_transpose` | jax_enable_custom_vjp_by_custom_transpose
    配置选项的上下文管理器（临时）。 |'
- en: '| `log_compiles` | Context manager for jax_log_compiles config option. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `log_compiles` | jax_log_compiles 配置选项的上下文管理器。 |'
- en: '| `numpy_rank_promotion` | Context manager for jax_numpy_rank_promotion config
    option. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `numpy_rank_promotion` | jax_numpy_rank_promotion 配置选项的上下文管理器。 |'
- en: '| `transfer_guard`(new_val) | A contextmanager to control the transfer guard
    level for all transfers. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `transfer_guard`(new_val) | 控制所有传输的传输保护级别的上下文管理器。 |'
- en: '## Just-in-time compilation (`jit`)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '## 即时编译 (`jit`)'
- en: '| `jit`(fun[, in_shardings, out_shardings, ...]) | Sets up `fun` for just-in-time
    compilation with XLA. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `jit`(fun[, in_shardings, out_shardings, ...]) | 使用 XLA 设置 `fun` 进行即时编译。
    |'
- en: '| `disable_jit`([disable]) | Context manager that disables `jit()` behavior
    under its dynamic context. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `disable_jit`([disable]) | 禁用其动态上下文下 `jit()` 行为的上下文管理器。 |'
- en: '| `ensure_compile_time_eval`() | Context manager to ensure evaluation at trace/compile
    time (or error). |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `ensure_compile_time_eval`() | 确保在追踪/编译时进行评估的上下文管理器（或错误）。 |'
- en: '| `xla_computation`(fun[, static_argnums, ...]) | Creates a function that produces
    its XLA computation given example args. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `xla_computation`(fun[, static_argnums, ...]) | 创建一个函数，给定示例参数，产生其 XLA 计算。
    |'
- en: '| `make_jaxpr`([axis_env, return_shape, ...]) | Creates a function that produces
    its jaxpr given example args. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `make_jaxpr`([axis_env, return_shape, ...]) | 创建一个函数，给定示例参数，产生其 jaxpr。 |'
- en: '| `eval_shape`(fun, *args, **kwargs) | Compute the shape/dtype of `fun` without
    any FLOPs. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `eval_shape`(fun, *args, **kwargs) | 计算 `fun` 的形状/数据类型，不进行任何 FLOP 计算。 |'
- en: '| `ShapeDtypeStruct`(shape, dtype[, ...]) | A container for the shape, dtype,
    and other static attributes of an array. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `ShapeDtypeStruct`(shape, dtype[, ...]) | 数组的形状、dtype 和其他静态属性的容器。 |'
- en: '| `device_put`(x[, device, src]) | Transfers `x` to `device`. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `device_put`(x[, device, src]) | 将 `x` 传输到 `device`。 |'
- en: '| `device_put_replicated`(x, devices) | Transfer array(s) to each specified
    device and form Array(s). |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `device_put_replicated`(x, devices) | 将数组传输到每个指定的设备并形成数组。 |'
- en: '| `device_put_sharded`(shards, devices) | Transfer array shards to specified
    devices and form Array(s). |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `device_put_sharded`(shards, devices) | 将数组片段传输到指定设备并形成数组。 |'
- en: '| `device_get`(x) | Transfer `x` to host. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `device_get`(x) | 将 `x` 传输到主机。 |'
- en: '| `default_backend`() | Returns the platform name of the default XLA backend.
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `default_backend`() | 返回默认 XLA 后端的平台名称。 |'
- en: '| `named_call`(fun, *[, name]) | Adds a user specified name to a function when
    staging out JAX computations. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `named_call`(fun, *[, name]) | 在 JAX 计算中给函数添加用户指定的名称。 |'
- en: '| `named_scope`(name) | A context manager that adds a user specified name to
    the JAX name stack. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `named_scope`(name) | 将用户指定的名称添加到 JAX 名称堆栈的上下文管理器。 |'
- en: '| `block_until_ready`(x) | Tries to call a `block_until_ready` method on pytree
    leaves. |  ## Automatic differentiation'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| `block_until_ready`(x) | 尝试调用 pytree 叶子上的 `block_until_ready` 方法。 |  ## 自动微分'
- en: '| `grad`(fun[, argnums, has_aux, holomorphic, ...]) | Creates a function that
    evaluates the gradient of `fun`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `grad`(fun[, argnums, has_aux, holomorphic, ...]) | 创建一个评估 `fun` 梯度的函数。 |'
- en: '| `value_and_grad`(fun[, argnums, has_aux, ...]) | Create a function that evaluates
    both `fun` and the gradient of `fun`. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `value_and_grad`(fun[, argnums, has_aux, ...]) | 创建一个同时评估 `fun` 和 `fun` 梯度的函数。
    |'
- en: '| `jacfwd`(fun[, argnums, has_aux, holomorphic]) | Jacobian of `fun` evaluated
    column-by-column using forward-mode AD. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `jacfwd`(fun[, argnums, has_aux, holomorphic]) | 使用正向模式自动微分逐列计算 `fun` 的雅可比矩阵。
    |'
- en: '| `jacrev`(fun[, argnums, has_aux, holomorphic, ...]) | Jacobian of `fun` evaluated
    row-by-row using reverse-mode AD. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `jacrev`(fun[, argnums, has_aux, holomorphic, ...]) | 使用反向模式自动微分逐行计算 `fun`
    的雅可比矩阵。 |'
- en: '| `hessian`(fun[, argnums, has_aux, holomorphic]) | Hessian of `fun` as a dense
    array. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `hessian`(fun[, argnums, has_aux, holomorphic]) | `fun` 的 Hessian 矩阵作为稠密数组。
    |'
- en: '| `jvp`(fun, primals, tangents[, has_aux]) | Computes a (forward-mode) Jacobian-vector
    product of `fun`. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `jvp`(fun, primals, tangents[, has_aux]) | 计算 `fun` 的（正向模式）雅可比向量乘积。 |'
- en: '| `linearize`() | Produces a linear approximation to `fun` using `jvp()` and
    partial eval. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `linearize`() | 使用 `jvp()` 和部分求值生成对 `fun` 的线性近似。 |'
- en: '| `linear_transpose`(fun, *primals[, reduce_axes]) | Transpose a function that
    is promised to be linear. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `linear_transpose`(fun, *primals[, reduce_axes]) | 转置一个承诺为线性的函数。 |'
- en: '| `vjp`() )) | Compute a (reverse-mode) vector-Jacobian product of `fun`. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `vjp`() )) | 计算 `fun` 的（反向模式）向量-Jacobian 乘积。 |'
- en: '| `custom_jvp`(fun[, nondiff_argnums]) | Set up a JAX-transformable function
    for a custom JVP rule definition. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `custom_jvp`(fun[, nondiff_argnums]) | 为自定义 JVP 规则定义一个可 JAX 化的函数。 |'
- en: '| `custom_vjp`(fun[, nondiff_argnums]) | Set up a JAX-transformable function
    for a custom VJP rule definition. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `custom_vjp`(fun[, nondiff_argnums]) | 为自定义 VJP 规则定义一个可 JAX 化的函数。 |'
- en: '| `custom_gradient`(fun) | Convenience function for defining custom VJP rules
    (aka custom gradients). |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `custom_gradient`(fun) | 方便地定义自定义的 VJP 规则（即自定义梯度）。 |'
- en: '| `closure_convert`(fun, *example_args) | Closure conversion utility, for use
    with higher-order custom derivatives. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `closure_convert`(fun, *example_args) | 闭包转换实用程序，用于与高阶自定义导数一起使用。 |'
- en: '| `checkpoint`(fun, *[, prevent_cse, policy, ...]) | Make `fun` recompute internal
    linearization points when differentiated. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `checkpoint`(fun, *[, prevent_cse, policy, ...]) | 使 `fun` 在求导时重新计算内部线性化点。
    |'
- en: jax.Array (`jax.Array`)
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jax.Array (`jax.Array`)
- en: '| `Array`() | Array base class for JAX |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `Array`() | JAX 的数组基类 |'
- en: '| `make_array_from_callback`(shape, sharding, ...) | Returns a `jax.Array`
    via data fetched from `data_callback`. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `make_array_from_callback`(shape, sharding, ...) | 通过从 `data_callback` 获取的数据返回一个
    `jax.Array`。 |'
- en: '| `make_array_from_single_device_arrays`(shape, ...) | Returns a `jax.Array`
    from a sequence of `jax.Array`s each on a single device. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `make_array_from_single_device_arrays`(shape, ...) | 从每个位于单个设备上的 `jax.Array`
    序列返回一个 `jax.Array`。 |'
- en: '| `make_array_from_process_local_data`(sharding, ...) | Creates distributed
    tensor using the data available in process. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `make_array_from_process_local_data`(sharding, ...) | 使用进程中可用的数据创建分布式张量。
    |'
- en: Vectorization (`vmap`)
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量化 (`vmap`)
- en: '| `vmap`(fun[, in_axes, out_axes, axis_name, ...]) | Vectorizing map. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `vmap`(fun[, in_axes, out_axes, axis_name, ...]) | 向量化映射。 |'
- en: '| `numpy.vectorize`(pyfunc, *[, excluded, signature]) | Define a vectorized
    function with broadcasting. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.vectorize`(pyfunc, *[, excluded, signature]) | 定义一个支持广播的向量化函数。 |'
- en: Parallelization (`pmap`)
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并行化 (`pmap`)
- en: '| `pmap`(fun[, axis_name, in_axes, out_axes, ...]) | Parallel map with support
    for collective operations. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `pmap`(fun[, axis_name, in_axes, out_axes, ...]) | 支持集体操作的并行映射。 |'
- en: '| `devices`([backend]) | Returns a list of all devices for a given backend.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `devices`([backend]) | 返回给定后端的所有设备列表。 |'
- en: '| `local_devices`([process_index, backend, host_id]) | Like `jax.devices()`,
    but only returns devices local to a given process. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `local_devices`([process_index, backend, host_id]) | 类似于 `jax.devices()`，但仅返回给定进程局部的设备。
    |'
- en: '| `process_index`([backend]) | Returns the integer process index of this process.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `process_index`([backend]) | 返回此进程的整数进程索引。 |'
- en: '| `device_count`([backend]) | Returns the total number of devices. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `device_count`([backend]) | 返回设备的总数。 |'
- en: '| `local_device_count`([backend]) | Returns the number of devices addressable
    by this process. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `local_device_count`([backend]) | 返回此进程可寻址的设备数量。 |'
- en: '| `process_count`([backend]) | Returns the number of JAX processes associated
    with the backend. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `process_count`([backend]) | 返回与后端关联的 JAX 进程数。 |'
- en: Callbacks
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Callbacks
- en: '| `pure_callback`(callback, result_shape_dtypes, ...) | Calls a pure Python
    callback. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `pure_callback`(callback, result_shape_dtypes, ...) | 调用一个纯 Python 回调函数。
    |'
- en: '| `experimental.io_callback`(callback, ...[, ...]) | Calls an impure Python
    callback. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `experimental.io_callback`(callback, ...[, ...]) | 调用一个非纯 Python 回调函数。 |'
- en: '| `debug.callback`(callback, *args[, ordered]) | Calls a stageable Python callback.
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `debug.callback`(callback, *args[, ordered]) | 调用一个可分期的 Python 回调函数。 |'
- en: '| `debug.print`(fmt, *args[, ordered]) | Prints values and works in staged
    out JAX functions. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `debug.print`(fmt, *args[, ordered]) | 打印值，并在分期 JAX 函数中工作。 |'
- en: Miscellaneous
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Miscellaneous
- en: '| `Device` | A descriptor of an available device. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `Device` | 可用设备的描述符。 |'
- en: '| `print_environment_info`([return_string]) | Returns a string containing local
    environment & JAX installation information. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `print_environment_info`([return_string]) | 返回一个包含本地环境和 JAX 安装信息的字符串。 |'
- en: '| `live_arrays`([platform]) | Return all live arrays in the backend for platform.
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `live_arrays`([platform]) | 返回后端平台上的所有活动数组。 |'
- en: '| `clear_caches`() | Clear all compilation and staging caches. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `clear_caches`() | 清除所有编译和分期缓存。 |'
