- en: 'Public API: jax package'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.html`](https://jax.readthedocs.io/en/latest/jax.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Subpackages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`jax.numpy` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.scipy` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.lax` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.random` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.sharding` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.debug` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.dlpack` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.distributed` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.dtypes` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.flatten_util` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.image` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.nn` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.ops` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.profiler` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.stages` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.tree_util` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.typing` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.export` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.extend` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.example_libraries` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax.experimental` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `config` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `check_tracer_leaks` | Context manager for jax_check_tracer_leaks config
    option. |'
  prefs: []
  type: TYPE_TB
- en: '| `checking_leaks` | Context manager for jax_check_tracer_leaks config option.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `debug_nans` | Context manager for jax_debug_nans config option. |'
  prefs: []
  type: TYPE_TB
- en: '| `debug_infs` | Context manager for jax_debug_infs config option. |'
  prefs: []
  type: TYPE_TB
- en: '| `default_device` | Context manager for jax_default_device config option.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `default_matmul_precision` | Context manager for jax_default_matmul_precision
    config option. |'
  prefs: []
  type: TYPE_TB
- en: '| `default_prng_impl` | Context manager for jax_default_prng_impl config option.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `enable_checks` | Context manager for jax_enable_checks config option. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable_custom_prng` | Context manager for jax_enable_custom_prng config
    option (transient). |'
  prefs: []
  type: TYPE_TB
- en: '| `enable_custom_vjp_by_custom_transpose` | Context manager for jax_enable_custom_vjp_by_custom_transpose
    config option (transient). |'
  prefs: []
  type: TYPE_TB
- en: '| `log_compiles` | Context manager for jax_log_compiles config option. |'
  prefs: []
  type: TYPE_TB
- en: '| `numpy_rank_promotion` | Context manager for jax_numpy_rank_promotion config
    option. |'
  prefs: []
  type: TYPE_TB
- en: '| `transfer_guard`(new_val) | A contextmanager to control the transfer guard
    level for all transfers. |'
  prefs: []
  type: TYPE_TB
- en: '## Just-in-time compilation (`jit`)'
  prefs: []
  type: TYPE_NORMAL
- en: '| `jit`(fun[, in_shardings, out_shardings, ...]) | Sets up `fun` for just-in-time
    compilation with XLA. |'
  prefs: []
  type: TYPE_TB
- en: '| `disable_jit`([disable]) | Context manager that disables `jit()` behavior
    under its dynamic context. |'
  prefs: []
  type: TYPE_TB
- en: '| `ensure_compile_time_eval`() | Context manager to ensure evaluation at trace/compile
    time (or error). |'
  prefs: []
  type: TYPE_TB
- en: '| `xla_computation`(fun[, static_argnums, ...]) | Creates a function that produces
    its XLA computation given example args. |'
  prefs: []
  type: TYPE_TB
- en: '| `make_jaxpr`([axis_env, return_shape, ...]) | Creates a function that produces
    its jaxpr given example args. |'
  prefs: []
  type: TYPE_TB
- en: '| `eval_shape`(fun, *args, **kwargs) | Compute the shape/dtype of `fun` without
    any FLOPs. |'
  prefs: []
  type: TYPE_TB
- en: '| `ShapeDtypeStruct`(shape, dtype[, ...]) | A container for the shape, dtype,
    and other static attributes of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `device_put`(x[, device, src]) | Transfers `x` to `device`. |'
  prefs: []
  type: TYPE_TB
- en: '| `device_put_replicated`(x, devices) | Transfer array(s) to each specified
    device and form Array(s). |'
  prefs: []
  type: TYPE_TB
- en: '| `device_put_sharded`(shards, devices) | Transfer array shards to specified
    devices and form Array(s). |'
  prefs: []
  type: TYPE_TB
- en: '| `device_get`(x) | Transfer `x` to host. |'
  prefs: []
  type: TYPE_TB
- en: '| `default_backend`() | Returns the platform name of the default XLA backend.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `named_call`(fun, *[, name]) | Adds a user specified name to a function when
    staging out JAX computations. |'
  prefs: []
  type: TYPE_TB
- en: '| `named_scope`(name) | A context manager that adds a user specified name to
    the JAX name stack. |'
  prefs: []
  type: TYPE_TB
- en: '| `block_until_ready`(x) | Tries to call a `block_until_ready` method on pytree
    leaves. |  ## Automatic differentiation'
  prefs: []
  type: TYPE_NORMAL
- en: '| `grad`(fun[, argnums, has_aux, holomorphic, ...]) | Creates a function that
    evaluates the gradient of `fun`. |'
  prefs: []
  type: TYPE_TB
- en: '| `value_and_grad`(fun[, argnums, has_aux, ...]) | Create a function that evaluates
    both `fun` and the gradient of `fun`. |'
  prefs: []
  type: TYPE_TB
- en: '| `jacfwd`(fun[, argnums, has_aux, holomorphic]) | Jacobian of `fun` evaluated
    column-by-column using forward-mode AD. |'
  prefs: []
  type: TYPE_TB
- en: '| `jacrev`(fun[, argnums, has_aux, holomorphic, ...]) | Jacobian of `fun` evaluated
    row-by-row using reverse-mode AD. |'
  prefs: []
  type: TYPE_TB
- en: '| `hessian`(fun[, argnums, has_aux, holomorphic]) | Hessian of `fun` as a dense
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| `jvp`(fun, primals, tangents[, has_aux]) | Computes a (forward-mode) Jacobian-vector
    product of `fun`. |'
  prefs: []
  type: TYPE_TB
- en: '| `linearize`() | Produces a linear approximation to `fun` using `jvp()` and
    partial eval. |'
  prefs: []
  type: TYPE_TB
- en: '| `linear_transpose`(fun, *primals[, reduce_axes]) | Transpose a function that
    is promised to be linear. |'
  prefs: []
  type: TYPE_TB
- en: '| `vjp`() )) | Compute a (reverse-mode) vector-Jacobian product of `fun`. |'
  prefs: []
  type: TYPE_TB
- en: '| `custom_jvp`(fun[, nondiff_argnums]) | Set up a JAX-transformable function
    for a custom JVP rule definition. |'
  prefs: []
  type: TYPE_TB
- en: '| `custom_vjp`(fun[, nondiff_argnums]) | Set up a JAX-transformable function
    for a custom VJP rule definition. |'
  prefs: []
  type: TYPE_TB
- en: '| `custom_gradient`(fun) | Convenience function for defining custom VJP rules
    (aka custom gradients). |'
  prefs: []
  type: TYPE_TB
- en: '| `closure_convert`(fun, *example_args) | Closure conversion utility, for use
    with higher-order custom derivatives. |'
  prefs: []
  type: TYPE_TB
- en: '| `checkpoint`(fun, *[, prevent_cse, policy, ...]) | Make `fun` recompute internal
    linearization points when differentiated. |'
  prefs: []
  type: TYPE_TB
- en: jax.Array (`jax.Array`)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `Array`() | Array base class for JAX |'
  prefs: []
  type: TYPE_TB
- en: '| `make_array_from_callback`(shape, sharding, ...) | Returns a `jax.Array`
    via data fetched from `data_callback`. |'
  prefs: []
  type: TYPE_TB
- en: '| `make_array_from_single_device_arrays`(shape, ...) | Returns a `jax.Array`
    from a sequence of `jax.Array`s each on a single device. |'
  prefs: []
  type: TYPE_TB
- en: '| `make_array_from_process_local_data`(sharding, ...) | Creates distributed
    tensor using the data available in process. |'
  prefs: []
  type: TYPE_TB
- en: Vectorization (`vmap`)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `vmap`(fun[, in_axes, out_axes, axis_name, ...]) | Vectorizing map. |'
  prefs: []
  type: TYPE_TB
- en: '| `numpy.vectorize`(pyfunc, *[, excluded, signature]) | Define a vectorized
    function with broadcasting. |'
  prefs: []
  type: TYPE_TB
- en: Parallelization (`pmap`)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `pmap`(fun[, axis_name, in_axes, out_axes, ...]) | Parallel map with support
    for collective operations. |'
  prefs: []
  type: TYPE_TB
- en: '| `devices`([backend]) | Returns a list of all devices for a given backend.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `local_devices`([process_index, backend, host_id]) | Like `jax.devices()`,
    but only returns devices local to a given process. |'
  prefs: []
  type: TYPE_TB
- en: '| `process_index`([backend]) | Returns the integer process index of this process.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `device_count`([backend]) | Returns the total number of devices. |'
  prefs: []
  type: TYPE_TB
- en: '| `local_device_count`([backend]) | Returns the number of devices addressable
    by this process. |'
  prefs: []
  type: TYPE_TB
- en: '| `process_count`([backend]) | Returns the number of JAX processes associated
    with the backend. |'
  prefs: []
  type: TYPE_TB
- en: Callbacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `pure_callback`(callback, result_shape_dtypes, ...) | Calls a pure Python
    callback. |'
  prefs: []
  type: TYPE_TB
- en: '| `experimental.io_callback`(callback, ...[, ...]) | Calls an impure Python
    callback. |'
  prefs: []
  type: TYPE_TB
- en: '| `debug.callback`(callback, *args[, ordered]) | Calls a stageable Python callback.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `debug.print`(fmt, *args[, ordered]) | Prints values and works in staged
    out JAX functions. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| `Device` | A descriptor of an available device. |'
  prefs: []
  type: TYPE_TB
- en: '| `print_environment_info`([return_string]) | Returns a string containing local
    environment & JAX installation information. |'
  prefs: []
  type: TYPE_TB
- en: '| `live_arrays`([platform]) | Return all live arrays in the backend for platform.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `clear_caches`() | Clear all compilation and staging caches. |'
  prefs: []
  type: TYPE_TB
