["```py\nclass sqlalchemy.ext.declarative.AbstractConcreteBase\n```", "```py\nBase.registry.configure()\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.ext.declarative import AbstractConcreteBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Employee(AbstractConcreteBase, Base):\n    pass\n\nclass Manager(Employee):\n    __tablename__ = 'manager'\n    employee_id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    manager_data = Column(String(40))\n\n    __mapper_args__ = {\n        'polymorphic_identity':'manager',\n        'concrete':True\n    }\n\nBase.registry.configure()\n```", "```py\nfrom sqlalchemy.ext.declarative import AbstractConcreteBase\n\nclass Company(Base):\n    __tablename__ = 'company'\n    id = Column(Integer, primary_key=True)\n\nclass Employee(AbstractConcreteBase, Base):\n    strict_attrs = True\n\n    employee_id = Column(Integer, primary_key=True)\n\n    @declared_attr\n    def company_id(cls):\n        return Column(ForeignKey('company.id'))\n\n    @declared_attr\n    def company(cls):\n        return relationship(\"Company\")\n\nclass Manager(Employee):\n    __tablename__ = 'manager'\n\n    name = Column(String(50))\n    manager_data = Column(String(40))\n\n    __mapper_args__ = {\n        'polymorphic_identity':'manager',\n        'concrete':True\n    }\n\nBase.registry.configure()\n```", "```py\nsession.execute(\n    select(Employee).filter(Employee.company.has(id=5))\n)\n```", "```py\nclass sqlalchemy.ext.declarative.ConcreteBase\n```", "```py\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = 'employee'\n    employee_id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    __mapper_args__ = {\n                    'polymorphic_identity':'employee',\n                    'concrete':True}\n\nclass Manager(Employee):\n    __tablename__ = 'manager'\n    employee_id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    manager_data = Column(String(40))\n    __mapper_args__ = {\n                    'polymorphic_identity':'manager',\n                    'concrete':True}\n```", "```py\nclass Employee(ConcreteBase, Base):\n    _concrete_discriminator_name = '_concrete_discriminator'\n```", "```py\nclass sqlalchemy.ext.declarative.DeferredReflection\n```", "```py\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.declarative import DeferredReflection\nBase = declarative_base()\n\nclass MyClass(DeferredReflection, Base):\n    __tablename__ = 'mytable'\n```", "```py\nengine = create_engine(\"someengine://...\")\nDeferredReflection.prepare(engine)\n```", "```py\nclass ReflectedOne(DeferredReflection, Base):\n    __abstract__ = True\n\nclass ReflectedTwo(DeferredReflection, Base):\n    __abstract__ = True\n\nclass MyClass(ReflectedOne):\n    __tablename__ = 'mytable'\n\nclass MyOtherClass(ReflectedOne):\n    __tablename__ = 'myothertable'\n\nclass YetAnotherClass(ReflectedTwo):\n    __tablename__ = 'yetanothertable'\n\n# ... etc.\n```", "```py\nReflectedOne.prepare(engine_one)\nReflectedTwo.prepare(engine_two)\n```", "```py\nclassmethod prepare(bind: Engine | Connection, **reflect_kw: Any) \u2192 None\n```"]