- en: 0.1 Changelog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_01.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_01.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 0.1.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri May 05 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to topological sort algorithm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added DISTINCT ON support to Postgres (just supply distinct=[col1,col2..])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added __mod__ (% operator) to sql expressions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”order_by” mapper property inherited from inheriting mapper
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to column type used when mapper UPDATES/DELETEs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with convert_unicode=True, reflection was failing, has been fixed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types types types! still weren’t working….have to use TypeDecorator again :(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mysql binary type converts array output to buffer, fixes PickleType
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed the attributes.py memory leak once and for all
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unittests are qualified based on the databases that support each one
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where column defaults would clobber VALUES clause of insert objects
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where table def w/ schema name would force engine connection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix for parenthesis to work correctly with subqueries in INSERT/UPDATE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HistoryArraySet gets extend() method
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed lazyload support for other comparison operators besides =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazyload fix where two comparisons in the join condition point to the samem
    column
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “construct_new” flag to mapper, will use __new__ to create instances instead
    of __init__ (standard in 0.2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added selectresults.py to SVN, missed it last time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweak to allow a many-to-many relationship from a table to itself via an association
    table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to “translate_row” function used by polymorphic example
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create_engine uses cgi.parse_qsl to read query string (out the window in 0.2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweaks to CAST operator
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed function names LOCAL_TIME/LOCAL_TIMESTAMP -> LOCALTIME/LOCALTIMESTAMP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed order of ORDER BY/HAVING in compile
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Wed Apr 12 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support for MS-SQL added courtesy Rick Morrison, Runar Petursson
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the latest SQLSoup from J. Ellis
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveMapper has preliminary support for inheritance (Jeff Watkins)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added a “mods” system which allows pluggable modules that modify/augment core
    functionality, using the function “install_mods(*modnames)”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added the first “mod”, SelectResults, which modifies mapper selects to return
    generators that turn ranges into LIMIT/OFFSET queries (Jonas Borgstr?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: factored out querying capabilities of Mapper into a separate Query object which
    is Session-centric. this improves the performance of mapper.using(session) and
    makes other things possible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: objectstore/Session refactored, the official way to save objects is now via
    the flush() method. The begin/commit functionality of Session is factored into
    LegacySession which is still established as the default behavior, until the 0.2
    series.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types system is bound to an engine at query compile time, not schema construction
    time. this simplifies the types system as well as the ProxyEngine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘version_id’ keyword argument to mapper. this keyword should reference
    a Column object with type Integer, preferably non-nullable, which will be used
    on the mapped table to track version numbers. this number is incremented on each
    save operation and is specified in the UPDATE/DELETE conditions so that it factors
    into the returned row count, which results in a ConcurrencyError if the value
    received is not the expected count.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘entity_name’ keyword argument to mapper. a mapper is now associated with
    a class via the class object as well as an optional entity_name parameter, which
    is a string defaulting to None. any number of primary mappers can be created for
    a class, qualified by the entity name. instances of those classes will issue all
    of their load and save operations through their entity_name-qualified mapper,
    and maintain separate a identity in the identity map for an otherwise equivalent
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to the attributes system. code has been clarified, and also fixed to
    support proper polymorphic behavior on object attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “for_update” flag to Select objects
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes for backrefs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix for postgres1 DateTime type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: documentation pages mostly switched over to Markdown syntax
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Mar 27 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added SQLSession concept to SQLEngine. this object keeps track of retrieving
    a connection from the connection pool as well as an in-progress transaction. methods
    push_session() and pop_session() added to SQLEngine which push/pop a new SQLSession
    onto the engine, allowing operation upon a second connection “nested” within the
    previous one, allowing nested transactions. Other tricks are sure to come later
    regarding SQLSession.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added nest_on argument to objectstore.Session. This is a single SQLEngine or
    list of engines for which push_session()/pop_session() will be called each time
    this Session becomes the active session (via objectstore.push_session() or equivalent).
    This allows a unit of work Session to take advantage of the nested transaction
    feature without explicitly calling push_session/pop_session on the engine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: factored apart objectstore/unitofwork to separate “Session scoping” from “uow
    commit heavy lifting”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added populate_instance() method to MapperExtension. allows an extension to
    modify the population of object attributes. this method can call the populate_instance()
    method on another mapper to proxy the attribute population from one mapper to
    another; some row translation logic is also built in to help with this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed Oracle8-compatibility “use_ansi” flag which converts JOINs to comparisons
    with the = and (+) operators, passes basic unittests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweaks to Oracle LIMIT/OFFSET support
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle reflection uses ALL_** views instead of USER_** to get larger list of
    stuff to reflect from
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to Oracle foreign key reflection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#105](https://www.sqlalchemy.org/trac/ticket/105)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: objectstore.commit(obj1, obj2,…) adds an extra step to seek out private relations
    on properties and delete child objects, even though its not a global commit
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lots and lots of fixes to mappers which use inheritance, strengthened the concept
    of relations on a mapper being made towards the “local” table for that mapper,
    not the tables it inherits. allows more complex compositional patterns to work
    with lazy/eager loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added support for mappers to inherit from others based on the same table, just
    specify the same table as that of both parent/child mapper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some minor speed improvements to the attributes system with regards to instantiating
    and populating new objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed MySQL binary unit test
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: INSERTs can receive clause elements as VALUES arguments, not just literal values
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support for calling multi-tokened functions, i.e. schema.mypkg.func()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added J. Ellis’ SQLSoup module to extensions package
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “polymorphic” examples illustrating methods to load multiple object types
    from one mapper, the second of which uses the new populate_instance() method.
    small improvements to mapper, UNION construct to help the examples along
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements/fixes to session.refresh()/session.expire() (which may have been
    called “invalidate” earlier..)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added session.expunge() which totally removes an object from the current session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added *args, **kwargs pass-through to engine.transaction(func) allowing easier
    creation of transactionalizing decorator functions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'added iterator interface to ResultProxy: “for row in result:…”'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added assertion to tx = session.begin(); tx.rollback(); tx.begin(), i.e. can’t
    use it after a rollback()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added date conversion on bind parameter fix to SQLite enabling dates to work
    with pysqlite1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to subqueries to more intelligently construct their FROM clauses
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#116](https://www.sqlalchemy.org/trac/ticket/116)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added PickleType to types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'fixed two bugs with column labels with regards to bind parameters: bind param
    keynames they are now generated from a column “label” in all relevant cases to
    take advantage of excess-name-length rules, and checks for a peculiar collision
    against a column named the same as “tablename_colname” added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: major overhaul to unit of work documentation, other documentation sections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed attributes bug where if an object is committed, its lazy-loaded list got
    blown away if it hadn’t been loaded
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added unique_connection() method to engine, connection pool to return a connection
    that is not part of the thread-local context or any current transaction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added invalidate() function to pooled connection. will remove the connection
    from the pool. still need work for engines to auto-reconnect to a stale DB though.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added distinct() function to column elements so you can do func.count(mycol.distinct())
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “always_refresh” flag to Mapper, creates a mapper that will always refresh
    the attributes of objects it gets/selects from the DB, overwriting any changes
    made.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Mar 13 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create_engine() now uses genericized parameters; host/hostname, db/dbname/database,
    password/passwd, etc. for all engine connections. makes engine URIs much more
    “universal”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added support for SELECT statements embedded into a column clause, using the
    flag “scalar=True”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: another overhaul to EagerLoading when used in conjunction with mappers that
    inherit; improvements to eager loads figuring out their aliased queries correctly,
    also relations set up against a mapper with inherited mappers will create joins
    against the table that is specific to the mapper itself (i.e. and not any tables
    that are inherited/are further down the inheritance chain), this can be overridden
    by using custom primary/secondary joins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added J.Ellis patch to mapper.py so that selectone() throws an exception if
    query returns more than one object row, selectfirst() to not throw the exception.
    also adds selectfirst_by (synonymous with get_by) and selectone_by
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added onupdate parameter to Column, will exec SQL/python upon an update statement.Also
    adds “for_update=True” to all DefaultGenerator subclasses
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added support for Oracle table reflection contributed by Andrija Zaric; still
    some bugs to work out regarding composite primary keys/dictionary selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: checked in an initial Firebird module, awaiting testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added sql.ClauseParameters dictionary object as the result for compiled.get_params(),
    does late-typeprocessing of bind parameters so that the original values are easier
    to access
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: more docs for indexes, column defaults, connection pooling, engine construction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to the construction of the types system. uses a simpler inheritance
    pattern so that any of the generic types can be easily subclassed, with no need
    for TypeDecorator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “convert_unicode=False” parameter to SQLEngine, will cause all String
    types to perform unicode encoding/decoding (makes Strings act like Unicodes)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘encoding=”utf8”’ parameter to engine. the given encoding will be used
    for all encode/decode calls within Unicode types as well as Strings when convert_unicode=True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved support for mapping against UNIONs, added polymorph.py example to illustrate
    multi-class mapping against a UNION
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to SQLite LIMIT/OFFSET syntax
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to Oracle LIMIT syntax
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added backref() function, allows backreferences to have keyword arguments that
    will be passed to the backref.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequences and ColumnDefault objects can do execute()/scalar() standalone
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL functions (i.e. func.foo()) can do execute()/scalar() standalone
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to SQL functions so that the ANSI-standard functions, i.e. current_timestamp
    etc., do not specify parenthesis. all other functions do.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'added settattr_clean and append_clean to SmartProperty, which set attributes
    without triggering a “dirty” event or any history. used as: myclass.prop1.setattr_clean(myobject,
    ‘hi’)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved support to column defaults when used by mappers; mappers will pull
    pre-executed defaults from statement’s executed bind parameters (pre-conversion)
    to populate them into a saved object’s attributes; if any PassiveDefaults have
    fired off, will instead post-fetch the row from the DB to populate the object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘get_session().invalidate(*obj)’ method to objectstore, instances will
    refresh() themselves upon the next attribute access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to SQL func calls including an “engine” keyword argument so they
    can be execute()d or scalar()ed standalone, also added func accessor to SQLEngine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to MySQL4 custom table engines, i.e. TYPE instead of ENGINE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slightly enhanced logging, includes timestamps and a somewhat configurable formatting
    system, in lieu of a full-blown logging system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to the ActiveMapper class from the TG gang, including many-to-many
    relationships
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added Double and TinyInt support to mysql
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Mar 02 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: completed “post_update” feature, will add a second update statement before inserts
    and after deletes in order to reconcile a relationship without any dependencies
    being created; used when persisting two rows that are dependent on each other
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: completed mapper.using(session) function, localized per-object Session functionality;
    objects can be declared and manipulated as local to any user-defined Session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to Oracle “row_number over” clause with multiple tables
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mapper.get() was not selecting multiple-keyed objects if the mapper’s table
    was a join, such as in an inheritance relationship, this is fixed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to sql/schema packages so that the sql package can run all on its own,
    producing selects, inserts, etc. without any engine dependencies. builds upon
    new TableClause/ColumnClause lexical objects. Schema’s Table/Column objects are
    the “physical” subclasses of them. simplifies schema/sql relationship, extensions
    (like proxyengine), and speeds overall performance by a large margin. removes
    the entire getattr() behavior that plagued 0.1.1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: refactoring of how the mapper “synchronizes” data between two objects into a
    separate module, works better with properties attached to a mapper that has an
    additional inheritance relationship to one of the related tables, also the same
    methodology used to synchronize parent/child objects now used by mapper to synchronize
    between inherited and inheriting mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: made objectstore “check for out-of-identitymap” more aggressive, will perform
    the check when object attributes are modified or the object is deleted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index object fully implemented, can be constructed standalone, or via “index”
    and “unique” arguments on Columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “convert_unicode” flag to SQLEngine, will treat all String/CHAR types
    as Unicode types, with raw-byte/utf-8 translation on the bind parameter and result
    set side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres maintains a list of ANSI functions that must have no parenthesis so
    function calls with no arguments work consistently
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tables can be created with no engine specified. this will default their engine
    to a module-scoped “default engine” which is a ProxyEngine. this engine can be
    connected via the function “global_connect”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “refresh(*obj)” method to objectstore / Session to reload the attributes
    of any set of objects from the database unconditionally
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri Feb 24 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed a recursive call in schema that was somehow running 994 times then returning
    normally. broke nothing, slowed down everything. thanks to jpellerin for finding
    this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Feb 23 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to Function class so that expressions with a func.foo() use the type
    of the Function object (i.e. the left side) as the type of the boolean expression,
    not the other side which is more of a moving target (changeset 1020).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating self-referring mappers with backrefs slightly easier (but still not
    that easy - changeset 1019)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to one-to-one mappings (changeset 1015)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: psycopg1 date/time issue with None fixed (changeset 1005)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'two issues related to postgres, which doesn’t want to give you the “lastrowid”
    since oids are deprecated:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgres database-side defaults that are on primary key cols *do* execute explicitly
    beforehand, even though that’s not the idea of a PassiveDefault. this is because
    sequences on columns get reflected as PassiveDefaults, but need to be explicitly
    executed on a primary key col so we know what we just inserted.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: if you did add a row that has a bunch of database-side defaults on it, and the
    PassiveDefault thing was working the old way, i.e. they just execute on the DB
    side, the “can’t get the row back without an OID” exception that occurred also
    will not happen unless someone (usually the ORM) explicitly asks for it.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed a glitch with engine.execute_compiled where it was making a second ResultProxy
    that just got thrown away.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: began to implement newer logic in object properties. you can now say myclass.attr.property,
    which will give you the PropertyLoader corresponding to that attribute, i.e. myclass.mapper.props[‘attr’]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eager loading has been internally overhauled to use aliases at all times. more
    complicated chains of eager loads can now be created without any need for explicit
    “use aliases”-type instructions. EagerLoader code is also much simpler now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a new somewhat experimental flag “use_update” added to relations, indicates
    that this relationship should be handled by a second UPDATE statement, either
    after a primary INSERT or before a primary DELETE. handles circular row dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added exceptions module, all raised exceptions (except for some KeyError/AttributeError
    exceptions) descend from these classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to date types with MySQL, returned timedelta converted to datetime.time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: two-phase objectstore.commit operations (i.e. begin/commit) now return a transactional
    object (SessionTrans), to more clearly indicate transaction boundaries.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index object with create/drop support added to schema
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to postgres, where it will explicitly pre-execute a PassiveDefault on a
    table if it is a primary key column, pursuant to the ongoing “we can’t get inserted
    rows back from postgres” issue
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change to information_schema query that gets back postgres table defs, now uses
    explicit JOIN keyword, since one user had faster performance with 8.1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to engine.process_defaults so it works correctly with a table that has different
    column name/column keys (changeset 982)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a column can only be attached to one table - this is now asserted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres time types descend from Time type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to alltests so that it runs types test (now named testtypes)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to Join object so that it correctly exports its foreign keys (cs 973)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating relationships against mappers that use inheritance fixed (cs 973)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri May 05 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes to topological sort algorithm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added DISTINCT ON support to Postgres (just supply distinct=[col1,col2..])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added __mod__ (% operator) to sql expressions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”order_by” mapper property inherited from inheriting mapper
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to column type used when mapper UPDATES/DELETEs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with convert_unicode=True, reflection was failing, has been fixed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types types types! still weren’t working….have to use TypeDecorator again :(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mysql binary type converts array output to buffer, fixes PickleType
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed the attributes.py memory leak once and for all
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unittests are qualified based on the databases that support each one
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where column defaults would clobber VALUES clause of insert objects
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed bug where table def w/ schema name would force engine connection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix for parenthesis to work correctly with subqueries in INSERT/UPDATE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HistoryArraySet gets extend() method
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed lazyload support for other comparison operators besides =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazyload fix where two comparisons in the join condition point to the samem
    column
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “construct_new” flag to mapper, will use __new__ to create instances instead
    of __init__ (standard in 0.2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added selectresults.py to SVN, missed it last time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweak to allow a many-to-many relationship from a table to itself via an association
    table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to “translate_row” function used by polymorphic example
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create_engine uses cgi.parse_qsl to read query string (out the window in 0.2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweaks to CAST operator
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed function names LOCAL_TIME/LOCAL_TIMESTAMP -> LOCALTIME/LOCALTIMESTAMP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed order of ORDER BY/HAVING in compile
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Wed Apr 12 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support for MS-SQL added courtesy Rick Morrison, Runar Petursson
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the latest SQLSoup from J. Ellis
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveMapper has preliminary support for inheritance (Jeff Watkins)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added a “mods” system which allows pluggable modules that modify/augment core
    functionality, using the function “install_mods(*modnames)”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added the first “mod”, SelectResults, which modifies mapper selects to return
    generators that turn ranges into LIMIT/OFFSET queries (Jonas Borgstr?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: factored out querying capabilities of Mapper into a separate Query object which
    is Session-centric. this improves the performance of mapper.using(session) and
    makes other things possible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: objectstore/Session refactored, the official way to save objects is now via
    the flush() method. The begin/commit functionality of Session is factored into
    LegacySession which is still established as the default behavior, until the 0.2
    series.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types system is bound to an engine at query compile time, not schema construction
    time. this simplifies the types system as well as the ProxyEngine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘version_id’ keyword argument to mapper. this keyword should reference
    a Column object with type Integer, preferably non-nullable, which will be used
    on the mapped table to track version numbers. this number is incremented on each
    save operation and is specified in the UPDATE/DELETE conditions so that it factors
    into the returned row count, which results in a ConcurrencyError if the value
    received is not the expected count.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘entity_name’ keyword argument to mapper. a mapper is now associated with
    a class via the class object as well as an optional entity_name parameter, which
    is a string defaulting to None. any number of primary mappers can be created for
    a class, qualified by the entity name. instances of those classes will issue all
    of their load and save operations through their entity_name-qualified mapper,
    and maintain separate a identity in the identity map for an otherwise equivalent
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to the attributes system. code has been clarified, and also fixed to
    support proper polymorphic behavior on object attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “for_update” flag to Select objects
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some fixes for backrefs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix for postgres1 DateTime type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: documentation pages mostly switched over to Markdown syntax
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Mar 27 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added SQLSession concept to SQLEngine. this object keeps track of retrieving
    a connection from the connection pool as well as an in-progress transaction. methods
    push_session() and pop_session() added to SQLEngine which push/pop a new SQLSession
    onto the engine, allowing operation upon a second connection “nested” within the
    previous one, allowing nested transactions. Other tricks are sure to come later
    regarding SQLSession.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added nest_on argument to objectstore.Session. This is a single SQLEngine or
    list of engines for which push_session()/pop_session() will be called each time
    this Session becomes the active session (via objectstore.push_session() or equivalent).
    This allows a unit of work Session to take advantage of the nested transaction
    feature without explicitly calling push_session/pop_session on the engine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: factored apart objectstore/unitofwork to separate “Session scoping” from “uow
    commit heavy lifting”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added populate_instance() method to MapperExtension. allows an extension to
    modify the population of object attributes. this method can call the populate_instance()
    method on another mapper to proxy the attribute population from one mapper to
    another; some row translation logic is also built in to help with this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed Oracle8-compatibility “use_ansi” flag which converts JOINs to comparisons
    with the = and (+) operators, passes basic unittests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tweaks to Oracle LIMIT/OFFSET support
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle reflection uses ALL_** views instead of USER_** to get larger list of
    stuff to reflect from
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to Oracle foreign key reflection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#105](https://www.sqlalchemy.org/trac/ticket/105)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: objectstore.commit(obj1, obj2,…) adds an extra step to seek out private relations
    on properties and delete child objects, even though its not a global commit
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lots and lots of fixes to mappers which use inheritance, strengthened the concept
    of relations on a mapper being made towards the “local” table for that mapper,
    not the tables it inherits. allows more complex compositional patterns to work
    with lazy/eager loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added support for mappers to inherit from others based on the same table, just
    specify the same table as that of both parent/child mapper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: some minor speed improvements to the attributes system with regards to instantiating
    and populating new objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed MySQL binary unit test
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: INSERTs can receive clause elements as VALUES arguments, not just literal values
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support for calling multi-tokened functions, i.e. schema.mypkg.func()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added J. Ellis’ SQLSoup module to extensions package
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “polymorphic” examples illustrating methods to load multiple object types
    from one mapper, the second of which uses the new populate_instance() method.
    small improvements to mapper, UNION construct to help the examples along
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements/fixes to session.refresh()/session.expire() (which may have been
    called “invalidate” earlier..)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added session.expunge() which totally removes an object from the current session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added *args, **kwargs pass-through to engine.transaction(func) allowing easier
    creation of transactionalizing decorator functions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'added iterator interface to ResultProxy: “for row in result:…”'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added assertion to tx = session.begin(); tx.rollback(); tx.begin(), i.e. can’t
    use it after a rollback()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added date conversion on bind parameter fix to SQLite enabling dates to work
    with pysqlite1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to subqueries to more intelligently construct their FROM clauses
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#116](https://www.sqlalchemy.org/trac/ticket/116)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added PickleType to types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'fixed two bugs with column labels with regards to bind parameters: bind param
    keynames they are now generated from a column “label” in all relevant cases to
    take advantage of excess-name-length rules, and checks for a peculiar collision
    against a column named the same as “tablename_colname” added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: major overhaul to unit of work documentation, other documentation sections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed attributes bug where if an object is committed, its lazy-loaded list got
    blown away if it hadn’t been loaded
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added unique_connection() method to engine, connection pool to return a connection
    that is not part of the thread-local context or any current transaction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added invalidate() function to pooled connection. will remove the connection
    from the pool. still need work for engines to auto-reconnect to a stale DB though.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added distinct() function to column elements so you can do func.count(mycol.distinct())
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “always_refresh” flag to Mapper, creates a mapper that will always refresh
    the attributes of objects it gets/selects from the DB, overwriting any changes
    made.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Mar 13 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create_engine() now uses genericized parameters; host/hostname, db/dbname/database,
    password/passwd, etc. for all engine connections. makes engine URIs much more
    “universal”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added support for SELECT statements embedded into a column clause, using the
    flag “scalar=True”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: another overhaul to EagerLoading when used in conjunction with mappers that
    inherit; improvements to eager loads figuring out their aliased queries correctly,
    also relations set up against a mapper with inherited mappers will create joins
    against the table that is specific to the mapper itself (i.e. and not any tables
    that are inherited/are further down the inheritance chain), this can be overridden
    by using custom primary/secondary joins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added J.Ellis patch to mapper.py so that selectone() throws an exception if
    query returns more than one object row, selectfirst() to not throw the exception.
    also adds selectfirst_by (synonymous with get_by) and selectone_by
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added onupdate parameter to Column, will exec SQL/python upon an update statement.Also
    adds “for_update=True” to all DefaultGenerator subclasses
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added support for Oracle table reflection contributed by Andrija Zaric; still
    some bugs to work out regarding composite primary keys/dictionary selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: checked in an initial Firebird module, awaiting testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added sql.ClauseParameters dictionary object as the result for compiled.get_params(),
    does late-typeprocessing of bind parameters so that the original values are easier
    to access
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: more docs for indexes, column defaults, connection pooling, engine construction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to the construction of the types system. uses a simpler inheritance
    pattern so that any of the generic types can be easily subclassed, with no need
    for TypeDecorator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “convert_unicode=False” parameter to SQLEngine, will cause all String
    types to perform unicode encoding/decoding (makes Strings act like Unicodes)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘encoding=”utf8”’ parameter to engine. the given encoding will be used
    for all encode/decode calls within Unicode types as well as Strings when convert_unicode=True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved support for mapping against UNIONs, added polymorph.py example to illustrate
    multi-class mapping against a UNION
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to SQLite LIMIT/OFFSET syntax
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to Oracle LIMIT syntax
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added backref() function, allows backreferences to have keyword arguments that
    will be passed to the backref.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequences and ColumnDefault objects can do execute()/scalar() standalone
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL functions (i.e. func.foo()) can do execute()/scalar() standalone
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to SQL functions so that the ANSI-standard functions, i.e. current_timestamp
    etc., do not specify parenthesis. all other functions do.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'added settattr_clean and append_clean to SmartProperty, which set attributes
    without triggering a “dirty” event or any history. used as: myclass.prop1.setattr_clean(myobject,
    ‘hi’)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved support to column defaults when used by mappers; mappers will pull
    pre-executed defaults from statement’s executed bind parameters (pre-conversion)
    to populate them into a saved object’s attributes; if any PassiveDefaults have
    fired off, will instead post-fetch the row from the DB to populate the object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added ‘get_session().invalidate(*obj)’ method to objectstore, instances will
    refresh() themselves upon the next attribute access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to SQL func calls including an “engine” keyword argument so they
    can be execute()d or scalar()ed standalone, also added func accessor to SQLEngine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to MySQL4 custom table engines, i.e. TYPE instead of ENGINE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slightly enhanced logging, includes timestamps and a somewhat configurable formatting
    system, in lieu of a full-blown logging system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to the ActiveMapper class from the TG gang, including many-to-many
    relationships
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added Double and TinyInt support to mysql
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Mar 02 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: completed “post_update” feature, will add a second update statement before inserts
    and after deletes in order to reconcile a relationship without any dependencies
    being created; used when persisting two rows that are dependent on each other
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: completed mapper.using(session) function, localized per-object Session functionality;
    objects can be declared and manipulated as local to any user-defined Session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to Oracle “row_number over” clause with multiple tables
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mapper.get() was not selecting multiple-keyed objects if the mapper’s table
    was a join, such as in an inheritance relationship, this is fixed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: overhaul to sql/schema packages so that the sql package can run all on its own,
    producing selects, inserts, etc. without any engine dependencies. builds upon
    new TableClause/ColumnClause lexical objects. Schema’s Table/Column objects are
    the “physical” subclasses of them. simplifies schema/sql relationship, extensions
    (like proxyengine), and speeds overall performance by a large margin. removes
    the entire getattr() behavior that plagued 0.1.1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: refactoring of how the mapper “synchronizes” data between two objects into a
    separate module, works better with properties attached to a mapper that has an
    additional inheritance relationship to one of the related tables, also the same
    methodology used to synchronize parent/child objects now used by mapper to synchronize
    between inherited and inheriting mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: made objectstore “check for out-of-identitymap” more aggressive, will perform
    the check when object attributes are modified or the object is deleted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index object fully implemented, can be constructed standalone, or via “index”
    and “unique” arguments on Columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “convert_unicode” flag to SQLEngine, will treat all String/CHAR types
    as Unicode types, with raw-byte/utf-8 translation on the bind parameter and result
    set side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres maintains a list of ANSI functions that must have no parenthesis so
    function calls with no arguments work consistently
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tables can be created with no engine specified. this will default their engine
    to a module-scoped “default engine” which is a ProxyEngine. this engine can be
    connected via the function “global_connect”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added “refresh(*obj)” method to objectstore / Session to reload the attributes
    of any set of objects from the database unconditionally
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri Feb 24 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed a recursive call in schema that was somehow running 994 times then returning
    normally. broke nothing, slowed down everything. thanks to jpellerin for finding
    this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.1.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Feb 23 2006'
  prefs: []
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: small fix to Function class so that expressions with a func.foo() use the type
    of the Function object (i.e. the left side) as the type of the boolean expression,
    not the other side which is more of a moving target (changeset 1020).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating self-referring mappers with backrefs slightly easier (but still not
    that easy - changeset 1019)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes to one-to-one mappings (changeset 1015)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: psycopg1 date/time issue with None fixed (changeset 1005)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'two issues related to postgres, which doesn’t want to give you the “lastrowid”
    since oids are deprecated:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgres database-side defaults that are on primary key cols *do* execute explicitly
    beforehand, even though that’s not the idea of a PassiveDefault. this is because
    sequences on columns get reflected as PassiveDefaults, but need to be explicitly
    executed on a primary key col so we know what we just inserted.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: if you did add a row that has a bunch of database-side defaults on it, and the
    PassiveDefault thing was working the old way, i.e. they just execute on the DB
    side, the “can’t get the row back without an OID” exception that occurred also
    will not happen unless someone (usually the ORM) explicitly asks for it.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed a glitch with engine.execute_compiled where it was making a second ResultProxy
    that just got thrown away.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: began to implement newer logic in object properties. you can now say myclass.attr.property,
    which will give you the PropertyLoader corresponding to that attribute, i.e. myclass.mapper.props[‘attr’]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eager loading has been internally overhauled to use aliases at all times. more
    complicated chains of eager loads can now be created without any need for explicit
    “use aliases”-type instructions. EagerLoader code is also much simpler now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a new somewhat experimental flag “use_update” added to relations, indicates
    that this relationship should be handled by a second UPDATE statement, either
    after a primary INSERT or before a primary DELETE. handles circular row dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added exceptions module, all raised exceptions (except for some KeyError/AttributeError
    exceptions) descend from these classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to date types with MySQL, returned timedelta converted to datetime.time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: two-phase objectstore.commit operations (i.e. begin/commit) now return a transactional
    object (SessionTrans), to more clearly indicate transaction boundaries.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index object with create/drop support added to schema
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to postgres, where it will explicitly pre-execute a PassiveDefault on a
    table if it is a primary key column, pursuant to the ongoing “we can’t get inserted
    rows back from postgres” issue
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change to information_schema query that gets back postgres table defs, now uses
    explicit JOIN keyword, since one user had faster performance with 8.1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to engine.process_defaults so it works correctly with a table that has different
    column name/column keys (changeset 982)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a column can only be attached to one table - this is now asserted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgres time types descend from Time type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to alltests so that it runs types test (now named testtypes)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix to Join object so that it correctly exports its foreign keys (cs 973)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating relationships against mappers that use inheritance fixed (cs 973)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
