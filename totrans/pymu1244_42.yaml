- en: Rect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/rect.html](https://pymupdf.readthedocs.io/en/latest/rect.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Rect* represents a rectangle defined by four floating point numbers x0, y0,
    x1, y1\. They are treated as being coordinates of two diagonally opposite points.
    The first two numbers are regarded as the “top left” corner P[(x0,y0)] and P[(x1,y1)]
    as the “bottom right” one. However, these two properties need not coincide with
    their intuitive meanings – read on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following remarks are also valid for [IRect](irect.html#irect) objects:'
  prefs: []
  type: TYPE_NORMAL
- en: A rectangle in the sense of (Py-) MuPDF **(and PDF)** always has **borders parallel
    to the x- resp. y-axis**. A general orthogonal tetragon **is not a rectangle**
    – in contrast to the mathematical definition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructing points can be (almost! – see below) anywhere in the plane –
    they need not even be different, and e.g. “top left” need not be the geometrical
    “north-western” point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Units are in points, where 72 points is 1 inch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For any given quadruple of numbers, the geometrically “same” rectangle can
    be defined in four different ways:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rect(P[(x0,y0)], P[(x1,y1)])
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rect(P[(x1,y1)], P[(x0,y0)])
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rect(P[(x0,y1)], P[(x1,y0)])
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rect(P[(x1,y0)], P[(x0,y1)])
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**(Changed in v1.19.0)** Hence some classification:'
  prefs: []
  type: TYPE_NORMAL
- en: A rectangle is called **valid** if `x0 <= x1` and `y0 <= y1` (i.e. the bottom
    right point is “south-eastern” to the top left one), otherwise **invalid**. Of
    the four alternatives above, **only the first** is valid. Please take into account,
    that in MuPDF’s coordinate system, the y-axis is oriented from **top to bottom**.
    Invalid rectangles have been called infinite in earlier versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rectangle is called **empty** if `x0 >= x1` or `y0 >= y1`. This implies, that
    **invalid rectangles are also always empty.** And [`width`](irect.html#IRect.width
    "IRect.width") (resp. [`height`](irect.html#IRect.height "IRect.height")) is **set
    to zero** if `x0 > x1` (resp. `y0 > y1`). In previous versions, a rectangle was
    empty only if one of width or height was zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangle coordinates **cannot be outside** the number range from `FZ_MIN_INF_RECT
    = -2147483648` to `FZ_MAX_INF_RECT = 2147483520`. Both values have been chosen,
    because they are the smallest / largest 32bit integers that survive C float conversion
    roundtrips. In previous versions there was no limit for coordinate values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is **exactly one “infinite” rectangle**, defined by `x0 = y0 = FZ_MIN_INF_RECT`
    and `x1 = y1 = FZ_MAX_INF_RECT`. It contains every other rectangle. It is mainly
    used for technical purposes – e.g. when a function call should ignore a formally
    required rectangle argument. This rectangle is not empty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rectangles are (semi-) open:** The right and the bottom edges (including
    the resp. corners) are not considered part of the rectangle. This implies, that
    only the top-left corner `(x0, y0)` can ever belong to the rectangle - the other
    three corners never do. An empty rectangle contains no corners at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![_images/img-rect-contains.png](../Images/493e35b47c4160cd56a3e1fd68304a46.png)](_images/img-rect-contains.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here is an overview of the changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Notion | Versions < 1.19.0 | Versions 1.19.* |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| empty | x0 = x1 or y0 = y1 | x0 >= x1 or y0 >= y1 – includes invalid rects
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| valid | n/a | x0 <= x1 and y0 <= y1 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| infinite | all rects where x0 > x1 or y1 > y0 | **exactly one infinite rect
    / irect!** |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| coordinate values | all numbers | `FZ_MIN_INF_RECT <= number <= FZ_MAX_INF_RECT`
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| borders, corners | are parts of the rectangle | right and bottom corners
    and edges **are outside** |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: There are new top level functions defining infinite and standard empty rectangles
    and quads, see [`INFINITE_RECT()`](functions.html#INFINITE_RECT "INFINITE_RECT")
    and friends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Methods / Attributes** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.contains()`](#Rect.contains "Rect.contains") | checks containment
    of point_likes and rect_likes |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.get_area()`](#Rect.get_area "Rect.get_area") | calculate rectangle
    area |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.include_point()`](#Rect.include_point "Rect.include_point") | enlarge
    rectangle to also contain a point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.include_rect()`](#Rect.include_rect "Rect.include_rect") | enlarge
    rectangle to also contain another one |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.intersect()`](#Rect.intersect "Rect.intersect") | common part with
    another rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.intersects()`](#Rect.intersects "Rect.intersects") | checks for non-empty
    intersections |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.morph()`](#Rect.morph "Rect.morph") | transform with a point and a
    matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.torect()`](#Rect.torect "Rect.torect") | the matrix that transforms
    to another rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.norm()`](#Rect.norm "Rect.norm") | the Euclidean norm |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.normalize()`](#Rect.normalize "Rect.normalize") | makes a rectangle
    valid |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.round()`](#Rect.round "Rect.round") | create smallest [IRect](irect.html#irect)
    containing rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.transform()`](#Rect.transform "Rect.transform") | transform rectangle
    with a matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.bottom_left`](#Rect.bottom_left "Rect.bottom_left") | bottom left
    point, synonym *bl* |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.bottom_right`](#Rect.bottom_right "Rect.bottom_right") | bottom right
    point, synonym *br* |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.height`](#Rect.height "Rect.height") | rectangle height |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.irect`](#Rect.irect "Rect.irect") | equals result of method *round()*
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.is_empty`](#Rect.is_empty "Rect.is_empty") | whether rectangle is
    empty |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.is_valid`](#Rect.is_valid "Rect.is_valid") | whether rectangle is
    valid |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.is_infinite`](#Rect.is_infinite "Rect.is_infinite") | whether rectangle
    is infinite |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.top_left`](#Rect.top_left "Rect.top_left") | top left point, synonym
    *tl* |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.top_right`](#Rect.top_right "Rect.top_right") | top_right point, synonym
    *tr* |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.quad`](#Rect.quad "Rect.quad") | [Quad](quad.html#quad) made from
    rectangle corners |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.width`](#Rect.width "Rect.width") | rectangle width |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.x0`](#Rect.x0 "Rect.x0") | left corners’ x coordinate |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.x1`](#Rect.x1 "Rect.x1") | right corners’ x -coordinate |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.y0`](#Rect.y0 "Rect.y0") | top corners’ y coordinate |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rect.y1`](#Rect.y1 "Rect.y1") | bottom corners’ y coordinate |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Overloaded constructors: *top_left*, *bottom_right* stand for [`point_like`](glossary.html#point_like
    "point_like") objects, “sequence” is a Python sequence type of 4 numbers (see
    [Using Python Sequences as Arguments in PyMuPDF](app3.html#sequencetypes)), “rect”
    means another [`rect_like`](glossary.html#rect_like "rect_like"), while the other
    parameters mean coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: If “rect” is specified, the constructor creates a **new copy** of it.
  prefs: []
  type: TYPE_NORMAL
- en: Without parameters, the empty rectangle *Rect(0.0, 0.0, 0.0, 0.0)* is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Creates the smallest containing [IRect](irect.html#irect). This is **not**
    the same as simply rounding the rectangle’s edges: The top left corner is rounded
    upwards and to the left while the bottom right corner is rounded downwards and
    to the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If the rectangle is **empty**, the result is also empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Possible paradox:** The result may be empty, **even if** the rectangle is
    **not** empty! In such cases, the result obviously does **not** contain the rectangle.
    This is because MuPDF’s algorithm allows for a small tolerance (1e-3). Example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[IRect](irect.html#irect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Transforms the rectangle with a matrix and **replaces the original**. If the
    rectangle is empty or infinite, this is a no-operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**m** ([Matrix](matrix.html#matrix)) – The matrix for the transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Rect*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the smallest rectangle that contains the transformed original.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The intersection (common rectangular area, largest rectangle contained in both)
    of the current rectangle and *r* is calculated and **replaces the current** rectangle.
    If either rectangle is empty, the result is also empty. If *r* is infinite, this
    is a no-operation. If the rectangles are (mathematically) disjoint sets, then
    the result is invalid. If the result is valid but empty, then the rectangles touch
    each other in a corner or (part of) a side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** ([Rect](#rect)) – Second rectangle'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The smallest rectangle containing the current one and *r* is calculated and
    **replaces the current** one. If either rectangle is infinite, the result is also
    infinite. If one is empty, the other one will be taken as the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** ([Rect](#rect)) – Second rectangle'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The smallest rectangle containing the current one and point *p* is calculated
    and **replaces the current** one. **The infinite rectangle remains unchanged.**
    To create a rectangle containing a series of points, start with (the empty) *pymupdf.Rect(p1,
    p1)* and successively include the remaining points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** ([Point](point.html#point)) – Point to include.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the area of the rectangle and, with no parameter, equals *abs(rect)*.
    Like an empty rectangle, the area of an infinite rectangle is also zero. So, at
    least one of *pymupdf.Rect(p1, p2)* and *pymupdf.Rect(p2, p1)* has a zero area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**unit** (*str*) – Specify required unit: respective squares of *px* (pixels,
    default), *in* (inches), *cm* (centimeters), or *mm* (millimeters).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether *x* is contained in the rectangle. It may be an *IRect*, *Rect*,
    *Point* or number. If *x* is an empty rectangle, this is always true. If the rectangle
    is empty this is always *False* for all non-empty rectangles and for all points.
    `x in rect` and `rect.contains(x)` are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** ([`rect_like`](glossary.html#rect_like "rect_like") or [`point_like`](glossary.html#point_like
    "point_like").) – the object to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether the rectangle and a [`rect_like`](glossary.html#rect_like "rect_like")
    “r” contain a common non-empty [Rect](#rect). This will always be *False* if either
    is infinite or empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect_like*) – the rectangle to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.19.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute the matrix which transforms this rectangle to a given one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the target rectangle. Must not be empty or infinite.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a matrix `mat` such that `self * mat = rect`. Can for example be used to transform
    between the page and the pixmap coordinates. See an example use here [How to Use
    Pixmaps: Checking Text Visibility](recipes-images.html#recipesimages-p).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return a new quad after applying a matrix to the rectangle using the fixed point
    `fixpoint`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fixpoint** (*point_like*) – the fixed point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – the matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [Quad](quad.html#quad). This a wrapper for the same-named quad method.
    If infinite, the infinite quad is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.16.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the Euclidean norm of the rectangle treated as a vector of four numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Replace** the rectangle with its valid version. This is done by shuffling
    the rectangle corners. After completion of this method, the bottom right corner
    will indeed be south-eastern to the top left one (but may still be empty).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Equals result of method *round()*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Equals *Point(x0, y0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Equals `Point(x1, y0)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Equals `Point(x0, y1)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Equals `Point(x1, y1)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The quadrilateral `Quad(rect.tl, rect.tr, rect.bl, rect.br)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Quad](quad.html#quad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Width of the rectangle. Equals `max(x1 - x0, 0)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Height of the rectangle. Equals `max(y1 - y0, 0)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: X-coordinate of the left corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Y-coordinate of the top corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: X-coordinate of the right corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Y-coordinate of the bottom corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`True` if this is the infinite rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`True` if rectangle is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`True` if rectangle is valid.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This class adheres to the Python sequence protocol, so components can be accessed
    via their index, too. Also refer to [Using Python Sequences as Arguments in PyMuPDF](app3.html#sequencetypes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangles can be used with arithmetic operators – see chapter [Operator Algebra
    for Geometry Objects](algebra.html#algebra).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
