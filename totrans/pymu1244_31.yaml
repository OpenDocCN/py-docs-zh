- en: Font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/font.html](https://pymupdf.readthedocs.io/en/latest/font.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*   New in v1.16.18'
  prefs: []
  type: TYPE_NORMAL
- en: This class represents a font as defined in MuPDF (*fz_font_s* structure). It
    is required for the new class [TextWriter](textwriter.html#textwriter) and the
    new [`Page.write_text()`](page.html#Page.write_text "Page.write_text"). Currently,
    it has no connection to how fonts are used in methods [`Page.insert_text()`](page.html#Page.insert_text
    "Page.insert_text") or [`Page.insert_textbox()`](page.html#Page.insert_textbox
    "Page.insert_textbox"), respectively.
  prefs: []
  type: TYPE_NORMAL
- en: A Font object also contains useful general information, like the font bbox,
    the number of defined glyphs, glyph names or the bbox of a single glyph.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`glyph_advance()`](#Font.glyph_advance "Font.glyph_advance") | Width of
    a character |'
  prefs: []
  type: TYPE_TB
- en: '| [`glyph_bbox()`](#Font.glyph_bbox "Font.glyph_bbox") | Glyph rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`glyph_name_to_unicode()`](#Font.glyph_name_to_unicode "Font.glyph_name_to_unicode")
    | Get unicode from glyph name |'
  prefs: []
  type: TYPE_TB
- en: '| [`has_glyph()`](#Font.has_glyph "Font.has_glyph") | Return glyph id of unicode
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`text_length()`](#Font.text_length "Font.text_length") | Compute string
    length |'
  prefs: []
  type: TYPE_TB
- en: '| [`char_lengths()`](#Font.char_lengths "Font.char_lengths") | Tuple of char
    widths of a string |'
  prefs: []
  type: TYPE_TB
- en: '| [`unicode_to_glyph_name()`](#Font.unicode_to_glyph_name "Font.unicode_to_glyph_name")
    | Get glyph name of a unicode |'
  prefs: []
  type: TYPE_TB
- en: '| [`valid_codepoints()`](#Font.valid_codepoints "Font.valid_codepoints") |
    Array of supported unicodes |'
  prefs: []
  type: TYPE_TB
- en: '| [`ascender`](#Font.ascender "Font.ascender") | Font ascender |'
  prefs: []
  type: TYPE_TB
- en: '| [`descender`](#Font.descender "Font.descender") | Font descender |'
  prefs: []
  type: TYPE_TB
- en: '| [`bbox`](#Font.bbox "Font.bbox") | Font rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`buffer`](#Font.buffer "Font.buffer") | Copy of the font’s binary image
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`flags`](#Font.flags "Font.flags") | Collection of font properties |'
  prefs: []
  type: TYPE_TB
- en: '| [`glyph_count`](#Font.glyph_count "Font.glyph_count") | Number of supported
    glyphs |'
  prefs: []
  type: TYPE_TB
- en: '| [`name`](#Font.name "Font.name") | Name of font |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_writable`](#Font.is_writable "Font.is_writable") | Font usable with
    [TextWriter](textwriter.html#textwriter) |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Font constructor. The large number of parameters are used to locate font, which
    most closely resembles the requirements. Not all parameters are ever required
    – see the below pseudo code explaining the logic how the parameters are evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'one of the [PDF Base 14 Fonts](app3.html#base-14-fonts) or CJK fontnames. Also
    possible are a select few other names like (watch the correct spelling): “Arial”,
    “Times”, “Times Roman”.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(Changed in v1.17.5)*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have installed [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/),
    there are also new “reserved” fontnames available, which are listed in `fitz_fonts`
    and in the table further down.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**fontfile** (*str*) – the filename of a fontfile somewhere on your system
    [[1]](#f1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontbuffer** (*bytes**,**bytearray**,**io.BytesIO*) – a fontfile loaded in
    memory [[1]](#f1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**script** (*in*) – the number of a UCDN script. Currently supported in PyMuPDF
    are numbers 24, and 32 through 35.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – one of the values “zh-Hant” (traditional Chinese), “zh-Hans”
    (simplified Chinese), “ja” (Japanese) and “ko” (Korean). Otherwise, all ISO 639
    codes from the subsets 1, 2, 3 and 5 are also possible, but are currently documentary
    only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ordering** (*int*) – an alternative selector for one of the CJK fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**is_bold** (*bool*) – look for a bold font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**is_italic** (*bool*) – look for an italic font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**is_serif** (*bool*) – look for a serifed font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a MuPDF font if successful. This is the overall sequence of checks to determine
    an appropriate font:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fontfile? | Create font from file, exception if failure. |'
  prefs: []
  type: TYPE_TB
- en: '| fontbuffer? | Create font from buffer, exception if failure. |'
  prefs: []
  type: TYPE_TB
- en: '| ordering>=0 | Create universal font, always succeeds. |'
  prefs: []
  type: TYPE_TB
- en: '| fontname? | Create a Base-14 font, universal font, or font provided by [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    See table below. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: With the usual reserved names “helv”, “tiro”, etc., you will create fonts with
    the expected names “Helvetica”, “Times-Roman” and so on. **However**, and in contrast
    to [`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font") and friends,
  prefs: []
  type: TYPE_NORMAL
- en: a font file will **always** be embedded in your PDF,
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Greek and Cyrillic characters are supported without needing the *encoding* parameter.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Using *ordering >= 0*, or fontnames “cjk”, “china-t”, “china-s”, “japan” or
    “korea” will **always create the same “universal”** font **“Droid Sans Fallback
    Regular”**. This font supports **all Chinese, Japanese, Korean and Latin characters**,
    including Greek and Cyrillic. This is a sans-serif font.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, you would rarely ever need another sans-serif font than **“Droid Sans
    Fallback Regular”**. **Except** that this font file is relatively large and adds
    about 1.65 MB (compressed) to your PDF file size. If you do not need CJK support,
    stick with specifying “helv”, “tiro” etc., and you will get away with about 35
    KB compressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you **know** you have a mixture of CJK and Latin text, consider just using
    `Font("cjk")` because this supports everything and also significantly (by a factor
    of up to three) speeds up execution: MuPDF will always find any character in this
    single font and never needs to check fallbacks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you do use some other font, you will still automatically be able to
    also write CJK characters: MuPDF detects this situation and silently falls back
    to the universal font (which will then of course also be embedded in your PDF).'
  prefs: []
  type: TYPE_NORMAL
- en: '*(New in v1.17.5)* Optionally, some new “reserved” fontname codes become available
    if you install [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/), `pip
    install pymupdf-fonts`. **“Fira Mono”** is a mono-spaced sans font set and **FiraGO**
    is another non-serifed “universal” font set which supports all Latin (including
    Cyrillic and Greek) plus Thai, Arabian, Hewbrew and Devanagari – but none of the
    CJK languages. The size of a FiraGO font is only a quarter of the “Droid Sans
    Fallback” size (compressed 400 KB vs. 1.65 MB) – **and** it provides the weights
    bold, italic, bold-italic – which the universal font doesn’t.'
  prefs: []
  type: TYPE_NORMAL
- en: '**“Space Mono”** is another nice and small mono-spaced font from Google Fonts,
    which supports Latin Extended characters and comes with all 4 important weights.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table maps a fontname code to the corresponding font. For the
    current content of the package please see its documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Fontname | New in | Comment |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| figo | FiraGO Regular | v1.0.0 | narrower than Helvetica |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| figbo | FiraGO Bold | v1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| figit | FiraGO Italic | v1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| figbi | FiraGO Bold Italic | v1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| fimo | Fira Mono Regular | v1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| fimbo | Fira Mono Bold | v1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| spacemo | Space Mono Regular | v1.0.1 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| spacembo | Space Mono Bold | v1.0.1 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| spacemit | Space Mono Italic | v1.0.1 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| spacembi | Space Mono Bold-Italic | v1.0.1 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| math | Noto Sans Math Regular | v1.0.2 | math symbols |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| music | Noto Music Regular | v1.0.2 | musical symbols |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| symbol1 | Noto Sans Symbols Regular | v1.0.2 | replacement for “symb” |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| symbol2 | Noto Sans Symbols2 Regular | v1.0.2 | extended symbol set |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| notos | Noto Sans Regular | v1.0.3 | alternative to Helvetica |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| notosit | Noto Sans Italic | v1.0.3 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| notosbo | Noto Sans Bold | v1.0.3 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| notosbi | Noto Sans BoldItalic | v1.0.3 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Check whether the unicode *chr* exists in the font or (option) some fallback
    font. May be used to check whether any “TOFU” symbols will appear on output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**chr** (*int*) – the unicode of the character (i.e. *ord()*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – the language – currently unused.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**script** (*int*) – the UCDN script number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fallback** (*bool*) – *(new in v1.17.5)* perform an extended search in fallback
    fonts or restrict to current font (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '*(changed in 1.17.7)* the glyph number. Zero indicates no glyph found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return an array of unicodes supported by this font.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'an *array.array* [[2]](#f2) of length at most [`Font.glyph_count`](#Font.glyph_count
    "Font.glyph_count"). I.e. *chr()* of every item in this array has a glyph in the
    font without using fallbacks. This is an example display of the supported glyphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method only returns meaningful data for fonts having a CMAP (character
    map, charmap, the `/ToUnicode` PDF key). Otherwise, this array will have length
    1 and contain zero only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the “width” of the character’s glyph (visual representation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**chr** (*int*) – the unicode number of the character. Use *ord()*, not the
    character itself. Again, this should normally work even if a character is not
    supported by that font, because fallback fonts will be checked where necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wmode** (*int*) – write mode, 0 = horizontal, 1 = vertical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other parameters are not in use currently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a float representing the glyph’s width relative to **fontsize 1**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Return the unicode value for a given glyph name. Use it in conjunction with
    `chr()` if you want to output e.g. a certain symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – The name of the glyph.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The unicode integer, or 65533 = 0xFFFD if the name is unknown. Examples: `font.glyph_name_to_unicode("Sigma")
    = 931`, `font.glyph_name_to_unicode("sigma") = 963`. Refer to the [Adobe Glyph
    List](https://github.com/adobe-type-tools/agl-aglfn/blob/master/glyphlist.txt)
    publication for a list of glyph names and their unicode numbers. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The glyph rectangle relative to [`fontsize`](glossary.html#fontsize "fontsize")
    1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**chr** (*int*) – *ord()* of the character.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [Rect](rect.html#rect).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Show the name of the character’s glyph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch** (*int*) – the unicode number of the character. Use *ord()*, not the
    character itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a string representing the glyph’s name. E.g. `font.glyph_name(ord("#")) = "numbersign"`.
    For an invalid code “.notfound” is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.18.0)* This method and [`Font.glyph_name_to_unicode()`](#Font.glyph_name_to_unicode
    "Font.glyph_name_to_unicode") no longer depend on a font and instead retrieve
    information from the **Adobe Glyph List**. Also available as `pymupdf.unicode_to_glyph_name()`
    and resp. `pymupdf.glyph_name_to_unicode()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the length in points of a unicode string.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is a functional overlap with [`get_text_length()`](functions.html#get_text_length
    "get_text_length") for Base-14 fonts only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**text** (*str*) – a text string, UTF-8 encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the length of the string in points when stored in the PDF. If a character is
    not contained in the font, it will automatically be looked up in a fallback font.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'This method was originally implemented in Python, based on calling [`Font.glyph_advance()`](#Font.glyph_advance
    "Font.glyph_advance"). For performance reasons, it has been rewritten in C for
    v1.18.14\. To compute the width of a single character, you can now use either
    of the following without performance penalty:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.glyph_advance(ord("Ä")) * fontsize`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`font.text_length("Ä", fontsize=fontsize)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For multi-character strings, the method offers a huge performance advantage
    compared to the previous implementation: instead of about 0.5 microseconds for
    each character, only 12.5 nanoseconds are required for the second and subsequent
    ones.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*New in v1.18.14*'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of character lengths in points of a unicode string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**text** (*str*) – a text string, UTF-8 encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'the lengths in points of the characters of a string when stored in the PDF.
    It works like [`Font.text_length()`](#Font.text_length "Font.text_length") broken
    down to single characters. This is a high speed method, used e.g. in [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox"). The following is true (allowing rounding errors):
    `font.text_length(text) == sum(font.char_lengths(text))`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy of the binary font file content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A dictionary with various font properties, each represented as bools. Example
    for Helvetica:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: Name of the font. May be “” or “(null)”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The font bbox. This is the maximum of its glyph bboxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: The number of glyphs defined in the font.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ascender value of the font, see [here](https://en.wikipedia.org/wiki/Ascender_(typography))
    for details. Please note that there is a difference to the strict definition:
    our value includes everything above the baseline – not just the height difference
    between upper case “A” and and lower case “a”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The descender value of the font, see [here](https://en.wikipedia.org/wiki/Descender)
    for details. This value always is negative and is the portion that some glyphs
    descend below the base line, for example “g” or “y”. As a consequence, the value
    `ascender - descender` is the total height, that every glyph of the font fits
    into. This is true at least for most fonts – as always, there are exceptions,
    especially for calligraphic fonts, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates whether this font can be used with [TextWriter](textwriter.html#textwriter).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
