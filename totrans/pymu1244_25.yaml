- en: Annot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/annot.html](https://pymupdf.readthedocs.io/en/latest/annot.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**This class is for PDF only.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quote from the [Adobe PDF References](app3.html#adobemanual): “An annotation
    associates an object such as a note, sound, or movie with a location on a page
    of a PDF document, or provides a way to interact with the user by means of the
    mouse and keyboard.”'
  prefs: []
  type: TYPE_NORMAL
- en: There is a parent-child relationship between an annotation and its page. If
    the page object becomes unusable (closed document, any document structure change,
    etc.), then so does every of its existing annotation objects – an exception is
    raised saying that the object is “orphaned”, whenever an annotation property or
    method is accessed.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.delete_responses()`](#Annot.delete_responses "Annot.delete_responses")
    | delete all responding annotions |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.get_file()`](#Annot.get_file "Annot.get_file") | get attached file
    content |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.get_oc()`](#Annot.get_oc "Annot.get_oc") | get [`xref`](glossary.html#xref
    "xref") of an [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD "OCMD")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.get_pixmap()`](#Annot.get_pixmap "Annot.get_pixmap") | image of the
    annotation as a pixmap |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.get_sound()`](#Annot.get_sound "Annot.get_sound") | get the sound
    of an audio annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.get_text()`](#Annot.get_text "Annot.get_text") | extract annotation
    text |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.get_textbox()`](#Annot.get_textbox "Annot.get_textbox") | extract
    annotation text |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_border()`](#Annot.set_border "Annot.set_border") | set annotation’s
    border properties |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_blendmode()`](#Annot.set_blendmode "Annot.set_blendmode") | set
    annotation’s blend mode |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_colors()`](#Annot.set_colors "Annot.set_colors") | set annotation’s
    colors |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_flags()`](#Annot.set_flags "Annot.set_flags") | set annotation’s
    flags field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_irt_xref()`](#Annot.set_irt_xref "Annot.set_irt_xref") | define
    the annotation to being “In Response To” |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_name()`](#Annot.set_name "Annot.set_name") | set annotation’s
    name field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_oc()`](#Annot.set_oc "Annot.set_oc") | set [`xref`](glossary.html#xref
    "xref") to an [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD "OCMD")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_opacity()`](#Annot.set_opacity "Annot.set_opacity") | change
    transparency |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_open()`](#Annot.set_open "Annot.set_open") | open / close annotation
    or its Popup |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_popup()`](#Annot.set_popup "Annot.set_popup") | create a Popup
    for the annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_rect()`](#Annot.set_rect "Annot.set_rect") | change annotation
    rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.set_rotation()`](#Annot.set_rotation "Annot.set_rotation") | change
    rotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.update_file()`](#Annot.update_file "Annot.update_file") | update
    attached file content |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.update()`](#Annot.update "Annot.update") | apply accumulated annot
    changes |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.blendmode`](#Annot.blendmode "Annot.blendmode") | annotation BlendMode
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.border`](#Annot.border "Annot.border") | border details |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.colors`](#Annot.colors "Annot.colors") | border / background and
    fill colors |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.file_info`](#Annot.file_info "Annot.file_info") | get attached file
    information |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.flags`](#Annot.flags "Annot.flags") | annotation flags |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.has_popup`](#Annot.has_popup "Annot.has_popup") | whether annotation
    has a Popup |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.irt_xref`](#Annot.irt_xref "Annot.irt_xref") | annotation to which
    this one responds |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.info`](#Annot.info "Annot.info") | various information |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.is_open`](#Annot.is_open "Annot.is_open") | whether annotation or
    its Popup is open |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.line_ends`](#Annot.line_ends "Annot.line_ends") | start / end appearance
    of line-type annotations |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.next`](#Annot.next "Annot.next") | link to the next annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.opacity`](#Annot.opacity "Annot.opacity") | the annot’s transparency
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.parent`](#Annot.parent "Annot.parent") | page object of the annotation
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.popup_rect`](#Annot.popup_rect "Annot.popup_rect") | rectangle of
    the annotation’s Popup |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.popup_xref`](#Annot.popup_xref "Annot.popup_xref") | the PDF [`xref`](glossary.html#xref
    "xref") number of the annotation’s Popup |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.rect`](#Annot.rect "Annot.rect") | rectangle containing the annotation
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.type`](#Annot.type "Annot.type") | type of the annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.vertices`](#Annot.vertices "Annot.vertices") | point coordinates
    of Polygons, PolyLines, etc. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.xref`](#Annot.xref "Annot.xref") | the PDF [`xref`](glossary.html#xref
    "xref") number |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.19.2: added support of dpi parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a pixmap from the annotation as it appears on the page in untransformed
    coordinates. The pixmap’s [IRect](irect.html#irect) equals *Annot.rect.irect*
    (see below). **All parameters are keyword only.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – a matrix to be used for image creation. Default
    is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – (new in v1.19.2) desired resolution in dots per inch. If
    not `None`, the matrix parameter is ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colorspace** ([Colorspace](colorspace.html#colorspace)) – a colorspace to
    be used for image creation. Default is *pymupdf.csRGB*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*bool*) – whether to include transparency information. Default is
    *False*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the annotation has just been created or modified, you should [`Document.reload_page()`](document.html#Document.reload_page
    "Document.reload_page") the page first via `page = doc.reload_page(page)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pixmap will have *“premultiplied”* pixels if `alpha=True`. To learn about
    some background, e.g. look for “Premultiplied alpha” [here](https://en.wikipedia.org/wiki/Glossary_of_computer_graphics#P).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: New in 1.18.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieves the content of the annotation in a variety of formats – much like
    the same method for [Page](page.html#page).. This currently only delivers relevant
    data for annotation types ‘FreeText’ and ‘Stamp’. Other types return an empty
    string (or equivalent objects).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opt** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (positional only) the desired format - one of the following values. Please note
    that this method works exactly like the same-named method of [Page](page.html#page).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ”text” – [`TextPage.extractTEXT()`](textpage.html#TextPage.extractTEXT "TextPage.extractTEXT"),
    default
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”blocks” – [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”words” – [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”html” – [`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”xhtml” – [`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”xml” – [`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”dict” – [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”json” – [`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON "TextPage.extractJSON")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ”rawdict” – [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – (keyword only) restrict the extraction to this area.
    Should hardly ever be required, defaults to [`Annot.rect`](#Annot.rect "Annot.rect").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – (keyword only) control the amount of data returned. Defaults
    to simple text extraction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: New in 1.18.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the annotation text. Mostly (except line breaks) equal to [`Annot.get_text()`](#Annot.get_text
    "Annot.get_text") with the “text” option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect-like*) – the area to consider, defaults to [`Annot.rect`](#Annot.rect
    "Annot.rect").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Changed in version 1.16.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes annotation properties. These include dates, contents, subject and author
    (title). Changes for *name* and *id* will be ignored. The update happens selectively:
    To leave a property unchanged, set it to *None*. To delete existing data, use
    an empty string.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**info** (*dict*) – a dictionary compatible with the *info* property (see below).
    All entries must be strings. If this argument is not a dictionary, the other arguments
    are used instead – else they are ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**content** (*str*) – *(new in v1.16.10)* see description in [`info`](#Annot.info
    "Annot.info").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**title** (*str*) – *(new in v1.16.10)* see description in [`info`](#Annot.info
    "Annot.info").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**creationDate** (*str*) – *(new in v1.16.10)* date of annot creation. If given,
    should be in PDF datetime format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**modDate** (*str*) – *(new in v1.16.10)* date of last modification. If given,
    should be in PDF datetime format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**subject** (*str*) – *(new in v1.16.10)* see description in [`info`](#Annot.info
    "Annot.info").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Sets an annotation’s line ending styles. Each of these annotation types is defined
    by a list of points which are connected by lines. The symbol identified by *start*
    is attached to the first point, and *end* to the last point of this list. For
    unsupported annotation types, a no-operation with a warning message results.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While ‘FreeText’, ‘Line’, ‘PolyLine’, and ‘Polygon’ annotations can have these
    properties, (Py-) MuPDF does not support line ends for ‘FreeText’, because the
    call-out variant of it is not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*(Changed in v1.16.16)* Some symbols have an interior area (diamonds, circles,
    squares, etc.). By default, these areas are filled with the fill color of the
    annotation. If this is *None*, then white is chosen. The *fill_color* argument
    of [`Annot.update()`](#Annot.update "Annot.update") can now be used to override
    this and give line end symbols their own fill color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*int*) – The symbol number for the first point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*int*) – The symbol number for the last point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Set the annotation’s visibility using PDF optional content mechanisms. This
    visibility is controlled by the user interface of supporting PDF viewers. It is
    independent from other attributes like [`Annot.flags`](#Annot.flags "Annot.flags").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of an optional contents
    group (OCG or OCMD). Any previous xref will be overwritten. If zero, a previous
    entry will be removed. An exception occurs if the xref is not zero and does not
    point to a valid PDF object.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This does **not require executing** [`Annot.update()`](#Annot.update "Annot.update")
    to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`xref`](glossary.html#xref "xref") of an optional content object,
    or zero if there is none.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: zero or the xref of an OCG (or OCMD).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set annotation to be “In Response To” another one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) –'
  prefs: []
  type: TYPE_NORMAL
- en: The [`xref`](glossary.html#xref "xref") of another annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Must refer to an existing annotation on this page. Setting this property requires
    no subsequent [`update()`](#Annot.update "Annot.update").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the annotation’s Popup annotation to open or closed – **or** the annotation
    itself, if its type is ‘Text’ (“sticky note”).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** (*bool*) – the desired open state.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Popup annotation for the annotation and specify its rectangle. If the
    Popup already exists, only its rectangle is updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the desired rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Set the annotation’s transparency. Opacity can also be set in [`Annot.update()`](#Annot.update
    "Annot.update").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** (*float*) – a float in range *[0, 1]*. Any value outside is assumed
    to be 1\. E.g. a value of 0.5 sets the transparency to 50%.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Three overlapping ‘Circle’ annotations with each opacity set to 0.5:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-opacity.jpg](../Images/a760421415acb6df1805b9ef39944d74.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The annotation’s blend mode. See [Adobe PDF References](app3.html#adobemanual),
    page 324 for explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the blend mode or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the annotation’s blend mode. See [Adobe PDF References](app3.html#adobemanual),
    page 324 for explanations. The blend mode can also be set in [`Annot.update()`](#Annot.update
    "Annot.update").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**blendmode** (*str*) – set the blend mode. Use [`Annot.update()`](#Annot.update
    "Annot.update") to reflect this in the visual appearance. For predefined values
    see [PDF Standard Blend Modes](vars.html#blendmodes). Use `PDF_BM_Normal` to **remove**
    a blend mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.16.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the name field of any annotation type. For ‘FileAttachment’ and ‘Text’
    annotations, this is the icon name, for ‘Stamp’ annotations the text in the stamp.
    The visual result (if any) depends on your PDF viewer. See also [Annotation Icons
    in MuPDF](#mupdficons).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – the new name.'
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'If you set the name of a ‘Stamp’ annotation, then this will **not change**
    the rectangle, nor will the text be layouted in any way. If you choose a standard
    text from [Stamp Annotation Icons](vars.html#stampicons) (the **exact** name piece
    after `"STAMP_"`), you should receive the original layout. An **arbitrary text**
    will not be changed to upper case, but be written in font “Times-Bold” as is,
    horizontally centered in **one line** and be shortened to fit. To get your text
    fully displayed, its length using [`fontsize`](glossary.html#fontsize "fontsize")
    20 must not exceed 190 points. So please make sure that the following inequality
    is true: `pymupdf.get_text_length(text, fontname="tibo", fontsize=20) <= 190`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Change the rectangle of an annotation. The annotation can be moved around and
    both sides of the rectangle can be independently scaled. However, the annotation
    appearance will never get rotated, flipped or sheared. This method only affects
    certain annotation types [[2]](#f2) and will lead to a message on Python’s `sys.stderr`
    in other cases. No exception will be raised, but `False` will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the new rectangle of the annotation (finite and not
    empty). E.g. using a value of *annot.rect + (5, 5, 5, 5)* will shift the annot
    position 5 pixels to the right and downwards.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You **need not** invoke [`Annot.update()`](#Annot.update "Annot.update") for
    activation of the effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Set the rotation of an annotation. This rotates the annotation rectangle around
    its center point. Then a **new annotation rectangle** is calculated from the resulting
    quad.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angle** (*int*) – rotation angle in degrees. Arbitrary values are possible,
    but will be clamped to the interval `[0, 360)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You **must invoke** [`Annot.update()`](#Annot.update "Annot.update") to activate
    the effect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PDF_ANNOT_FREE_TEXT, only one of the values 0, 90, 180 and 270 is possible
    and will **rotate the text** inside the current rectangle (which remains unchanged).
    Other values are silently ignored and replaced by 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Otherwise, only the following [Annotation Types](vars.html#annotationtypes)
    can be rotated: ‘Square’, ‘Circle’, ‘Caret’, ‘Text’, ‘FileAttachment’, ‘Ink’,
    ‘Line’, ‘Polyline’, ‘Polygon’, and ‘Stamp’. For all others the method is a no-op.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.16.9: Allow specification without using a dictionary.
    The direct parameters are used if *border* is not a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 1.22.5: Support of the “cloudy” border effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Change border width, dashing, style and cloud effect. See the [`Annot.border`](#Annot.border
    "Annot.border") attribute for more details.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**border** (*dict*) – a dictionary as returned by the [`border`](#Annot.border
    "Annot.border") property, with keys *“width”* (*float*), *“style”* (*str*), *“dashes”*
    (*sequence*) and *clouds* (*int*). Omitted keys will leave the resp. property
    unchanged. Set the border argument to `None` (the default) to use the other arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*float*) – A non-negative value will change the border line width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** (*str*) – A value other than `None` will change this border property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dashes** (*sequence*) – All items of the sequence must be integers, otherwise
    the parameter is ignored. To remove dashing use: `dashes=[]`. If dashes is a non-empty
    sequence, “style” will automatically be set to “D” (dashed).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clouds** (*int*) – A value >= 0 will change this property. Use `clouds=0`
    to remove the cloudy appearance completely. Only annotation types ‘Square’, ‘Circle’,
    and ‘Polygon’ are supported with this property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Changes the annotation flags. Use the `|` operator to combine several.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – an integer specifying the required flags.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.16.9: Allow colors to be directly set. These parameters
    are used if *colors* is not a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes the “stroke” and “fill” colors for supported annotation types – not
    all annotations accept both.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**colors** (*dict*) – a dictionary containing color specifications. For accepted
    dictionary keys and values see below. The most practical way should be to first
    make a copy of the *colors* property and then modify this dictionary as required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stroke** (*sequence*) – see above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill** (*sequence*) – see above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Changed in v1.18.5:* To completely remove a color specification, use an empty
    sequence like `[]`. If you specify `None`, an existing specification will not
    be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.16.12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete annotations referring to this one. This includes any ‘Popup’ annotations
    and all annotations responding to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Synchronize the appearance of an annotation with its properties after relevant
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can safely **omit** this method **only** for the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Annot.set_rect()`](#Annot.set_rect "Annot.set_rect")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_flags()`](#Annot.set_flags "Annot.set_flags")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_oc()`](#Annot.set_oc "Annot.set_oc")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.update_file()`](#Annot.update_file "Annot.update_file")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Annot.set_info()`](#Annot.set_info "Annot.set_info") (except any changes
    to *“content”*)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: All arguments are optional. *(Changed in v1.16.14)* Blend mode and opacity are
    applicable to **all annotation types**. The other arguments are mostly special
    use, as described below.
  prefs: []
  type: TYPE_NORMAL
- en: Color specifications may be made in the usual format used in PuMuPDF as sequences
    of floats ranging from 0.0 to 1.0 (including both). The sequence length must be
    1, 3 or 4 (supporting GRAY, RGB and CMYK colorspaces respectively). For GRAY,
    just a float is also acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – *(new in v1.16.14)* **valid for all annotation types:**
    change or set the annotation’s transparency. Valid values are *0 <= opacity <
    1*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blend_mode** (*str*) – *(new in v1.16.14)* **valid for all annotation types:**
    change or set the annotation’s blend mode. For valid values see [PDF Standard
    Blend Modes](vars.html#blendmodes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – change [`fontsize`](glossary.html#fontsize "fontsize")
    of the text. ‘FreeText’ annotations only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** (*sequence**,**float*) – change the text color. ‘FreeText’ annotations
    only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**border_color** (*sequence**,**float*) – change the border color. ‘FreeText’
    annotations only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill_color** (*sequence**,**float*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the fill color.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '’Line’, ‘Polyline’, ‘Polygon’ annotations: use it to give applicable line end
    symbols a fill color other than that of the annotation *(changed in v1.16.16)*.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_out** (*bool*) – *(new in v1.17.2)* add two diagonal lines to the annotation
    rectangle. ‘Redact’ annotations only. If not desired, *False* must be specified
    even if the annotation was created with *False*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – new rotation value. Default (-1) means no change. Supports
    ‘FreeText’ and several other annotation types (see [`Annot.set_rotation()`](#Annot.set_rotation
    "Annot.set_rotation")), [[1]](#f1). Only choose 0, 90, 180, or 270 degrees for
    ‘FreeText’. Otherwise any integer is acceptable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using this method inside a [`Page.annots()`](page.html#Page.annots "Page.annots")
    loop is **not recommended!** This is because most annotation updates require the
    owning page to be reloaded – which cannot be done inside this loop. Please use
    the example coding pattern given in the documentation of this generator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Basic information of the annot’s attached file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a dictionary with keys *filename*, *ufilename*, *desc* (description), *size*
    (uncompressed file size), *length* (compressed length) for FileAttachment annot
    types, else *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Returns attached file content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the content of the attached file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Updates the content of an attached file. All arguments are optional. No arguments
    lead to a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**buffer** (*bytes**|**bytearray**|**BytesIO*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the new file content. Omit to only change meta-information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(Changed in version 1.14.13)* *io.BytesIO* is now also supported.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filename** (*str*) – new filename to associate with the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ufilename** (*str*) – new unicode filename to associate with the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**desc** (*str*) – new description of the file content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Return the embedded sound of an audio annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the sound audio file and accompanying properties. These are the possible dictionary
    keys, of which only “rate” and “stream” are always present.
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| rate | (float, requ.) samples per second |'
  prefs: []
  type: TYPE_TB
- en: '| channels | (int, opt.) number of sound channels |'
  prefs: []
  type: TYPE_TB
- en: '| bps | (int, opt.) bits per sample value per channel |'
  prefs: []
  type: TYPE_TB
- en: '| encoding | (str, opt.) encoding format: Raw, Signed, muLaw, ALaw |'
  prefs: []
  type: TYPE_TB
- en: '| compression | (str, opt.) name of compression filter |'
  prefs: []
  type: TYPE_TB
- en: '| stream | (bytes, requ.) the sound file content |'
  prefs: []
  type: TYPE_TB
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The annotation’s transparency. If set, it is a value in range *[0, 1]*. The
    PDF default is 1\. However, in an effort to tell the difference, we return *-1.0*
    if not set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The owning page object of the annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Page](page.html#page)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The annot rotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a value [-1, 359]. If rotation is not at all, -1 is returned (and implies a
    rotation angle of 0). Other possible values are normalized to some value value
    0 <= angle < 360.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The rectangle containing the annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The next annotation on this page or None.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Annot*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: A number and one or two strings describing the annotation type, like **[2, ‘FreeText’,
    ‘FreeTextCallout’]**. The second string entry is optional and may be empty. See
    the appendix [Annotation Types](vars.html#annotationtypes) for a list of possible
    values and their meanings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary containing various information. All fields are optional strings.
    For information items not provided, an empty string is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '*name* – e.g. for ‘Stamp’ annotations it will contain the stamp text like “Sold”
    or “Experimental”, for other annot types you will see the name of the annot’s
    icon here (“PushPin” for FileAttachment).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*content* – a string containing the text for type *Text* and *FreeText* annotations.
    Commonly used for filling the text field of annotation pop-up windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*title* – a string containing the title of the annotation pop-up window. By
    convention, this is used for the **annotation author**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*creationDate* – creation timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*modDate* – last modified timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*subject* – subject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*id* – *(new in version 1.16.10)* a unique identification of the annotation.
    This is taken from PDF key */NM*. Annotations added by PyMuPDF will have a unique
    name, which appears here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: An integer whose low order bits contain flags for how the annotation should
    be presented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: A pair of integers specifying start and end symbol of annotations types ‘FreeText’,
    ‘Line’, ‘PolyLine’, and ‘Polygon’. *None* if not applicable. For possible values
    and descriptions in this list, see the [Adobe PDF References](app3.html#adobemanual),
    table 1.76 on page 400.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'A list containing a variable number of point (“vertices”) coordinates (each
    given by a pair of floats) for various types of annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘Line’ – the starting and ending coordinates (2 float pairs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘FreeText’ – 2 or 3 float pairs designating the starting, the (optional) knee
    point, and the ending coordinates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘PolyLine’ / ‘Polygon’ – the coordinates of the edges connected by line pieces
    (n float pairs for n points).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text markup annotations – 4 float pairs specifying the *QuadPoints* of the marked
    text span (see [Adobe PDF References](app3.html#adobemanual), page 403).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘Ink’ – list of one to many sublists of vertex coordinates. Each such sublist
    represents a separate line in the drawing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'dictionary of two lists of floats in range *0 <= float <= 1* specifying the
    “stroke” and the interior (“fill”) colors. The stroke color is used for borders
    and everything that is actively painted or written (“stroked”). The fill color
    is used for the interior of objects like line ends, circles and squares. The lengths
    of these lists implicitly determine the colorspaces used: 1 = GRAY, 3 = RGB, 4
    = CMYK. So “[1.0, 0.0, 0.0]” stands for RGB color red. Both lists can be empty
    if no color is specified.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The PDF [`xref`](glossary.html#xref "xref").
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The PDF [`xref`](glossary.html#xref "xref") of an annotation to which this one
    responds. Return zero if this is no response annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The PDF [`xref`](glossary.html#xref "xref") of the associated Popup annotation.
    Zero if non-existent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Whether the annotation has a Popup annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Whether the annotation’s Popup is open – **or** the annotation itself (‘Text’
    annotations only).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The rectangle of the associated Popup annotation. Infinite rectangle if non-existent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'A tuple of four floats representing the `/RD` entry of the annotation. The
    four numbers describe the numerical differences (left, top, -right, -bottom) between
    two rectangles: the [`rect`](#Annot.rect "Annot.rect") of the annotation and a
    rectangle contained within that rectangle. If the entry is missing, this property
    is `(0, 0, 0, 0)`. If the annotation border is a normal, straight line, these
    numbers are typically border width divided by 2\. If the annotation has a “cloudy”
    border, you will see the breadth of the cloud semi-circles here. In general, the
    numbers need not be identical. To compute the inner rectangle do `a.rect + a.rect_delta`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'A dictionary containing border characteristics. Empty if no border information
    exists. The following keys may be present:'
  prefs: []
  type: TYPE_NORMAL
- en: '*width* – a float indicating the border thickness in points. The value is -1.0
    if no width is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*dashes* – a sequence of integers specifying a line dashing pattern. *[]* means
    no dashes, *[n]* means equal on-off lengths of *n* points, longer lists will be
    interpreted as specifying alternating on-off length values. See the [Adobe PDF
    References](app3.html#adobemanual) page 126 for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*style* – 1-byte border style: **“S”** (Solid) = solid line surrounding the
    annotation, **“D”** (Dashed) = dashed line surrounding the annotation, the dash
    pattern is specified by the *dashes* entry, **“B”** (Beveled) = a simulated embossed
    rectangle that appears to be raised above the surface of the page, **“I”** (Inset)
    = a simulated engraved rectangle that appears to be recessed below the surface
    of the page, **“U”** (Underline) = a single line along the bottom of the annotation
    rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*clouds* – an integer indicating a “cloudy” border, where [`n`](colorspace.html#Colorspace.n
    "Colorspace.n") is an integer `-1 <= n <= 2`. A value `n = 0` indicates a straight
    line (no clouds), 1 means small and 2 means large semi-circles, mimicking the
    cloudy appearance. If -1, then no specification is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: '## Annotation Icons in MuPDF'
  prefs: []
  type: TYPE_NORMAL
- en: This is a list of icons referenceable by name for annotation types ‘Text’ and
    ‘FileAttachment’. You can use them via the *icon* parameter when adding an annotation,
    or use the as argument in [`Annot.set_name()`](#Annot.set_name "Annot.set_name").
    It is left to your discretion which item to choose when – no mechanism will keep
    you from using e.g. the “Speaker” icon for a ‘FileAttachment’.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/mupdf-icons.jpg](../Images/8f05f0e6e43bd5ea29237ccdcd12ffdb.png)'
  prefs: []
  type: TYPE_IMG
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the graphical image of an annotation. Also update the “author” and the
    text to be shown in the popup window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the circle annotation looks like before and after the change (pop-up
    windows displayed using Nitro PDF viewer):'
  prefs: []
  type: TYPE_NORMAL
- en: '![circle](../Images/b402297eb80fea5a6a1fecd0dbdee034.png)'
  prefs: []
  type: TYPE_IMG
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## Annotation Icons in MuPDF'
  prefs: []
  type: TYPE_NORMAL
- en: This is a list of icons referenceable by name for annotation types ‘Text’ and
    ‘FileAttachment’. You can use them via the *icon* parameter when adding an annotation,
    or use the as argument in [`Annot.set_name()`](#Annot.set_name "Annot.set_name").
    It is left to your discretion which item to choose when – no mechanism will keep
    you from using e.g. the “Speaker” icon for a ‘FileAttachment’.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/mupdf-icons.jpg](../Images/8f05f0e6e43bd5ea29237ccdcd12ffdb.png)'
  prefs: []
  type: TYPE_IMG
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the graphical image of an annotation. Also update the “author” and the
    text to be shown in the popup window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the circle annotation looks like before and after the change (pop-up
    windows displayed using Nitro PDF viewer):'
  prefs: []
  type: TYPE_NORMAL
- en: '![circle](../Images/b402297eb80fea5a6a1fecd0dbdee034.png)'
  prefs: []
  type: TYPE_IMG
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
