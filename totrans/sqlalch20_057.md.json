["```py\nclass sqlalchemy.orm.sessionmaker\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine('postgresql+psycopg2://scott:tiger@localhost/')\n\nSession = sessionmaker(engine)\n\nwith Session() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```", "```py\nsession = Session()\ntry:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\nfinally:\n    session.close()\n```", "```py\nSession = sessionmaker(engine)\n\nwith Session.begin() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n# commits transaction, closes session\n```", "```py\nSession = sessionmaker(engine)\n\n# bind an individual session to a connection\n\nwith engine.connect() as connection:\n    with Session(bind=connection) as session:\n        # work with session\n```", "```py\n# application starts, sessionmaker does not have\n# an engine bound yet\nSession = sessionmaker()\n\n# ... later, when an engine URL is read from a configuration\n# file or other events allow the engine to be created\nengine = create_engine('sqlite:///foo.db')\nSession.configure(bind=engine)\n\nsess = Session()\n# work with session\n```", "```py\nmethod __call__(**local_kw: Any) \u2192 _S\n```", "```py\nSession = sessionmaker(some_engine)\nsession = Session()  # invokes sessionmaker.__call__()\n```", "```py\nmethod __init__(bind: Optional[_SessionBind] = None, *, class_: Type[_S] = <class 'sqlalchemy.orm.session.Session'>, autoflush: bool = True, expire_on_commit: bool = True, info: Optional[_InfoType] = None, **kw: Any)\n```", "```py\nmethod begin() \u2192 AbstractContextManager[_S]\n```", "```py\nSession = sessionmaker(some_engine)\n\nwith Session.begin() as session:\n    session.add(some_object)\n\n# commits transaction, closes session\n```", "```py\nclassmethod close_all() \u2192 None\n```", "```py\nmethod configure(**new_kw: Any) \u2192 None\n```", "```py\nSession = sessionmaker()\n\nSession.configure(bind=create_engine('sqlite://'))\n```", "```py\nclassmethod identity_key(class_: Type[Any] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: Any | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[Any]\n```", "```py\nclassmethod object_session(instance: object) \u2192 Session | None\n```", "```py\nclass sqlalchemy.orm.ORMExecuteState\n```", "```py\nmethod __init__(session: Session, statement: Executable, parameters: _CoreAnyExecuteParams | None, execution_options: _ExecuteOptions, bind_arguments: _BindArguments, compile_state_cls: Type[ORMCompileState] | None, events_todo: List[_InstanceLevelDispatch[Session]])\n```", "```py\nattribute all_mappers\n```", "```py\nattribute bind_arguments: _BindArguments\n```", "```py\nattribute bind_mapper\n```", "```py\nattribute execution_options: _ExecuteOptions\n```", "```py\nmethod invoke_statement(statement: Executable | None = None, params: _CoreAnyExecuteParams | None = None, execution_options: OrmExecuteOptionsParameter | None = None, bind_arguments: _BindArguments | None = None) \u2192 Result[Any]\n```", "```py\nattribute is_column_load\n```", "```py\nattribute is_delete\n```", "```py\nattribute is_executemany\n```", "```py\nattribute is_from_statement\n```", "```py\nattribute is_insert\n```", "```py\nattribute is_orm_statement\n```", "```py\nattribute is_relationship_load\n```", "```py\nattribute is_select\n```", "```py\nattribute is_update\n```", "```py\nattribute lazy_loaded_from\n```", "```py\nattribute load_options\n```", "```py\nattribute loader_strategy_path\n```", "```py\nattribute local_execution_options: _ExecuteOptions\n```", "```py\nattribute parameters: _CoreAnyExecuteParams | None\n```", "```py\nattribute session: Session\n```", "```py\nattribute statement: Executable\n```", "```py\nattribute update_delete_options\n```", "```py\nmethod update_execution_options(**opts: Any) \u2192 None\n```", "```py\nattribute user_defined_options\n```", "```py\nclass sqlalchemy.orm.Session\n```", "```py\nmethod __init__(bind: _SessionBind | None = None, *, autoflush: bool = True, future: Literal[True] = True, expire_on_commit: bool = True, autobegin: bool = True, twophase: bool = False, binds: Dict[_SessionBindKey, _SessionBind] | None = None, enable_baked_queries: bool = True, info: _InfoType | None = None, query_cls: Type[Query[Any]] | None = None, autocommit: Literal[False] = False, join_transaction_mode: JoinTransactionMode = 'conditional_savepoint', close_resets_only: bool | _NoArg = _NoArg.NO_ARG)\n```", "```py\n    Session = sessionmaker(binds={\n        SomeMappedClass: create_engine('postgresql+psycopg2://engine1'),\n        SomeDeclarativeBase: create_engine('postgresql+psycopg2://engine2'),\n        some_mapper: create_engine('postgresql+psycopg2://engine3'),\n        some_table: create_engine('postgresql+psycopg2://engine4'),\n        })\n    ```", "```py\nmethod add(instance: object, _warn: bool = True) \u2192 None\n```", "```py\nmethod add_all(instances: Iterable[object]) \u2192 None\n```", "```py\nmethod begin(nested: bool = False) \u2192 SessionTransaction\n```", "```py\nmethod begin_nested() \u2192 SessionTransaction\n```", "```py\nmethod bind_mapper(mapper: _EntityBindKey[_O], bind: _SessionBind) \u2192 None\n```", "```py\nmethod bind_table(table: TableClause, bind: Engine | Connection) \u2192 None\n```", "```py\nmethod bulk_insert_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = False, render_nulls: bool = False) \u2192 None\n```", "```py\nmethod bulk_save_objects(objects: Iterable[object], return_defaults: bool = False, update_changed_only: bool = True, preserve_order: bool = True) \u2192 None\n```", "```py\nmethod bulk_update_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]]) \u2192 None\n```", "```py\nmethod close() \u2192 None\n```", "```py\nclassmethod close_all() \u2192 None\n```", "```py\nmethod commit() \u2192 None\n```", "```py\nmethod connection(bind_arguments: _BindArguments | None = None, execution_options: CoreExecuteOptionsParameter | None = None) \u2192 Connection\n```", "```py\nmethod delete(instance: object) \u2192 None\n```", "```py\nattribute deleted\n```", "```py\nattribute dirty\n```", "```py\nsome_mapped_object in session.dirty\n```", "```py\nmethod enable_relationship_loading(obj: object) \u2192 None\n```", "```py\nmethod execute(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, _parent_execute_state: Any | None = None, _add_event: Any | None = None) \u2192 Result[Any]\n```", "```py\nfrom sqlalchemy import select\nresult = session.execute(\n    select(User).where(User.id == 5)\n)\n```", "```py\nmethod expire(instance: object, attribute_names: Iterable[str] | None = None) \u2192 None\n```", "```py\nmethod expire_all() \u2192 None\n```", "```py\nmethod expunge(instance: object) \u2192 None\n```", "```py\nmethod expunge_all() \u2192 None\n```", "```py\nmethod flush(objects: Sequence[Any] | None = None) \u2192 None\n```", "```py\nmethod get(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O | None\n```", "```py\nmy_user = session.get(User, 5)\n\nsome_object = session.get(VersionedFoo, (5, 10))\n\nsome_object = session.get(\n    VersionedFoo,\n    {\"id\": 5, \"version_id\": 10}\n)\n```", "```py\n    my_object = session.get(SomeClass, 5)\n    ```", "```py\n    my_object = session.get(SomeClass, (5, 10))\n    ```", "```py\n    my_object = session.get(SomeClass, {\"id\": 5, \"version_id\": 10})\n    ```", "```py\nmethod get_bind(mapper: _EntityBindKey[_O] | None = None, *, clause: ClauseElement | None = None, bind: _SessionBind | None = None, _sa_skip_events: bool | None = None, _sa_skip_for_implicit_returning: bool = False, **kw: Any) \u2192 Engine | Connection\n```", "```py\nmethod get_nested_transaction() \u2192 SessionTransaction | None\n```", "```py\nmethod get_one(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O\n```", "```py\nmethod get_transaction() \u2192 SessionTransaction | None\n```", "```py\nclassmethod identity_key(class_: Type[Any] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: Any | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[Any]\n```", "```py\nattribute identity_map: IdentityMap\n```", "```py\nmethod in_nested_transaction() \u2192 bool\n```", "```py\nmethod in_transaction() \u2192 bool\n```", "```py\nattribute info\n```", "```py\nmethod invalidate() \u2192 None\n```", "```py\nimport gevent\n\ntry:\n    sess = Session()\n    sess.add(User())\n    sess.commit()\nexcept gevent.Timeout:\n    sess.invalidate()\n    raise\nexcept:\n    sess.rollback()\n    raise\n```", "```py\nattribute is_active\n```", "```py\nmethod is_modified(instance: object, include_collections: bool = True) \u2192 bool\n```", "```py\nreturn session.is_modified(someobject)\n```", "```py\nmethod merge(instance: _O, *, load: bool = True, options: Sequence[ORMOption] | None = None) \u2192 _O\n```", "```py\nattribute new\n```", "```py\nattribute no_autoflush\n```", "```py\nwith session.no_autoflush:\n\n    some_object = SomeClass()\n    session.add(some_object)\n    # won't autoflush\n    some_object.related_thing = session.query(SomeRelated).first()\n```", "```py\nclassmethod object_session(instance: object) \u2192 Session | None\n```", "```py\nmethod prepare() \u2192 None\n```", "```py\nmethod query(*entities: _ColumnsClauseArgument[Any], **kwargs: Any) \u2192 Query[Any]\n```", "```py\nmethod refresh(instance: object, attribute_names: Iterable[str] | None = None, with_for_update: ForUpdateParameter = None) \u2192 None\n```", "```py\nmethod reset() \u2192 None\n```", "```py\nmethod rollback() \u2192 None\n```", "```py\nmethod scalar(statement: Executable, params: _CoreSingleExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 Any\n```", "```py\nmethod scalars(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 ScalarResult[Any]\n```", "```py\nclass sqlalchemy.orm.SessionTransaction\n```", "```py\nattribute nested: bool = False\n```", "```py\nattribute origin: SessionTransactionOrigin\n```", "```py\nattribute parent\n```", "```py\nclass sqlalchemy.orm.SessionTransactionOrigin\n```", "```py\nattribute AUTOBEGIN = 0\n```", "```py\nattribute BEGIN = 1\n```", "```py\nattribute BEGIN_NESTED = 2\n```", "```py\nattribute SUBTRANSACTION = 3\n```", "```py\nfunction sqlalchemy.orm.close_all_sessions() \u2192 None\n```", "```py\nfunction sqlalchemy.orm.make_transient(instance: object) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.make_transient_to_detached(instance: object) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.object_session(instance: object) \u2192 Session | None\n```", "```py\nfunction sqlalchemy.orm.util.was_deleted(object_: object) \u2192 bool\n```", "```py\nfunction sqlalchemy.orm.util.object_state(instance: _T) \u2192 InstanceState[_T]\n```", "```py\ninspect(instance)\n```", "```py\nfunction sqlalchemy.orm.attributes.del_attribute(instance: object, key: str) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.get_attribute(instance: object, key: str) \u2192 Any\n```", "```py\nfunction sqlalchemy.orm.attributes.get_history(obj: object, key: str, passive: PassiveFlag = symbol('PASSIVE_OFF')) \u2192 History\n```", "```py\nfunction sqlalchemy.orm.attributes.init_collection(obj: object, key: str) \u2192 CollectionAdapter\n```", "```py\ncollection_adapter = init_collection(someobject, 'elements')\nfor elem in values:\n    collection_adapter.append_without_event(elem)\n```", "```py\nfunction sqlalchemy.orm.attributes.flag_modified(instance: object, key: str) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.flag_dirty(instance: object) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.instance_state()\n```", "```py\nfunction sqlalchemy.orm.instrumentation.is_instrumented(instance, key)\n```", "```py\nfunction sqlalchemy.orm.attributes.set_attribute(instance: object, key: str, value: Any, initiator: AttributeEventToken | None = None) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.set_committed_value(instance, key, value)\n```", "```py\nclass sqlalchemy.orm.attributes.History\n```", "```py\nfrom sqlalchemy import inspect\n\nhist = inspect(myobject).attrs.myattribute.history\n```", "```py\nattribute added: Tuple[()] | List[Any]\n```", "```py\nattribute deleted: Tuple[()] | List[Any]\n```", "```py\nmethod empty() \u2192 bool\n```", "```py\nmethod has_changes() \u2192 bool\n```", "```py\nmethod non_added() \u2192 Sequence[Any]\n```", "```py\nmethod non_deleted() \u2192 Sequence[Any]\n```", "```py\nmethod sum() \u2192 Sequence[Any]\n```", "```py\nattribute unchanged: Tuple[()] | List[Any]\n```", "```py\nclass sqlalchemy.orm.sessionmaker\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine('postgresql+psycopg2://scott:tiger@localhost/')\n\nSession = sessionmaker(engine)\n\nwith Session() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```", "```py\nsession = Session()\ntry:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\nfinally:\n    session.close()\n```", "```py\nSession = sessionmaker(engine)\n\nwith Session.begin() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n# commits transaction, closes session\n```", "```py\nSession = sessionmaker(engine)\n\n# bind an individual session to a connection\n\nwith engine.connect() as connection:\n    with Session(bind=connection) as session:\n        # work with session\n```", "```py\n# application starts, sessionmaker does not have\n# an engine bound yet\nSession = sessionmaker()\n\n# ... later, when an engine URL is read from a configuration\n# file or other events allow the engine to be created\nengine = create_engine('sqlite:///foo.db')\nSession.configure(bind=engine)\n\nsess = Session()\n# work with session\n```", "```py\nmethod __call__(**local_kw: Any) \u2192 _S\n```", "```py\nSession = sessionmaker(some_engine)\nsession = Session()  # invokes sessionmaker.__call__()\n```", "```py\nmethod __init__(bind: Optional[_SessionBind] = None, *, class_: Type[_S] = <class 'sqlalchemy.orm.session.Session'>, autoflush: bool = True, expire_on_commit: bool = True, info: Optional[_InfoType] = None, **kw: Any)\n```", "```py\nmethod begin() \u2192 AbstractContextManager[_S]\n```", "```py\nSession = sessionmaker(some_engine)\n\nwith Session.begin() as session:\n    session.add(some_object)\n\n# commits transaction, closes session\n```", "```py\nclassmethod close_all() \u2192 None\n```", "```py\nmethod configure(**new_kw: Any) \u2192 None\n```", "```py\nSession = sessionmaker()\n\nSession.configure(bind=create_engine('sqlite://'))\n```", "```py\nclassmethod identity_key(class_: Type[Any] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: Any | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[Any]\n```", "```py\nclassmethod object_session(instance: object) \u2192 Session | None\n```", "```py\nclass sqlalchemy.orm.ORMExecuteState\n```", "```py\nmethod __init__(session: Session, statement: Executable, parameters: _CoreAnyExecuteParams | None, execution_options: _ExecuteOptions, bind_arguments: _BindArguments, compile_state_cls: Type[ORMCompileState] | None, events_todo: List[_InstanceLevelDispatch[Session]])\n```", "```py\nattribute all_mappers\n```", "```py\nattribute bind_arguments: _BindArguments\n```", "```py\nattribute bind_mapper\n```", "```py\nattribute execution_options: _ExecuteOptions\n```", "```py\nmethod invoke_statement(statement: Executable | None = None, params: _CoreAnyExecuteParams | None = None, execution_options: OrmExecuteOptionsParameter | None = None, bind_arguments: _BindArguments | None = None) \u2192 Result[Any]\n```", "```py\nattribute is_column_load\n```", "```py\nattribute is_delete\n```", "```py\nattribute is_executemany\n```", "```py\nattribute is_from_statement\n```", "```py\nattribute is_insert\n```", "```py\nattribute is_orm_statement\n```", "```py\nattribute is_relationship_load\n```", "```py\nattribute is_select\n```", "```py\nattribute is_update\n```", "```py\nattribute lazy_loaded_from\n```", "```py\nattribute load_options\n```", "```py\nattribute loader_strategy_path\n```", "```py\nattribute local_execution_options: _ExecuteOptions\n```", "```py\nattribute parameters: _CoreAnyExecuteParams | None\n```", "```py\nattribute session: Session\n```", "```py\nattribute statement: Executable\n```", "```py\nattribute update_delete_options\n```", "```py\nmethod update_execution_options(**opts: Any) \u2192 None\n```", "```py\nattribute user_defined_options\n```", "```py\nclass sqlalchemy.orm.Session\n```", "```py\nmethod __init__(bind: _SessionBind | None = None, *, autoflush: bool = True, future: Literal[True] = True, expire_on_commit: bool = True, autobegin: bool = True, twophase: bool = False, binds: Dict[_SessionBindKey, _SessionBind] | None = None, enable_baked_queries: bool = True, info: _InfoType | None = None, query_cls: Type[Query[Any]] | None = None, autocommit: Literal[False] = False, join_transaction_mode: JoinTransactionMode = 'conditional_savepoint', close_resets_only: bool | _NoArg = _NoArg.NO_ARG)\n```", "```py\n    Session = sessionmaker(binds={\n        SomeMappedClass: create_engine('postgresql+psycopg2://engine1'),\n        SomeDeclarativeBase: create_engine('postgresql+psycopg2://engine2'),\n        some_mapper: create_engine('postgresql+psycopg2://engine3'),\n        some_table: create_engine('postgresql+psycopg2://engine4'),\n        })\n    ```", "```py\nmethod add(instance: object, _warn: bool = True) \u2192 None\n```", "```py\nmethod add_all(instances: Iterable[object]) \u2192 None\n```", "```py\nmethod begin(nested: bool = False) \u2192 SessionTransaction\n```", "```py\nmethod begin_nested() \u2192 SessionTransaction\n```", "```py\nmethod bind_mapper(mapper: _EntityBindKey[_O], bind: _SessionBind) \u2192 None\n```", "```py\nmethod bind_table(table: TableClause, bind: Engine | Connection) \u2192 None\n```", "```py\nmethod bulk_insert_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = False, render_nulls: bool = False) \u2192 None\n```", "```py\nmethod bulk_save_objects(objects: Iterable[object], return_defaults: bool = False, update_changed_only: bool = True, preserve_order: bool = True) \u2192 None\n```", "```py\nmethod bulk_update_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]]) \u2192 None\n```", "```py\nmethod close() \u2192 None\n```", "```py\nclassmethod close_all() \u2192 None\n```", "```py\nmethod commit() \u2192 None\n```", "```py\nmethod connection(bind_arguments: _BindArguments | None = None, execution_options: CoreExecuteOptionsParameter | None = None) \u2192 Connection\n```", "```py\nmethod delete(instance: object) \u2192 None\n```", "```py\nattribute deleted\n```", "```py\nattribute dirty\n```", "```py\nsome_mapped_object in session.dirty\n```", "```py\nmethod enable_relationship_loading(obj: object) \u2192 None\n```", "```py\nmethod execute(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, _parent_execute_state: Any | None = None, _add_event: Any | None = None) \u2192 Result[Any]\n```", "```py\nfrom sqlalchemy import select\nresult = session.execute(\n    select(User).where(User.id == 5)\n)\n```", "```py\nmethod expire(instance: object, attribute_names: Iterable[str] | None = None) \u2192 None\n```", "```py\nmethod expire_all() \u2192 None\n```", "```py\nmethod expunge(instance: object) \u2192 None\n```", "```py\nmethod expunge_all() \u2192 None\n```", "```py\nmethod flush(objects: Sequence[Any] | None = None) \u2192 None\n```", "```py\nmethod get(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O | None\n```", "```py\nmy_user = session.get(User, 5)\n\nsome_object = session.get(VersionedFoo, (5, 10))\n\nsome_object = session.get(\n    VersionedFoo,\n    {\"id\": 5, \"version_id\": 10}\n)\n```", "```py\n    my_object = session.get(SomeClass, 5)\n    ```", "```py\n    my_object = session.get(SomeClass, (5, 10))\n    ```", "```py\n    my_object = session.get(SomeClass, {\"id\": 5, \"version_id\": 10})\n    ```", "```py\nmethod get_bind(mapper: _EntityBindKey[_O] | None = None, *, clause: ClauseElement | None = None, bind: _SessionBind | None = None, _sa_skip_events: bool | None = None, _sa_skip_for_implicit_returning: bool = False, **kw: Any) \u2192 Engine | Connection\n```", "```py\nmethod get_nested_transaction() \u2192 SessionTransaction | None\n```", "```py\nmethod get_one(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O\n```", "```py\nmethod get_transaction() \u2192 SessionTransaction | None\n```", "```py\nclassmethod identity_key(class_: Type[Any] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: Any | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[Any]\n```", "```py\nattribute identity_map: IdentityMap\n```", "```py\nmethod in_nested_transaction() \u2192 bool\n```", "```py\nmethod in_transaction() \u2192 bool\n```", "```py\nattribute info\n```", "```py\nmethod invalidate() \u2192 None\n```", "```py\nimport gevent\n\ntry:\n    sess = Session()\n    sess.add(User())\n    sess.commit()\nexcept gevent.Timeout:\n    sess.invalidate()\n    raise\nexcept:\n    sess.rollback()\n    raise\n```", "```py\nattribute is_active\n```", "```py\nmethod is_modified(instance: object, include_collections: bool = True) \u2192 bool\n```", "```py\nreturn session.is_modified(someobject)\n```", "```py\nmethod merge(instance: _O, *, load: bool = True, options: Sequence[ORMOption] | None = None) \u2192 _O\n```", "```py\nattribute new\n```", "```py\nattribute no_autoflush\n```", "```py\nwith session.no_autoflush:\n\n    some_object = SomeClass()\n    session.add(some_object)\n    # won't autoflush\n    some_object.related_thing = session.query(SomeRelated).first()\n```", "```py\nclassmethod object_session(instance: object) \u2192 Session | None\n```", "```py\nmethod prepare() \u2192 None\n```", "```py\nmethod query(*entities: _ColumnsClauseArgument[Any], **kwargs: Any) \u2192 Query[Any]\n```", "```py\nmethod refresh(instance: object, attribute_names: Iterable[str] | None = None, with_for_update: ForUpdateParameter = None) \u2192 None\n```", "```py\nmethod reset() \u2192 None\n```", "```py\nmethod rollback() \u2192 None\n```", "```py\nmethod scalar(statement: Executable, params: _CoreSingleExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 Any\n```", "```py\nmethod scalars(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 ScalarResult[Any]\n```", "```py\nclass sqlalchemy.orm.SessionTransaction\n```", "```py\nattribute nested: bool = False\n```", "```py\nattribute origin: SessionTransactionOrigin\n```", "```py\nattribute parent\n```", "```py\nclass sqlalchemy.orm.SessionTransactionOrigin\n```", "```py\nattribute AUTOBEGIN = 0\n```", "```py\nattribute BEGIN = 1\n```", "```py\nattribute BEGIN_NESTED = 2\n```", "```py\nattribute SUBTRANSACTION = 3\n```", "```py\nfunction sqlalchemy.orm.close_all_sessions() \u2192 None\n```", "```py\nfunction sqlalchemy.orm.make_transient(instance: object) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.make_transient_to_detached(instance: object) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.object_session(instance: object) \u2192 Session | None\n```", "```py\nfunction sqlalchemy.orm.util.was_deleted(object_: object) \u2192 bool\n```", "```py\nfunction sqlalchemy.orm.util.object_state(instance: _T) \u2192 InstanceState[_T]\n```", "```py\ninspect(instance)\n```", "```py\nfunction sqlalchemy.orm.attributes.del_attribute(instance: object, key: str) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.get_attribute(instance: object, key: str) \u2192 Any\n```", "```py\nfunction sqlalchemy.orm.attributes.get_history(obj: object, key: str, passive: PassiveFlag = symbol('PASSIVE_OFF')) \u2192 History\n```", "```py\nfunction sqlalchemy.orm.attributes.init_collection(obj: object, key: str) \u2192 CollectionAdapter\n```", "```py\ncollection_adapter = init_collection(someobject, 'elements')\nfor elem in values:\n    collection_adapter.append_without_event(elem)\n```", "```py\nfunction sqlalchemy.orm.attributes.flag_modified(instance: object, key: str) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.flag_dirty(instance: object) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.instance_state()\n```", "```py\nfunction sqlalchemy.orm.instrumentation.is_instrumented(instance, key)\n```", "```py\nfunction sqlalchemy.orm.attributes.set_attribute(instance: object, key: str, value: Any, initiator: AttributeEventToken | None = None) \u2192 None\n```", "```py\nfunction sqlalchemy.orm.attributes.set_committed_value(instance, key, value)\n```", "```py\nclass sqlalchemy.orm.attributes.History\n```", "```py\nfrom sqlalchemy import inspect\n\nhist = inspect(myobject).attrs.myattribute.history\n```", "```py\nattribute added: Tuple[()] | List[Any]\n```", "```py\nattribute deleted: Tuple[()] | List[Any]\n```", "```py\nmethod empty() \u2192 bool\n```", "```py\nmethod has_changes() \u2192 bool\n```", "```py\nmethod non_added() \u2192 Sequence[Any]\n```", "```py\nmethod non_deleted() \u2192 Sequence[Any]\n```", "```py\nmethod sum() \u2192 Sequence[Any]\n```", "```py\nattribute unchanged: Tuple[()] | List[Any]\n```"]