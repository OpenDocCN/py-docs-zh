- en: Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/page.html](https://pymupdf.readthedocs.io/en/latest/page.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Class representing a document page. A page object is created by [`Document.load_page()`](document.html#Document.load_page
    "Document.load_page") or, equivalently, via indexing the document like `doc[n]`
    - it has no independent constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a parent-child relationship between a document and its pages. If the
    document is closed or deleted, all page objects (and their respective children,
    too) in existence will become unusable (“orphaned”): If a page property or method
    is being used, an exception is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: Several page methods have a [Document](document.html#document) counterpart for
    convenience. At the end of this chapter you will find a synopsis.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Many times in this chapter we are using the term **coordinate**. It is of high
    importance to have at least a basic understanding of what that is and that you
    feel comfortable with the section [Coordinates](app3.html#coordinates).
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing page properties and adding or changing page content is available for
    PDF documents only.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, this is what you can do with PyMuPDF:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify page rotation and the visible part (“cropbox”) of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert images, other PDF pages, text and simple geometrical objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add annotations and form fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods require coordinates (points, rectangles) to put content in desired
    places. Please be aware that these coordinates **must always** be provided relative
    to the **unrotated** page (since v1.17.0). The reverse is also true: except [`Page.rect`](#Page.rect
    "Page.rect"), resp. [`Page.bound()`](#Page.bound "Page.bound") (both *reflect*
    when the page is rotated), all coordinates returned by methods and attributes
    pertain to the unrotated page.'
  prefs: []
  type: TYPE_NORMAL
- en: So the returned value of e.g. [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") will not change if you do a [`Page.set_rotation()`](#Page.set_rotation
    "Page.set_rotation"). The same is true for coordinates returned by [`Page.get_text()`](#Page.get_text
    "Page.get_text"), annotation rectangles, and so on. If you want to find out, where
    an object is located in **rotated coordinates**, multiply the coordinates with
    [`Page.rotation_matrix`](#Page.rotation_matrix "Page.rotation_matrix"). There
    also is its inverse, [`Page.derotation_matrix`](#Page.derotation_matrix "Page.derotation_matrix"),
    which you can use when interfacing with other readers, which may behave differently
    in this respect.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you add or update annotations, links or form fields on the page and immediately
    afterwards need to work with them (i.e. **without leaving the page**), you should
    reload the page using [`Document.reload_page()`](document.html#Document.reload_page
    "Document.reload_page") before referring to these new or updated items.
  prefs: []
  type: TYPE_NORMAL
- en: Reloading the page is generally recommended – although not strictly required
    in all cases. However, some annotation and widget types have extended features
    in PyMuPDF compared to MuPDF. More of these extensions may also be added in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: Releoading the page ensures all your changes have been fully applied to PDF
    structures, so you can safely create Pixmaps or successfully iterate over annotations,
    links and form fields.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_caret_annot()`](#Page.add_caret_annot "Page.add_caret_annot")
    | PDF only: add a caret annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_circle_annot()`](#Page.add_circle_annot "Page.add_circle_annot")
    | PDF only: add a circle annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_file_annot()`](#Page.add_file_annot "Page.add_file_annot") | PDF
    only: add a file attachment annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_freetext_annot()`](#Page.add_freetext_annot "Page.add_freetext_annot")
    | PDF only: add a text annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_highlight_annot()`](#Page.add_highlight_annot "Page.add_highlight_annot")
    | PDF only: add a “highlight” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_ink_annot()`](#Page.add_ink_annot "Page.add_ink_annot") | PDF
    only: add an ink annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_line_annot()`](#Page.add_line_annot "Page.add_line_annot") | PDF
    only: add a line annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_polygon_annot()`](#Page.add_polygon_annot "Page.add_polygon_annot")
    | PDF only: add a polygon annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_polyline_annot()`](#Page.add_polyline_annot "Page.add_polyline_annot")
    | PDF only: add a multi-line annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_rect_annot()`](#Page.add_rect_annot "Page.add_rect_annot") | PDF
    only: add a rectangle annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_redact_annot()`](#Page.add_redact_annot "Page.add_redact_annot")
    | PDF only: add a redaction annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_squiggly_annot()`](#Page.add_squiggly_annot "Page.add_squiggly_annot")
    | PDF only: add a “squiggly” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_stamp_annot()`](#Page.add_stamp_annot "Page.add_stamp_annot")
    | PDF only: add a “rubber stamp” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_strikeout_annot()`](#Page.add_strikeout_annot "Page.add_strikeout_annot")
    | PDF only: add a “strike-out” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_text_annot()`](#Page.add_text_annot "Page.add_text_annot") | PDF
    only: add a comment |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_underline_annot()`](#Page.add_underline_annot "Page.add_underline_annot")
    | PDF only: add an “underline” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_widget()`](#Page.add_widget "Page.add_widget") | PDF only: add
    a PDF Form field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.annot_names()`](#Page.annot_names "Page.annot_names") | PDF only:
    a list of annotation (and widget) names |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.annot_xrefs()`](#Page.annot_xrefs "Page.annot_xrefs") | PDF only:
    a list of annotation (and widget) xrefs |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.annots()`](#Page.annots "Page.annots") | return a generator over the
    annots on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.apply_redactions()`](#Page.apply_redactions "Page.apply_redactions")
    | PDF only: process the redactions of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.bound()`](#Page.bound "Page.bound") | rectangle of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.cluster_drawings()`](#Page.cluster_drawings "Page.cluster_drawings")
    | PDF only: bounding boxes of vector graphics |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_annot()`](#Page.delete_annot "Page.delete_annot") | PDF only:
    delete an annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_image()`](#Page.delete_image "Page.delete_image") | PDF only:
    delete an image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_link()`](#Page.delete_link "Page.delete_link") | PDF only:
    delete a link |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_widget()`](#Page.delete_widget "Page.delete_widget") | PDF
    only: delete a widget / field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_bezier()`](#Page.draw_bezier "Page.draw_bezier") | PDF only:
    draw a cubic Bezier curve |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_circle()`](#Page.draw_circle "Page.draw_circle") | PDF only:
    draw a circle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_curve()`](#Page.draw_curve "Page.draw_curve") | PDF only: draw
    a special Bezier curve |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_line()`](#Page.draw_line "Page.draw_line") | PDF only: draw a
    line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_oval()`](#Page.draw_oval "Page.draw_oval") | PDF only: draw an
    oval / ellipse |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_polyline()`](#Page.draw_polyline "Page.draw_polyline") | PDF
    only: connect a point sequence |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_quad()`](#Page.draw_quad "Page.draw_quad") | PDF only: draw a
    quad |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_rect()`](#Page.draw_rect "Page.draw_rect") | PDF only: draw a
    rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_sector()`](#Page.draw_sector "Page.draw_sector") | PDF only:
    draw a circular sector |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_squiggle()`](#Page.draw_squiggle "Page.draw_squiggle") | PDF
    only: draw a squiggly line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_zigzag()`](#Page.draw_zigzag "Page.draw_zigzag") | PDF only:
    draw a zig-zagged line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.find_tables()`](#Page.find_tables "Page.find_tables") | locate tables
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings") | get vector
    graphics on page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts") | PDF only: get list
    of referenced fonts |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_image_bbox()`](#Page.get_image_bbox "Page.get_image_bbox") | PDF
    only: get bbox and matrix of embedded image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info") | get
    list of meta information for all used images |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_image_rects()`](#Page.get_image_rects "Page.get_image_rects")
    | PDF only: improved version of [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_images()`](#Page.get_images "Page.get_images") | PDF only: get
    list of referenced images |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_label()`](#Page.get_label "Page.get_label") | PDF only: return
    the label of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_links()`](#Page.get_links "Page.get_links") | get all links |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_pixmap()`](#Page.get_pixmap "Page.get_pixmap") | create a page
    image in raster format |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_svg_image()`](#Page.get_svg_image "Page.get_svg_image") | create
    a page image in SVG format |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_text()`](#Page.get_text "Page.get_text") | extract the page’s
    text |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_textbox()`](#Page.get_textbox "Page.get_textbox") | extract text
    contained in a rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_textpage_ocr()`](#Page.get_textpage_ocr "Page.get_textpage_ocr")
    | create a TextPage with OCR for the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_textpage()`](#Page.get_textpage "Page.get_textpage") | create
    a TextPage for the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_xobjects()`](#Page.get_xobjects "Page.get_xobjects") | PDF only:
    get list of referenced xobjects |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_font()`](#Page.insert_font "Page.insert_font") | PDF only:
    insert a font for use by the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_image()`](#Page.insert_image "Page.insert_image") | PDF only:
    insert an image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_link()`](#Page.insert_link "Page.insert_link") | PDF only:
    insert a link |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_text()`](#Page.insert_text "Page.insert_text") | PDF only:
    insert text |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_htmlbox()`](#Page.insert_htmlbox "Page.insert_htmlbox") | PDF
    only: insert html text in a rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox") | PDF
    only: insert a text box |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.links()`](#Page.links "Page.links") | return a generator of the links
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.load_annot()`](#Page.load_annot "Page.load_annot") | PDF only: load
    a specific annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.load_widget()`](#Page.load_widget "Page.load_widget") | PDF only:
    load a specific field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.load_links()`](#Page.load_links "Page.load_links") | return the first
    link on a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.new_shape()`](#Page.new_shape "Page.new_shape") | PDF only: create
    a new [Shape](shape.html#shape) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.remove_rotation()`](#Page.remove_rotation "Page.remove_rotation")
    | PDF only: set page rotation to 0 |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.replace_image()`](#Page.replace_image "Page.replace_image") | PDF
    only: replace an image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.search_for()`](#Page.search_for "Page.search_for") | search for a
    string |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_artbox()`](#Page.set_artbox "Page.set_artbox") | PDF only: modify
    `/ArtBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_bleedbox()`](#Page.set_bleedbox "Page.set_bleedbox") | PDF only:
    modify `/BleedBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_cropbox()`](#Page.set_cropbox "Page.set_cropbox") | PDF only:
    modify the `cropbox` (visible page) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_mediabox()`](#Page.set_mediabox "Page.set_mediabox") | PDF only:
    modify `/MediaBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_rotation()`](#Page.set_rotation "Page.set_rotation") | PDF only:
    set page rotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_trimbox()`](#Page.set_trimbox "Page.set_trimbox") | PDF only:
    modify `/TrimBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page") | PDF
    only: display PDF page image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.update_link()`](#Page.update_link "Page.update_link") | PDF only:
    modify a link |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.widgets()`](#Page.widgets "Page.widgets") | return a generator over
    the fields on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.write_text()`](#Page.write_text "Page.write_text") | write one or
    more [TextWriter](textwriter.html#textwriter) objects |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.cropbox_position`](#Page.cropbox_position "Page.cropbox_position")
    | displacement of the `cropbox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.cropbox`](#Page.cropbox "Page.cropbox") | the page’s `cropbox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.artbox`](#Page.artbox "Page.artbox") | the page’s `/ArtBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.bleedbox`](#Page.bleedbox "Page.bleedbox") | the page’s `/BleedBox`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.trimbox`](#Page.trimbox "Page.trimbox") | the page’s `/TrimBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.derotation_matrix`](#Page.derotation_matrix "Page.derotation_matrix")
    | PDF only: get coordinates in unrotated page space |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.first_annot`](#Page.first_annot "Page.first_annot") | first [Annot](annot.html#annot)
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.first_link`](#Page.first_link "Page.first_link") | first [Link](link.html#link)
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.first_widget`](#Page.first_widget "Page.first_widget") | first widget
    (form field) on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.mediabox_size`](#Page.mediabox_size "Page.mediabox_size") | bottom-right
    point of `mediabox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.mediabox`](#Page.mediabox "Page.mediabox") | the page’s `mediabox`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.number`](#Page.number "Page.number") | page number |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.parent`](#Page.parent "Page.parent") | owning document object |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.rect`](#Page.rect "Page.rect") | rectangle of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.rotation_matrix`](#Page.rotation_matrix "Page.rotation_matrix") |
    PDF only: get coordinates in rotated page space |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.rotation`](#Page.rotation "Page.rotation") | PDF only: page rotation
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.transformation_matrix`](#Page.transformation_matrix "Page.transformation_matrix")
    | PDF only: translate between PDF and MuPDF space |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.xref`](#Page.xref "Page.xref") | PDF only: page [`xref`](glossary.html#xref
    "xref") |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Determine the rectangle of the page. Same as property [`Page.rect`](#Page.rect
    "Page.rect"). For PDF documents this **usually** also coincides with [`mediabox`](#Page.mediabox
    "Page.mediabox") and [`cropbox`](#Page.cropbox "Page.cropbox"), but not always.
    For example, if the page is rotated, then this is reflected by this method – the
    [`Page.cropbox`](#Page.cropbox "Page.cropbox") however will not change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a caret icon. A caret annotation is a visual symbol normally
    used to indicate the presence of text edits on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** (*point_like*) – the top left point of a 20 x 20 rectangle containing
    the MuPDF-provided icon.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Stroke color blue = (0, 0, 1), no fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-caret-annot.jpg](../Images/28a34a51f7aa8adf8818bec9637b0e49.png)](_images/img-caret-annot.jpg)<details><summary>Show/hide
    history</summary></details> *   New in v1.16.0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a comment icon (“sticky note”) with accompanying text. Only the
    icon is visible, the accompanying text is hidden and can be visualized by many
    PDF viewers by hovering the mouse over the symbol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** (*point_like*) – the top left point of a 20 x 20 rectangle containing
    the MuPDF-provided “note” icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – the commentary text. This will be shown on double clicking
    or hovering over the icon. May contain any Latin characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**icon** (*str*) – choose one of “Note” (default), “Comment”, “Help”, “Insert”,
    “Key”, “NewParagraph”, “Paragraph” as the visual symbol for the embodied text
    [[4]](#f4). (New in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add text in a given rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the rectangle into which the text should be inserted.
    Text is automatically wrapped to a new line at box width. Lines not fitting into
    the box will be invisible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – the text. May contain any mixture of Latin, Greek, Cyrillic,
    Chinese, Japanese and Korean characters. The respective required font is automatically
    determined. (New in v1.17.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").
    Default is 12.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontname** (*str*) – the font name. Default is “Helv”. Accepted alternatives
    are “Cour”, “TiRo”, “ZaDb” and “Symb”. The name may be abbreviated to the first
    two characters, like “Co” for “Cour”. Lower case is also accepted. Bold or italic
    variants of the fonts are **not accepted** (changed in v1.16.0). A user-contributed
    script provides a circumvention for this restriction – see section *Using Buttons
    and JavaScript* in chapter [FAQ](faq.html#faq). The actual font to use is now
    determined on a by-character level, and all required fonts (or sub-fonts) are
    automatically included. Therefore, you should rarely ever need to care about this
    parameter and let it default (except you insist on a serifed font for your non-CJK
    text parts). (New in v1.17.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** (*sequence**,**float*) – the text color. Default is black. (New
    in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill_color** (*sequence**,**float*) – the fill color. Default is white. (New
    in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** – the text color. Default is black.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**border_color** (*sequence**,**float*) – the border color. Default is `None`.
    (New in v1.19.6)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – text alignment, one of TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER,
    TEXT_ALIGN_RIGHT - justify is **not supported**. (New in v1.17.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – the text orientation. Accepted values are 0, 90, 270,
    invalid entries are set to zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Color properties **can only be changed** using special
    parameters of [`Annot.update()`](annot.html#Annot.update "Annot.update"). There,
    you can also set a border color different from the text color.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.6:
    add border color parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a file attachment annotation with a “PushPin” icon at the specified
    location.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pos** (*point_like*) – the top-left point of a 18x18 rectangle containing
    the MuPDF-provided “PushPin” icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**buffer** (*bytes**,**bytearray**,**BytesIO*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the data to be stored (actual file content, any data, etc.).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.14.13: *io.BytesIO* is now also supported.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filename** (*str*) – the filename to associate with the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ufilename** (*str*) – the optional PDF unicode version of filename. Defaults
    to filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**desc** (*str*) – an optional description of the file. Defaults to filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**icon** (*str*) – choose one of “PushPin” (default), “Graph”, “Paperclip”,
    “Tag” as the visual symbol for the attached data [[4]](#f4). (New in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a “freehand” scribble annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*sequence*) – a list of one or more lists, each containing [`point_like`](glossary.html#point_like
    "point_like") items. Each item in these sublists is interpreted as a [Point](point.html#point)
    through which a connecting line is drawn. Separate sublists thus represent separate
    drawing lines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation in default appearance black =(0, 0, 0),line width 1\.
    No fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a line annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** (*point_like*) – the starting point of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p2** (*point_like*) – the end point of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. It is drawn with line (stroke) color red = (1, 0, 0)
    and line width 1\. No fill color support. The **annot rectangle** is automatically
    created to contain both points, each one surrounded by a circle of radius 3 *
    line width to make room for any line end symbols.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a rectangle, resp. circle annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the rectangle in which the circle or rectangle is
    drawn, must be finite and not empty. If the rectangle is not equal-sided, an ellipse
    is drawn.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. It is drawn with line (stroke) color red = (1, 0, 0),
    line width 1, fill color is supported.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Redactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only**: Add a redaction annotation. A redaction annotation identifies
    content to be removed from the document. Adding such an annotation is the first
    of two steps. It makes visible what will be removed in the subsequent step, [`Page.apply_redactions()`](#Page.apply_redactions
    "Page.apply_redactions").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quad** (*quad_like**,**rect_like*) – specifies the (rectangular) area to
    be removed which is always equal to the annotation rectangle. This may be a [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like") object. If
    a quad is specified, then the enveloping rectangle is taken.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – text to be placed in the rectangle after applying the redaction
    (and thus removing old content). (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the font to use when *text* is given, otherwise ignored. The same rules apply
    as for [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox") –
    which is the method [`Page.apply_redactions()`](#Page.apply_redactions "Page.apply_redactions")
    internally invokes. The replacement text will be **vertically centered**, if this
    is one of the CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts). (New in v1.16.12)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For an **existing** font of the page, use its reference name as *fontname* (this
    is *item[4]* of its entry in [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts")).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a **new, non-builtin** font, proceed as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize")
    to use for the replacing text. If the text is too large to fit, several insertion
    attempts will be made, gradually reducing the [`fontsize`](glossary.html#fontsize
    "fontsize") to no less than 4\. If then the text will still not fit, no text insertion
    will take place at all. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – the horizontal alignment for the replacing text. See [`insert_textbox()`](#Page.insert_textbox
    "Page.insert_textbox") for available values. The vertical alignment is (approximately)
    centered if a PDF built-in font is used (CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts)).
    (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill** (*sequence*) – the fill color of the rectangle **after applying**
    the redaction. The default is *white = (1, 1, 1)*, which is also taken if *None*
    is specified. To suppress a fill color altogether, specify *False*. In this cases
    the rectangle remains transparent. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** (*sequence*) – the color of the replacing text. Default is *black
    = (0, 0, 0)*. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_out** (*bool*) – add two diagonal lines to the annotation rectangle.
    (New in v1.17.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Its standard appearance looks like a red rectangle (no
    fill color), optionally showing two diagonal lines. Colors, line width, dashing,
    opacity and blend mode can now be set and applied via [`Annot.update()`](annot.html#Annot.update
    "Annot.update") like with other annotations. (Changed in v1.17.2)
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-redact.jpg](../Images/89f843e2f4453c2561d0dbf05e28d1c1.png)<details><summary>Show/hide
    history</summary></details> *   New in v1.16.11'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only**: Remove all **content** contained in any redaction rectangle on
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**This method applies and then deletes all redactions from the page.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**images** (*int*) – How to redact overlapping images. The default (2) blanks
    out overlapping pixels. `PDF_REDACT_IMAGE_NONE | 0` ignores, and `PDF_REDACT_IMAGE_REMOVE
    | 1` completely removes images overlapping any redaction annotation. Option `PDF_REDACT_IMAGE_REMOVE_UNLESS_INVISIBLE
    | 3` only removes images that are actually visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**graphics** (*int*) – How to redact overlapping vector graphics (also called
    “line-art” or “drawings”). The default (2) removes any overlapping vector graphics.
    `PDF_REDACT_LINE_ART_NONE | 0` ignores, and `PDF_REDACT_LINE_ART_IF_COVERED |
    1` removes graphics fully contained in a redaction annotation. When removing line-art,
    please be aware that **stroked** vector graphics (i.e. type “s” or “sf”) have
    a **larger wrapping rectangle** than one might expect: first of all, at least
    50% of the path’s line width have to be added in each direction to truly include
    all of the drawing. If a so-called “miter limit” is provided (see page 121 of
    the PDF specification), the enlarging value is `miter * width / 2`. So, when letting
    everything default (width = 1, miter = 10), the redaction rectangle should be
    at least 5 points larger in every direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*int*) – Whether to redact overlapping text. The default `PDF_REDACT_TEXT_REMOVE
    | 0` removes all characters whose boundary box overlaps any redaction rectangle.
    This complies with the original legal / data protection intentions of redaction
    annotations. Other use cases however may require to **keep text** while redacting
    vector graphics or images. This can be achieved by setting `text=True|PDF_REDACT_TEXT_NONE
    | 1`. This does **not comply** with the data protection intentions of redaction
    annotations. **Do so at your own risk.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if at least one redaction annotation has been processed, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Text contained in a redaction rectangle will be **physically** removed from
    the page (assuming [`Document.save()`](document.html#Document.save "Document.save")
    with a suitable garbage option) and will no longer appear in e.g. text extractions
    or anywhere else. All redaction annotations will also be removed. Other annotations
    are unaffected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All overlapping links will be removed. If the rectangle of the link was covering
    text, then only the overlapping part of the text is being removed. Similar applies
    to images covered by link rectangles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overlapping parts of **images** will be blanked-out for default option `PDF_REDACT_IMAGE_PIXELS`
    (changed in v1.18.0). Option 0 does not touch any images and 1 will remove any
    image with an overlap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For option `images=PDF_REDACT_IMAGE_REMOVE` only this page’s **references to
    the images** are removed - not necessarily the images themselves. Images are completely
    removed from the file only, if no longer referenced at all (assuming suitable
    garbage collection options).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For option `images=PDF_REDACT_IMAGE_PIXELS` a new image of format PNG is created,
    which the page will use in place of the original one. The original image is not
    deleted or replaced as part of this process, so other pages may still show the
    original. In addition, the new, modified PNG image currently is **stored uncompressed**.
    Do keep these aspects in mind when choosing the right garbage collection method
    and compression options during save.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text removal** is done by character: A character is removed if its bbox has
    a **non-empty overlap** with a redaction rectangle (changed in MuPDF v1.17). Depending
    on the font properties and / or the chosen line height, deletion may occur for
    undesired text parts. Using [`Tools.set_small_glyph_heights()`](tools.html#Tools.set_small_glyph_heights
    "Tools.set_small_glyph_heights") with a *True* argument before text search may
    help to prevent this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redactions are a simple way to replace single words in a PDF, or to just physically
    remove them. Locate the word “secret” using some text extraction or search method
    and insert a redaction using “xxxxxx” as replacement text for each occurrence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be wary if the replacement is longer than the original – this may lead to an
    awkward appearance, line breaks or no new text at all.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a number of reasons, the new text may not exactly be positioned on the same
    line like the old one – especially true if the replacement font was not one of
    CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.16.12: The previous *mark* parameter is gone. Instead, the respective
    rectangles are filled with the individual *fill* color of each redaction annotation.
    If a *text* was given in the annotation, then [`insert_textbox()`](#Page.insert_textbox
    "Page.insert_textbox") is invoked to insert it, using parameters provided with
    the redaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.0: added option for handling images that overlap redaction
    areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.23.27: added option for removing graphics as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.24.2: added option `keep_text` to leave text untouched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add an annotation consisting of lines which connect the given points.
    A **Polygon’s** first and last points are automatically connected, which does
    not happen for a **PolyLine**. The **rectangle** is automatically created as the
    smallest rectangle containing the points, each one surrounded by a circle of radius
    3 (= 3 * line width). The following shows a ‘PolyLine’ that has been modified
    with colors and line ends.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** (*list*) – a list of [`point_like`](glossary.html#point_like "point_like")
    objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'the created annotation. It is drawn with line color black, line width 1 no
    fill color but fill color support. Use methods of [Annot](annot.html#annot) to
    make any changes to achieve something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-polyline.png](../Images/87d5e9ef380fcba893bb28b8300f6cc9.png)](_images/img-polyline.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: These annotations are normally used for **marking text** which has
    previously been somehow located (for example via [`Page.search_for()`](#Page.search_for
    "Page.search_for")). But this is not required: you are free to “mark” just anything.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard (stroke only – no fill color support) colors are chosen per annotation
    type: **yellow** for highlighting, **red** for striking out, **green** for underlining,
    and **magenta** for wavy underlining.'
  prefs: []
  type: TYPE_NORMAL
- en: All these four methods convert the arguments into a list of [Quad](quad.html#quad)
    objects. The **annotation** rectangle is then calculated to envelop all these
    quadrilaterals.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`search_for()`](#Page.search_for "Page.search_for") delivers a list of either
    [Rect](rect.html#rect) or [Quad](quad.html#quad) objects. Such a list can be directly
    used as an argument for these annotation types and will deliver **one common annotation**
    for all occurrences of the search string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, text marker annotations need to know what is the top, the bottom,
    the left, and the right side of the area(s) to be marked. If the arguments are
    quads, this information is given by the sequence of the quad points. In contrast,
    a rectangle delivers much less information – this is illustrated by the fact,
    that 4! = 24 different quads can be constructed with the four corners of a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we **strongly recommend** to use the `quads` option for text searches,
    to ensure correct annotations. A similar consideration applies to marking **text
    spans** extracted with the “dict” / “rawdict” options of [`Page.get_text()`](#Page.get_text
    "Page.get_text"). For more details on how to compute quadrilaterals in this case,
    see section “How to Mark Non-horizontal Text” of [FAQ](faq.html#faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quads** (*rect_like**,**quad_like**,**list**,**tuple*) – the location(s)
    – rectangle(s) or quad(s) – to be marked. (Changed in v1.14.20) A list or tuple
    must consist of [`rect_like`](glossary.html#rect_like "rect_like") or [`quad_like`](glossary.html#quad_like
    "quad_like") items (or even a mixture of either). Every item must be finite, convex
    and not empty (as applicable). **Set this parameter to** *None* if you want to
    use the following arguments (Changed in v1.16.14). And vice versa: if not *None*,
    the remaining parameters must be *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*point_like*) – start text marking at this point. Defaults to the
    top-left point of *clip*. Must be provided if `quads` is *None*. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop** (*point_like*) – stop text marking at this point. Defaults to the
    bottom-right point of *clip*. Must be used if `quads` is *None*. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only consider text lines intersecting this area. Defaults
    to the page rectangle. Only use if `start` and `stop` are provided. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot) or *None* (changed in v1.16.14).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. If *quads* is an empty list, **no annotation** is created
    (changed in v1.16.14).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use parameters *start*, *stop* and *clip* to highlight consecutive lines
    between the points *start* and *stop* (starting with v1.16.14). Make use of *clip*
    to further reduce the selected line bboxes and thus deal with e.g. multi-column
    pages. The following multi-line highlight on a page with three text columns was
    created by specifying the two red points and setting clip accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-markers.jpg](../Images/5f165540580f211c945ad22d4cc0662a.png)](_images/img-markers.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Cluster vector graphics (synonyms are line-art or drawings) based on their geometrical
    vicinity. The method walks through the output of [`Page.get_drawings()`](#Page.get_drawings
    "Page.get_drawings") and joins paths whose `path["rect"]` are closer to each other
    than some tolerance values (given in the arguments). The result is a list of rectangles
    that each wrap things like tables (with gridlines), pie charts, bar charts, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only consider paths inside this area. The default
    is the full page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**drawings** (*list*) – (optional) provide a previously generated output of
    [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings"). If `None` the
    method will execute the method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x_tolerance** (*float*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Find tables on the page and return an object with related information. Typically,
    the default values of the many parameters will be sufficient. Adjustments should
    ever only be needed in corner case situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – specify a region to consider within the page rectangle
    and ignore the rest. Default is the full page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strategy** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request a **table detection** strategy. Valid values are “lines”, “lines_strict”
    and “text”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Default is **“lines”** which uses all vector graphics on the page to detect
    grid lines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Strategy **“lines_strict”** ignores borderless rectangle vector graphics. Sometimes
    single text pieces have background colors which may lead to false columns or lines.
    This strategy ignores them and can thus increase detection precision.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If **“text”** is specified, text positions are used to generate “virtual” column
    and / or row boundaries. Use `min_words_*` to request the number of words for
    considering their coordinates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use parameters `vertical_strategy` and `horizontal_strategy` **instead** for
    a more fine-grained treatment of the dimensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**horizontal_lines** (*sequence**[**floats**]*) – y-coordinates of rows. If
    provided, there will be no attempt to identify additional table rows. This influences
    table detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vertical_lines** (*sequence**[**floats**]*) – x-coordinates of columns. If
    provided, there will be no attempt to identify additional table columns. This
    influences table detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_words_vertical** (*int*) – relevant for vertical strategy option “text”:
    at least this many words must coincide to establish a **virtual column** boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_words_horizontal** (*int*) – relevant for horizontal strategy option
    “text”: at least this many words must coincide to establish a **virtual row**
    boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**snap_tolerance** (*float*) – Any two horizontal lines whose y-values differ
    by no more than this value will be **snapped** into one. Accordingly for vertical
    lines. Default is 3\. Separate values can be specified instead for the dimensions,
    using `snap_x_tolerance` and `snap_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**join_tolerance** (*float*) – Any two lines will be **joined** to one if the
    end and the start points differ by no more than this value (in points). Default
    is 3\. Instead of this value, separate values can be specified for the dimensions
    using `join_x_tolerance` and `join_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**edge_min_length** (*float*) – Ignore a line if its length does not exceed
    this value (points). Default is 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**intersection_tolerance** (*float*) – When combining lines into cell borders,
    orthogonal lines must be within this value (points) to be considered intersecting.
    Default is 3\. Instead of this value, separate values can be specified for the
    dimensions using `intersection_x_tolerance` and `intersection_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_tolerance** (*float*) – Characters will be combined into words only
    if their distance is no larger than this value (points). Default is 3\. Instead
    of this value, separate values can be specified for the dimensions using `text_x_tolerance`
    and `text_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**add_lines** (*tuple**,**list*) – Specify a list of “lines” (i.e. pairs of
    [`point_like`](glossary.html#point_like "point_like") objects) as **additional**,
    “virtual” vector graphics. These lines may help with table and / or cell detection
    and will not otherwise influence the detection strategy. Especially, in contrast
    to parameters `horizontal_lines` and `vertical_lines`, they will not prevent detecting
    rows or columns in other ways. These lines will be treated exactly like “real”
    vector graphics in terms of joining, snapping, intersectiing, minimum length and
    containment in the `clip` rectangle. Similarly, lines not parallel to any of the
    coordinate axes will be ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-findtables.jpg](../Images/c8a53fc0f951d1ad4f6697aea6f40859.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a `TableFinder` object that has the following significant attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cells`: a list of **all bboxes** on the page, that have been identified as
    table cells (across all tables). Each cell is a [`rect_like`](glossary.html#rect_like
    "rect_like") tuple `(x0, y0, x1, y1)` of coordinates or `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables`: a list of `Table` objects. This is `[]` if the page has no tables.
    Single tables can be found as items of this list. But the `TableFinder` object
    itself is also a sequence of its tables. This means that if `tabs` is a `TableFinder`
    object, then table “n” is delivered by `tabs.tables[n]` as well as by the shorter
    `tabs[n]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Table` object has the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bbox`](font.html#Font.bbox "Font.bbox"): the bounding box of the table as
    a tuple `(x0, y0, x1, y1)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells`: bounding boxes of the table’s cells (list of tuples). A cell may also
    be `None`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extract()`: this method returns the text content of each table cell as a list
    of list of strings.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_markdown()`: this method returns the table as a **string in markdown format**
    (compatible to Github). Supporting viewers can render the string as a table. This
    output is optimized for **small token** sizes, which is especially beneficial
    for LLM/RAG feeds. Pandas DataFrames (see method `to_pandas()` below) offer an
    equivalent markdown table output which however is better readable for the human
    eye.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_pandas()`: this method returns the table as a [pandas](https://pypi.org/project/pandas/)
    [DataFrame](https://pandas.pydata.org/docs/reference/frame.html). DataFrames are
    very versatile objects allowing a plethora of table manipulation methods and outputs
    to almost 20 well-known formats, among them Excel files, CSV, JSON, markdown-formatted
    tables and more. `DataFrame.to_markdown()` generates a Github-compatible markdown
    format optimized for human readability. This method however requires the package
    [tablutate]([https://pypi.org/project/tabulate/](https://pypi.org/project/tabulate/))
    to installed in addition to pandas itself.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header`: a `TableHeader` object containing header information of the table.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col_count`: an integer containing the number of table columns.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row_count`: an integer containing the number of table rows.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rows`: a list of `TableRow` objects containing two attributes, `bbox` is the
    boundary box of the row, and `cells` is a list of table cells contained in this
    row.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TableHeader` object has the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bbox`: the bounding box of the header.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells`: a list of bounding boxes containing the name of the respective column.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`names`: a list of strings containing the text of each of the cell bboxes.
    They represent the column names – which are used when exporting the table to pandas
    DataFrames, markdown, etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external`: a bool indicating whether the header bbox is outside the table
    body (`True`) or not. Table headers are never identified by the `TableFinder`
    logic. Therefore, if `external` is true, then the header cells are not part of
    any cell identified by `TableFinder`. If `external == False`, then the first table
    row is the header.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Please have a look at these [Jupyter notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis),
    which cover standard situations like multiple tables on one page or joining table
    fragments across multiple pages.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in version 1.23.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.19: new argument `add_lines`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: There is also the [pdf2docx extract tables method](https://pdf2docx.readthedocs.io/en/latest/quickstart.table.html)
    which is capable of table extraction if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a “rubber stamp” like annotation to e.g. indicate the document’s
    intended use (“DRAFT”, “CONFIDENTIAL”, etc.).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – rectangle where to place the annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stamp** (*int*) – id number of the stamp text. For available stamps see [Stamp
    Annotation Icons](vars.html#stampicons).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The stamp’s text and its border line will automatically be sized and be put
    horizontally and vertically centered in the given rectangle. [`Annot.rect`](annot.html#Annot.rect
    "Annot.rect") is automatically calculated to fit the given **width** and will
    usually be smaller than this parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The font chosen is “Times Bold” and the text will be upper case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The appearance can be changed using [`Annot.set_opacity()`](annot.html#Annot.set_opacity
    "Annot.set_opacity") and by setting the “stroke” color (no “fill” color supported).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be used to create watermark images: on a temporary PDF page create
    a stamp annotation with a low opacity value, make a pixmap from it with *alpha=True*
    (and potentially also rotate it), discard the temporary PDF page and use the pixmap
    with [`insert_image()`](#Page.insert_image "Page.insert_image") for your target
    PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![_images/img-stampannot.jpg](../Images/6c3204b51ff4a8c2e2bc64f845471cab.png)](_images/img-stampannot.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a PDF Form field (“widget”) to a page. This also **turns the
    PDF into a Form PDF**. Because of the large amount of different options available
    for widgets, we have developed a new class [Widget](widget.html#widget), which
    contains the possible PDF field attributes. It must be used for both, form field
    creation and updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widget** ([Widget](widget.html#widget)) – a [Widget](widget.html#widget)
    object which must have been created upfront.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a widget annotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The removal will now include any bound ‘Popup’ or response annotations and related
    objects (changed in v1.16.6).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Delete annotation from the page and return the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**annot** ([Annot](annot.html#annot)) – the annotation to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the annotation following the deleted one. Please remember that physical removal
    requires saving to a new file with garbage > 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete field from the page and return the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widget** ([Widget](widget.html#widget)) – the widget to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the widget following the deleted one. Please remember that physical removal
    requires saving to a new file with garbage > 0.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> (New in v1.18.4)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete the specified link from the page. The parameter must be an
    **original item** of [`get_links()`](#Page.get_links "Page.get_links"), see [Description
    of get_links() Entries](#link-dict-description). The reason for this is the dictionary’s
    *“xref”* key, which identifies the PDF object to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert a new link on this page. The parameter must be a dictionary
    of format as provided by [`get_links()`](#Page.get_links "Page.get_links"), see
    [Description of get_links() Entries](#link-dict-description).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be inserted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Modify the specified link. The parameter must be a (modified) **original
    item** of [`get_links()`](#Page.get_links "Page.get_links"), see [Description
    of get_links() Entries](#link-dict-description). The reason for this is the dictionary’s
    *“xref”* key, which identifies the PDF object to be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be modified.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'If updating / inserting a URI link (`"kind": LINK_URI`), please make sure to
    start the value for the `"uri"` key with a disambiguating string like `"http://"`,
    `"https://"`, `"file://"`, `"ftp://"`, `"mailto:"`, etc. Otherwise – depending
    on your browser or other “consumer” software – unexpected default assumptions
    may lead to unwanted behaviours.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return the label for the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the label string like “vii” for Roman numbering or “” if not defined.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Retrieves **all** links of a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries. For a description of the dictionary entries, see [Description
    of get_links() Entries](#link-dict-description). Always use this or the [`Page.links()`](#Page.links
    "Page.links") method if you intend to make changes to the links of a page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s links. The results equal the entries of [`Page.get_links()`](#Page.get_links
    "Page.get_links").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kinds** (*sequence*) – a sequence of integers to down-select to one or more
    link kinds. Default is all links. Example: *kinds=(pymupdf.LINK_GOTO,)* will only
    return internal links.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an entry of [`Page.get_links()`](#Page.get_links "Page.get_links") for each
    iteration.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** (*sequence*) – a sequence of integers to down-select to one or more
    annotation types. Default is all annotations. Example: `types=(pymupdf.PDF_ANNOT_FREETEXT,
    pymupdf.PDF_ANNOT_TEXT)` will only return ‘FreeText’ and ‘Text’ annotations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [Annot](annot.html#annot) for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'You **cannot safely update annotations** from within this generator. This is
    because most annotation updates require reloading the page via `page = doc.reload_page(page)`.
    To circumvent this restriction, make a list of annotations xref numbers first
    and then iterate over these numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s form fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** (*sequence*) – a sequence of integers to down-select to one or more
    widget types. Default is all form fields. Example: `types=(pymupdf.PDF_WIDGET_TYPE_TEXT,)`
    will only return ‘Text’ fields.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [Widget](widget.html#widget) for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Write the text of one or more [TextWriter](textwriter.html#textwriter)
    objects to the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to place the text. If omitted, the rectangle
    union of the text writers is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**writers** (*sequence*) – a non-empty tuple / list of [TextWriter](textwriter.html#textwriter)
    objects or a single [TextWriter](textwriter.html#textwriter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – set transparency, overwrites resp. value in the text
    writers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**color** (*sequ*) – set the text color, overwrites resp. value in the text
    writers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put the text in foreground or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – maintain the aspect ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*float*) – rotate the text by an arbitrary angle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – the [`xref`](glossary.html#xref "xref") of an [`OCG`](glossary.html#OCG
    "OCG") or [`OCMD`](glossary.html#OCMD "OCMD"). (New in v1.18.4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Parameters *overlay, keep_proportion, rotate* and *oc* have the same meaning
    as in [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text starting at [`point_like`](glossary.html#point_like "point_like")
    *point*. See [`Shape.insert_text()`](shape.html#Shape.insert_text "Shape.insert_text").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text into the specified [`rect_like`](glossary.html#rect_like
    "rect_like") *rect*. See [`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only:** Insert text into the specified rectangle. The method has similarities
    with methods [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox")
    and [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox "TextWriter.fill_textbox"),
    but is **much more powerful**. This is achieved by letting a [Story](story-class.html#story)
    object do all the required processing.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter [`text`](xml-class.html#Xml.text "Xml.text") may be a string as in
    the other methods. But it will be **interpreted as HTML source** and may therefore
    also contain HTML language elements – including styling. The `css` parameter may
    be used to pass in additional styling instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic line breaks are generated at word boundaries. The “soft hyphen” character
    `"&#173;"` (or `&shy;`) can be used to cause hyphenation and thus may also cause
    line breaks. **Forced** line breaks however are only achievable via the HTML tag
    `<br>` - `"\n"` is ignored and will be treated like a space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this method the following can be achieved:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling effects like bold, italic, text color, text alignment, font size or
    font switching.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The text may include arbitrary languages – **including right-to-left** languages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts like [Devanagari](https://en.wikipedia.org/wiki/Devanagari) and several
    others in Asia have a highly complex system of ligatures, where two or more unicodes
    together yield one glyph. The Story uses the software package [HarfBuzz](https://harfbuzz.github.io/)
    , to deal with these things and produce correct output.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One can also **include images** via HTML tag `<img>` – the Story will take care
    of the appropriate layout. This is an alternative option to insert images, compared
    to [`Page.insert_image()`](#Page.insert_image "Page.insert_image").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML tables (tag `<table>`) may be included in the text and will be handled
    appropriately.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Links are automatically generated when present.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If content does not fit in the rectangle, the developer has two choices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**either** only be informed about this (and accept a no-op, just like with
    the other textbox insertion methods),'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**or** (`scale_low=0` - the default) scale down the content until it fits.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – rectangle on page to receive the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str**,*[*Story*](story-class.html#Story "Story")) – the text to
    be written. Can contain a mixture of plain text and HTML tags with styling instructions.
    Alternatively, a [Story](story-class.html#story) object may be specified (in which
    case the internal Story generation step will be omitted). A Story must have been
    generated with all required styling and Archive information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**css** (*str*) – optional string containing additional CSS instructions. This
    parameter is ignored if [`text`](xml-class.html#Xml.text "Xml.text") is a Story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scale_low** (*float*) – if necessary, scale down the content until it fits
    in the target rectangle. This sets the down scaling limit. Default is 0, no limit.
    A value of 1 means no down-scaling permitted. A value of e.g. 0.2 means maximum
    down-scaling by 80%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**archive** ([*Archive*](archive-class.html#Archive "Archive")) – an Archive
    object that points to locations where to find images or non-standard fonts. If
    [`text`](xml-class.html#Xml.text "Xml.text") refers to images or non-standard
    fonts, this parameter is required. This parameter is ignored if [`text`](xml-class.html#Xml.text
    "Xml.text") is a Story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'one of the values 0, 90, 180, 270\. Depending on this, text will be filled:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '0: top-left to bottom-right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '90: bottom-left to top-right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '180: bottom-right to top-left.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '270: top-right to bottom-left.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**oc** (*int*) – the xref of an [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD
    "OCMD") or 0\. Please refer to [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page")
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – set the fill and stroke opacity of the content. Only
    values `0 <= opacity < 1` are considered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put the text in front of other content. Please refer
    to [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page") for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of floats `(spare_height, scale)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`spare_height`: -1 if content did not fit, else >= 0\. It is the height of
    the unused (still available) rectangle stripe. Positive only if scale = 1 (no
    down-scaling happened).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale`: down-scaling factor, 0 < scale <= 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please refer to examples in this section of the recipes: [How to Fill a Box
    with HTML Text](recipes-text.html#recipestext-i-c).'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.23.8;
    rebased-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in v1.23.9: [`opacity`](annot.html#Annot.opacity "Annot.opacity") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawing Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_line()`](shape.html#Shape.draw_line "Shape.draw_line").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a zigzag line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_zigzag()`](shape.html#Shape.draw_zigzag "Shape.draw_zigzag").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a squiggly (wavy, undulated) line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_squiggle()`](shape.html#Shape.draw_squiggle
    "Shape.draw_squiggle").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a circle around *center* ([`point_like`](glossary.html#point_like
    "point_like")) with a radius of *radius*. See [`Shape.draw_circle()`](shape.html#Shape.draw_circle
    "Shape.draw_circle").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw an oval (ellipse) within the given [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like"). See [`Shape.draw_oval()`](shape.html#Shape.draw_oval
    "Shape.draw_oval").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a circular sector, optionally connecting the arc to the circle’s
    center (like a piece of pie). See [`Shape.draw_sector()`](shape.html#Shape.draw_sector
    "Shape.draw_sector").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw several connected lines defined by a sequence of [`point_like`](glossary.html#point_like
    "point_like") s. See [`Shape.draw_polyline()`](shape.html#Shape.draw_polyline
    "Shape.draw_polyline").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a cubic Bézier curve from *p1* to *p4* with the control points
    *p2* and *p3* (all are [`point_like`](glossary.html#point_like "point_like") s).
    See [`Shape.draw_bezier()`](shape.html#Shape.draw_bezier "Shape.draw_bezier").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: This is a special case of *draw_bezier()*. See [`Shape.draw_curve()`](shape.html#Shape.draw_curve
    "Shape.draw_curve").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a rectangle. See [`Shape.draw_rect()`](shape.html#Shape.draw_rect
    "Shape.draw_rect").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: Added parameter *radius*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a quadrilateral. See [`Shape.draw_quad()`](shape.html#Shape.draw_quad
    "Shape.draw_quad").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a new font to be used by text output methods and return its [`xref`](glossary.html#xref
    "xref"). If not already present in the file, the font definition will be added.
    Supported are the built-in [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts")
    and the CJK fonts via **“reserved”** fontnames. Fonts can also be provided as
    a file path or a memory area containing the image of a font file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name by which this font shall be referenced when outputting text on this
    page. In general, you have a “free” choice here (but consult the [Adobe PDF References](app3.html#adobemanual),
    page 16, section 7.3.5 for a formal description of building legal PDF names).
    However, if it matches one of the [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts")
    or one of the CJK fonts, *fontfile* and *fontbuffer* **are ignored**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other words, you cannot insert a font via *fontfile* / *fontbuffer* and also
    give it a reserved *fontname*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A reserved fontname can be specified in any mixture of upper or lower case
    and still match the right built-in font definition: fontnames “helv”, “Helv”,
    “HELV”, “Helvetica”, etc. all lead to the same font definition “Helvetica”. But
    from a [Page](#page) perspective, these are **different references**. You can
    exploit this fact when using different *encoding* variants (Latin, Greek, Cyrillic)
    of the same font on a page.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**fontfile** (*str*) – a path to a font file. If used, *fontname* must be **different
    from all reserved names**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontbuffer** (*bytes/bytearray*) – the memory image of a font file. If used,
    *fontname* must be **different from all reserved names**. This parameter would
    typically be used with [`Font.buffer`](font.html#Font.buffer "Font.buffer") for
    fonts supported / available via [Font](font.html#font).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**set_simple** (*int*) – applicable for *fontfile* / *fontbuffer* cases only:
    enforce treatment as a “simple” font, i.e. one that only uses character codes
    up to 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoding** (*int*) – applicable for the “Helvetica”, “Courier” and “Times”
    sets of [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts") only. Select one
    of the available encodings Latin (0), Cyrillic (2) or Greek (1). Only use the
    default (0 = Latin) for “Symbol” and “ZapfDingBats”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rytpe:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`xref`](glossary.html#xref "xref") of the installed font.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Built-in fonts will not lead to the inclusion of a font file. So the resulting
    PDF file will remain small. However, your PDF viewer software is responsible for
    generating an appropriate appearance – and there **exist** differences on whether
    or how each one of them does this. This is especially true for the CJK fonts.
    But also Symbol and ZapfDingbats are incorrectly handled in some cases. Following
    are the **Font Names** and their correspondingly installed **Base Font** names:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base-14 Fonts** [[1]](#f1)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Font Name** | **Installed Base Font** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| helv | Helvetica | normal |'
  prefs: []
  type: TYPE_TB
- en: '| heit | Helvetica-Oblique | italic |'
  prefs: []
  type: TYPE_TB
- en: '| hebo | Helvetica-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| hebi | Helvetica-BoldOblique | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| cour | Courier | normal |'
  prefs: []
  type: TYPE_TB
- en: '| coit | Courier-Oblique | italic |'
  prefs: []
  type: TYPE_TB
- en: '| cobo | Courier-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| cobi | Courier-BoldOblique | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| tiro | Times-Roman | normal |'
  prefs: []
  type: TYPE_TB
- en: '| tiit | Times-Italic | italic |'
  prefs: []
  type: TYPE_TB
- en: '| tibo | Times-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| tibi | Times-BoldItalic | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| symb | Symbol | [[3]](#f3) |'
  prefs: []
  type: TYPE_TB
- en: '| zadb | ZapfDingbats | [[3]](#f3) |'
  prefs: []
  type: TYPE_TB
- en: '**CJK Fonts** [[2]](#f2) (China, Japan, Korea)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Font Name** | **Installed Base Font** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| china-s | Heiti | simplified Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| china-ss | Song | simplified Chinese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| china-t | Fangti | traditional Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| china-ts | Ming | traditional Chinese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| japan | Gothic | Japanese |'
  prefs: []
  type: TYPE_TB
- en: '| japan-s | Mincho | Japanese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| korea | Dotum | Korean |'
  prefs: []
  type: TYPE_TB
- en: '| korea-s | Batang | Korean (serif) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Put an image inside the given rectangle. The image may already exist
    in the PDF or be taken from a pixmap, a file, or a memory area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to put the image. Must be finite and not empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*int*) – deprecated and ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** (*str*) – name of an image file (all formats supported by MuPDF
    – see [Supported Input Image Formats](pixmap.html#imagefiles)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – maintain the aspect ratio of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*bytes**,**bytearray**,**io.BytesIO*) – image in memory – to be used
    as image mask (alpha values) for the base image. When specified, the base image
    must be provided as a filename or a stream – and must not be an image that already
    has a mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – ([`xref`](glossary.html#xref "xref")) make image visibility
    dependent on this [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD
    "OCMD"). Ignored after the first of multiple insertions. The property is stored
    with the generated PDF image object and therefore controls the image’s visibility
    throughout the PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** – see [Common Parameters](shape.html#commonparms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixmap** ([Pixmap](pixmap.html#pixmap)) – a pixmap containing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – rotate the image. Must be an integer multiple of 90 degrees.
    Positive values rotate anti-clockwise. If you need a rotation by an arbitrary
    angle, consider converting the image to a PDF ([`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf")) first and then use [`Page.show_pdf_page()`](#Page.show_pdf_page
    "Page.show_pdf_page") instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** (*bytes**,**bytearray**,**io.BytesIO*) – image in memory (all formats
    supported by MuPDF – see [Supported Input Image Formats](pixmap.html#imagefiles)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of an image already
    present in the PDF. If given, parameters `filename`, [Pixmap](pixmap.html), [`stream`](glossary.html#stream
    "stream"), [`alpha`](pixmap.html#Pixmap.alpha "Pixmap.alpha") and `mask` are ignored.
    The page will simply receive a reference to the existing image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`xref`](glossary.html#xref "xref") of the embedded image. This can be used
    as the [`xref`](glossary.html#xref "xref") argument for very significant performance
    boosts, if the image is inserted again.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example puts the same image on every page of a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method detects multiple insertions of the same image (like in the above
    example) and will store its data only on the first execution. This is even true
    (although less performant), if using the default `xref=0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method cannot detect if the same image had already been part of the file
    before opening it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use this method to provide a background or foreground image for the
    page, like a copyright or a watermark. Please remember, that watermarks require
    a transparent image if put in foreground …
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image may be inserted uncompressed, e.g. if a [Pixmap](pixmap.html#pixmap)
    is used or if the image has an alpha channel. Therefore, consider using `deflate=True`
    when saving the file. In addition, there are ways to control the image size –
    even if transparency comes into play. Have a look at [How to Add Images to a PDF
    Page](recipes-images.html#recipesimages-o).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image is stored in the PDF at its original quality level. This may be much
    better than what you need for your display. Consider **decreasing the image size**
    before insertion – e.g. by using the pixmap option and then shrinking it or scaling
    it down (see [Pixmap](pixmap.html#pixmap) chapter). The PIL method `Image.thumbnail()`
    can also be used for that purpose. The file size savings can be very significant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another efficient way to display the same image on multiple pages is another
    method: [`show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page"). Consult
    [`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf "Document.convert_to_pdf")
    for how to obtain intermediary PDFs usable for that method.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.14.1:
    By default, the image keeps its aspect ratio.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.14.11: Added args `keep_proportion`, `rotate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.14.13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image is now always placed **centered** in the rectangle, i.e. the centers
    of image and rectangle are equal.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [`stream`](glossary.html#stream "stream") as `io.BytesIO`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.17.6: Insertion rectangle no longer needs to have a non-empty
    intersection with the page’s [`Page.cropbox`](#Page.cropbox "Page.cropbox") [[5]](#f5).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.1: Added `mask` arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.3: Added `oc` arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow providing the image as the xref of an existing one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`xref`](glossary.html#xref "xref") arg.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return [`xref`](glossary.html#xref "xref") of stored image.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.3: deprecate and ignore [`alpha`](pixmap.html#Pixmap.alpha
    "Pixmap.alpha") arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Replace the image at xref with another one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** – the filename of the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixmap** – the [Pixmap](pixmap.html#pixmap) of the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** – the memory area containing the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments `filename`, [Pixmap](pixmap.html), [`stream`](glossary.html#stream
    "stream") have the same meaning as in [`Page.insert_image()`](#Page.insert_image
    "Page.insert_image"), especially exactly one of these must be provided.
  prefs: []
  type: TYPE_NORMAL
- en: This is a **global replacement:** the new image will also be shown wherever
    the old one has been displayed throughout the file.
  prefs: []
  type: TYPE_NORMAL
- en: This method mainly exists for technical purposes. Typical uses include replacing
    large images by smaller versions, like a lower resolution, graylevel instead of
    colored, etc., or changing transparency.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the image at xref. This is slightly misleading: actually the image is
    being replaced with a small transparent [Pixmap](pixmap.html#pixmap) using above
    [`Page.replace_image()`](#Page.replace_image "Page.replace_image"). The visible
    effect however is equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **global replacement:** the image will disappear wherever the old
    one has been displayed throughout the file.
  prefs: []
  type: TYPE_NORMAL
- en: If you inspect / extract a page’s images by methods like [`Page.get_images()`](#Page.get_images
    "Page.get_images"), [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info")
    or [`Page.get_text()`](#Page.get_text "Page.get_text"), the replacing “dummy”
    image will be detected like so `(45, 47, 1, 1, 8, 'DeviceGray', '', 'Im1', 'FlateDecode')`
    and also seem to “cover” the same boundary box on the page.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieves the content of a page in a variety of formats. This is a wrapper
    for multiple [TextPage](textpage.html#textpage) methods by choosing the output
    option `opt` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: “text” – [`TextPage.extractTEXT()`](textpage.html#TextPage.extractTEXT "TextPage.extractTEXT"),
    default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “blocks” – [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “words” – [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “html” – [`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “xhtml” – [`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “xml” – [`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “dict” – [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “json” – [`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON "TextPage.extractJSON")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “rawdict” – [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “rawjson” – [`TextPage.extractRAWJSON()`](textpage.html#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opt** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string indicating the requested format, one of the above. A mixture of upper
    and lower case is supported.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Values “words” and “blocks” are also accepted (changed in v1.16.3).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – restrict extracted text to this rectangle. If None,
    the full page is taken. Has **no effect** for options “html”, “xhtml” and “xml”.
    (New in v1.17.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits to control whether to include images or
    how text should be handled with respect to white spaces and `ligatures`. See [Text
    Extraction Flags](vars.html#textpreserve) for available indicators and [Text Extraction
    Flags Defaults](app1.html#text-extraction-flags) for default settings. (New in
    v1.16.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – use a previously created [TextPage](textpage.html#textpage).
    This reduces execution time **very significantly:** by more than 50% and up to
    95%, depending on the extraction option. If specified, the ‘flags’ and ‘clip’
    arguments are ignored, because they are textpage-only properties. If omitted,
    a new, temporary textpage will be created. (New in v1.19.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sort** (*bool*) – sort the output by vertical, then horizontal coordinates.
    In many cases, this should suffice to generate a “natural” reading order. Has
    no effect on (X)HTML and XML. Output option **“words”** sorts by `(y1, x0)` of
    the words’ bboxes. Similar is true for “blocks”, “dict”, “json”, “rawdict”, “rawjson”:
    they all are sorted by `(y1, x0)` of the resp. block bbox. If specified for “text”,
    then internally “blocks” is used. (New in v1.19.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delimiters** (*str*) – use these characters as *additional* word separators
    with the “words” output option (ignored otherwise). By default, all white spaces
    (including non-breaking space `0xA0`) indicate start and end of a word. Now you
    can specify more characters causing this. For instance, the default will return
    `"john.doe@outlook.com"` as **one** word. If you specify `delimiters="@."` then
    the **four** words `"john"`, `"doe"`, `"outlook"`, `"com"` will be returned. Other
    possible uses include ignoring punctuation characters `delimiters=string.punctuation`.
    The “word” strings will not contain any delimiting character. (New in v1.23.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*str, list, dict*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The page’s content as a string, a list or a dictionary. Refer to the corresponding
    [TextPage](textpage.html#textpage) method for details.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use this method as a **document conversion tool** from [any supported
    document type](how-to-open-a-file.html#supported-file-types) to one of TEXT, HTML,
    XHTML or XML documents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The inclusion of text via the *clip* parameter is decided on a by-character
    level: a character becomes part of the output, if its bbox is contained in *clip*
    (changed in v1.18.2). This **deviates** from the algorithm used in redaction annotations:
    a character will be **removed if its bbox intersects** any redaction annotation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.0:
    added [TextPage](textpage.html) parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: added `sort` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.6: added new constants for defining default flags per method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.23.5: added `delimiters` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the text contained in a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect-like*) – rect-like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – a [TextPage](textpage.html#textpage) to use. If omitted, a new,
    temporary textpage will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a string with interspersed linebreaks where necessary. It is based on dedicated
    code (changed in v1.19.0). A typical use is checking the result of [`Page.search_for()`](#Page.search_for
    "Page.search_for"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.7
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: add [TextPage](textpage.html) parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Create a [TextPage](textpage.html#textpage) for the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits controlling the content available for subsequent
    text extractions and searches – see the parameter of [`Page.get_text()`](#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – restrict extracted text to this area. (New in v1.17.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[TextPage](textpage.html#textpage)'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.5
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.17.7: introduced `clip` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**Optical Character Recognition** (**OCR**) technology can be used to extract
    text data for documents where text is in a raster image format throughout the
    page. Use this method to **OCR** a page for text extraction.'
  prefs: []
  type: TYPE_NORMAL
- en: This method returns a [TextPage](textpage.html#textpage) for the page that includes
    OCRed text. MuPDF will invoke Tesseract-OCR if this method is used. Otherwise
    this is a normal [TextPage](textpage.html#textpage) object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits controlling the content available for subsequent
    test extractions and searches – see the parameter of [`Page.get_text()`](#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – the expected language(s). Use “+”-separated values if
    multiple languages are expected, “eng+spa” for English and Spanish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – the desired resolution in dots per inch. Influences recognition
    quality (and execution time).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full** (*bool*) – whether to OCR the full page, or just the displayed images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tessdata** (*str*) – The name of Tesseract’s language support folder `tessdata`.
    If omitted, this information must be present as environment variable [`TESSDATA_PREFIX`](functions.html#TESSDATA_PREFIX
    "TESSDATA_PREFIX"). Can be determined by function [`get_tessdata()`](functions.html#get_tessdata
    "get_tessdata").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method does **not** support a clip parameter – OCR will always happen for
    the complete page rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [TextPage](textpage.html#textpage). Execution may be significantly longer
    than [`Page.get_textpage()`](#Page.get_textpage "Page.get_textpage").
  prefs: []
  type: TYPE_NORMAL
- en: For a full page OCR, **all text** will have the font “GlyphlessFont” from Tesseract.
    In case of partial OCR, normal text will keep its properties, and only text coming
    from images will have the GlyphlessFont.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**OCRed text is only available** to PyMuPDF’s text extractions and searches
    if their [TextPage](textpage.html) parameter specifies the output of this method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[This](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/jupyter-notebooks/partial-ocr.ipynb)
    Jupyter notebook walks through an example for using OCR textpages.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v.1.19.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: support full and partial OCRing a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Return the vector graphics of the page. These are instructions which draw lines,
    rectangles, quadruples or curves, including properties like colors, transparency,
    line width and dashing, etc. Alternative terms are “line art” and “drawings”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a list of dictionaries. Each dictionary item contains one or more single draw
    commands belonging together: they have the same properties (colors, dashing, etc.).
    This is called a **“path”** in PDF, so we adopted that name here, but the method
    **works for all document types**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The path dictionary for fill, stroke and fill-stroke paths has been designed
    to be compatible with class [Shape](shape.html#shape). There are the following
    keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| closePath | Same as the parameter in [Shape](shape.html#shape). |'
  prefs: []
  type: TYPE_TB
- en: '| color | Stroke color (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| dashes | Dashed line specification (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| even_odd | Fill colors of area overlaps – same as the parameter in [Shape](shape.html#shape).
    |'
  prefs: []
  type: TYPE_TB
- en: '| fill | Fill color (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| items | List of draw commands: lines, rectangles, quads or curves. |'
  prefs: []
  type: TYPE_TB
- en: '| lineCap | Number 3-tuple, use its max value on output with [Shape](shape.html#shape).
    |'
  prefs: []
  type: TYPE_TB
- en: '| lineJoin | Same as the parameter in [Shape](shape.html#shape). |'
  prefs: []
  type: TYPE_TB
- en: '| fill_opacity | fill color transparency (see [Shape](shape.html#shape)). (New
    in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| stroke_opacity | stroke color transparency (see [Shape](shape.html#shape)).
    (New in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| rect | Page area covered by this path. Information only. |'
  prefs: []
  type: TYPE_TB
- en: '| layer | name of applicable Optional Content Group. (New in v1.22.0) |'
  prefs: []
  type: TYPE_TB
- en: '| level | the hierarchy level if `extended=True`. (New in v1.22.0) |'
  prefs: []
  type: TYPE_TB
- en: '| seqno | command number when building page appearance. (New in v1.19.0) |'
  prefs: []
  type: TYPE_TB
- en: '| type | type of this path. (New in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| width | Stroke line width. (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: Key `"opacity"` has been replaced by the new keys `"fill_opacity"` and `"stroke_opacity"`.
    This is now compatible with the corresponding parameters of [`Shape.finish()`](shape.html#Shape.finish
    "Shape.finish"). (Changed in v1.18.17)
  prefs: []
  type: TYPE_NORMAL
- en: 'For paths other than groups or clips, key `"type"` takes one of the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**“f”** – this is a *fill-only* path. Only key-values relevant for this operation
    have a meaning, not applicable ones are present with a value of *None*: `"color"`,
    `"lineCap"`, `"lineJoin"`, `"width"`, `"closePath"`, `"dashes"` and should be
    ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“s”** – this is a *stroke-only* path. Similar to previous, key `"fill"` is
    present with value *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“fs”** – this is a path performing combined *fill* and *stroke* operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each item in `path["items"]` is one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`("l", p1, p2)` - a line from p1 to p2 ([Point](point.html#point) objects).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("c", p1, p2, p3, p4)` - cubic Bézier curve **from p1 to p4** (p2 and p3 are
    the control points). All objects are of type [Point](point.html#point).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("re", rect, orientation)` - a [Rect](rect.html#rect). Multiple rectangles
    within the same path are now detected (changed in v1.18.17). Integer `orientation`
    is 1 resp. -1 indicating whether the enclosed area is rotated left (1 = anti-clockwise),
    or resp. right [[7]](#f7) (changed in v1.19.2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("qu", quad)` - a [Quad](quad.html#quad). 3 or 4 consecutive lines are detected
    to actually represent a [Quad](quad.html#quad) (changed in v1.19.2:). (New in
    v1.18.17)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using class [Shape](shape.html#shape), you should be able to recreate the original
    drawings on a separate (PDF) page with high fidelity under normal, not too sophisticated
    circumstances. Please see the following comments on restrictions. A coding draft
    can be found in section “Extractings Drawings” of chapter [FAQ](faq.html#faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifying `extended=True` significantly alters the output. Most importantly,
    new dictionary types are present: “clip” and “group”. All paths will now be organized
    in a hierarchic structure which is encoded by the new integer key “level”, the
    hierarchy level. Each group or clip establishes a new hierarchy, which applies
    to all subsequent paths having a *larger* level value. (New in v1.22.0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any path with a smaller level value than its predecessor will end the scope
    of (at least) the preceeding hierarchy level. A “clip” path with the same level
    as the preceding clip will end the scope of that clip. Same is true for groups.
    This is best explained by an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The clip in line 0 applies to line including line 7\. Group in line 2 applies
    to lines 3 to 5, clip in line 3 only applies to line 4.
  prefs: []
  type: TYPE_NORMAL
- en: “stroke” in line 4 is under control of “group” in line 2 and “clip” in line
    3 (which in turn is a subset of line 0 clip).
  prefs: []
  type: TYPE_NORMAL
- en: '**“clip”** dictionary. Its values (most importantly “scissor”) remain valid
    / apply as long as following dictionaries have a **larger “level”** value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| closePath | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| even_odd | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| items | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| rect | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| layer | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| level | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| scissor | the clip rectangle |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| type | “clip” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: “group” dictionary. Its values remain valid (apply) as long as following dictionaries
    have a **larger “level”** value. Any dictionary with an equal or lower level end
    this group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| rect | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| layer | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| level | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| isolated | (bool) Whether this group is isolated |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| knockout | (bool) Whether this is a “Knockout Group” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| blendmode | Name of the BlendMode, default is “Normal” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| opacity | Float value in range [0, 1]. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| type | “group” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method is based on the output of [`Page.get_cdrawings()`](#Page.get_cdrawings
    "Page.get_cdrawings") – which is much faster, but requires somewhat more attention
    processing its output.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.0
  prefs: []
  type: TYPE_NORMAL
- en: Changed in v1.18.17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: add “seqno” key, remove “clippings” key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: “color” / “fill” keys now always are either are RGB tuples
    or `None`. This resolves issues caused by exotic colorspaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.2: add an indicator for the *“orientation”* of the area covered
    by an “re” item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add new key `"layer"` which contains the name of the Optional
    Content Group of the path (or `None`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add parameter `extended` to also return clipping and group
    paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the vector graphics on the page. Apart from following technical differences,
    functionally equivalent to [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings"),
    but much faster:'
  prefs: []
  type: TYPE_NORMAL
- en: Every path type only contains the relevant keys, e.g. a stroke path has no `"fill"`
    color key. See comment in method [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coordinates are given as [`point_like`](glossary.html#point_like "point_like"),
    [`rect_like`](glossary.html#rect_like "rect_like") and [`quad_like`](glossary.html#quad_like
    "quad_like") **tuples** – not as [Point](point.html#point), [Rect](rect.html#rect),
    [Quad](quad.html#quad) objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If performance is a concern, consider using this method: Compared to versions
    earlier than 1.18.17, you should see much shorter response times. We have seen
    pages that required 2 seconds then, now only need 200 ms with this method.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.17
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: removed “clippings” key, added “seqno” key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: always generate RGB color tuples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: added new key `"layer"` which contains the name of the
    Optional Content Group of the path (or `None`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: added parameter `extended` to also return clipping paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of fonts referenced by the page. Wrapper for [`Document.get_page_fonts()`](document.html#Document.get_page_fonts
    "Document.get_page_fonts").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of images referenced by the page. Wrapper for [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Return a list of meta information dictionaries for all images shown on the
    page. This works for all document types. Technically, this is a subset of the
    dictionary output of [`Page.get_text()`](#Page.get_text "Page.get_text"): the
    image binary content and any text on the page are ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**hashes** (*bool*) – Compute the MD5 hashcode for each encountered image,
    which allows identifying image duplicates. This adds the key `"digest"` to the
    output, whose value is a 16 byte `bytes` object. (New in v1.18.13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xrefs** (*bool*) – **PDF only.** Try to find the [`xref`](glossary.html#xref
    "xref") for each image. Implies `hashes=True`. Adds the `"xref"` key to the dictionary.
    If not found, the value is 0, which means, the image is either “inline” or otherwise
    undetectable. Please note that this option has an extended response time, because
    the MD5 hashcode will be computed at least two times for each image with an xref.
    (New in v1.18.13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list[dict]
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries. This includes information for **exactly those** images,
    that are shown on the page – including *“inline images”*. In contrast to images
    included in [`Page.get_text()`](#Page.get_text "Page.get_text"), image **binary
    content** is not loaded, which drastically reduces memory usage. The dictionary
    layout is similar to that of image blocks in `page.get_text("dict")`.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| number | block number *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| bbox | image bbox on page, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  prefs: []
  type: TYPE_TB
- en: '| width | original image width *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| height | original image height *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| cs-name | colorspace name *(str)* |'
  prefs: []
  type: TYPE_TB
- en: '| colorspace | colorspace.n *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| xres | resolution in x-direction *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| yres | resolution in y-direction *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| bpc | bits per component *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| size | storage occupied by image *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| digest | MD5 hashcode *(bytes)*, if *hashes* is true |'
  prefs: []
  type: TYPE_TB
- en: '| xref | image [`xref`](glossary.html#xref "xref") or 0, if *xrefs* is true
    |'
  prefs: []
  type: TYPE_TB
- en: '| transform | matrix transforming image rect to bbox, [`matrix_like`](glossary.html#matrix_like
    "matrix_like") |'
  prefs: []
  type: TYPE_TB
- en: Multiple occurrences of the same image are always reported. You can detect duplicates
    by comparing their [`digest`](pixmap.html#Pixmap.digest "Pixmap.digest") values.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.13: added image MD5 hashcode computation and [`xref`](glossary.html#xref
    "xref") search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of Form XObjects referenced by the page. Wrapper for
    [`Document.get_page_xobjects()`](document.html#Document.get_page_xobjects "Document.get_page_xobjects").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return boundary boxes and transformation matrices of an embedded
    image. This is an improved version of [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") with the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no restriction on **how** the image is invoked (by the page or one
    of its Form XObjects). The result is always complete and correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result is a list of [Rect](rect.html#rect) or ([Rect](rect.html#rect), [Matrix](matrix.html#matrix))
    objects – depending on *transform*. Each list item represents one location of
    the image on the page. Multiple occurrences might not be detectable by [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method invokes [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info")
    with `xrefs=True` and therefore has a noticeably longer response time than [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*list**,**str**,**int*) – an item of the list [`Page.get_images()`](#Page.get_images
    "Page.get_images"), or the reference **name** entry of such an item (item[7]),
    or the image [`xref`](glossary.html#xref "xref").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transform** (*bool*) – also return the matrix used to transform the image
    rectangle to the bbox on the page. If true, then tuples `(bbox, matrix)` are returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary boxes and respective transformation matrices for each image occurrence
    on the page. If the item is not on the page, an empty list `[]` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> New in v1.18.13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return boundary box and transformation matrix of an embedded image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*list**,**str*) – an item of the list [`Page.get_images()`](#Page.get_images
    "Page.get_images") with *full=True* specified, or the reference **name** entry
    of such an item, which is item[-3] (or item[7] respectively).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transform** (*bool*) – return the matrix used to transform the image rectangle
    to the bbox on the page (new in v1.18.11). Default is just the bbox. If true,
    then a tuple `(bbox, matrix)` is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect) or ([Rect](rect.html#rect), [Matrix](matrix.html#matrix))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the boundary box of the image – optionally also its transformation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   (Changed in v1.16.7):
    If the page in fact does not display this image, an infinite rectangle is returned
    now. In previous versions, an exception was raised. Formally invalid parameters
    still raise exceptions.'
  prefs: []
  type: TYPE_NORMAL
- en: '(Changed in v1.17.0): Only images referenced directly by the page are considered.
    This means that images occurring in embedded PDF pages are ignored and an exception
    is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.5): Removed the restriction introduced in v1.17.0: any item
    of the page’s image list may be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.11): Partially re-instated a restriction: only those images
    are considered, that are either directly referenced by the page or by a Form XObject
    directly referenced by the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.11): Optionally also return the transformation matrix together
    with the bbox as the tuple `(bbox, transform)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that [`Page.get_images()`](#Page.get_images "Page.get_images") may
    contain “dead” entries i.e. images, which the page **does not display**. This
    is no error, but intended by the PDF creator. No exception will be raised in this
    case, but an infinite rectangle is returned. You can avoid this from happening
    by executing [`Page.clean_contents()`](functions.html#Page.clean_contents "Page.clean_contents")
    before this method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The image’s “transformation matrix” is defined as the matrix, for which the
    expression `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` is true, lookup details
    here: [Image Transformation Matrix](app3.html#imagetransformation).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.18.11:
    return image transformation matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Create an SVG image from the page. Only full page images are currently supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – a matrix, default is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_as_path** (*bool*) – – controls how text is represented. *True* outputs
    each character as a series of elementary draw commands, which leads to a more
    precise text display in browsers, but a **very much larger** output for text-oriented
    pages. Display quality for *False* relies on the presence of the referenced fonts
    on the current system. For missing fonts, the internet browser will fall back
    to some default – leading to unpleasant appearances. Choose *False* if you want
    to parse the text of the SVG. (New in v1.17.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a UTF-8 encoded string that contains the image. Because SVG has XML syntax it
    can be saved in a text file, the standard extension is `.svg`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In case of a PDF, you can circumvent the “full page image only” restriction
    by modifying the page’s CropBox before using the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Create a pixmap from the page. This is probably the most often used method to
    create a [Pixmap](pixmap.html#pixmap).
  prefs: []
  type: TYPE_NORMAL
- en: All parameters are *keyword-only.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – default is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – desired resolution in x and y direction. If not `None`, the
    `"matrix"` parameter is ignored. (New in v1.19.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colorspace** (str or [Colorspace](colorspace.html#colorspace)) – The desired
    colorspace, one of “GRAY”, “RGB” or “CMYK” (case insensitive). Or specify a [Colorspace](colorspace.html#colorspace),
    ie. one of the predefined ones: [`csGRAY`](vars.html#csGRAY "csGRAY"), [`csRGB`](vars.html#csRGB
    "csRGB") or [`csCMYK`](vars.html#csCMYK "csCMYK").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*irect_like*) – restrict rendering to the intersection of this area
    with the page’s rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*bool*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'whether to add an alpha channel. Always accept the default *False* if you do
    not really need transparency. This will save a lot of memory (25% in case of RGB
    … and pixmaps are typically **large**!), and also processing time. Also note an
    **important difference** in how the image will be rendered: with *True* the pixmap’s
    samples area will be pre-cleared with *0x00*. This results in **transparent**
    areas where the page is empty. With *False* the pixmap’s samples will be pre-cleared
    with *0xff*. This results in **white** where the page has nothing to show.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> Changed in v1.14.17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default alpha value is now *False*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Generated with *alpha=True*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-alpha-1.png](../Images/6ae43b36c653da1ab3dd60b092c78b1f.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Generated with *alpha=False*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-alpha-0.png](../Images/564ef406b4bef3b8920dcfb41f6b0ec5.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**annots** (*bool*) – *(new in version 1.16.0)* whether to also render annotations
    or to suppress them. You can create pixmaps for annotations separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pixmap of the page. For fine-controlling the generated image, the by far most
    important parameter is **matrix**. E.g. you can increase or decrease the image
    resolution by using **Matrix(xzoom, yzoom)**. If zoom > 1, you will get a higher
    resolution: zoom=2 will double the number of pixels in that direction and thus
    generate a 2 times larger image. Non-positive values will flip horizontally, resp.
    vertically. Similarly, matrices also let you rotate or shear, and you can combine
    effects via e.g. matrix multiplication. See the [Matrix](matrix.html#matrix) section
    to learn more.  Note'
  prefs: []
  type: TYPE_NORMAL
- en: The pixmap will have *“premultiplied”* pixels if `alpha=True`. To learn about
    some background, e.g. look for “Premultiplied alpha” [here](https://en.wikipedia.org/wiki/Glossary_of_computer_graphics#P).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The method will respect any page rotation and will not exceed the intersection
    of `clip` and [`Page.cropbox`](#Page.cropbox "Page.cropbox"). If you need the
    page’s mediabox (and if this is a different rectangle), you can use a snippet
    like the following to achieve this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.2:
    added support of parameter dpi.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return a list of the names of annotations, widgets and links. Technically,
    these are the */NM* values of every PDF object found in the page’s */Annots* array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return a list of the :data`xref` numbers of annotations, widgets
    and links – technically of all entries found in the page’s */Annots* array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of items *(xref, type)* where type is the annotation type. Use the type
    to tell apart links, fields and annotations, see [Annotation Types](vars.html#annotationtypes).
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return the annotation identified by *ident*. This may be its unique
    name (PDF `/NM` key), or its [`xref`](glossary.html#xref "xref").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ident** (*str**,**int*) – the annotation name or xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the annotation or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Methods [`Page.annot_names()`](#Page.annot_names "Page.annot_names"), [`Page.annot_xrefs()`](#Page.annot_xrefs
    "Page.annot_xrefs") provide lists of names or xrefs, respectively, from where
    an item may be picked and loaded via this method.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return the field identified by *xref*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the field’s xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the field or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the analogous method [`Page.load_annot()`](#Page.load_annot
    "Page.load_annot") – except that here only the xref is supported as identifier.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.19.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Return the first link on a page. Synonym of property [`first_link`](#Page.first_link
    "Page.first_link").
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](link.html#link)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: first link on the page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set the rotation of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – An integer specifying the required rotation in degrees.
    Must be an integer multiple of 90\. Values will be converted to one of 0, 90,
    180, 270.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set page rotation to 0 while maintaining appearance and page content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The inverted matrix used to achieve this change. If the page was not rotated
    (rotation 0), [Identity](identity.html#identity) is returned. The method automatically
    recomputes the rectangles of any annotations, links and widgets present on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: This method may come in handy when e.g. used with [`Page.show_pdf_page()`](#Page.show_pdf_page
    "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Display a page of another PDF as a **vector image** (otherwise similar
    to [`Page.insert_image()`](#Page.insert_image "Page.insert_image")). This is a
    multi-purpose method. For example, you can use it to'
  prefs: []
  type: TYPE_NORMAL
- en: create “n-up” versions of existing PDF files, combining several input pages
    into **one output page** (see example [combine.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/combine-pages/combine.py)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create “posterized” PDF files, i.e. every input page is split up in parts which
    each create a separate output page (see [posterize.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/posterize-document/posterize.py)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: include PDF-based vector images like company logos, watermarks, etc., see [svg-logo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/svg-logo.py),
    which puts an SVG-based logo on each page (requires additional packages to deal
    with SVG-to-PDF conversions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to place the image on current page. Must be
    finite and its intersection with the page must not be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**docsrc** ([Document](document.html#document)) – source PDF document containing
    the page. Must be a different document object, but may be the same file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number (0-based, in `-∞ < pno < docsrc.page_count`)
    to be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – whether to maintain the width-height-ratio (default).
    If false, all 4 corners are always positioned on the border of the target rectangle
    – whatever the rotation value. In general, this will deliver distorted and /or
    non-rectangular images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put image in foreground (default) or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – ([`xref`](glossary.html#xref "xref")) make visibility dependent
    on this [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD "OCMD")
    (which must be defined in the target PDF) [[9]](#f9). (New in v1.18.3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*float*) – show the source rectangle rotated by some angle. Any
    angle is supported (changed in v1.14.11). (New in v1.14.10)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – choose which part of the source page to show. Default
    is the full page, else must be finite and its intersection with the source page
    must not be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to method [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf"), this method does not copy annotations, widgets or links,
    so these are not included in the target [[6]](#f6). But all its **other resources
    (text, images, fonts, etc.)** will be imported into the current PDF. They will
    therefore appear in text extractions and in [`get_fonts()`](#Page.get_fonts "Page.get_fonts")
    and [`get_images()`](#Page.get_images "Page.get_images") lists – even if they
    are not contained in the visible area given by *clip*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Show the same source page, rotated by 90 and by -90 degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[![_images/img-showpdfpage.jpg](../Images/091955c9c70806604901ed00530bea58.png)](_images/img-showpdfpage.jpg)<details><summary>Show/hide
    history</summary></details> *   Changed in v1.14.11: Parameter *reuse_xref* has
    been deprecated. Position the source rectangle centered in target rectangle. Any
    rotation angle is now supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.3: New parameter `oc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Create a new [Shape](shape.html#shape) object for the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Shape](shape.html#shape)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [Shape](shape.html#shape) to use for compound drawings. See description
    there.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Search for *needle* on a page. Wrapper for [`TextPage.search()`](textpage.html#TextPage.search
    "TextPage.search").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**needle** (*str*) – Text to search for. May contain spaces. Upper / lower
    case is ignored, but only works for ASCII characters: For example, “COMPÉTENCES”
    will not be found if needle is “compétences” – “compÉtences” however will. Similar
    is true for German umlauts and the like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only search within this area. (New in v1.18.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quads** (*bool*) – Return object type [Quad](quad.html#quad) instead of [Rect](rect.html#rect).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – Control the data extracted by the underlying [TextPage](textpage.html#textpage).
    By default, ligatures and white spaces are kept, and hyphenation [[8]](#f8) is
    detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – use a previously created [TextPage](textpage.html#textpage).
    This reduces execution time **significantly.** If specified, the ‘flags’ and ‘clip’
    arguments are ignored. If omitted, a temporary textpage will be created. (New
    in v1.19.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of [Rect](rect.html#rect) or [Quad](quad.html#quad) objects, each of
    which – **normally!** – surrounds one occurrence of *needle*. **However:** if
    parts of *needle* occur on more than one line, then a separate item is generated
    for each these parts. So, if `needle = "search string"`, two rectangles may be
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> Changes in v1.18.2:'
  prefs: []
  type: TYPE_NORMAL
- en: There no longer is a limit on the list length (removal of the `hit_max` parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a word is **hyphenated** at a line break, it will still be found. E.g. the
    needle “method” will be found even if hyphenated as “meth-od” at a line break,
    and two rectangles will be returned: one surrounding “meth” (without the hyphen)
    and another one surrounding “od”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The method supports multi-line text marker annotations: you can use the full
    returned list as **one single** parameter for creating the annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a tricky aspect: the search logic regards **contiguous multiple occurrences**
    of *needle* as one: assuming *needle* is “abc”, and the page contains “abc” and
    “abcabc”, then only **two** rectangles will be returned, one for “abc”, and a
    second one for “abcabc”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can always use [`Page.get_textbox()`](#Page.get_textbox "Page.get_textbox")
    to check what text actually is being surrounded by each rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A feature repeatedly asked for is supporting **regular expressions** when specifying
    the `"needle"` string: **There is no way to do this.** If you need something in
    that direction, first extract text in the desired format and then subselect the
    result by matching with some regex pattern. Here is an example for matching words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The `matches` list will contain the words matching the given pattern. In the
    same way you can select `span["text"]` from the output of `page.get_text("dict")`.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.18.2:
    added `clip` parameter. Remove `hit_max` parameter. Add default “dehyphenate”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: added [TextPage](textpage.html) parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Change the physical page dimension by setting [`mediabox`](#Page.mediabox
    "Page.mediabox") in the page’s object definition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect-like*) – the new [`mediabox`](#Page.mediabox "Page.mediabox")
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method also removes the page’s other (optional) rectangles ([`cropbox`](#Page.cropbox
    "Page.cropbox"), ArtBox, TrimBox and Bleedbox) to prevent inconsistent situations.
    This will cause those to assume their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: For non-empty pages this may have undesired effects, because the location of
    all content depends on this value and will therefore change position or even disappear.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.13
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.4: remove all other rectangle definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: change the visible part of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect_like*) – the new visible area of the page. Note that this **must**
    be specified in **unrotated coordinates**, not empty, nor infinite and be completely
    contained in the [`Page.mediabox`](#Page.mediabox "Page.mediabox").'
  prefs: []
  type: TYPE_NORMAL
- en: 'After execution **(if the page is not rotated)**, [`Page.rect`](#Page.rect
    "Page.rect") will equal this rectangle, but be shifted to the top-left position
    (0, 0) if necessary. Example session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set the resp. rectangle in the page object. For the meaning of these
    objects see [Adobe PDF References](app3.html#adobemanual), page 77\. Parameter
    and restrictions are the same as for [`Page.set_cropbox()`](#Page.set_cropbox
    "Page.set_cropbox").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.19.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Contains the rotation of the page in degrees (always 0 for non-PDF types).
    This is a copy of the value in the PDF file. The PDF documentation says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“The number of degrees by which the page should be rotated clockwise when
    displayed or printed. The value must be a multiple of 90\. Default value: 0.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In PyMuPDF, we make sure that this attribute is always one of 0, 90, 180 or
    270.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Contains the top-left point of the page’s `/CropBox` for a PDF, otherwise *Point(0,
    0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The page’s `/CropBox` for a PDF. Always the **unrotated** page rectangle is
    returned. For a non-PDF this will always equal the page rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In PDF, the relationship between `/MediaBox`, `/CropBox` and page rectangle
    may sometimes be confusing, please do lookup the glossary for [`MediaBox`](glossary.html#MediaBox
    "MediaBox").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The page’s `/ArtBox`, `/BleedBox`, `/TrimBox`, respectively. If not provided,
    defaulting to [`Page.cropbox`](#Page.cropbox "Page.cropbox").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Contains the width and height of the page’s [`Page.mediabox`](#Page.mediabox
    "Page.mediabox") for a PDF, otherwise the bottom-right coordinates of [`Page.rect`](#Page.rect
    "Page.rect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The page’s [`mediabox`](#Page.mediabox "Page.mediabox") for a PDF, otherwise
    [`Page.rect`](#Page.rect "Page.rect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For most PDF documents and for **all other document types**, `page.rect == page.cropbox
    == page.mediabox` is true. However, for some PDFs the visible page is a true subset
    of [`mediabox`](#Page.mediabox "Page.mediabox"). Also, if the page is rotated,
    its [`Page.rect`](#Page.rect "Page.rect") may not equal [`Page.cropbox`](#Page.cropbox
    "Page.cropbox"). In these cases the above attributes help to correctly locate
    page elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: This matrix translates coordinates from the PDF space to the MuPDF space. For
    example, in PDF `/Rect [x0 y0 x1 y1]` the pair (x0, y0) specifies the **bottom-left**
    point of the rectangle – in contrast to MuPDF’s system, where (x0, y0) specify
    top-left. Multiplying the PDF coordinates with this matrix will deliver the (Py-)
    MuPDF rectangle version. Obviously, the inverse matrix will again yield the PDF
    rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'These matrices may be used for dealing with rotated PDF pages. When adding
    / inserting anything to a PDF page, the coordinates of the **unrotated** page
    are always used. These matrices help translating between the two states. Example:
    if a page is rotated by 90 degrees – what would then be the coordinates of the
    top-left Point(0, 0) of an A4 page?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Link](link.html#link) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](link.html#link)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Annot](annot.html#annot) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Widget](widget.html#widget) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: The page number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The owning document object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Document](document.html#document)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Contains the rectangle of the page. Same as result of [`Page.bound()`](#Page.bound
    "Page.bound").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: The page’s PDF [`xref`](glossary.html#xref "xref"). Zero if not a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Description of *get_links()* Entries'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each entry of the [`Page.get_links()`](#Page.get_links "Page.get_links") list
    is a dictionary with the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '*kind*: (required) an integer indicating the kind of link. This is one of *LINK_NONE*,
    *LINK_GOTO*, *LINK_GOTOR*, *LINK_LAUNCH*, or *LINK_URI*. For values and meaning
    of these names refer to [Link Destination Kinds](vars.html#linkdest-kinds).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*from*: (required) a [Rect](rect.html#rect) describing the “hot spot” location
    on the page’s visible representation (where the cursor changes to a hand image,
    usually).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*page*: a 0-based integer indicating the destination page. Required for *LINK_GOTO*
    and *LINK_GOTOR*, else ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*to*: either a *pymupdf.Point*, specifying the destination location on the
    provided page, default is *pymupdf.Point(0, 0)*, or a symbolic (indirect) name.
    If an indirect name is specified, *page = -1* is required and the name must be
    defined in the PDF in order for this to work. Required for *LINK_GOTO* and *LINK_GOTOR*,
    else ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*file*: a string specifying the destination file. Required for *LINK_GOTOR*
    and *LINK_LAUNCH*, else ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*uri*: a string specifying the destination internet resource. Required for
    *LINK_URI*, else ignored. You should make sure to start this string with an unambiguous
    substring, that classifies the subtype of the URL, like `"http://"`, `"https://"`,
    `"file://"`, `"ftp://"`, `"mailto:"`, etc. Otherwise your browser will try to
    interpret the text and come to unwanted / unexpected conclusions about the intended
    URL type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*xref*: an integer specifying the PDF [`xref`](glossary.html#xref "xref") of
    the link object. Do not change this entry in any way. Required for link deletion
    and update, otherwise ignored. For non-PDF documents, this entry contains *-1*.
    It is also *-1* for **all** entries in the *get_links()* list, if **any** of the
    links is not supported by MuPDF - see [Notes on Supporting Links](#notes-on-supporting-links).  ##
    Notes on Supporting Links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MuPDF’s support for links has changed in **v1.10a**. These changes affect link
    types [`LINK_GOTO`](vars.html#LINK_GOTO "LINK_GOTO") and [`LINK_GOTOR`](vars.html#LINK_GOTOR
    "LINK_GOTOR").
  prefs: []
  type: TYPE_NORMAL
- en: Reading (pertains to method *get_links()* and the *first_link* property chain)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If MuPDF detects a link to another file, it will supply either a *LINK_GOTOR*
    or a *LINK_LAUNCH* link kind. In case of *LINK_GOTOR* destination details may
    either be given as page number (eventually including position information), or
    as an indirect destination.
  prefs: []
  type: TYPE_NORMAL
- en: If an indirect destination is given, then this is indicated by *page = -1*,
    and *link.dest.dest* will contain this name. The dictionaries in the *get_links()*
    list will contain this information as the *to* value.
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal links are always** of kind *LINK_GOTO*. If an internal link specifies
    an indirect destination, it **will always be resolved** and the resulting direct
    destination will be returned. Names are **never returned for internal links**,
    and undefined destinations will cause the link to be ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyMuPDF writes (updates, inserts) links by constructing and writing the appropriate
    PDF object **source**. This makes it possible to specify indirect destinations
    for *LINK_GOTOR* **and** *LINK_GOTO* link kinds (pre *PDF 1.2* file formats are
    **not supported**).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If a *LINK_GOTO* indirect destination specifies an undefined name, this link
    can later on not be found / read again with MuPDF / PyMuPDF. Other readers however
    **will** detect it, but flag it as erroneous.
  prefs: []
  type: TYPE_NORMAL
- en: Indirect *LINK_GOTOR* destinations can in general of course not be checked for
    validity and are therefore **always accepted**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example: How to insert a link pointing to another page in the same document**'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the rectangle on the current page, where the link should be placed.
    This may be the bbox of an image or some text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the target page number (“pno”, 0-based) and a [Point](point.html#point)
    on it, where the link should be directed to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a dictionary `d = {"kind": pymupdf.LINK_GOTO, "page": pno, "from": bbox,
    "to": point}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `page.insert_link(d)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Homologous Methods of [Document](document.html#document) and [Page](#page)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is an overview of homologous methods on the [Document](document.html#document)
    and on the [Page](#page) level.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Document Level** | **Page Level** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_fonts(pno)* | [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts")
    |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_images(pno)* | [`Page.get_images()`](#Page.get_images
    "Page.get_images") |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_pixmap(pno, …)* | [`Page.get_pixmap()`](#Page.get_pixmap
    "Page.get_pixmap") |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_text(pno, …)* | [`Page.get_text()`](#Page.get_text "Page.get_text")
    |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.search_page_for(pno, …)* | [`Page.search_for()`](#Page.search_for
    "Page.search_for") |'
  prefs: []
  type: TYPE_TB
- en: The page number “pno” is a 0-based integer `-∞ < pno < page_count`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Most document methods (left column) exist for convenience reasons, and are
    just wrappers for: *Document[pno].<page method>*. So they **load and discard the
    page** on each execution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the first two methods work differently. They only need a page’s object
    definition statement - the page itself will **not** be loaded. So e.g. [`Page.get_fonts()`](#Page.get_fonts
    "Page.get_fonts") is a wrapper the other way round and defined as follows: *page.get_fonts
    == page.parent.get_page_fonts(page.number)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing page properties and adding or changing page content is available for
    PDF documents only.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, this is what you can do with PyMuPDF:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify page rotation and the visible part (“cropbox”) of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert images, other PDF pages, text and simple geometrical objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add annotations and form fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods require coordinates (points, rectangles) to put content in desired
    places. Please be aware that these coordinates **must always** be provided relative
    to the **unrotated** page (since v1.17.0). The reverse is also true: except [`Page.rect`](#Page.rect
    "Page.rect"), resp. [`Page.bound()`](#Page.bound "Page.bound") (both *reflect*
    when the page is rotated), all coordinates returned by methods and attributes
    pertain to the unrotated page.'
  prefs: []
  type: TYPE_NORMAL
- en: So the returned value of e.g. [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") will not change if you do a [`Page.set_rotation()`](#Page.set_rotation
    "Page.set_rotation"). The same is true for coordinates returned by [`Page.get_text()`](#Page.get_text
    "Page.get_text"), annotation rectangles, and so on. If you want to find out, where
    an object is located in **rotated coordinates**, multiply the coordinates with
    [`Page.rotation_matrix`](#Page.rotation_matrix "Page.rotation_matrix"). There
    also is its inverse, [`Page.derotation_matrix`](#Page.derotation_matrix "Page.derotation_matrix"),
    which you can use when interfacing with other readers, which may behave differently
    in this respect.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you add or update annotations, links or form fields on the page and immediately
    afterwards need to work with them (i.e. **without leaving the page**), you should
    reload the page using [`Document.reload_page()`](document.html#Document.reload_page
    "Document.reload_page") before referring to these new or updated items.
  prefs: []
  type: TYPE_NORMAL
- en: Reloading the page is generally recommended – although not strictly required
    in all cases. However, some annotation and widget types have extended features
    in PyMuPDF compared to MuPDF. More of these extensions may also be added in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: Releoading the page ensures all your changes have been fully applied to PDF
    structures, so you can safely create Pixmaps or successfully iterate over annotations,
    links and form fields.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_caret_annot()`](#Page.add_caret_annot "Page.add_caret_annot")
    | PDF only: add a caret annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_circle_annot()`](#Page.add_circle_annot "Page.add_circle_annot")
    | PDF only: add a circle annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_file_annot()`](#Page.add_file_annot "Page.add_file_annot") | PDF
    only: add a file attachment annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_freetext_annot()`](#Page.add_freetext_annot "Page.add_freetext_annot")
    | PDF only: add a text annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_highlight_annot()`](#Page.add_highlight_annot "Page.add_highlight_annot")
    | PDF only: add a “highlight” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_ink_annot()`](#Page.add_ink_annot "Page.add_ink_annot") | PDF
    only: add an ink annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_line_annot()`](#Page.add_line_annot "Page.add_line_annot") | PDF
    only: add a line annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_polygon_annot()`](#Page.add_polygon_annot "Page.add_polygon_annot")
    | PDF only: add a polygon annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_polyline_annot()`](#Page.add_polyline_annot "Page.add_polyline_annot")
    | PDF only: add a multi-line annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_rect_annot()`](#Page.add_rect_annot "Page.add_rect_annot") | PDF
    only: add a rectangle annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_redact_annot()`](#Page.add_redact_annot "Page.add_redact_annot")
    | PDF only: add a redaction annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_squiggly_annot()`](#Page.add_squiggly_annot "Page.add_squiggly_annot")
    | PDF only: add a “squiggly” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_stamp_annot()`](#Page.add_stamp_annot "Page.add_stamp_annot")
    | PDF only: add a “rubber stamp” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_strikeout_annot()`](#Page.add_strikeout_annot "Page.add_strikeout_annot")
    | PDF only: add a “strike-out” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_text_annot()`](#Page.add_text_annot "Page.add_text_annot") | PDF
    only: add a comment |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_underline_annot()`](#Page.add_underline_annot "Page.add_underline_annot")
    | PDF only: add an “underline” annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.add_widget()`](#Page.add_widget "Page.add_widget") | PDF only: add
    a PDF Form field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.annot_names()`](#Page.annot_names "Page.annot_names") | PDF only:
    a list of annotation (and widget) names |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.annot_xrefs()`](#Page.annot_xrefs "Page.annot_xrefs") | PDF only:
    a list of annotation (and widget) xrefs |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.annots()`](#Page.annots "Page.annots") | return a generator over the
    annots on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.apply_redactions()`](#Page.apply_redactions "Page.apply_redactions")
    | PDF only: process the redactions of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.bound()`](#Page.bound "Page.bound") | rectangle of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.cluster_drawings()`](#Page.cluster_drawings "Page.cluster_drawings")
    | PDF only: bounding boxes of vector graphics |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_annot()`](#Page.delete_annot "Page.delete_annot") | PDF only:
    delete an annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_image()`](#Page.delete_image "Page.delete_image") | PDF only:
    delete an image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_link()`](#Page.delete_link "Page.delete_link") | PDF only:
    delete a link |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.delete_widget()`](#Page.delete_widget "Page.delete_widget") | PDF
    only: delete a widget / field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_bezier()`](#Page.draw_bezier "Page.draw_bezier") | PDF only:
    draw a cubic Bezier curve |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_circle()`](#Page.draw_circle "Page.draw_circle") | PDF only:
    draw a circle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_curve()`](#Page.draw_curve "Page.draw_curve") | PDF only: draw
    a special Bezier curve |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_line()`](#Page.draw_line "Page.draw_line") | PDF only: draw a
    line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_oval()`](#Page.draw_oval "Page.draw_oval") | PDF only: draw an
    oval / ellipse |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_polyline()`](#Page.draw_polyline "Page.draw_polyline") | PDF
    only: connect a point sequence |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_quad()`](#Page.draw_quad "Page.draw_quad") | PDF only: draw a
    quad |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_rect()`](#Page.draw_rect "Page.draw_rect") | PDF only: draw a
    rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_sector()`](#Page.draw_sector "Page.draw_sector") | PDF only:
    draw a circular sector |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_squiggle()`](#Page.draw_squiggle "Page.draw_squiggle") | PDF
    only: draw a squiggly line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.draw_zigzag()`](#Page.draw_zigzag "Page.draw_zigzag") | PDF only:
    draw a zig-zagged line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.find_tables()`](#Page.find_tables "Page.find_tables") | locate tables
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings") | get vector
    graphics on page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts") | PDF only: get list
    of referenced fonts |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_image_bbox()`](#Page.get_image_bbox "Page.get_image_bbox") | PDF
    only: get bbox and matrix of embedded image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info") | get
    list of meta information for all used images |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_image_rects()`](#Page.get_image_rects "Page.get_image_rects")
    | PDF only: improved version of [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_images()`](#Page.get_images "Page.get_images") | PDF only: get
    list of referenced images |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_label()`](#Page.get_label "Page.get_label") | PDF only: return
    the label of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_links()`](#Page.get_links "Page.get_links") | get all links |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_pixmap()`](#Page.get_pixmap "Page.get_pixmap") | create a page
    image in raster format |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_svg_image()`](#Page.get_svg_image "Page.get_svg_image") | create
    a page image in SVG format |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_text()`](#Page.get_text "Page.get_text") | extract the page’s
    text |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_textbox()`](#Page.get_textbox "Page.get_textbox") | extract text
    contained in a rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_textpage_ocr()`](#Page.get_textpage_ocr "Page.get_textpage_ocr")
    | create a TextPage with OCR for the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_textpage()`](#Page.get_textpage "Page.get_textpage") | create
    a TextPage for the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_xobjects()`](#Page.get_xobjects "Page.get_xobjects") | PDF only:
    get list of referenced xobjects |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_font()`](#Page.insert_font "Page.insert_font") | PDF only:
    insert a font for use by the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_image()`](#Page.insert_image "Page.insert_image") | PDF only:
    insert an image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_link()`](#Page.insert_link "Page.insert_link") | PDF only:
    insert a link |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_text()`](#Page.insert_text "Page.insert_text") | PDF only:
    insert text |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_htmlbox()`](#Page.insert_htmlbox "Page.insert_htmlbox") | PDF
    only: insert html text in a rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox") | PDF
    only: insert a text box |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.links()`](#Page.links "Page.links") | return a generator of the links
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.load_annot()`](#Page.load_annot "Page.load_annot") | PDF only: load
    a specific annotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.load_widget()`](#Page.load_widget "Page.load_widget") | PDF only:
    load a specific field |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.load_links()`](#Page.load_links "Page.load_links") | return the first
    link on a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.new_shape()`](#Page.new_shape "Page.new_shape") | PDF only: create
    a new [Shape](shape.html#shape) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.remove_rotation()`](#Page.remove_rotation "Page.remove_rotation")
    | PDF only: set page rotation to 0 |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.replace_image()`](#Page.replace_image "Page.replace_image") | PDF
    only: replace an image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.search_for()`](#Page.search_for "Page.search_for") | search for a
    string |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_artbox()`](#Page.set_artbox "Page.set_artbox") | PDF only: modify
    `/ArtBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_bleedbox()`](#Page.set_bleedbox "Page.set_bleedbox") | PDF only:
    modify `/BleedBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_cropbox()`](#Page.set_cropbox "Page.set_cropbox") | PDF only:
    modify the `cropbox` (visible page) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_mediabox()`](#Page.set_mediabox "Page.set_mediabox") | PDF only:
    modify `/MediaBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_rotation()`](#Page.set_rotation "Page.set_rotation") | PDF only:
    set page rotation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_trimbox()`](#Page.set_trimbox "Page.set_trimbox") | PDF only:
    modify `/TrimBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page") | PDF
    only: display PDF page image |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.update_link()`](#Page.update_link "Page.update_link") | PDF only:
    modify a link |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.widgets()`](#Page.widgets "Page.widgets") | return a generator over
    the fields on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.write_text()`](#Page.write_text "Page.write_text") | write one or
    more [TextWriter](textwriter.html#textwriter) objects |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.cropbox_position`](#Page.cropbox_position "Page.cropbox_position")
    | displacement of the `cropbox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.cropbox`](#Page.cropbox "Page.cropbox") | the page’s `cropbox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.artbox`](#Page.artbox "Page.artbox") | the page’s `/ArtBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.bleedbox`](#Page.bleedbox "Page.bleedbox") | the page’s `/BleedBox`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.trimbox`](#Page.trimbox "Page.trimbox") | the page’s `/TrimBox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.derotation_matrix`](#Page.derotation_matrix "Page.derotation_matrix")
    | PDF only: get coordinates in unrotated page space |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.first_annot`](#Page.first_annot "Page.first_annot") | first [Annot](annot.html#annot)
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.first_link`](#Page.first_link "Page.first_link") | first [Link](link.html#link)
    on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.first_widget`](#Page.first_widget "Page.first_widget") | first widget
    (form field) on the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.mediabox_size`](#Page.mediabox_size "Page.mediabox_size") | bottom-right
    point of `mediabox` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.mediabox`](#Page.mediabox "Page.mediabox") | the page’s `mediabox`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.number`](#Page.number "Page.number") | page number |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.parent`](#Page.parent "Page.parent") | owning document object |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.rect`](#Page.rect "Page.rect") | rectangle of the page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.rotation_matrix`](#Page.rotation_matrix "Page.rotation_matrix") |
    PDF only: get coordinates in rotated page space |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.rotation`](#Page.rotation "Page.rotation") | PDF only: page rotation
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.transformation_matrix`](#Page.transformation_matrix "Page.transformation_matrix")
    | PDF only: translate between PDF and MuPDF space |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.xref`](#Page.xref "Page.xref") | PDF only: page [`xref`](glossary.html#xref
    "xref") |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Determine the rectangle of the page. Same as property [`Page.rect`](#Page.rect
    "Page.rect"). For PDF documents this **usually** also coincides with [`mediabox`](#Page.mediabox
    "Page.mediabox") and [`cropbox`](#Page.cropbox "Page.cropbox"), but not always.
    For example, if the page is rotated, then this is reflected by this method – the
    [`Page.cropbox`](#Page.cropbox "Page.cropbox") however will not change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a caret icon. A caret annotation is a visual symbol normally
    used to indicate the presence of text edits on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** (*point_like*) – the top left point of a 20 x 20 rectangle containing
    the MuPDF-provided icon.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Stroke color blue = (0, 0, 1), no fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-caret-annot.jpg](../Images/28a34a51f7aa8adf8818bec9637b0e49.png)](_images/img-caret-annot.jpg)<details><summary>Show/hide
    history</summary></details> *   New in v1.16.0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a comment icon (“sticky note”) with accompanying text. Only the
    icon is visible, the accompanying text is hidden and can be visualized by many
    PDF viewers by hovering the mouse over the symbol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** (*point_like*) – the top left point of a 20 x 20 rectangle containing
    the MuPDF-provided “note” icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – the commentary text. This will be shown on double clicking
    or hovering over the icon. May contain any Latin characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**icon** (*str*) – choose one of “Note” (default), “Comment”, “Help”, “Insert”,
    “Key”, “NewParagraph”, “Paragraph” as the visual symbol for the embodied text
    [[4]](#f4). (New in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add text in a given rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the rectangle into which the text should be inserted.
    Text is automatically wrapped to a new line at box width. Lines not fitting into
    the box will be invisible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – the text. May contain any mixture of Latin, Greek, Cyrillic,
    Chinese, Japanese and Korean characters. The respective required font is automatically
    determined. (New in v1.17.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").
    Default is 12.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontname** (*str*) – the font name. Default is “Helv”. Accepted alternatives
    are “Cour”, “TiRo”, “ZaDb” and “Symb”. The name may be abbreviated to the first
    two characters, like “Co” for “Cour”. Lower case is also accepted. Bold or italic
    variants of the fonts are **not accepted** (changed in v1.16.0). A user-contributed
    script provides a circumvention for this restriction – see section *Using Buttons
    and JavaScript* in chapter [FAQ](faq.html#faq). The actual font to use is now
    determined on a by-character level, and all required fonts (or sub-fonts) are
    automatically included. Therefore, you should rarely ever need to care about this
    parameter and let it default (except you insist on a serifed font for your non-CJK
    text parts). (New in v1.17.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** (*sequence**,**float*) – the text color. Default is black. (New
    in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill_color** (*sequence**,**float*) – the fill color. Default is white. (New
    in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** – the text color. Default is black.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**border_color** (*sequence**,**float*) – the border color. Default is `None`.
    (New in v1.19.6)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – text alignment, one of TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER,
    TEXT_ALIGN_RIGHT - justify is **not supported**. (New in v1.17.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – the text orientation. Accepted values are 0, 90, 270,
    invalid entries are set to zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Color properties **can only be changed** using special
    parameters of [`Annot.update()`](annot.html#Annot.update "Annot.update"). There,
    you can also set a border color different from the text color.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.6:
    add border color parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a file attachment annotation with a “PushPin” icon at the specified
    location.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pos** (*point_like*) – the top-left point of a 18x18 rectangle containing
    the MuPDF-provided “PushPin” icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**buffer** (*bytes**,**bytearray**,**BytesIO*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the data to be stored (actual file content, any data, etc.).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.14.13: *io.BytesIO* is now also supported.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filename** (*str*) – the filename to associate with the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ufilename** (*str*) – the optional PDF unicode version of filename. Defaults
    to filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**desc** (*str*) – an optional description of the file. Defaults to filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**icon** (*str*) – choose one of “PushPin” (default), “Graph”, “Paperclip”,
    “Tag” as the visual symbol for the attached data [[4]](#f4). (New in v1.16.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Stroke color yellow = (1, 1, 0), no fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a “freehand” scribble annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*sequence*) – a list of one or more lists, each containing [`point_like`](glossary.html#point_like
    "point_like") items. Each item in these sublists is interpreted as a [Point](point.html#point)
    through which a connecting line is drawn. Separate sublists thus represent separate
    drawing lines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation in default appearance black =(0, 0, 0),line width 1\.
    No fill color support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a line annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** (*point_like*) – the starting point of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p2** (*point_like*) – the end point of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. It is drawn with line (stroke) color red = (1, 0, 0)
    and line width 1\. No fill color support. The **annot rectangle** is automatically
    created to contain both points, each one surrounded by a circle of radius 3 *
    line width to make room for any line end symbols.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a rectangle, resp. circle annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the rectangle in which the circle or rectangle is
    drawn, must be finite and not empty. If the rectangle is not equal-sided, an ellipse
    is drawn.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. It is drawn with line (stroke) color red = (1, 0, 0),
    line width 1, fill color is supported.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Redactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only**: Add a redaction annotation. A redaction annotation identifies
    content to be removed from the document. Adding such an annotation is the first
    of two steps. It makes visible what will be removed in the subsequent step, [`Page.apply_redactions()`](#Page.apply_redactions
    "Page.apply_redactions").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quad** (*quad_like**,**rect_like*) – specifies the (rectangular) area to
    be removed which is always equal to the annotation rectangle. This may be a [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like") object. If
    a quad is specified, then the enveloping rectangle is taken.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – text to be placed in the rectangle after applying the redaction
    (and thus removing old content). (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the font to use when *text* is given, otherwise ignored. The same rules apply
    as for [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox") –
    which is the method [`Page.apply_redactions()`](#Page.apply_redactions "Page.apply_redactions")
    internally invokes. The replacement text will be **vertically centered**, if this
    is one of the CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts). (New in v1.16.12)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For an **existing** font of the page, use its reference name as *fontname* (this
    is *item[4]* of its entry in [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts")).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a **new, non-builtin** font, proceed as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize")
    to use for the replacing text. If the text is too large to fit, several insertion
    attempts will be made, gradually reducing the [`fontsize`](glossary.html#fontsize
    "fontsize") to no less than 4\. If then the text will still not fit, no text insertion
    will take place at all. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – the horizontal alignment for the replacing text. See [`insert_textbox()`](#Page.insert_textbox
    "Page.insert_textbox") for available values. The vertical alignment is (approximately)
    centered if a PDF built-in font is used (CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts)).
    (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill** (*sequence*) – the fill color of the rectangle **after applying**
    the redaction. The default is *white = (1, 1, 1)*, which is also taken if *None*
    is specified. To suppress a fill color altogether, specify *False*. In this cases
    the rectangle remains transparent. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** (*sequence*) – the color of the replacing text. Default is *black
    = (0, 0, 0)*. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_out** (*bool*) – add two diagonal lines to the annotation rectangle.
    (New in v1.17.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Its standard appearance looks like a red rectangle (no
    fill color), optionally showing two diagonal lines. Colors, line width, dashing,
    opacity and blend mode can now be set and applied via [`Annot.update()`](annot.html#Annot.update
    "Annot.update") like with other annotations. (Changed in v1.17.2)
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-redact.jpg](../Images/89f843e2f4453c2561d0dbf05e28d1c1.png)<details><summary>Show/hide
    history</summary></details> *   New in v1.16.11'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only**: Remove all **content** contained in any redaction rectangle on
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**This method applies and then deletes all redactions from the page.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**images** (*int*) – How to redact overlapping images. The default (2) blanks
    out overlapping pixels. `PDF_REDACT_IMAGE_NONE | 0` ignores, and `PDF_REDACT_IMAGE_REMOVE
    | 1` completely removes images overlapping any redaction annotation. Option `PDF_REDACT_IMAGE_REMOVE_UNLESS_INVISIBLE
    | 3` only removes images that are actually visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**graphics** (*int*) – How to redact overlapping vector graphics (also called
    “line-art” or “drawings”). The default (2) removes any overlapping vector graphics.
    `PDF_REDACT_LINE_ART_NONE | 0` ignores, and `PDF_REDACT_LINE_ART_IF_COVERED |
    1` removes graphics fully contained in a redaction annotation. When removing line-art,
    please be aware that **stroked** vector graphics (i.e. type “s” or “sf”) have
    a **larger wrapping rectangle** than one might expect: first of all, at least
    50% of the path’s line width have to be added in each direction to truly include
    all of the drawing. If a so-called “miter limit” is provided (see page 121 of
    the PDF specification), the enlarging value is `miter * width / 2`. So, when letting
    everything default (width = 1, miter = 10), the redaction rectangle should be
    at least 5 points larger in every direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*int*) – Whether to redact overlapping text. The default `PDF_REDACT_TEXT_REMOVE
    | 0` removes all characters whose boundary box overlaps any redaction rectangle.
    This complies with the original legal / data protection intentions of redaction
    annotations. Other use cases however may require to **keep text** while redacting
    vector graphics or images. This can be achieved by setting `text=True|PDF_REDACT_TEXT_NONE
    | 1`. This does **not comply** with the data protection intentions of redaction
    annotations. **Do so at your own risk.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if at least one redaction annotation has been processed, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Text contained in a redaction rectangle will be **physically** removed from
    the page (assuming [`Document.save()`](document.html#Document.save "Document.save")
    with a suitable garbage option) and will no longer appear in e.g. text extractions
    or anywhere else. All redaction annotations will also be removed. Other annotations
    are unaffected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All overlapping links will be removed. If the rectangle of the link was covering
    text, then only the overlapping part of the text is being removed. Similar applies
    to images covered by link rectangles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overlapping parts of **images** will be blanked-out for default option `PDF_REDACT_IMAGE_PIXELS`
    (changed in v1.18.0). Option 0 does not touch any images and 1 will remove any
    image with an overlap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For option `images=PDF_REDACT_IMAGE_REMOVE` only this page’s **references to
    the images** are removed - not necessarily the images themselves. Images are completely
    removed from the file only, if no longer referenced at all (assuming suitable
    garbage collection options).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For option `images=PDF_REDACT_IMAGE_PIXELS` a new image of format PNG is created,
    which the page will use in place of the original one. The original image is not
    deleted or replaced as part of this process, so other pages may still show the
    original. In addition, the new, modified PNG image currently is **stored uncompressed**.
    Do keep these aspects in mind when choosing the right garbage collection method
    and compression options during save.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text removal** is done by character: A character is removed if its bbox has
    a **non-empty overlap** with a redaction rectangle (changed in MuPDF v1.17). Depending
    on the font properties and / or the chosen line height, deletion may occur for
    undesired text parts. Using [`Tools.set_small_glyph_heights()`](tools.html#Tools.set_small_glyph_heights
    "Tools.set_small_glyph_heights") with a *True* argument before text search may
    help to prevent this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redactions are a simple way to replace single words in a PDF, or to just physically
    remove them. Locate the word “secret” using some text extraction or search method
    and insert a redaction using “xxxxxx” as replacement text for each occurrence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be wary if the replacement is longer than the original – this may lead to an
    awkward appearance, line breaks or no new text at all.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a number of reasons, the new text may not exactly be positioned on the same
    line like the old one – especially true if the replacement font was not one of
    CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.16.12: The previous *mark* parameter is gone. Instead, the respective
    rectangles are filled with the individual *fill* color of each redaction annotation.
    If a *text* was given in the annotation, then [`insert_textbox()`](#Page.insert_textbox
    "Page.insert_textbox") is invoked to insert it, using parameters provided with
    the redaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.0: added option for handling images that overlap redaction
    areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.23.27: added option for removing graphics as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.24.2: added option `keep_text` to leave text untouched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add an annotation consisting of lines which connect the given points.
    A **Polygon’s** first and last points are automatically connected, which does
    not happen for a **PolyLine**. The **rectangle** is automatically created as the
    smallest rectangle containing the points, each one surrounded by a circle of radius
    3 (= 3 * line width). The following shows a ‘PolyLine’ that has been modified
    with colors and line ends.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** (*list*) – a list of [`point_like`](glossary.html#point_like "point_like")
    objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'the created annotation. It is drawn with line color black, line width 1 no
    fill color but fill color support. Use methods of [Annot](annot.html#annot) to
    make any changes to achieve something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-polyline.png](../Images/87d5e9ef380fcba893bb28b8300f6cc9.png)](_images/img-polyline.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: These annotations are normally used for **marking text** which has
    previously been somehow located (for example via [`Page.search_for()`](#Page.search_for
    "Page.search_for")). But this is not required: you are free to “mark” just anything.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard (stroke only – no fill color support) colors are chosen per annotation
    type: **yellow** for highlighting, **red** for striking out, **green** for underlining,
    and **magenta** for wavy underlining.'
  prefs: []
  type: TYPE_NORMAL
- en: All these four methods convert the arguments into a list of [Quad](quad.html#quad)
    objects. The **annotation** rectangle is then calculated to envelop all these
    quadrilaterals.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`search_for()`](#Page.search_for "Page.search_for") delivers a list of either
    [Rect](rect.html#rect) or [Quad](quad.html#quad) objects. Such a list can be directly
    used as an argument for these annotation types and will deliver **one common annotation**
    for all occurrences of the search string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, text marker annotations need to know what is the top, the bottom,
    the left, and the right side of the area(s) to be marked. If the arguments are
    quads, this information is given by the sequence of the quad points. In contrast,
    a rectangle delivers much less information – this is illustrated by the fact,
    that 4! = 24 different quads can be constructed with the four corners of a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we **strongly recommend** to use the `quads` option for text searches,
    to ensure correct annotations. A similar consideration applies to marking **text
    spans** extracted with the “dict” / “rawdict” options of [`Page.get_text()`](#Page.get_text
    "Page.get_text"). For more details on how to compute quadrilaterals in this case,
    see section “How to Mark Non-horizontal Text” of [FAQ](faq.html#faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quads** (*rect_like**,**quad_like**,**list**,**tuple*) – the location(s)
    – rectangle(s) or quad(s) – to be marked. (Changed in v1.14.20) A list or tuple
    must consist of [`rect_like`](glossary.html#rect_like "rect_like") or [`quad_like`](glossary.html#quad_like
    "quad_like") items (or even a mixture of either). Every item must be finite, convex
    and not empty (as applicable). **Set this parameter to** *None* if you want to
    use the following arguments (Changed in v1.16.14). And vice versa: if not *None*,
    the remaining parameters must be *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*point_like*) – start text marking at this point. Defaults to the
    top-left point of *clip*. Must be provided if `quads` is *None*. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop** (*point_like*) – stop text marking at this point. Defaults to the
    bottom-right point of *clip*. Must be used if `quads` is *None*. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only consider text lines intersecting this area. Defaults
    to the page rectangle. Only use if `start` and `stop` are provided. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot) or *None* (changed in v1.16.14).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. If *quads* is an empty list, **no annotation** is created
    (changed in v1.16.14).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use parameters *start*, *stop* and *clip* to highlight consecutive lines
    between the points *start* and *stop* (starting with v1.16.14). Make use of *clip*
    to further reduce the selected line bboxes and thus deal with e.g. multi-column
    pages. The following multi-line highlight on a page with three text columns was
    created by specifying the two red points and setting clip accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-markers.jpg](../Images/5f165540580f211c945ad22d4cc0662a.png)](_images/img-markers.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Cluster vector graphics (synonyms are line-art or drawings) based on their geometrical
    vicinity. The method walks through the output of [`Page.get_drawings()`](#Page.get_drawings
    "Page.get_drawings") and joins paths whose `path["rect"]` are closer to each other
    than some tolerance values (given in the arguments). The result is a list of rectangles
    that each wrap things like tables (with gridlines), pie charts, bar charts, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only consider paths inside this area. The default
    is the full page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**drawings** (*list*) – (optional) provide a previously generated output of
    [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings"). If `None` the
    method will execute the method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x_tolerance** (*float*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Find tables on the page and return an object with related information. Typically,
    the default values of the many parameters will be sufficient. Adjustments should
    ever only be needed in corner case situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – specify a region to consider within the page rectangle
    and ignore the rest. Default is the full page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strategy** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request a **table detection** strategy. Valid values are “lines”, “lines_strict”
    and “text”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Default is **“lines”** which uses all vector graphics on the page to detect
    grid lines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Strategy **“lines_strict”** ignores borderless rectangle vector graphics. Sometimes
    single text pieces have background colors which may lead to false columns or lines.
    This strategy ignores them and can thus increase detection precision.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If **“text”** is specified, text positions are used to generate “virtual” column
    and / or row boundaries. Use `min_words_*` to request the number of words for
    considering their coordinates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use parameters `vertical_strategy` and `horizontal_strategy` **instead** for
    a more fine-grained treatment of the dimensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**horizontal_lines** (*sequence**[**floats**]*) – y-coordinates of rows. If
    provided, there will be no attempt to identify additional table rows. This influences
    table detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vertical_lines** (*sequence**[**floats**]*) – x-coordinates of columns. If
    provided, there will be no attempt to identify additional table columns. This
    influences table detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_words_vertical** (*int*) – relevant for vertical strategy option “text”:
    at least this many words must coincide to establish a **virtual column** boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_words_horizontal** (*int*) – relevant for horizontal strategy option
    “text”: at least this many words must coincide to establish a **virtual row**
    boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**snap_tolerance** (*float*) – Any two horizontal lines whose y-values differ
    by no more than this value will be **snapped** into one. Accordingly for vertical
    lines. Default is 3\. Separate values can be specified instead for the dimensions,
    using `snap_x_tolerance` and `snap_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**join_tolerance** (*float*) – Any two lines will be **joined** to one if the
    end and the start points differ by no more than this value (in points). Default
    is 3\. Instead of this value, separate values can be specified for the dimensions
    using `join_x_tolerance` and `join_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**edge_min_length** (*float*) – Ignore a line if its length does not exceed
    this value (points). Default is 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**intersection_tolerance** (*float*) – When combining lines into cell borders,
    orthogonal lines must be within this value (points) to be considered intersecting.
    Default is 3\. Instead of this value, separate values can be specified for the
    dimensions using `intersection_x_tolerance` and `intersection_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_tolerance** (*float*) – Characters will be combined into words only
    if their distance is no larger than this value (points). Default is 3\. Instead
    of this value, separate values can be specified for the dimensions using `text_x_tolerance`
    and `text_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**add_lines** (*tuple**,**list*) – Specify a list of “lines” (i.e. pairs of
    [`point_like`](glossary.html#point_like "point_like") objects) as **additional**,
    “virtual” vector graphics. These lines may help with table and / or cell detection
    and will not otherwise influence the detection strategy. Especially, in contrast
    to parameters `horizontal_lines` and `vertical_lines`, they will not prevent detecting
    rows or columns in other ways. These lines will be treated exactly like “real”
    vector graphics in terms of joining, snapping, intersectiing, minimum length and
    containment in the `clip` rectangle. Similarly, lines not parallel to any of the
    coordinate axes will be ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-findtables.jpg](../Images/c8a53fc0f951d1ad4f6697aea6f40859.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a `TableFinder` object that has the following significant attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cells`: a list of **all bboxes** on the page, that have been identified as
    table cells (across all tables). Each cell is a [`rect_like`](glossary.html#rect_like
    "rect_like") tuple `(x0, y0, x1, y1)` of coordinates or `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables`: a list of `Table` objects. This is `[]` if the page has no tables.
    Single tables can be found as items of this list. But the `TableFinder` object
    itself is also a sequence of its tables. This means that if `tabs` is a `TableFinder`
    object, then table “n” is delivered by `tabs.tables[n]` as well as by the shorter
    `tabs[n]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Table` object has the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bbox`](font.html#Font.bbox "Font.bbox"): the bounding box of the table as
    a tuple `(x0, y0, x1, y1)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells`: bounding boxes of the table’s cells (list of tuples). A cell may also
    be `None`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extract()`: this method returns the text content of each table cell as a list
    of list of strings.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_markdown()`: this method returns the table as a **string in markdown format**
    (compatible to Github). Supporting viewers can render the string as a table. This
    output is optimized for **small token** sizes, which is especially beneficial
    for LLM/RAG feeds. Pandas DataFrames (see method `to_pandas()` below) offer an
    equivalent markdown table output which however is better readable for the human
    eye.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_pandas()`: this method returns the table as a [pandas](https://pypi.org/project/pandas/)
    [DataFrame](https://pandas.pydata.org/docs/reference/frame.html). DataFrames are
    very versatile objects allowing a plethora of table manipulation methods and outputs
    to almost 20 well-known formats, among them Excel files, CSV, JSON, markdown-formatted
    tables and more. `DataFrame.to_markdown()` generates a Github-compatible markdown
    format optimized for human readability. This method however requires the package
    [tablutate]([https://pypi.org/project/tabulate/](https://pypi.org/project/tabulate/))
    to installed in addition to pandas itself.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header`: a `TableHeader` object containing header information of the table.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col_count`: an integer containing the number of table columns.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row_count`: an integer containing the number of table rows.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rows`: a list of `TableRow` objects containing two attributes, `bbox` is the
    boundary box of the row, and `cells` is a list of table cells contained in this
    row.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TableHeader` object has the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bbox`: the bounding box of the header.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells`: a list of bounding boxes containing the name of the respective column.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`names`: a list of strings containing the text of each of the cell bboxes.
    They represent the column names – which are used when exporting the table to pandas
    DataFrames, markdown, etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external`: a bool indicating whether the header bbox is outside the table
    body (`True`) or not. Table headers are never identified by the `TableFinder`
    logic. Therefore, if `external` is true, then the header cells are not part of
    any cell identified by `TableFinder`. If `external == False`, then the first table
    row is the header.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Please have a look at these [Jupyter notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis),
    which cover standard situations like multiple tables on one page or joining table
    fragments across multiple pages.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in version 1.23.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.19: new argument `add_lines`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: There is also the [pdf2docx extract tables method](https://pdf2docx.readthedocs.io/en/latest/quickstart.table.html)
    which is capable of table extraction if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a “rubber stamp” like annotation to e.g. indicate the document’s
    intended use (“DRAFT”, “CONFIDENTIAL”, etc.).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – rectangle where to place the annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stamp** (*int*) – id number of the stamp text. For available stamps see [Stamp
    Annotation Icons](vars.html#stampicons).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The stamp’s text and its border line will automatically be sized and be put
    horizontally and vertically centered in the given rectangle. [`Annot.rect`](annot.html#Annot.rect
    "Annot.rect") is automatically calculated to fit the given **width** and will
    usually be smaller than this parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The font chosen is “Times Bold” and the text will be upper case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The appearance can be changed using [`Annot.set_opacity()`](annot.html#Annot.set_opacity
    "Annot.set_opacity") and by setting the “stroke” color (no “fill” color supported).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be used to create watermark images: on a temporary PDF page create
    a stamp annotation with a low opacity value, make a pixmap from it with *alpha=True*
    (and potentially also rotate it), discard the temporary PDF page and use the pixmap
    with [`insert_image()`](#Page.insert_image "Page.insert_image") for your target
    PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![_images/img-stampannot.jpg](../Images/6c3204b51ff4a8c2e2bc64f845471cab.png)](_images/img-stampannot.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a PDF Form field (“widget”) to a page. This also **turns the
    PDF into a Form PDF**. Because of the large amount of different options available
    for widgets, we have developed a new class [Widget](widget.html#widget), which
    contains the possible PDF field attributes. It must be used for both, form field
    creation and updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widget** ([Widget](widget.html#widget)) – a [Widget](widget.html#widget)
    object which must have been created upfront.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a widget annotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: The removal will now include any bound ‘Popup’ or response annotations and related
    objects (changed in v1.16.6).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Delete annotation from the page and return the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**annot** ([Annot](annot.html#annot)) – the annotation to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the annotation following the deleted one. Please remember that physical removal
    requires saving to a new file with garbage > 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete field from the page and return the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widget** ([Widget](widget.html#widget)) – the widget to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the widget following the deleted one. Please remember that physical removal
    requires saving to a new file with garbage > 0.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> (New in v1.18.4)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete the specified link from the page. The parameter must be an
    **original item** of [`get_links()`](#Page.get_links "Page.get_links"), see [Description
    of get_links() Entries](#link-dict-description). The reason for this is the dictionary’s
    *“xref”* key, which identifies the PDF object to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert a new link on this page. The parameter must be a dictionary
    of format as provided by [`get_links()`](#Page.get_links "Page.get_links"), see
    [Description of get_links() Entries](#link-dict-description).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be inserted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Modify the specified link. The parameter must be a (modified) **original
    item** of [`get_links()`](#Page.get_links "Page.get_links"), see [Description
    of get_links() Entries](#link-dict-description). The reason for this is the dictionary’s
    *“xref”* key, which identifies the PDF object to be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be modified.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'If updating / inserting a URI link (`"kind": LINK_URI`), please make sure to
    start the value for the `"uri"` key with a disambiguating string like `"http://"`,
    `"https://"`, `"file://"`, `"ftp://"`, `"mailto:"`, etc. Otherwise – depending
    on your browser or other “consumer” software – unexpected default assumptions
    may lead to unwanted behaviours.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return the label for the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the label string like “vii” for Roman numbering or “” if not defined.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Retrieves **all** links of a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries. For a description of the dictionary entries, see [Description
    of get_links() Entries](#link-dict-description). Always use this or the [`Page.links()`](#Page.links
    "Page.links") method if you intend to make changes to the links of a page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s links. The results equal the entries of [`Page.get_links()`](#Page.get_links
    "Page.get_links").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kinds** (*sequence*) – a sequence of integers to down-select to one or more
    link kinds. Default is all links. Example: *kinds=(pymupdf.LINK_GOTO,)* will only
    return internal links.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an entry of [`Page.get_links()`](#Page.get_links "Page.get_links") for each
    iteration.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** (*sequence*) – a sequence of integers to down-select to one or more
    annotation types. Default is all annotations. Example: `types=(pymupdf.PDF_ANNOT_FREETEXT,
    pymupdf.PDF_ANNOT_TEXT)` will only return ‘FreeText’ and ‘Text’ annotations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [Annot](annot.html#annot) for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'You **cannot safely update annotations** from within this generator. This is
    because most annotation updates require reloading the page via `page = doc.reload_page(page)`.
    To circumvent this restriction, make a list of annotations xref numbers first
    and then iterate over these numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s form fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** (*sequence*) – a sequence of integers to down-select to one or more
    widget types. Default is all form fields. Example: `types=(pymupdf.PDF_WIDGET_TYPE_TEXT,)`
    will only return ‘Text’ fields.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [Widget](widget.html#widget) for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Write the text of one or more [TextWriter](textwriter.html#textwriter)
    objects to the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to place the text. If omitted, the rectangle
    union of the text writers is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**writers** (*sequence*) – a non-empty tuple / list of [TextWriter](textwriter.html#textwriter)
    objects or a single [TextWriter](textwriter.html#textwriter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – set transparency, overwrites resp. value in the text
    writers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**color** (*sequ*) – set the text color, overwrites resp. value in the text
    writers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put the text in foreground or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – maintain the aspect ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*float*) – rotate the text by an arbitrary angle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – the [`xref`](glossary.html#xref "xref") of an [`OCG`](glossary.html#OCG
    "OCG") or [`OCMD`](glossary.html#OCMD "OCMD"). (New in v1.18.4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Parameters *overlay, keep_proportion, rotate* and *oc* have the same meaning
    as in [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text starting at [`point_like`](glossary.html#point_like "point_like")
    *point*. See [`Shape.insert_text()`](shape.html#Shape.insert_text "Shape.insert_text").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text into the specified [`rect_like`](glossary.html#rect_like
    "rect_like") *rect*. See [`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only:** Insert text into the specified rectangle. The method has similarities
    with methods [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox")
    and [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox "TextWriter.fill_textbox"),
    but is **much more powerful**. This is achieved by letting a [Story](story-class.html#story)
    object do all the required processing.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter [`text`](xml-class.html#Xml.text "Xml.text") may be a string as in
    the other methods. But it will be **interpreted as HTML source** and may therefore
    also contain HTML language elements – including styling. The `css` parameter may
    be used to pass in additional styling instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic line breaks are generated at word boundaries. The “soft hyphen” character
    `"&#173;"` (or `&shy;`) can be used to cause hyphenation and thus may also cause
    line breaks. **Forced** line breaks however are only achievable via the HTML tag
    `<br>` - `"\n"` is ignored and will be treated like a space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this method the following can be achieved:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling effects like bold, italic, text color, text alignment, font size or
    font switching.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The text may include arbitrary languages – **including right-to-left** languages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts like [Devanagari](https://en.wikipedia.org/wiki/Devanagari) and several
    others in Asia have a highly complex system of ligatures, where two or more unicodes
    together yield one glyph. The Story uses the software package [HarfBuzz](https://harfbuzz.github.io/)
    , to deal with these things and produce correct output.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One can also **include images** via HTML tag `<img>` – the Story will take care
    of the appropriate layout. This is an alternative option to insert images, compared
    to [`Page.insert_image()`](#Page.insert_image "Page.insert_image").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML tables (tag `<table>`) may be included in the text and will be handled
    appropriately.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Links are automatically generated when present.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If content does not fit in the rectangle, the developer has two choices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**either** only be informed about this (and accept a no-op, just like with
    the other textbox insertion methods),'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**or** (`scale_low=0` - the default) scale down the content until it fits.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – rectangle on page to receive the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str**,*[*Story*](story-class.html#Story "Story")) – the text to
    be written. Can contain a mixture of plain text and HTML tags with styling instructions.
    Alternatively, a [Story](story-class.html#story) object may be specified (in which
    case the internal Story generation step will be omitted). A Story must have been
    generated with all required styling and Archive information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**css** (*str*) – optional string containing additional CSS instructions. This
    parameter is ignored if [`text`](xml-class.html#Xml.text "Xml.text") is a Story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scale_low** (*float*) – if necessary, scale down the content until it fits
    in the target rectangle. This sets the down scaling limit. Default is 0, no limit.
    A value of 1 means no down-scaling permitted. A value of e.g. 0.2 means maximum
    down-scaling by 80%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**archive** ([*Archive*](archive-class.html#Archive "Archive")) – an Archive
    object that points to locations where to find images or non-standard fonts. If
    [`text`](xml-class.html#Xml.text "Xml.text") refers to images or non-standard
    fonts, this parameter is required. This parameter is ignored if [`text`](xml-class.html#Xml.text
    "Xml.text") is a Story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'one of the values 0, 90, 180, 270\. Depending on this, text will be filled:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '0: top-left to bottom-right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '90: bottom-left to top-right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '180: bottom-right to top-left.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '270: top-right to bottom-left.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**oc** (*int*) – the xref of an [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD
    "OCMD") or 0\. Please refer to [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page")
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – set the fill and stroke opacity of the content. Only
    values `0 <= opacity < 1` are considered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put the text in front of other content. Please refer
    to [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page") for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of floats `(spare_height, scale)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`spare_height`: -1 if content did not fit, else >= 0\. It is the height of
    the unused (still available) rectangle stripe. Positive only if scale = 1 (no
    down-scaling happened).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale`: down-scaling factor, 0 < scale <= 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please refer to examples in this section of the recipes: [How to Fill a Box
    with HTML Text](recipes-text.html#recipestext-i-c).'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.23.8;
    rebased-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in v1.23.9: [`opacity`](annot.html#Annot.opacity "Annot.opacity") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawing Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_line()`](shape.html#Shape.draw_line "Shape.draw_line").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a zigzag line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_zigzag()`](shape.html#Shape.draw_zigzag "Shape.draw_zigzag").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a squiggly (wavy, undulated) line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_squiggle()`](shape.html#Shape.draw_squiggle
    "Shape.draw_squiggle").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a circle around *center* ([`point_like`](glossary.html#point_like
    "point_like")) with a radius of *radius*. See [`Shape.draw_circle()`](shape.html#Shape.draw_circle
    "Shape.draw_circle").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw an oval (ellipse) within the given [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like"). See [`Shape.draw_oval()`](shape.html#Shape.draw_oval
    "Shape.draw_oval").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a circular sector, optionally connecting the arc to the circle’s
    center (like a piece of pie). See [`Shape.draw_sector()`](shape.html#Shape.draw_sector
    "Shape.draw_sector").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw several connected lines defined by a sequence of [`point_like`](glossary.html#point_like
    "point_like") s. See [`Shape.draw_polyline()`](shape.html#Shape.draw_polyline
    "Shape.draw_polyline").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a cubic Bézier curve from *p1* to *p4* with the control points
    *p2* and *p3* (all are [`point_like`](glossary.html#point_like "point_like") s).
    See [`Shape.draw_bezier()`](shape.html#Shape.draw_bezier "Shape.draw_bezier").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: This is a special case of *draw_bezier()*. See [`Shape.draw_curve()`](shape.html#Shape.draw_curve
    "Shape.draw_curve").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a rectangle. See [`Shape.draw_rect()`](shape.html#Shape.draw_rect
    "Shape.draw_rect").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: Added parameter *radius*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a quadrilateral. See [`Shape.draw_quad()`](shape.html#Shape.draw_quad
    "Shape.draw_quad").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a new font to be used by text output methods and return its [`xref`](glossary.html#xref
    "xref"). If not already present in the file, the font definition will be added.
    Supported are the built-in [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts")
    and the CJK fonts via **“reserved”** fontnames. Fonts can also be provided as
    a file path or a memory area containing the image of a font file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name by which this font shall be referenced when outputting text on this
    page. In general, you have a “free” choice here (but consult the [Adobe PDF References](app3.html#adobemanual),
    page 16, section 7.3.5 for a formal description of building legal PDF names).
    However, if it matches one of the [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts")
    or one of the CJK fonts, *fontfile* and *fontbuffer* **are ignored**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other words, you cannot insert a font via *fontfile* / *fontbuffer* and also
    give it a reserved *fontname*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A reserved fontname can be specified in any mixture of upper or lower case
    and still match the right built-in font definition: fontnames “helv”, “Helv”,
    “HELV”, “Helvetica”, etc. all lead to the same font definition “Helvetica”. But
    from a [Page](#page) perspective, these are **different references**. You can
    exploit this fact when using different *encoding* variants (Latin, Greek, Cyrillic)
    of the same font on a page.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**fontfile** (*str*) – a path to a font file. If used, *fontname* must be **different
    from all reserved names**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontbuffer** (*bytes/bytearray*) – the memory image of a font file. If used,
    *fontname* must be **different from all reserved names**. This parameter would
    typically be used with [`Font.buffer`](font.html#Font.buffer "Font.buffer") for
    fonts supported / available via [Font](font.html#font).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**set_simple** (*int*) – applicable for *fontfile* / *fontbuffer* cases only:
    enforce treatment as a “simple” font, i.e. one that only uses character codes
    up to 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoding** (*int*) – applicable for the “Helvetica”, “Courier” and “Times”
    sets of [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts") only. Select one
    of the available encodings Latin (0), Cyrillic (2) or Greek (1). Only use the
    default (0 = Latin) for “Symbol” and “ZapfDingBats”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rytpe:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`xref`](glossary.html#xref "xref") of the installed font.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Built-in fonts will not lead to the inclusion of a font file. So the resulting
    PDF file will remain small. However, your PDF viewer software is responsible for
    generating an appropriate appearance – and there **exist** differences on whether
    or how each one of them does this. This is especially true for the CJK fonts.
    But also Symbol and ZapfDingbats are incorrectly handled in some cases. Following
    are the **Font Names** and their correspondingly installed **Base Font** names:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base-14 Fonts** [[1]](#f1)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Font Name** | **Installed Base Font** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| helv | Helvetica | normal |'
  prefs: []
  type: TYPE_TB
- en: '| heit | Helvetica-Oblique | italic |'
  prefs: []
  type: TYPE_TB
- en: '| hebo | Helvetica-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| hebi | Helvetica-BoldOblique | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| cour | Courier | normal |'
  prefs: []
  type: TYPE_TB
- en: '| coit | Courier-Oblique | italic |'
  prefs: []
  type: TYPE_TB
- en: '| cobo | Courier-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| cobi | Courier-BoldOblique | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| tiro | Times-Roman | normal |'
  prefs: []
  type: TYPE_TB
- en: '| tiit | Times-Italic | italic |'
  prefs: []
  type: TYPE_TB
- en: '| tibo | Times-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| tibi | Times-BoldItalic | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| symb | Symbol | [[3]](#f3) |'
  prefs: []
  type: TYPE_TB
- en: '| zadb | ZapfDingbats | [[3]](#f3) |'
  prefs: []
  type: TYPE_TB
- en: '**CJK Fonts** [[2]](#f2) (China, Japan, Korea)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Font Name** | **Installed Base Font** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| china-s | Heiti | simplified Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| china-ss | Song | simplified Chinese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| china-t | Fangti | traditional Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| china-ts | Ming | traditional Chinese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| japan | Gothic | Japanese |'
  prefs: []
  type: TYPE_TB
- en: '| japan-s | Mincho | Japanese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| korea | Dotum | Korean |'
  prefs: []
  type: TYPE_TB
- en: '| korea-s | Batang | Korean (serif) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Put an image inside the given rectangle. The image may already exist
    in the PDF or be taken from a pixmap, a file, or a memory area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to put the image. Must be finite and not empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*int*) – deprecated and ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** (*str*) – name of an image file (all formats supported by MuPDF
    – see [Supported Input Image Formats](pixmap.html#imagefiles)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – maintain the aspect ratio of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*bytes**,**bytearray**,**io.BytesIO*) – image in memory – to be used
    as image mask (alpha values) for the base image. When specified, the base image
    must be provided as a filename or a stream – and must not be an image that already
    has a mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – ([`xref`](glossary.html#xref "xref")) make image visibility
    dependent on this [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD
    "OCMD"). Ignored after the first of multiple insertions. The property is stored
    with the generated PDF image object and therefore controls the image’s visibility
    throughout the PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** – see [Common Parameters](shape.html#commonparms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixmap** ([Pixmap](pixmap.html#pixmap)) – a pixmap containing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – rotate the image. Must be an integer multiple of 90 degrees.
    Positive values rotate anti-clockwise. If you need a rotation by an arbitrary
    angle, consider converting the image to a PDF ([`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf")) first and then use [`Page.show_pdf_page()`](#Page.show_pdf_page
    "Page.show_pdf_page") instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** (*bytes**,**bytearray**,**io.BytesIO*) – image in memory (all formats
    supported by MuPDF – see [Supported Input Image Formats](pixmap.html#imagefiles)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of an image already
    present in the PDF. If given, parameters `filename`, [Pixmap](pixmap.html), [`stream`](glossary.html#stream
    "stream"), [`alpha`](pixmap.html#Pixmap.alpha "Pixmap.alpha") and `mask` are ignored.
    The page will simply receive a reference to the existing image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`xref`](glossary.html#xref "xref") of the embedded image. This can be used
    as the [`xref`](glossary.html#xref "xref") argument for very significant performance
    boosts, if the image is inserted again.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example puts the same image on every page of a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method detects multiple insertions of the same image (like in the above
    example) and will store its data only on the first execution. This is even true
    (although less performant), if using the default `xref=0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method cannot detect if the same image had already been part of the file
    before opening it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use this method to provide a background or foreground image for the
    page, like a copyright or a watermark. Please remember, that watermarks require
    a transparent image if put in foreground …
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image may be inserted uncompressed, e.g. if a [Pixmap](pixmap.html#pixmap)
    is used or if the image has an alpha channel. Therefore, consider using `deflate=True`
    when saving the file. In addition, there are ways to control the image size –
    even if transparency comes into play. Have a look at [How to Add Images to a PDF
    Page](recipes-images.html#recipesimages-o).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image is stored in the PDF at its original quality level. This may be much
    better than what you need for your display. Consider **decreasing the image size**
    before insertion – e.g. by using the pixmap option and then shrinking it or scaling
    it down (see [Pixmap](pixmap.html#pixmap) chapter). The PIL method `Image.thumbnail()`
    can also be used for that purpose. The file size savings can be very significant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another efficient way to display the same image on multiple pages is another
    method: [`show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page"). Consult
    [`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf "Document.convert_to_pdf")
    for how to obtain intermediary PDFs usable for that method.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.14.1:
    By default, the image keeps its aspect ratio.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.14.11: Added args `keep_proportion`, `rotate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.14.13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image is now always placed **centered** in the rectangle, i.e. the centers
    of image and rectangle are equal.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [`stream`](glossary.html#stream "stream") as `io.BytesIO`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.17.6: Insertion rectangle no longer needs to have a non-empty
    intersection with the page’s [`Page.cropbox`](#Page.cropbox "Page.cropbox") [[5]](#f5).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.1: Added `mask` arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.3: Added `oc` arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow providing the image as the xref of an existing one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`xref`](glossary.html#xref "xref") arg.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return [`xref`](glossary.html#xref "xref") of stored image.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.3: deprecate and ignore [`alpha`](pixmap.html#Pixmap.alpha
    "Pixmap.alpha") arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Replace the image at xref with another one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** – the filename of the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixmap** – the [Pixmap](pixmap.html#pixmap) of the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** – the memory area containing the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments `filename`, [Pixmap](pixmap.html), [`stream`](glossary.html#stream
    "stream") have the same meaning as in [`Page.insert_image()`](#Page.insert_image
    "Page.insert_image"), especially exactly one of these must be provided.
  prefs: []
  type: TYPE_NORMAL
- en: This is a **global replacement:** the new image will also be shown wherever
    the old one has been displayed throughout the file.
  prefs: []
  type: TYPE_NORMAL
- en: This method mainly exists for technical purposes. Typical uses include replacing
    large images by smaller versions, like a lower resolution, graylevel instead of
    colored, etc., or changing transparency.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the image at xref. This is slightly misleading: actually the image is
    being replaced with a small transparent [Pixmap](pixmap.html#pixmap) using above
    [`Page.replace_image()`](#Page.replace_image "Page.replace_image"). The visible
    effect however is equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **global replacement:** the image will disappear wherever the old
    one has been displayed throughout the file.
  prefs: []
  type: TYPE_NORMAL
- en: If you inspect / extract a page’s images by methods like [`Page.get_images()`](#Page.get_images
    "Page.get_images"), [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info")
    or [`Page.get_text()`](#Page.get_text "Page.get_text"), the replacing “dummy”
    image will be detected like so `(45, 47, 1, 1, 8, 'DeviceGray', '', 'Im1', 'FlateDecode')`
    and also seem to “cover” the same boundary box on the page.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieves the content of a page in a variety of formats. This is a wrapper
    for multiple [TextPage](textpage.html#textpage) methods by choosing the output
    option `opt` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: “text” – [`TextPage.extractTEXT()`](textpage.html#TextPage.extractTEXT "TextPage.extractTEXT"),
    default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “blocks” – [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “words” – [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “html” – [`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “xhtml” – [`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “xml” – [`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “dict” – [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “json” – [`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON "TextPage.extractJSON")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “rawdict” – [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “rawjson” – [`TextPage.extractRAWJSON()`](textpage.html#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opt** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string indicating the requested format, one of the above. A mixture of upper
    and lower case is supported.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Values “words” and “blocks” are also accepted (changed in v1.16.3).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – restrict extracted text to this rectangle. If None,
    the full page is taken. Has **no effect** for options “html”, “xhtml” and “xml”.
    (New in v1.17.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits to control whether to include images or
    how text should be handled with respect to white spaces and `ligatures`. See [Text
    Extraction Flags](vars.html#textpreserve) for available indicators and [Text Extraction
    Flags Defaults](app1.html#text-extraction-flags) for default settings. (New in
    v1.16.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – use a previously created [TextPage](textpage.html#textpage).
    This reduces execution time **very significantly:** by more than 50% and up to
    95%, depending on the extraction option. If specified, the ‘flags’ and ‘clip’
    arguments are ignored, because they are textpage-only properties. If omitted,
    a new, temporary textpage will be created. (New in v1.19.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sort** (*bool*) – sort the output by vertical, then horizontal coordinates.
    In many cases, this should suffice to generate a “natural” reading order. Has
    no effect on (X)HTML and XML. Output option **“words”** sorts by `(y1, x0)` of
    the words’ bboxes. Similar is true for “blocks”, “dict”, “json”, “rawdict”, “rawjson”:
    they all are sorted by `(y1, x0)` of the resp. block bbox. If specified for “text”,
    then internally “blocks” is used. (New in v1.19.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delimiters** (*str*) – use these characters as *additional* word separators
    with the “words” output option (ignored otherwise). By default, all white spaces
    (including non-breaking space `0xA0`) indicate start and end of a word. Now you
    can specify more characters causing this. For instance, the default will return
    `"john.doe@outlook.com"` as **one** word. If you specify `delimiters="@."` then
    the **four** words `"john"`, `"doe"`, `"outlook"`, `"com"` will be returned. Other
    possible uses include ignoring punctuation characters `delimiters=string.punctuation`.
    The “word” strings will not contain any delimiting character. (New in v1.23.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*str, list, dict*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The page’s content as a string, a list or a dictionary. Refer to the corresponding
    [TextPage](textpage.html#textpage) method for details.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use this method as a **document conversion tool** from [any supported
    document type](how-to-open-a-file.html#supported-file-types) to one of TEXT, HTML,
    XHTML or XML documents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The inclusion of text via the *clip* parameter is decided on a by-character
    level: a character becomes part of the output, if its bbox is contained in *clip*
    (changed in v1.18.2). This **deviates** from the algorithm used in redaction annotations:
    a character will be **removed if its bbox intersects** any redaction annotation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.0:
    added [TextPage](textpage.html) parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: added `sort` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.6: added new constants for defining default flags per method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.23.5: added `delimiters` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the text contained in a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect-like*) – rect-like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – a [TextPage](textpage.html#textpage) to use. If omitted, a new,
    temporary textpage will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a string with interspersed linebreaks where necessary. It is based on dedicated
    code (changed in v1.19.0). A typical use is checking the result of [`Page.search_for()`](#Page.search_for
    "Page.search_for"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.7
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: add [TextPage](textpage.html) parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Create a [TextPage](textpage.html#textpage) for the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits controlling the content available for subsequent
    text extractions and searches – see the parameter of [`Page.get_text()`](#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – restrict extracted text to this area. (New in v1.17.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[TextPage](textpage.html#textpage)'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.5
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.17.7: introduced `clip` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '**Optical Character Recognition** (**OCR**) technology can be used to extract
    text data for documents where text is in a raster image format throughout the
    page. Use this method to **OCR** a page for text extraction.'
  prefs: []
  type: TYPE_NORMAL
- en: This method returns a [TextPage](textpage.html#textpage) for the page that includes
    OCRed text. MuPDF will invoke Tesseract-OCR if this method is used. Otherwise
    this is a normal [TextPage](textpage.html#textpage) object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits controlling the content available for subsequent
    test extractions and searches – see the parameter of [`Page.get_text()`](#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – the expected language(s). Use “+”-separated values if
    multiple languages are expected, “eng+spa” for English and Spanish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – the desired resolution in dots per inch. Influences recognition
    quality (and execution time).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full** (*bool*) – whether to OCR the full page, or just the displayed images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tessdata** (*str*) – The name of Tesseract’s language support folder `tessdata`.
    If omitted, this information must be present as environment variable [`TESSDATA_PREFIX`](functions.html#TESSDATA_PREFIX
    "TESSDATA_PREFIX"). Can be determined by function [`get_tessdata()`](functions.html#get_tessdata
    "get_tessdata").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method does **not** support a clip parameter – OCR will always happen for
    the complete page rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [TextPage](textpage.html#textpage). Execution may be significantly longer
    than [`Page.get_textpage()`](#Page.get_textpage "Page.get_textpage").
  prefs: []
  type: TYPE_NORMAL
- en: For a full page OCR, **all text** will have the font “GlyphlessFont” from Tesseract.
    In case of partial OCR, normal text will keep its properties, and only text coming
    from images will have the GlyphlessFont.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**OCRed text is only available** to PyMuPDF’s text extractions and searches
    if their [TextPage](textpage.html) parameter specifies the output of this method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[This](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/jupyter-notebooks/partial-ocr.ipynb)
    Jupyter notebook walks through an example for using OCR textpages.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v.1.19.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: support full and partial OCRing a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Return the vector graphics of the page. These are instructions which draw lines,
    rectangles, quadruples or curves, including properties like colors, transparency,
    line width and dashing, etc. Alternative terms are “line art” and “drawings”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a list of dictionaries. Each dictionary item contains one or more single draw
    commands belonging together: they have the same properties (colors, dashing, etc.).
    This is called a **“path”** in PDF, so we adopted that name here, but the method
    **works for all document types**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The path dictionary for fill, stroke and fill-stroke paths has been designed
    to be compatible with class [Shape](shape.html#shape). There are the following
    keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| closePath | Same as the parameter in [Shape](shape.html#shape). |'
  prefs: []
  type: TYPE_TB
- en: '| color | Stroke color (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| dashes | Dashed line specification (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| even_odd | Fill colors of area overlaps – same as the parameter in [Shape](shape.html#shape).
    |'
  prefs: []
  type: TYPE_TB
- en: '| fill | Fill color (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| items | List of draw commands: lines, rectangles, quads or curves. |'
  prefs: []
  type: TYPE_TB
- en: '| lineCap | Number 3-tuple, use its max value on output with [Shape](shape.html#shape).
    |'
  prefs: []
  type: TYPE_TB
- en: '| lineJoin | Same as the parameter in [Shape](shape.html#shape). |'
  prefs: []
  type: TYPE_TB
- en: '| fill_opacity | fill color transparency (see [Shape](shape.html#shape)). (New
    in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| stroke_opacity | stroke color transparency (see [Shape](shape.html#shape)).
    (New in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| rect | Page area covered by this path. Information only. |'
  prefs: []
  type: TYPE_TB
- en: '| layer | name of applicable Optional Content Group. (New in v1.22.0) |'
  prefs: []
  type: TYPE_TB
- en: '| level | the hierarchy level if `extended=True`. (New in v1.22.0) |'
  prefs: []
  type: TYPE_TB
- en: '| seqno | command number when building page appearance. (New in v1.19.0) |'
  prefs: []
  type: TYPE_TB
- en: '| type | type of this path. (New in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| width | Stroke line width. (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: Key `"opacity"` has been replaced by the new keys `"fill_opacity"` and `"stroke_opacity"`.
    This is now compatible with the corresponding parameters of [`Shape.finish()`](shape.html#Shape.finish
    "Shape.finish"). (Changed in v1.18.17)
  prefs: []
  type: TYPE_NORMAL
- en: 'For paths other than groups or clips, key `"type"` takes one of the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**“f”** – this is a *fill-only* path. Only key-values relevant for this operation
    have a meaning, not applicable ones are present with a value of *None*: `"color"`,
    `"lineCap"`, `"lineJoin"`, `"width"`, `"closePath"`, `"dashes"` and should be
    ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“s”** – this is a *stroke-only* path. Similar to previous, key `"fill"` is
    present with value *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“fs”** – this is a path performing combined *fill* and *stroke* operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each item in `path["items"]` is one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`("l", p1, p2)` - a line from p1 to p2 ([Point](point.html#point) objects).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("c", p1, p2, p3, p4)` - cubic Bézier curve **from p1 to p4** (p2 and p3 are
    the control points). All objects are of type [Point](point.html#point).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("re", rect, orientation)` - a [Rect](rect.html#rect). Multiple rectangles
    within the same path are now detected (changed in v1.18.17). Integer `orientation`
    is 1 resp. -1 indicating whether the enclosed area is rotated left (1 = anti-clockwise),
    or resp. right [[7]](#f7) (changed in v1.19.2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("qu", quad)` - a [Quad](quad.html#quad). 3 or 4 consecutive lines are detected
    to actually represent a [Quad](quad.html#quad) (changed in v1.19.2:). (New in
    v1.18.17)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using class [Shape](shape.html#shape), you should be able to recreate the original
    drawings on a separate (PDF) page with high fidelity under normal, not too sophisticated
    circumstances. Please see the following comments on restrictions. A coding draft
    can be found in section “Extractings Drawings” of chapter [FAQ](faq.html#faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifying `extended=True` significantly alters the output. Most importantly,
    new dictionary types are present: “clip” and “group”. All paths will now be organized
    in a hierarchic structure which is encoded by the new integer key “level”, the
    hierarchy level. Each group or clip establishes a new hierarchy, which applies
    to all subsequent paths having a *larger* level value. (New in v1.22.0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any path with a smaller level value than its predecessor will end the scope
    of (at least) the preceeding hierarchy level. A “clip” path with the same level
    as the preceding clip will end the scope of that clip. Same is true for groups.
    This is best explained by an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: The clip in line 0 applies to line including line 7\. Group in line 2 applies
    to lines 3 to 5, clip in line 3 only applies to line 4.
  prefs: []
  type: TYPE_NORMAL
- en: “stroke” in line 4 is under control of “group” in line 2 and “clip” in line
    3 (which in turn is a subset of line 0 clip).
  prefs: []
  type: TYPE_NORMAL
- en: '**“clip”** dictionary. Its values (most importantly “scissor”) remain valid
    / apply as long as following dictionaries have a **larger “level”** value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| closePath | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| even_odd | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| items | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| rect | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| layer | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| level | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| scissor | the clip rectangle |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| type | “clip” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: “group” dictionary. Its values remain valid (apply) as long as following dictionaries
    have a **larger “level”** value. Any dictionary with an equal or lower level end
    this group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| rect | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| layer | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| level | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| isolated | (bool) Whether this group is isolated |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| knockout | (bool) Whether this is a “Knockout Group” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| blendmode | Name of the BlendMode, default is “Normal” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| opacity | Float value in range [0, 1]. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| type | “group” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method is based on the output of [`Page.get_cdrawings()`](#Page.get_cdrawings
    "Page.get_cdrawings") – which is much faster, but requires somewhat more attention
    processing its output.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.0
  prefs: []
  type: TYPE_NORMAL
- en: Changed in v1.18.17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: add “seqno” key, remove “clippings” key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: “color” / “fill” keys now always are either are RGB tuples
    or `None`. This resolves issues caused by exotic colorspaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.2: add an indicator for the *“orientation”* of the area covered
    by an “re” item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add new key `"layer"` which contains the name of the Optional
    Content Group of the path (or `None`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add parameter `extended` to also return clipping and group
    paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the vector graphics on the page. Apart from following technical differences,
    functionally equivalent to [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings"),
    but much faster:'
  prefs: []
  type: TYPE_NORMAL
- en: Every path type only contains the relevant keys, e.g. a stroke path has no `"fill"`
    color key. See comment in method [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coordinates are given as [`point_like`](glossary.html#point_like "point_like"),
    [`rect_like`](glossary.html#rect_like "rect_like") and [`quad_like`](glossary.html#quad_like
    "quad_like") **tuples** – not as [Point](point.html#point), [Rect](rect.html#rect),
    [Quad](quad.html#quad) objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If performance is a concern, consider using this method: Compared to versions
    earlier than 1.18.17, you should see much shorter response times. We have seen
    pages that required 2 seconds then, now only need 200 ms with this method.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.17
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: removed “clippings” key, added “seqno” key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: always generate RGB color tuples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: added new key `"layer"` which contains the name of the
    Optional Content Group of the path (or `None`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: added parameter `extended` to also return clipping paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of fonts referenced by the page. Wrapper for [`Document.get_page_fonts()`](document.html#Document.get_page_fonts
    "Document.get_page_fonts").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of images referenced by the page. Wrapper for [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Return a list of meta information dictionaries for all images shown on the
    page. This works for all document types. Technically, this is a subset of the
    dictionary output of [`Page.get_text()`](#Page.get_text "Page.get_text"): the
    image binary content and any text on the page are ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**hashes** (*bool*) – Compute the MD5 hashcode for each encountered image,
    which allows identifying image duplicates. This adds the key `"digest"` to the
    output, whose value is a 16 byte `bytes` object. (New in v1.18.13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xrefs** (*bool*) – **PDF only.** Try to find the [`xref`](glossary.html#xref
    "xref") for each image. Implies `hashes=True`. Adds the `"xref"` key to the dictionary.
    If not found, the value is 0, which means, the image is either “inline” or otherwise
    undetectable. Please note that this option has an extended response time, because
    the MD5 hashcode will be computed at least two times for each image with an xref.
    (New in v1.18.13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list[dict]
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries. This includes information for **exactly those** images,
    that are shown on the page – including *“inline images”*. In contrast to images
    included in [`Page.get_text()`](#Page.get_text "Page.get_text"), image **binary
    content** is not loaded, which drastically reduces memory usage. The dictionary
    layout is similar to that of image blocks in `page.get_text("dict")`.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| number | block number *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| bbox | image bbox on page, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  prefs: []
  type: TYPE_TB
- en: '| width | original image width *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| height | original image height *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| cs-name | colorspace name *(str)* |'
  prefs: []
  type: TYPE_TB
- en: '| colorspace | colorspace.n *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| xres | resolution in x-direction *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| yres | resolution in y-direction *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| bpc | bits per component *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| size | storage occupied by image *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| digest | MD5 hashcode *(bytes)*, if *hashes* is true |'
  prefs: []
  type: TYPE_TB
- en: '| xref | image [`xref`](glossary.html#xref "xref") or 0, if *xrefs* is true
    |'
  prefs: []
  type: TYPE_TB
- en: '| transform | matrix transforming image rect to bbox, [`matrix_like`](glossary.html#matrix_like
    "matrix_like") |'
  prefs: []
  type: TYPE_TB
- en: Multiple occurrences of the same image are always reported. You can detect duplicates
    by comparing their [`digest`](pixmap.html#Pixmap.digest "Pixmap.digest") values.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.13: added image MD5 hashcode computation and [`xref`](glossary.html#xref
    "xref") search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of Form XObjects referenced by the page. Wrapper for
    [`Document.get_page_xobjects()`](document.html#Document.get_page_xobjects "Document.get_page_xobjects").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return boundary boxes and transformation matrices of an embedded
    image. This is an improved version of [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") with the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no restriction on **how** the image is invoked (by the page or one
    of its Form XObjects). The result is always complete and correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result is a list of [Rect](rect.html#rect) or ([Rect](rect.html#rect), [Matrix](matrix.html#matrix))
    objects – depending on *transform*. Each list item represents one location of
    the image on the page. Multiple occurrences might not be detectable by [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method invokes [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info")
    with `xrefs=True` and therefore has a noticeably longer response time than [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*list**,**str**,**int*) – an item of the list [`Page.get_images()`](#Page.get_images
    "Page.get_images"), or the reference **name** entry of such an item (item[7]),
    or the image [`xref`](glossary.html#xref "xref").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transform** (*bool*) – also return the matrix used to transform the image
    rectangle to the bbox on the page. If true, then tuples `(bbox, matrix)` are returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary boxes and respective transformation matrices for each image occurrence
    on the page. If the item is not on the page, an empty list `[]` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> New in v1.18.13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return boundary box and transformation matrix of an embedded image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*list**,**str*) – an item of the list [`Page.get_images()`](#Page.get_images
    "Page.get_images") with *full=True* specified, or the reference **name** entry
    of such an item, which is item[-3] (or item[7] respectively).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transform** (*bool*) – return the matrix used to transform the image rectangle
    to the bbox on the page (new in v1.18.11). Default is just the bbox. If true,
    then a tuple `(bbox, matrix)` is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect) or ([Rect](rect.html#rect), [Matrix](matrix.html#matrix))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the boundary box of the image – optionally also its transformation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   (Changed in v1.16.7):
    If the page in fact does not display this image, an infinite rectangle is returned
    now. In previous versions, an exception was raised. Formally invalid parameters
    still raise exceptions.'
  prefs: []
  type: TYPE_NORMAL
- en: '(Changed in v1.17.0): Only images referenced directly by the page are considered.
    This means that images occurring in embedded PDF pages are ignored and an exception
    is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.5): Removed the restriction introduced in v1.17.0: any item
    of the page’s image list may be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.11): Partially re-instated a restriction: only those images
    are considered, that are either directly referenced by the page or by a Form XObject
    directly referenced by the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.11): Optionally also return the transformation matrix together
    with the bbox as the tuple `(bbox, transform)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that [`Page.get_images()`](#Page.get_images "Page.get_images") may
    contain “dead” entries i.e. images, which the page **does not display**. This
    is no error, but intended by the PDF creator. No exception will be raised in this
    case, but an infinite rectangle is returned. You can avoid this from happening
    by executing [`Page.clean_contents()`](functions.html#Page.clean_contents "Page.clean_contents")
    before this method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The image’s “transformation matrix” is defined as the matrix, for which the
    expression `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` is true, lookup details
    here: [Image Transformation Matrix](app3.html#imagetransformation).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.18.11:
    return image transformation matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Create an SVG image from the page. Only full page images are currently supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – a matrix, default is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_as_path** (*bool*) – – controls how text is represented. *True* outputs
    each character as a series of elementary draw commands, which leads to a more
    precise text display in browsers, but a **very much larger** output for text-oriented
    pages. Display quality for *False* relies on the presence of the referenced fonts
    on the current system. For missing fonts, the internet browser will fall back
    to some default – leading to unpleasant appearances. Choose *False* if you want
    to parse the text of the SVG. (New in v1.17.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a UTF-8 encoded string that contains the image. Because SVG has XML syntax it
    can be saved in a text file, the standard extension is `.svg`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In case of a PDF, you can circumvent the “full page image only” restriction
    by modifying the page’s CropBox before using the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Create a pixmap from the page. This is probably the most often used method to
    create a [Pixmap](pixmap.html#pixmap).
  prefs: []
  type: TYPE_NORMAL
- en: All parameters are *keyword-only.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – default is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – desired resolution in x and y direction. If not `None`, the
    `"matrix"` parameter is ignored. (New in v1.19.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colorspace** (str or [Colorspace](colorspace.html#colorspace)) – The desired
    colorspace, one of “GRAY”, “RGB” or “CMYK” (case insensitive). Or specify a [Colorspace](colorspace.html#colorspace),
    ie. one of the predefined ones: [`csGRAY`](vars.html#csGRAY "csGRAY"), [`csRGB`](vars.html#csRGB
    "csRGB") or [`csCMYK`](vars.html#csCMYK "csCMYK").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*irect_like*) – restrict rendering to the intersection of this area
    with the page’s rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*bool*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'whether to add an alpha channel. Always accept the default *False* if you do
    not really need transparency. This will save a lot of memory (25% in case of RGB
    … and pixmaps are typically **large**!), and also processing time. Also note an
    **important difference** in how the image will be rendered: with *True* the pixmap’s
    samples area will be pre-cleared with *0x00*. This results in **transparent**
    areas where the page is empty. With *False* the pixmap’s samples will be pre-cleared
    with *0xff*. This results in **white** where the page has nothing to show.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> Changed in v1.14.17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default alpha value is now *False*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Generated with *alpha=True*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-alpha-1.png](../Images/6ae43b36c653da1ab3dd60b092c78b1f.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Generated with *alpha=False*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-alpha-0.png](../Images/564ef406b4bef3b8920dcfb41f6b0ec5.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**annots** (*bool*) – *(new in version 1.16.0)* whether to also render annotations
    or to suppress them. You can create pixmaps for annotations separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pixmap of the page. For fine-controlling the generated image, the by far most
    important parameter is **matrix**. E.g. you can increase or decrease the image
    resolution by using **Matrix(xzoom, yzoom)**. If zoom > 1, you will get a higher
    resolution: zoom=2 will double the number of pixels in that direction and thus
    generate a 2 times larger image. Non-positive values will flip horizontally, resp.
    vertically. Similarly, matrices also let you rotate or shear, and you can combine
    effects via e.g. matrix multiplication. See the [Matrix](matrix.html#matrix) section
    to learn more.  Note'
  prefs: []
  type: TYPE_NORMAL
- en: The pixmap will have *“premultiplied”* pixels if `alpha=True`. To learn about
    some background, e.g. look for “Premultiplied alpha” [here](https://en.wikipedia.org/wiki/Glossary_of_computer_graphics#P).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The method will respect any page rotation and will not exceed the intersection
    of `clip` and [`Page.cropbox`](#Page.cropbox "Page.cropbox"). If you need the
    page’s mediabox (and if this is a different rectangle), you can use a snippet
    like the following to achieve this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.2:
    added support of parameter dpi.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return a list of the names of annotations, widgets and links. Technically,
    these are the */NM* values of every PDF object found in the page’s */Annots* array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return a list of the :data`xref` numbers of annotations, widgets
    and links – technically of all entries found in the page’s */Annots* array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of items *(xref, type)* where type is the annotation type. Use the type
    to tell apart links, fields and annotations, see [Annotation Types](vars.html#annotationtypes).
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return the annotation identified by *ident*. This may be its unique
    name (PDF `/NM` key), or its [`xref`](glossary.html#xref "xref").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ident** (*str**,**int*) – the annotation name or xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the annotation or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Methods [`Page.annot_names()`](#Page.annot_names "Page.annot_names"), [`Page.annot_xrefs()`](#Page.annot_xrefs
    "Page.annot_xrefs") provide lists of names or xrefs, respectively, from where
    an item may be picked and loaded via this method.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return the field identified by *xref*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the field’s xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the field or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the analogous method [`Page.load_annot()`](#Page.load_annot
    "Page.load_annot") – except that here only the xref is supported as identifier.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.19.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Return the first link on a page. Synonym of property [`first_link`](#Page.first_link
    "Page.first_link").
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](link.html#link)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: first link on the page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set the rotation of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – An integer specifying the required rotation in degrees.
    Must be an integer multiple of 90\. Values will be converted to one of 0, 90,
    180, 270.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set page rotation to 0 while maintaining appearance and page content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The inverted matrix used to achieve this change. If the page was not rotated
    (rotation 0), [Identity](identity.html#identity) is returned. The method automatically
    recomputes the rectangles of any annotations, links and widgets present on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: This method may come in handy when e.g. used with [`Page.show_pdf_page()`](#Page.show_pdf_page
    "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Display a page of another PDF as a **vector image** (otherwise similar
    to [`Page.insert_image()`](#Page.insert_image "Page.insert_image")). This is a
    multi-purpose method. For example, you can use it to'
  prefs: []
  type: TYPE_NORMAL
- en: create “n-up” versions of existing PDF files, combining several input pages
    into **one output page** (see example [combine.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/combine-pages/combine.py)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create “posterized” PDF files, i.e. every input page is split up in parts which
    each create a separate output page (see [posterize.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/posterize-document/posterize.py)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: include PDF-based vector images like company logos, watermarks, etc., see [svg-logo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/svg-logo.py),
    which puts an SVG-based logo on each page (requires additional packages to deal
    with SVG-to-PDF conversions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to place the image on current page. Must be
    finite and its intersection with the page must not be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**docsrc** ([Document](document.html#document)) – source PDF document containing
    the page. Must be a different document object, but may be the same file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number (0-based, in `-∞ < pno < docsrc.page_count`)
    to be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – whether to maintain the width-height-ratio (default).
    If false, all 4 corners are always positioned on the border of the target rectangle
    – whatever the rotation value. In general, this will deliver distorted and /or
    non-rectangular images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put image in foreground (default) or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – ([`xref`](glossary.html#xref "xref")) make visibility dependent
    on this [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD "OCMD")
    (which must be defined in the target PDF) [[9]](#f9). (New in v1.18.3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*float*) – show the source rectangle rotated by some angle. Any
    angle is supported (changed in v1.14.11). (New in v1.14.10)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – choose which part of the source page to show. Default
    is the full page, else must be finite and its intersection with the source page
    must not be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to method [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf"), this method does not copy annotations, widgets or links,
    so these are not included in the target [[6]](#f6). But all its **other resources
    (text, images, fonts, etc.)** will be imported into the current PDF. They will
    therefore appear in text extractions and in [`get_fonts()`](#Page.get_fonts "Page.get_fonts")
    and [`get_images()`](#Page.get_images "Page.get_images") lists – even if they
    are not contained in the visible area given by *clip*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Show the same source page, rotated by 90 and by -90 degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[![_images/img-showpdfpage.jpg](../Images/091955c9c70806604901ed00530bea58.png)](_images/img-showpdfpage.jpg)<details><summary>Show/hide
    history</summary></details> *   Changed in v1.14.11: Parameter *reuse_xref* has
    been deprecated. Position the source rectangle centered in target rectangle. Any
    rotation angle is now supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.3: New parameter `oc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Create a new [Shape](shape.html#shape) object for the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Shape](shape.html#shape)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [Shape](shape.html#shape) to use for compound drawings. See description
    there.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Search for *needle* on a page. Wrapper for [`TextPage.search()`](textpage.html#TextPage.search
    "TextPage.search").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**needle** (*str*) – Text to search for. May contain spaces. Upper / lower
    case is ignored, but only works for ASCII characters: For example, “COMPÉTENCES”
    will not be found if needle is “compétences” – “compÉtences” however will. Similar
    is true for German umlauts and the like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only search within this area. (New in v1.18.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quads** (*bool*) – Return object type [Quad](quad.html#quad) instead of [Rect](rect.html#rect).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – Control the data extracted by the underlying [TextPage](textpage.html#textpage).
    By default, ligatures and white spaces are kept, and hyphenation [[8]](#f8) is
    detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – use a previously created [TextPage](textpage.html#textpage).
    This reduces execution time **significantly.** If specified, the ‘flags’ and ‘clip’
    arguments are ignored. If omitted, a temporary textpage will be created. (New
    in v1.19.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of [Rect](rect.html#rect) or [Quad](quad.html#quad) objects, each of
    which – **normally!** – surrounds one occurrence of *needle*. **However:** if
    parts of *needle* occur on more than one line, then a separate item is generated
    for each these parts. So, if `needle = "search string"`, two rectangles may be
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> Changes in v1.18.2:'
  prefs: []
  type: TYPE_NORMAL
- en: There no longer is a limit on the list length (removal of the `hit_max` parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a word is **hyphenated** at a line break, it will still be found. E.g. the
    needle “method” will be found even if hyphenated as “meth-od” at a line break,
    and two rectangles will be returned: one surrounding “meth” (without the hyphen)
    and another one surrounding “od”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The method supports multi-line text marker annotations: you can use the full
    returned list as **one single** parameter for creating the annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a tricky aspect: the search logic regards **contiguous multiple occurrences**
    of *needle* as one: assuming *needle* is “abc”, and the page contains “abc” and
    “abcabc”, then only **two** rectangles will be returned, one for “abc”, and a
    second one for “abcabc”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can always use [`Page.get_textbox()`](#Page.get_textbox "Page.get_textbox")
    to check what text actually is being surrounded by each rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A feature repeatedly asked for is supporting **regular expressions** when specifying
    the `"needle"` string: **There is no way to do this.** If you need something in
    that direction, first extract text in the desired format and then subselect the
    result by matching with some regex pattern. Here is an example for matching words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: The `matches` list will contain the words matching the given pattern. In the
    same way you can select `span["text"]` from the output of `page.get_text("dict")`.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.18.2:
    added `clip` parameter. Remove `hit_max` parameter. Add default “dehyphenate”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: added [TextPage](textpage.html) parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Change the physical page dimension by setting [`mediabox`](#Page.mediabox
    "Page.mediabox") in the page’s object definition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect-like*) – the new [`mediabox`](#Page.mediabox "Page.mediabox")
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method also removes the page’s other (optional) rectangles ([`cropbox`](#Page.cropbox
    "Page.cropbox"), ArtBox, TrimBox and Bleedbox) to prevent inconsistent situations.
    This will cause those to assume their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: For non-empty pages this may have undesired effects, because the location of
    all content depends on this value and will therefore change position or even disappear.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.13
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.4: remove all other rectangle definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: change the visible part of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect_like*) – the new visible area of the page. Note that this **must**
    be specified in **unrotated coordinates**, not empty, nor infinite and be completely
    contained in the [`Page.mediabox`](#Page.mediabox "Page.mediabox").'
  prefs: []
  type: TYPE_NORMAL
- en: 'After execution **(if the page is not rotated)**, [`Page.rect`](#Page.rect
    "Page.rect") will equal this rectangle, but be shifted to the top-left position
    (0, 0) if necessary. Example session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set the resp. rectangle in the page object. For the meaning of these
    objects see [Adobe PDF References](app3.html#adobemanual), page 77\. Parameter
    and restrictions are the same as for [`Page.set_cropbox()`](#Page.set_cropbox
    "Page.set_cropbox").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.19.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'Contains the rotation of the page in degrees (always 0 for non-PDF types).
    This is a copy of the value in the PDF file. The PDF documentation says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“The number of degrees by which the page should be rotated clockwise when
    displayed or printed. The value must be a multiple of 90\. Default value: 0.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In PyMuPDF, we make sure that this attribute is always one of 0, 90, 180 or
    270.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Contains the top-left point of the page’s `/CropBox` for a PDF, otherwise *Point(0,
    0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: The page’s `/CropBox` for a PDF. Always the **unrotated** page rectangle is
    returned. For a non-PDF this will always equal the page rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In PDF, the relationship between `/MediaBox`, `/CropBox` and page rectangle
    may sometimes be confusing, please do lookup the glossary for [`MediaBox`](glossary.html#MediaBox
    "MediaBox").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: The page’s `/ArtBox`, `/BleedBox`, `/TrimBox`, respectively. If not provided,
    defaulting to [`Page.cropbox`](#Page.cropbox "Page.cropbox").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Contains the width and height of the page’s [`Page.mediabox`](#Page.mediabox
    "Page.mediabox") for a PDF, otherwise the bottom-right coordinates of [`Page.rect`](#Page.rect
    "Page.rect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: The page’s [`mediabox`](#Page.mediabox "Page.mediabox") for a PDF, otherwise
    [`Page.rect`](#Page.rect "Page.rect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For most PDF documents and for **all other document types**, `page.rect == page.cropbox
    == page.mediabox` is true. However, for some PDFs the visible page is a true subset
    of [`mediabox`](#Page.mediabox "Page.mediabox"). Also, if the page is rotated,
    its [`Page.rect`](#Page.rect "Page.rect") may not equal [`Page.cropbox`](#Page.cropbox
    "Page.cropbox"). In these cases the above attributes help to correctly locate
    page elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: This matrix translates coordinates from the PDF space to the MuPDF space. For
    example, in PDF `/Rect [x0 y0 x1 y1]` the pair (x0, y0) specifies the **bottom-left**
    point of the rectangle – in contrast to MuPDF’s system, where (x0, y0) specify
    top-left. Multiplying the PDF coordinates with this matrix will deliver the (Py-)
    MuPDF rectangle version. Obviously, the inverse matrix will again yield the PDF
    rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'These matrices may be used for dealing with rotated PDF pages. When adding
    / inserting anything to a PDF page, the coordinates of the **unrotated** page
    are always used. These matrices help translating between the two states. Example:
    if a page is rotated by 90 degrees – what would then be the coordinates of the
    top-left Point(0, 0) of an A4 page?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Link](link.html#link) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](link.html#link)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Annot](annot.html#annot) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Widget](widget.html#widget) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: The page number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: The owning document object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Document](document.html#document)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Contains the rectangle of the page. Same as result of [`Page.bound()`](#Page.bound
    "Page.bound").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: The page’s PDF [`xref`](glossary.html#xref "xref"). Zero if not a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Redactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only**: Add a redaction annotation. A redaction annotation identifies
    content to be removed from the document. Adding such an annotation is the first
    of two steps. It makes visible what will be removed in the subsequent step, [`Page.apply_redactions()`](#Page.apply_redactions
    "Page.apply_redactions").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quad** (*quad_like**,**rect_like*) – specifies the (rectangular) area to
    be removed which is always equal to the annotation rectangle. This may be a [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like") object. If
    a quad is specified, then the enveloping rectangle is taken.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str*) – text to be placed in the rectangle after applying the redaction
    (and thus removing old content). (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the font to use when *text* is given, otherwise ignored. The same rules apply
    as for [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox") –
    which is the method [`Page.apply_redactions()`](#Page.apply_redactions "Page.apply_redactions")
    internally invokes. The replacement text will be **vertically centered**, if this
    is one of the CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts). (New in v1.16.12)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For an **existing** font of the page, use its reference name as *fontname* (this
    is *item[4]* of its entry in [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts")).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a **new, non-builtin** font, proceed as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize")
    to use for the replacing text. If the text is too large to fit, several insertion
    attempts will be made, gradually reducing the [`fontsize`](glossary.html#fontsize
    "fontsize") to no less than 4\. If then the text will still not fit, no text insertion
    will take place at all. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – the horizontal alignment for the replacing text. See [`insert_textbox()`](#Page.insert_textbox
    "Page.insert_textbox") for available values. The vertical alignment is (approximately)
    centered if a PDF built-in font is used (CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts)).
    (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill** (*sequence*) – the fill color of the rectangle **after applying**
    the redaction. The default is *white = (1, 1, 1)*, which is also taken if *None*
    is specified. To suppress a fill color altogether, specify *False*. In this cases
    the rectangle remains transparent. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_color** (*sequence*) – the color of the replacing text. Default is *black
    = (0, 0, 0)*. (New in v1.16.12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_out** (*bool*) – add two diagonal lines to the annotation rectangle.
    (New in v1.17.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. Its standard appearance looks like a red rectangle (no
    fill color), optionally showing two diagonal lines. Colors, line width, dashing,
    opacity and blend mode can now be set and applied via [`Annot.update()`](annot.html#Annot.update
    "Annot.update") like with other annotations. (Changed in v1.17.2)
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-redact.jpg](../Images/89f843e2f4453c2561d0dbf05e28d1c1.png)<details><summary>Show/hide
    history</summary></details> *   New in v1.16.11'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only**: Remove all **content** contained in any redaction rectangle on
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**This method applies and then deletes all redactions from the page.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**images** (*int*) – How to redact overlapping images. The default (2) blanks
    out overlapping pixels. `PDF_REDACT_IMAGE_NONE | 0` ignores, and `PDF_REDACT_IMAGE_REMOVE
    | 1` completely removes images overlapping any redaction annotation. Option `PDF_REDACT_IMAGE_REMOVE_UNLESS_INVISIBLE
    | 3` only removes images that are actually visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**graphics** (*int*) – How to redact overlapping vector graphics (also called
    “line-art” or “drawings”). The default (2) removes any overlapping vector graphics.
    `PDF_REDACT_LINE_ART_NONE | 0` ignores, and `PDF_REDACT_LINE_ART_IF_COVERED |
    1` removes graphics fully contained in a redaction annotation. When removing line-art,
    please be aware that **stroked** vector graphics (i.e. type “s” or “sf”) have
    a **larger wrapping rectangle** than one might expect: first of all, at least
    50% of the path’s line width have to be added in each direction to truly include
    all of the drawing. If a so-called “miter limit” is provided (see page 121 of
    the PDF specification), the enlarging value is `miter * width / 2`. So, when letting
    everything default (width = 1, miter = 10), the redaction rectangle should be
    at least 5 points larger in every direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*int*) – Whether to redact overlapping text. The default `PDF_REDACT_TEXT_REMOVE
    | 0` removes all characters whose boundary box overlaps any redaction rectangle.
    This complies with the original legal / data protection intentions of redaction
    annotations. Other use cases however may require to **keep text** while redacting
    vector graphics or images. This can be achieved by setting `text=True|PDF_REDACT_TEXT_NONE
    | 1`. This does **not comply** with the data protection intentions of redaction
    annotations. **Do so at your own risk.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if at least one redaction annotation has been processed, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Text contained in a redaction rectangle will be **physically** removed from
    the page (assuming [`Document.save()`](document.html#Document.save "Document.save")
    with a suitable garbage option) and will no longer appear in e.g. text extractions
    or anywhere else. All redaction annotations will also be removed. Other annotations
    are unaffected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All overlapping links will be removed. If the rectangle of the link was covering
    text, then only the overlapping part of the text is being removed. Similar applies
    to images covered by link rectangles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overlapping parts of **images** will be blanked-out for default option `PDF_REDACT_IMAGE_PIXELS`
    (changed in v1.18.0). Option 0 does not touch any images and 1 will remove any
    image with an overlap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For option `images=PDF_REDACT_IMAGE_REMOVE` only this page’s **references to
    the images** are removed - not necessarily the images themselves. Images are completely
    removed from the file only, if no longer referenced at all (assuming suitable
    garbage collection options).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For option `images=PDF_REDACT_IMAGE_PIXELS` a new image of format PNG is created,
    which the page will use in place of the original one. The original image is not
    deleted or replaced as part of this process, so other pages may still show the
    original. In addition, the new, modified PNG image currently is **stored uncompressed**.
    Do keep these aspects in mind when choosing the right garbage collection method
    and compression options during save.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text removal** is done by character: A character is removed if its bbox has
    a **non-empty overlap** with a redaction rectangle (changed in MuPDF v1.17). Depending
    on the font properties and / or the chosen line height, deletion may occur for
    undesired text parts. Using [`Tools.set_small_glyph_heights()`](tools.html#Tools.set_small_glyph_heights
    "Tools.set_small_glyph_heights") with a *True* argument before text search may
    help to prevent this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redactions are a simple way to replace single words in a PDF, or to just physically
    remove them. Locate the word “secret” using some text extraction or search method
    and insert a redaction using “xxxxxx” as replacement text for each occurrence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be wary if the replacement is longer than the original – this may lead to an
    awkward appearance, line breaks or no new text at all.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a number of reasons, the new text may not exactly be positioned on the same
    line like the old one – especially true if the replacement font was not one of
    CJK or [PDF Base 14 Fonts](app3.html#base-14-fonts).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.16.12: The previous *mark* parameter is gone. Instead, the respective
    rectangles are filled with the individual *fill* color of each redaction annotation.
    If a *text* was given in the annotation, then [`insert_textbox()`](#Page.insert_textbox
    "Page.insert_textbox") is invoked to insert it, using parameters provided with
    the redaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.0: added option for handling images that overlap redaction
    areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.23.27: added option for removing graphics as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.24.2: added option `keep_text` to leave text untouched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add an annotation consisting of lines which connect the given points.
    A **Polygon’s** first and last points are automatically connected, which does
    not happen for a **PolyLine**. The **rectangle** is automatically created as the
    smallest rectangle containing the points, each one surrounded by a circle of radius
    3 (= 3 * line width). The following shows a ‘PolyLine’ that has been modified
    with colors and line ends.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** (*list*) – a list of [`point_like`](glossary.html#point_like "point_like")
    objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'the created annotation. It is drawn with line color black, line width 1 no
    fill color but fill color support. Use methods of [Annot](annot.html#annot) to
    make any changes to achieve something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-polyline.png](../Images/87d5e9ef380fcba893bb28b8300f6cc9.png)](_images/img-polyline.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: These annotations are normally used for **marking text** which has
    previously been somehow located (for example via [`Page.search_for()`](#Page.search_for
    "Page.search_for")). But this is not required: you are free to “mark” just anything.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard (stroke only – no fill color support) colors are chosen per annotation
    type: **yellow** for highlighting, **red** for striking out, **green** for underlining,
    and **magenta** for wavy underlining.'
  prefs: []
  type: TYPE_NORMAL
- en: All these four methods convert the arguments into a list of [Quad](quad.html#quad)
    objects. The **annotation** rectangle is then calculated to envelop all these
    quadrilaterals.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`search_for()`](#Page.search_for "Page.search_for") delivers a list of either
    [Rect](rect.html#rect) or [Quad](quad.html#quad) objects. Such a list can be directly
    used as an argument for these annotation types and will deliver **one common annotation**
    for all occurrences of the search string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, text marker annotations need to know what is the top, the bottom,
    the left, and the right side of the area(s) to be marked. If the arguments are
    quads, this information is given by the sequence of the quad points. In contrast,
    a rectangle delivers much less information – this is illustrated by the fact,
    that 4! = 24 different quads can be constructed with the four corners of a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we **strongly recommend** to use the `quads` option for text searches,
    to ensure correct annotations. A similar consideration applies to marking **text
    spans** extracted with the “dict” / “rawdict” options of [`Page.get_text()`](#Page.get_text
    "Page.get_text"). For more details on how to compute quadrilaterals in this case,
    see section “How to Mark Non-horizontal Text” of [FAQ](faq.html#faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quads** (*rect_like**,**quad_like**,**list**,**tuple*) – the location(s)
    – rectangle(s) or quad(s) – to be marked. (Changed in v1.14.20) A list or tuple
    must consist of [`rect_like`](glossary.html#rect_like "rect_like") or [`quad_like`](glossary.html#quad_like
    "quad_like") items (or even a mixture of either). Every item must be finite, convex
    and not empty (as applicable). **Set this parameter to** *None* if you want to
    use the following arguments (Changed in v1.16.14). And vice versa: if not *None*,
    the remaining parameters must be *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*point_like*) – start text marking at this point. Defaults to the
    top-left point of *clip*. Must be provided if `quads` is *None*. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop** (*point_like*) – stop text marking at this point. Defaults to the
    bottom-right point of *clip*. Must be used if `quads` is *None*. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only consider text lines intersecting this area. Defaults
    to the page rectangle. Only use if `start` and `stop` are provided. (New in v1.16.14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot) or *None* (changed in v1.16.14).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created annotation. If *quads* is an empty list, **no annotation** is created
    (changed in v1.16.14).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use parameters *start*, *stop* and *clip* to highlight consecutive lines
    between the points *start* and *stop* (starting with v1.16.14). Make use of *clip*
    to further reduce the selected line bboxes and thus deal with e.g. multi-column
    pages. The following multi-line highlight on a page with three text columns was
    created by specifying the two red points and setting clip accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-markers.jpg](../Images/5f165540580f211c945ad22d4cc0662a.png)](_images/img-markers.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Cluster vector graphics (synonyms are line-art or drawings) based on their geometrical
    vicinity. The method walks through the output of [`Page.get_drawings()`](#Page.get_drawings
    "Page.get_drawings") and joins paths whose `path["rect"]` are closer to each other
    than some tolerance values (given in the arguments). The result is a list of rectangles
    that each wrap things like tables (with gridlines), pie charts, bar charts, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only consider paths inside this area. The default
    is the full page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**drawings** (*list*) – (optional) provide a previously generated output of
    [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings"). If `None` the
    method will execute the method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x_tolerance** (*float*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Find tables on the page and return an object with related information. Typically,
    the default values of the many parameters will be sufficient. Adjustments should
    ever only be needed in corner case situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – specify a region to consider within the page rectangle
    and ignore the rest. Default is the full page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strategy** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request a **table detection** strategy. Valid values are “lines”, “lines_strict”
    and “text”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Default is **“lines”** which uses all vector graphics on the page to detect
    grid lines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Strategy **“lines_strict”** ignores borderless rectangle vector graphics. Sometimes
    single text pieces have background colors which may lead to false columns or lines.
    This strategy ignores them and can thus increase detection precision.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If **“text”** is specified, text positions are used to generate “virtual” column
    and / or row boundaries. Use `min_words_*` to request the number of words for
    considering their coordinates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use parameters `vertical_strategy` and `horizontal_strategy` **instead** for
    a more fine-grained treatment of the dimensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**horizontal_lines** (*sequence**[**floats**]*) – y-coordinates of rows. If
    provided, there will be no attempt to identify additional table rows. This influences
    table detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vertical_lines** (*sequence**[**floats**]*) – x-coordinates of columns. If
    provided, there will be no attempt to identify additional table columns. This
    influences table detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_words_vertical** (*int*) – relevant for vertical strategy option “text”:
    at least this many words must coincide to establish a **virtual column** boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_words_horizontal** (*int*) – relevant for horizontal strategy option
    “text”: at least this many words must coincide to establish a **virtual row**
    boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**snap_tolerance** (*float*) – Any two horizontal lines whose y-values differ
    by no more than this value will be **snapped** into one. Accordingly for vertical
    lines. Default is 3\. Separate values can be specified instead for the dimensions,
    using `snap_x_tolerance` and `snap_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**join_tolerance** (*float*) – Any two lines will be **joined** to one if the
    end and the start points differ by no more than this value (in points). Default
    is 3\. Instead of this value, separate values can be specified for the dimensions
    using `join_x_tolerance` and `join_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**edge_min_length** (*float*) – Ignore a line if its length does not exceed
    this value (points). Default is 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**intersection_tolerance** (*float*) – When combining lines into cell borders,
    orthogonal lines must be within this value (points) to be considered intersecting.
    Default is 3\. Instead of this value, separate values can be specified for the
    dimensions using `intersection_x_tolerance` and `intersection_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_tolerance** (*float*) – Characters will be combined into words only
    if their distance is no larger than this value (points). Default is 3\. Instead
    of this value, separate values can be specified for the dimensions using `text_x_tolerance`
    and `text_y_tolerance`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**add_lines** (*tuple**,**list*) – Specify a list of “lines” (i.e. pairs of
    [`point_like`](glossary.html#point_like "point_like") objects) as **additional**,
    “virtual” vector graphics. These lines may help with table and / or cell detection
    and will not otherwise influence the detection strategy. Especially, in contrast
    to parameters `horizontal_lines` and `vertical_lines`, they will not prevent detecting
    rows or columns in other ways. These lines will be treated exactly like “real”
    vector graphics in terms of joining, snapping, intersectiing, minimum length and
    containment in the `clip` rectangle. Similarly, lines not parallel to any of the
    coordinate axes will be ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-findtables.jpg](../Images/c8a53fc0f951d1ad4f6697aea6f40859.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a `TableFinder` object that has the following significant attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cells`: a list of **all bboxes** on the page, that have been identified as
    table cells (across all tables). Each cell is a [`rect_like`](glossary.html#rect_like
    "rect_like") tuple `(x0, y0, x1, y1)` of coordinates or `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables`: a list of `Table` objects. This is `[]` if the page has no tables.
    Single tables can be found as items of this list. But the `TableFinder` object
    itself is also a sequence of its tables. This means that if `tabs` is a `TableFinder`
    object, then table “n” is delivered by `tabs.tables[n]` as well as by the shorter
    `tabs[n]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Table` object has the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bbox`](font.html#Font.bbox "Font.bbox"): the bounding box of the table as
    a tuple `(x0, y0, x1, y1)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells`: bounding boxes of the table’s cells (list of tuples). A cell may also
    be `None`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extract()`: this method returns the text content of each table cell as a list
    of list of strings.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_markdown()`: this method returns the table as a **string in markdown format**
    (compatible to Github). Supporting viewers can render the string as a table. This
    output is optimized for **small token** sizes, which is especially beneficial
    for LLM/RAG feeds. Pandas DataFrames (see method `to_pandas()` below) offer an
    equivalent markdown table output which however is better readable for the human
    eye.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_pandas()`: this method returns the table as a [pandas](https://pypi.org/project/pandas/)
    [DataFrame](https://pandas.pydata.org/docs/reference/frame.html). DataFrames are
    very versatile objects allowing a plethora of table manipulation methods and outputs
    to almost 20 well-known formats, among them Excel files, CSV, JSON, markdown-formatted
    tables and more. `DataFrame.to_markdown()` generates a Github-compatible markdown
    format optimized for human readability. This method however requires the package
    [tablutate]([https://pypi.org/project/tabulate/](https://pypi.org/project/tabulate/))
    to installed in addition to pandas itself.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header`: a `TableHeader` object containing header information of the table.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col_count`: an integer containing the number of table columns.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row_count`: an integer containing the number of table rows.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rows`: a list of `TableRow` objects containing two attributes, `bbox` is the
    boundary box of the row, and `cells` is a list of table cells contained in this
    row.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TableHeader` object has the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bbox`: the bounding box of the header.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells`: a list of bounding boxes containing the name of the respective column.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`names`: a list of strings containing the text of each of the cell bboxes.
    They represent the column names – which are used when exporting the table to pandas
    DataFrames, markdown, etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external`: a bool indicating whether the header bbox is outside the table
    body (`True`) or not. Table headers are never identified by the `TableFinder`
    logic. Therefore, if `external` is true, then the header cells are not part of
    any cell identified by `TableFinder`. If `external == False`, then the first table
    row is the header.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Please have a look at these [Jupyter notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/table-analysis),
    which cover standard situations like multiple tables on one page or joining table
    fragments across multiple pages.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in version 1.23.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.19: new argument `add_lines`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: There is also the [pdf2docx extract tables method](https://pdf2docx.readthedocs.io/en/latest/quickstart.table.html)
    which is capable of table extraction if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a “rubber stamp” like annotation to e.g. indicate the document’s
    intended use (“DRAFT”, “CONFIDENTIAL”, etc.).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – rectangle where to place the annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stamp** (*int*) – id number of the stamp text. For available stamps see [Stamp
    Annotation Icons](vars.html#stampicons).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The stamp’s text and its border line will automatically be sized and be put
    horizontally and vertically centered in the given rectangle. [`Annot.rect`](annot.html#Annot.rect
    "Annot.rect") is automatically calculated to fit the given **width** and will
    usually be smaller than this parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The font chosen is “Times Bold” and the text will be upper case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The appearance can be changed using [`Annot.set_opacity()`](annot.html#Annot.set_opacity
    "Annot.set_opacity") and by setting the “stroke” color (no “fill” color supported).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be used to create watermark images: on a temporary PDF page create
    a stamp annotation with a low opacity value, make a pixmap from it with *alpha=True*
    (and potentially also rotate it), discard the temporary PDF page and use the pixmap
    with [`insert_image()`](#Page.insert_image "Page.insert_image") for your target
    PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![_images/img-stampannot.jpg](../Images/6c3204b51ff4a8c2e2bc64f845471cab.png)](_images/img-stampannot.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a PDF Form field (“widget”) to a page. This also **turns the
    PDF into a Form PDF**. Because of the large amount of different options available
    for widgets, we have developed a new class [Widget](widget.html#widget), which
    contains the possible PDF field attributes. It must be used for both, form field
    creation and updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widget** ([Widget](widget.html#widget)) – a [Widget](widget.html#widget)
    object which must have been created upfront.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a widget annotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: The removal will now include any bound ‘Popup’ or response annotations and related
    objects (changed in v1.16.6).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Delete annotation from the page and return the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**annot** ([Annot](annot.html#annot)) – the annotation to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the annotation following the deleted one. Please remember that physical removal
    requires saving to a new file with garbage > 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete field from the page and return the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widget** ([Widget](widget.html#widget)) – the widget to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the widget following the deleted one. Please remember that physical removal
    requires saving to a new file with garbage > 0.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> (New in v1.18.4)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete the specified link from the page. The parameter must be an
    **original item** of [`get_links()`](#Page.get_links "Page.get_links"), see [Description
    of get_links() Entries](#link-dict-description). The reason for this is the dictionary’s
    *“xref”* key, which identifies the PDF object to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert a new link on this page. The parameter must be a dictionary
    of format as provided by [`get_links()`](#Page.get_links "Page.get_links"), see
    [Description of get_links() Entries](#link-dict-description).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be inserted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Modify the specified link. The parameter must be a (modified) **original
    item** of [`get_links()`](#Page.get_links "Page.get_links"), see [Description
    of get_links() Entries](#link-dict-description). The reason for this is the dictionary’s
    *“xref”* key, which identifies the PDF object to be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linkdict** (*dict*) – the link to be modified.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'If updating / inserting a URI link (`"kind": LINK_URI`), please make sure to
    start the value for the `"uri"` key with a disambiguating string like `"http://"`,
    `"https://"`, `"file://"`, `"ftp://"`, `"mailto:"`, etc. Otherwise – depending
    on your browser or other “consumer” software – unexpected default assumptions
    may lead to unwanted behaviours.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return the label for the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the label string like “vii” for Roman numbering or “” if not defined.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: Retrieves **all** links of a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries. For a description of the dictionary entries, see [Description
    of get_links() Entries](#link-dict-description). Always use this or the [`Page.links()`](#Page.links
    "Page.links") method if you intend to make changes to the links of a page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s links. The results equal the entries of [`Page.get_links()`](#Page.get_links
    "Page.get_links").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kinds** (*sequence*) – a sequence of integers to down-select to one or more
    link kinds. Default is all links. Example: *kinds=(pymupdf.LINK_GOTO,)* will only
    return internal links.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an entry of [`Page.get_links()`](#Page.get_links "Page.get_links") for each
    iteration.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** (*sequence*) – a sequence of integers to down-select to one or more
    annotation types. Default is all annotations. Example: `types=(pymupdf.PDF_ANNOT_FREETEXT,
    pymupdf.PDF_ANNOT_TEXT)` will only return ‘FreeText’ and ‘Text’ annotations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [Annot](annot.html#annot) for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'You **cannot safely update annotations** from within this generator. This is
    because most annotation updates require reloading the page via `page = doc.reload_page(page)`.
    To circumvent this restriction, make a list of annotations xref numbers first
    and then iterate over these numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Return a generator over the page’s form fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** (*sequence*) – a sequence of integers to down-select to one or more
    widget types. Default is all form fields. Example: `types=(pymupdf.PDF_WIDGET_TYPE_TEXT,)`
    will only return ‘Text’ fields.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: generator
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [Widget](widget.html#widget) for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Write the text of one or more [TextWriter](textwriter.html#textwriter)
    objects to the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to place the text. If omitted, the rectangle
    union of the text writers is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**writers** (*sequence*) – a non-empty tuple / list of [TextWriter](textwriter.html#textwriter)
    objects or a single [TextWriter](textwriter.html#textwriter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – set transparency, overwrites resp. value in the text
    writers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**color** (*sequ*) – set the text color, overwrites resp. value in the text
    writers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put the text in foreground or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – maintain the aspect ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*float*) – rotate the text by an arbitrary angle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – the [`xref`](glossary.html#xref "xref") of an [`OCG`](glossary.html#OCG
    "OCG") or [`OCMD`](glossary.html#OCMD "OCMD"). (New in v1.18.4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Parameters *overlay, keep_proportion, rotate* and *oc* have the same meaning
    as in [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text starting at [`point_like`](glossary.html#point_like "point_like")
    *point*. See [`Shape.insert_text()`](shape.html#Shape.insert_text "Shape.insert_text").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text into the specified [`rect_like`](glossary.html#rect_like
    "rect_like") *rect*. See [`Shape.insert_textbox()`](shape.html#Shape.insert_textbox
    "Shape.insert_textbox").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '**PDF only:** Insert text into the specified rectangle. The method has similarities
    with methods [`Page.insert_textbox()`](#Page.insert_textbox "Page.insert_textbox")
    and [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox "TextWriter.fill_textbox"),
    but is **much more powerful**. This is achieved by letting a [Story](story-class.html#story)
    object do all the required processing.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter [`text`](xml-class.html#Xml.text "Xml.text") may be a string as in
    the other methods. But it will be **interpreted as HTML source** and may therefore
    also contain HTML language elements – including styling. The `css` parameter may
    be used to pass in additional styling instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic line breaks are generated at word boundaries. The “soft hyphen” character
    `"&#173;"` (or `&shy;`) can be used to cause hyphenation and thus may also cause
    line breaks. **Forced** line breaks however are only achievable via the HTML tag
    `<br>` - `"\n"` is ignored and will be treated like a space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this method the following can be achieved:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling effects like bold, italic, text color, text alignment, font size or
    font switching.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The text may include arbitrary languages – **including right-to-left** languages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts like [Devanagari](https://en.wikipedia.org/wiki/Devanagari) and several
    others in Asia have a highly complex system of ligatures, where two or more unicodes
    together yield one glyph. The Story uses the software package [HarfBuzz](https://harfbuzz.github.io/)
    , to deal with these things and produce correct output.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One can also **include images** via HTML tag `<img>` – the Story will take care
    of the appropriate layout. This is an alternative option to insert images, compared
    to [`Page.insert_image()`](#Page.insert_image "Page.insert_image").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML tables (tag `<table>`) may be included in the text and will be handled
    appropriately.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Links are automatically generated when present.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If content does not fit in the rectangle, the developer has two choices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**either** only be informed about this (and accept a no-op, just like with
    the other textbox insertion methods),'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**or** (`scale_low=0` - the default) scale down the content until it fits.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – rectangle on page to receive the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text** (*str**,*[*Story*](story-class.html#Story "Story")) – the text to
    be written. Can contain a mixture of plain text and HTML tags with styling instructions.
    Alternatively, a [Story](story-class.html#story) object may be specified (in which
    case the internal Story generation step will be omitted). A Story must have been
    generated with all required styling and Archive information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**css** (*str*) – optional string containing additional CSS instructions. This
    parameter is ignored if [`text`](xml-class.html#Xml.text "Xml.text") is a Story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scale_low** (*float*) – if necessary, scale down the content until it fits
    in the target rectangle. This sets the down scaling limit. Default is 0, no limit.
    A value of 1 means no down-scaling permitted. A value of e.g. 0.2 means maximum
    down-scaling by 80%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**archive** ([*Archive*](archive-class.html#Archive "Archive")) – an Archive
    object that points to locations where to find images or non-standard fonts. If
    [`text`](xml-class.html#Xml.text "Xml.text") refers to images or non-standard
    fonts, this parameter is required. This parameter is ignored if [`text`](xml-class.html#Xml.text
    "Xml.text") is a Story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'one of the values 0, 90, 180, 270\. Depending on this, text will be filled:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '0: top-left to bottom-right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '90: bottom-left to top-right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '180: bottom-right to top-left.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '270: top-right to bottom-left.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**oc** (*int*) – the xref of an [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD
    "OCMD") or 0\. Please refer to [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page")
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**opacity** (*float*) – set the fill and stroke opacity of the content. Only
    values `0 <= opacity < 1` are considered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put the text in front of other content. Please refer
    to [`Page.show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page") for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of floats `(spare_height, scale)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`spare_height`: -1 if content did not fit, else >= 0\. It is the height of
    the unused (still available) rectangle stripe. Positive only if scale = 1 (no
    down-scaling happened).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale`: down-scaling factor, 0 < scale <= 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please refer to examples in this section of the recipes: [How to Fill a Box
    with HTML Text](recipes-text.html#recipestext-i-c).'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.23.8;
    rebased-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in v1.23.9: [`opacity`](annot.html#Annot.opacity "Annot.opacity") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawing Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_line()`](shape.html#Shape.draw_line "Shape.draw_line").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a zigzag line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_zigzag()`](shape.html#Shape.draw_zigzag "Shape.draw_zigzag").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a squiggly (wavy, undulated) line from *p1* to *p2* ([`point_like`](glossary.html#point_like
    "point_like") s). See [`Shape.draw_squiggle()`](shape.html#Shape.draw_squiggle
    "Shape.draw_squiggle").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a circle around *center* ([`point_like`](glossary.html#point_like
    "point_like")) with a radius of *radius*. See [`Shape.draw_circle()`](shape.html#Shape.draw_circle
    "Shape.draw_circle").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw an oval (ellipse) within the given [`rect_like`](glossary.html#rect_like
    "rect_like") or [`quad_like`](glossary.html#quad_like "quad_like"). See [`Shape.draw_oval()`](shape.html#Shape.draw_oval
    "Shape.draw_oval").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a circular sector, optionally connecting the arc to the circle’s
    center (like a piece of pie). See [`Shape.draw_sector()`](shape.html#Shape.draw_sector
    "Shape.draw_sector").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw several connected lines defined by a sequence of [`point_like`](glossary.html#point_like
    "point_like") s. See [`Shape.draw_polyline()`](shape.html#Shape.draw_polyline
    "Shape.draw_polyline").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a cubic Bézier curve from *p1* to *p4* with the control points
    *p2* and *p3* (all are [`point_like`](glossary.html#point_like "point_like") s).
    See [`Shape.draw_bezier()`](shape.html#Shape.draw_bezier "Shape.draw_bezier").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: This is a special case of *draw_bezier()*. See [`Shape.draw_curve()`](shape.html#Shape.draw_curve
    "Shape.draw_curve").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a rectangle. See [`Shape.draw_rect()`](shape.html#Shape.draw_rect
    "Shape.draw_rect").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: Added parameter *radius*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Draw a quadrilateral. See [`Shape.draw_quad()`](shape.html#Shape.draw_quad
    "Shape.draw_quad").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   Changed in v1.18.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Add a new font to be used by text output methods and return its [`xref`](glossary.html#xref
    "xref"). If not already present in the file, the font definition will be added.
    Supported are the built-in [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts")
    and the CJK fonts via **“reserved”** fontnames. Fonts can also be provided as
    a file path or a memory area containing the image of a font file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontname** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name by which this font shall be referenced when outputting text on this
    page. In general, you have a “free” choice here (but consult the [Adobe PDF References](app3.html#adobemanual),
    page 16, section 7.3.5 for a formal description of building legal PDF names).
    However, if it matches one of the [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts")
    or one of the CJK fonts, *fontfile* and *fontbuffer* **are ignored**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other words, you cannot insert a font via *fontfile* / *fontbuffer* and also
    give it a reserved *fontname*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A reserved fontname can be specified in any mixture of upper or lower case
    and still match the right built-in font definition: fontnames “helv”, “Helv”,
    “HELV”, “Helvetica”, etc. all lead to the same font definition “Helvetica”. But
    from a [Page](#page) perspective, these are **different references**. You can
    exploit this fact when using different *encoding* variants (Latin, Greek, Cyrillic)
    of the same font on a page.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**fontfile** (*str*) – a path to a font file. If used, *fontname* must be **different
    from all reserved names**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontbuffer** (*bytes/bytearray*) – the memory image of a font file. If used,
    *fontname* must be **different from all reserved names**. This parameter would
    typically be used with [`Font.buffer`](font.html#Font.buffer "Font.buffer") for
    fonts supported / available via [Font](font.html#font).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**set_simple** (*int*) – applicable for *fontfile* / *fontbuffer* cases only:
    enforce treatment as a “simple” font, i.e. one that only uses character codes
    up to 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoding** (*int*) – applicable for the “Helvetica”, “Courier” and “Times”
    sets of [`Base14_Fonts`](vars.html#Base14_Fonts "Base14_Fonts") only. Select one
    of the available encodings Latin (0), Cyrillic (2) or Greek (1). Only use the
    default (0 = Latin) for “Symbol” and “ZapfDingBats”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rytpe:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`xref`](glossary.html#xref "xref") of the installed font.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Built-in fonts will not lead to the inclusion of a font file. So the resulting
    PDF file will remain small. However, your PDF viewer software is responsible for
    generating an appropriate appearance – and there **exist** differences on whether
    or how each one of them does this. This is especially true for the CJK fonts.
    But also Symbol and ZapfDingbats are incorrectly handled in some cases. Following
    are the **Font Names** and their correspondingly installed **Base Font** names:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base-14 Fonts** [[1]](#f1)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Font Name** | **Installed Base Font** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| helv | Helvetica | normal |'
  prefs: []
  type: TYPE_TB
- en: '| heit | Helvetica-Oblique | italic |'
  prefs: []
  type: TYPE_TB
- en: '| hebo | Helvetica-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| hebi | Helvetica-BoldOblique | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| cour | Courier | normal |'
  prefs: []
  type: TYPE_TB
- en: '| coit | Courier-Oblique | italic |'
  prefs: []
  type: TYPE_TB
- en: '| cobo | Courier-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| cobi | Courier-BoldOblique | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| tiro | Times-Roman | normal |'
  prefs: []
  type: TYPE_TB
- en: '| tiit | Times-Italic | italic |'
  prefs: []
  type: TYPE_TB
- en: '| tibo | Times-Bold | bold |'
  prefs: []
  type: TYPE_TB
- en: '| tibi | Times-BoldItalic | bold-italic |'
  prefs: []
  type: TYPE_TB
- en: '| symb | Symbol | [[3]](#f3) |'
  prefs: []
  type: TYPE_TB
- en: '| zadb | ZapfDingbats | [[3]](#f3) |'
  prefs: []
  type: TYPE_TB
- en: '**CJK Fonts** [[2]](#f2) (China, Japan, Korea)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Font Name** | **Installed Base Font** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| china-s | Heiti | simplified Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| china-ss | Song | simplified Chinese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| china-t | Fangti | traditional Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| china-ts | Ming | traditional Chinese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| japan | Gothic | Japanese |'
  prefs: []
  type: TYPE_TB
- en: '| japan-s | Mincho | Japanese (serif) |'
  prefs: []
  type: TYPE_TB
- en: '| korea | Dotum | Korean |'
  prefs: []
  type: TYPE_TB
- en: '| korea-s | Batang | Korean (serif) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Put an image inside the given rectangle. The image may already exist
    in the PDF or be taken from a pixmap, a file, or a memory area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to put the image. Must be finite and not empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*int*) – deprecated and ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** (*str*) – name of an image file (all formats supported by MuPDF
    – see [Supported Input Image Formats](pixmap.html#imagefiles)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – maintain the aspect ratio of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*bytes**,**bytearray**,**io.BytesIO*) – image in memory – to be used
    as image mask (alpha values) for the base image. When specified, the base image
    must be provided as a filename or a stream – and must not be an image that already
    has a mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – ([`xref`](glossary.html#xref "xref")) make image visibility
    dependent on this [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD
    "OCMD"). Ignored after the first of multiple insertions. The property is stored
    with the generated PDF image object and therefore controls the image’s visibility
    throughout the PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** – see [Common Parameters](shape.html#commonparms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixmap** ([Pixmap](pixmap.html#pixmap)) – a pixmap containing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – rotate the image. Must be an integer multiple of 90 degrees.
    Positive values rotate anti-clockwise. If you need a rotation by an arbitrary
    angle, consider converting the image to a PDF ([`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf
    "Document.convert_to_pdf")) first and then use [`Page.show_pdf_page()`](#Page.show_pdf_page
    "Page.show_pdf_page") instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** (*bytes**,**bytearray**,**io.BytesIO*) – image in memory (all formats
    supported by MuPDF – see [Supported Input Image Formats](pixmap.html#imagefiles)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of an image already
    present in the PDF. If given, parameters `filename`, [Pixmap](pixmap.html), [`stream`](glossary.html#stream
    "stream"), [`alpha`](pixmap.html#Pixmap.alpha "Pixmap.alpha") and `mask` are ignored.
    The page will simply receive a reference to the existing image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`xref`](glossary.html#xref "xref") of the embedded image. This can be used
    as the [`xref`](glossary.html#xref "xref") argument for very significant performance
    boosts, if the image is inserted again.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example puts the same image on every page of a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method detects multiple insertions of the same image (like in the above
    example) and will store its data only on the first execution. This is even true
    (although less performant), if using the default `xref=0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method cannot detect if the same image had already been part of the file
    before opening it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use this method to provide a background or foreground image for the
    page, like a copyright or a watermark. Please remember, that watermarks require
    a transparent image if put in foreground …
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image may be inserted uncompressed, e.g. if a [Pixmap](pixmap.html#pixmap)
    is used or if the image has an alpha channel. Therefore, consider using `deflate=True`
    when saving the file. In addition, there are ways to control the image size –
    even if transparency comes into play. Have a look at [How to Add Images to a PDF
    Page](recipes-images.html#recipesimages-o).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image is stored in the PDF at its original quality level. This may be much
    better than what you need for your display. Consider **decreasing the image size**
    before insertion – e.g. by using the pixmap option and then shrinking it or scaling
    it down (see [Pixmap](pixmap.html#pixmap) chapter). The PIL method `Image.thumbnail()`
    can also be used for that purpose. The file size savings can be very significant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another efficient way to display the same image on multiple pages is another
    method: [`show_pdf_page()`](#Page.show_pdf_page "Page.show_pdf_page"). Consult
    [`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf "Document.convert_to_pdf")
    for how to obtain intermediary PDFs usable for that method.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.14.1:
    By default, the image keeps its aspect ratio.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.14.11: Added args `keep_proportion`, `rotate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.14.13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image is now always placed **centered** in the rectangle, i.e. the centers
    of image and rectangle are equal.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [`stream`](glossary.html#stream "stream") as `io.BytesIO`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.17.6: Insertion rectangle no longer needs to have a non-empty
    intersection with the page’s [`Page.cropbox`](#Page.cropbox "Page.cropbox") [[5]](#f5).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.1: Added `mask` arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.3: Added `oc` arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow providing the image as the xref of an existing one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`xref`](glossary.html#xref "xref") arg.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return [`xref`](glossary.html#xref "xref") of stored image.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.3: deprecate and ignore [`alpha`](pixmap.html#Pixmap.alpha
    "Pixmap.alpha") arg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Replace the image at xref with another one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** – the filename of the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixmap** – the [Pixmap](pixmap.html#pixmap) of the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** – the memory area containing the new image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments `filename`, [Pixmap](pixmap.html), [`stream`](glossary.html#stream
    "stream") have the same meaning as in [`Page.insert_image()`](#Page.insert_image
    "Page.insert_image"), especially exactly one of these must be provided.
  prefs: []
  type: TYPE_NORMAL
- en: This is a **global replacement:** the new image will also be shown wherever
    the old one has been displayed throughout the file.
  prefs: []
  type: TYPE_NORMAL
- en: This method mainly exists for technical purposes. Typical uses include replacing
    large images by smaller versions, like a lower resolution, graylevel instead of
    colored, etc., or changing transparency.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the image at xref. This is slightly misleading: actually the image is
    being replaced with a small transparent [Pixmap](pixmap.html#pixmap) using above
    [`Page.replace_image()`](#Page.replace_image "Page.replace_image"). The visible
    effect however is equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a **global replacement:** the image will disappear wherever the old
    one has been displayed throughout the file.
  prefs: []
  type: TYPE_NORMAL
- en: If you inspect / extract a page’s images by methods like [`Page.get_images()`](#Page.get_images
    "Page.get_images"), [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info")
    or [`Page.get_text()`](#Page.get_text "Page.get_text"), the replacing “dummy”
    image will be detected like so `(45, 47, 1, 1, 8, 'DeviceGray', '', 'Im1', 'FlateDecode')`
    and also seem to “cover” the same boundary box on the page.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieves the content of a page in a variety of formats. This is a wrapper
    for multiple [TextPage](textpage.html#textpage) methods by choosing the output
    option `opt` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: “text” – [`TextPage.extractTEXT()`](textpage.html#TextPage.extractTEXT "TextPage.extractTEXT"),
    default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “blocks” – [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “words” – [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS "TextPage.extractWORDS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “html” – [`TextPage.extractHTML()`](textpage.html#TextPage.extractHTML "TextPage.extractHTML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “xhtml” – [`TextPage.extractXHTML()`](textpage.html#TextPage.extractXHTML "TextPage.extractXHTML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “xml” – [`TextPage.extractXML()`](textpage.html#TextPage.extractXML "TextPage.extractXML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “dict” – [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “json” – [`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON "TextPage.extractJSON")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “rawdict” – [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “rawjson” – [`TextPage.extractRAWJSON()`](textpage.html#TextPage.extractRAWJSON
    "TextPage.extractRAWJSON")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opt** (*str*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string indicating the requested format, one of the above. A mixture of upper
    and lower case is supported.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Values “words” and “blocks” are also accepted (changed in v1.16.3).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – restrict extracted text to this rectangle. If None,
    the full page is taken. Has **no effect** for options “html”, “xhtml” and “xml”.
    (New in v1.17.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits to control whether to include images or
    how text should be handled with respect to white spaces and `ligatures`. See [Text
    Extraction Flags](vars.html#textpreserve) for available indicators and [Text Extraction
    Flags Defaults](app1.html#text-extraction-flags) for default settings. (New in
    v1.16.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – use a previously created [TextPage](textpage.html#textpage).
    This reduces execution time **very significantly:** by more than 50% and up to
    95%, depending on the extraction option. If specified, the ‘flags’ and ‘clip’
    arguments are ignored, because they are textpage-only properties. If omitted,
    a new, temporary textpage will be created. (New in v1.19.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sort** (*bool*) – sort the output by vertical, then horizontal coordinates.
    In many cases, this should suffice to generate a “natural” reading order. Has
    no effect on (X)HTML and XML. Output option **“words”** sorts by `(y1, x0)` of
    the words’ bboxes. Similar is true for “blocks”, “dict”, “json”, “rawdict”, “rawjson”:
    they all are sorted by `(y1, x0)` of the resp. block bbox. If specified for “text”,
    then internally “blocks” is used. (New in v1.19.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delimiters** (*str*) – use these characters as *additional* word separators
    with the “words” output option (ignored otherwise). By default, all white spaces
    (including non-breaking space `0xA0`) indicate start and end of a word. Now you
    can specify more characters causing this. For instance, the default will return
    `"john.doe@outlook.com"` as **one** word. If you specify `delimiters="@."` then
    the **four** words `"john"`, `"doe"`, `"outlook"`, `"com"` will be returned. Other
    possible uses include ignoring punctuation characters `delimiters=string.punctuation`.
    The “word” strings will not contain any delimiting character. (New in v1.23.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*str, list, dict*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The page’s content as a string, a list or a dictionary. Refer to the corresponding
    [TextPage](textpage.html#textpage) method for details.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use this method as a **document conversion tool** from [any supported
    document type](how-to-open-a-file.html#supported-file-types) to one of TEXT, HTML,
    XHTML or XML documents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The inclusion of text via the *clip* parameter is decided on a by-character
    level: a character becomes part of the output, if its bbox is contained in *clip*
    (changed in v1.18.2). This **deviates** from the algorithm used in redaction annotations:
    a character will be **removed if its bbox intersects** any redaction annotation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.0:
    added [TextPage](textpage.html) parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: added `sort` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.6: added new constants for defining default flags per method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.23.5: added `delimiters` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the text contained in a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect-like*) – rect-like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – a [TextPage](textpage.html#textpage) to use. If omitted, a new,
    temporary textpage will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a string with interspersed linebreaks where necessary. It is based on dedicated
    code (changed in v1.19.0). A typical use is checking the result of [`Page.search_for()`](#Page.search_for
    "Page.search_for"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.7
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: add [TextPage](textpage.html) parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Create a [TextPage](textpage.html#textpage) for the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits controlling the content available for subsequent
    text extractions and searches – see the parameter of [`Page.get_text()`](#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect-like*) – restrict extracted text to this area. (New in v1.17.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[TextPage](textpage.html#textpage)'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.5
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.17.7: introduced `clip` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '**Optical Character Recognition** (**OCR**) technology can be used to extract
    text data for documents where text is in a raster image format throughout the
    page. Use this method to **OCR** a page for text extraction.'
  prefs: []
  type: TYPE_NORMAL
- en: This method returns a [TextPage](textpage.html#textpage) for the page that includes
    OCRed text. MuPDF will invoke Tesseract-OCR if this method is used. Otherwise
    this is a normal [TextPage](textpage.html#textpage) object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flags** (*int*) – indicator bits controlling the content available for subsequent
    test extractions and searches – see the parameter of [`Page.get_text()`](#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**language** (*str*) – the expected language(s). Use “+”-separated values if
    multiple languages are expected, “eng+spa” for English and Spanish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – the desired resolution in dots per inch. Influences recognition
    quality (and execution time).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full** (*bool*) – whether to OCR the full page, or just the displayed images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tessdata** (*str*) – The name of Tesseract’s language support folder `tessdata`.
    If omitted, this information must be present as environment variable [`TESSDATA_PREFIX`](functions.html#TESSDATA_PREFIX
    "TESSDATA_PREFIX"). Can be determined by function [`get_tessdata()`](functions.html#get_tessdata
    "get_tessdata").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method does **not** support a clip parameter – OCR will always happen for
    the complete page rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [TextPage](textpage.html#textpage). Execution may be significantly longer
    than [`Page.get_textpage()`](#Page.get_textpage "Page.get_textpage").
  prefs: []
  type: TYPE_NORMAL
- en: For a full page OCR, **all text** will have the font “GlyphlessFont” from Tesseract.
    In case of partial OCR, normal text will keep its properties, and only text coming
    from images will have the GlyphlessFont.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**OCRed text is only available** to PyMuPDF’s text extractions and searches
    if their [TextPage](textpage.html) parameter specifies the output of this method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[This](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/jupyter-notebooks/partial-ocr.ipynb)
    Jupyter notebook walks through an example for using OCR textpages.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v.1.19.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: support full and partial OCRing a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Return the vector graphics of the page. These are instructions which draw lines,
    rectangles, quadruples or curves, including properties like colors, transparency,
    line width and dashing, etc. Alternative terms are “line art” and “drawings”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a list of dictionaries. Each dictionary item contains one or more single draw
    commands belonging together: they have the same properties (colors, dashing, etc.).
    This is called a **“path”** in PDF, so we adopted that name here, but the method
    **works for all document types**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The path dictionary for fill, stroke and fill-stroke paths has been designed
    to be compatible with class [Shape](shape.html#shape). There are the following
    keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| closePath | Same as the parameter in [Shape](shape.html#shape). |'
  prefs: []
  type: TYPE_TB
- en: '| color | Stroke color (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| dashes | Dashed line specification (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| even_odd | Fill colors of area overlaps – same as the parameter in [Shape](shape.html#shape).
    |'
  prefs: []
  type: TYPE_TB
- en: '| fill | Fill color (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: '| items | List of draw commands: lines, rectangles, quads or curves. |'
  prefs: []
  type: TYPE_TB
- en: '| lineCap | Number 3-tuple, use its max value on output with [Shape](shape.html#shape).
    |'
  prefs: []
  type: TYPE_TB
- en: '| lineJoin | Same as the parameter in [Shape](shape.html#shape). |'
  prefs: []
  type: TYPE_TB
- en: '| fill_opacity | fill color transparency (see [Shape](shape.html#shape)). (New
    in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| stroke_opacity | stroke color transparency (see [Shape](shape.html#shape)).
    (New in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| rect | Page area covered by this path. Information only. |'
  prefs: []
  type: TYPE_TB
- en: '| layer | name of applicable Optional Content Group. (New in v1.22.0) |'
  prefs: []
  type: TYPE_TB
- en: '| level | the hierarchy level if `extended=True`. (New in v1.22.0) |'
  prefs: []
  type: TYPE_TB
- en: '| seqno | command number when building page appearance. (New in v1.19.0) |'
  prefs: []
  type: TYPE_TB
- en: '| type | type of this path. (New in v1.18.17) |'
  prefs: []
  type: TYPE_TB
- en: '| width | Stroke line width. (see [Shape](shape.html#shape)). |'
  prefs: []
  type: TYPE_TB
- en: Key `"opacity"` has been replaced by the new keys `"fill_opacity"` and `"stroke_opacity"`.
    This is now compatible with the corresponding parameters of [`Shape.finish()`](shape.html#Shape.finish
    "Shape.finish"). (Changed in v1.18.17)
  prefs: []
  type: TYPE_NORMAL
- en: 'For paths other than groups or clips, key `"type"` takes one of the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**“f”** – this is a *fill-only* path. Only key-values relevant for this operation
    have a meaning, not applicable ones are present with a value of *None*: `"color"`,
    `"lineCap"`, `"lineJoin"`, `"width"`, `"closePath"`, `"dashes"` and should be
    ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“s”** – this is a *stroke-only* path. Similar to previous, key `"fill"` is
    present with value *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“fs”** – this is a path performing combined *fill* and *stroke* operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each item in `path["items"]` is one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`("l", p1, p2)` - a line from p1 to p2 ([Point](point.html#point) objects).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("c", p1, p2, p3, p4)` - cubic Bézier curve **from p1 to p4** (p2 and p3 are
    the control points). All objects are of type [Point](point.html#point).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("re", rect, orientation)` - a [Rect](rect.html#rect). Multiple rectangles
    within the same path are now detected (changed in v1.18.17). Integer `orientation`
    is 1 resp. -1 indicating whether the enclosed area is rotated left (1 = anti-clockwise),
    or resp. right [[7]](#f7) (changed in v1.19.2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("qu", quad)` - a [Quad](quad.html#quad). 3 or 4 consecutive lines are detected
    to actually represent a [Quad](quad.html#quad) (changed in v1.19.2:). (New in
    v1.18.17)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using class [Shape](shape.html#shape), you should be able to recreate the original
    drawings on a separate (PDF) page with high fidelity under normal, not too sophisticated
    circumstances. Please see the following comments on restrictions. A coding draft
    can be found in section “Extractings Drawings” of chapter [FAQ](faq.html#faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifying `extended=True` significantly alters the output. Most importantly,
    new dictionary types are present: “clip” and “group”. All paths will now be organized
    in a hierarchic structure which is encoded by the new integer key “level”, the
    hierarchy level. Each group or clip establishes a new hierarchy, which applies
    to all subsequent paths having a *larger* level value. (New in v1.22.0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any path with a smaller level value than its predecessor will end the scope
    of (at least) the preceeding hierarchy level. A “clip” path with the same level
    as the preceding clip will end the scope of that clip. Same is true for groups.
    This is best explained by an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: The clip in line 0 applies to line including line 7\. Group in line 2 applies
    to lines 3 to 5, clip in line 3 only applies to line 4.
  prefs: []
  type: TYPE_NORMAL
- en: “stroke” in line 4 is under control of “group” in line 2 and “clip” in line
    3 (which in turn is a subset of line 0 clip).
  prefs: []
  type: TYPE_NORMAL
- en: '**“clip”** dictionary. Its values (most importantly “scissor”) remain valid
    / apply as long as following dictionaries have a **larger “level”** value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| closePath | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| even_odd | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| items | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| rect | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| layer | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| level | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| scissor | the clip rectangle |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| type | “clip” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: “group” dictionary. Its values remain valid (apply) as long as following dictionaries
    have a **larger “level”** value. Any dictionary with an equal or lower level end
    this group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Key | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| rect | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| layer | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| level | Same as in “stroke” or “fill” dictionaries |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| isolated | (bool) Whether this group is isolated |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| knockout | (bool) Whether this is a “Knockout Group” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| blendmode | Name of the BlendMode, default is “Normal” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| opacity | Float value in range [0, 1]. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| type | “group” |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method is based on the output of [`Page.get_cdrawings()`](#Page.get_cdrawings
    "Page.get_cdrawings") – which is much faster, but requires somewhat more attention
    processing its output.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.0
  prefs: []
  type: TYPE_NORMAL
- en: Changed in v1.18.17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: add “seqno” key, remove “clippings” key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: “color” / “fill” keys now always are either are RGB tuples
    or `None`. This resolves issues caused by exotic colorspaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.2: add an indicator for the *“orientation”* of the area covered
    by an “re” item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add new key `"layer"` which contains the name of the Optional
    Content Group of the path (or `None`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add parameter `extended` to also return clipping and group
    paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the vector graphics on the page. Apart from following technical differences,
    functionally equivalent to [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings"),
    but much faster:'
  prefs: []
  type: TYPE_NORMAL
- en: Every path type only contains the relevant keys, e.g. a stroke path has no `"fill"`
    color key. See comment in method [`Page.get_drawings()`](#Page.get_drawings "Page.get_drawings").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coordinates are given as [`point_like`](glossary.html#point_like "point_like"),
    [`rect_like`](glossary.html#rect_like "rect_like") and [`quad_like`](glossary.html#quad_like
    "quad_like") **tuples** – not as [Point](point.html#point), [Rect](rect.html#rect),
    [Quad](quad.html#quad) objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If performance is a concern, consider using this method: Compared to versions
    earlier than 1.18.17, you should see much shorter response times. We have seen
    pages that required 2 seconds then, now only need 200 ms with this method.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.17
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: removed “clippings” key, added “seqno” key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: always generate RGB color tuples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: added new key `"layer"` which contains the name of the
    Optional Content Group of the path (or `None`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: added parameter `extended` to also return clipping paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of fonts referenced by the page. Wrapper for [`Document.get_page_fonts()`](document.html#Document.get_page_fonts
    "Document.get_page_fonts").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of images referenced by the page. Wrapper for [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: 'Return a list of meta information dictionaries for all images shown on the
    page. This works for all document types. Technically, this is a subset of the
    dictionary output of [`Page.get_text()`](#Page.get_text "Page.get_text"): the
    image binary content and any text on the page are ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**hashes** (*bool*) – Compute the MD5 hashcode for each encountered image,
    which allows identifying image duplicates. This adds the key `"digest"` to the
    output, whose value is a 16 byte `bytes` object. (New in v1.18.13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xrefs** (*bool*) – **PDF only.** Try to find the [`xref`](glossary.html#xref
    "xref") for each image. Implies `hashes=True`. Adds the `"xref"` key to the dictionary.
    If not found, the value is 0, which means, the image is either “inline” or otherwise
    undetectable. Please note that this option has an extended response time, because
    the MD5 hashcode will be computed at least two times for each image with an xref.
    (New in v1.18.13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list[dict]
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries. This includes information for **exactly those** images,
    that are shown on the page – including *“inline images”*. In contrast to images
    included in [`Page.get_text()`](#Page.get_text "Page.get_text"), image **binary
    content** is not loaded, which drastically reduces memory usage. The dictionary
    layout is similar to that of image blocks in `page.get_text("dict")`.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| number | block number *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| bbox | image bbox on page, [`rect_like`](glossary.html#rect_like "rect_like")
    |'
  prefs: []
  type: TYPE_TB
- en: '| width | original image width *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| height | original image height *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| cs-name | colorspace name *(str)* |'
  prefs: []
  type: TYPE_TB
- en: '| colorspace | colorspace.n *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| xres | resolution in x-direction *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| yres | resolution in y-direction *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| bpc | bits per component *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| size | storage occupied by image *(int)* |'
  prefs: []
  type: TYPE_TB
- en: '| digest | MD5 hashcode *(bytes)*, if *hashes* is true |'
  prefs: []
  type: TYPE_TB
- en: '| xref | image [`xref`](glossary.html#xref "xref") or 0, if *xrefs* is true
    |'
  prefs: []
  type: TYPE_TB
- en: '| transform | matrix transforming image rect to bbox, [`matrix_like`](glossary.html#matrix_like
    "matrix_like") |'
  prefs: []
  type: TYPE_TB
- en: Multiple occurrences of the same image are always reported. You can detect duplicates
    by comparing their [`digest`](pixmap.html#Pixmap.digest "Pixmap.digest") values.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.13: added image MD5 hashcode computation and [`xref`](glossary.html#xref
    "xref") search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of Form XObjects referenced by the page. Wrapper for
    [`Document.get_page_xobjects()`](document.html#Document.get_page_xobjects "Document.get_page_xobjects").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return boundary boxes and transformation matrices of an embedded
    image. This is an improved version of [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox") with the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no restriction on **how** the image is invoked (by the page or one
    of its Form XObjects). The result is always complete and correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result is a list of [Rect](rect.html#rect) or ([Rect](rect.html#rect), [Matrix](matrix.html#matrix))
    objects – depending on *transform*. Each list item represents one location of
    the image on the page. Multiple occurrences might not be detectable by [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method invokes [`Page.get_image_info()`](#Page.get_image_info "Page.get_image_info")
    with `xrefs=True` and therefore has a noticeably longer response time than [`Page.get_image_bbox()`](#Page.get_image_bbox
    "Page.get_image_bbox").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*list**,**str**,**int*) – an item of the list [`Page.get_images()`](#Page.get_images
    "Page.get_images"), or the reference **name** entry of such an item (item[7]),
    or the image [`xref`](glossary.html#xref "xref").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transform** (*bool*) – also return the matrix used to transform the image
    rectangle to the bbox on the page. If true, then tuples `(bbox, matrix)` are returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary boxes and respective transformation matrices for each image occurrence
    on the page. If the item is not on the page, an empty list `[]` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> New in v1.18.13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return boundary box and transformation matrix of an embedded image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*list**,**str*) – an item of the list [`Page.get_images()`](#Page.get_images
    "Page.get_images") with *full=True* specified, or the reference **name** entry
    of such an item, which is item[-3] (or item[7] respectively).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transform** (*bool*) – return the matrix used to transform the image rectangle
    to the bbox on the page (new in v1.18.11). Default is just the bbox. If true,
    then a tuple `(bbox, matrix)` is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect) or ([Rect](rect.html#rect), [Matrix](matrix.html#matrix))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the boundary box of the image – optionally also its transformation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   (Changed in v1.16.7):
    If the page in fact does not display this image, an infinite rectangle is returned
    now. In previous versions, an exception was raised. Formally invalid parameters
    still raise exceptions.'
  prefs: []
  type: TYPE_NORMAL
- en: '(Changed in v1.17.0): Only images referenced directly by the page are considered.
    This means that images occurring in embedded PDF pages are ignored and an exception
    is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.5): Removed the restriction introduced in v1.17.0: any item
    of the page’s image list may be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.11): Partially re-instated a restriction: only those images
    are considered, that are either directly referenced by the page or by a Form XObject
    directly referenced by the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Changed in v1.18.11): Optionally also return the transformation matrix together
    with the bbox as the tuple `(bbox, transform)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that [`Page.get_images()`](#Page.get_images "Page.get_images") may
    contain “dead” entries i.e. images, which the page **does not display**. This
    is no error, but intended by the PDF creator. No exception will be raised in this
    case, but an infinite rectangle is returned. You can avoid this from happening
    by executing [`Page.clean_contents()`](functions.html#Page.clean_contents "Page.clean_contents")
    before this method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The image’s “transformation matrix” is defined as the matrix, for which the
    expression `bbox / transform == pymupdf.Rect(0, 0, 1, 1)` is true, lookup details
    here: [Image Transformation Matrix](app3.html#imagetransformation).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.18.11:
    return image transformation matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: Create an SVG image from the page. Only full page images are currently supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – a matrix, default is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_as_path** (*bool*) – – controls how text is represented. *True* outputs
    each character as a series of elementary draw commands, which leads to a more
    precise text display in browsers, but a **very much larger** output for text-oriented
    pages. Display quality for *False* relies on the presence of the referenced fonts
    on the current system. For missing fonts, the internet browser will fall back
    to some default – leading to unpleasant appearances. Choose *False* if you want
    to parse the text of the SVG. (New in v1.17.5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a UTF-8 encoded string that contains the image. Because SVG has XML syntax it
    can be saved in a text file, the standard extension is `.svg`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In case of a PDF, you can circumvent the “full page image only” restriction
    by modifying the page’s CropBox before using the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: Create a pixmap from the page. This is probably the most often used method to
    create a [Pixmap](pixmap.html#pixmap).
  prefs: []
  type: TYPE_NORMAL
- en: All parameters are *keyword-only.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – default is [Identity](identity.html#identity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dpi** (*int*) – desired resolution in x and y direction. If not `None`, the
    `"matrix"` parameter is ignored. (New in v1.19.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colorspace** (str or [Colorspace](colorspace.html#colorspace)) – The desired
    colorspace, one of “GRAY”, “RGB” or “CMYK” (case insensitive). Or specify a [Colorspace](colorspace.html#colorspace),
    ie. one of the predefined ones: [`csGRAY`](vars.html#csGRAY "csGRAY"), [`csRGB`](vars.html#csRGB
    "csRGB") or [`csCMYK`](vars.html#csCMYK "csCMYK").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*irect_like*) – restrict rendering to the intersection of this area
    with the page’s rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**alpha** (*bool*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'whether to add an alpha channel. Always accept the default *False* if you do
    not really need transparency. This will save a lot of memory (25% in case of RGB
    … and pixmaps are typically **large**!), and also processing time. Also note an
    **important difference** in how the image will be rendered: with *True* the pixmap’s
    samples area will be pre-cleared with *0x00*. This results in **transparent**
    areas where the page is empty. With *False* the pixmap’s samples will be pre-cleared
    with *0xff*. This results in **white** where the page has nothing to show.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> Changed in v1.14.17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default alpha value is now *False*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Generated with *alpha=True*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-alpha-1.png](../Images/6ae43b36c653da1ab3dd60b092c78b1f.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Generated with *alpha=False*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-alpha-0.png](../Images/564ef406b4bef3b8920dcfb41f6b0ec5.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**annots** (*bool*) – *(new in version 1.16.0)* whether to also render annotations
    or to suppress them. You can create pixmaps for annotations separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pixmap of the page. For fine-controlling the generated image, the by far most
    important parameter is **matrix**. E.g. you can increase or decrease the image
    resolution by using **Matrix(xzoom, yzoom)**. If zoom > 1, you will get a higher
    resolution: zoom=2 will double the number of pixels in that direction and thus
    generate a 2 times larger image. Non-positive values will flip horizontally, resp.
    vertically. Similarly, matrices also let you rotate or shear, and you can combine
    effects via e.g. matrix multiplication. See the [Matrix](matrix.html#matrix) section
    to learn more.  Note'
  prefs: []
  type: TYPE_NORMAL
- en: The pixmap will have *“premultiplied”* pixels if `alpha=True`. To learn about
    some background, e.g. look for “Premultiplied alpha” [here](https://en.wikipedia.org/wiki/Glossary_of_computer_graphics#P).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The method will respect any page rotation and will not exceed the intersection
    of `clip` and [`Page.cropbox`](#Page.cropbox "Page.cropbox"). If you need the
    page’s mediabox (and if this is a different rectangle), you can use a snippet
    like the following to achieve this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.19.2:
    added support of parameter dpi.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return a list of the names of annotations, widgets and links. Technically,
    these are the */NM* values of every PDF object found in the page’s */Annots* array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return a list of the :data`xref` numbers of annotations, widgets
    and links – technically of all entries found in the page’s */Annots* array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of items *(xref, type)* where type is the annotation type. Use the type
    to tell apart links, fields and annotations, see [Annotation Types](vars.html#annotationtypes).
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return the annotation identified by *ident*. This may be its unique
    name (PDF `/NM` key), or its [`xref`](glossary.html#xref "xref").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ident** (*str**,**int*) – the annotation name or xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the annotation or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Methods [`Page.annot_names()`](#Page.annot_names "Page.annot_names"), [`Page.annot_xrefs()`](#Page.annot_xrefs
    "Page.annot_xrefs") provide lists of names or xrefs, respectively, from where
    an item may be picked and loaded via this method.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.17.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: return the field identified by *xref*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the field’s xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the field or *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the analogous method [`Page.load_annot()`](#Page.load_annot
    "Page.load_annot") – except that here only the xref is supported as identifier.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.19.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Return the first link on a page. Synonym of property [`first_link`](#Page.first_link
    "Page.first_link").
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](link.html#link)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: first link on the page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set the rotation of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – An integer specifying the required rotation in degrees.
    Must be an integer multiple of 90\. Values will be converted to one of 0, 90,
    180, 270.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set page rotation to 0 while maintaining appearance and page content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The inverted matrix used to achieve this change. If the page was not rotated
    (rotation 0), [Identity](identity.html#identity) is returned. The method automatically
    recomputes the rectangles of any annotations, links and widgets present on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: This method may come in handy when e.g. used with [`Page.show_pdf_page()`](#Page.show_pdf_page
    "Page.show_pdf_page").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Display a page of another PDF as a **vector image** (otherwise similar
    to [`Page.insert_image()`](#Page.insert_image "Page.insert_image")). This is a
    multi-purpose method. For example, you can use it to'
  prefs: []
  type: TYPE_NORMAL
- en: create “n-up” versions of existing PDF files, combining several input pages
    into **one output page** (see example [combine.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/combine-pages/combine.py)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create “posterized” PDF files, i.e. every input page is split up in parts which
    each create a separate output page (see [posterize.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/posterize-document/posterize.py)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: include PDF-based vector images like company logos, watermarks, etc., see [svg-logo.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/svg-logo.py),
    which puts an SVG-based logo on each page (requires additional packages to deal
    with SVG-to-PDF conversions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to place the image on current page. Must be
    finite and its intersection with the page must not be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**docsrc** ([Document](document.html#document)) – source PDF document containing
    the page. Must be a different document object, but may be the same file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number (0-based, in `-∞ < pno < docsrc.page_count`)
    to be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_proportion** (*bool*) – whether to maintain the width-height-ratio (default).
    If false, all 4 corners are always positioned on the border of the target rectangle
    – whatever the rotation value. In general, this will deliver distorted and /or
    non-rectangular images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – put image in foreground (default) or background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – ([`xref`](glossary.html#xref "xref")) make visibility dependent
    on this [`OCG`](glossary.html#OCG "OCG") / [`OCMD`](glossary.html#OCMD "OCMD")
    (which must be defined in the target PDF) [[9]](#f9). (New in v1.18.3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*float*) – show the source rectangle rotated by some angle. Any
    angle is supported (changed in v1.14.11). (New in v1.14.10)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – choose which part of the source page to show. Default
    is the full page, else must be finite and its intersection with the source page
    must not be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to method [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf"), this method does not copy annotations, widgets or links,
    so these are not included in the target [[6]](#f6). But all its **other resources
    (text, images, fonts, etc.)** will be imported into the current PDF. They will
    therefore appear in text extractions and in [`get_fonts()`](#Page.get_fonts "Page.get_fonts")
    and [`get_images()`](#Page.get_images "Page.get_images") lists – even if they
    are not contained in the visible area given by *clip*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Show the same source page, rotated by 90 and by -90 degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[![_images/img-showpdfpage.jpg](../Images/091955c9c70806604901ed00530bea58.png)](_images/img-showpdfpage.jpg)<details><summary>Show/hide
    history</summary></details> *   Changed in v1.14.11: Parameter *reuse_xref* has
    been deprecated. Position the source rectangle centered in target rectangle. Any
    rotation angle is now supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.3: New parameter `oc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Create a new [Shape](shape.html#shape) object for the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Shape](shape.html#shape)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [Shape](shape.html#shape) to use for compound drawings. See description
    there.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: Search for *needle* on a page. Wrapper for [`TextPage.search()`](textpage.html#TextPage.search
    "TextPage.search").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**needle** (*str*) – Text to search for. May contain spaces. Upper / lower
    case is ignored, but only works for ASCII characters: For example, “COMPÉTENCES”
    will not be found if needle is “compétences” – “compÉtences” however will. Similar
    is true for German umlauts and the like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip** (*rect_like*) – only search within this area. (New in v1.18.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quads** (*bool*) – Return object type [Quad](quad.html#quad) instead of [Rect](rect.html#rect).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flags** (*int*) – Control the data extracted by the underlying [TextPage](textpage.html#textpage).
    By default, ligatures and white spaces are kept, and hyphenation [[8]](#f8) is
    detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**textpage** – use a previously created [TextPage](textpage.html#textpage).
    This reduces execution time **significantly.** If specified, the ‘flags’ and ‘clip’
    arguments are ignored. If omitted, a temporary textpage will be created. (New
    in v1.19.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of [Rect](rect.html#rect) or [Quad](quad.html#quad) objects, each of
    which – **normally!** – surrounds one occurrence of *needle*. **However:** if
    parts of *needle* occur on more than one line, then a separate item is generated
    for each these parts. So, if `needle = "search string"`, two rectangles may be
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> Changes in v1.18.2:'
  prefs: []
  type: TYPE_NORMAL
- en: There no longer is a limit on the list length (removal of the `hit_max` parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a word is **hyphenated** at a line break, it will still be found. E.g. the
    needle “method” will be found even if hyphenated as “meth-od” at a line break,
    and two rectangles will be returned: one surrounding “meth” (without the hyphen)
    and another one surrounding “od”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The method supports multi-line text marker annotations: you can use the full
    returned list as **one single** parameter for creating the annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a tricky aspect: the search logic regards **contiguous multiple occurrences**
    of *needle* as one: assuming *needle* is “abc”, and the page contains “abc” and
    “abcabc”, then only **two** rectangles will be returned, one for “abc”, and a
    second one for “abcabc”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can always use [`Page.get_textbox()`](#Page.get_textbox "Page.get_textbox")
    to check what text actually is being surrounded by each rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A feature repeatedly asked for is supporting **regular expressions** when specifying
    the `"needle"` string: **There is no way to do this.** If you need something in
    that direction, first extract text in the desired format and then subselect the
    result by matching with some regex pattern. Here is an example for matching words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: The `matches` list will contain the words matching the given pattern. In the
    same way you can select `span["text"]` from the output of `page.get_text("dict")`.
  prefs: []
  type: TYPE_NORMAL
- en: '<details><summary>Show/hide history</summary></details> *   Changed in v1.18.2:
    added `clip` parameter. Remove `hit_max` parameter. Add default “dehyphenate”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: added [TextPage](textpage.html) parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Change the physical page dimension by setting [`mediabox`](#Page.mediabox
    "Page.mediabox") in the page’s object definition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect-like*) – the new [`mediabox`](#Page.mediabox "Page.mediabox")
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method also removes the page’s other (optional) rectangles ([`cropbox`](#Page.cropbox
    "Page.cropbox"), ArtBox, TrimBox and Bleedbox) to prevent inconsistent situations.
    This will cause those to assume their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: For non-empty pages this may have undesired effects, because the location of
    all content depends on this value and will therefore change position or even disappear.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.16.13
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.19.4: remove all other rectangle definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: change the visible part of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect_like*) – the new visible area of the page. Note that this **must**
    be specified in **unrotated coordinates**, not empty, nor infinite and be completely
    contained in the [`Page.mediabox`](#Page.mediabox "Page.mediabox").'
  prefs: []
  type: TYPE_NORMAL
- en: 'After execution **(if the page is not rotated)**, [`Page.rect`](#Page.rect
    "Page.rect") will equal this rectangle, but be shifted to the top-left position
    (0, 0) if necessary. Example session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Set the resp. rectangle in the page object. For the meaning of these
    objects see [Adobe PDF References](app3.html#adobemanual), page 77\. Parameter
    and restrictions are the same as for [`Page.set_cropbox()`](#Page.set_cropbox
    "Page.set_cropbox").'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.19.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: 'Contains the rotation of the page in degrees (always 0 for non-PDF types).
    This is a copy of the value in the PDF file. The PDF documentation says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“The number of degrees by which the page should be rotated clockwise when
    displayed or printed. The value must be a multiple of 90\. Default value: 0.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In PyMuPDF, we make sure that this attribute is always one of 0, 90, 180 or
    270.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Contains the top-left point of the page’s `/CropBox` for a PDF, otherwise *Point(0,
    0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: The page’s `/CropBox` for a PDF. Always the **unrotated** page rectangle is
    returned. For a non-PDF this will always equal the page rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In PDF, the relationship between `/MediaBox`, `/CropBox` and page rectangle
    may sometimes be confusing, please do lookup the glossary for [`MediaBox`](glossary.html#MediaBox
    "MediaBox").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: The page’s `/ArtBox`, `/BleedBox`, `/TrimBox`, respectively. If not provided,
    defaulting to [`Page.cropbox`](#Page.cropbox "Page.cropbox").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: Contains the width and height of the page’s [`Page.mediabox`](#Page.mediabox
    "Page.mediabox") for a PDF, otherwise the bottom-right coordinates of [`Page.rect`](#Page.rect
    "Page.rect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: The page’s [`mediabox`](#Page.mediabox "Page.mediabox") for a PDF, otherwise
    [`Page.rect`](#Page.rect "Page.rect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For most PDF documents and for **all other document types**, `page.rect == page.cropbox
    == page.mediabox` is true. However, for some PDFs the visible page is a true subset
    of [`mediabox`](#Page.mediabox "Page.mediabox"). Also, if the page is rotated,
    its [`Page.rect`](#Page.rect "Page.rect") may not equal [`Page.cropbox`](#Page.cropbox
    "Page.cropbox"). In these cases the above attributes help to correctly locate
    page elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: This matrix translates coordinates from the PDF space to the MuPDF space. For
    example, in PDF `/Rect [x0 y0 x1 y1]` the pair (x0, y0) specifies the **bottom-left**
    point of the rectangle – in contrast to MuPDF’s system, where (x0, y0) specify
    top-left. Multiplying the PDF coordinates with this matrix will deliver the (Py-)
    MuPDF rectangle version. Obviously, the inverse matrix will again yield the PDF
    rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: 'These matrices may be used for dealing with rotated PDF pages. When adding
    / inserting anything to a PDF page, the coordinates of the **unrotated** page
    are always used. These matrices help translating between the two states. Example:
    if a page is rotated by 90 degrees – what would then be the coordinates of the
    top-left Point(0, 0) of an A4 page?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Link](link.html#link) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](link.html#link)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Annot](annot.html#annot) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Annot](annot.html#annot)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Widget](widget.html#widget) of a page (or *None*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Widget](widget.html#widget)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: The page number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: The owning document object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Document](document.html#document)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: Contains the rectangle of the page. Same as result of [`Page.bound()`](#Page.bound
    "Page.bound").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: The page’s PDF [`xref`](glossary.html#xref "xref"). Zero if not a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Description of *get_links()* Entries'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each entry of the [`Page.get_links()`](#Page.get_links "Page.get_links") list
    is a dictionary with the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '*kind*: (required) an integer indicating the kind of link. This is one of *LINK_NONE*,
    *LINK_GOTO*, *LINK_GOTOR*, *LINK_LAUNCH*, or *LINK_URI*. For values and meaning
    of these names refer to [Link Destination Kinds](vars.html#linkdest-kinds).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*from*: (required) a [Rect](rect.html#rect) describing the “hot spot” location
    on the page’s visible representation (where the cursor changes to a hand image,
    usually).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*page*: a 0-based integer indicating the destination page. Required for *LINK_GOTO*
    and *LINK_GOTOR*, else ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*to*: either a *pymupdf.Point*, specifying the destination location on the
    provided page, default is *pymupdf.Point(0, 0)*, or a symbolic (indirect) name.
    If an indirect name is specified, *page = -1* is required and the name must be
    defined in the PDF in order for this to work. Required for *LINK_GOTO* and *LINK_GOTOR*,
    else ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*file*: a string specifying the destination file. Required for *LINK_GOTOR*
    and *LINK_LAUNCH*, else ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*uri*: a string specifying the destination internet resource. Required for
    *LINK_URI*, else ignored. You should make sure to start this string with an unambiguous
    substring, that classifies the subtype of the URL, like `"http://"`, `"https://"`,
    `"file://"`, `"ftp://"`, `"mailto:"`, etc. Otherwise your browser will try to
    interpret the text and come to unwanted / unexpected conclusions about the intended
    URL type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*xref*: an integer specifying the PDF [`xref`](glossary.html#xref "xref") of
    the link object. Do not change this entry in any way. Required for link deletion
    and update, otherwise ignored. For non-PDF documents, this entry contains *-1*.
    It is also *-1* for **all** entries in the *get_links()* list, if **any** of the
    links is not supported by MuPDF - see [Notes on Supporting Links](#notes-on-supporting-links).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Notes on Supporting Links'
  prefs: []
  type: TYPE_NORMAL
- en: MuPDF’s support for links has changed in **v1.10a**. These changes affect link
    types [`LINK_GOTO`](vars.html#LINK_GOTO "LINK_GOTO") and [`LINK_GOTOR`](vars.html#LINK_GOTOR
    "LINK_GOTOR").
  prefs: []
  type: TYPE_NORMAL
- en: Reading (pertains to method *get_links()* and the *first_link* property chain)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If MuPDF detects a link to another file, it will supply either a *LINK_GOTOR*
    or a *LINK_LAUNCH* link kind. In case of *LINK_GOTOR* destination details may
    either be given as page number (eventually including position information), or
    as an indirect destination.
  prefs: []
  type: TYPE_NORMAL
- en: If an indirect destination is given, then this is indicated by *page = -1*,
    and *link.dest.dest* will contain this name. The dictionaries in the *get_links()*
    list will contain this information as the *to* value.
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal links are always** of kind *LINK_GOTO*. If an internal link specifies
    an indirect destination, it **will always be resolved** and the resulting direct
    destination will be returned. Names are **never returned for internal links**,
    and undefined destinations will cause the link to be ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyMuPDF writes (updates, inserts) links by constructing and writing the appropriate
    PDF object **source**. This makes it possible to specify indirect destinations
    for *LINK_GOTOR* **and** *LINK_GOTO* link kinds (pre *PDF 1.2* file formats are
    **not supported**).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If a *LINK_GOTO* indirect destination specifies an undefined name, this link
    can later on not be found / read again with MuPDF / PyMuPDF. Other readers however
    **will** detect it, but flag it as erroneous.
  prefs: []
  type: TYPE_NORMAL
- en: Indirect *LINK_GOTOR* destinations can in general of course not be checked for
    validity and are therefore **always accepted**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example: How to insert a link pointing to another page in the same document**'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the rectangle on the current page, where the link should be placed.
    This may be the bbox of an image or some text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the target page number (“pno”, 0-based) and a [Point](point.html#point)
    on it, where the link should be directed to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a dictionary `d = {"kind": pymupdf.LINK_GOTO, "page": pno, "from": bbox,
    "to": point}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `page.insert_link(d)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reading (pertains to method *get_links()* and the *first_link* property chain)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If MuPDF detects a link to another file, it will supply either a *LINK_GOTOR*
    or a *LINK_LAUNCH* link kind. In case of *LINK_GOTOR* destination details may
    either be given as page number (eventually including position information), or
    as an indirect destination.
  prefs: []
  type: TYPE_NORMAL
- en: If an indirect destination is given, then this is indicated by *page = -1*,
    and *link.dest.dest* will contain this name. The dictionaries in the *get_links()*
    list will contain this information as the *to* value.
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal links are always** of kind *LINK_GOTO*. If an internal link specifies
    an indirect destination, it **will always be resolved** and the resulting direct
    destination will be returned. Names are **never returned for internal links**,
    and undefined destinations will cause the link to be ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyMuPDF writes (updates, inserts) links by constructing and writing the appropriate
    PDF object **source**. This makes it possible to specify indirect destinations
    for *LINK_GOTOR* **and** *LINK_GOTO* link kinds (pre *PDF 1.2* file formats are
    **not supported**).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If a *LINK_GOTO* indirect destination specifies an undefined name, this link
    can later on not be found / read again with MuPDF / PyMuPDF. Other readers however
    **will** detect it, but flag it as erroneous.
  prefs: []
  type: TYPE_NORMAL
- en: Indirect *LINK_GOTOR* destinations can in general of course not be checked for
    validity and are therefore **always accepted**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example: How to insert a link pointing to another page in the same document**'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the rectangle on the current page, where the link should be placed.
    This may be the bbox of an image or some text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the target page number (“pno”, 0-based) and a [Point](point.html#point)
    on it, where the link should be directed to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a dictionary `d = {"kind": pymupdf.LINK_GOTO, "page": pno, "from": bbox,
    "to": point}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `page.insert_link(d)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Homologous Methods of [Document](document.html#document) and [Page](#page)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is an overview of homologous methods on the [Document](document.html#document)
    and on the [Page](#page) level.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Document Level** | **Page Level** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_fonts(pno)* | [`Page.get_fonts()`](#Page.get_fonts "Page.get_fonts")
    |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_images(pno)* | [`Page.get_images()`](#Page.get_images
    "Page.get_images") |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_pixmap(pno, …)* | [`Page.get_pixmap()`](#Page.get_pixmap
    "Page.get_pixmap") |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.get_page_text(pno, …)* | [`Page.get_text()`](#Page.get_text "Page.get_text")
    |'
  prefs: []
  type: TYPE_TB
- en: '| *Document.search_page_for(pno, …)* | [`Page.search_for()`](#Page.search_for
    "Page.search_for") |'
  prefs: []
  type: TYPE_TB
- en: The page number “pno” is a 0-based integer `-∞ < pno < page_count`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Most document methods (left column) exist for convenience reasons, and are
    just wrappers for: *Document[pno].<page method>*. So they **load and discard the
    page** on each execution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the first two methods work differently. They only need a page’s object
    definition statement - the page itself will **not** be loaded. So e.g. [`Page.get_fonts()`](#Page.get_fonts
    "Page.get_fonts") is a wrapper the other way round and defined as follows: *page.get_fonts
    == page.parent.get_page_fonts(page.number)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
