["```py\nfunction sqlalchemy.sql.expression.delete(table: _DMLTableArgument) \u2192 Delete\n```", "```py\nfrom sqlalchemy import delete\n\nstmt = (\n    delete(user_table).\n    where(user_table.c.id == 5)\n)\n```", "```py\nfunction sqlalchemy.sql.expression.insert(table: _DMLTableArgument) \u2192 Insert\n```", "```py\nfrom sqlalchemy import insert\n\nstmt = (\n    insert(user_table).\n    values(name='username', fullname='Full Username')\n)\n```", "```py\nfunction sqlalchemy.sql.expression.update(table: _DMLTableArgument) \u2192 Update\n```", "```py\nfrom sqlalchemy import update\n\nstmt = (\n    update(user_table).\n    where(user_table.c.id == 5).\n    values(name='user #5')\n)\n```", "```py\nclass sqlalchemy.sql.expression.Delete\n```", "```py\nmethod where(*whereclause: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nclass sqlalchemy.sql.expression.Insert\n```", "```py\nmethod values(*args: _DMLColumnKeyMapping[Any] | Sequence[Any], **kwargs: Any) \u2192 Self\n```", "```py\n    users.insert().values(name=\"some name\")\n\n    users.update().where(users.c.id==5).values(name=\"some name\")\n    ```", "```py\n    users.insert().values({\"name\": \"some name\"})\n\n    users.update().values({\"name\": \"some new name\"})\n    ```", "```py\n    users.insert().values((5, \"some name\"))\n    ```", "```py\n    users.insert().values([\n                        {\"name\": \"some name\"},\n                        {\"name\": \"some other name\"},\n                        {\"name\": \"yet another name\"},\n                    ])\n    ```", "```py\n    INSERT INTO users (name) VALUES\n                    (:name_1),\n                    (:name_2),\n                    (:name_3)\n    ```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nmethod from_select(names: Sequence[_DMLColumnArgument], select: Selectable, include_defaults: bool = True) \u2192 Self\n```", "```py\nsel = select(table1.c.a, table1.c.b).where(table1.c.c > 5)\nins = table2.insert().from_select(['a', 'b'], sel)\n```", "```py\nmethod inline() \u2192 Self\n```", "```py\nattribute select: Select[Any] | None = None\n```", "```py\nclass sqlalchemy.sql.expression.Update\n```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nmethod where(*whereclause: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nmethod values(*args: _DMLColumnKeyMapping[Any] | Sequence[Any], **kwargs: Any) \u2192 Self\n```", "```py\n    users.insert().values(name=\"some name\")\n\n    users.update().where(users.c.id==5).values(name=\"some name\")\n    ```", "```py\n    users.insert().values({\"name\": \"some name\"})\n\n    users.update().values({\"name\": \"some new name\"})\n    ```", "```py\n    users.insert().values((5, \"some name\"))\n    ```", "```py\n    users.insert().values([\n                        {\"name\": \"some name\"},\n                        {\"name\": \"some other name\"},\n                        {\"name\": \"yet another name\"},\n                    ])\n    ```", "```py\n    INSERT INTO users (name) VALUES\n                    (:name_1),\n                    (:name_2),\n                    (:name_3)\n    ```", "```py\nmethod inline() \u2192 Self\n```", "```py\nmethod ordered_values(*args: Tuple[_DMLColumnArgument, Any]) \u2192 Self\n```", "```py\nstmt = table.update().ordered_values(\n    (\"name\", \"ed\"), (\"ident\", \"foo\")\n)\n```", "```py\nclass sqlalchemy.sql.expression.UpdateBase\n```", "```py\nattribute entity_description\n```", "```py\n>>> stmt = insert(user_table)\n>>> stmt.entity_description\n{\n \"name\": \"user_table\",\n \"table\": Table(\"user_table\", ...)\n}\n```", "```py\nattribute exported_columns\n```", "```py\nmethod params(*arg: Any, **kw: Any) \u2192 NoReturn\n```", "```py\nmethod return_defaults(*cols: _DMLColumnArgument, supplemental_cols: Iterable[_DMLColumnArgument] | None = None, sort_by_parameter_order: bool = False) \u2192 Self\n```", "```py\nstmt = table.insert().values(data='newdata').return_defaults()\n\nresult = connection.execute(stmt)\n\nserver_created_at = result.returned_defaults['created_at']\n```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nattribute returning_column_descriptions\n```", "```py\n>>> stmt = insert(user_table).returning(user_table.c.id, user_table.c.name)\n>>> stmt.entity_description\n[\n {\n \"name\": \"id\",\n \"type\": Integer,\n \"expr\": Column(\"id\", Integer(), table=<user>, ...)\n },\n {\n \"name\": \"name\",\n \"type\": String(),\n \"expr\": Column(\"name\", String(), table=<user>, ...)\n },\n]\n```", "```py\nmethod with_dialect_options(**opt: Any) \u2192 Self\n```", "```py\nupd = table.update().dialect_options(mysql_limit=10)\n```", "```py\nmethod with_hint(text: str, selectable: _DMLTableArgument | None = None, dialect_name: str = '*') \u2192 Self\n```", "```py\nmytable.insert().with_hint(\"WITH (PAGLOCK)\", dialect_name=\"mssql\")\n```", "```py\nclass sqlalchemy.sql.expression.ValuesBase\n```", "```py\nattribute select: Select[Any] | None = None\n```", "```py\nmethod values(*args: _DMLColumnKeyMapping[Any] | Sequence[Any], **kwargs: Any) \u2192 Self\n```", "```py\n    users.insert().values(name=\"some name\")\n\n    users.update().where(users.c.id==5).values(name=\"some name\")\n    ```", "```py\n    users.insert().values({\"name\": \"some name\"})\n\n    users.update().values({\"name\": \"some new name\"})\n    ```", "```py\n    users.insert().values((5, \"some name\"))\n    ```", "```py\n    users.insert().values([\n                        {\"name\": \"some name\"},\n                        {\"name\": \"some other name\"},\n                        {\"name\": \"yet another name\"},\n                    ])\n    ```", "```py\n    INSERT INTO users (name) VALUES\n                    (:name_1),\n                    (:name_2),\n                    (:name_3)\n    ```", "```py\nfunction sqlalchemy.sql.expression.delete(table: _DMLTableArgument) \u2192 Delete\n```", "```py\nfrom sqlalchemy import delete\n\nstmt = (\n    delete(user_table).\n    where(user_table.c.id == 5)\n)\n```", "```py\nfunction sqlalchemy.sql.expression.insert(table: _DMLTableArgument) \u2192 Insert\n```", "```py\nfrom sqlalchemy import insert\n\nstmt = (\n    insert(user_table).\n    values(name='username', fullname='Full Username')\n)\n```", "```py\nfunction sqlalchemy.sql.expression.update(table: _DMLTableArgument) \u2192 Update\n```", "```py\nfrom sqlalchemy import update\n\nstmt = (\n    update(user_table).\n    where(user_table.c.id == 5).\n    values(name='user #5')\n)\n```", "```py\nclass sqlalchemy.sql.expression.Delete\n```", "```py\nmethod where(*whereclause: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nclass sqlalchemy.sql.expression.Insert\n```", "```py\nmethod values(*args: _DMLColumnKeyMapping[Any] | Sequence[Any], **kwargs: Any) \u2192 Self\n```", "```py\n    users.insert().values(name=\"some name\")\n\n    users.update().where(users.c.id==5).values(name=\"some name\")\n    ```", "```py\n    users.insert().values({\"name\": \"some name\"})\n\n    users.update().values({\"name\": \"some new name\"})\n    ```", "```py\n    users.insert().values((5, \"some name\"))\n    ```", "```py\n    users.insert().values([\n                        {\"name\": \"some name\"},\n                        {\"name\": \"some other name\"},\n                        {\"name\": \"yet another name\"},\n                    ])\n    ```", "```py\n    INSERT INTO users (name) VALUES\n                    (:name_1),\n                    (:name_2),\n                    (:name_3)\n    ```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nmethod from_select(names: Sequence[_DMLColumnArgument], select: Selectable, include_defaults: bool = True) \u2192 Self\n```", "```py\nsel = select(table1.c.a, table1.c.b).where(table1.c.c > 5)\nins = table2.insert().from_select(['a', 'b'], sel)\n```", "```py\nmethod inline() \u2192 Self\n```", "```py\nattribute select: Select[Any] | None = None\n```", "```py\nclass sqlalchemy.sql.expression.Update\n```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nmethod where(*whereclause: _ColumnExpressionArgument[bool]) \u2192 Self\n```", "```py\nmethod values(*args: _DMLColumnKeyMapping[Any] | Sequence[Any], **kwargs: Any) \u2192 Self\n```", "```py\n    users.insert().values(name=\"some name\")\n\n    users.update().where(users.c.id==5).values(name=\"some name\")\n    ```", "```py\n    users.insert().values({\"name\": \"some name\"})\n\n    users.update().values({\"name\": \"some new name\"})\n    ```", "```py\n    users.insert().values((5, \"some name\"))\n    ```", "```py\n    users.insert().values([\n                        {\"name\": \"some name\"},\n                        {\"name\": \"some other name\"},\n                        {\"name\": \"yet another name\"},\n                    ])\n    ```", "```py\n    INSERT INTO users (name) VALUES\n                    (:name_1),\n                    (:name_2),\n                    (:name_3)\n    ```", "```py\nmethod inline() \u2192 Self\n```", "```py\nmethod ordered_values(*args: Tuple[_DMLColumnArgument, Any]) \u2192 Self\n```", "```py\nstmt = table.update().ordered_values(\n    (\"name\", \"ed\"), (\"ident\", \"foo\")\n)\n```", "```py\nclass sqlalchemy.sql.expression.UpdateBase\n```", "```py\nattribute entity_description\n```", "```py\n>>> stmt = insert(user_table)\n>>> stmt.entity_description\n{\n \"name\": \"user_table\",\n \"table\": Table(\"user_table\", ...)\n}\n```", "```py\nattribute exported_columns\n```", "```py\nmethod params(*arg: Any, **kw: Any) \u2192 NoReturn\n```", "```py\nmethod return_defaults(*cols: _DMLColumnArgument, supplemental_cols: Iterable[_DMLColumnArgument] | None = None, sort_by_parameter_order: bool = False) \u2192 Self\n```", "```py\nstmt = table.insert().values(data='newdata').return_defaults()\n\nresult = connection.execute(stmt)\n\nserver_created_at = result.returned_defaults['created_at']\n```", "```py\nmethod returning(*cols: _ColumnsClauseArgument[Any], sort_by_parameter_order: bool = False, **_UpdateBase__kw: Any) \u2192 UpdateBase\n```", "```py\n>>> stmt = (\n...     table.update()\n...     .where(table.c.data == \"value\")\n...     .values(status=\"X\")\n...     .returning(table.c.server_flag, table.c.updated_timestamp)\n... )\n>>> print(stmt)\nUPDATE  some_table  SET  status=:status\nWHERE  some_table.data  =  :data_1\nRETURNING  some_table.server_flag,  some_table.updated_timestamp \n```", "```py\n>>> stmt = table.insert().returning(\n...     (table.c.first_name + \" \" + table.c.last_name).label(\"fullname\")\n... )\n>>> print(stmt)\nINSERT  INTO  some_table  (first_name,  last_name)\nVALUES  (:first_name,  :last_name)\nRETURNING  some_table.first_name  ||  :first_name_1  ||  some_table.last_name  AS  fullname \n```", "```py\nattribute returning_column_descriptions\n```", "```py\n>>> stmt = insert(user_table).returning(user_table.c.id, user_table.c.name)\n>>> stmt.entity_description\n[\n {\n \"name\": \"id\",\n \"type\": Integer,\n \"expr\": Column(\"id\", Integer(), table=<user>, ...)\n },\n {\n \"name\": \"name\",\n \"type\": String(),\n \"expr\": Column(\"name\", String(), table=<user>, ...)\n },\n]\n```", "```py\nmethod with_dialect_options(**opt: Any) \u2192 Self\n```", "```py\nupd = table.update().dialect_options(mysql_limit=10)\n```", "```py\nmethod with_hint(text: str, selectable: _DMLTableArgument | None = None, dialect_name: str = '*') \u2192 Self\n```", "```py\nmytable.insert().with_hint(\"WITH (PAGLOCK)\", dialect_name=\"mssql\")\n```", "```py\nclass sqlalchemy.sql.expression.ValuesBase\n```", "```py\nattribute select: Select[Any] | None = None\n```", "```py\nmethod values(*args: _DMLColumnKeyMapping[Any] | Sequence[Any], **kwargs: Any) \u2192 Self\n```", "```py\n    users.insert().values(name=\"some name\")\n\n    users.update().where(users.c.id==5).values(name=\"some name\")\n    ```", "```py\n    users.insert().values({\"name\": \"some name\"})\n\n    users.update().values({\"name\": \"some new name\"})\n    ```", "```py\n    users.insert().values((5, \"some name\"))\n    ```", "```py\n    users.insert().values([\n                        {\"name\": \"some name\"},\n                        {\"name\": \"some other name\"},\n                        {\"name\": \"yet another name\"},\n                    ])\n    ```", "```py\n    INSERT INTO users (name) VALUES\n                    (:name_1),\n                    (:name_2),\n                    (:name_3)\n    ```"]