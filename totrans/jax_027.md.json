["```py\nJaxpr ::= { lambda Var* ; Var+. let\n              Eqn*\n            in  [Expr+] } \n```", "```py\nEqn  ::= Var+ = Primitive [ Param* ] Expr+ \n```", "```py\nPrimitive := add | sub | sin | mul | ... \n```", "```py\n>>> from jax import make_jaxpr\n>>> import jax.numpy as jnp\n>>> def func1(first, second):\n...    temp = first + jnp.sin(second) * 3.\n...    return jnp.sum(temp)\n...\n>>> print(make_jaxpr(func1)(jnp.zeros(8), jnp.ones(8)))\n{ lambda ; a:f32[8] b:f32[8]. let\n c:f32[8] = sin b\n d:f32[8] = mul c 3.0\n e:f32[8] = add a d\n f:f32[] = reduce_sum[axes=(0,)] e\n in (f,) } \n```", "```py\n>>> def func2(inner, first, second):\n...   temp = first + inner(second) * 3.\n...   return jnp.sum(temp)\n...\n>>> def inner(second):\n...   if second.shape[0] > 4:\n...     return jnp.sin(second)\n...   else:\n...     assert False\n...\n>>> def func3(first, second):\n...   return func2(inner, first, second)\n...\n>>> print(make_jaxpr(func3)(jnp.zeros(8), jnp.ones(8)))\n{ lambda ; a:f32[8] b:f32[8]. let\n c:f32[8] = sin b\n d:f32[8] = mul c 3.0\n e:f32[8] = add a d\n f:f32[] = reduce_sum[axes=(0,)] e\n in (f,) } \n```", "```py\n>>> def func4(arg):  # Arg is a pair\n...   temp = arg[0] + jnp.sin(arg[1]) * 3.\n...   return jnp.sum(temp)\n...\n>>> print(make_jaxpr(func4)((jnp.zeros(8), jnp.ones(8))))\n{ lambda ; a:f32[8] b:f32[8]. let\n c:f32[8] = sin b\n d:f32[8] = mul c 3.0\n e:f32[8] = add a d\n f:f32[] = reduce_sum[axes=(0,)] e\n in (f,) } \n```", "```py\nlax.switch(index: int, branches: Sequence[A -> B], operand: A) -> B\n\nlax.cond(pred: bool, true_body: A -> B, false_body: A -> B, operand: A) -> B \n```", "```py\n>>> from jax import lax\n>>>\n>>> def one_of_three(index, arg):\n...   return lax.switch(index, [lambda x: x + 1.,\n...                             lambda x: x - 2.,\n...                             lambda x: x + 3.],\n...                     arg)\n...\n>>> print(make_jaxpr(one_of_three)(1, 5.))\n{ lambda ; a:i32[] b:f32[]. let\n c:i32[] = convert_element_type[new_dtype=int32 weak_type=False] a\n d:i32[] = clamp 0 c 2\n e:f32[] = cond[\n branches=(\n { lambda ; f:f32[]. let g:f32[] = add f 1.0 in (g,) }\n { lambda ; h:f32[]. let i:f32[] = sub h 2.0 in (i,) }\n { lambda ; j:f32[]. let k:f32[] = add j 3.0 in (k,) }\n )\n linear=(False,)\n ] d b\n in (e,) } \n```", "```py\n>>> from jax import lax\n>>>\n>>> def func7(arg):\n...   return lax.cond(arg >= 0.,\n...                   lambda xtrue: xtrue + 3.,\n...                   lambda xfalse: xfalse - 3.,\n...                   arg)\n...\n>>> print(make_jaxpr(func7)(5.))\n{ lambda ; a:f32[]. let\n b:bool[] = ge a 0.0\n c:i32[] = convert_element_type[new_dtype=int32 weak_type=False] b\n d:f32[] = cond[\n branches=(\n { lambda ; e:f32[]. let f:f32[] = sub e 3.0 in (f,) }\n { lambda ; g:f32[]. let h:f32[] = add g 3.0 in (h,) }\n )\n linear=(False,)\n ] c a\n in (d,) } \n```", "```py\n>>> def func8(arg1, arg2):  # arg2 is a pair\n...   return lax.cond(arg1 >= 0.,\n...                   lambda xtrue: xtrue[0],\n...                   lambda xfalse: jnp.array([1]) + xfalse[1],\n...                   arg2)\n...\n>>> print(make_jaxpr(func8)(5., (jnp.zeros(1), 2.)))\n{ lambda a:i32[1]; b:f32[] c:f32[1] d:f32[]. let\n e:bool[] = ge b 0.0\n f:i32[] = convert_element_type[new_dtype=int32 weak_type=False] e\n g:f32[1] = cond[\n branches=(\n { lambda ; h:i32[1] i:f32[1] j:f32[]. let\n k:f32[1] = convert_element_type[new_dtype=float32 weak_type=True] h\n l:f32[1] = add k j\n in (l,) }\n { lambda ; m_:i32[1] n:f32[1] o:f32[]. let  in (n,) }\n )\n linear=(False, False, False)\n ] f a c d\n in (g,) } \n```", "```py\nlax.while_loop(cond_fun: (C -> bool), body_fun: (C -> C), init: C) -> C\nlax.fori_loop(start: int, end: int, body: (int -> C -> C), init: C) -> C \n```", "```py\n>>> import numpy as np\n>>>\n>>> def func10(arg, n):\n...   ones = jnp.ones(arg.shape)  # A constant\n...   return lax.fori_loop(0, n,\n...                        lambda i, carry: carry + ones * 3. + arg,\n...                        arg + ones)\n...\n>>> print(make_jaxpr(func10)(np.ones(16), 5))\n{ lambda ; a:f32[16] b:i32[]. let\n c:f32[16] = broadcast_in_dim[broadcast_dimensions=() shape=(16,)] 1.0\n d:f32[16] = add a c\n _:i32[] _:i32[] e:f32[16] = while[\n body_jaxpr={ lambda ; f:f32[16] g:f32[16] h:i32[] i:i32[] j:f32[16]. let\n k:i32[] = add h 1\n l:f32[16] = mul f 3.0\n m:f32[16] = add j l\n n:f32[16] = add m g\n in (k, i, n) }\n body_nconsts=2\n cond_jaxpr={ lambda ; o:i32[] p:i32[] q:f32[16]. let\n r:bool[] = lt o p\n in (r,) }\n cond_nconsts=0\n ] c a 0 b d\n in (e,) } \n```", "```py\nlax.scan(body_fun: (C -> A -> (C, B)), init_carry: C, in_arr: Array[A]) -> (C, Array[B]) \n```", "```py\n>>> def func11(arr, extra):\n...   ones = jnp.ones(arr.shape)  #  A constant\n...   def body(carry, aelems):\n...     # carry: running dot-product of the two arrays\n...     # aelems: a pair with corresponding elements from the two arrays\n...     ae1, ae2 = aelems\n...     return (carry + ae1 * ae2 + extra, carry)\n...   return lax.scan(body, 0., (arr, ones))\n...\n>>> print(make_jaxpr(func11)(np.ones(16), 5.))\n{ lambda ; a:f32[16] b:f32[]. let\n c:f32[16] = broadcast_in_dim[broadcast_dimensions=() shape=(16,)] 1.0\n d:f32[] e:f32[16] = scan[\n _split_transpose=False\n jaxpr={ lambda ; f:f32[] g:f32[] h:f32[] i:f32[]. let\n j:f32[] = mul h i\n k:f32[] = convert_element_type[new_dtype=float32 weak_type=False] g\n l:f32[] = add k j\n m:f32[] = convert_element_type[new_dtype=float32 weak_type=False] f\n n:f32[] = add l m\n in (n, g) }\n length=16\n linear=(False, False, False, False)\n num_carry=1\n num_consts=1\n reverse=False\n unroll=1\n ] b 0.0 a c\n in (d, e) } \n```", "```py\n>>> from jax import jit\n>>>\n>>> def func12(arg):\n...   @jit\n...   def inner(x):\n...     return x + arg * jnp.ones(1)  # Include a constant in the inner function\n...   return arg + inner(arg - 2.)\n...\n>>> print(make_jaxpr(func12)(1.))  \n{ lambda ; a:f32[]. let\n b:f32[] = sub a 2.0\n c:f32[1] = pjit[\n name=inner\n jaxpr={ lambda ; d:f32[] e:f32[]. let\n f:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1.0\n g:f32[] = convert_element_type[new_dtype=float32 weak_type=False] d\n h:f32[1] = mul g f\n i:f32[] = convert_element_type[new_dtype=float32 weak_type=False] e\n j:f32[1] = add i h\n in (j,) }\n ] a b\n k:f32[] = convert_element_type[new_dtype=float32 weak_type=False] a\n l:f32[1] = add k c\n in (l,) } \n```", "```py\n>>> from jax import pmap\n>>>\n>>> def func13(arr, extra):\n...   def inner(x):\n...     # use a free variable \"extra\" and a constant jnp.ones(1)\n...     return (x + extra + jnp.ones(1)) / lax.psum(x, axis_name='rows')\n...   return pmap(inner, axis_name='rows')(arr)\n...\n>>> print(make_jaxpr(func13)(jnp.ones((1, 3)), 5.))\n{ lambda ; a:f32[1,3] b:f32[]. let\n c:f32[1,3] = xla_pmap[\n axis_name=rows\n axis_size=1\n backend=None\n call_jaxpr={ lambda ; d:f32[] e:f32[3]. let\n f:f32[] = convert_element_type[new_dtype=float32 weak_type=False] d\n g:f32[3] = add e f\n h:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1.0\n i:f32[3] = add g h\n j:f32[3] = psum[axes=('rows',) axis_index_groups=None] e\n k:f32[3] = div i j\n in (k,) }\n devices=None\n donated_invars=(False, False)\n global_axis_size=1\n in_axes=(None, 0)\n is_explicit_global_axis_size=False\n name=inner\n out_axes=(0,)\n ] b a\n in (c,) } \n```"]