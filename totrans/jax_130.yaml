- en: jax.tree_util module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.tree_util 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.tree_util.html`](https://jax.readthedocs.io/en/latest/jax.tree_util.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.tree_util.html`](https://jax.readthedocs.io/en/latest/jax.tree_util.html)
- en: Utilities for working with tree-like container data structures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用于处理树状容器数据结构的实用工具。
- en: This module provides a small set of utility functions for working with tree-like
    data structures, such as nested tuples, lists, and dicts. We call these structures
    pytrees. They are trees in that they are defined recursively (any non-pytree is
    a pytree, i.e. a leaf, and any pytree of pytrees is a pytree) and can be operated
    on recursively (object identity equivalence is not preserved by mapping operations,
    and the structures cannot contain reference cycles).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块提供了一小组用于处理树状数据结构（例如嵌套元组、列表和字典）的实用函数。我们称这些结构为pytrees。它们是树形的，因为它们是递归定义的（任何非pytree都是pytree，即叶子，任何pytree的pytrees都是pytree），并且可以递归地操作（映射操作不保留对象身份等价性，并且这些结构不能包含引用循环）。
- en: The set of Python types that are considered pytree nodes (e.g. that can be mapped
    over, rather than treated as leaves) is extensible. There is a single module-level
    registry of types, and class hierarchy is ignored. By registering a new pytree
    node type, that type in effect becomes transparent to the utility functions in
    this file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为pytree节点的Python类型集合（例如可以映射而不是视为叶子的类型）是可扩展的。存在一个单一的模块级别的类型注册表，并且类层次结构被忽略。通过注册一个新的pytree节点类型，该类型实际上变得对此文件中的实用函数透明。
- en: The primary purpose of this module is to enable the interoperability between
    user defined data structures and JAX transformations (e.g. jit). This is not meant
    to be a general purpose tree-like data structure handling library.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块的主要目的是支持用户定义的数据结构与JAX转换（例如jit）之间的互操作性。这不是一个通用的树状数据结构处理库。
- en: See the JAX pytrees note for examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 查看JAX pytrees注释以获取示例。
- en: List of Functions
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数列表
- en: '| `Partial`(func, *args, **kw) | A version of functools.partial that works
    in pytrees. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `Partial`(func, *args, **kw) | 在pytrees中工作的functools.partial的版本。 |'
- en: '| `all_leaves`(iterable[, is_leaf]) | Tests whether all elements in the given
    iterable are all leaves. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `all_leaves`(iterable[, is_leaf]) | 测试给定可迭代对象中的所有元素是否都是叶子。 |'
- en: '| `build_tree`(treedef, xs) | Build a treedef from a nested iterable structure
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `build_tree`(treedef, xs) | 从嵌套的可迭代结构构建一个treedef。 |'
- en: '| `register_dataclass`(nodetype, data_fields, ...) | Extends the set of types
    that are considered internal nodes in pytrees. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `register_dataclass`(nodetype, data_fields, ...) | 扩展了在pytrees中被视为内部节点的类型集合。
    |'
- en: '| `register_pytree_node`(nodetype, flatten_func, ...) | Extends the set of
    types that are considered internal nodes in pytrees. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `register_pytree_node`(nodetype, flatten_func, ...) | 扩展了在pytrees中被视为内部节点的类型集合。
    |'
- en: '| `register_pytree_node_class`(cls) | Extends the set of types that are considered
    internal nodes in pytrees. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `register_pytree_node_class`(cls) | 扩展了在pytrees中被视为内部节点的类型集合。 |'
- en: '| `register_pytree_with_keys`(nodetype, ...[, ...]) | Extends the set of types
    that are considered internal nodes in pytrees. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `register_pytree_with_keys`(nodetype, ...[, ...]) | 扩展了在pytrees中被视为内部节点的类型集合。
    |'
- en: '| `register_pytree_with_keys_class`(cls) | Extends the set of types that are
    considered internal nodes in pytrees. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `register_pytree_with_keys_class`(cls) | 扩展了在pytrees中被视为内部节点的类型集合。 |'
- en: '| `register_static`(cls) | Registers cls as a pytree with no leaves. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `register_static`(cls) | 将cls注册为没有叶子的pytree。 |'
- en: '| `tree_flatten_with_path`(tree[, is_leaf]) | Flattens a pytree like `tree_flatten`,
    but also returns each leaf''s key path. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `tree_flatten_with_path`(tree[, is_leaf]) | 像`tree_flatten`一样展平pytree，但还返回每个叶子的键路径。
    |'
- en: '| `tree_leaves_with_path`(tree[, is_leaf]) | Gets the leaves of a pytree like
    `tree_leaves` and returns each leaf''s key path. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `tree_leaves_with_path`(tree[, is_leaf]) | 获取类似`tree_leaves`的pytree的叶子，并返回每个叶子的键路径。
    |'
- en: '| `tree_map_with_path`(f, tree, *rest[, is_leaf]) | Maps a multi-input function
    over pytree key path and args to produce a new pytree. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `tree_map_with_path`(f, tree, *rest[, is_leaf]) | 对pytree键路径和参数执行多输入函数映射，生成新的pytree。
    |'
- en: '| `treedef_children`(treedef) | Return a list of treedefs for immediate children
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `treedef_children`(treedef) | 返回直接子节点的treedef列表。 |'
- en: '| `treedef_is_leaf`(treedef) | Return True if the treedef represents a leaf.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `treedef_is_leaf`(treedef) | 如果treedef表示叶子，则返回True。 |'
- en: '| `treedef_tuple`(treedefs) | Makes a tuple treedef from an iterable of child
    treedefs. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `treedef_tuple`(treedefs) | 从子treedefs的可迭代对象制作一个元组treedef。 |'
- en: '| `keystr`(keys) | Helper to pretty-print a tuple of keys. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `keystr`(keys) | 辅助函数，用于漂亮地打印键的元组。 |'
- en: Legacy APIs
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统API
- en: These APIs are now accessed via `jax.tree`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过`jax.tree`访问这些API。
- en: '| `tree_all`(tree, *[, is_leaf]) | Alias of `jax.tree.all()`. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `tree_all`(tree, *[, is_leaf]) | `jax.tree.all()`的别名。 |'
- en: '| `tree_flatten`(tree[, is_leaf]) | Alias of `jax.tree.flatten()`. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `tree_flatten`(tree[, is_leaf]) | `jax.tree.flatten()`的别名。 |'
- en: '| `tree_leaves`(tree[, is_leaf]) | Alias of `jax.tree.leaves()`. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `tree_leaves`(tree[, is_leaf]) | `jax.tree.leaves()`的别名。 |'
- en: '| `tree_map`(f, tree, *rest[, is_leaf]) | Alias of `jax.tree.map()`. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `tree_map`(f, tree, *rest[, is_leaf]) | `jax.tree.map()`的别名。 |'
- en: '| `tree_reduce`(function, tree[, initializer, ...]) | Alias of `jax.tree.reduce()`.
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `tree_reduce`(function, tree[, initializer, ...]) | `jax.tree.reduce()`的别名。
    |'
- en: '| `tree_structure`(tree[, is_leaf]) | Alias of `jax.tree.structure()`. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `tree_structure`(tree[, is_leaf]) | `jax.tree.structure()`的别名。 |'
- en: '| `tree_transpose`(outer_treedef, inner_treedef, ...) | Alias of `jax.tree.transpose()`.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `tree_transpose`(outer_treedef, inner_treedef, ...) | `jax.tree.transpose()`的别名。
    |'
- en: '| `tree_unflatten`(treedef, leaves) | Alias of `jax.tree.unflatten()`. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `tree_unflatten`(treedef, leaves) | `jax.tree.unflatten()`的别名。 |'
