- en: Document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/document.html](https://pymupdf.readthedocs.io/en/latest/document.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This class represents a document. It can be constructed from a file or from
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: There exists the alias *open* for this class, i.e. `pymupdf.Document(...)` and
    `pymupdf.open(...)` do exactly the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: For details on **embedded files** refer to Appendix 3.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Starting with v1.17.0, a new page addressing mechanism for **EPUB files only**
    is supported. This document type is internally organized in chapters such that
    pages can most efficiently be found by their so-called “location”. The location
    is a tuple *(chapter, pno)* consisting of the chapter number and the page number
    **in that chapter**. Both numbers are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: While it is still possible to locate a page via its (absolute) number, doing
    so may mean that the complete EPUB document must be laid out before the page can
    be addressed. This may have a significant performance impact if the document is
    very large. Using the page’s *(chapter, pno)* prevents this from happening.
  prefs: []
  type: TYPE_NORMAL
- en: To maintain a consistent API, PyMuPDF supports the page *location* syntax for
    **all file types** – documents without this feature simply have just one chapter.
    [`Document.load_page()`](#Document.load_page "Document.load_page") and the equivalent
    index access now also support a *location* argument.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of methods for converting between page numbers and locations,
    for determining the chapter count, the page count per chapter, for computing the
    next and the previous locations, and the last page location of a document.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.add_layer()`](#Document.add_layer "Document.add_layer") | PDF
    only: make new optional content configuration |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.add_ocg()`](#Document.add_ocg "Document.add_ocg") | PDF only:
    add new optional content group |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.authenticate()`](#Document.authenticate "Document.authenticate")
    | gain access to an encrypted document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.bake()`](#Document.bake "Document.bake") | PDF only: make annotations
    / fields permanent content |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.can_save_incrementally()`](#Document.can_save_incrementally "Document.can_save_incrementally")
    | check if incremental save is possible |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.chapter_page_count()`](#Document.chapter_page_count "Document.chapter_page_count")
    | number of pages in chapter |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.close()`](#Document.close "Document.close") | close the document
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.convert_to_pdf()`](#Document.convert_to_pdf "Document.convert_to_pdf")
    | write a PDF version to memory |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.copy_page()`](#Document.copy_page "Document.copy_page") | PDF
    only: copy a page reference |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.del_toc_item()`](#Document.del_toc_item "Document.del_toc_item")
    | PDF only: remove a single TOC item |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.delete_page()`](#Document.delete_page "Document.delete_page")
    | PDF only: delete a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.delete_pages()`](#Document.delete_pages "Document.delete_pages")
    | PDF only: delete multiple pages |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_add()`](#Document.embfile_add "Document.embfile_add")
    | PDF only: add a new embedded file from buffer |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_count()`](#Document.embfile_count "Document.embfile_count")
    | PDF only: number of embedded files |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_del()`](#Document.embfile_del "Document.embfile_del")
    | PDF only: delete an embedded file entry |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_get()`](#Document.embfile_get "Document.embfile_get")
    | PDF only: extract an embedded file buffer |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_info()`](#Document.embfile_info "Document.embfile_info")
    | PDF only: metadata of an embedded file |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_names()`](#Document.embfile_names "Document.embfile_names")
    | PDF only: list of embedded files |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.embfile_upd()`](#Document.embfile_upd "Document.embfile_upd")
    | PDF only: change an embedded file |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.extract_font()`](#Document.extract_font "Document.extract_font")
    | PDF only: extract a font by [`xref`](glossary.html#xref "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.extract_image()`](#Document.extract_image "Document.extract_image")
    | PDF only: extract an embedded image by [`xref`](glossary.html#xref "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.ez_save()`](#Document.ez_save "Document.ez_save") | PDF only:
    [`Document.save()`](#Document.save "Document.save") with different defaults |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.find_bookmark()`](#Document.find_bookmark "Document.find_bookmark")
    | retrieve page location after laid out document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.fullcopy_page()`](#Document.fullcopy_page "Document.fullcopy_page")
    | PDF only: duplicate a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_layer()`](#Document.get_layer "Document.get_layer") | PDF
    only: lists of OCGs in ON, OFF, RBGroups |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_layers()`](#Document.get_layers "Document.get_layers") | PDF
    only: list of optional content configurations |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_oc()`](#Document.get_oc "Document.get_oc") | PDF only: get
    OCG /OCMD xref of image / form xobject |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_ocgs()`](#Document.get_ocgs "Document.get_ocgs") | PDF only:
    info on all optional content groups |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_ocmd()`](#Document.get_ocmd "Document.get_ocmd") | PDF only:
    retrieve definition of an [`OCMD`](glossary.html#OCMD "OCMD") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_fonts()`](#Document.get_page_fonts "Document.get_page_fonts")
    | PDF only: list of fonts referenced by a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_images()`](#Document.get_page_images "Document.get_page_images")
    | PDF only: list of images referenced by a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_labels()`](#Document.get_page_labels "Document.get_page_labels")
    | PDF only: list of page label definitions |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_numbers()`](#Document.get_page_numbers "Document.get_page_numbers")
    | PDF only: get page numbers having a given label |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_pixmap()`](#Document.get_page_pixmap "Document.get_page_pixmap")
    | create a pixmap of a page by page number |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_text()`](#Document.get_page_text "Document.get_page_text")
    | extract the text of a page by page number |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_page_xobjects()`](#Document.get_page_xobjects "Document.get_page_xobjects")
    | PDF only: list of XObjects referenced by a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_sigflags()`](#Document.get_sigflags "Document.get_sigflags")
    | PDF only: determine signature state |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_toc()`](#Document.get_toc "Document.get_toc") | extract the
    table of contents |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_xml_metadata()`](#Document.get_xml_metadata "Document.get_xml_metadata")
    | PDF only: read the XML metadata |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.has_annots()`](#Document.has_annots "Document.has_annots") | PDF
    only: check if PDF contains any annots |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.has_links()`](#Document.has_links "Document.has_links") | PDF
    only: check if PDF contains any links |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.insert_page()`](#Document.insert_page "Document.insert_page")
    | PDF only: insert a new page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.insert_pdf()`](#Document.insert_pdf "Document.insert_pdf") | PDF
    only: insert pages from another PDF |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.insert_file()`](#Document.insert_file "Document.insert_file")
    | PDF only: insert pages from arbitrary document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_can_do()`](#Document.journal_can_do "Document.journal_can_do")
    | PDF only: which journal actions are possible |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_enable()`](#Document.journal_enable "Document.journal_enable")
    | PDF only: enables journalling for the document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_load()`](#Document.journal_load "Document.journal_load")
    | PDF only: load journal from a file |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_op_name()`](#Document.journal_op_name "Document.journal_op_name")
    | PDF only: return name of a journalling step |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_position()`](#Document.journal_position "Document.journal_position")
    | PDF only: return journalling status |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_redo()`](#Document.journal_redo "Document.journal_redo")
    | PDF only: redo current operation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_save()`](#Document.journal_save "Document.journal_save")
    | PDF only: save journal to a file |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_start_op()`](#Document.journal_start_op "Document.journal_start_op")
    | PDF only: start an “operation” giving it a name |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_stop_op()`](#Document.journal_stop_op "Document.journal_stop_op")
    | PDF only: end current operation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.journal_undo()`](#Document.journal_undo "Document.journal_undo")
    | PDF only: undo current operation |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.layer_ui_configs()`](#Document.layer_ui_configs "Document.layer_ui_configs")
    | PDF only: list of optional content intents |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.layout()`](#Document.layout "Document.layout") | re-paginate the
    document (if supported) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.load_page()`](#Document.load_page "Document.load_page") | read
    a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.make_bookmark()`](#Document.make_bookmark "Document.make_bookmark")
    | create a page pointer in reflowable documents |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.move_page()`](#Document.move_page "Document.move_page") | PDF
    only: move a page to different location in doc |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.need_appearances()`](#Document.need_appearances "Document.need_appearances")
    | PDF only: get/set `/NeedAppearances` property |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.new_page()`](#Document.new_page "Document.new_page") | PDF only:
    insert a new empty page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.next_location()`](#Document.next_location "Document.next_location")
    | return (chapter, pno) of following page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.outline_xref()`](#Document.outline_xref "Document.outline_xref")
    | PDF only: [`xref`](glossary.html#xref "xref") a TOC item |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.page_cropbox()`](#Document.page_cropbox "Document.page_cropbox")
    | PDF only: the unrotated page rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.page_xref()`](#Document.page_xref "Document.page_xref") | PDF
    only: [`xref`](glossary.html#xref "xref") of a page number |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.pages()`](#Document.pages "Document.pages") | iterator over a
    page range |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.pdf_catalog()`](#Document.pdf_catalog "Document.pdf_catalog")
    | PDF only: [`xref`](glossary.html#xref "xref") of catalog (root) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.pdf_trailer()`](#Document.pdf_trailer "Document.pdf_trailer")
    | PDF only: trailer source |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.prev_location()`](#Document.prev_location "Document.prev_location")
    | return (chapter, pno) of preceding page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.reload_page()`](#Document.reload_page "Document.reload_page")
    | PDF only: provide a new copy of a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.resolve_names()`](#Document.resolve_names "Document.resolve_names")
    | PDF only: Convert destination names into a Python dict |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.save()`](#Document.save "Document.save") | PDF only: save the
    document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.saveIncr()`](#Document.saveIncr "Document.saveIncr") | PDF only:
    save the document incrementally |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.scrub()`](#Document.scrub "Document.scrub") | PDF only: remove
    sensitive data |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.search_page_for()`](#Document.search_page_for "Document.search_page_for")
    | search for a string on a page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.select()`](#Document.select "Document.select") | PDF only: select
    a subset of pages |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_layer_ui_config()`](#Document.set_layer_ui_config "Document.set_layer_ui_config")
    | PDF only: set OCG visibility temporarily |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_layer()`](#Document.set_layer "Document.set_layer") | PDF
    only: mass changing OCG states |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_markinfo()`](#Document.set_markinfo "Document.set_markinfo")
    | PDF only: set the MarkInfo values |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_metadata()`](#Document.set_metadata "Document.set_metadata")
    | PDF only: set the metadata |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_oc()`](#Document.set_oc "Document.set_oc") | PDF only: attach
    OCG/OCMD to image / form xobject |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_ocmd()`](#Document.set_ocmd "Document.set_ocmd") | PDF only:
    create or update an [`OCMD`](glossary.html#OCMD "OCMD") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_page_labels()`](#Document.set_page_labels "Document.set_page_labels")
    | PDF only: add/update page label definitions |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_pagemode()`](#Document.set_pagemode "Document.set_pagemode")
    | PDF only: set the PageMode |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_pagelayout()`](#Document.set_pagelayout "Document.set_pagelayout")
    | PDF only: set the PageLayout |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_toc_item()`](#Document.set_toc_item "Document.set_toc_item")
    | PDF only: change a single TOC item |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_toc()`](#Document.set_toc "Document.set_toc") | PDF only:
    set the table of contents (TOC) |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.set_xml_metadata()`](#Document.set_xml_metadata "Document.set_xml_metadata")
    | PDF only: create or update document XML metadata |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.subset_fonts()`](#Document.subset_fonts "Document.subset_fonts")
    | PDF only: create font subsets |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.switch_layer()`](#Document.switch_layer "Document.switch_layer")
    | PDF only: activate OC configuration |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.tobytes()`](#Document.tobytes "Document.tobytes") | PDF only:
    writes document to memory |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_copy()`](#Document.xref_copy "Document.xref_copy") | PDF
    only: copy a PDF dictionary to another [`xref`](glossary.html#xref "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_get_key()`](#Document.xref_get_key "Document.xref_get_key")
    | PDF only: get the value of a dictionary key |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_get_keys()`](#Document.xref_get_keys "Document.xref_get_keys")
    | PDF only: list the keys of object at [`xref`](glossary.html#xref "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_object()`](#Document.xref_object "Document.xref_object")
    | PDF only: get the definition source of [`xref`](glossary.html#xref "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_set_key()`](#Document.xref_set_key "Document.xref_set_key")
    | PDF only: set the value of a dictionary key |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_stream_raw()`](#Document.xref_stream_raw "Document.xref_stream_raw")
    | PDF only: raw stream source at [`xref`](glossary.html#xref "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_xml_metadata()`](#Document.xref_xml_metadata "Document.xref_xml_metadata")
    | PDF only: [`xref`](glossary.html#xref "xref") of XML metadata |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.chapter_count`](#Document.chapter_count "Document.chapter_count")
    | number of chapters |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.FormFonts`](#Document.FormFonts "Document.FormFonts") | PDF only:
    list of global widget fonts |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_closed`](#Document.is_closed "Document.is_closed") | has document
    been closed? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_dirty`](#Document.is_dirty "Document.is_dirty") | PDF only:
    has document been changed yet? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_encrypted`](#Document.is_encrypted "Document.is_encrypted")
    | document (still) encrypted? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_fast_webaccess`](#Document.is_fast_webaccess "Document.is_fast_webaccess")
    | is PDF linearized? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_form_pdf`](#Document.is_form_pdf "Document.is_form_pdf") |
    is this a Form PDF? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_pdf`](#Document.is_pdf "Document.is_pdf") | is this a PDF?
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_reflowable`](#Document.is_reflowable "Document.is_reflowable")
    | is this a reflowable document? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_repaired`](#Document.is_repaired "Document.is_repaired") |
    PDF only: has this PDF been repaired during open? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.last_location`](#Document.last_location "Document.last_location")
    | (chapter, pno) of last page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.metadata`](#Document.metadata "Document.metadata") | metadata
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.markinfo`](#Document.markinfo "Document.markinfo") | PDF MarkInfo
    value |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.name`](#Document.name "Document.name") | filename of document
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.needs_pass`](#Document.needs_pass "Document.needs_pass") | require
    password to access data? |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.outline`](#Document.outline "Document.outline") | first [Outline](outline.html#outline)
    item |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.page_count`](#Document.page_count "Document.page_count") | number
    of pages |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.permissions`](#Document.permissions "Document.permissions") |
    permissions to access the document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.pagemode`](#Document.pagemode "Document.pagemode") | PDF PageMode
    value |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.pagelayout`](#Document.pagelayout "Document.pagelayout") | PDF
    PageLayout value |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.version_count`](#Document.version_count "Document.version_count")
    | PDF count of versions |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.14.13: support `io.BytesIO` for memory documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.6: Clearer, shorter and more consistent exception messages.
    File type “pdf” is always assumed if not specified. Empty files and memory areas
    will always lead to exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a *Document* object.
  prefs: []
  type: TYPE_NORMAL
- en: With default parameters, a **new empty PDF** document will be created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *stream* is given, then the document is created from memory and, if not a
    PDF, either *filename* or *filetype* must indicate its type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *stream* is `None`, then a document is created from the file given by *filename*.
    Its type is inferred from the extension. This can be overruled by *filetype.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** (*str**,**pathlib*) – A UTF-8 string or *pathlib* object containing
    a file path. The document type is inferred from the filename extension. If not
    present or not matching [a supported type](how-to-open-a-file.html#supported-file-types),
    a PDF document is assumed. For memory documents, this argument may be used instead
    of `filetype`, see below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** (*bytes**,**bytearray**,**BytesIO*) – A memory area containing a
    supported document. If not a PDF, its type **must** be specified by either `filename`
    or `filetype`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filetype** (*str*) – A string specifying the type of document. This may be
    anything looking like a filename (e.g. “x.pdf”), in which case MuPDF uses the
    extension to determine the type, or a mime type like *application/pdf*. Just using
    strings like “pdf” or “.pdf” will also work. May be omitted for PDF documents,
    otherwise must match [a supported document type](how-to-open-a-file.html#supported-file-types).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – a rectangle specifying the desired page size. This
    parameter is only meaningful for documents with a variable page layout (“reflowable”
    documents), like e-books or HTML, and ignored otherwise. If specified, it must
    be a non-empty, finite rectangle with top-left coordinates (0, 0). Together with
    parameter *fontsize*, each page will be accordingly laid out and hence also determine
    the number of pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*float*) – may used together with *height* as an alternative to
    *rect* to specify layout information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** (*float*) – may used together with *width* as an alternative to
    *rect* to specify layout information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the default [`fontsize`](glossary.html#fontsize "fontsize")
    for reflowable document types. This parameter is ignored if none of the parameters
    *rect* or *width* and *height* are specified. Will be used to calculate the page
    layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError** – if the *type* of any parameter does not conform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FileNotFoundError** – if the file / path cannot be found. Re-implemented
    as subclass of `RuntimeError`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EmptyFileError** – if the file / path is empty or the `bytes` object in memory
    has zero length. A subclass of `FileDataError` and `RuntimeError`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ValueError** – if an unknown file type is explicitly specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FileDataError** – if the document has an invalid structure for the given
    type – or is no file at all (but e.g. a folder). A subclass of `RuntimeError`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A document object. If the document cannot be created, an exception is raised
    in the above sequence. Note that PyMuPDF-specific exceptions, `FileNotFoundError`,
    `EmptyFileError` and `FileDataError` are intercepted if you check for `RuntimeError`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of problems you can see more detail in the internal messages store:
    `print(pymupdf.TOOLS.mupdf_warnings())` (which will be emptied by this call, but
    you can also prevent this – consult [`Tools.mupdf_warnings()`](tools.html#Tools.mupdf_warnings
    "Tools.mupdf_warnings")).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all document types are checked for valid formats already at open time.
    Raster images for example will raise exceptions only later, when trying to access
    the content. Other types (notably with non-binary content) may also be opened
    (and sometimes **accessed**) successfully – sometimes even when having invalid
    content for the format:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTM, HTML, XHTML: **always** opened, `metadata["format"]` is “HTML5”, resp.
    “XHTML”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XML, FB2: **always** opened, `metadata["format"]` is “FictionBook2”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overview of possible forms, note: `open` is a synonym of [Document](#document):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Raster images with a wrong (but supported) file extension **are no problem**.
    MuPDF will determine the correct image type when file **content** is actually
    accessed and will process it without complaint. So `pymupdf.open("file.jpg")`
    will work even for a PNG image.
  prefs: []
  type: TYPE_NORMAL
- en: The Document class can be also be used as a **context manager**. On exit, the
    document will automatically be closed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the cross reference number of an [`OCG`](glossary.html#OCG "OCG") or
    [`OCMD`](glossary.html#OCMD "OCMD") attached to an image or form xobject.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of an image or form
    xobject. Valid such cross reference numbers are returned by [`Document.get_page_images()`](#Document.get_page_images
    "Document.get_page_images"), resp. [`Document.get_page_xobjects()`](#Document.get_page_xobjects
    "Document.get_page_xobjects"). For invalid numbers, an exception is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the cross reference number of an optional contents object or zero if there is
    none.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *xref* represents an image or form xobject, set or remove the cross reference
    number *ocxref* of an optional contents object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of an image or form
    xobject [[5]](#f5). Valid such cross reference numbers are returned by [`Document.get_page_images()`](#Document.get_page_images
    "Document.get_page_images"), resp. [`Document.get_page_xobjects()`](#Document.get_page_xobjects
    "Document.get_page_xobjects"). For invalid numbers, an exception is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ocxref** (*int*) – the [`xref`](glossary.html#xref "xref") number of an [`OCG`](glossary.html#OCG
    "OCG") / [`OCMD`](glossary.html#OCMD "OCMD"). If not zero, an invalid reference
    raises an exception. If zero, any OC reference is removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show optional layer configurations. There always is a standard one, which is
    not included in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an optional content configuration. Layers serve as a collection of ON /
    OFF states for optional content groups and allow fast visibility switches between
    different views on the same document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – arbitrary name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**creator** (*str*) – (optional) creating software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on** (*sequ*) – a sequence of OCG [`xref`](glossary.html#xref "xref") numbers
    which should be set to ON when this layer gets activated. All OCGs not listed
    here will be set to OFF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch to a document view as defined by the optional layer’s configuration number.
    This is temporary, except if established as default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**number** (*int*) – config number as returned by `Document.layer_configs()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_default** (*bool*) – make this the default configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activates the ON / OFF states of OCGs as defined in the identified layer. If
    *as_default=True*, then additionally all layers, including the standard one, are
    merged and the result is written back to the standard layer, and **all optional
    layers are deleted**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an optional content group. An OCG is the most important unit of information
    to determine object visibility. For a PDF, in order to be regarded as having optional
    content, at least one OCG must exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – arbitrary name. Will show up in supporting PDF viewers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**config** (*int*) – layer configuration number. Default -1 is the standard
    configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on** (*bool*) – standard visibility status for objects pointing to this OCG.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**intent** (*str**,**list*) – a string or list of strings declaring the visibility
    intents. There are two PDF standard values to choose from: “View” and “Design”.
    Default is “View”. Correct **spelling is important**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**usage** (*str*) – another influencer for OCG visibility. This will become
    part of the OCG’s `/Usage` key. There are two PDF standard values to choose from:
    “Artwork” and “Technical”. Default is “Artwork”. Please only change when required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`xref`](glossary.html#xref "xref") of the created OCG. Use as entry for `oc`
    parameter in supporting objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Multiple OCGs with identical parameters may be created. This will not cause
    problems. Garbage option 3 of [`Document.save()`](#Document.save "Document.save")
    will get rid of any duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create or update an [`OCMD`](glossary.html#OCMD "OCMD"), **Optional Content
    Membership Dictionary.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – [`xref`](glossary.html#xref "xref") of the OCMD to be updated,
    or 0 for a new OCMD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ocgs** (*list*) – a sequence of [`xref`](glossary.html#xref "xref") numbers
    of existing [`OCG`](glossary.html#OCG "OCG") PDF objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**policy** (*str*) – one of “AnyOn” (default), “AnyOff”, “AllOn”, “AllOff”
    (mixed or lower case).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ve** (*list*) – a “visibility expression”. This is a list of arbitrarily
    nested other lists – see explanation below. Use as an alternative to the combination
    *ocgs* / *policy* if you need to formulate more complex conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`xref`](glossary.html#xref "xref") of the OCMD. Use as `oc=xref` parameter
    in supporting objects, and respectively in [`Document.set_oc()`](#Document.set_oc
    "Document.set_oc") or [`Annot.set_oc()`](annot.html#Annot.set_oc "Annot.set_oc").'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Like an OCG, an OCMD has a visibility state ON or OFF, and it can be used like
    an OCG. In contrast to an OCG, the OCMD state is determined by evaluating the
    state of one or more OCGs via special forms of **boolean expressions.** If the
    expression evaluates to true, the OCMD state is ON and OFF for false.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to formulate OCMD visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the combination of *ocgs* and *policy*: The *policy* value is interpreted
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AnyOn – (default) true if at least one OCG is ON.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: AnyOff – true if at least one OCG is OFF.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: AllOn – true if all OCGs are ON.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: AllOff – true if all OCGs are OFF.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Suppose you want two PDF objects be displayed exactly one at a time (if one
    is ON, then the other one must be OFF):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Solution: use an **OCG** for object 1 and an **OCMD** for object 2\. Create
    the OCMD via `set_ocmd(ocgs=[xref], policy="AllOff")`, with the [`xref`](glossary.html#xref
    "xref") of the OCG.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Use the **visibility expression** *ve*: This is a list of two or more items.
    The **first item** is a logical keyword: one of the strings **“and”**, **“or”**,
    or **“not”**. The **second** and all subsequent items must either be an integer
    or another list. An integer must be the [`xref`](glossary.html#xref "xref") number
    of an OCG. A list must again have at least two items starting with one of the
    boolean keywords. This syntax is a bit awkward, but quite powerful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each list must start with a logical keyword.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the keyword is a **“not”**, then the list must have exactly two items. If
    it is **“and”** or **“or”**, any number of other items may follow.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Items following the logical keyword may be either integers or again a list.
    An *integer* must be the xref of an OCG. A *list* must conform to the previous
    rules.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Examples:**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_ocmd(ve=["or", 4, ["not", 5], ["and", 6, 7]])`. This delivers ON if the
    following is true: **“4 is ON, or 5 is OFF, or 6 and 7 are both ON”**.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set_ocmd(ve=["not", xref])`. This has the same effect as the OCMD example
    created under 1.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For more details and examples see page 224 of [Adobe PDF References](app3.html#adobemanual).
    Also do have a look at example scripts [here](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/optional-content).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Visibility expressions, `/VE`, are part of PDF specification version 1.6\. So
    not all PDF viewers / readers may already support this feature and hence will
    react in some standard way for those cases.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve the definition of an [`OCMD`](glossary.html#OCMD "OCMD").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref") of the OCMD.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a dictionary with the keys *xref*, *ocgs*, *policy* and *ve*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of optional content groups by status in the specified configuration. This
    is a dictionary with lists of cross reference numbers for OCGs that occur in the
    arrays `/ON`, `/OFF` or in some radio button group (`/RBGroups`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**config** (*int*) – the configuration layer (default is the standard config
    layer).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.22.5: Support list of *locked* OCGs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mass status changes of optional content groups. **Permanently** sets the status
    of OCGs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**config** (*int*) – desired configuration layer, choose -1 for the default
    one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on** (*list*) – list of [`xref`](glossary.html#xref "xref") of OCGs to set
    ON. Replaces previous values. An empty list will cause no OCG being set to ON
    anymore. Should be specified if `basestate="ON"` is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**off** (*list*) – list of [`xref`](glossary.html#xref "xref") of OCGs to set
    OFF. Replaces previous values. An empty list will cause no OCG being set to OFF
    anymore. Should be specified if `basestate="OFF"` is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**basestate** (*str*) – state of OCGs that are not mentioned in *on* or *off*.
    Possible values are “ON”, “OFF” or “Unchanged”. Upper / lower case possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rbgroups** (*list*) – a list of lists. Replaces previous values. Each sublist
    should contain two or more OCG xrefs. OCGs in the same sublist are handled like
    buttons in a radio button group: setting one to ON automatically sets all other
    group members to OFF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**locked** (*list*) – a list of OCG xref number that cannot be changed by the
    user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values `None` will not change the corresponding PDF array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Details of all optional content groups. This is a dictionary of dictionaries
    like this (key is the OCG’s [`xref`](glossary.html#xref "xref")):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the visibility status of optional content that is modifiable by the user
    interface of supporting PDF viewers.
  prefs: []
  type: TYPE_NORMAL
- en: Only reports items contained in the currently selected layer configuration.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The meaning of the dictionary keys is as follows:'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*depth:* item’s nesting level in the `/Order` array'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*locked:* true if cannot be changed via user interfaces'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*number:* running sequence number'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*on:* item state'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*text:* text string or name field of the originating OCG'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*type:* one of “label” (set by a text string), “checkbox” (set by a single
    OCG) or “radiobox” (set by a set of connected OCGs)'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify OC visibility status of content groups. This is analog to what supporting
    PDF viewers would offer.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that visibility is **not** a property stored with the OCG. It is
    not even information necessarily present in the PDF document at all. Instead,
    the current visibility is **temporarily** set using the user interface of some
    supporting PDF consumer software. The same type of functionality is offered by
    this method.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To make **permanent** changes, use [`Document.set_layer()`](#Document.set_layer
    "Document.set_layer").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**number** (*int**,**str*) – either the sequence number of the item in list
    `Document.layer_configs()` or the “text” of one of these items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**action** (*int*) – `PDF_OC_ON` = set on (default), `PDF_OC_TOGGLE` = toggle
    on/off, `PDF_OC_OFF` = set off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Decrypts the document with the string *password*. If successful, document data
    can be accessed. For PDF documents, the “owner” and the “user” have different
    privileges, and hence different passwords may exist for these authorization levels.
    The method will automatically establish the appropriate (owner or user) access
    rights for the provided password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**password** (*str*) – owner or user password.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a positive value if successful, zero otherwise (the string does not match either
    password). If positive, the indicator [`Document.is_encrypted`](#Document.is_encrypted
    "Document.is_encrypted") is set to *False*. **Positive** return codes carry the
    following information detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 => authenticated, but the PDF has neither owner nor user passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 => authenticated with the **user** password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 => authenticated with the **owner** password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6 => authenticated and both passwords are equal – probably a rare situation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The document may be protected by an owner, but **not** by a user password. Detect
    this situation via `doc.authenticate("") == 2`. This allows opening and reading
    the document without authentication, but, depending on the [`Document.permissions`](#Document.permissions
    "Document.permissions") value, other actions may be prohibited. PyMuPDF (like
    MuPDF) in this case **ignores those restrictions**. So, – in contrast to any PDF
    viewers – you can for example extract text and add or modify content, even if
    the respective permission flags `PDF_PERM_COPY`, `PDF_PERM_MODIFY`, `PDF_PERM_ANNOTATE`,
    etc. are set off! It is your responsibility building a legally compliant application
    where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: New in v 1.18.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return a list of page numbers that have the specified label – note
    that labels may not be unique in a PDF. This implies a sequential search through
    **all page numbers** to compare their labels.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Implementation detail – pages are **not loaded** for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** (*str*) – the label to look for, e.g. “vii” (Roman number 7).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**only_one** (*bool*) – stop after first hit. Useful e.g. if labelling is known
    to be unique, or there are many pages, etc. The default will check every page
    number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: list of page numbers that have this label. Empty if none found, no labels defined,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Extract the list of page label definitions. Typically used for modifications
    before feeding it into [`Document.set_page_labels()`](#Document.set_page_labels
    "Document.set_page_labels").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of dictionaries as defined in [`Document.set_page_labels()`](#Document.set_page_labels
    "Document.set_page_labels").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Add or update the page label definitions of the PDF.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**labels** (*list*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'a list of dictionaries. Each dictionary defines a label building rule and a
    0-based “start” page number. That start page is the first for which the label
    definition is valid. Each dictionary has up to 4 items and looks like `{''startpage'':
    int, ''prefix'': str, ''style'': str, ''firstpagenum'': int}` and has the following
    items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`startpage`: (int) the first page number (0-based) to apply the label rule.
    This key **must be present**. The rule is applied to all subsequent pages until
    either end of document or superseded by the rule with the next larger page number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefix`: (str) an arbitrary string to start the label with, e.g. “A-”. Default
    is “”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style`: (str) the numbering style. Available are “D” (decimal), “r”/”R” (Roman
    numbers, lower / upper case), and “a”/”A” (lower / upper case alphabetical numbering:
    “a” through “z”, then “aa” through “zz”, etc.). Default is “”. If “”, no numbering
    will take place and the pages in that range will receive the same label consisting
    of the `prefix` value. If prefix is also omitted, then the label will be “”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firstpagenum`: (int) start numbering with this value. Default is 1, smaller
    values are ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: will generate the labels “A-10”, “A-11”, “A-12”, “A-13”, “1”, “2”, “3”, … for
    pages 6, 7 and so on until end of document. Pages 0 through 5 will have the label
    “”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: New in v.1.17.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return a page pointer in a reflowable document. After re-layouting the document,
    the result of this method can be used to find the new location of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse with items of a table of contents, TOC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**loc** (*list**,**tuple*) – page location. Must be a valid *(chapter, pno)*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pointer
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a long integer in pointer format. To be used for finding the new location of
    the page after re-layouting the document. Do not touch or re-assign.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: New in v.1.17.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the new page location after re-layouting the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bookmark** (*pointer*) – created by [`Document.make_bookmark()`](#Document.make_bookmark
    "Document.make_bookmark").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the new (chapter, pno) of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: New in v.1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the number of pages of a chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**chapter** (*int*) – the 0-based chapter number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: number of pages in chapter. Relevant only for document types with chapter support
    (EPUB currently).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: New in v.1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the location of the following page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**page_id** (*tuple*) – the current page id. This must be a tuple *(chapter,
    pno)* identifying an existing page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The tuple of the following page, i.e. either *(chapter, pno + 1)* or *(chapter
    + 1, 0)*, **or** the empty tuple *()* if the argument was the last page. Relevant
    only for document types with chapter support (EPUB currently).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: New in v.1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the locator of the preceding page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**page_id** (*tuple*) – the current page id. This must be a tuple *(chapter,
    pno)* identifying an existing page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The tuple of the preceding page, i.e. either *(chapter, pno - 1)* or the last
    page of the preceding chapter, **or** the empty tuple *()* if the argument was
    the first page. Relevant only for document types with chapter support (EPUB currently).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.17.0: For document types supporting a so-called “chapter structure”
    (like EPUB), pages can also be loaded via the combination of chapter number and
    relative page number, instead of the absolute page number. This should **significantly
    speed up access** for large documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a [Page](page.html#page) object for further processing (like rendering,
    text searching, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**page_id** (*int**,**tuple*) –'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.17.0)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Either a 0-based page number, or a tuple *(chapter, pno)*. For an **integer**,
    any `-∞ < page_id < page_count` is acceptable. While page_id is negative, [`page_count`](#Document.page_count
    "Document.page_count") will be added to it. For example: to load the last page,
    you can use *doc.load_page(-1)*. After this you have page.number = doc.page_count
    - 1.'
  prefs: []
  type: TYPE_NORMAL
- en: For a tuple, *chapter* must be in range [`Document.chapter_count`](#Document.chapter_count
    "Document.chapter_count"), and *pno* must be in range [`Document.chapter_page_count()`](#Document.chapter_page_count
    "Document.chapter_page_count") of that chapter. Both values are 0-based. Using
    this notation, [`Page.number`](page.html#Page.number "Page.number") will equal
    the given tuple. Relevant only for document types with chapter support (EPUB currently).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Page](page.html#page)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Documents also follow the Python sequence protocol with page numbers as indices:
    *doc.load_page(n) == doc[n]*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For **absolute page numbers** only, expressions like *“for page in doc: …”*
    and *“for page in reversed(doc): …”* will successively yield the document’s pages.
    Refer to [`Document.pages()`](#Document.pages "Document.pages") which allows processing
    pages as with slicing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use index notation with the new chapter-based page identification:
    use *page = doc[(5, 2)]* to load the third page of the sixth chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: To maintain a consistent API, for document types not supporting a chapter structure
    (like PDFs), [`Document.chapter_count`](#Document.chapter_count "Document.chapter_count")
    is 1, and pages can also be loaded via tuples *(0, pno)*. See this [[3]](#f3)
    footnote for comments on performance improvements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Provide a new copy of a page after finishing and updating all pending
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**page** ([Page](page.html#page)) – page object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Page](page.html#page)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new copy of the same page. All pending updates (e.g. to annotations or widgets)
    will be finalized and a fresh copy of the page will be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In a typical use case, a page [Pixmap](pixmap.html#pixmap) should be taken after
    annotations / widgets have been added or changed. To force all those changes being
    reflected in the page structure, this method re-instates a fresh copy while keeping
    the object hierarchy “document -> page -> annotations/widgets” intact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Convert destination names into a Python dict.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dictionary with the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '*key*: (str) the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*value*: (dict) with the following layout:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '”page”: target page number (0-based). If no page number found -1.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '”to”: (x, y) target point on page. Currently in PDF coordinates, i.e. point
    (0,0) is the bottom-left of the page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '”zoom”: (float) the zoom factor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '”dest”: (str) only present if the target location on the page has not been
    provided as “/XYZ” or if no page number was found.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: All names found in the catalog under keys “/Dests” and “/Names/Dests” are included.
  prefs: []
  type: TYPE_NORMAL
- en: New in v1.23.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the unrotated page rectangle – **without loading the page**
    (via [`Document.load_page()`](#Document.load_page "Document.load_page")). This
    is meant for internal purpose requiring best possible performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – 0-based page number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect) of the page like [`Page.rect()`](page.html#Page.rect
    "Page.rect"), but ignoring any rotation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the [`xref`](glossary.html#xref "xref") of the page – **without
    loading the page** (via [`Document.load_page()`](#Document.load_page "Document.load_page")).
    This is meant for internal purpose requiring best possible performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – 0-based page number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`xref`](glossary.html#xref "xref") of the page like [`Page.xref`](page.html#Page.xref
    "Page.xref").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A generator for a range of pages. Parameters have the same meaning as in the
    built-in function *range()*. Intended for expressions of the form *“for page in
    doc.pages(start, stop, step): …”*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*int*) – start iteration with this page number. Default is zero,
    allowed values are `-∞ < start < page_count`. While this is negative, [`page_count`](#Document.page_count
    "Document.page_count") is added **before** starting the iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop** (*int*) – stop iteration at this page number. Default is [`page_count`](#Document.page_count
    "Document.page_count"), possible are `-∞ < stop <= page_count`. Larger values
    are **silently replaced** by the default. Negative values will cyclically emit
    the pages in reversed order. As with the built-in *range()*, this is the first
    page **not** returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**step** (*int*) – stepping value. Defaults are 1 if start < stop and -1 if
    start > stop. Zero is not allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a generator iterator over the document’s pages. Some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: ”doc.pages()” emits all pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”doc.pages(4, 9, 2)” emits pages 4, 6, 8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”doc.pages(0, None, 2)” emits all pages with even numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”doc.pages(-2)” emits the last two pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”doc.pages(-1, -1)” emits all pages in reversed order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '”doc.pages(-1, -10)” always emits 10 pages in reversed order, starting with
    the last page – **repeatedly** if the document has less than 10 pages. So for
    a 4-page document the following page numbers are emitted: 3, 2, 1, 0, 3, 2, 1,
    0, 3, 2, 1, 0, 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Create a PDF version of the current document and write it to memory. **All document
    types** are supported. The parameters have the same meaning as in [`insert_pdf()`](#Document.insert_pdf
    "Document.insert_pdf"). In essence, you can restrict the conversion to a page
    subset, specify page rotation, and revert page sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**from_page** (*int*) – first page to copy (0-based). Default is first page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to_page** (*int*) – last page to copy (0-based). Default is last page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – rotation angle. Default is 0 (no rotation). Should be
    *n * 90* with an integer n (not checked).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a Python *bytes* object containing a PDF file image. It is created by internally
    using `tobytes(garbage=4, deflate=True)`. See [`tobytes()`](#Document.tobytes
    "Document.tobytes"). You can output it directly to disk or open it as a PDF. Here
    are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The method uses the same logic as the *mutool convert* CLI. This works very
    well in most cases – however, beware of the following limitations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Image files: perfect, no issues detected. However, image transparency is ignored.
    If you need that (like for a watermark), use [`Page.insert_image()`](page.html#Page.insert_image
    "Page.insert_image") instead. Otherwise, this method is recommended for its much
    better performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XPS: appearance very good. Links work fine, outlines (bookmarks) are lost,
    but can easily be recovered [[2]](#f2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EPUB, CBZ, FB2: similar to XPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SVG: medium. Roughly comparable to [svglib](https://github.com/deeplook/svglib).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Creates a table of contents (TOC) out of the document’s outline chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**simple** (*bool*) – Indicates whether a simple or a detailed TOC is required.
    If *False*, each item of the list also contains a dictionary with [linkDest](linkdest.html#linkdest)
    details for each outline entry.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a list of lists. Each entry has the form *[lvl, title, page, dest]*. Its entries
    have the following meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '*lvl* – hierarchy level (positive *int*). The first entry is always 1\. Entries
    in a row are either **equal**, **increase** by 1, or **decrease** by any number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*title* – title (*str*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*page* – 1-based source page number (*int*). `-1` if no destination or outside
    document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*dest* – (*dict*) included only if *simple=False*. Contains details of the
    TOC item as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'kind: destination kind, see [Link Destination Kinds](vars.html#linkdest-kinds).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'file: filename if kind is [`LINK_GOTOR`](vars.html#LINK_GOTOR "LINK_GOTOR")
    or [`LINK_LAUNCH`](vars.html#LINK_LAUNCH "LINK_LAUNCH").'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'page: target page, 0-based, [`LINK_GOTOR`](vars.html#LINK_GOTOR "LINK_GOTOR")
    or [`LINK_GOTO`](vars.html#LINK_GOTO "LINK_GOTO") only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'to: position on target page ([Point](point.html#point)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'zoom: (float) zoom factor on target page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xref: [`xref`](glossary.html#xref "xref") of the item (0 if no PDF).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'color: item color in PDF RGB format `(red, green, blue)`, or omitted (always
    omitted if no PDF).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bold: true if bold item text or omitted. PDF only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'italic: true if italic item text, or omitted. PDF only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'collapse: true if sub-items are folded, or omitted. PDF only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nameddest: target name if kind=4\. PDF only. (New in 1.23.7.)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the PDF dictionary keys of the [`dictionary`](glossary.html#dictionary
    "dictionary") object provided by its xref number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref"). *(Changed in v1.18.10)*
    Use `-1` to access the special dictionary “PDF trailer”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a tuple of dictionary keys present in object [`xref`](glossary.html#xref "xref").
    Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return type and value of a PDF dictionary key of a [`dictionary`](glossary.html#dictionary
    "dictionary") object given by its xref.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref"). *Changed in v1.18.10:*
    Use `-1` to access the special dictionary “PDF trailer”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**key** (*str*) – the desired PDF key. Must **exactly** match (case-sensitive)
    one of the keys contained in [`Document.xref_get_keys()`](#Document.xref_get_keys
    "Document.xref_get_keys").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A tuple (type, value) of strings, where type is one of “xref”, “array”, “dict”,
    “int”, “float”, “null”, “bool”, “name”, “string” or “unknown” (should not occur).
    Independent of “type”, the value of the key is **always** formatted as a string
    – see the following example – and (almost always) a faithful reflection of what
    is stored in the PDF. In most cases, the format of the value string also gives
    a clue about the key type:'
  prefs: []
  type: TYPE_NORMAL
- en: A “name” always starts with a “/” slash.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An “xref” always ends with “ 0 R”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An “array” is always enclosed in “[…]” brackets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A “dict” is always enclosed in “<<…>>” brackets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A “bool”, resp. “null” always equal either “true”, “false”, resp. “null”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “float” and “int” are represented by their string format – and are thus not
    always distinguishable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A “string” is converted to UTF-8 and may therefore deviate from what is stored
    in the PDF. For example, the PDF key “Author” may have a value of “<FEFF004A006F0072006A00200058002E0020004D0063004B00690065>”
    in the file, but the method will return `('string', 'Jorj X. McKie')`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.7, changed in v 1.18.13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.4: remove a key “physically” if set to “null”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Set (add, update, delete) the value of a PDF key for the [`dictionary`](glossary.html#dictionary
    "dictionary") object given by its xref.'
  prefs: []
  type: TYPE_NORMAL
- en: Caution
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an expert function: if you do not know what you are doing, there is
    a high risk to render (parts of) the PDF unusable. Please do consult [Adobe PDF
    References](app3.html#adobemanual) about object specification formats (page 18)
    and the structure of special dictionary types like page objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the [`xref`](glossary.html#xref "xref"). *Changed in v1.18.13:*
    To update the PDF trailer, specify -1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**key** (*str*) – the desired PDF key (without leading “/”). Must not be empty.
    Any valid PDF key – whether already present in the object (which will be overwritten)
    – or new. It is possible to use PDF path notation like `"Resources/ExtGState"`
    – which sets the value for key `"/ExtGState"` as a sub-object of `"/Resources"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value** (*str*) – the value for the key. It must be a non-empty string and,
    depending on the desired PDF object type, the following rules must be observed.
    There is some syntax checking, but **no type checking** and no checking if it
    makes sense PDF-wise, i.e. **no semantics checking**. Upper / lower case is important!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xref** – must be provided as `"nnn 0 R"` with a valid [`xref`](glossary.html#xref
    "xref") number nnn of the PDF. The suffix “`0 R`” is required to be recognizable
    as an xref by PDF applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**array** – a string like `"[a b c d e f]"`. The brackets are required. Array
    items must be separated by at least one space (not commas like in Python). An
    empty array `"[]"` is possible and *equivalent* to removing the key. Array items
    may be any PDF objects, like dictionaries, xrefs, other arrays, etc. Like in Python,
    array items may be of different types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dict** – a string like `"<< ... >>"`. The brackets are required and must
    enclose a valid PDF dictionary definition. The empty dictionary `"<<>>"` is possible
    and *equivalent* to removing the key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**int** – an integer formatted **as a string**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**float** – a float formatted **as a string**. Scientific notation (with exponents)
    is **not allowed by PDF**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**null** – the string `"null"`. This is the PDF equivalent to Python’s `None`
    and causes the key to be ignored – however not necessarily removed, resp. removed
    on saves with garbage collection. *Changed in v1.19.4:* If the key is no path
    hierarchy (i.e. contains no slash “/”), then it will be completely removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bool** – one of the strings `"true"` or `"false"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** – a valid PDF name with a leading slash like this: `"/PageLayout"`.
    See page 16 of the [Adobe PDF References](app3.html#adobemanual).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**string** – a valid PDF string. **All PDF strings must be enclosed by brackets**.
    Denote the empty string as `"()"`. Depending on its content, the possible brackets
    are'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“(…)” for ASCII-only text. Reserved PDF characters must be backslash-escaped
    and non-ASCII characters must be provided as 3-digit backslash-escaped octals
    – including leading zeros. Example: 12 = 0x0C must be encoded as `014`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “<…>” for hex-encoded text. Every character must be represented by two hex-digits
    (lower or upper case).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If in doubt, we **strongly recommend** to use [`get_pdf_str()`](functions.html#get_pdf_str
    "get_pdf_str")! This function automatically generates the right brackets, escapes,
    and overall format. It will for example do conversions like these:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Creates a pixmap from page *pno* (zero-based). Invokes [`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap").
  prefs: []
  type: TYPE_NORMAL
- en: All parameters except `pno` are *keyword-only.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number, 0-based in `-∞ < pno < page_count`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.18.11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return a list of all XObjects referenced by a page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number, 0-based, `-∞ < pno < page_count`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a list of (non-image) XObjects. These objects typically represent pages *embedded*
    (not copied) from other PDFs. For example, [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page") will create this type of object. An item of this list has
    the following layout: `(xref, name, invoker, bbox)`, where'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) is the XObject’s [`xref`](glossary.html#xref "xref").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** (*str*) is the symbolic name to reference the XObject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invoker** (*int*) the [`xref`](glossary.html#xref "xref") of the invoking
    XObject or zero if the page directly invokes it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bbox** ([Rect](rect.html#rect)) the boundary box of the XObject’s location
    on the page **in untransformed coordinates**. To get actual, non-rotated page
    coordinates, multiply with the page’s transformation matrix [`Page.transformation_matrix`](page.html#Page.transformation_matrix
    "Page.transformation_matrix"). *Changed in v.18.11:* the bbox is now formatted
    as [Rect](rect.html#rect).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of all images (directly or indirectly) referenced by
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number, 0-based, `-∞ < pno < page_count`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full** (*bool*) – whether to also include the referencer’s [`xref`](glossary.html#xref
    "xref") (which is zero if this is the page).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of images **referenced** by this page. Each item looks like
  prefs: []
  type: TYPE_NORMAL
- en: '`(xref, smask, width, height, bpc, colorspace, alt. colorspace, name, filter,
    referencer)`'
  prefs: []
  type: TYPE_NORMAL
- en: Where
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) is the image object number'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**smask** (*int*) is the object number of its soft-mask image'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**width** and **height** (*ints*) are the image dimensions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**bpc** (*int*) denotes the number of bits per component (normally 8)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**colorspace** (*str*) a string naming the colorspace (like **DeviceRGB**)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**alt. colorspace** (*str*) is any alternate colorspace depending on the value
    of **colorspace**'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name** (*str*) is the symbolic name by which the image is referenced'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filter** (*str*) is the decode filter of the image ([Adobe PDF References](app3.html#adobemanual),
    pp. 22).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**referencer** (*int*) the [`xref`](glossary.html#xref "xref") of the referencer.
    Zero if directly referenced by the page. Only present if *full=True*.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In general, this is not the list of images that are **actually displayed**.
    This method only parses several PDF objects to collect references to embedded
    images. It does not analyse the page’s [`contents`](glossary.html#contents "contents"),
    where all the actual image display commands are defined. To get this information,
    please use [`Page.get_image_info()`](page.html#Page.get_image_info "Page.get_image_info").
    Also have a look at the discussion in section [Structure of Dictionary Outputs](textpage.html#textpagedict).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return a list of all fonts (directly or indirectly) referenced by
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number, 0-based, `-∞ < pno < page_count`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full** (*bool*) – whether to also include the referencer’s [`xref`](glossary.html#xref
    "xref"). If *True*, the returned items are one entry longer. Use this option if
    you need to know, whether the page directly references the font. In this case
    the last entry is 0\. If the font is referenced by an `/XObject` of the page,
    you will find its [`xref`](glossary.html#xref "xref") here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of fonts referenced by this page. Each entry looks like
  prefs: []
  type: TYPE_NORMAL
- en: '**(xref, ext, type, basefont, name, encoding, referencer)**,'
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) is the font object number (may be zero if the PDF uses one
    of the builtin fonts directly)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**ext** (*str*) font file extension (e.g. “ttf”, see [Font File Extensions](vars.html#fontextensions))'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**type** (*str*) is the font type (like “Type1” or “TrueType” etc.)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**basefont** (*str*) is the base font name,'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name** (*str*) is the symbolic name, by which the font is referenced'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**encoding** (*str*) the font’s character encoding if different from its built-in
    encoding ([Adobe PDF References](app3.html#adobemanual), p. 254):'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**referencer** (*int* optional) the [`xref`](glossary.html#xref "xref") of
    the referencer. Zero if directly referenced by the page, otherwise the xref of
    an XObject. Only present if *full=True*.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'This list has no duplicate entries: the combination of [`xref`](glossary.html#xref
    "xref"), *name* and *referencer* is unique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, this is a superset of the fonts actually in use by this page. The
    PDF creator may e.g. have specified some global list, of which each page only
    makes partial use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Extracts the text of a page given its page number *pno* (zero-based). Invokes
    [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number, 0-based, any value `-∞ < pno < page_count`.'
  prefs: []
  type: TYPE_NORMAL
- en: For other parameter refer to the page method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Re-paginate (“reflow”) the document based on the given page dimension and fontsize.
    This only affects some document types like e-books and HTML. Ignored if not supported.
    Supported documents have *True* in property [`is_reflowable`](#Document.is_reflowable
    "Document.is_reflowable").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – desired page size. Must be finite, not empty and start
    at point (0, 0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*float*) – use it together with *height* as alternative to *rect*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** (*float*) – use it together with *width* as alternative to *rect*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the desired default fontsize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Keeps only those pages of the document whose numbers occur in the
    list. Empty sequences or elements outside `range(doc.page_count)` will cause a
    *ValueError*. For more details see remarks at the bottom or this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**s** (*sequence*) – The sequence (see [Using Python Sequences as Arguments
    in PyMuPDF](app3.html#sequencetypes)) of page numbers (zero-based) to be included.
    Pages not in the sequence will be deleted (from memory) and become unavailable
    until the document is reopened. **Page numbers can occur multiple times and in
    any order:** the resulting document will reflect the sequence exactly as specified.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Page numbers in the sequence need not be unique nor be in any particular order.
    This makes the method a versatile utility to e.g. select only the even or the
    odd pages or meeting some other criteria and so forth.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a technical level, the method will always create a new [`pagetree`](glossary.html#pagetree
    "pagetree").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When dealing with only a few pages, methods [`copy_page()`](#Document.copy_page
    "Document.copy_page"), [`move_page()`](#Document.move_page "Document.move_page"),
    [`delete_page()`](#Document.delete_page "Document.delete_page") are easier to
    use. In fact, they are also **much faster** – by at least one order of magnitude
    when the document has many pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Sets or updates the metadata of the document as specified in *m*,
    a Python dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**m** (*dict*) – A dictionary with the same keys as *metadata* (see below).
    All keys are optional. A PDF’s format and encryption method cannot be set or changed
    and will be ignored. If any value should not contain data, do not specify its
    key or set the value to `None`. If you use *{}* all metadata information will
    be cleared to the string *“none”*. If you want to selectively change only some
    values, modify a copy of *doc.metadata* and use it as the argument. Arbitrary
    unicode values are possible if specified as UTF-8-encoded.'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.18.4)* Empty values or “none” are no longer written, but completely
    omitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Get the document XML metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: XML metadata of the document. Empty string if not present or not a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Sets or updates XML metadata of the document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xml** (*str*) – the new XML metadata. Should be XML syntax, however no checking
    is done by this method and any string is accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Set the `/PageLayout`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** (*str*) – one of the strings “SinglePage”, “OneColumn”, “TwoColumnLeft”,
    “TwoColumnRight”, “TwoPageLeft”, “TwoPageRight”. Lower case is supported.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Set the `/PageMode`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** (*str*) – one of the strings “UseNone”, “UseOutlines”, “UseThumbs”,
    “FullScreen”, “UseOC”, “UseAttachments”. Lower case is supported.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Set the `/MarkInfo` values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** (*dict*) – a dictionary like this one: `{"Marked": False, "UserProperties":
    False, "Suspects": False}`. This dictionary contains information about the usage
    of Tagged PDF conventions. For details please see the [PDF specifications](https://opensource.adobe.com/dc-acrobat-sdk-docs/standards/pdfstandards/pdf/PDF32000_2008.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Replaces the **complete current outline** tree (table of contents)
    with the one provided as the argument. After successful execution, the new outline
    tree can be accessed as usual via [`Document.get_toc()`](#Document.get_toc "Document.get_toc")
    or via [`Document.outline`](#Document.outline "Document.outline"). Like with other
    output-oriented methods, changes become permanent only via [`save()`](#Document.save
    "Document.save") (incremental save supported). Internally, this method consists
    of the following two steps. For a demonstration see example below.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 deletes all existing bookmarks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 2 creates a new TOC from the entries contained in *toc*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**toc** (*sequence*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list / tuple with **all bookmark entries** that should form the new table
    of contents. Output variants of [`get_toc()`](#Document.get_toc "Document.get_toc")
    are acceptable. To completely remove the table of contents specify an empty sequence
    or None. Each item must be a list with the following format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[lvl, title, page [, dest]] where'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lvl** is the hierarchy level (int > 0) of the item, which **must be 1** for
    the first item and at most 1 larger than the previous one.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**title** (str) is the title to be displayed. It is assumed to be UTF-8-encoded
    (relevant for multibyte code points only).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**page** (int) is the target page number **(attention: 1-based)**. Must be
    in valid range if positive. Set it to -1 if there is no target, or the target
    is external.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dest** (optional) is a dictionary or a number. If a number, it will be interpreted
    as the desired height (in points) this entry should point to on the page. Use
    a dictionary (like the one given as output by `get_toc(False)`) for a detailed
    control of the bookmark’s properties, see [`Document.get_toc()`](#Document.get_toc
    "Document.get_toc") for a description.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**collapse** (*int*) – *(new in v1.16.9)* controls the hierarchy level beyond
    which outline entries should initially show up collapsed. The default 1 will hence
    only display level 1, higher levels must be unfolded using the PDF viewer. To
    unfold everything, specify either a large integer, 0 or None.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the number of inserted, resp. deleted items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.23.8: Destination ‘to’ coordinates should now be in the same
    coordinate system as those returned by [`get_toc()`](#Document.get_toc "Document.get_toc")
    (internally they are now transformed with `page.cropbox` and `page.rotation_matrix`).
    So for example `set_toc(get_toc())` now gives unchanged destination ‘to’ coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the [`xref`](glossary.html#xref "xref") of the outline item.
    This is mainly used for internal purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'arg int idx: index of the item in list [`Document.get_toc()`](#Document.get_toc
    "Document.get_toc").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`xref`](glossary.html#xref "xref").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.14: no longer remove the item’s text, but show it grayed-out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Remove this TOC item. This is a high-speed method, which **disables**
    the respective item, but leaves the overall TOC structure intact. Physically,
    the item still exists in the TOC tree, but is shown grayed-out and will no longer
    point to any destination.'
  prefs: []
  type: TYPE_NORMAL
- en: This also implies that you can reassign the item to a new destination using
    [`Document.set_toc_item()`](#Document.set_toc_item "Document.set_toc_item"), when
    required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**idx** (*int*) – the index of the item in list [`Document.get_toc()`](#Document.get_toc
    "Document.get_toc").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.18.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Changes the TOC item identified by its index. Change the item **title**,
    **destination**, **appearance** (color, bold, italic) or collapsing sub-items
    – or to remove the item altogether.'
  prefs: []
  type: TYPE_NORMAL
- en: Use this method if you need specific changes for selected entries only and want
    to avoid replacing the complete TOC. This is beneficial especially when dealing
    with large table of contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**idx** (*int*) – the index of the entry in the list created by [`Document.get_toc()`](#Document.get_toc
    "Document.get_toc").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dest_dict** (*dict*) – the new destination. A dictionary like the last entry
    of an item in `doc.get_toc(False)`. Using this as a template is recommended. When
    given, **all other parameters are ignored** – except title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kind** (*int*) – the link kind, see [Link Destination Kinds](vars.html#linkdest-kinds).
    If [`LINK_NONE`](vars.html#LINK_NONE "LINK_NONE"), then all remaining parameter
    will be ignored, and the TOC item will be removed – same as [`Document.del_toc_item()`](#Document.del_toc_item
    "Document.del_toc_item"). If None, then only the title is modified and the remaining
    parameters are ignored. All other values will lead to making a new destination
    dictionary using the subsequent arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pno** (*int*) – the 1-based page number, i.e. a value 1 <= pno <= doc.page_count.
    Required for LINK_GOTO.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uri** (*str*) – the URL text. Required for LINK_URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**title** (*str*) – the desired new title. None if no change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to** (*point_like*) – (optional) points to a coordinate on the target page.
    Relevant for LINK_GOTO. If omitted, a point near the page’s top is chosen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** (*str*) – required for LINK_GOTOR and LINK_LAUNCH.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**zoom** (*float*) – use this zoom factor when showing the target page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example use:** Change the TOC of the SWIG manual to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Collapse everything below top level and show the chapter on Python support
    in red, bold and italic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we have changed only 42 of the 1240 TOC items of the
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Convert annotations and / or widgets to become permanent parts of
    the pages. The PDF **will be changed** by this method. If [`widgets`](page.html#Page.widgets
    "Page.widgets") is `True`, the document will also no longer be a “Form PDF”.'
  prefs: []
  type: TYPE_NORMAL
- en: All pages will look the same, but will no longer have annotations, respectively
    fields. The visible parts will be converted to standard text, vector graphics
    or images as required.
  prefs: []
  type: TYPE_NORMAL
- en: The method may thus be a viable **alternative for PDF-to-PDF conversions** using
    [`Document.convert_to_pdf()`](#Document.convert_to_pdf "Document.convert_to_pdf").
  prefs: []
  type: TYPE_NORMAL
- en: Please consider that annotations are complex objects and may consist of more
    data “underneath” their visual appearance. Examples are “Text” and “FileAttachment”
    annotations. When “baking in” annotations / widgets with this method, all this
    underlying information (attached files, comments, associated PopUp annotations,
    etc.) will be lost and be removed on next garbage collection.
  prefs: []
  type: TYPE_NORMAL
- en: Use this feature for instance for methods [`Document.insert_pdf()`](#Document.insert_pdf
    "Document.insert_pdf") (which supports no copying of widgets) or [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page") (which supports neither annotations nor widgets) when the
    source pages should look exactly the same in the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**annots** (*bool*) – convert annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**widgets** (*bool*) – convert fields / widgets. After execution, the document
    will no longer be a “Form PDF”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether the document can be saved incrementally. Use it to choose the
    right option without encountering exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Remove potentially sensitive data from the PDF. This function is
    inspired by the similar “Sanitize” function in Adobe Acrobat products. The process
    is configurable by a number of options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**attached_files** (*bool*) – Search for ‘FileAttachment’ annotations and remove
    the file content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_pages** (*bool*) – Remove any comments from page painting sources.
    If this option is set to *False*, then this is also done for *hidden_text* and
    *redactions*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**embedded_files** (*bool*) – Remove embedded files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_text** (*bool*) – Remove OCRed text and invisible text [[7]](#f7).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**javascript** (*bool*) – Remove JavaScript sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**metadata** (*bool*) – Remove PDF standard metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**redactions** (*bool*) – Apply redaction annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**redact_images** (*int*) – how to handle images if applying redactions. One
    of 0 (ignore), 1 (blank out overlaps) or 2 (remove).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**remove_links** (*bool*) – Remove all links.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reset_fields** (*bool*) – Reset all form fields to their defaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reset_responses** (*bool*) – Remove all responses from all annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**thumbnails** (*bool*) – Remove thumbnail images from pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xml_metadata** (*bool*) – Remove XML metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Changed in v1.18.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.24.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Saves the document in its **current state**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**outfile** (*str**,**Path**,**fp*) – The file path, `pathlib.Path` or file
    object to save to. A file object must have been created before via `open(...)`
    or `io.BytesIO()`. Choosing `io.BytesIO()` is similar to [`Document.tobytes()`](#Document.tobytes
    "Document.tobytes") below, which equals the `getvalue()` output of an internally
    created `io.BytesIO()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**garbage** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do garbage collection. Positive values exclude “incremental”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0 = none
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 = remove unused (unreferenced) objects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 = in addition to 1, compact the [`xref`](glossary.html#xref "xref") table.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 = in addition to 2, merge duplicate objects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 = in addition to 3, check [`stream`](glossary.html#stream "stream") objects
    for duplication. This may be slow because such data are typically large.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean** (*bool*) – Clean and sanitize content streams [[1]](#f1). Corresponds
    to “mutool clean -sc”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**deflate** (*bool*) – Deflate (compress) uncompressed streams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**deflate_images** (*bool*) – *(new in v1.18.3)* Deflate (compress) uncompressed
    image streams [[4]](#f4).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**deflate_fonts** (*bool*) – *(new in v1.18.3)* Deflate (compress) uncompressed
    fontfile streams [[4]](#f4).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**incremental** (*bool*) – Only save changes to the PDF. Excludes “garbage”
    and “linear”. Can only be used if *outfile* is a string or a `pathlib.Path` and
    equal to [`Document.name`](#Document.name "Document.name"). Cannot be used for
    files that are decrypted or repaired and also in some other cases. To be sure,
    check [`Document.can_save_incrementally()`](#Document.can_save_incrementally "Document.can_save_incrementally").
    If this is false, saving to a new file is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ascii** (*bool*) – convert binary data to ASCII.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expand** (*int*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decompress objects. Generates versions that can be better read by some other
    programs and will lead to larger files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0 = none
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 = images
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 = fonts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 255 = all
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**linear** (*bool*) – Save a linearised version of the document. This option
    creates a file format for improved performance for Internet access. Excludes “incremental”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pretty** (*bool*) – Prettify the document source for better readability.
    PDF objects will be reformatted to look like the default output of [`Document.xref_object()`](#Document.xref_object
    "Document.xref_object").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**no_new_id** (*bool*) – Suppress the update of the file’s `/ID` field. If
    the file happens to have no such field at all, also suppress creation of a new
    one. Default is `False`, so every save will lead to an updated file identification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**permissions** (*int*) – *(new in v1.16.0)* Set the desired permission levels.
    See [Document Permissions](vars.html#permissioncodes) for possible values. Default
    is granting all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encryption** (*int*) – *(new in v1.16.0)* set the desired encryption method.
    See [PDF encryption method codes](vars.html#encryptionmethods) for possible values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**owner_pw** (*str*) – *(new in v1.16.0)* set the document’s owner password.
    *(Changed in v1.18.3)* If not provided, the user password is taken if provided.
    The string length must not exceed 40 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**user_pw** (*str*) – *(new in v1.16.0)* set the document’s user password.
    The string length must not exceed 40 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_objstms** (*int*) – *(new in v1.24.0)* compression option that converts
    eligible PDF object definitions to information that is stored in some other object’s
    [`stream`](glossary.html#stream "stream") data. Depending on the `deflate` parameter
    value, the converted object definitions will be compressed – which can lead to
    very significant file size reductions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The method does not check, whether a file of that name already exists, will
    hence not ask for confirmation, and overwrite the file. It is your responsibility
    as a programmer to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**File size reduction**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Use the save options like `garbage=3|4, deflate=True, use_objstms=True|1`.
    Do not touch the default values `expand=False|0, clean=False|0, incremental=False|0`.
    This is a “lossless” file size reduction. There is a convenience version of this
    method with these values set by default, [`Document.ez_save()`](#Document.ez_save
    "Document.ez_save") – please see below.
  prefs: []
  type: TYPE_NORMAL
- en: “Lossy” file size reduction in essence must give up something with respect to
    images, like (a) remove all images (b) replace images by their grayscale versions
    (c) reduce image resolutions. Find examples in the [PyMuPDF Utilities “replace-image”
    folder](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/replace-image).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: The same as [`Document.save()`](#Document.save "Document.save") but
    with changed defaults `deflate=True, garbage=3, use_objstms=1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: saves the document incrementally. This is a convenience abbreviation
    for *doc.save(doc.name, incremental=True, encryption=PDF_ENCRYPT_KEEP)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Saving incrementally may be required if the document contains verified signatures
    which would be invalidated by saving to a new file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Changed in v1.18.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.24.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Writes the **current content of the document** to a bytes object
    instead of to a file. Obviously, you should be wary about memory requirements.
    The meanings of the parameters exactly equal those in [`save()`](#Document.save
    "Document.save"). Chapter [FAQ](faq.html#faq) contains an example for using this
    method as a pre-processor to [pdfrw](https://pypi.python.org/pypi/pdfrw/0.3).'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.16.0)* for extended encryption support.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a bytes object containing the complete document.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Search for “text” on page number “pno”. Works exactly like the corresponding
    [`Page.search_for()`](page.html#Page.search_for "Page.search_for"). Any integer
    `-∞ < pno < page_count` is acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Changed in v1.19.3 - as a fix to issue [#537](https://github.com/pymupdf/PyMuPDF/issues/537),
    form fields are always excluded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Copy the page range **[from_page, to_page]** (including both) of
    PDF document *docsrc* into the current one. Inserts will start with page number
    *start_at*. Value -1 indicates default values. All pages thus copied will be rotated
    as specified. Links and annotations can be excluded in the target, see below.
    All page numbers are 0-based.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**docsrc** (*Document*) – An opened PDF *Document* which must not be the current
    document. However, it may refer to the same underlying file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**from_page** (*int*) – First page number in *docsrc*. Default is zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to_page** (*int*) – Last page number in *docsrc* to copy. Defaults to last
    page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_at** (*int*) – First copied page, will become page number *start_at*
    in the target. Default -1 appends the page range to the end. If zero, the page
    range will be inserted before current first page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – All copied pages will be rotated by the provided value
    (degrees, integer multiple of 90).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**links** (*bool*) – Choose whether (internal and external) links should be
    included in the copy. Default is `True`. *Named* links ([`LINK_NAMED`](vars.html#LINK_NAMED
    "LINK_NAMED")) and internal links to outside the copied page range are **always
    excluded**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**annots** (*bool*) – *(new in v1.16.1)* choose whether annotations should
    be included in the copy. Form **fields can never be copied** – see below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** (*int*) – *(new in v1.17.7)* specify an interval size greater
    zero to see progress messages on `sys.stdout`. After each interval, a message
    like `Inserted 30 of 47 pages.` will be printed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**final** (*int*) – *(new in v1.18.0)* controls whether the list of already
    copied objects should be **dropped** after this method, default *True*. Set it
    to 0 except for the last one of multiple insertions from the same source PDF.
    This saves target file size and speeds up execution considerably.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is a page-based method. Document-level information of source documents
    is therefore ignored. Examples include Optional Content, Embedded Files, `StructureElem`,
    `AcroForm`, table of contents, page labels, metadata, named destinations (and
    other named entries) and some more. As a consequence, specifically, **Form Fields
    (widgets) can never be copied** – although they seem to appear on pages only.
    Look at [`Document.bake()`](#Document.bake "Document.bake") for converting a source
    document if you need to retain at least widget **appearances.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `from_page > to_page`, pages will be **copied in reverse order**. If `0 <=
    from_page == to_page`, then one page will be copied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docsrc` TOC entries **will not be copied**. It is easy however, to recover
    a table of contents for the resulting document. Look at the examples below and
    at program [join.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)
    in the *examples* directory: it can join PDF documents and at the same time piece
    together respective parts of the tables of contents.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Add an arbitrary supported document to the current PDF. Opens “infile”
    as a document, converts it to a PDF and then invokes [`Document.insert_pdf()`](#Document.insert_pdf
    "Document.insert_pdf"). Parameters are the same as for that method. Among other
    things, this features an easy way to append images as full pages to an output
    PDF.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**infile** (*multiple*) – the input document to insert. May be a filename specification
    as is valid for creating a [Document](#document) or a [Pixmap](pixmap.html#pixmap).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert an empty page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – page number in front of which the new page should be inserted.
    Must be in *1 < pno <= page_count*. Special values -1 and *doc.page_count* insert
    **after** the last page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width** (*float*) – page width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** (*float*) – page height.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Page](page.html#page)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the created page object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert a new page and insert some text. Convenience function which
    combines [`Document.new_page()`](#Document.new_page "Document.new_page") and (parts
    of) [`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) –'
  prefs: []
  type: TYPE_NORMAL
- en: page number (0-based) **in front of which** to insert. Must be in `range(-1,
    doc.page_count + 1)`. Special values -1 and `doc.page_count` insert **after**
    the last page.
  prefs: []
  type: TYPE_NORMAL
- en: Changed in v1.14.12
  prefs: []
  type: TYPE_NORMAL
- en: This is now a positional parameter
  prefs: []
  type: TYPE_NORMAL
- en: For the other parameters, please consult the aforementioned methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the result of [`Page.insert_text()`](page.html#Page.insert_text "Page.insert_text")
    (number of successfully inserted lines).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Delete a page given by its 0-based number in `-∞ < pno < page_count
    - 1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in v1.18.14: support Python’s `del` statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – the page to be deleted. Negative number count backwards from
    the end of the document (like with indices). Default is the last page.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.18.13: more flexibility specifying pages to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.18.14: support Python’s `del` statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Delete multiple pages given as 0-based numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format 1:** Use keywords. Represents the old format. A contiguous range of
    pages is removed.'
  prefs: []
  type: TYPE_NORMAL
- en: '“from_page”: first page to delete. Zero if omitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“to_page”: last page to delete. Last page in document if omitted. Must not
    be less then “from_page”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Format 2:** Two page numbers as positional parameters. Handled like Format
    1.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format 3:** One positional integer parameter. Equivalent to `Page.delete_page()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format 4:** One positional parameter of type *list*, *tuple* or *range()*
    of page numbers. The items of this sequence may be in any order and may contain
    duplicates.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format 5:** *(New in v1.18.14)* Using the Python `del` statement and index
    / slice notation is now possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.14.17, optimized in v1.17.7)* In an effort to maintain a valid
    PDF structure, this method and [`delete_page()`](#Document.delete_page "Document.delete_page")
    will also deactivate items in the table of contents which point to deleted pages.
    “Deactivation” here means, that the bookmark will point to nowhere and the title
    will be shown grayed-out by supporting PDF viewers. The overall TOC structure
    is left intact.'
  prefs: []
  type: TYPE_NORMAL
- en: It will also remove any **links on remaining pages** which point to a deleted
    one. This action may have an extended response time for documents with many pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following examples will all delete pages 500 through 519:'
  prefs: []
  type: TYPE_NORMAL
- en: '`doc.delete_pages(500, 519)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc.delete_pages(from_page=500, to_page=519)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc.delete_pages((500, 501, 502, ... , 519))`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc.delete_pages(range(500, 520))`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`del doc[500:520]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`del doc[(500, 501, 502, ... , 519)]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`del doc[range(500, 520)]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the [Adobe PDF References](app3.html#adobemanual) the above takes about
    0.6 seconds, because the remaining 1290 pages must be cleaned from invalid links.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the performance of this method is dependent on the number of remaining
    pages – **not** on the number of deleted pages: in the above example, **deleting
    all pages except** those 20, will need much less time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Copy a page reference within the document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – the page to be copied. Must be in range `0 <= pno < page_count`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to** (*int*) – the page number in front of which to copy. The default inserts
    **after** the last page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Only a new **reference** to the page object will be created – not a new page
    object, all copied pages will have identical attribute values, including the [`Page.xref`](page.html#Page.xref
    "Page.xref"). This implies that any changes to one of these copies will appear
    on all of them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.14.17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Make a full copy (duplicate) of a page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – the page to be duplicated. Must be in range `0 <= pno < page_count`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to** (*int*) – the page number in front of which to copy. The default inserts
    **after** the last page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to [`copy_page()`](#Document.copy_page "Document.copy_page"), this
    method creates a new page object (with a new [`xref`](glossary.html#xref "xref")),
    which can be changed independently from the original.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any Popup and “IRT” (“in response to”) annotations are **not copied** to avoid
    potentially incorrect situations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Move (copy and then delete original) a page within the document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pno** (*int*) – the page to be moved. Must be in range `0 <= pno < page_count`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to** (*int*) – the page number in front of which to insert the moved page.
    The default moves **after** the last page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Get or set the */NeedAppearances* property of Form PDFs. Quote: *“(Optional)
    A flag specifying whether to construct appearance streams and appearance dictionaries
    for all widget annotations in the document … Default value: false.”* This may
    help controlling the behavior of some readers / viewers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** (*bool*) – set the property to this value. If omitted or `None`,
    inquire the current value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'None: not a Form PDF, or property not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True / False: the value of the property (either just set or existing for inquiries).
    Has no effect if no Form PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Return whether the document contains signature fields. This is an
    optional PDF property: if not present (return value -1), no conclusions can be
    drawn – the PDF creator may just not have bothered using it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '-1: not a Form PDF / no signature fields recorded / no *SigFlags* found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1: at least one signature field exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3: contains signatures that may be invalidated if the file is saved (written)
    in a way that alters its previous contents, as opposed to an incremental update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.14.16: The sequence of positional parameters “name” and “buffer”
    has been changed to comply with the call pattern of other functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Embed a new file. All string parameters except the name may be unicode
    (in previous versions, only ASCII worked correctly). File contents will be compressed
    (where beneficial).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (*str*) – entry identifier, **must not already exist**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**buffer** (*bytes**,**bytearray**,**BytesIO*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file contents.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(Changed in v1.14.13)* *io.BytesIO* is now also supported.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filename** (*str*) – optional filename. Documentation only, will be set to
    *name* if `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ufilename** (*str*) – optional unicode filename. Documentation only, will
    be set to *filename* if `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**desc** (*str*) – optional description. Documentation only, will be set to
    *name* if `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.18.13)* The method now returns the [`xref`](glossary.html#xref
    "xref") of the inserted file. In addition, the file object now will be automatically
    given the PDF keys `/CreationDate` and `/ModDate` based on the current date-time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.14.16: This is now a method. In previous versions, this was a
    property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the number of embedded files.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Retrieve the content of embedded file by its entry number or name.
    If the document is not a PDF, or entry cannot be found, an exception is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*int**,**str*) – index or name of entry. An integer must be in `range(embfile_count())`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.14.16: Items can now be deleted by index, too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Remove an entry from `/EmbeddedFiles`. As always, physical deletion
    of the embedded file content (and file space regain) will occur only when the
    document is saved to a new file with a suitable garbage option.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*int/str*) – index or name of entry.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: When specifying an entry name, this function will only **delete the first item**
    with that name. Be aware that PDFs not created with PyMuPDF may contain duplicate
    names. So you may want to take appropriate precautions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Changed in v1.18.13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Retrieve information of an embedded file given by its number or by
    its name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*int/str*) – index or name of entry. An integer must be in `range(embfile_count())`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a dictionary with the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '*name* – (*str*) name under which this entry is stored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*filename* – (*str*) filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ufilename* – (*unicode*) filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*desc* – (*str*) description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*size* – (*int*) original file size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*length* – (*int*) compressed file length'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*creationDate* – *(New in v1.18.13)* (*str*) date-time of item creation in
    PDF format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*modDate* – *(New in v1.18.13)* (*str*) date-time of last change in PDF format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*collection* – *(New in v1.18.13)* (*int*) [`xref`](glossary.html#xref "xref")
    of the associated PDF portfolio item if any, else zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*checksum* – *(New in v1.18.13)* (*str*) a hashcode of the stored file content
    as a hexadecimal string. Should be MD5 according to PDF specifications, but be
    prepared to see other hashing algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.14.16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return a list of embedded file names. The sequence of the names equals
    the physical sequence in the document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Change an embedded file given its entry number or name. All parameters
    are optional. Letting them default leads to a no-operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**item** (*int/str*) – index or name of entry. An integer must be in `range(embfile_count())`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**buffer** (*bytes**,**bytearray**,**BytesIO*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the new file content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(Changed in v1.14.13)* *io.BytesIO* is now also supported.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filename** (*str*) – the new filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ufilename** (*str*) – the new unicode filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**desc** (*str*) – the new description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*(Changed in v1.18.13)* The method now returns the [`xref`](glossary.html#xref
    "xref") of the file object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: xref of the file object. Automatically, its `/ModDate` PDF key will be updated
    with the current date-time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Release objects and space allocations associated with the document. If created
    from a file, also closes *filename* (releasing control to the OS). Explicitly
    closing a document is equivalent to deleting it, `del doc`, or assigning it to
    something else like `doc = None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.18.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the definition source of a PDF object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – the object’s [`xref`](glossary.html#xref "xref"). *Changed
    in v1.18.10:* A value of `-1` returns the PDF trailer source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**compressed** (*bool*) – whether to generate a compact output with no line
    breaks or spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ascii** (*bool*) – whether to ASCII-encode binary data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object definition source.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the [`xref`](glossary.html#xref "xref") number of the PDF
    catalog (or root) object. Use that number with [`Document.xref_object()`](#Document.xref_object
    "Document.xref_object") to see its source.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the trailer source of the PDF, which is usually located at
    the PDF file’s end. This is [`Document.xref_object()`](#Document.xref_object "Document.xref_object")
    with an *xref* argument of -1.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the **decompressed** contents of the [`xref`](glossary.html#xref
    "xref") stream object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – [`xref`](glossary.html#xref "xref") number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the (decompressed) stream of the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the **unmodified** (esp. **not decompressed**) contents of
    the [`xref`](glossary.html#xref "xref") stream object. Otherwise equal to [`Document.xref_stream()`](#Document.xref_stream
    "Document.xref_stream").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bytes
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the (original, unmodified) stream of the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Replace object definition of [`xref`](glossary.html#xref "xref")
    with the provided string. The xref may also be new, in which case this instruction
    completes the object definition. If a page object is also given, its links and
    annotations will be reloaded afterwards.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – [`xref`](glossary.html#xref "xref") number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**obj_str** (*str*) – a string containing a valid PDF object definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**page** ([Page](page.html#page)) – a page object. If provided, indicates,
    that annotations of this page should be refreshed (reloaded) to reflect changes
    incurred with links and / or annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: zero if successful, otherwise an exception will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: New in v.1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.2: added parameter “compress”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in v1.19.6: deprecated parameter “new”. Now confirms that the object
    is a PDF dictionary object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the stream of an object identified by *xref*, which must be a PDF dictionary.
    If the object is no [`stream`](glossary.html#stream "stream"), it will be turned
    into one. The function automatically performs a compress operation (“deflate”)
    where beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – [`xref`](glossary.html#xref "xref") number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stream** (*bytes**|**bytearray**|**BytesIO*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the new content of the stream.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(Changed in v1.14.13:)* *io.BytesIO* objects are now also supported.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**new** (*bool*) – *deprecated* and ignored. Will be removed some time after
    v1.20.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**compress** (*bool*) – whether to compress the inserted stream. If `True`
    (default), the stream will be inserted using `/FlateDecode` compression (if beneficial),
    otherwise the stream will inserted as is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError** – if *xref* does not represent a PDF `dict`. An empty dictionary
    `<<>>` is accepted. So if you just created the xref and want to give it a stream,
    first execute `doc.update_object(xref, "<<>>")`, and then insert the stream data
    with this method.'
  prefs: []
  type: TYPE_NORMAL
- en: The method is primarily (but not exclusively) intended to manipulate streams
    containing PDF operator syntax (see pp. 643 of the [Adobe PDF References](app3.html#adobemanual))
    as it is the case for e.g. page content streams.
  prefs: []
  type: TYPE_NORMAL
- en: If you update a contents stream, consider using save parameter *clean=True*
    to ensure consistency between PDF operator source and the object structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Let us assume that you no longer want a certain image appear on a
    page. This can be achieved by deleting the respective reference in its contents
    source(s) – and indeed: the image will be gone after reloading the page. But the
    page’s [`resources`](glossary.html#resources "resources") object would still show
    the image as being referenced by the page. This save option will clean up any
    such mismatches.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF Only: Make *target* xref an exact copy of *source*. If *source* is a [`stream`](glossary.html#stream
    "stream"), then these data are also copied.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**source** (*int*) – the source [`xref`](glossary.html#xref "xref"). It must
    be an existing **dictionary** object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*int*) – the target xref. Must be an existing **dictionary** object.
    If the xref has just been created, make sure to initialize it as a PDF dictionary
    with the minimum specification `<<>>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep** (*list*) – an optional list of top-level keys in *target*, that should
    not be removed in preparation of the copy process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method has much in common with Python’s *dict* method [`copy()`](pixmap.html#Pixmap.copy
    "Pixmap.copy").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both xref numbers must represent existing dictionaries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before data is copied from *source*, all *target* dictionary keys are deleted.
    You can specify exceptions from this in the *keep* list. If *source* however has
    a same-named key, its value will still replace the target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *source* is a [`stream`](glossary.html#stream "stream") object, then these
    data will also be copied over, and *target* will be converted to a stream object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A typical use case is to replace or remove an existing image without using redaction
    annotations. Example scripts can be seen [here](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/replace-image).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF Only: Extract data and meta information of an image stored in the document.
    The output can directly be used to be stored as an image file, as input for PIL,
    [Pixmap](pixmap.html#pixmap) creation, etc. This method avoids using pixmaps wherever
    possible to present the image in its original format (e.g. as JPEG).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – [`xref`](glossary.html#xref "xref") of an image object.
    If this is not in `range(1, doc.xref_length())`, or the object is no image or
    other errors occur, `None` is returned and no exception is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a dictionary with the following keys
  prefs: []
  type: TYPE_NORMAL
- en: '*ext* (*str*) image type (e.g. *‘jpeg’*), usable as image file extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*smask* (*int*) [`xref`](glossary.html#xref "xref") number of a stencil (/SMask)
    image or zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*width* (*int*) image width'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*height* (*int*) image height'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*colorspace* (*int*) the image’s *colorspace.n* number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*cs-name* (*str*) the image’s *colorspace.name*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*xres* (*int*) resolution in x direction. Please also see [`resolution`](glossary.html#resolution
    "resolution").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*yres* (*int*) resolution in y direction. Please also see [`resolution`](glossary.html#resolution
    "resolution").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*image* (*bytes*) image data, usable as image file content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is a functional overlap with *pix = pymupdf.Pixmap(doc, xref)*, followed
    by a *pix.tobytes()*. Main differences are that extract_image, **(1)** does not
    always deliver PNG image formats, **(2)** is **very** much faster with non-PNG
    images, **(3)** usually results in much less disk storage for extracted images,
    **(4)** returns `None` in error cases (generates no exception). Look at the following
    example images within the same PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'xref 1268 is a PNG – Comparable execution time and identical output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'xref 1186 is a JPEG – [`Document.extract_image()`](#Document.extract_image
    "Document.extract_image") is **many times faster** and produces a **much smaller**
    output (2.48 MB vs. 0.35 MB):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.19.4: return a dictionary if `named == True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF Only: Return an embedded font file’s data and appropriate file extension.
    This can be used to store the font as an external file. The method does not throw
    exceptions (other than via checking for PDF and valid [`xref`](glossary.html#xref
    "xref")).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xref** (*int*) – PDF object number of the font to extract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**info_only** (*bool*) – only return font information, not the buffer. To be
    used for information-only purposes, avoids allocation of large buffer areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**named** (*bool*) – If true, a dictionary with the following keys is returned:
    ‘name’ (font base name), ‘ext’ (font file extension), ‘type’ (font type), ‘content’
    (font file content).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple,dict
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a tuple `(basename, ext, type, content)`, where *ext* is a 3-byte suggested
    file extension (*str*), *basename* is the font’s name (*str*), *type* is the font’s
    type (e.g. “Type1”) and *content* is a bytes object containing the font file’s
    content (or *b””*). For possible extension values and their meaning see [Font
    File Extensions](vars.html#fontextensions). Return details on error:'
  prefs: []
  type: TYPE_NORMAL
- en: '`("", "", "", b"")` – invalid xref or xref is not a (valid) font object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(basename, "n/a", "Type1", b"")` – *basename* is not embedded and thus cannot
    be extracted. This is the case for e.g. the [PDF Base 14 Fonts](app3.html#base-14-fonts)
    and Type 3 fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The basename is returned unchanged from the PDF. So it may contain characters
    (such as blanks) which may disqualify it as a filename for your operating system.
    Take appropriate action.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The returned *basename* in general is **not** the original file name, but it
    probably has some similarity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If parameter `named == True`, a dictionary with the following keys is returned:
    `{''name'': ''T1'', ''ext'': ''n/a'', ''type'': ''Type3'', ''content'': b''''}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.16.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the [`xref`](glossary.html#xref "xref") of the document’s
    XML metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Check whether there are links, resp. annotations anywhere in the
    document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '*True* / *False*. As opposed to fields, which are also stored in a central
    place of a PDF document, the existence of links / annotations can only be detected
    by parsing each page. These methods are tuned to do this efficiently and will
    immediately return, if the answer is *True* for a page. For PDFs with many thousand
    pages however, an answer may take some time [[6]](#f6) if no link, resp. no annotation
    is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Investigate eligible fonts for their use by text in the document.
    If a font is supported and a size reduction is possible, that font is replaced
    by a version with a subset of its characters.'
  prefs: []
  type: TYPE_NORMAL
- en: Use this method immediately before saving the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**verbose** (*bool*) – write various progress information to sysout. This currently
    only has an effect if `fallback` is `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fallback** (*bool*) – if `True` use the deprecated algorithm that makes use
    of package [fontTools](https://pypi.org/project/fonttools/) (which hence must
    be installed). If using the recommended value `False` (default), MuPDF’s native
    function is used – which is **very much faster** and can subset a broader range
    of font types. Package fontTools is not required then.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The greatest benefit can be achieved when creating new PDFs using large fonts
    like is typical for Asian scripts. When using the [Story](story-class.html#story)
    class or method [`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox"),
    multiple fonts may automatically be included – without the programmer becoming
    aware of it.
  prefs: []
  type: TYPE_NORMAL
- en: In all these cases, the set of actually used unicodes mostly is very small compared
    to the number of glyphs available in the used fonts. Using this method can easily
    reduce the embedded font binaries by two orders of magnitude – from several megabytes
    down to a low two-digit kilobyte amount.
  prefs: []
  type: TYPE_NORMAL
- en: Creating font subsets leaves behind a large number of large, now unused PDF
    objects (“ghosts”). Therefore, make sure to compress and garbage-collect when
    saving the file. We recommend to use [`Document.ez_save()`](#Document.ez_save
    "Document.ez_save").
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>Show/hide history</summary></details> *   New in v1.18.7
  prefs: []
  type: TYPE_NORMAL
- en: Changed in v1.18.9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in v1.24.2 use native function of MuPDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Enable journalling. Use this before you start logging operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Start journalling an *“operation”* identified by a string “name”.
    Updates will fail for a journal-enabled PDF, if no operation has been started.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Stop the current operation. The updates between start and stop of
    an operation belong to the same unit of work and will be undone / redone together.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the numbers of the current operation and the total operation
    count.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a tuple `(step, steps)` containing the current operation number and the total
    number of operations in the journal. If **step** is 0, we are at the top of the
    journal. If **step** equals **steps**, we are at the bottom. Updating the PDF
    with anything other than undo or redo will automatically remove all journal entries
    after the current one and the new update will become the new last entry in the
    journal. The updates corresponding to the removed journal entries will be permanently
    lost.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Return the name of operation number *step.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Show whether forward (“redo”) and / or backward (“undo”) executions
    are possible from the current journal position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a dictionary `{"undo": bool, "redo": bool}`. The respective method is available
    if its value is `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Revert (undo) the current step in the journal. This moves towards
    the journal’s top.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Re-apply (redo) the current step in the journal. This moves towards
    the journal’s bottom.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Save the journal to a file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** (*str**,**fp*) – either a filename as string or a file object
    opened as “wb” (or an `io.BytesIO()` object).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Load journal from a file. Enables journalling for the document. If
    journalling is already enabled, an exception is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** (*str**,**fp*) – the filename (str) of the journal or a file object
    opened as “rb” (or an `io.BytesIO()` object).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.19.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PDF only: Saves a “snapshot” of the document. This is a PDF document with a
    special, incremental-save format compatible with journalling – therefore no save
    options are available. Saving a snapshot is not possible for new documents.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a normal PDF document with no usage restrictions whatsoever. If it is
    not being changed in any way, it can be used together with its journal to undo
    / redo operations or continue updating.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Contains the first [Outline](outline.html#outline) entry of the document (or
    `None`). Can be used as a starting point to walk through all outline items. Accessing
    this property for encrypted, not authenticated documents will raise an *AttributeError*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Outline](outline.html#outline)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '*False* if document is still open. If closed, most other attributes and methods
    will have been deleted / disabled. In addition, [Page](page.html#page) objects
    referring to this document (i.e. created with [`Document.load_page()`](#Document.load_page
    "Document.load_page")) and their dependent objects will no longer be usable. For
    reference purposes, [`Document.name`](#Document.name "Document.name") still exists
    and will contain the filename of the original document (if applicable).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '*True* if this is a PDF document and contains unsaved changes, else *False*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '*True* if this is a PDF document, else *False*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '*False* if this is not a PDF or has no form fields, otherwise the number of
    root form fields (fields with no ancestors).'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Changed in v1.16.4)* Returns the total number of (root) form fields.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool,int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '*True* if document has a variable page layout (like e-books or HTML). In this
    case you can set the desired page dimensions during document creation (open) or
    via method [`layout()`](#Document.layout "Document.layout").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.18.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*True* if PDF has been repaired during open (because of major structure issues).
    Always *False* for non-PDF documents. If true, more details have been stored in
    `TOOLS.mupdf_warnings()`, and [`Document.can_save_incrementally()`](#Document.can_save_incrementally
    "Document.can_save_incrementally") will return *False*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*True* if PDF is in linearized format. *False* for non-PDF documents.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dictionary indicating the `/MarkInfo` value. If not specified, the empty dictionary
    is returned. If not a PDF, `None` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string containing the `/PageMode` value. If not specified, the default “UseNone”
    is returned. If not a PDF, `None` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string containing the `/PageLayout` value. If not specified, the default “SinglePage”
    is returned. If not a PDF, `None` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.22.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An integer counting the number of versions present in the document. Zero if
    not a PDF, otherwise the number of incremental saves plus one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Indicates whether the document is password-protected against access. This indicator
    remains unchanged – **even after the document has been authenticated**. Precludes
    incremental saves if true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: This indicator initially equals [`Document.needs_pass`](#Document.needs_pass
    "Document.needs_pass"). After successful authentication, it is set to *False*
    to reflect the situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.16.0: This is now an integer comprised of bit indicators. Was
    a dictionary previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains the permissions to access the document. This is an integer containing
    bool values in respective bit positions. For example, if *doc.permissions & pymupdf.PDF_PERM_MODIFY
    > 0*, you may change the document. See [Document Permissions](vars.html#permissioncodes)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Contains the document’s meta data as a Python dictionary or `None` (if *is_encrypted=True*
    and *needPass=True*). Keys are *format*, *encryption*, *title*, *author*, *subject*,
    *keywords*, *creator*, *producer*, *creationDate*, *modDate*, *trapped*. All item
    values are strings or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: Except *format* and *encryption*, for PDF documents, the key names correspond
    in an obvious way to the PDF keys */Creator*, */Producer*, */CreationDate*, */ModDate*,
    */Title*, */Author*, */Subject*, */Trapped* and */Keywords* respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '*format* contains the document format (e.g. ‘PDF-1.6’, ‘XPS’, ‘EPUB’).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*encryption* either contains `None` (no encryption), or a string naming an
    encryption method (e.g. *‘Standard V4 R4 128-bit RC4’*). Note that an encryption
    method may be specified **even if** *needs_pass=False*. In such cases not all
    permissions will probably have been granted. Check [`Document.permissions`](#Document.permissions
    "Document.permissions") for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the date fields contain valid data (which need not be the case at all!),
    they are strings in the PDF-specific timestamp format “D:<TS><TZ>”, where
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <TS> is the 12 character ISO timestamp *YYYYMMDDhhmmss* (*YYYY* - year, *MM*
    - month, *DD* - day, *hh* - hour, *mm* - minute, *ss* - second), and
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: <TZ> is a time zone value (time interval relative to GMT) containing a sign
    (‘+’ or ‘-‘), the hour (*hh*), and the minute (*‘mm’*, note the apostrophes!).
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: A Paraguayan value might hence look like *D:20150415131602-04’00’*, which corresponds
    to the timestamp April 15, 2015, at 1:16:02 pm local time Asuncion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Contains the *filename* or *filetype* value with which *Document* was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Contains the number of pages of the document. May return 0 for documents with
    no pages. Function `len(doc)` will also deliver this result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains the number of chapters in the document. Always at least 1\. Relevant
    only for document types with chapter support (EPUB currently). Other documents
    will return 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: New in v1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains (chapter, pno) of the document’s last page. Relevant only for document
    types with chapter support (EPUB currently). Other documents will return `(0,
    page_count - 1)` and `(0, -1)` if it has no pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: A list of form field font names defined in the */AcroForm* object. `None` if
    not a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For methods that change the structure of a PDF (`insert_pdf()`, `select()`,
    `copy_page()`, `delete_page()` and others), be aware that objects or properties
    in your program may have been invalidated or orphaned. Examples are [Page](page.html#page)
    objects and their children (links, annotations, widgets), variables holding old
    page counts, tables of content and the like. Remember to keep such variables up
    to date or delete orphaned objects. Also refer to [Ensuring Consistency of Important
    Objects in PyMuPDF](app3.html#referenialintegrity).
  prefs: []
  type: TYPE_NORMAL
- en: '`set_metadata()` Example'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clear metadata information. If you do this out of privacy / data protection
    concerns, make sure you save the document as a new file with *garbage > 0*. Only
    then the old */Info* object will also be physically removed from the file. In
    this case, you may also want to clear any XML metadata inserted by several PDF
    editors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '`set_toc()` Demonstration'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This shows how to modify or add a table of contents. Also have a look at [import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-toc/import.py)
    and [export.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/export-toc/export.py)
    in the examples directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '`insert_pdf()` Examples'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**(1) Concatenate two documents including their TOCs:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, similar ways can be found in more general situations. Just make sure
    that hierarchy levels in a row do not increase by more than one. Inserting dummy
    bookmarks before and after *toc2* segments would heal such cases. A ready-to-use
    GUI (wxPython) solution can be found in script [join.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)
    of the examples directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**(2) More examples:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Other Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Extract all page-referenced images of a PDF into separate PNG files**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '**Rotate all pages of a PDF:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: '`set_metadata()` Example'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clear metadata information. If you do this out of privacy / data protection
    concerns, make sure you save the document as a new file with *garbage > 0*. Only
    then the old */Info* object will also be physically removed from the file. In
    this case, you may also want to clear any XML metadata inserted by several PDF
    editors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '`set_toc()` Demonstration'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This shows how to modify or add a table of contents. Also have a look at [import.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/import-toc/import.py)
    and [export.py](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/export-toc/export.py)
    in the examples directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '`insert_pdf()` Examples'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**(1) Concatenate two documents including their TOCs:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, similar ways can be found in more general situations. Just make sure
    that hierarchy levels in a row do not increase by more than one. Inserting dummy
    bookmarks before and after *toc2* segments would heal such cases. A ready-to-use
    GUI (wxPython) solution can be found in script [join.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)
    of the examples directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**(2) More examples:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Other Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Extract all page-referenced images of a PDF into separate PNG files**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '**Rotate all pages of a PDF:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
