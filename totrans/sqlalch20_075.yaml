- en: ORM Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/examples.html](https://docs.sqlalchemy.org/en/20/orm/examples.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The SQLAlchemy distribution includes a variety of code examples illustrating
    a select set of patterns, some typical and some not so typical. All are runnable
    and can be found in the `/examples` directory of the distribution. Descriptions
    and source code for all can be found here.
  prefs: []
  type: TYPE_NORMAL
- en: Additional SQLAlchemy examples, some user contributed, are available on the
    wiki at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes](https://www.sqlalchemy.org/trac/wiki/UsageRecipes).
  prefs: []
  type: TYPE_NORMAL
- en: Mapping Recipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Adjacency List'
  prefs: []
  type: TYPE_NORMAL
- en: An example of a dictionary-of-dictionaries structure mapped using an adjacency
    list model.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)  ###
    Associations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples illustrating the usage of the “association object” pattern, where an
    intermediary class mediates the relationship between two classes that are associated
    in a many-to-many pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - Same example as basic_association, adding in usage of [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") to make explicit references to `OrderItem`
    optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - Illustrate a many-to-many relationship between an “Order” and a collection of
    “Item” objects, associating a purchase price with each via an association object
    called “OrderItem”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - An advanced association proxy example which illustrates nesting of association
    proxies to produce multi-level Python collections, in this case a dictionary with
    string keys and sets of integers as values, which conceal the underlying mapped
    classes.  ### Asyncio Integration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples illustrating the asyncio engine feature of SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - Illustrates use
    of the `sqlalchemy.ext.asyncio.AsyncSession` object for asynchronous ORM use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - Illustrates using **write only relationships** for simpler handling of ORM collections
    under asyncio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - Illustrates how to run many statements concurrently using `asyncio.gather()`
    along many asyncio database connections, merging ORM results into a single `AsyncSession`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[basic.py](../_modules/examples/asyncio/basic.html) - Illustrates the asyncio
    engine / connection interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - Illustrates
    use of the sqlalchemy.ext.asyncio.AsyncSession object for asynchronous ORM use,
    including the optional run_sync() method.  ### Directed Graphs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of persistence for a directed graph structure. The graph is stored
    as a collection of edges, each referencing both a “lower” and an “upper” node
    in a table of nodes. Basic persistence and querying for lower- and upper- neighbors
    are illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)  ### Dynamic
    Relations as Dictionaries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates how to place a dictionary-like facade on top of a “dynamic” relation,
    so that dictionary operations (assuming simple string keys) can operate upon a
    large collection without loading the full collection at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)  ###
    Generic Associations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates various methods of associating multiple types of parents with a
    particular child object.
  prefs: []
  type: TYPE_NORMAL
- en: The examples all use the declarative extension along with declarative mixins.
    Each one presents the identical use case at the end - two classes, `Customer`
    and `Supplier`, both subclassing the `HasAddresses` mixin, which ensures that
    the parent class is provided with an `addresses` collection which contains `Address`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    and [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    scripts are modernized versions of recipes presented in the 2007 blog post [Polymorphic
    Associations with SQLAlchemy](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - Illustrates a mixin which provides a generic association via a individually
    generated association tables for each parent class. The associated objects themselves
    are persisted in a single table shared among all parents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - Illustrates a generic association which persists association objects within
    individual tables, each one generated to persist those objects on behalf of a
    particular parent class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - Illustrates a mixin which provides a generic association using a single target
    table and a single association table, referred to by all parent tables. The association
    table contains a “discriminator” column which determines what type of parent object
    associates to each particular row in the association table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - Illustrates a so-called “generic foreign key”, in a similar fashion to that
    of popular frameworks such as Django, ROR, etc. This approach bypasses standard
    referential integrity practices, in that the “foreign key” column is not actually
    constrained to refer to any particular table; instead, in-application logic is
    used to determine which table is referenced.  ### Materialized Paths'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates the “materialized paths” pattern for hierarchical data using the
    SQLAlchemy ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - Illustrates the “materialized paths” pattern.  ### Nested Sets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates a rudimentary way to implement the “nested sets” pattern for hierarchical
    data using the SQLAlchemy ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko’s
    “Nested Sets” Tree Structure.  ### Performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A performance profiling suite for a variety of SQLAlchemy use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each suite focuses on a specific use case with a particular performance profile
    and associated implications:'
  prefs: []
  type: TYPE_NORMAL
- en: bulk inserts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: individual inserts, with or without transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fetching large numbers of rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running lots of short queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All suites include a variety of use patterns illustrating both Core and ORM
    use, and are generally sorted in order of performance from worst to greatest,
    inversely based on amount of functionality provided by SQLAlchemy, greatest to
    least (these two things generally correspond perfectly).
  prefs: []
  type: TYPE_NORMAL
- en: 'A command line tool is presented at the package level which allows individual
    suites to be run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An example run looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or with options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How can I profile a SQLAlchemy powered application?](../faq/performance.html#faq-how-to-profile)'
  prefs: []
  type: TYPE_NORMAL
- en: File Listing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running all tests with time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the default form of run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Dumping Profiles for Individual Tests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '#### Writing your Own Suites'
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run our new script directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]  ### Space Invaders'
  prefs: []
  type: TYPE_NORMAL
- en: A Space Invaders game using SQLite as the state machine.
  prefs: []
  type: TYPE_NORMAL
- en: Originally developed in 2012\. Adapted to work in Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Runs in a textual console using ASCII art.
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'While it runs, watch the SQL output in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)  ###
    Versioning Objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### Versioning with a History Table'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A fragment of example usage, using declarative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.  #### Versioning using Temporal Rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.  ### Vertical Attribute Mapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates “vertical table” mappings.
  prefs: []
  type: TYPE_NORMAL
- en: A “vertical table” refers to a technique where individual attributes of an object
    are stored as distinct rows in a table. The “vertical table” technique is used
    to persist objects which can have a varied set of attributes, at the expense of
    simple query control and brevity. It is commonly found in content/document management
    systems in order to represent user-created structures flexibly.
  prefs: []
  type: TYPE_NORMAL
- en: Two variants on the approach are given. In the second, each row references a
    “datatype” which contains information about the type of information stored in
    the attribute, such as integer, string, or date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - Mapping a polymorphic-valued vertical table as a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - Mapping a vertical
    table as a dictionary.  ## Inheritance Mapping Recipes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Basic Inheritance Mappings'
  prefs: []
  type: TYPE_NORMAL
- en: Working examples of single-table, joined-table, and concrete-table inheritance
    as described in [Mapping Class Inheritance Hierarchies](inheritance.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[joined.py](../_modules/examples/inheritance/joined.html) - Joined-table (table-per-subclass)
    inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[concrete.py](../_modules/examples/inheritance/concrete.html) - Concrete-table
    (table-per-class) inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single.py](../_modules/examples/inheritance/single.html) - Single-table (table-per-hierarchy)
    inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Attribute Instrumentation'
  prefs: []
  type: TYPE_NORMAL
- en: Examples illustrating modifications to SQLAlchemy’s attribute management system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - Illustrates how to attach events to all instrumented attributes and listen for
    change events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - Illustrates use of the [`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event, in conjunction with Core
    column defaults to provide ORM objects that automatically produce the default
    value when an un-set attribute is accessed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - Illustrates customized class instrumentation, using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") extension package.  ### Horizontal Sharding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic example of using the SQLAlchemy Sharding API. Sharding refers to horizontally
    scaling data across multiple databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic components of a “sharded” mapping are:'
  prefs: []
  type: TYPE_NORMAL
- en: multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, each assigned a “shard id”. These [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") instances may refer to different databases, or different
    schemas / accounts within the same database, or they can even be differentiated
    only by options that will cause them to access different schemas or tables when
    used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a single shard id, given an instance to be saved;
    this is called “shard_chooser”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a list of shard ids which apply to a particular
    instance identifier; this is called “id_chooser”.If it returns all shard ids,
    all shards will be searched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a list of shard ids to try, given a particular Query
    (“query_chooser”). If it returns all shard ids, all shards will be queried and
    the results joined together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these examples, different kinds of shards are used against the same basic
    example which accommodates weather data on a per-continent basis. We provide example
    shard_chooser, id_chooser and query_chooser functions. The query_chooser illustrates
    inspection of the SQL expression element in order to attempt to determine a single
    shard being requested.
  prefs: []
  type: TYPE_NORMAL
- en: The construction of generic sharding routines is an ambitious approach to the
    issue of organizing instances among multiple databases. For a more plain-spoken
    alternative, the “distinct entity” approach is a simple method of assigning objects
    to different tables (and potentially database nodes) in an explicit way - described
    on the wiki at [EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - Illustrates sharding using distinct SQLite databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    Illustrates sharding using a single SQLite database, that will however have multiple
    tables using a naming convention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - Illustrates sharding using a single database with multiple schemas, where a
    different “schema_translates_map” can be used for each shard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - Illustrates sharding
    API used with asyncio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the ORM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### ORM Query Events'
  prefs: []
  type: TYPE_NORMAL
- en: Recipes which illustrate augmentation of ORM SELECT behavior as used by [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") with [2.0 style](../glossary.html#term-2.0-style)
    use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    as well as the [1.x style](../glossary.html#term-1.x-style) [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples include demonstrations of the [`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option as well as the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct is unified with the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, so that these two objects are mostly
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - Illustrates a custom per-query criteria that will be applied to selected entities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - Illustrates a global criteria applied to entities of a particular type.  ###
    Dogpile Caching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates how to embed [dogpile.cache](https://dogpilecache.sqlalchemy.org/)
    functionality with ORM queries, allowing full cache control as well as the ability
    to pull “lazy loaded” attributes from long term cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, the following techniques are illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic technique of circumventing [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to pull from a custom cache source instead of
    the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rudimental caching with dogpile.cache, using “regions” which allow global control
    over a fixed set of configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom `UserDefinedOption` objects to configure options in a statement
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - includes a general example of the technique presented here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To run, both SQLAlchemy and dogpile.cache must be installed or on the current
    PYTHONPATH. The demo will create a local directory for datafiles, insert initial
    data, and run. Running the demo a second time will utilize the cache files already
    present, and exactly one SQL statement against two tables will be emitted - the
    displayed result however will utilize dozens of lazyloads that all pull from cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The demo scripts themselves, in order of complexity, are run as Python modules
    so that relative imports work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - Establish
    data / cache file paths, and configurations, bootstrap fixture data if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - Represent functions and classes which allow the usage of Dogpile caching with
    SQLAlchemy. Introduces a query option called FromCache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[model.py](../_modules/examples/dogpile_caching/model.html) - The datamodel,
    which represents Person that has multiple Address objects, each with PostalCode,
    City, Country.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    Installs some sample data. Here we have a handful of postal codes for a few US/Canadian
    cities. Then, 100 Person records are installed, each with a randomly selected
    postal code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - Illustrate
    how to load some data, and cache the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - Illustrates how to add cache options on relationship endpoints, so that lazyloads
    load from cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - Illustrate
    usage of Query combined with the FromCache option, including front-end loading,
    cache invalidation and collection caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - This example creates a new dogpile.cache backend that will persist data in a
    dictionary which is local to the current session. remove() the session and the
    cache is gone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping Recipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Adjacency List'
  prefs: []
  type: TYPE_NORMAL
- en: An example of a dictionary-of-dictionaries structure mapped using an adjacency
    list model.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)  ###
    Associations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples illustrating the usage of the “association object” pattern, where an
    intermediary class mediates the relationship between two classes that are associated
    in a many-to-many pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - Same example as basic_association, adding in usage of [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") to make explicit references to `OrderItem`
    optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - Illustrate a many-to-many relationship between an “Order” and a collection of
    “Item” objects, associating a purchase price with each via an association object
    called “OrderItem”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - An advanced association proxy example which illustrates nesting of association
    proxies to produce multi-level Python collections, in this case a dictionary with
    string keys and sets of integers as values, which conceal the underlying mapped
    classes.  ### Asyncio Integration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples illustrating the asyncio engine feature of SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - Illustrates use
    of the `sqlalchemy.ext.asyncio.AsyncSession` object for asynchronous ORM use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - Illustrates using **write only relationships** for simpler handling of ORM collections
    under asyncio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - Illustrates how to run many statements concurrently using `asyncio.gather()`
    along many asyncio database connections, merging ORM results into a single `AsyncSession`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[basic.py](../_modules/examples/asyncio/basic.html) - Illustrates the asyncio
    engine / connection interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - Illustrates
    use of the sqlalchemy.ext.asyncio.AsyncSession object for asynchronous ORM use,
    including the optional run_sync() method.  ### Directed Graphs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of persistence for a directed graph structure. The graph is stored
    as a collection of edges, each referencing both a “lower” and an “upper” node
    in a table of nodes. Basic persistence and querying for lower- and upper- neighbors
    are illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)  ### Dynamic
    Relations as Dictionaries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates how to place a dictionary-like facade on top of a “dynamic” relation,
    so that dictionary operations (assuming simple string keys) can operate upon a
    large collection without loading the full collection at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)  ###
    Generic Associations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates various methods of associating multiple types of parents with a
    particular child object.
  prefs: []
  type: TYPE_NORMAL
- en: The examples all use the declarative extension along with declarative mixins.
    Each one presents the identical use case at the end - two classes, `Customer`
    and `Supplier`, both subclassing the `HasAddresses` mixin, which ensures that
    the parent class is provided with an `addresses` collection which contains `Address`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    and [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    scripts are modernized versions of recipes presented in the 2007 blog post [Polymorphic
    Associations with SQLAlchemy](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - Illustrates a mixin which provides a generic association via a individually
    generated association tables for each parent class. The associated objects themselves
    are persisted in a single table shared among all parents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - Illustrates a generic association which persists association objects within
    individual tables, each one generated to persist those objects on behalf of a
    particular parent class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - Illustrates a mixin which provides a generic association using a single target
    table and a single association table, referred to by all parent tables. The association
    table contains a “discriminator” column which determines what type of parent object
    associates to each particular row in the association table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - Illustrates a so-called “generic foreign key”, in a similar fashion to that
    of popular frameworks such as Django, ROR, etc. This approach bypasses standard
    referential integrity practices, in that the “foreign key” column is not actually
    constrained to refer to any particular table; instead, in-application logic is
    used to determine which table is referenced.  ### Materialized Paths'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates the “materialized paths” pattern for hierarchical data using the
    SQLAlchemy ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - Illustrates the “materialized paths” pattern.  ### Nested Sets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates a rudimentary way to implement the “nested sets” pattern for hierarchical
    data using the SQLAlchemy ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko’s
    “Nested Sets” Tree Structure.  ### Performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A performance profiling suite for a variety of SQLAlchemy use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each suite focuses on a specific use case with a particular performance profile
    and associated implications:'
  prefs: []
  type: TYPE_NORMAL
- en: bulk inserts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: individual inserts, with or without transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fetching large numbers of rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running lots of short queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All suites include a variety of use patterns illustrating both Core and ORM
    use, and are generally sorted in order of performance from worst to greatest,
    inversely based on amount of functionality provided by SQLAlchemy, greatest to
    least (these two things generally correspond perfectly).
  prefs: []
  type: TYPE_NORMAL
- en: 'A command line tool is presented at the package level which allows individual
    suites to be run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'An example run looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Or with options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How can I profile a SQLAlchemy powered application?](../faq/performance.html#faq-how-to-profile)'
  prefs: []
  type: TYPE_NORMAL
- en: File Listing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running all tests with time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the default form of run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Dumping Profiles for Individual Tests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '#### Writing your Own Suites'
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run our new script directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]  ### Space Invaders'
  prefs: []
  type: TYPE_NORMAL
- en: A Space Invaders game using SQLite as the state machine.
  prefs: []
  type: TYPE_NORMAL
- en: Originally developed in 2012\. Adapted to work in Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Runs in a textual console using ASCII art.
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'While it runs, watch the SQL output in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)  ###
    Versioning Objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### Versioning with a History Table'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'A fragment of example usage, using declarative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.  #### Versioning using Temporal Rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.  ### Vertical Attribute Mapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates “vertical table” mappings.
  prefs: []
  type: TYPE_NORMAL
- en: A “vertical table” refers to a technique where individual attributes of an object
    are stored as distinct rows in a table. The “vertical table” technique is used
    to persist objects which can have a varied set of attributes, at the expense of
    simple query control and brevity. It is commonly found in content/document management
    systems in order to represent user-created structures flexibly.
  prefs: []
  type: TYPE_NORMAL
- en: Two variants on the approach are given. In the second, each row references a
    “datatype” which contains information about the type of information stored in
    the attribute, such as integer, string, or date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - Mapping a polymorphic-valued vertical table as a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - Mapping a vertical
    table as a dictionary.  ### Adjacency List'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of a dictionary-of-dictionaries structure mapped using an adjacency
    list model.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Associations'
  prefs: []
  type: TYPE_NORMAL
- en: Examples illustrating the usage of the “association object” pattern, where an
    intermediary class mediates the relationship between two classes that are associated
    in a many-to-many pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - Same example as basic_association, adding in usage of [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") to make explicit references to `OrderItem`
    optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - Illustrate a many-to-many relationship between an “Order” and a collection of
    “Item” objects, associating a purchase price with each via an association object
    called “OrderItem”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - An advanced association proxy example which illustrates nesting of association
    proxies to produce multi-level Python collections, in this case a dictionary with
    string keys and sets of integers as values, which conceal the underlying mapped
    classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Asyncio Integration'
  prefs: []
  type: TYPE_NORMAL
- en: Examples illustrating the asyncio engine feature of SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - Illustrates use
    of the `sqlalchemy.ext.asyncio.AsyncSession` object for asynchronous ORM use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - Illustrates using **write only relationships** for simpler handling of ORM collections
    under asyncio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - Illustrates how to run many statements concurrently using `asyncio.gather()`
    along many asyncio database connections, merging ORM results into a single `AsyncSession`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[basic.py](../_modules/examples/asyncio/basic.html) - Illustrates the asyncio
    engine / connection interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - Illustrates
    use of the sqlalchemy.ext.asyncio.AsyncSession object for asynchronous ORM use,
    including the optional run_sync() method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Directed Graphs'
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of persistence for a directed graph structure. The graph is stored
    as a collection of edges, each referencing both a “lower” and an “upper” node
    in a table of nodes. Basic persistence and querying for lower- and upper- neighbors
    are illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Dynamic Relations as Dictionaries'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates how to place a dictionary-like facade on top of a “dynamic” relation,
    so that dictionary operations (assuming simple string keys) can operate upon a
    large collection without loading the full collection at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Generic Associations'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates various methods of associating multiple types of parents with a
    particular child object.
  prefs: []
  type: TYPE_NORMAL
- en: The examples all use the declarative extension along with declarative mixins.
    Each one presents the identical use case at the end - two classes, `Customer`
    and `Supplier`, both subclassing the `HasAddresses` mixin, which ensures that
    the parent class is provided with an `addresses` collection which contains `Address`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    and [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    scripts are modernized versions of recipes presented in the 2007 blog post [Polymorphic
    Associations with SQLAlchemy](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - Illustrates a mixin which provides a generic association via a individually
    generated association tables for each parent class. The associated objects themselves
    are persisted in a single table shared among all parents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - Illustrates a generic association which persists association objects within
    individual tables, each one generated to persist those objects on behalf of a
    particular parent class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - Illustrates a mixin which provides a generic association using a single target
    table and a single association table, referred to by all parent tables. The association
    table contains a “discriminator” column which determines what type of parent object
    associates to each particular row in the association table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - Illustrates a so-called “generic foreign key”, in a similar fashion to that
    of popular frameworks such as Django, ROR, etc. This approach bypasses standard
    referential integrity practices, in that the “foreign key” column is not actually
    constrained to refer to any particular table; instead, in-application logic is
    used to determine which table is referenced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Materialized Paths'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates the “materialized paths” pattern for hierarchical data using the
    SQLAlchemy ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - Illustrates the “materialized paths” pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Nested Sets'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates a rudimentary way to implement the “nested sets” pattern for hierarchical
    data using the SQLAlchemy ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko’s
    “Nested Sets” Tree Structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Performance'
  prefs: []
  type: TYPE_NORMAL
- en: A performance profiling suite for a variety of SQLAlchemy use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each suite focuses on a specific use case with a particular performance profile
    and associated implications:'
  prefs: []
  type: TYPE_NORMAL
- en: bulk inserts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: individual inserts, with or without transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fetching large numbers of rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running lots of short queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All suites include a variety of use patterns illustrating both Core and ORM
    use, and are generally sorted in order of performance from worst to greatest,
    inversely based on amount of functionality provided by SQLAlchemy, greatest to
    least (these two things generally correspond perfectly).
  prefs: []
  type: TYPE_NORMAL
- en: 'A command line tool is presented at the package level which allows individual
    suites to be run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'An example run looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Or with options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How can I profile a SQLAlchemy powered application?](../faq/performance.html#faq-how-to-profile)'
  prefs: []
  type: TYPE_NORMAL
- en: File Listing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running all tests with time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the default form of run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Dumping Profiles for Individual Tests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '#### Writing your Own Suites'
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run our new script directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: File Listing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running all tests with time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the default form of run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Dumping Profiles for Individual Tests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '#### Writing your Own Suites'
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run our new script directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '### Space Invaders'
  prefs: []
  type: TYPE_NORMAL
- en: A Space Invaders game using SQLite as the state machine.
  prefs: []
  type: TYPE_NORMAL
- en: Originally developed in 2012\. Adapted to work in Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Runs in a textual console using ASCII art.
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'While it runs, watch the SQL output in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Versioning Objects'
  prefs: []
  type: TYPE_NORMAL
- en: '#### Versioning with a History Table'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'A fragment of example usage, using declarative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.  #### Versioning using Temporal Rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.  #### Versioning with a History Table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'A fragment of example usage, using declarative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### Versioning using Temporal Rows'
  prefs: []
  type: TYPE_NORMAL
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  prefs: []
  type: TYPE_NORMAL
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Vertical Attribute Mapping'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates “vertical table” mappings.
  prefs: []
  type: TYPE_NORMAL
- en: A “vertical table” refers to a technique where individual attributes of an object
    are stored as distinct rows in a table. The “vertical table” technique is used
    to persist objects which can have a varied set of attributes, at the expense of
    simple query control and brevity. It is commonly found in content/document management
    systems in order to represent user-created structures flexibly.
  prefs: []
  type: TYPE_NORMAL
- en: Two variants on the approach are given. In the second, each row references a
    “datatype” which contains information about the type of information stored in
    the attribute, such as integer, string, or date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - Mapping a polymorphic-valued vertical table as a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - Mapping a vertical
    table as a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Inheritance Mapping Recipes'
  prefs: []
  type: TYPE_NORMAL
- en: '### Basic Inheritance Mappings'
  prefs: []
  type: TYPE_NORMAL
- en: Working examples of single-table, joined-table, and concrete-table inheritance
    as described in [Mapping Class Inheritance Hierarchies](inheritance.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[joined.py](../_modules/examples/inheritance/joined.html) - Joined-table (table-per-subclass)
    inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[concrete.py](../_modules/examples/inheritance/concrete.html) - Concrete-table
    (table-per-class) inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single.py](../_modules/examples/inheritance/single.html) - Single-table (table-per-hierarchy)
    inheritance example.  ### Basic Inheritance Mappings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working examples of single-table, joined-table, and concrete-table inheritance
    as described in [Mapping Class Inheritance Hierarchies](inheritance.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[joined.py](../_modules/examples/inheritance/joined.html) - Joined-table (table-per-subclass)
    inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[concrete.py](../_modules/examples/inheritance/concrete.html) - Concrete-table
    (table-per-class) inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[single.py](../_modules/examples/inheritance/single.html) - Single-table (table-per-hierarchy)
    inheritance example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Attribute Instrumentation'
  prefs: []
  type: TYPE_NORMAL
- en: Examples illustrating modifications to SQLAlchemy’s attribute management system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - Illustrates how to attach events to all instrumented attributes and listen for
    change events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - Illustrates use of the [`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event, in conjunction with Core
    column defaults to provide ORM objects that automatically produce the default
    value when an un-set attribute is accessed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - Illustrates customized class instrumentation, using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") extension package.  ### Horizontal Sharding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic example of using the SQLAlchemy Sharding API. Sharding refers to horizontally
    scaling data across multiple databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic components of a “sharded” mapping are:'
  prefs: []
  type: TYPE_NORMAL
- en: multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, each assigned a “shard id”. These [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") instances may refer to different databases, or different
    schemas / accounts within the same database, or they can even be differentiated
    only by options that will cause them to access different schemas or tables when
    used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a single shard id, given an instance to be saved;
    this is called “shard_chooser”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a list of shard ids which apply to a particular
    instance identifier; this is called “id_chooser”.If it returns all shard ids,
    all shards will be searched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a list of shard ids to try, given a particular Query
    (“query_chooser”). If it returns all shard ids, all shards will be queried and
    the results joined together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these examples, different kinds of shards are used against the same basic
    example which accommodates weather data on a per-continent basis. We provide example
    shard_chooser, id_chooser and query_chooser functions. The query_chooser illustrates
    inspection of the SQL expression element in order to attempt to determine a single
    shard being requested.
  prefs: []
  type: TYPE_NORMAL
- en: The construction of generic sharding routines is an ambitious approach to the
    issue of organizing instances among multiple databases. For a more plain-spoken
    alternative, the “distinct entity” approach is a simple method of assigning objects
    to different tables (and potentially database nodes) in an explicit way - described
    on the wiki at [EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - Illustrates sharding using distinct SQLite databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    Illustrates sharding using a single SQLite database, that will however have multiple
    tables using a naming convention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - Illustrates sharding using a single database with multiple schemas, where a
    different “schema_translates_map” can be used for each shard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - Illustrates sharding
    API used with asyncio.  ### Attribute Instrumentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples illustrating modifications to SQLAlchemy’s attribute management system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - Illustrates how to attach events to all instrumented attributes and listen for
    change events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - Illustrates use of the [`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event, in conjunction with Core
    column defaults to provide ORM objects that automatically produce the default
    value when an un-set attribute is accessed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - Illustrates customized class instrumentation, using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") extension package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Horizontal Sharding'
  prefs: []
  type: TYPE_NORMAL
- en: A basic example of using the SQLAlchemy Sharding API. Sharding refers to horizontally
    scaling data across multiple databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic components of a “sharded” mapping are:'
  prefs: []
  type: TYPE_NORMAL
- en: multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, each assigned a “shard id”. These [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") instances may refer to different databases, or different
    schemas / accounts within the same database, or they can even be differentiated
    only by options that will cause them to access different schemas or tables when
    used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a single shard id, given an instance to be saved;
    this is called “shard_chooser”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a list of shard ids which apply to a particular
    instance identifier; this is called “id_chooser”.If it returns all shard ids,
    all shards will be searched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function which can return a list of shard ids to try, given a particular Query
    (“query_chooser”). If it returns all shard ids, all shards will be queried and
    the results joined together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these examples, different kinds of shards are used against the same basic
    example which accommodates weather data on a per-continent basis. We provide example
    shard_chooser, id_chooser and query_chooser functions. The query_chooser illustrates
    inspection of the SQL expression element in order to attempt to determine a single
    shard being requested.
  prefs: []
  type: TYPE_NORMAL
- en: The construction of generic sharding routines is an ambitious approach to the
    issue of organizing instances among multiple databases. For a more plain-spoken
    alternative, the “distinct entity” approach is a simple method of assigning objects
    to different tables (and potentially database nodes) in an explicit way - described
    on the wiki at [EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - Illustrates sharding using distinct SQLite databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    Illustrates sharding using a single SQLite database, that will however have multiple
    tables using a naming convention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - Illustrates sharding using a single database with multiple schemas, where a
    different “schema_translates_map” can be used for each shard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - Illustrates sharding
    API used with asyncio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the ORM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### ORM Query Events'
  prefs: []
  type: TYPE_NORMAL
- en: Recipes which illustrate augmentation of ORM SELECT behavior as used by [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") with [2.0 style](../glossary.html#term-2.0-style)
    use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    as well as the [1.x style](../glossary.html#term-1.x-style) [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples include demonstrations of the [`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option as well as the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct is unified with the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, so that these two objects are mostly
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - Illustrates a custom per-query criteria that will be applied to selected entities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - Illustrates a global criteria applied to entities of a particular type.  ###
    Dogpile Caching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrates how to embed [dogpile.cache](https://dogpilecache.sqlalchemy.org/)
    functionality with ORM queries, allowing full cache control as well as the ability
    to pull “lazy loaded” attributes from long term cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, the following techniques are illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic technique of circumventing [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to pull from a custom cache source instead of
    the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rudimental caching with dogpile.cache, using “regions” which allow global control
    over a fixed set of configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom `UserDefinedOption` objects to configure options in a statement
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - includes a general example of the technique presented here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: To run, both SQLAlchemy and dogpile.cache must be installed or on the current
    PYTHONPATH. The demo will create a local directory for datafiles, insert initial
    data, and run. Running the demo a second time will utilize the cache files already
    present, and exactly one SQL statement against two tables will be emitted - the
    displayed result however will utilize dozens of lazyloads that all pull from cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The demo scripts themselves, in order of complexity, are run as Python modules
    so that relative imports work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - Establish
    data / cache file paths, and configurations, bootstrap fixture data if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - Represent functions and classes which allow the usage of Dogpile caching with
    SQLAlchemy. Introduces a query option called FromCache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[model.py](../_modules/examples/dogpile_caching/model.html) - The datamodel,
    which represents Person that has multiple Address objects, each with PostalCode,
    City, Country.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    Installs some sample data. Here we have a handful of postal codes for a few US/Canadian
    cities. Then, 100 Person records are installed, each with a randomly selected
    postal code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - Illustrate
    how to load some data, and cache the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - Illustrates how to add cache options on relationship endpoints, so that lazyloads
    load from cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - Illustrate
    usage of Query combined with the FromCache option, including front-end loading,
    cache invalidation and collection caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - This example creates a new dogpile.cache backend that will persist data in a
    dictionary which is local to the current session. remove() the session and the
    cache is gone.  ### ORM Query Events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recipes which illustrate augmentation of ORM SELECT behavior as used by [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") with [2.0 style](../glossary.html#term-2.0-style)
    use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    as well as the [1.x style](../glossary.html#term-1.x-style) [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples include demonstrations of the [`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option as well as the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct is unified with the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, so that these two objects are mostly
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - Illustrates a custom per-query criteria that will be applied to selected entities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - Illustrates a global criteria applied to entities of a particular type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Dogpile Caching'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrates how to embed [dogpile.cache](https://dogpilecache.sqlalchemy.org/)
    functionality with ORM queries, allowing full cache control as well as the ability
    to pull “lazy loaded” attributes from long term cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, the following techniques are illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic technique of circumventing [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to pull from a custom cache source instead of
    the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rudimental caching with dogpile.cache, using “regions” which allow global control
    over a fixed set of configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom `UserDefinedOption` objects to configure options in a statement
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - includes a general example of the technique presented here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: To run, both SQLAlchemy and dogpile.cache must be installed or on the current
    PYTHONPATH. The demo will create a local directory for datafiles, insert initial
    data, and run. Running the demo a second time will utilize the cache files already
    present, and exactly one SQL statement against two tables will be emitted - the
    displayed result however will utilize dozens of lazyloads that all pull from cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The demo scripts themselves, in order of complexity, are run as Python modules
    so that relative imports work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - Establish
    data / cache file paths, and configurations, bootstrap fixture data if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - Represent functions and classes which allow the usage of Dogpile caching with
    SQLAlchemy. Introduces a query option called FromCache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[model.py](../_modules/examples/dogpile_caching/model.html) - The datamodel,
    which represents Person that has multiple Address objects, each with PostalCode,
    City, Country.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    Installs some sample data. Here we have a handful of postal codes for a few US/Canadian
    cities. Then, 100 Person records are installed, each with a randomly selected
    postal code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - Illustrate
    how to load some data, and cache the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - Illustrates how to add cache options on relationship endpoints, so that lazyloads
    load from cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - Illustrate
    usage of Query combined with the FromCache option, including front-end loading,
    cache invalidation and collection caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - This example creates a new dogpile.cache backend that will persist data in a
    dictionary which is local to the current session. remove() the session and the
    cache is gone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
