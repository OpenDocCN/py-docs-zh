- en: ORM Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM示例
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/examples.html](https://docs.sqlalchemy.org/en/20/orm/examples.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/examples.html](https://docs.sqlalchemy.org/en/20/orm/examples.html)
- en: The SQLAlchemy distribution includes a variety of code examples illustrating
    a select set of patterns, some typical and some not so typical. All are runnable
    and can be found in the `/examples` directory of the distribution. Descriptions
    and source code for all can be found here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy发行版包含各种代码示例，展示了一组选择的模式，有些是典型的，有些则不太典型。所有示例都可以运行，并且可以在发行版的`/examples`目录中找到。这里可以找到所有示例的描述和源代码。
- en: Additional SQLAlchemy examples, some user contributed, are available on the
    wiki at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes](https://www.sqlalchemy.org/trac/wiki/UsageRecipes).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其他SQLAlchemy示例，一些是用户贡献的，可以在[https://www.sqlalchemy.org/trac/wiki/UsageRecipes](https://www.sqlalchemy.org/trac/wiki/UsageRecipes)的wiki上找到。
- en: Mapping Recipes
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射配方
- en: '### Adjacency List'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '### 邻接列表'
- en: An example of a dictionary-of-dictionaries structure mapped using an adjacency
    list model.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用邻接列表模型映射的字典-字典结构的示例。
- en: 'E.g.:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing of files:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)  ###
    Associations'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)  ###
    关联'
- en: Examples illustrating the usage of the “association object” pattern, where an
    intermediary class mediates the relationship between two classes that are associated
    in a many-to-many pattern.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了“关联对象”模式的使用示例，其中一个中间类在两个关联在多对多模式中的类之间进行关联。
- en: 'Listing of files:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - Same example as basic_association, adding in usage of [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") to make explicit references to `OrderItem`
    optional.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - 与basic_association相同的示例，增加了对[`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy")的使用，以使对`OrderItem`的显式引用变为可选。'
- en: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - Illustrate a many-to-many relationship between an “Order” and a collection of
    “Item” objects, associating a purchase price with each via an association object
    called “OrderItem”'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - 演示了“Order”和一组“Item”对象之间的多对多关系，通过名为“OrderItem”的关联对象将每个购买价格关联起来。'
- en: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - An advanced association proxy example which illustrates nesting of association
    proxies to produce multi-level Python collections, in this case a dictionary with
    string keys and sets of integers as values, which conceal the underlying mapped
    classes.  ### Asyncio Integration'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - 一个高级的关联代理示例，演示了关联代理的嵌套，以生成多级Python集合，本例中是一个具有字符串键和整数集合值的字典，隐藏了底层映射类。  ### Asyncio集成'
- en: Examples illustrating the asyncio engine feature of SQLAlchemy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 展示SQLAlchemy的asyncio引擎特性的示例。
- en: 'Listing of files:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - Illustrates use
    of the `sqlalchemy.ext.asyncio.AsyncSession` object for asynchronous ORM use.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - 演示了`sqlalchemy.ext.asyncio.AsyncSession`对象用于异步ORM使用。'
- en: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - Illustrates using **write only relationships** for simpler handling of ORM collections
    under asyncio.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - 演示了使用**只写关系**来更简单地处理异步ORM集合。'
- en: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - Illustrates how to run many statements concurrently using `asyncio.gather()`
    along many asyncio database connections, merging ORM results into a single `AsyncSession`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - 演示了如何使用`asyncio.gather()`在许多asyncio数据库连接上并发运行多个语句，将ORM结果合并到单个`AsyncSession`中。'
- en: '[basic.py](../_modules/examples/asyncio/basic.html) - Illustrates the asyncio
    engine / connection interface.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[basic.py](../_modules/examples/asyncio/basic.html) - 演示了asyncio引擎/连接接口。'
- en: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - Illustrates
    use of the sqlalchemy.ext.asyncio.AsyncSession object for asynchronous ORM use,
    including the optional run_sync() method.  ### Directed Graphs'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - 演示了使用 sqlalchemy.ext.asyncio.AsyncSession
    对象进行异步 ORM 使用，包括可选的 run_sync() 方法。  ### 有向图'
- en: 'An example of persistence for a directed graph structure. The graph is stored
    as a collection of edges, each referencing both a “lower” and an “upper” node
    in a table of nodes. Basic persistence and querying for lower- and upper- neighbors
    are illustrated:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有向图结构的持久性示例。图被存储为一组边，每条边都引用节点表中的“下级”和“上级”节点。演示了基本的持久性和查询下级和上级邻居的方法：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing of files:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)  ### Dynamic
    Relations as Dictionaries'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)  ### 作为字典的动态关系'
- en: Illustrates how to place a dictionary-like facade on top of a “dynamic” relation,
    so that dictionary operations (assuming simple string keys) can operate upon a
    large collection without loading the full collection at once.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 演示如何在“动态”关系之上放置类似字典的外观，以便字典操作（假设简单字符串键）可以在不一次加载完整集合的情况下操作大集合。
- en: 'Listing of files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)  ###
    Generic Associations'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)  ###
    通用关联'
- en: Illustrates various methods of associating multiple types of parents with a
    particular child object.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了将多种类型的父对象与特定子对象关联的各种方法。
- en: The examples all use the declarative extension along with declarative mixins.
    Each one presents the identical use case at the end - two classes, `Customer`
    and `Supplier`, both subclassing the `HasAddresses` mixin, which ensures that
    the parent class is provided with an `addresses` collection which contains `Address`
    objects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例都使用声明性扩展和声明性混合类。每个示例最后都呈现相同的用例 - 两个类，`Customer` 和 `Supplier`，都是 `HasAddresses`
    混合类的子类，该混合类确保父类提供一个包含 `Address` 对象的 `addresses` 集合。
- en: The [discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    and [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    scripts are modernized versions of recipes presented in the 2007 blog post [Polymorphic
    Associations with SQLAlchemy](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    和 [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html) 脚本是在
    2007 年博客文章 [使用 SQLAlchemy 实现多态关联](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/)
    中提出的配方的现代化版本。'
- en: 'Listing of files:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - Illustrates a mixin which provides a generic association via a individually
    generated association tables for each parent class. The associated objects themselves
    are persisted in a single table shared among all parents.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - 演示了一个提供通用关联的混合类，通过为每个父类生成单独的关联表来实现。关联的对象本身存储在所有父类共享的单个表中。'
- en: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - Illustrates a generic association which persists association objects within
    individual tables, each one generated to persist those objects on behalf of a
    particular parent class.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - 演示了一种通用关联，将关联对象持久化在各自的表中，每个表都生成用于代表特定父类持久化这些对象。'
- en: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - Illustrates a mixin which provides a generic association using a single target
    table and a single association table, referred to by all parent tables. The association
    table contains a “discriminator” column which determines what type of parent object
    associates to each particular row in the association table.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - 演示了一个提供通用关联的混合类，使用单个目标表和单个关联表，所有父表都引用该关联表。关联表包含一个“鉴别器”列，确定每个特定行与哪种类型的父对象关联。'
- en: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - Illustrates a so-called “generic foreign key”, in a similar fashion to that
    of popular frameworks such as Django, ROR, etc. This approach bypasses standard
    referential integrity practices, in that the “foreign key” column is not actually
    constrained to refer to any particular table; instead, in-application logic is
    used to determine which table is referenced.  ### Materialized Paths'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - 展示了所谓的“通用外键”，类似于流行框架（如 Django、ROR 等）的方式。这种方法绕过了标准的引用完整性实践，因为“外键”列实际上不被约束以引用任何特定的表；相反，在应用程序逻辑中使用逻辑来确定引用的是哪个表。###
    物化路径'
- en: Illustrates the “materialized paths” pattern for hierarchical data using the
    SQLAlchemy ORM.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQLAlchemy ORM 展示了用于分层数据的“物化路径”模式。
- en: 'Listing of files:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - Illustrates the “materialized paths” pattern.  ### Nested Sets'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - 说明了“物化路径”模式。### 嵌套集'
- en: Illustrates a rudimentary way to implement the “nested sets” pattern for hierarchical
    data using the SQLAlchemy ORM.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQLAlchemy ORM 展示了一种实现用于分层数据的“嵌套集”模式的简单方法。
- en: 'Listing of files:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko’s
    “Nested Sets” Tree Structure.  ### Performance'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko
    的“嵌套集”树结构。### 性能'
- en: A performance profiling suite for a variety of SQLAlchemy use cases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于各种 SQLAlchemy 使用情况的性能分析套件。
- en: 'Each suite focuses on a specific use case with a particular performance profile
    and associated implications:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个套件都专注于特定的用例，具有特定的性能配置文件和相关影响：
- en: bulk inserts
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量插入
- en: individual inserts, with or without transactions
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个插入，有或没有事务
- en: fetching large numbers of rows
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取大量行
- en: running lots of short queries
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行大量的短查询
- en: All suites include a variety of use patterns illustrating both Core and ORM
    use, and are generally sorted in order of performance from worst to greatest,
    inversely based on amount of functionality provided by SQLAlchemy, greatest to
    least (these two things generally correspond perfectly).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有套件包括一系列使用模式，既展示了核心使用，也展示了 ORM 使用，并且通常按性能从最差到最好的顺序排序，根据 SQLAlchemy 提供的功能量的多少相反排序，从最多到最少（这两件事通常完美对应）。
- en: 'A command line tool is presented at the package level which allows individual
    suites to be run:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个命令行工具在包级别被呈现，允许单独的套件运行：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An example run looks like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例运行如下：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or with options:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用选项：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See also
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How can I profile a SQLAlchemy powered application?](../faq/performance.html#faq-how-to-profile)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何对 SQLAlchemy 驱动的应用程序进行性能分析？](../faq/performance.html#faq-how-to-profile)'
- en: File Listing
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件列表
- en: 'Listing of files:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - 这一系列的测试将说明不同的方法来批量更新大量行（正在建设中！目前只有一个测试）'
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - 在这一系列的测试中，我们关注的是加载大量非常小而简单的行的时间。'
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - 这一系列的测试说明了不同的方法来批量插入大量行。'
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[short_selects.py](../_modules/examples/performance/short_selects.html) - 这一系列的测试说明了通过主键选择单个记录的不同方法'
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    在这一系列的测试中，我们关注的是一种在独立事务内插入一行数据的方法，然后返回到基本上“关闭”的状态。这类似于启动数据库连接的 API 调用，插入行，提交并关闭。'
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[__main__.py](../_modules/examples/performance/__main__.html) - 允许将examples/performance包作为脚本运行。'
- en: Running all tests with time
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用时间运行所有测试
- en: 'This is the default form of run:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认形式的运行：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Dumping Profiles for Individual Tests
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为单个测试生成配置文件
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为所有测试或更常见的是单个测试生成Python配置文件输出：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '#### Writing your Own Suites'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写您自己的套件'
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 分析套件系统是可扩展的，并且可以应用于您自己的一组测试。这是一个有价值的技术，可用于决定一些性能关键的程序集的正确方法。例如，如果我们想要分析几种加载之间的差异，我们可以创建一个名为`test_loads.py`的文件，内容如下：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can run our new script directly:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接运行我们的新脚本：
- en: '[PRE8]  ### Space Invaders'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]  ### 太空入侵者'
- en: A Space Invaders game using SQLite as the state machine.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLite作为状态机的太空入侵者游戏。
- en: Originally developed in 2012\. Adapted to work in Python 3.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最初于2012年开发。适应在Python 3中工作。
- en: Runs in a textual console using ASCII art.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本控制台中使用ASCII艺术运行。
- en: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
- en: 'To run:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'While it runs, watch the SQL output in the log:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，观察日志中的SQL输出：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: enjoy!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您愉快！
- en: 'Listing of files:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)  ###
    Versioning Objects'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)  ###
    对象版本控制'
- en: '#### Versioning with a History Table'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用历史表进行版本控制'
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 说明了一个扩展，它为实体创建版本表并为每个更改存储记录。给定的扩展生成一个匿名的“history”类，表示目标对象的历史版本。
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与[使用时间行进行版本控制](#examples-versioned-rows)示例相比，该示例将更新写入为同一表中的新行，而不使用单独的历史表。
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个名为`test_versioning.py`的单元测试模块演示了用法，该模块可以像其他模块一样运行，内部使用`unittest`：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A fragment of example usage, using declarative:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法的片段，使用声明性：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Versioned`混合类设计用于与声明性结合使用。要将该扩展与经典映射器一起使用，可以应用`_history_mapper`函数：'
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制示例还与ORM乐观并发特性集成，文档化在[配置版本计数器](versioning.html#mapper-version-counter)中。要启用此功能，请将标志`Versioned.use_mapper_versioning`设置为True：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个具有相同版本标识符的`SomeClass`实例被同时更新并发送到数据库进行并发UPDATE，如果数据库隔离级别允许两个UPDATE语句继续，其中一个将失败，因为它不再针对最后已知的版本标识符。
- en: 'Listing of files:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - 展示`history_meta.py`模块函数用法的单元测试。'
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.  #### Versioning using Temporal Rows'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - 版本控制混合类和其他实用程序。  #### 使用时间行进行版本控制'
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 几个示例说明了拦截首先被解释为对行的UPDATE的更改的技术，并将其转换为对新行的INSERT，将先前的行保留为历史版本。
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与[带有历史表的版本化](#examples-versioned-history)示例进行比较，该示例将历史行写入单独的历史表。
- en: 'Listing of files:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - 展示了拦截对象更改的方法，将对单个行的UPDATE语句转换为INSERT语句，以便插入具有新数据的新行，保持旧行不变。'
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - 展示了拦截对象更改的方法，将对单个行的UPDATE语句转换为INSERT语句，以便插入具有新数据的新行，保持旧行不变。'
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - 围绕“垂直表”结构的概念构建的versioned_rows示例的变体，类似于[垂直属性映射](#examples-vertical-tables)示例中所示的那些。'
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.  ### Vertical Attribute Mapping'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - 展示了`versioned_rows.py`中相同的UPDATE转换为INSERT技术，但还发出了一个UPDATE命令来影响**旧**行的时间戳更改。
    还包括一个[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子，以限制查询仅针对最新版本。  ### 垂直属性映射'
- en: Illustrates “vertical table” mappings.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了“垂直表”映射。
- en: A “vertical table” refers to a technique where individual attributes of an object
    are stored as distinct rows in a table. The “vertical table” technique is used
    to persist objects which can have a varied set of attributes, at the expense of
    simple query control and brevity. It is commonly found in content/document management
    systems in order to represent user-created structures flexibly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “垂直表”是指将对象的各个属性存储为表中的不同行的技术。 “垂直表”技术用于持久化可以具有各种属性集的对象，但牺牲了简单的查询控制和简洁性。 它通常在内容/文档管理系统中找到，以灵活地表示用户创建的结构。
- en: Two variants on the approach are given. In the second, each row references a
    “datatype” which contains information about the type of information stored in
    the attribute, such as integer, string, or date.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 给出了两种方法。在第二种方法中，每行引用一个“数据类型”，其中包含有关属性中存储的信息类型的信息，例如整数、字符串或日期。
- en: 'Example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing of files:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - Mapping a polymorphic-valued vertical table as a dictionary.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - 将多态值的垂直表映射为字典。'
- en: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - Mapping a vertical
    table as a dictionary.  ## Inheritance Mapping Recipes'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - 将垂直表映射为字典。  ##
    继承映射配方'
- en: '### Basic Inheritance Mappings'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '### 基本继承映射'
- en: Working examples of single-table, joined-table, and concrete-table inheritance
    as described in [Mapping Class Inheritance Hierarchies](inheritance.html).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 单表、联接表和具体表继承的工作示例，如[映射类继承层次结构](inheritance.html)中所述。
- en: 'Listing of files:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[joined.py](../_modules/examples/inheritance/joined.html) - Joined-table (table-per-subclass)
    inheritance example.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[joined.py](../_modules/examples/inheritance/joined.html) - 联接表（每个子类一个表）继承示例。'
- en: '[concrete.py](../_modules/examples/inheritance/concrete.html) - Concrete-table
    (table-per-class) inheritance example.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[concrete.py](../_modules/examples/inheritance/concrete.html) - 具体表（基于类的表）继承示例。'
- en: '[single.py](../_modules/examples/inheritance/single.html) - Single-table (table-per-hierarchy)
    inheritance example.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single.py](../_modules/examples/inheritance/single.html) - 单表（基于层次结构的表）继承示例。'
- en: Special APIs
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊API
- en: '### Attribute Instrumentation'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '### 属性仪器化'
- en: Examples illustrating modifications to SQLAlchemy’s attribute management system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 示例说明了对SQLAlchemy属性管理系统的修改。
- en: 'Listing of files:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - Illustrates how to attach events to all instrumented attributes and listen for
    change events.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - 展示了如何将事件附加到所有被检测的属性，并监听更改事件。'
- en: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - Illustrates use of the [`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event, in conjunction with Core
    column defaults to provide ORM objects that automatically produce the default
    value when an un-set attribute is accessed.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - 说明了如何使用[`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")事件，配合核心列默认值，以提供ORM对象，当访问未设置的属性时自动产生默认值。'
- en: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - Illustrates customized class instrumentation, using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") extension package.  ### Horizontal Sharding'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - 说明了如何使用[`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation")扩展包自定义类仪器化。### 水平分片'
- en: A basic example of using the SQLAlchemy Sharding API. Sharding refers to horizontally
    scaling data across multiple databases.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy分片API的基本示例。分片是指在多个数据库之间水平扩展数据。
- en: 'The basic components of a “sharded” mapping are:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: “分片”映射的基本组件包括：
- en: multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, each assigned a “shard id”. These [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") instances may refer to different databases, or different
    schemas / accounts within the same database, or they can even be differentiated
    only by options that will cause them to access different schemas or tables when
    used.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")实例，每个都分配了一个“分片id”。这些[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例可能引用不同的数据库，或者同一数据库中的不同模式/帐户，或者它们甚至可以仅通过会导致它们在使用时访问不同模式或表的选项进行区分。
- en: a function which can return a single shard id, given an instance to be saved;
    this is called “shard_chooser”
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数，它可以根据要保存的实例返回单个分片id；这称为“shard_chooser”。
- en: a function which can return a list of shard ids which apply to a particular
    instance identifier; this is called “id_chooser”.If it returns all shard ids,
    all shards will be searched.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可以返回适用于特定实例标识符的分片id列表的函数；这称为“id_chooser”。如果返回所有分片id，则将搜索所有分片。
- en: a function which can return a list of shard ids to try, given a particular Query
    (“query_chooser”). If it returns all shard ids, all shards will be queried and
    the results joined together.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数，它可以根据特定查询返回要尝试的分片id列表（“query_chooser”）。如果返回所有分片id，则将查询所有分片并将结果连接在一起。
- en: In these examples, different kinds of shards are used against the same basic
    example which accommodates weather data on a per-continent basis. We provide example
    shard_chooser, id_chooser and query_chooser functions. The query_chooser illustrates
    inspection of the SQL expression element in order to attempt to determine a single
    shard being requested.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，使用不同类型的分片对相同的基本示例进行操作，该示例根据每个大陆的天气数据进行处理。我们提供了示例的shard_chooser、id_chooser和query_chooser函数。query_chooser说明了检查SQL表达式元素以尝试确定所请求的单个分片。
- en: The construction of generic sharding routines is an ambitious approach to the
    issue of organizing instances among multiple databases. For a more plain-spoken
    alternative, the “distinct entity” approach is a simple method of assigning objects
    to different tables (and potentially database nodes) in an explicit way - described
    on the wiki at [EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 创建通用分片例程是组织多个数据库实例的问题的一种雄心勃勃的方法。对于更简明的替代方案，“不同实体”方法是一种以明确方式将对象分配给不同表（以及可能的数据库节点）的简单方法
    - 在[EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName)的维基页面中有描述。
- en: 'Listing of files:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - Illustrates sharding using distinct SQLite databases.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - 演示了使用不同的SQLite数据库进行分片。'
- en: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    Illustrates sharding using a single SQLite database, that will however have multiple
    tables using a naming convention.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    演示了使用单个SQLite数据库进行分片，但是会使用命名约定来创建多个表。'
- en: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - Illustrates sharding using a single database with multiple schemas, where a
    different “schema_translates_map” can be used for each shard.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - 演示了在使用具有多个模式的单个数据库进行分片时，可以为每个分片使用不同的“schema_translates_map”。'
- en: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - Illustrates sharding
    API used with asyncio.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - 演示了与asyncio一起使用的分片API。'
- en: Extending the ORM
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展ORM
- en: '### ORM Query Events'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM 查询事件'
- en: Recipes which illustrate augmentation of ORM SELECT behavior as used by [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") with [2.0 style](../glossary.html#term-2.0-style)
    use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    as well as the [1.x style](../glossary.html#term-1.x-style) [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了如何使用 [dogpile.cache](https://dogpilecache.sqlalchemy.org/) 功能嵌入ORM查询，允许完全控制缓存以及从长期缓存中提取“延迟加载”的属性。
- en: Examples include demonstrations of the [`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option as well as the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括演示[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 选项以及[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 钩子的用法。
- en: As of SQLAlchemy 1.4, the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct is unified with the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, so that these two objects are mostly
    the same.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.4开始，[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    构造与 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造合并在一起，因此这两个对象基本上是相同的。
- en: 'Listing of files:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - Illustrates a custom per-query criteria that will be applied to selected entities.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - 演示了将应用于选定实体的自定义每个查询条件。'
- en: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - Illustrates a global criteria applied to entities of a particular type.  ###
    Dogpile Caching'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '### Dogpile 缓存'
- en: Illustrates how to embed [dogpile.cache](https://dogpilecache.sqlalchemy.org/)
    functionality with ORM queries, allowing full cache control as well as the ability
    to pull “lazy loaded” attributes from long term cache.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - 演示了应用于特定类型实体的全局条件。'
- en: 'In this demo, the following techniques are illustrated:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，以下技术被说明：
- en: Using the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件挂钩
- en: Basic technique of circumventing [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to pull from a custom cache source instead of
    the database.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过 [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    的基本技术，从自定义缓存源中获取数据，而不是从数据库中获取。
- en: Rudimental caching with dogpile.cache, using “regions” which allow global control
    over a fixed set of configurations.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 dogpile.cache 进行基本缓存，使用“区域”允许对固定配置集合进行全局控制。
- en: Using custom `UserDefinedOption` objects to configure options in a statement
    object.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义的 `UserDefinedOption` 对象配置语句对象中的选项。
- en: See also
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - includes a general example of the technique presented here.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](session_events.html#do-orm-execute-re-executing) - 包含此处提出的技术的一般示例。'
- en: 'E.g.:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To run, both SQLAlchemy and dogpile.cache must be installed or on the current
    PYTHONPATH. The demo will create a local directory for datafiles, insert initial
    data, and run. Running the demo a second time will utilize the cache files already
    present, and exactly one SQL statement against two tables will be emitted - the
    displayed result however will utilize dozens of lazyloads that all pull from cache.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行，必须安装 SQLAlchemy 和 dogpile.cache，或者将它们安装到当前的 PYTHONPATH。演示将创建一个本地目录用于数据文件，插入初始数据，然后运行。第二次运行演示将利用已经存在的缓存文件，并且仅会发出一条
    SQL 语句来查询两个表 - 但是显示的结果将利用数十个懒加载，所有懒加载都从缓存中获取。
- en: 'The demo scripts themselves, in order of complexity, are run as Python modules
    so that relative imports work:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 演示脚本本身按复杂性顺序作为 Python 模块运行，以便相对导入起作用。
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing of files:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - Establish
    data / cache file paths, and configurations, bootstrap fixture data if necessary.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - 确定数据/缓存文件路径和配置，如果需要，引导装置数据。'
- en: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - Represent functions and classes which allow the usage of Dogpile caching with
    SQLAlchemy. Introduces a query option called FromCache.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - 表示允许使用 SQLAlchemy 进行 Dogpile 缓存的函数和类。引入了一个称为 FromCache 的查询选项。'
- en: '[model.py](../_modules/examples/dogpile_caching/model.html) - The datamodel,
    which represents Person that has multiple Address objects, each with PostalCode,
    City, Country.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[model.py](../_modules/examples/dogpile_caching/model.html) - 数据模型，表示具有多个 Address
    对象的 Person，每个对象都有 PostalCode、City、Country。'
- en: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    Installs some sample data. Here we have a handful of postal codes for a few US/Canadian
    cities. Then, 100 Person records are installed, each with a randomly selected
    postal code.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    安装一些示例数据。这里有一些美国/加拿大几个城市的少量邮政编码。然后，安装 100 个 Person 记录，每个记录都有一个随机选择的邮政编码。'
- en: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - Illustrate
    how to load some data, and cache the results.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - 演示如何加载一些数据，并缓存结果。'
- en: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - Illustrates how to add cache options on relationship endpoints, so that lazyloads
    load from cache.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - 演示如何在关联端点上添加缓存选项，以便懒加载从缓存中加载。'
- en: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - Illustrate
    usage of Query combined with the FromCache option, including front-end loading,
    cache invalidation and collection caching.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - 演示如何使用
    Query 结合 FromCache 选项，包括前端加载、缓存失效和集合缓存。'
- en: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - This example creates a new dogpile.cache backend that will persist data in a
    dictionary which is local to the current session. remove() the session and the
    cache is gone.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - 此示例创建了一个新的 dogpile.cache 后端，将数据持久化在当前会话的字典中。移除会话后，缓存消失。'
- en: Mapping Recipes
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射配方
- en: '### Adjacency List'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '### 邻接表'
- en: An example of a dictionary-of-dictionaries structure mapped using an adjacency
    list model.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用邻接表模型映射的字典-字典结构的示例。
- en: 'E.g.:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing of files:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)  ###
    Associations'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)  ###
    关联'
- en: Examples illustrating the usage of the “association object” pattern, where an
    intermediary class mediates the relationship between two classes that are associated
    in a many-to-many pattern.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了“关联对象”模式的使用示例，其中一个中介类在两个以多对多模式关联的类之间进行关系中介。
- en: 'Listing of files:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - Same example as basic_association, adding in usage of [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") to make explicit references to `OrderItem`
    optional.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - 与 basic_association 相同的示例，添加了对 [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") 的使用，以使对 `OrderItem` 的显式引用是可选的。'
- en: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - Illustrate a many-to-many relationship between an “Order” and a collection of
    “Item” objects, associating a purchase price with each via an association object
    called “OrderItem”'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - 演示了“订单”和一组“商品”对象之间的多对多关系，通过名为“OrderItem”的关联对象为每个关联购买价格。'
- en: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - An advanced association proxy example which illustrates nesting of association
    proxies to produce multi-level Python collections, in this case a dictionary with
    string keys and sets of integers as values, which conceal the underlying mapped
    classes.  ### Asyncio Integration'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - 一个高级关联代理示例，演示了关联代理的嵌套以生成多级 Python 集合，本例中是一个具有字符串键和整数集合值的字典，它隐藏了底层映射类。  ### Asyncio
    集成'
- en: Examples illustrating the asyncio engine feature of SQLAlchemy.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了 SQLAlchemy 的 asyncio 引擎功能的示例。
- en: 'Listing of files:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - Illustrates use
    of the `sqlalchemy.ext.asyncio.AsyncSession` object for asynchronous ORM use.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - 演示了使用 `sqlalchemy.ext.asyncio.AsyncSession`
    对象进行异步 ORM 使用。'
- en: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - Illustrates using **write only relationships** for simpler handling of ORM collections
    under asyncio.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - 展示了使用**只写关系**来更简单地处理 asyncio 下的 ORM 集合。'
- en: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - Illustrates how to run many statements concurrently using `asyncio.gather()`
    along many asyncio database connections, merging ORM results into a single `AsyncSession`.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - 演示了如何使用 `asyncio.gather()` 在许多 asyncio 数据库连接上同时运行许多语句，将 ORM 结果合并为单个 `AsyncSession`。'
- en: '[basic.py](../_modules/examples/asyncio/basic.html) - Illustrates the asyncio
    engine / connection interface.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[basic.py](../_modules/examples/asyncio/basic.html) - 展示了 asyncio 引擎/连接接口。'
- en: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - Illustrates
    use of the sqlalchemy.ext.asyncio.AsyncSession object for asynchronous ORM use,
    including the optional run_sync() method.  ### Directed Graphs'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - 展示了使用 sqlalchemy.ext.asyncio.AsyncSession
    对象进行异步 ORM 使用的示例，包括可选的 run_sync() 方法。  ### 有向图'
- en: 'An example of persistence for a directed graph structure. The graph is stored
    as a collection of edges, each referencing both a “lower” and an “upper” node
    in a table of nodes. Basic persistence and querying for lower- and upper- neighbors
    are illustrated:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有向图结构的持久性示例。 图以一组边的形式存储，每个边都引用节点表中的“下限”和“上限”节点。 演示了基本的持久性和查询“下限”和“上限”邻居的方法：
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing of files:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)  ### Dynamic
    Relations as Dictionaries'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)  ### 动态关系作为字典'
- en: Illustrates how to place a dictionary-like facade on top of a “dynamic” relation,
    so that dictionary operations (assuming simple string keys) can operate upon a
    large collection without loading the full collection at once.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了如何在“动态”关系之上放置类似字典的外观，以便字典操作（假设简单字符串键）可以在一次加载完整集合的情况下操作大型集合。
- en: 'Listing of files:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)  ###
    Generic Associations'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)  ###
    通用关联'
- en: Illustrates various methods of associating multiple types of parents with a
    particular child object.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了将多种类型的父对象与特定子对象关联的各种方法。
- en: The examples all use the declarative extension along with declarative mixins.
    Each one presents the identical use case at the end - two classes, `Customer`
    and `Supplier`, both subclassing the `HasAddresses` mixin, which ensures that
    the parent class is provided with an `addresses` collection which contains `Address`
    objects.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例都使用了声明性扩展和声明性混合。每个示例最终呈现相同的用例 - 两个类，`Customer`和`Supplier`，都是`HasAddresses`混合类的子类，该混合类确保父类提供一个包含`Address`对象的`addresses`集合。
- en: The [discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    and [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    scripts are modernized versions of recipes presented in the 2007 blog post [Polymorphic
    Associations with SQLAlchemy](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)和[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)脚本是2007年博客文章[使用SQLAlchemy进行多态关联](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/)中提出的配方的现代化版本。'
- en: 'Listing of files:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - Illustrates a mixin which provides a generic association via a individually
    generated association tables for each parent class. The associated objects themselves
    are persisted in a single table shared among all parents.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - 展示了一个通过为每个父类单独生成关联表来提供通用关联的混合类。关联的对象本身存储在所有父类共享的单个表中。'
- en: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - Illustrates a generic association which persists association objects within
    individual tables, each one generated to persist those objects on behalf of a
    particular parent class.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - 展示了一种通用关联，通过为每个父类生成单独的关联表来持久化关联对象，每个关联表都是为了代表特定父类而生成的。'
- en: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - Illustrates a mixin which provides a generic association using a single target
    table and a single association table, referred to by all parent tables. The association
    table contains a “discriminator” column which determines what type of parent object
    associates to each particular row in the association table.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - 展示了一个提供通用关联的混合类，使用单个目标表和单个关联表，所有父表都引用该关联表。关联表包含一个“鉴别器”列，用于确定每个关联表中的行与哪种类型的父对象相关联。'
- en: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - Illustrates a so-called “generic foreign key”, in a similar fashion to that
    of popular frameworks such as Django, ROR, etc. This approach bypasses standard
    referential integrity practices, in that the “foreign key” column is not actually
    constrained to refer to any particular table; instead, in-application logic is
    used to determine which table is referenced.  ### Materialized Paths'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - 展示了所谓的“通用外键”，类似于流行框架（如Django、ROR等）的做法。这种方法绕过了标准的参照完整性实践，因为“外键”列实际上并没有约束到任何特定的表；相反，应用程序逻辑用于确定引用的是哪个表。  ###
    材料化路径'
- en: Illustrates the “materialized paths” pattern for hierarchical data using the
    SQLAlchemy ORM.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了使用SQLAlchemy ORM实现“材料化路径”模式的方法。
- en: 'Listing of files:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - Illustrates the “materialized paths” pattern.  ### Nested Sets'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - 展示了“材料化路径”模式。  ### 嵌套集'
- en: Illustrates a rudimentary way to implement the “nested sets” pattern for hierarchical
    data using the SQLAlchemy ORM.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了使用SQLAlchemy ORM实现“嵌套集”模式的基本方法。
- en: 'Listing of files:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko’s
    “Nested Sets” Tree Structure.  ### Performance'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko的“嵌套集”树结构。  ###
    性能'
- en: A performance profiling suite for a variety of SQLAlchemy use cases.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 用于各种SQLAlchemy用例的性能分析套件。
- en: 'Each suite focuses on a specific use case with a particular performance profile
    and associated implications:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 每个套件专注于具有特定性能配置文件和相关影响的特定用例：
- en: bulk inserts
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量插入
- en: individual inserts, with or without transactions
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个插入，有或者没有事务
- en: fetching large numbers of rows
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取大量行
- en: running lots of short queries
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行大量短查询
- en: All suites include a variety of use patterns illustrating both Core and ORM
    use, and are generally sorted in order of performance from worst to greatest,
    inversely based on amount of functionality provided by SQLAlchemy, greatest to
    least (these two things generally correspond perfectly).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 所有套件都包括一系列使用模式，说明了核心和 ORM 使用，并且通常按性能从最差到最佳的顺序排序，基于 SQLAlchemy 提供的功能数量，从最大到最小（这两个方面通常完美对应）。
- en: 'A command line tool is presented at the package level which allows individual
    suites to be run:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一个命令行工具在包级别被呈现，它允许运行个别套件：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'An example run looks like:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 示例运行如下：
- en: '[PRE21]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or with options:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用选项：
- en: '[PRE22]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How can I profile a SQLAlchemy powered application?](../faq/performance.html#faq-how-to-profile)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[我如何分析使用 SQLAlchemy 的应用程序？](../faq/performance.html#faq-how-to-profile)'
- en: File Listing
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件列表
- en: 'Listing of files:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - 这一系列的测试将演示不同的方式来批量更新大量行（正在建设中！目前只有一个测试）'
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - 在这一系列的测试中，我们正在研究加载大量非常小而简单行所需的时间。'
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - 这一系列的测试演示了不同的方式来批量插入大量行。'
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[short_selects.py](../_modules/examples/performance/short_selects.html) - 这一系列的测试演示了不同的方式来通过主键选择单个记录'
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    在这一系列的测试中，我们正在研究一种在独立事务中插入一行数据的方法，然后返回到基本上是“关闭”的状态。这类似于一个启动数据库连接、插入行、提交并关闭的 API
    调用。'
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[__main__.py](../_modules/examples/performance/__main__.html) - 允许 examples/performance
    包被当作脚本运行。'
- en: Running all tests with time
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行所有测试并计时
- en: 'This is the default form of run:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认的运行形式：
- en: '[PRE23]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Dumping Profiles for Individual Tests
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为个别测试转储配置文件
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Python 分析配置文件可以为所有测试或更常见的是为个别测试转储：
- en: '[PRE24]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '#### Writing your Own Suites'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写您自己的套件'
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 分析套件系统是可扩展的，并且可以应用于您自己的一组测试。这是一个在决定某些性能关键程度的一组例程的正确方法时使用的宝贵技术。例如，如果我们想要分析几种加载之间的差异，我们可以创建一个名为`test_loads.py`的文件，内容如下：
- en: '[PRE25]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can run our new script directly:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接运行我们的新脚本：
- en: '[PRE26]  ### Space Invaders'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE26]  ### 太空入侵'
- en: A Space Invaders game using SQLite as the state machine.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQLite 作为状态机的太空入侵游戏。
- en: Originally developed in 2012\. Adapted to work in Python 3.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 最初于 2012 年开发。适应 Python 3 中运行。
- en: Runs in a textual console using ASCII art.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ASCII 艺术在文本控制台中运行。
- en: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
- en: 'To run:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行：
- en: '[PRE27]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'While it runs, watch the SQL output in the log:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，请观察日志中的 SQL 输出：
- en: '[PRE28]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: enjoy!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您愉快！
- en: 'Listing of files:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)  ###
    Versioning Objects'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)  ###
    对象版本控制'
- en: '#### Versioning with a History Table'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用历史表进行版本控制'
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了一个扩展，它为实体创建版本表并为每个更改存储记录。给定的扩展生成一个匿名的“历史”类，该类表示目标对象的历史版本。
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 与在相同表中将更新写为新行的[使用时间行进行版本控制](#examples-versioned-rows)示例进行比较，而不使用单独的历史表。
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个单元测试模块 `test_versioning.py` 展示了用法，可以像运行任何其他模块一样运行，内部使用 `unittest`：
- en: '[PRE29]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'A fragment of example usage, using declarative:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用声明性的示例用法片段：
- en: '[PRE30]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`Versioned` 混合类设计用于与声明性一起使用。要将扩展与经典映射器一起使用，可以应用 `_history_mapper` 函数：'
- en: '[PRE31]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制示例还与文档中记录的 ORM 乐观并发特性集成在一起 [配置版本计数器](versioning.html#mapper-version-counter)。要启用此功能，请将标志
    `Versioned.use_mapper_versioning` 设置为 True：
- en: '[PRE32]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个具有相同版本标识符的 `SomeClass` 实例被同时更新并发送到数据库以进行并发 UPDATE，如果数据库隔离级别允许两个 UPDATE 语句继续进行，则其中一个将失败，因为它不再针对最后已知的版本标识符。
- en: 'Listing of files:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - 演示 `history_meta.py` 模块函数的用法的单元测试。'
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.  #### Versioning using Temporal Rows'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - 版本混合类和其他实用程序。  #### 使用时间行进行版本控制'
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个示例说明了拦截更改的技术，这些更改首先被解释为对行的 UPDATE，而实际上将其转换为对新行的 INSERT，使以前的行保持不变作为历史版本。
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 与将历史行写入单独的历史表的[使用历史表进行版本控制](#examples-versioned-history)示例进行比较。
- en: 'Listing of files:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - 演示拦截对象更改的方法，将单行的 UPDATE 语句转换为 INSERT 语句，以便插入具有新数据的新行，保持旧行不变。'
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - 演示拦截对象更改的方法，将单行的 UPDATE 语句转换为 INSERT 语句，以便插入具有新数据的新行，保持旧行不变。'
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - 围绕“垂直表”结构的概念构建的 versioned_rows 示例的变体，类似于 [垂直属性映射](#examples-vertical-tables)
    示例中所示的那些。'
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.  ### Vertical Attribute Mapping'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - 说明了`versioned_rows.py`中相同的UPDATE到INSERT技术，但也发出了对**旧**行的UPDATE以影响时间戳的更改。还包括一个[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子，以限制查询仅限于最新版本。  ### 竖直属性映射'
- en: Illustrates “vertical table” mappings.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 说明了“竖直表”映射。
- en: A “vertical table” refers to a technique where individual attributes of an object
    are stored as distinct rows in a table. The “vertical table” technique is used
    to persist objects which can have a varied set of attributes, at the expense of
    simple query control and brevity. It is commonly found in content/document management
    systems in order to represent user-created structures flexibly.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: “竖直表”是指一种技术，其中对象的各个属性被存储为表中的不同行。使用“竖直表”技术来持久化可以具有不同属性集的对象，但会牺牲简单的查询控制和简洁性。在内容/文档管理系统中通常可以灵活表示用户创建的结构。
- en: Two variants on the approach are given. In the second, each row references a
    “datatype” which contains information about the type of information stored in
    the attribute, such as integer, string, or date.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 给出了两种方法的变体。在第二种方法中，每行引用一个“数据类型”，其中包含关于属性中存储的信息类型的信息，例如整数、字符串或日期。
- en: 'Example:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE33]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Listing of files:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - Mapping a polymorphic-valued vertical table as a dictionary.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - 将具有多态值的竖直表映射为字典。'
- en: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - Mapping a vertical
    table as a dictionary.  ### Adjacency List'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - 将竖直表映射为字典的示例。  ###
    邻接表'
- en: An example of a dictionary-of-dictionaries structure mapped using an adjacency
    list model.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以邻接表模型映射的字典嵌套结构的示例。
- en: 'E.g.:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE34]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Listing of files:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[adjacency_list.py](../_modules/examples/adjacency_list/adjacency_list.html)'
- en: '### Associations'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '### 关联'
- en: Examples illustrating the usage of the “association object” pattern, where an
    intermediary class mediates the relationship between two classes that are associated
    in a many-to-many pattern.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 示例说明了“关联对象”模式的使用，其中一个中间类介于两个以多对多模式关联的类之间。
- en: 'Listing of files:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - Same example as basic_association, adding in usage of [`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy") to make explicit references to `OrderItem`
    optional.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[proxied_association.py](../_modules/examples/association/proxied_association.html)
    - 与basic_association相同的示例，同时添加了对[`sqlalchemy.ext.associationproxy`](extensions/associationproxy.html#module-sqlalchemy.ext.associationproxy
    "sqlalchemy.ext.associationproxy")的使用，以使对`OrderItem`的显式引用成为可选。'
- en: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - Illustrate a many-to-many relationship between an “Order” and a collection of
    “Item” objects, associating a purchase price with each via an association object
    called “OrderItem”'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[basic_association.py](../_modules/examples/association/basic_association.html)
    - 说明了“订单”和“项目”对象集合之间的多对多关系，通过称为“OrderItem”的关联对象将每个订单价格关联起来。'
- en: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - An advanced association proxy example which illustrates nesting of association
    proxies to produce multi-level Python collections, in this case a dictionary with
    string keys and sets of integers as values, which conceal the underlying mapped
    classes.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dict_of_sets_with_default.py](../_modules/examples/association/dict_of_sets_with_default.html)
    - 一个高级关联代理示例，说明了关联代理的嵌套以生成多级Python集合，本例中是一个具有字符串键和整数集合作为值的字典，该字典隐藏了底层的映射类。'
- en: '### Asyncio Integration'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '### Asyncio集成'
- en: Examples illustrating the asyncio engine feature of SQLAlchemy.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 示例说明了SQLAlchemy的asyncio引擎功能。
- en: 'Listing of files:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - Illustrates use
    of the `sqlalchemy.ext.asyncio.AsyncSession` object for asynchronous ORM use.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[async_orm.py](../_modules/examples/asyncio/async_orm.html) - 演示了使用`sqlalchemy.ext.asyncio.AsyncSession`对象进行异步ORM使用。'
- en: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - Illustrates using **write only relationships** for simpler handling of ORM collections
    under asyncio.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[async_orm_writeonly.py](../_modules/examples/asyncio/async_orm_writeonly.html)
    - 演示了在asyncio下使用**只写关系**来更简单地处理ORM集合。'
- en: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - Illustrates how to run many statements concurrently using `asyncio.gather()`
    along many asyncio database connections, merging ORM results into a single `AsyncSession`.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[gather_orm_statements.py](../_modules/examples/asyncio/gather_orm_statements.html)
    - 演示了如何使用`asyncio.gather()`在许多asyncio数据库连接上并发运行多个语句，将ORM结果合并到单个`AsyncSession`中。'
- en: '[basic.py](../_modules/examples/asyncio/basic.html) - Illustrates the asyncio
    engine / connection interface.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[basic.py](../_modules/examples/asyncio/basic.html) - 演示了asyncio引擎/连接接口。'
- en: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - Illustrates
    use of the sqlalchemy.ext.asyncio.AsyncSession object for asynchronous ORM use,
    including the optional run_sync() method.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[greenlet_orm.py](../_modules/examples/asyncio/greenlet_orm.html) - 演示了使用sqlalchemy.ext.asyncio.AsyncSession对象进行异步ORM使用，包括可选的run_sync()方法。'
- en: '### Directed Graphs'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '### 有向图'
- en: 'An example of persistence for a directed graph structure. The graph is stored
    as a collection of edges, each referencing both a “lower” and an “upper” node
    in a table of nodes. Basic persistence and querying for lower- and upper- neighbors
    are illustrated:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有向图结构的持久性示例。图被存储为一组边，每条边都引用节点表中的“较低”和“较高”节点。演示了基本的持久性和查询较低和较高邻居的方法：
- en: '[PRE35]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Listing of files:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[directed_graph.py](../_modules/examples/graphs/directed_graph.html)'
- en: '### Dynamic Relations as Dictionaries'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '### 动态关系作为字典'
- en: Illustrates how to place a dictionary-like facade on top of a “dynamic” relation,
    so that dictionary operations (assuming simple string keys) can operate upon a
    large collection without loading the full collection at once.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了如何在“动态”关系之上放置类似于字典的外观，以便字典操作（假设简单的字符串键）可以在大型集合上进行操作，而无需一次加载整个集合。
- en: 'Listing of files:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dynamic_dict.py](../_modules/examples/dynamic_dict/dynamic_dict.html)'
- en: '### Generic Associations'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '### 通用关联'
- en: Illustrates various methods of associating multiple types of parents with a
    particular child object.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了将多种类型的父类与特定子对象关联的各种方法。
- en: The examples all use the declarative extension along with declarative mixins.
    Each one presents the identical use case at the end - two classes, `Customer`
    and `Supplier`, both subclassing the `HasAddresses` mixin, which ensures that
    the parent class is provided with an `addresses` collection which contains `Address`
    objects.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例都使用声明性扩展以及声明性mixin。每个示例最后都呈现相同的用例 - 两个类，`Customer`和`Supplier`，都是`HasAddresses`
    mixin的子类，该mixin确保父类提供了一个包含`Address`对象的`addresses`集合。
- en: The [discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    and [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    scripts are modernized versions of recipes presented in the 2007 blog post [Polymorphic
    Associations with SQLAlchemy](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    和 [generic_fk.py](../_modules/examples/generic_associations/generic_fk.html) 脚本是2007年博客文章[使用SQLAlchemy进行多态关联](https://techspot.zzzeek.org/2007/05/29/polymorphic-associations-with-sqlalchemy/)中提出的配方的现代化版本。'
- en: 'Listing of files:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - Illustrates a mixin which provides a generic association via a individually
    generated association tables for each parent class. The associated objects themselves
    are persisted in a single table shared among all parents.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[table_per_association.py](../_modules/examples/generic_associations/table_per_association.html)
    - 通过为每个父类单独生成关联表格来提供通用关联的mixin示例。关联对象本身存储在所有父类之间共享的单个表中。'
- en: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - Illustrates a generic association which persists association objects within
    individual tables, each one generated to persist those objects on behalf of a
    particular parent class.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[table_per_related.py](../_modules/examples/generic_associations/table_per_related.html)
    - 演示了一种通用关联，它在各个表中持久化关联对象，每个表都生成来代表特定父类持久化这些对象。'
- en: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - Illustrates a mixin which provides a generic association using a single target
    table and a single association table, referred to by all parent tables. The association
    table contains a “discriminator” column which determines what type of parent object
    associates to each particular row in the association table.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[discriminator_on_association.py](../_modules/examples/generic_associations/discriminator_on_association.html)
    - 演示了一种提供通用关联的mixin，该关联使用单个目标表和单个关联表，所有父表都引用它。关联表包含一个“区分符”列，用于确定哪种类型的父对象与关联表中的每个特定行关联。'
- en: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - Illustrates a so-called “generic foreign key”, in a similar fashion to that
    of popular frameworks such as Django, ROR, etc. This approach bypasses standard
    referential integrity practices, in that the “foreign key” column is not actually
    constrained to refer to any particular table; instead, in-application logic is
    used to determine which table is referenced.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[generic_fk.py](../_modules/examples/generic_associations/generic_fk.html)
    - 演示了所谓的“通用外键”，类似于流行框架（如Django，ROR等）的方式。这种方法绕过了标准的参照完整性实践，因为“外键”列实际上并不限制引用任何特定表；相反，应用程序逻辑用于确定引用的是哪个表。'
- en: '### Materialized Paths'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '### 材料化路径'
- en: Illustrates the “materialized paths” pattern for hierarchical data using the
    SQLAlchemy ORM.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了使用SQLAlchemy ORM实现“材料化路径”模式的方法。
- en: 'Listing of files:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - Illustrates the “materialized paths” pattern.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[materialized_paths.py](../_modules/examples/materialized_paths/materialized_paths.html)
    - 演示了“材料化路径”模式。'
- en: '### Nested Sets'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '### 嵌套集'
- en: Illustrates a rudimentary way to implement the “nested sets” pattern for hierarchical
    data using the SQLAlchemy ORM.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了使用SQLAlchemy ORM实现“嵌套集”模式的一种基本方法。
- en: 'Listing of files:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko’s
    “Nested Sets” Tree Structure.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[nested_sets.py](../_modules/examples/nested_sets/nested_sets.html) - Celko的“嵌套集”树结构。'
- en: '### Performance'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '### 性能'
- en: A performance profiling suite for a variety of SQLAlchemy use cases.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 用于各种SQLAlchemy用例的性能分析套件。
- en: 'Each suite focuses on a specific use case with a particular performance profile
    and associated implications:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 每个套件都专注于特定用例，具有特定的性能概况和相关含义：
- en: bulk inserts
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量插入
- en: individual inserts, with or without transactions
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独插入，有或没有事务
- en: fetching large numbers of rows
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取大量行
- en: running lots of short queries
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行大量短查询
- en: All suites include a variety of use patterns illustrating both Core and ORM
    use, and are generally sorted in order of performance from worst to greatest,
    inversely based on amount of functionality provided by SQLAlchemy, greatest to
    least (these two things generally correspond perfectly).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 所有套件都包括各种使用模式，说明了Core和ORM的使用，并且通常按性能从最差到最佳的顺序排序，根据SQLAlchemy提供的功能量的多少，从最大到最小排列（这两件事通常完美对应）。
- en: 'A command line tool is presented at the package level which allows individual
    suites to be run:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 一个命令行工具在包级别呈现，允许运行各个套件：
- en: '[PRE36]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'An example run looks like:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例运行如下：
- en: '[PRE37]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Or with options:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 或者带有选项：
- en: '[PRE38]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How can I profile a SQLAlchemy powered application?](../faq/performance.html#faq-how-to-profile)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[我如何分析一个由SQLAlchemy驱动的应用程序？](../faq/performance.html#faq-how-to-profile)'
- en: File Listing
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件清单
- en: 'Listing of files:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - 这一系列测试将说明不同的方式来批量更新大量行（正在施工！目前只有一个测试）'
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - 在这系列测试中，我们研究加载大量非常小而简单的行所需的时间。'
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - 这一系列的测试展示了批量插入大量行的不同方法。'
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[short_selects.py](../_modules/examples/performance/short_selects.html) - 这一系列的测试展示了通过主键选择单个记录的不同方法。'
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    在这一系列的测试中，我们看到了一种在不同事务中插入行并且之后返回到实质上“关闭”状态的方法。这类似于启动数据库连接的 API 调用，插入行，提交并关闭的过程。'
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[__main__.py](../_modules/examples/performance/__main__.html) - 允许 examples/performance
    包作为脚本运行。'
- en: Running all tests with time
  id: totrans-359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用时间运行所有测试
- en: 'This is the default form of run:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行的默认形式：
- en: '[PRE39]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Dumping Profiles for Individual Tests
  id: totrans-362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为个别测试输出简要概要
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为所有测试或更常见的是个别测试转储 Python 分析输出：
- en: '[PRE40]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '#### Writing your Own Suites'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写你自己的测试套件'
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 分析套件系统是可扩展的，并且可以应用于你自己的一组测试。这是一种在决定某些性能关键例程的正确方法时使用的有价值技术。例如，如果我们想要分析几种加载方式之间的差异，我们可以创建一个名为
    `test_loads.py` 的文件，其内容如下：
- en: '[PRE41]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We can run our new script directly:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接运行我们的新脚本：
- en: '[PRE42]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: File Listing
  id: totrans-370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件列表
- en: 'Listing of files:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - This
    series of tests will illustrate different ways to UPDATE a large number of rows
    in bulk (under construction! there’s just one test at the moment)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_updates.py](../_modules/examples/performance/bulk_updates.html) - 这一系列的测试将展示不同方法批量更新大量行（正在构建！目前只有一个测试）'
- en: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - In this series of tests, we are looking at time to load a large number of very
    small and simple rows.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[large_resultsets.py](../_modules/examples/performance/large_resultsets.html)
    - 在这一系列的测试中，我们关注的是加载大量非常小而简单的行的时间。'
- en: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - This
    series of tests illustrates different ways to INSERT a large number of rows in
    bulk.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bulk_inserts.py](../_modules/examples/performance/bulk_inserts.html) - 这一系列的测试展示了批量插入大量行的不同方法。'
- en: '[short_selects.py](../_modules/examples/performance/short_selects.html) - This
    series of tests illustrates different ways to SELECT a single record by primary
    key'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[short_selects.py](../_modules/examples/performance/short_selects.html) - 这一系列的测试展示了通过主键选择单个记录的不同方法。'
- en: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    In this series of tests, we’re looking at a method that inserts a row within a
    distinct transaction, and afterwards returns to essentially a “closed” state.
    This would be analogous to an API call that starts up a database connection, inserts
    the row, commits and closes.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single_inserts.py](../_modules/examples/performance/single_inserts.html) -
    在这一系列的测试中，我们看到了一种在不同事务中插入行并且之后返回到实质上“关闭”状态的方法。这类似于启动数据库连接的 API 调用，插入行，提交并关闭的过程。'
- en: '[__main__.py](../_modules/examples/performance/__main__.html) - Allows the
    examples/performance package to be run as a script.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[__main__.py](../_modules/examples/performance/__main__.html) - 允许 examples/performance
    包作为脚本运行。'
- en: Running all tests with time
  id: totrans-378
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用时间运行所有测试
- en: 'This is the default form of run:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行的默认形式：
- en: '[PRE43]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Dumping Profiles for Individual Tests
  id: totrans-381
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为个别测试输出简要概要
- en: 'A Python profile output can be dumped for all tests, or more commonly individual
    tests:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为所有测试或更常见的是个别测试转储 Python 分析输出：
- en: '[PRE44]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '#### Writing your Own Suites'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写你自己的测试套件'
- en: 'The profiler suite system is extensible, and can be applied to your own set
    of tests. This is a valuable technique to use in deciding upon the proper approach
    for some performance-critical set of routines. For example, if we wanted to profile
    the difference between several kinds of loading, we can create a file `test_loads.py`,
    with the following content:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析套件系统是可扩展的，并且可以应用于您自己的一组测试。这是在决定某些性能关键例程的正确方法时使用的宝贵技术。例如，如果我们想要分析几种加载之间的差异，我们可以创建一个名为`test_loads.py`的文件，其中包含以下内容：
- en: '[PRE45]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We can run our new script directly:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接运行我们的新脚本：
- en: '[PRE46]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '### Space Invaders'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '### 太空侵略者'
- en: A Space Invaders game using SQLite as the state machine.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLite作为状态机的太空侵略者游戏。
- en: Originally developed in 2012\. Adapted to work in Python 3.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 最初开发于2012年。已适配为在Python 3中运行。
- en: Runs in a textual console using ASCII art.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本控制台中使用 ASCII 艺术运行。
- en: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/space_invaders.jpg](../Images/df5d8744e7ec946672bdde78d1db980c.png)'
- en: 'To run:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 运行：
- en: '[PRE47]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'While it runs, watch the SQL output in the log:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，观察日志中的SQL输出：
- en: '[PRE48]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: enjoy!
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 尽情享受！
- en: 'Listing of files:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[space_invaders.py](../_modules/examples/space_invaders/space_invaders.html)'
- en: '### Versioning Objects'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '### 版本化对象'
- en: '#### Versioning with a History Table'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 带有历史表的版本控制'
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了一个扩展，为实体创建版本表并存储每次更改的记录。给定的扩展生成一个匿名的“历史”类，表示目标对象的历史版本。
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 与[使用时间行进行版本控制](#examples-versioned-rows)示例进行比较，该示例将更新写入为同一表中的新行，而不使用单独的历史表。
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通过一个单元测试模块`test_versioning.py`进行演示，可以像其他模块一样运行，内部使用`unittest`：
- en: '[PRE49]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'A fragment of example usage, using declarative:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例用法片段，使用声明性：
- en: '[PRE50]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`Versioned`混合类设计用于与声明性一起使用。要将扩展与经典映射器一起使用，可以应用`_history_mapper`函数：'
- en: '[PRE51]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 版本示例还与ORM乐观并发功能集成，文档化在[配置版本计数器](versioning.html#mapper-version-counter)。要启用此功能，请将标志`Versioned.use_mapper_versioning`设置为True：
- en: '[PRE52]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个具有相同版本标识符的`SomeClass`实例被同时更新并发送到数据库进行并发更新，如果数据库隔离级别允许两个UPDATE语句继续进行，其中一个将失败，因为它不再针对最后已知的版本标识符。
- en: 'Listing of files:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - 展示了`history_meta.py`模块函数的使用的单元测试。'
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.  #### Versioning using Temporal Rows'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - 带有版本控制的混合类和其他实用工具。#### 使用时间行进行版本控制'
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 几个示例说明拦截更改的技术，这些更改首先被解释为对行的更新，而实际上将其转换为对新行的插入，保留先前的行作为历史版本。
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 与[带有历史表的版本控制](#examples-versioned-history)示例进行比较，该示例将历史行写入单独的历史表。
- en: 'Listing of files:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - 说明了拦截对象更改的方法，将对单个行的UPDATE语句转换为INSERT语句，以便使用新数据插入新行，保留旧行不变。'
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - 说明了拦截对象更改的方法，将对单个行的UPDATE语句转换为INSERT语句，以便使用新数据插入新行，保留旧行不变。'
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - 围绕“垂直表”结构的概念构建的`versioned_rows`示例的变体，类似于[垂直属性映射](#examples-vertical-tables)示例中所示的内容。'
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.  #### Versioning with a History Table'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - 说明了`versioned_rows.py`的相同UPDATE到INSERT技术，但还会对**旧**行进行UPDATE以影响时间戳的更改。还包括一个[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")挂钩来将查询限制为只有最新版本。  #### 使用历史表进行版本控制'
- en: Illustrates an extension which creates version tables for entities and stores
    records for each change. The given extensions generate an anonymous “history”
    class which represents historical versions of the target object.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了一个创建实体的版本表并为每个更改存储记录的扩展。给定的扩展生成一个匿名的“history”类，表示目标对象的历史版本。
- en: Compare to the [Versioning using Temporal Rows](#examples-versioned-rows) examples
    which write updates as new rows in the same table, without using a separate history
    table.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 与[使用时间行版本化](#examples-versioned-rows)的例子相比，这些例子将更新写入相同表中的新行中，而不使用单独的历史表。
- en: 'Usage is illustrated via a unit test module `test_versioning.py`, which can
    be run like any other module, using `unittest` internally:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个单元测试模块`test_versioning.py`来说明使用方法，可以像其他模块一样运行，内部使用`unittest`：
- en: '[PRE53]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'A fragment of example usage, using declarative:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例用法片段，使用声明式：
- en: '[PRE54]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `Versioned` mixin is designed to work with declarative. To use the extension
    with classical mappers, the `_history_mapper` function can be applied:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`Versioned` mixin设计为与声明性一起使用。要将扩展与经典映射器一起使用，可以应用`_history_mapper`函数：'
- en: '[PRE55]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The versioning example also integrates with the ORM optimistic concurrency
    feature documented at [Configuring a Version Counter](versioning.html#mapper-version-counter).
    To enable this feature, set the flag `Versioned.use_mapper_versioning` to True:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制示例还与在[配置版本计数器](versioning.html#mapper-version-counter)中记录的ORM乐观并发功能集成。要启用此功能，请将标志`Versioned.use_mapper_versioning`设置为True：
- en: '[PRE56]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Above, if two instance of `SomeClass` with the same version identifier are updated
    and sent to the database for UPDATE concurrently, if the database isolation level
    allows the two UPDATE statements to proceed, one will fail because it no longer
    is against the last known version identifier.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，如果两个具有相同版本标识符的`SomeClass`实例被同时更新并发送到数据库进行并发更新，如果数据库隔离级别允许这两个UPDATE语句继续进行，其中一个将失败，因为它不再是针对最后已知版本标识符的。
- en: 'Listing of files:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - Unit tests illustrating usage of the `history_meta.py` module functions.'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_versioning.py](../_modules/examples/versioned_history/test_versioning.html)
    - 展示了`history_meta.py`模块函数的用法的单元测试。'
- en: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - Versioned mixin class and other utilities.'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[history_meta.py](../_modules/examples/versioned_history/history_meta.html)
    - 版本混合类和其他实用工具。'
- en: '#### Versioning using Temporal Rows'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 使用时间行版本化'
- en: Several examples that illustrate the technique of intercepting changes that
    would be first interpreted as an UPDATE on a row, and instead turning it into
    an INSERT of a new row, leaving the previous row intact as a historical version.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 几个示例说明了拦截更改的技术，这些更改首先被解释为对行的UPDATE，而实际上将其转换为对新行的INSERT，将先前的行保留为历史版本。
- en: Compare to the [Versioning with a History Table](#examples-versioned-history)
    example which writes a history row to a separate history table.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 与[带有历史表的版本控制](#examples-versioned-history)示例进行比较，该示例将历史行写入单独的历史表中。
- en: 'Listing of files:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows.py](../_modules/examples/versioned_rows/versioned_rows.html)
    - 展示了拦截对象更改的方法，将对单行的UPDATE语句转换为INSERT语句，以便插入具有新数据的新行，同时保留旧行不变。'
- en: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - Illustrates a method to intercept changes on objects, turning an UPDATE statement
    on a single row into an INSERT statement, so that a new row is inserted with the
    new data, keeping the old row intact.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_rows_w_versionid.py](../_modules/examples/versioned_rows/versioned_rows_w_versionid.html)
    - 展示了拦截对象更改的方法，将对单行的UPDATE语句转换为INSERT语句，以便插入具有新数据的新行，同时保留旧行不变。'
- en: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - A variant of the versioned_rows example built around the concept of a “vertical
    table” structure, like those illustrated in [Vertical Attribute Mapping](#examples-vertical-tables)
    examples.'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_map.py](../_modules/examples/versioned_rows/versioned_map.html)
    - 围绕“垂直表”结构概念构建的versioned_rows示例的变体，类似于[垂直属性映射](#examples-vertical-tables)示例中所示的那些。'
- en: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - Illustrates the same UPDATE into INSERT technique of `versioned_rows.py`, but
    also emits an UPDATE on the **old** row to affect a change in timestamp. Also
    includes a [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook to limit queries to only the
    most recent version.'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[versioned_update_old_row.py](../_modules/examples/versioned_rows/versioned_update_old_row.html)
    - 展示了与`versioned_rows.py`相同的UPDATE转换为INSERT技术，但还发出了对**旧**行的UPDATE以影响时间戳的更改。还包括一个[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子，以限制查询仅针对最新版本。'
- en: '### Vertical Attribute Mapping'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '### 垂直属性映射'
- en: Illustrates “vertical table” mappings.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了“垂直表”映射。
- en: A “vertical table” refers to a technique where individual attributes of an object
    are stored as distinct rows in a table. The “vertical table” technique is used
    to persist objects which can have a varied set of attributes, at the expense of
    simple query control and brevity. It is commonly found in content/document management
    systems in order to represent user-created structures flexibly.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: “垂直表”是指将对象的各个属性存储为表中的不同行的技术。 “垂直表”技术用于持久化可以具有各种属性集的对象，但牺牲了简单的查询控制和简洁性。它通常在内容/文档管理系统中找到，以灵活地表示用户创建的结构。
- en: Two variants on the approach are given. In the second, each row references a
    “datatype” which contains information about the type of information stored in
    the attribute, such as integer, string, or date.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 给出了两种方法的变体。在第二种方法中，每行引用一个包含有关存储在属性中的信息类型的“数据类型”，例如整数、字符串或日期。
- en: 'Example:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE57]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Listing of files:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - Mapping a polymorphic-valued vertical table as a dictionary.'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dictlike-polymorphic.py](../_modules/examples/vertical/dictlike-polymorphic.html)
    - 将多态值的垂直表映射为字典。'
- en: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - Mapping a vertical
    table as a dictionary.'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dictlike.py](../_modules/examples/vertical/dictlike.html) - 将垂直表映射为字典。'
- en: '## Inheritance Mapping Recipes'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '## 继承映射配方'
- en: '### Basic Inheritance Mappings'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '### 基本继承映射'
- en: Working examples of single-table, joined-table, and concrete-table inheritance
    as described in [Mapping Class Inheritance Hierarchies](inheritance.html).
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 单表、联表和具体表继承的工作示例，如[映射类继承层次结构](inheritance.html)中所述。
- en: 'Listing of files:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[joined.py](../_modules/examples/inheritance/joined.html) - Joined-table (table-per-subclass)
    inheritance example.'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[joined.py](../_modules/examples/inheritance/joined.html) - 联接表（每个子类一个表）继承示例。'
- en: '[concrete.py](../_modules/examples/inheritance/concrete.html) - Concrete-table
    (table-per-class) inheritance example.'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[concrete.py](../_modules/examples/inheritance/concrete.html) - 具体表（每类一表）继承示例。'
- en: '[single.py](../_modules/examples/inheritance/single.html) - Single-table (table-per-hierarchy)
    inheritance example.  ### Basic Inheritance Mappings'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single.py](../_modules/examples/inheritance/single.html) - 单表（按层次结构划分）继承示例。  ###
    基本继承映射'
- en: Working examples of single-table, joined-table, and concrete-table inheritance
    as described in [Mapping Class Inheritance Hierarchies](inheritance.html).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '作为[Mapping Class Inheritance Hierarchies](inheritance.html)中描述的单表、连接表和具体表继承的工作示例。 '
- en: 'Listing of files:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[joined.py](../_modules/examples/inheritance/joined.html) - Joined-table (table-per-subclass)
    inheritance example.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[joined.py](../_modules/examples/inheritance/joined.html) - 连接表（每子类一表）继承示例。'
- en: '[concrete.py](../_modules/examples/inheritance/concrete.html) - Concrete-table
    (table-per-class) inheritance example.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[concrete.py](../_modules/examples/inheritance/concrete.html) - 具体表（每类一表）继承示例。'
- en: '[single.py](../_modules/examples/inheritance/single.html) - Single-table (table-per-hierarchy)
    inheritance example.'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[single.py](../_modules/examples/inheritance/single.html) - 单表（按层次结构划分）继承示例。'
- en: Special APIs
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊API
- en: '### Attribute Instrumentation'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '### 属性仪器化'
- en: Examples illustrating modifications to SQLAlchemy’s attribute management system.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 示例说明了对SQLAlchemy属性管理系统的修改。
- en: 'Listing of files:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - Illustrates how to attach events to all instrumented attributes and listen for
    change events.'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - 演示了如何将事件附加到所有仪器化属性并监听更改事件。'
- en: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - Illustrates use of the [`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event, in conjunction with Core
    column defaults to provide ORM objects that automatically produce the default
    value when an un-set attribute is accessed.'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - 演示了如何使用[`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")事件，结合核心列默认值来提供ORM对象，当访问未设置的属性时自动产生默认值。'
- en: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - Illustrates customized class instrumentation, using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") extension package.  ### Horizontal Sharding'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - 演示了如何使用[`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation")扩展包进行自定义类仪器化。  ### 水平分片'
- en: A basic example of using the SQLAlchemy Sharding API. Sharding refers to horizontally
    scaling data across multiple databases.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLAlchemy分片API的基本示例。分片是指将数据横向扩展到多个数据库。
- en: 'The basic components of a “sharded” mapping are:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: “分片”映射的基本组件包括：
- en: multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, each assigned a “shard id”. These [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") instances may refer to different databases, or different
    schemas / accounts within the same database, or they can even be differentiated
    only by options that will cause them to access different schemas or tables when
    used.
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")实例，每个实例分配一个“分片ID”。这些[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例可以引用不同的数据库，或者同一数据库中的不同模式/帐户，或者甚至可以仅通过选项来区分，当使用时会使它们访问不同的模式或表。
- en: a function which can return a single shard id, given an instance to be saved;
    this is called “shard_chooser”
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定要保存的实例，可以返回单个分片ID的函数；这称为“shard_chooser”。
- en: a function which can return a list of shard ids which apply to a particular
    instance identifier; this is called “id_chooser”.If it returns all shard ids,
    all shards will be searched.
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以返回适用于特定实例标识符的分片ID列表的函数；这称为“id_chooser”。如果返回所有分片ID，则会搜索所有分片。
- en: a function which can return a list of shard ids to try, given a particular Query
    (“query_chooser”). If it returns all shard ids, all shards will be queried and
    the results joined together.
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定特定查询（“query_chooser”），可以返回要尝试的分片ID列表的函数。如果返回所有分片ID，则会查询所有分片并将结果合并在一起。
- en: In these examples, different kinds of shards are used against the same basic
    example which accommodates weather data on a per-continent basis. We provide example
    shard_chooser, id_chooser and query_chooser functions. The query_chooser illustrates
    inspection of the SQL expression element in order to attempt to determine a single
    shard being requested.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，针对相同的基本示例使用不同类型的分片，适应以每个大陆为基础的天气数据。我们提供了示例的shard_chooser、id_chooser和query_chooser函数。query_chooser演示了检查SQL表达式元素以尝试确定请求的单个分片。
- en: The construction of generic sharding routines is an ambitious approach to the
    issue of organizing instances among multiple databases. For a more plain-spoken
    alternative, the “distinct entity” approach is a simple method of assigning objects
    to different tables (and potentially database nodes) in an explicit way - described
    on the wiki at [EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName).
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 构建通用分片例程是解决将实例组织在多个数据库中的问题的一种雄心勃勃的方法。对于更直接的替代方案，“不同实体”方法是一种简单的将对象分配给不同表（以及潜在的数据库节点）的显式方法
    - 在维基上描述为[EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName)。
- en: 'Listing of files:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - Illustrates sharding using distinct SQLite databases.'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - 演示使用不同的SQLite数据库进行分片。'
- en: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    Illustrates sharding using a single SQLite database, that will however have multiple
    tables using a naming convention.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    演示使用单个SQLite数据库进行分片，但将使用命名约定创建多个表。'
- en: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - Illustrates sharding using a single database with multiple schemas, where a
    different “schema_translates_map” can be used for each shard.'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - 演示使用具有多个模式的单个数据库进行分片，其中可以为每个分片使用不同的“schema_translates_map”。'
- en: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - Illustrates sharding
    API used with asyncio.  ### Attribute Instrumentation'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - 演示与asyncio一起使用分片API。###
    属性检测'
- en: Examples illustrating modifications to SQLAlchemy’s attribute management system.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 演示对SQLAlchemy属性管理系统的修改的示例。
- en: 'Listing of files:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - Illustrates how to attach events to all instrumented attributes and listen for
    change events.'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[listen_for_events.py](../_modules/examples/custom_attributes/listen_for_events.html)
    - 演示如何将事件附加到所有被检测属性并监听更改事件。'
- en: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - Illustrates use of the [`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar") event, in conjunction with Core
    column defaults to provide ORM objects that automatically produce the default
    value when an un-set attribute is accessed.'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[active_column_defaults.py](../_modules/examples/custom_attributes/active_column_defaults.html)
    - 演示使用[`AttributeEvents.init_scalar()`](events.html#sqlalchemy.orm.AttributeEvents.init_scalar
    "sqlalchemy.orm.AttributeEvents.init_scalar")事件，结合核心列默认值，为ORM对象提供在访问未设置属性时自动生成默认值的功能。'
- en: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - Illustrates customized class instrumentation, using the [`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation") extension package.'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[custom_management.py](../_modules/examples/custom_attributes/custom_management.html)
    - 演示自定义类检测，使用[`sqlalchemy.ext.instrumentation`](extensions/instrumentation.html#module-sqlalchemy.ext.instrumentation
    "sqlalchemy.ext.instrumentation")扩展包。'
- en: '### Horizontal Sharding'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '### 水平分片'
- en: A basic example of using the SQLAlchemy Sharding API. Sharding refers to horizontally
    scaling data across multiple databases.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLAlchemy分片API的基本示例。分片是指在多个数据库之间水平扩展数据。
- en: 'The basic components of a “sharded” mapping are:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: “分片”映射的基本组件包括：
- en: multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, each assigned a “shard id”. These [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") instances may refer to different databases, or different
    schemas / accounts within the same database, or they can even be differentiated
    only by options that will cause them to access different schemas or tables when
    used.
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    实例，每个分配一个“分片 id”。这些[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 实例可以引用不同的数据库，或者同一数据库中的不同模式/帐户，或者它们甚至可以仅通过选项进行区分，这些选项将在使用时导致它们访问不同的模式或表。
- en: a function which can return a single shard id, given an instance to be saved;
    this is called “shard_chooser”
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数可以返回给定要保存的实例的单个分片 id；这称为“shard_chooser”。
- en: a function which can return a list of shard ids which apply to a particular
    instance identifier; this is called “id_chooser”.If it returns all shard ids,
    all shards will be searched.
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数可以返回适用于特定实例标识符的分片 id 列表；这称为“id_chooser”。如果返回所有分片 id，则将搜索所有分片。
- en: a function which can return a list of shard ids to try, given a particular Query
    (“query_chooser”). If it returns all shard ids, all shards will be queried and
    the results joined together.
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数可以返回给定查询的尝试分片 id 列表；如果返回所有分片 id，则将查询所有分片并将结果连接在一起。
- en: In these examples, different kinds of shards are used against the same basic
    example which accommodates weather data on a per-continent basis. We provide example
    shard_chooser, id_chooser and query_chooser functions. The query_chooser illustrates
    inspection of the SQL expression element in order to attempt to determine a single
    shard being requested.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，针对同一基本示例使用了不同类型的分片，该示例适用于按大陆基础提供天气数据。我们提供了示例 shard_chooser、id_chooser
    和 query_chooser 函数。query_chooser 展示了对 SQL 表达式元素的检查，以尝试确定请求的单个分片。
- en: The construction of generic sharding routines is an ambitious approach to the
    issue of organizing instances among multiple databases. For a more plain-spoken
    alternative, the “distinct entity” approach is a simple method of assigning objects
    to different tables (and potentially database nodes) in an explicit way - described
    on the wiki at [EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName).
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 构建通用分片例程是组织实例在多个数据库中的一种雄心勃勃的方法。对于更直接的替代方案，“不同实体”方法是一种将对象分配给不同表（和潜在的数据库节点）的简单方法
    - 在维基上描述为[EntityName](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName)。
- en: 'Listing of files:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - Illustrates sharding using distinct SQLite databases.'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_databases.py](../_modules/examples/sharding/separate_databases.html)
    - 展示了使用不同的 SQLite 数据库进行分片的示例。'
- en: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    Illustrates sharding using a single SQLite database, that will however have multiple
    tables using a naming convention.'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_tables.py](../_modules/examples/sharding/separate_tables.html) -
    展示了使用单个 SQLite 数据库进行分片的示例，但是会使用多个表并遵循命名约定。'
- en: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - Illustrates sharding using a single database with multiple schemas, where a
    different “schema_translates_map” can be used for each shard.'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[separate_schema_translates.py](../_modules/examples/sharding/separate_schema_translates.html)
    - 展示了使用具有多个模式的单个数据库进行分片的示例，其中每个分片可以使用不同的“schema_translates_map”。'
- en: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - Illustrates sharding
    API used with asyncio.'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asyncio.py](../_modules/examples/sharding/asyncio.html) - 展示了与 asyncio 一起使用的分片
    API。'
- en: Extending the ORM
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 ORM
- en: '### ORM Query Events'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM 查询事件'
- en: Recipes which illustrate augmentation of ORM SELECT behavior as used by [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") with [2.0 style](../glossary.html#term-2.0-style)
    use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    as well as the [1.x style](../glossary.html#term-1.x-style) [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了增强 ORM SELECT 行为的示例，这些示例由 [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 与 [2.0 风格](../glossary.html#term-2.0-style)
    的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    以及 [1.x 风格](../glossary.html#term-1.x-style) 的 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象一起使用。
- en: Examples include demonstrations of the [`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option as well as the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括演示[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项以及[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子。
- en: As of SQLAlchemy 1.4, the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct is unified with the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, so that these two objects are mostly
    the same.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 截至SQLAlchemy 1.4版本，[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    构造与[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造合并在一起，因此这两个对象大部分相同。
- en: 'Listing of files:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - Illustrates a custom per-query criteria that will be applied to selected entities.'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - 演示将应用于选定实体的自定义每个查询条件。'
- en: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - Illustrates a global criteria applied to entities of a particular type.  ###
    Dogpile Caching'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - 演示应用于特定类型实体的全局条件的基本技术。### Dogpile Caching'
- en: Illustrates how to embed [dogpile.cache](https://dogpilecache.sqlalchemy.org/)
    functionality with ORM queries, allowing full cache control as well as the ability
    to pull “lazy loaded” attributes from long term cache.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 演示如何嵌入[dogpile.cache](https://dogpilecache.sqlalchemy.org/)功能与ORM查询，允许完全控制缓存以及从长期缓存中获取“延迟加载”属性的能力。
- en: 'In this demo, the following techniques are illustrated:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，演示了以下技术：
- en: Using the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子
- en: Basic technique of circumventing [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to pull from a custom cache source instead of
    the database.
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")以从自定义缓存源而不是数据库中提取的基本技术。
- en: Rudimental caching with dogpile.cache, using “regions” which allow global control
    over a fixed set of configurations.
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用dogpile.cache进行基本缓存，使用“regions”允许全局控制一组固定配置。
- en: Using custom `UserDefinedOption` objects to configure options in a statement
    object.
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义`UserDefinedOption`对象配置语句对象中的选项。
- en: See also
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - includes a general example of the technique presented here.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](session_events.html#do-orm-execute-re-executing) - 包括这里介绍的技术的一个通用示例。'
- en: 'E.g.:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE58]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: To run, both SQLAlchemy and dogpile.cache must be installed or on the current
    PYTHONPATH. The demo will create a local directory for datafiles, insert initial
    data, and run. Running the demo a second time will utilize the cache files already
    present, and exactly one SQL statement against two tables will be emitted - the
    displayed result however will utilize dozens of lazyloads that all pull from cache.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行，必须安装SQLAlchemy和dogpile.cache，或者在当前PYTHONPATH上。演示将为数据文件创建一个本地目录，插入初始数据，然后运行。第二次运行演示将利用已经存在的缓存文件，并且只会发出一条SQL语句针对两个表
    - 但显示的结果将利用数十个从缓存中获取的延迟加载。
- en: 'The demo scripts themselves, in order of complexity, are run as Python modules
    so that relative imports work:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 演示脚本本身，按复杂性顺序作为Python模块运行，以便相对导入正常工作：
- en: '[PRE59]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Listing of files:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - Establish
    data / cache file paths, and configurations, bootstrap fixture data if necessary.'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - 建立数据/缓存文件路径和配置，必要时引导固定数据。'
- en: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - Represent functions and classes which allow the usage of Dogpile caching with
    SQLAlchemy. Introduces a query option called FromCache.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - 代表允许在SQLAlchemy中使用Dogpile缓存的函数和类。引入一个名为FromCache的查询选项。'
- en: '[model.py](../_modules/examples/dogpile_caching/model.html) - The datamodel,
    which represents Person that has multiple Address objects, each with PostalCode,
    City, Country.'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[model.py](../_modules/examples/dogpile_caching/model.html) - 数据模型，表示具有多个地址对象的人员，每个地址对象都有邮政编码、城市和国家。'
- en: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    Installs some sample data. Here we have a handful of postal codes for a few US/Canadian
    cities. Then, 100 Person records are installed, each with a randomly selected
    postal code.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    安装一些示例数据。这里有一些美国/加拿大城市的少数邮政编码。然后，安装了100个人员记录，每个记录都有一个随机选择的邮政编码。'
- en: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - Illustrate
    how to load some data, and cache the results.'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - 演示了如何加载一些数据，并缓存结果。'
- en: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - Illustrates how to add cache options on relationship endpoints, so that lazyloads
    load from cache.'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - 展示了如何在关系终点添加缓存选项，以便惰性加载从缓存中加载。'
- en: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - Illustrate
    usage of Query combined with the FromCache option, including front-end loading,
    cache invalidation and collection caching.'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - 演示了Query与FromCache选项的使用，包括前端加载、缓存失效和集合缓存。'
- en: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - This example creates a new dogpile.cache backend that will persist data in a
    dictionary which is local to the current session. remove() the session and the
    cache is gone.  ### ORM Query Events'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - 这个例子创建了一个新的dogpile.cache后端，它将数据持久化存储在当前会话的字典中。删除会话，缓存就消失了。### ORM查询事件'
- en: Recipes which illustrate augmentation of ORM SELECT behavior as used by [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") with [2.0 style](../glossary.html#term-2.0-style)
    use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select"),
    as well as the [1.x style](../glossary.html#term-1.x-style) [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 说明如何使用[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")与[2.0样式](../glossary.html#term-2.0-style)的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")一起增强ORM SELECT行为的示例，以及[1.x样式](../glossary.html#term-1.x-style)的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。
- en: Examples include demonstrations of the [`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option as well as the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括演示[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项以及[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子。
- en: As of SQLAlchemy 1.4, the [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct is unified with the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, so that these two objects are mostly
    the same.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.4开始，[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")构造与[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造统一，因此这两个对象大部分相同。
- en: 'Listing of files:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表：
- en: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - Illustrates a custom per-query criteria that will be applied to selected entities.'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[temporal_range.py](../_modules/examples/extending_query/temporal_range.html)
    - 展示了将应用于选定实体的自定义每个查询条件。'
- en: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - Illustrates a global criteria applied to entities of a particular type.'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[filter_public.py](../_modules/examples/extending_query/filter_public.html)
    - 展示了应用于特定类型实体的全局条件。'
- en: '### Dogpile Caching'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '### Dogpile缓存'
- en: Illustrates how to embed [dogpile.cache](https://dogpilecache.sqlalchemy.org/)
    functionality with ORM queries, allowing full cache control as well as the ability
    to pull “lazy loaded” attributes from long term cache.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 说明如何在ORM查询中嵌入[dogpile.cache](https://dogpilecache.sqlalchemy.org/)功能，允许完全的缓存控制，以及从长期缓存中拉取“惰性加载”属性的能力。
- en: 'In this demo, the following techniques are illustrated:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示展示了以下技术：
- en: Using the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件挂钩
- en: Basic technique of circumventing [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to pull from a custom cache source instead of
    the database.
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")以从自定义缓存源而不是数据库中提取的基本技术。
- en: Rudimental caching with dogpile.cache, using “regions” which allow global control
    over a fixed set of configurations.
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的缓存与 dogpile.cache，使用允许全局控制一组固定配置的“区域”。
- en: Using custom `UserDefinedOption` objects to configure options in a statement
    object.
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义`UserDefinedOption`对象配置语句对象中的选项。
- en: See also
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - includes a general example of the technique presented here.'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](session_events.html#do-orm-execute-re-executing) - 包括这里介绍的技术的一般示例。'
- en: 'E.g.:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE60]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: To run, both SQLAlchemy and dogpile.cache must be installed or on the current
    PYTHONPATH. The demo will create a local directory for datafiles, insert initial
    data, and run. Running the demo a second time will utilize the cache files already
    present, and exactly one SQL statement against two tables will be emitted - the
    displayed result however will utilize dozens of lazyloads that all pull from cache.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行，必须安装 SQLAlchemy 和 dogpile.cache，或者在当前 PYTHONPATH 上安装。演示将为数据文件创建一个本地目录，插入初始数据，并运行。再次运行演示将利用已经存在的缓存文件，并且只会发出一条针对两个表的
    SQL 语句 - 但显示的结果将利用几十个懒加载，所有这些懒加载都从缓存中拉取。
- en: 'The demo scripts themselves, in order of complexity, are run as Python modules
    so that relative imports work:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 演示脚本本身，按复杂度顺序运行为 Python 模块，以便相对导入正常工作：
- en: '[PRE61]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Listing of files:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 文件清单：
- en: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - Establish
    data / cache file paths, and configurations, bootstrap fixture data if necessary.'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[environment.py](../_modules/examples/dogpile_caching/environment.html) - 确定数据/缓存文件路径和配置，如有必要，引导安装装置数据。'
- en: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - Represent functions and classes which allow the usage of Dogpile caching with
    SQLAlchemy. Introduces a query option called FromCache.'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_query.py](../_modules/examples/dogpile_caching/caching_query.html)
    - 表示使用 SQLAlchemy 可以与 Dogpile 缓存一起使用的函数和类。介绍了一个名为 FromCache 的查询选项。'
- en: '[model.py](../_modules/examples/dogpile_caching/model.html) - The datamodel,
    which represents Person that has multiple Address objects, each with PostalCode,
    City, Country.'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[model.py](../_modules/examples/dogpile_caching/model.html) - 数据模型，表示具有多个 Address
    对象的 Person，每个 Address 对象都有 PostalCode、City、Country。'
- en: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    Installs some sample data. Here we have a handful of postal codes for a few US/Canadian
    cities. Then, 100 Person records are installed, each with a randomly selected
    postal code.'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[fixture_data.py](../_modules/examples/dogpile_caching/fixture_data.html) -
    安装一些示例数据。这里有一些美国/加拿大几个城市的一些邮政编码。然后，安装了 100 个 Person 记录，每个记录都有一个随机选择的邮政编码。'
- en: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - Illustrate
    how to load some data, and cache the results.'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[helloworld.py](../_modules/examples/dogpile_caching/helloworld.html) - 演示如何加载一些数据，并缓存结果。'
- en: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - Illustrates how to add cache options on relationship endpoints, so that lazyloads
    load from cache.'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[relationship_caching.py](../_modules/examples/dogpile_caching/relationship_caching.html)
    - 演示如何在关系端点上添加缓存选项，以便延迟加载从缓存加载。'
- en: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - Illustrate
    usage of Query combined with the FromCache option, including front-end loading,
    cache invalidation and collection caching.'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[advanced.py](../_modules/examples/dogpile_caching/advanced.html) - 演示 Query
    与 FromCache 选项的使用，包括前端加载、缓存失效和集合缓存。'
- en: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - This example creates a new dogpile.cache backend that will persist data in a
    dictionary which is local to the current session. remove() the session and the
    cache is gone.'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[local_session_caching.py](../_modules/examples/dogpile_caching/local_session_caching.html)
    - 此示例创建一个新的 dogpile.cache 后端，该后端将数据持久化在当前会话的字典中。删除会话，缓存消失。'
