- en: Using INSERT Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插入语句
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data_insert.html](https://docs.sqlalchemy.org/en/20/tutorial/data_insert.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data_insert.html](https://docs.sqlalchemy.org/en/20/tutorial/data_insert.html)
- en: When using Core as well as when using the ORM for bulk operations, a SQL INSERT
    statement is generated directly using the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") function - this function generates a new instance
    of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    which represents an INSERT statement in SQL, that adds new data into a table.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Core 以及在使用 ORM 进行批量操作时，可以直接使用[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")函数生成 SQL INSERT 语句 - 此函数生成[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")的新实例，表示将新数据添加到表中的 INSERT 语句。
- en: '**ORM Readers** -'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**ORM读者** -'
- en: This section details the Core means of generating an individual SQL INSERT statement
    in order to add new rows to a table. When using the ORM, we normally use another
    tool that rides on top of this called the [unit of work](../glossary.html#term-unit-of-work),
    which will automate the production of many INSERT statements at once. However,
    understanding how the Core handles data creation and manipulation is very useful
    even when the ORM is running it for us. Additionally, the ORM supports direct
    use of INSERT using a feature called [Bulk / Multi Row INSERT, upsert, UPDATE
    and DELETE](orm_data_manipulation.html#tutorial-orm-bulk).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了在表中添加新行时生成单个 SQL INSERT 语句的核心方法。在使用 ORM 时，我们通常会使用另一个称为[unit of work](../glossary.html#term-unit-of-work)的工具，它会自动化一次性生成许多
    INSERT 语句。但是，即使 ORM 为我们运行它，了解核心如何处理数据创建和操作也非常有用。此外，ORM 还支持使用称为[批量/多行插入、更新和删除](orm_data_manipulation.html#tutorial-orm-bulk)的功能直接使用
    INSERT。
- en: To skip directly to how to INSERT rows with the ORM using normal unit of work
    patterns, see [Inserting Rows using the ORM Unit of Work pattern](orm_data_manipulation.html#tutorial-inserting-orm).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接跳转到使用 ORM 使用正常工作单元模式插入行的方法，请参阅[使用 ORM 工作单元模式插入行](orm_data_manipulation.html#tutorial-inserting-orm)。
- en: The insert() SQL Expression Construct
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入（insert()）SQL 表达式构造
- en: 'A simple example of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") illustrating the target table and the VALUES
    clause at once:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")示例，同时说明了目标表和VALUES子句：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above `stmt` variable is an instance of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"). Most SQL expressions can be stringified in
    place as a means to see the general form of what’s being produced:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`stmt`变量是[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")的一个实例。大多数
    SQL 表达式都可以直接转换为字符串形式，以便查看生成的通用形式：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The stringified form is created by producing a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") form of the object which includes a database-specific
    string SQL representation of the statement; we can acquire this object directly
    using the [`ClauseElement.compile()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") method:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串形式是通过生成对象的[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")形式来创建的，该对象包括语句的数据库特定字符串 SQL 表示；我们可以直接使用[`ClauseElement.compile()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile")方法获取此对象：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct is an example of a “parameterized” construct, illustrated previously
    at [Sending Parameters](dbapi_transactions.html#tutorial-sending-parameters);
    to view the `name` and `fullname` [bound parameters](../glossary.html#term-bound-parameters),
    these are available from the [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") construct as well:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造是“参数化”构造的一个例子，前面在[发送参数](dbapi_transactions.html#tutorial-sending-parameters)已经有过示例；要查看`name`和`fullname`[绑定参数](../glossary.html#term-bound-parameters)，这些也可以从[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")构造中获取：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Executing the Statement
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行语句
- en: 'Invoking the statement we can INSERT a row into `user_table`. The INSERT SQL
    as well as the bundled parameters can be seen in the SQL logging:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 调用该语句，我们可以将一行插入到`user_table`中。 可以在 SQL 日志中看到 INSERT SQL 和捆绑参数：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In its simple form above, the INSERT statement does not return any rows, and
    if only a single row is inserted, it will usually include the ability to return
    information about column-level default values that were generated during the INSERT
    of that row, most commonly an integer primary key value. In the above case the
    first row in a SQLite database will normally return `1` for the first integer
    primary key value, which we can acquire using the [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") accessor:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的简单形式中，INSERT 语句不会返回任何行，如果只插入了一行，则通常会包括返回有关插入该行期间生成的列级默认值的信息的能力，最常见的是整数主键值。
    在上述情况下，SQLite 数据库中的第一行通常会为第一个整数主键值返回 `1`，我们可以使用[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 访问器获取它：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") returns a tuple because
    a primary key may contain multiple columns. This is known as a [composite primary
    key](../glossary.html#term-composite-primary-key). The [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") is intended to always contain
    the complete primary key of the record just inserted, not just a “cursor.lastrowid”
    kind of value, and is also intended to be populated regardless of whether or not
    “autoincrement” were used, hence to express a complete primary key it’s a tuple.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 返回一个元组，因为主键可能包含多列。 这称为[复合主键](../glossary.html#term-composite-primary-key)。
    [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 旨在始终包含刚刚插入的记录的完整主键，而不仅仅是“cursor.lastrowid”类型的值，并且旨在无论是否使用了“autoincrement”，都将其填充，因此为了表示完整的主键，它是一个元组。'
- en: 'Changed in version 1.4.8: the tuple returned by [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") is now a named tuple fulfilled
    by returning it as a [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.8 中更改：由 [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 返回的元组现在是通过将其作为[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象来实现的命名元组。
- en: '## INSERT usually generates the “values” clause automatically'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '## INSERT 通常会自动生成“values”子句'
- en: 'The example above made use of the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method to explicitly create the VALUES
    clause of the SQL INSERT statement. If we don’t actually use [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") and just print out an “empty” statement,
    we get an INSERT for every column in the table:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例使用了 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法来显式创建 SQL INSERT 语句的 VALUES 子句。 如果我们实际上不使用
    [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values "sqlalchemy.sql.expression.Insert.values")
    而只打印出一个“空”语句，我们会得到一个插入表中每一列的 INSERT：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we take an [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct that has not had [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") called upon it and execute it rather
    than print it, the statement will be compiled to a string based on the parameters
    that we passed to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, and only include columns relevant
    to the parameters that were passed. This is actually the usual way that [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") is used to insert rows without having to type
    out an explicit VALUES clause. The example below illustrates a two-column INSERT
    statement being executed with a list of parameters at once:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们拿一个尚未调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造，并执行它而不是打印它，语句将根据我们传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法的参数编译为一个字符串，而且只包含与传递的参数相关的列。实际上，这是通常使用[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 插入行的方式，而无需输入显式的 VALUES 子句。下面的示例说明了执行具有一次性参数列表的两列
    INSERT 语句：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The execution above features “executemany” form first illustrated at [Sending
    Multiple Parameters](dbapi_transactions.html#tutorial-multiple-parameters), however
    unlike when using the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, we didn’t have to spell out any SQL.
    By passing a dictionary or list of dictionaries to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method in conjunction with the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") ensures that the column names which are passed
    will be expressed in the VALUES clause of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct automatically.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上述执行首次展示了[发送多个参数](dbapi_transactions.html#tutorial-multiple-parameters)中介绍的“executemany”形式，但与使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造时不同，我们不必拼写任何 SQL。通过将字典或字典列表传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法与 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造一起使用，[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 确保传递的列名将自动在 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造的 VALUES 子句中表达。
- en: Deep Alchemy
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金
- en: Hi, welcome to the first edition of **Deep Alchemy**. The person on the left
    is known as **The Alchemist**, and you’ll note they are **not** a wizard, as the
    pointy hat is not sticking upwards. The Alchemist comes around to describe things
    that are generally **more advanced and/or tricky** and additionally **not usually
    needed**, but for whatever reason they feel you should know about this thing that
    SQLAlchemy can do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，欢迎来到**深度炼金**的第一版。左边的人被称为**炼金师**，你会注意到他们**并不**是巫师，因为尖尖的帽子并没有竖起来。炼金师会描述通常**更加高级和/或棘手**的事物，而且通常**不是**必需的，但出于某种原因，他们觉得你应该了解
    SQLAlchemy 能做的这件事情。
- en: In this edition, towards the goal of having some interesting data in the `address_table`
    as well, below is a more advanced example illustrating how the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method may be used explicitly while
    at the same time including for additional VALUES generated from the parameters.
    A [scalar subquery](../glossary.html#term-scalar-subquery) is constructed, making
    use of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct introduced in the next section,
    and the parameters used in the subquery are set up using an explicit bound parameter
    name, established using the [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，为了在 `address_table` 中拥有一些有趣的数据，下面是一个更高级的示例，说明了如何在明确使用 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法的同时，包含从参数生成的额外 VALUES。一个 [标量子查询](../glossary.html#term-scalar-subquery)
    被构建，利用了下一节中介绍的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 结构，子查询中使用的参数使用明确的绑定参数名设置，使用了 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 结构。
- en: This is some slightly **deeper** alchemy just so that we can add related rows
    without fetching the primary key identifiers from the `user_table` operation into
    the application. Most Alchemists will simply use the ORM which takes care of things
    like this for us.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些稍微**深入**的炼金术，这样我们就可以在不将主键标识符从 `user_table` 操作中提取到应用程序中的情况下添加相关行。大多数炼金术师会简单地使用
    ORM 来处理这类事情。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With that, we have some more interesting data in our tables that we will make
    use of in the upcoming sections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的表中有一些更有趣的数据，我们将在接下来的章节中加以利用。
- en: Tip
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A true “empty” INSERT that inserts only the “defaults” for a table without
    including any explicit values at all is generated if we indicate [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with no arguments; not every database
    backend supports this, but here’s what SQLite produces:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 中不带参数地指定，将生成一个真正的“空”INSERT，它仅插入表的“默认值”，而不包括任何明确的值；并非每个数据库后端都支持这个功能，但下面是
    SQLite 生成的内容：
- en: '[PRE9]  ## INSERT…RETURNING'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]  ## INSERT…RETURNING'
- en: 'The RETURNING clause for supported backends is used automatically in order
    to retrieve the last inserted primary key value as well as the values for server
    defaults. However the RETURNING clause may also be specified explicitly using
    the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") method; in this case, the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object that’s returned when the statement is executed
    has rows which can be fetched:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持的后端，RETURNING 子句会自动被用来检索最后插入的主键值以及服务器默认值。但是 RETURNING 子句也可以使用 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 方法来明确指定；在这种情况下，执行语句时返回的 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象具有可提取的行：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It can also be combined with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"), as in the example below that
    builds upon the example stated in [INSERT…FROM SELECT](#tutorial-insert-from-select):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以与 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 结合使用，就像下面的例子一样，它建立在 [INSERT…FROM
    SELECT](#tutorial-insert-from-select) 中所述的例子之上：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The RETURNING feature is also supported by UPDATE and DELETE statements, which
    will be introduced later in this tutorial.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: RETURNING 特性也被 UPDATE 和 DELETE 语句所支持，这将在本教程的后续部分介绍。
- en: For INSERT statements, the RETURNING feature may be used both for single-row
    statements as well as for statements that INSERT multiple rows at once. Support
    for multiple-row INSERT with RETURNING is dialect specific, however is supported
    for all the dialects that are included in SQLAlchemy which support RETURNING.
    See the section [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on this feature.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 INSERT 语句，RETURNING 功能可用于单行语句以及一次插入多行的语句。对于支持 RETURNING 的 SQLAlchemy 中包含的所有方言，多行
    INSERT 支持是特定于方言的。请参阅[“INSERT 语句的插入多个值”行为](../core/connections.html#engine-insertmanyvalues)部分了解此功能的背景。
- en: See also
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Bulk INSERT with or without RETURNING is also supported by the ORM. See [ORM
    Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    for reference documentation.  ## INSERT…FROM SELECT'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 也支持带有或不带有 RETURNING 的批量 INSERT。请参阅[ORM 批量 INSERT 语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)以获取参考文档。##
    INSERT…FROM SELECT
- en: 'A less used feature of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), but here for completeness, the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct can compose an INSERT that gets
    rows directly from a SELECT using the [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method. This method accepts a
    [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is discussed in the next section, along with a list of column
    names to be targeted in the actual INSERT. In the example below, rows are added
    to the `address` table which are derived from rows in the `user_account` table,
    giving each user a free email address at `aol.com`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")的一个较少使用的特性，但为了完整性，在这里，[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造可以使用[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")方法直接从 SELECT 中获取行进行插入。此方法接受一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，下一节将讨论此构造，以及要在实际 INSERT 中定位的列名列表。在下面的示例中，从`user_account`表中派生的行被添加到`address`表中，为每个用户提供`aol.com`的免费电子邮件地址：'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This construct is used when one wants to copy data from some other part of the
    database directly into a new set of rows, without actually fetching and re-sending
    the data from the client.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当希望直接将数据从数据库的其他部分复制到新的行集时使用此构造，而无需实际从客户端获取和重新发送数据。
- en: See also
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    - in the SQL Expression API documentation'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    - 在 SQL 表达式 API 文档中'
- en: The insert() SQL Expression Construct
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: insert() SQL 表达式构造
- en: 'A simple example of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") illustrating the target table and the VALUES
    clause at once:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")示例，同时说明目标表和VALUES子句：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The above `stmt` variable is an instance of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"). Most SQL expressions can be stringified in
    place as a means to see the general form of what’s being produced:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`stmt`变量是[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")的一个实例。大多数
    SQL 表达式可以直接转换为字符串形式，以查看正在生成的一般形式：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The stringified form is created by producing a [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") form of the object which includes a database-specific
    string SQL representation of the statement; we can acquire this object directly
    using the [`ClauseElement.compile()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串形式是通过生成对象的[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")形式创建的，其中包括语句的特定于数据库的字符串 SQL 表示；我们可以直接使用[`ClauseElement.compile()`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile")方法获取此对象：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Our [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct is an example of a “parameterized” construct, illustrated previously
    at [Sending Parameters](dbapi_transactions.html#tutorial-sending-parameters);
    to view the `name` and `fullname` [bound parameters](../glossary.html#term-bound-parameters),
    these are available from the [`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") construct as well:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造是“参数化”构造的一个示例，在之前的[发送参数](dbapi_transactions.html#tutorial-sending-parameters)中已经说明过；要查看`name`和`fullname`
    [绑定参数](../glossary.html#term-bound-parameters)，这些都可以从[`Compiled`](../core/internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled")构造中获取：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Executing the Statement
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行该语句
- en: 'Invoking the statement we can INSERT a row into `user_table`. The INSERT SQL
    as well as the bundled parameters can be seen in the SQL logging:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 调用该语句，我们可以将一行插入到`user_table`中。可以在SQL日志中看到INSERT SQL以及捆绑的参数：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In its simple form above, the INSERT statement does not return any rows, and
    if only a single row is inserted, it will usually include the ability to return
    information about column-level default values that were generated during the INSERT
    of that row, most commonly an integer primary key value. In the above case the
    first row in a SQLite database will normally return `1` for the first integer
    primary key value, which we can acquire using the [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") accessor:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的简单形式中，INSERT语句不会返回任何行，如果只插入了一行，则通常会包含返回有关在插入该行期间生成的列级默认值信息的功能，最常见的是整数主键值。在上述情况下，SQLite数据库中的第一行通常将为第一个整数主键值返回`1`，我们可以使用[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")访问器来获取：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") returns a tuple because
    a primary key may contain multiple columns. This is known as a [composite primary
    key](../glossary.html#term-composite-primary-key). The [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") is intended to always contain
    the complete primary key of the record just inserted, not just a “cursor.lastrowid”
    kind of value, and is also intended to be populated regardless of whether or not
    “autoincrement” were used, hence to express a complete primary key it’s a tuple.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")返回一个元组，因为主键可能包含多个列。这称为[复合主键](../glossary.html#term-composite-primary-key)。[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")旨在始终包含刚刚插入的记录的完整主键，而不仅仅是“cursor.lastrowid”类型的值，并且旨在无论是否使用“autoincrement”，都会填充，因此为了表达完整的主键，它是一个元组。'
- en: 'Changed in version 1.4.8: the tuple returned by [`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") is now a named tuple fulfilled
    by returning it as a [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.8中更改：[`CursorResult.inserted_primary_key`](../core/connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")返回的元组现在是通过将其返回为[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象来履行的命名元组。
- en: '## INSERT usually generates the “values” clause automatically'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '## INSERT 通常会自动生成“values”子句'
- en: 'The example above made use of the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method to explicitly create the VALUES
    clause of the SQL INSERT statement. If we don’t actually use [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") and just print out an “empty” statement,
    we get an INSERT for every column in the table:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例使用了[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法来显式创建SQL INSERT语句的VALUES子句。如果我们实际上不使用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")，只打印出一个“空”的语句，我们会得到一个对表中每一列进行插入的INSERT：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we take an [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct that has not had [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") called upon it and execute it rather
    than print it, the statement will be compiled to a string based on the parameters
    that we passed to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, and only include columns relevant
    to the parameters that were passed. This is actually the usual way that [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") is used to insert rows without having to type
    out an explicit VALUES clause. The example below illustrates a two-column INSERT
    statement being executed with a list of parameters at once:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对一个尚未调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造进行执行而不是打印它，该语句将根据我们传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法的参数编译为一个字符串，并且仅包括与传递的参数相关的列。这实际上是使用[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")插入行的常用方式，而无需编写明确的VALUES子句。下面的示例说明了如何一次执行具有参数列表的两列INSERT语句：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The execution above features “executemany” form first illustrated at [Sending
    Multiple Parameters](dbapi_transactions.html#tutorial-multiple-parameters), however
    unlike when using the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, we didn’t have to spell out any SQL.
    By passing a dictionary or list of dictionaries to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method in conjunction with the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") ensures that the column names which are passed
    will be expressed in the VALUES clause of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct automatically.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述执行首先展示了“executemany”形式，如[发送多个参数](dbapi_transactions.html#tutorial-multiple-parameters)中所示，但与使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造时不同，我们不必拼写任何SQL。通过将字典或字典列表传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法，与[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造一起使用，[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")确保传递的列名将自动在[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造的VALUES子句中表示。
- en: Deep Alchemy
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 深度魔法
- en: Hi, welcome to the first edition of **Deep Alchemy**. The person on the left
    is known as **The Alchemist**, and you’ll note they are **not** a wizard, as the
    pointy hat is not sticking upwards. The Alchemist comes around to describe things
    that are generally **more advanced and/or tricky** and additionally **not usually
    needed**, but for whatever reason they feel you should know about this thing that
    SQLAlchemy can do.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，欢迎来到第一版的**深度魔法**。左边的人被称为**炼金术士**，你会注意到他们**不是**巫师，因为尖顶帽没有竖起来。炼金术士会来描述一些通常**更高级和/或棘手**的事情，此外通常**不需要**，但出于某种原因他们觉得你应该知道SQLAlchemy能做这件事。
- en: In this edition, towards the goal of having some interesting data in the `address_table`
    as well, below is a more advanced example illustrating how the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method may be used explicitly while
    at the same time including for additional VALUES generated from the parameters.
    A [scalar subquery](../glossary.html#term-scalar-subquery) is constructed, making
    use of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct introduced in the next section,
    and the parameters used in the subquery are set up using an explicit bound parameter
    name, established using the [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，为了使`address_table`中有一些有趣的数据，下面是一个更高级的示例，演示了如何在同时包含来自参数的附加VALUES的情况下，可以显式使用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法。构造了一个标量子查询，利用了下一节中介绍的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，并且在子查询中使用的参数使用了显式绑定参数名称，使用[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造建立。
- en: This is some slightly **deeper** alchemy just so that we can add related rows
    without fetching the primary key identifiers from the `user_table` operation into
    the application. Most Alchemists will simply use the ORM which takes care of things
    like this for us.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些稍微**深入**的炼金术，这样我们就可以在不从`user_table`操作中获取主键标识符的情况下添加相关行到应用程序中。大多数炼金术师将简单地使用ORM来处理这类事情。
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With that, we have some more interesting data in our tables that we will make
    use of in the upcoming sections.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的表中有了一些更有趣的数据，我们将在接下来的章节中使用它们。
- en: Tip
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'A true “empty” INSERT that inserts only the “defaults” for a table without
    including any explicit values at all is generated if we indicate [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with no arguments; not every database
    backend supports this, but here’s what SQLite produces:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指示不带任何参数的[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")，则生成一个真正的“空”INSERT，仅为表中的“默认值”插入，但并不包括任何显式值；并非所有的数据库后端都支持此功能，但是这是SQLite生成的内容：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '## INSERT…RETURNING'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '## INSERT…RETURNING'
- en: 'The RETURNING clause for supported backends is used automatically in order
    to retrieve the last inserted primary key value as well as the values for server
    defaults. However the RETURNING clause may also be specified explicitly using
    the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") method; in this case, the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object that’s returned when the statement is executed
    has rows which can be fetched:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的后端自动使用RETURNING子句以检索最后插入的主键值以及服务器默认值的值。但是，也可以使用[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")方法显式指定RETURNING子句；在这种情况下，执行该语句时返回的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象具有可以获取的行：
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It can also be combined with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"), as in the example below that
    builds upon the example stated in [INSERT…FROM SELECT](#tutorial-insert-from-select):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以与[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")结合使用，就像下面的示例一样，该示例建立在[INSERT…FROM
    SELECT](#tutorial-insert-from-select)中所述示例的基础上：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The RETURNING feature is also supported by UPDATE and DELETE statements, which
    will be introduced later in this tutorial.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: RETURNING特性也被UPDATE和DELETE语句支持，这将在本教程的后续部分中介绍。
- en: For INSERT statements, the RETURNING feature may be used both for single-row
    statements as well as for statements that INSERT multiple rows at once. Support
    for multiple-row INSERT with RETURNING is dialect specific, however is supported
    for all the dialects that are included in SQLAlchemy which support RETURNING.
    See the section [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on this feature.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 INSERT 语句，RETURNING 功能可用于单行语句以及一次插入多行的语句。对于具有 RETURNING 功能的多行 INSERT 的支持是方言特定的，但是对于
    SQLAlchemy 中支持 RETURNING 的所有方言都是支持的。有关此功能的背景，请参阅 [“Insert Many Values” Behavior
    for INSERT statements](../core/connections.html#engine-insertmanyvalues) 部分。
- en: See also
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: Bulk INSERT with or without RETURNING is also supported by the ORM. See [ORM
    Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    for reference documentation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 也支持带有或不带有 RETURNING 的批量插入。请参阅 [ORM 批量插入语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    进行参考文档。
- en: '## INSERT…FROM SELECT'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '## INSERT…FROM SELECT'
- en: 'A less used feature of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), but here for completeness, the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct can compose an INSERT that gets
    rows directly from a SELECT using the [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method. This method accepts a
    [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is discussed in the next section, along with a list of column
    names to be targeted in the actual INSERT. In the example below, rows are added
    to the `address` table which are derived from rows in the `user_account` table,
    giving each user a free email address at `aol.com`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    的一个不太常用的特性，但出于完整性考虑，在这里，[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 结构可以使用 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 方法组合一个直接从 SELECT 中获取行的 INSERT。该方法接受一个
    [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构，下一节将讨论它，以及一个要在实际 INSERT 中定位的列名列表。在下面的示例中，从 `user_account` 表中的行派生出添加到 `address`
    表中的行，为每个用户提供 `aol.com` 的免费电子邮件地址：'
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This construct is used when one wants to copy data from some other part of the
    database directly into a new set of rows, without actually fetching and re-sending
    the data from the client.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个人想要直接将数据从数据库的某个其他部分复制到一组新的行中时，可以使用这个结构，而不需要从客户端获取和重新发送数据。
- en: See also
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    - in the SQL Expression API documentation'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[`插入`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    - SQL Expression API 文档中的 INSERT'
