["```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(user_table)\n...     .where(user_table.c.name == \"patrick\")\n...     .values(fullname=\"Patrick the Star\")\n... )\n>>> print(stmt)\nUPDATE  user_account  SET  fullname=:fullname  WHERE  user_account.name  =  :name_1 \n```", "```py\n>>> stmt = update(user_table).values(fullname=\"Username: \" + user_table.c.name)\n>>> print(stmt)\nUPDATE  user_account  SET  fullname=(:name_1  ||  user_account.name) \n```", "```py\n>>> from sqlalchemy import bindparam\n>>> stmt = (\n...     update(user_table)\n...     .where(user_table.c.name == bindparam(\"oldname\"))\n...     .values(name=bindparam(\"newname\"))\n... )\n>>> with engine.begin() as conn:\n...     conn.execute(\n...         stmt,\n...         [\n...             {\"oldname\": \"jack\", \"newname\": \"ed\"},\n...             {\"oldname\": \"wendy\", \"newname\": \"mary\"},\n...             {\"oldname\": \"jim\", \"newname\": \"jake\"},\n...         ],\n...     )\nBEGIN  (implicit)\nUPDATE  user_account  SET  name=?  WHERE  user_account.name  =  ?\n[...]  [('ed',  'jack'),  ('mary',  'wendy'),  ('jake',  'jim')]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> scalar_subq = (\n...     select(address_table.c.email_address)\n...     .where(address_table.c.user_id == user_table.c.id)\n...     .order_by(address_table.c.id)\n...     .limit(1)\n...     .scalar_subquery()\n... )\n>>> update_stmt = update(user_table).values(fullname=scalar_subq)\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=(SELECT  address.email_address\nFROM  address\nWHERE  address.user_id  =  user_account.id  ORDER  BY  address.id\nLIMIT  :param_1) \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n...     .values(fullname=\"Pat\")\n... )\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=:fullname  FROM  address\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  :email_address_1 \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n...     .values(\n...         {\n...             user_table.c.fullname: \"Pat\",\n...             address_table.c.email_address: \"pat@aol.com\",\n...         }\n...     )\n... )\n>>> from sqlalchemy.dialects import mysql\n>>> print(update_stmt.compile(dialect=mysql.dialect()))\nUPDATE  user_account,  address\nSET  address.email_address=%s,  user_account.fullname=%s\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  %s \n```", "```py\n>>> update_stmt = update(some_table).ordered_values(\n...     (some_table.c.y, 20), (some_table.c.x, some_table.c.y + 10)\n... )\n>>> print(update_stmt)\nUPDATE  some_table  SET  y=:y,  x=(some_table.y  +  :y_1) \n```", "```py\n>>> from sqlalchemy import delete\n>>> stmt = delete(user_table).where(user_table.c.name == \"patrick\")\n>>> print(stmt)\nDELETE  FROM  user_account  WHERE  user_account.name  =  :name_1 \n```", "```py\n>>> delete_stmt = (\n...     delete(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n... )\n>>> from sqlalchemy.dialects import mysql\n>>> print(delete_stmt.compile(dialect=mysql.dialect()))\nDELETE  FROM  user_account  USING  user_account,  address\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  %s \n```", "```py\n>>> with engine.begin() as conn:\n...     result = conn.execute(\n...         update(user_table)\n...         .values(fullname=\"Patrick McStar\")\n...         .where(user_table.c.name == \"patrick\")\n...     )\n...     print(result.rowcount)\nBEGIN  (implicit)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Patrick McStar',  'patrick')\n1\nCOMMIT \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.name == \"patrick\")\n...     .values(fullname=\"Patrick the Star\")\n...     .returning(user_table.c.id, user_table.c.name)\n... )\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=:fullname\nWHERE  user_account.name  =  :name_1\nRETURNING  user_account.id,  user_account.name\n>>> delete_stmt = (\n...     delete(user_table)\n...     .where(user_table.c.name == \"patrick\")\n...     .returning(user_table.c.id, user_table.c.name)\n... )\n>>> print(delete_stmt)\nDELETE  FROM  user_account\nWHERE  user_account.name  =  :name_1\nRETURNING  user_account.id,  user_account.name \n```", "```py\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(user_table)\n...     .where(user_table.c.name == \"patrick\")\n...     .values(fullname=\"Patrick the Star\")\n... )\n>>> print(stmt)\nUPDATE  user_account  SET  fullname=:fullname  WHERE  user_account.name  =  :name_1 \n```", "```py\n>>> stmt = update(user_table).values(fullname=\"Username: \" + user_table.c.name)\n>>> print(stmt)\nUPDATE  user_account  SET  fullname=(:name_1  ||  user_account.name) \n```", "```py\n>>> from sqlalchemy import bindparam\n>>> stmt = (\n...     update(user_table)\n...     .where(user_table.c.name == bindparam(\"oldname\"))\n...     .values(name=bindparam(\"newname\"))\n... )\n>>> with engine.begin() as conn:\n...     conn.execute(\n...         stmt,\n...         [\n...             {\"oldname\": \"jack\", \"newname\": \"ed\"},\n...             {\"oldname\": \"wendy\", \"newname\": \"mary\"},\n...             {\"oldname\": \"jim\", \"newname\": \"jake\"},\n...         ],\n...     )\nBEGIN  (implicit)\nUPDATE  user_account  SET  name=?  WHERE  user_account.name  =  ?\n[...]  [('ed',  'jack'),  ('mary',  'wendy'),  ('jake',  'jim')]\n<sqlalchemy.engine.cursor.CursorResult  object  at  0x...>\nCOMMIT \n```", "```py\n>>> scalar_subq = (\n...     select(address_table.c.email_address)\n...     .where(address_table.c.user_id == user_table.c.id)\n...     .order_by(address_table.c.id)\n...     .limit(1)\n...     .scalar_subquery()\n... )\n>>> update_stmt = update(user_table).values(fullname=scalar_subq)\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=(SELECT  address.email_address\nFROM  address\nWHERE  address.user_id  =  user_account.id  ORDER  BY  address.id\nLIMIT  :param_1) \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n...     .values(fullname=\"Pat\")\n... )\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=:fullname  FROM  address\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  :email_address_1 \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n...     .values(\n...         {\n...             user_table.c.fullname: \"Pat\",\n...             address_table.c.email_address: \"pat@aol.com\",\n...         }\n...     )\n... )\n>>> from sqlalchemy.dialects import mysql\n>>> print(update_stmt.compile(dialect=mysql.dialect()))\nUPDATE  user_account,  address\nSET  address.email_address=%s,  user_account.fullname=%s\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  %s \n```", "```py\n>>> update_stmt = update(some_table).ordered_values(\n...     (some_table.c.y, 20), (some_table.c.x, some_table.c.y + 10)\n... )\n>>> print(update_stmt)\nUPDATE  some_table  SET  y=:y,  x=(some_table.y  +  :y_1) \n```", "```py\n>>> scalar_subq = (\n...     select(address_table.c.email_address)\n...     .where(address_table.c.user_id == user_table.c.id)\n...     .order_by(address_table.c.id)\n...     .limit(1)\n...     .scalar_subquery()\n... )\n>>> update_stmt = update(user_table).values(fullname=scalar_subq)\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=(SELECT  address.email_address\nFROM  address\nWHERE  address.user_id  =  user_account.id  ORDER  BY  address.id\nLIMIT  :param_1) \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n...     .values(fullname=\"Pat\")\n... )\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=:fullname  FROM  address\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  :email_address_1 \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n...     .values(\n...         {\n...             user_table.c.fullname: \"Pat\",\n...             address_table.c.email_address: \"pat@aol.com\",\n...         }\n...     )\n... )\n>>> from sqlalchemy.dialects import mysql\n>>> print(update_stmt.compile(dialect=mysql.dialect()))\nUPDATE  user_account,  address\nSET  address.email_address=%s,  user_account.fullname=%s\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  %s \n```", "```py\n>>> update_stmt = update(some_table).ordered_values(\n...     (some_table.c.y, 20), (some_table.c.x, some_table.c.y + 10)\n... )\n>>> print(update_stmt)\nUPDATE  some_table  SET  y=:y,  x=(some_table.y  +  :y_1) \n```", "```py\n>>> from sqlalchemy import delete\n>>> stmt = delete(user_table).where(user_table.c.name == \"patrick\")\n>>> print(stmt)\nDELETE  FROM  user_account  WHERE  user_account.name  =  :name_1 \n```", "```py\n>>> delete_stmt = (\n...     delete(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n... )\n>>> from sqlalchemy.dialects import mysql\n>>> print(delete_stmt.compile(dialect=mysql.dialect()))\nDELETE  FROM  user_account  USING  user_account,  address\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  %s \n```", "```py\n>>> delete_stmt = (\n...     delete(user_table)\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .where(address_table.c.email_address == \"patrick@aol.com\")\n... )\n>>> from sqlalchemy.dialects import mysql\n>>> print(delete_stmt.compile(dialect=mysql.dialect()))\nDELETE  FROM  user_account  USING  user_account,  address\nWHERE  user_account.id  =  address.user_id  AND  address.email_address  =  %s \n```", "```py\n>>> with engine.begin() as conn:\n...     result = conn.execute(\n...         update(user_table)\n...         .values(fullname=\"Patrick McStar\")\n...         .where(user_table.c.name == \"patrick\")\n...     )\n...     print(result.rowcount)\nBEGIN  (implicit)\nUPDATE  user_account  SET  fullname=?  WHERE  user_account.name  =  ?\n[...]  ('Patrick McStar',  'patrick')\n1\nCOMMIT \n```", "```py\n>>> update_stmt = (\n...     update(user_table)\n...     .where(user_table.c.name == \"patrick\")\n...     .values(fullname=\"Patrick the Star\")\n...     .returning(user_table.c.id, user_table.c.name)\n... )\n>>> print(update_stmt)\nUPDATE  user_account  SET  fullname=:fullname\nWHERE  user_account.name  =  :name_1\nRETURNING  user_account.id,  user_account.name\n>>> delete_stmt = (\n...     delete(user_table)\n...     .where(user_table.c.name == \"patrick\")\n...     .returning(user_table.c.id, user_table.c.name)\n... )\n>>> print(delete_stmt)\nDELETE  FROM  user_account\nWHERE  user_account.name  =  :name_1\nRETURNING  user_account.id,  user_account.name \n```"]