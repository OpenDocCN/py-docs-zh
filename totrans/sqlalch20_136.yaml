- en: 0.5 Changelog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_05.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_05.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 0.5.9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: no release date
  prefs: []
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed erroneous self_group() call in expression package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1661](https://www.sqlalchemy.org/trac/ticket/1661)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jan 16 2010'
  prefs: []
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The copy() method on Column now supports uninitialized, unnamed Column objects.
    This allows easy creation of declarative helpers which place common columns on
    multiple subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default generators like Sequence() translate correctly across a copy() operation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequence() and other DefaultGenerator objects are accepted as the value for
    the “default” and “onupdate” keyword arguments of Column, in addition to being
    accepted positionally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a column arithmetic bug that affected column correspondence for cloned
    selectables which contain free-standing column expressions. This bug is generally
    only noticeable when exercising newer ORM behavior only available in 0.6 via,
    but is more correct at the SQL expression level as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The extract() function, which was slightly improved in 0.5.7, needed a lot more
    work to generate the correct typecast (the typecasts appear to be necessary in
    PG’s EXTRACT quite a lot of the time). The typecast is now generated using a rule
    dictionary based on PG’s documentation for date/time/interval arithmetic. It also
    accepts text() constructs again, which was broken in 0.5.7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[firebird]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognize more errors as disconnections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Dec 26 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() now works with the automatically generated subquery that results
    when you say “query(Parent).join(Parent.somejoinedsubclass)”, i.e. when Parent
    joins to a joined-table-inheritance subclass. Previously contains_eager() would
    erroneously add the subclass table to the query separately producing a cartesian
    product. An example is in the ticket description.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1543](https://www.sqlalchemy.org/trac/ticket/1543)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.options() now only propagate to loaded objects for potential further sub-loads
    only for options where such behavior is relevant, keeping various unserializable
    options like those generated by contains_eager() out of individual instance states.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1553](https://www.sqlalchemy.org/trac/ticket/1553)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.execute() now locates table- and mapper-specific binds based on a passed
    in expression which is an insert()/update()/delete() construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1054](https://www.sqlalchemy.org/trac/ticket/1054)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.merge() now properly overwrites a many-to-one or uselist=False attribute
    to None if the attribute is also None in the given object to be merged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a needless select which would occur when merging transient objects that
    contained a null primary key identifier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1618](https://www.sqlalchemy.org/trac/ticket/1618)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutable collection passed to the “extension” attribute of relation(), column_property()
    etc. will not be mutated or shared among multiple instrumentation calls, preventing
    duplicate extensions, such as backref populators, from being inserted into the
    list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1585](https://www.sqlalchemy.org/trac/ticket/1585)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the call to get_committed_value() on CompositeProperty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1504](https://www.sqlalchemy.org/trac/ticket/1504)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where Query would crash if a join() with no clear “left” side were
    called when a non-mapped column entity appeared in the columns list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1602](https://www.sqlalchemy.org/trac/ticket/1602)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby composite columns wouldn’t load properly when configured on
    a joined-table subclass, introduced in version 0.5.6 as a result of the fix for.
    thx to Scott Torborg.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “use get” behavior of many-to-one relations, i.e. that a lazy load will
    fallback to the possibly cached query.get() value, now works across join conditions
    where the two compared types are not exactly the same class, but share the same
    “affinity” - i.e. Integer and SmallInteger. Also allows combinations of reflected
    and non-reflected types to work with 0.5 style type reflection, such as PGText/Text
    (note 0.6 reflects types as their generic versions).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in query.update() when passing Cls.attribute as keys in the value
    dict and using synchronize_session=’expire’ (‘fetch’ in 0.6).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1436](https://www.sqlalchemy.org/trac/ticket/1436)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in two-phase transaction whereby commit() method didn’t set the full
    state which allows subsequent close() call to succeed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1603](https://www.sqlalchemy.org/trac/ticket/1603)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the “numeric” paramstyle, which apparently is the default paramstyle used
    by Informixdb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat expressions in the columns clause of a select are deduped based on the
    identity of each clause element, not the actual string. This allows positional
    elements to render correctly even if they all render identically, such as “qmark”
    style bind parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1574](https://www.sqlalchemy.org/trac/ticket/1574)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cursor associated with connection pool connections (i.e. _CursorFairy) now
    proxies __iter__() to the underlying cursor correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1632](https://www.sqlalchemy.org/trac/ticket/1632)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types now support an “affinity comparison” operation, i.e. that an Integer/SmallInteger
    are “compatible”, or a Text/String, PickleType/Binary, etc. Part of.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug preventing alias() of an alias() from being cloned or adapted (occurs
    frequently in ORM operations).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1641](https://www.sqlalchemy.org/trac/ticket/1641)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reflecting the DOUBLE PRECISION type, via a new postgres.PGDoublePrecision
    object. This is postgresql.DOUBLE_PRECISION in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1085](https://www.sqlalchemy.org/trac/ticket/1085)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reflecting the INTERVAL YEAR TO MONTH and INTERVAL DAY TO
    SECOND syntaxes of the INTERVAL type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the “has_sequence” query to take current schema, or explicit sequence-stated
    schema, into account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1576](https://www.sqlalchemy.org/trac/ticket/1576)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the behavior of extract() to apply operator precedence rules to the “::”
    operator when applying the “timestamp” cast - ensures proper parenthesization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1611](https://www.sqlalchemy.org/trac/ticket/1611)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlite dialect properly generates CREATE INDEX for a table that is in an alternate
    schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1439](https://www.sqlalchemy.org/trac/ticket/1439)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the name of TrustedConnection to Trusted_Connection when constructing
    pyodbc connect arguments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1561](https://www.sqlalchemy.org/trac/ticket/1561)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “table_names” dialect function, used by MetaData .reflect(), omits “index
    overflow tables”, a system table generated by Oracle when “index only tables”
    with overflow are used. These tables aren’t accessible via SQL and can’t be reflected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1637](https://www.sqlalchemy.org/trac/ticket/1637)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A column can be added to a joined-table declarative superclass after the class
    has been constructed (i.e. via class-level attribute assignment), and the column
    will be propagated down to subclasses. This is the reverse situation as that of,
    fixed in 0.5.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a slight inaccuracy in the sharding example. Comparing equivalence of
    columns in the ORM is best accomplished using col1.shares_lineage(col2).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1491](https://www.sqlalchemy.org/trac/ticket/1491)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed unused load() method from ShardedQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1606](https://www.sqlalchemy.org/trac/ticket/1606)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Sep 12 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby inheritance discriminator part of a composite primary key
    would fail on updates. Continuation of.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which disallowed one side of a many-to-many bidirectional reference
    to declare itself as “viewonly”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1507](https://www.sqlalchemy.org/trac/ticket/1507)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an assertion that prevents a @validates function or other AttributeExtension
    from loading an unloaded collection such that internal state may be corrupted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1526](https://www.sqlalchemy.org/trac/ticket/1526)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which prevented two entities from mutually replacing each other’s
    primary key values within a single flush() for some orderings of operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1519](https://www.sqlalchemy.org/trac/ticket/1519)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an obscure issue whereby a joined-table subclass with a self-referential
    eager load on the base class would populate the related object’s “subclass” table
    with data from the “subclass” table of the parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1485](https://www.sqlalchemy.org/trac/ticket/1485)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relations() now have greater ability to be “overridden”, meaning a subclass
    that explicitly specifies a relation() overriding that of the parent class will
    be honored during a flush. This is currently to support many-to-many relations
    from concrete inheritance setups. Outside of that use case, YMMV.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1477](https://www.sqlalchemy.org/trac/ticket/1477)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squeezed a few more unnecessary “lazy loads” out of relation(). When a collection
    is mutated, many-to-one backrefs on the other side will not fire off to load the
    “old” value, unless “single_parent=True” is set. A direct assignment of a many-to-one
    still loads the “old” value in order to update backref collections on that value,
    which may be present in the session already, thus maintaining the 0.5 behavioral
    contract.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1483](https://www.sqlalchemy.org/trac/ticket/1483)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby a load/refresh of joined table inheritance attributes which
    were based on column_property() or similar would fail to evaluate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for MapperProperty objects overriding that of an inherited
    mapper for non-concrete inheritance setups - attribute extensions won’t randomly
    collide with each other.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1488](https://www.sqlalchemy.org/trac/ticket/1488)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPDATE and DELETE do not support ORDER BY, LIMIT, OFFSET, etc. in standard SQL.
    Query.update() and Query.delete() now raise an exception if any of limit(), offset(),
    order_by(), group_by(), or distinct() have been called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1487](https://www.sqlalchemy.org/trac/ticket/1487)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added AttributeExtension to sqlalchemy.orm.__all__
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved error message when query() is called with a non-SQL /entity expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1476](https://www.sqlalchemy.org/trac/ticket/1476)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using False or 0 as a polymorphic discriminator now works on the base class
    as well as a subclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1440](https://www.sqlalchemy.org/trac/ticket/1440)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added enable_assertions(False) to Query which disables the usual assertions
    for expected state - used by Query subclasses to engineer custom state.. See [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    for an example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1424](https://www.sqlalchemy.org/trac/ticket/1424)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed recursion issue which occurred if a mapped object’s __len__() or __nonzero__()
    method resulted in state changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1501](https://www.sqlalchemy.org/trac/ticket/1501)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed incorrect exception raise in Weak/StrongIdentityMap.add()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1506](https://www.sqlalchemy.org/trac/ticket/1506)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the error message for “could not find a FROM clause” in query.join() which
    would fail to issue correctly if the query was against a pure SQL construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1522](https://www.sqlalchemy.org/trac/ticket/1522)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a somewhat hypothetical issue which would result in the wrong primary
    key being calculated for a mapper using the old polymorphic_union function - but
    this is old stuff.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1486](https://www.sqlalchemy.org/trac/ticket/1486)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed column.copy() to copy defaults and onupdates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1373](https://www.sqlalchemy.org/trac/ticket/1373)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in extract() introduced in 0.5.4 whereby the string “field” argument
    was getting treated as a ClauseElement, causing various errors within more complex
    SQL transformations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unary expressions such as DISTINCT propagate their type handling to result sets,
    allowing conversions like unicode and such to take place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1420](https://www.sqlalchemy.org/trac/ticket/1420)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in Table and Column whereby passing empty dict for “info” argument
    would raise an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1482](https://www.sqlalchemy.org/trac/ticket/1482)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backported 0.6 fix for Oracle alias names not getting truncated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collection proxies produced by associationproxy are now pickleable. A user-defined
    proxy_factory however is still not pickleable unless it defines __getstate__ and
    __setstate__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1446](https://www.sqlalchemy.org/trac/ticket/1446)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will raise an informative exception if __table_args__ is passed
    as a tuple with no dict argument. Improved documentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table objects declared in the MetaData can now be used in string expressions
    sent to primaryjoin/secondaryjoin/ secondary - the name is pulled from the MetaData
    of the declarative base.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1527](https://www.sqlalchemy.org/trac/ticket/1527)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A column can be added to a joined-table subclass after the class has been constructed
    (i.e. via class-level attribute assignment). The column is added to the underlying
    Table as always, but now the mapper will rebuild its “join” to include the new
    column, instead of raising an error about “no such column, use column_property()
    instead”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[test]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added examples into the test suite so they get exercised regularly and cleaned
    up a couple deprecation warnings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Jul 13 2009'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests have been migrated from unittest to nose. See README.unittests for
    information on how to run the tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#970](https://www.sqlalchemy.org/trac/ticket/970)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “foreign_keys” argument of relation() will now propagate automatically to
    the backref in the same way that primaryjoin and secondaryjoin do. For the extremely
    rare use case where the backref of a relation() has intentionally different “foreign_keys”
    configured, both sides now need to be configured explicitly (if they do in fact
    require this setting, see the next note…).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …the only known (and really, really rare) use case where a different foreign_keys
    setting was used on the forwards/backwards side, a composite foreign key that
    partially points to its own columns, has been enhanced such that the fk->itself
    aspect of the relation won’t be used to determine relation direction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.mapper is now *deprecated*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Call session.add() if you’d like a free-standing object to be part of your session.
    Otherwise, a DIY version of Session.mapper is now documented at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    The method will remain deprecated throughout 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Query being able to join() from individual columns of a joined-table subclass
    entity, i.e. query(SubClass.foo, SubClass.bar).join(<anything>). In most cases,
    an error “Could not find a FROM clause to join from” would be raised. In a few
    others, the result would be returned in terms of the base class rather than the
    subclass - so applications which relied on this erroneous result need to be adjusted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1431](https://www.sqlalchemy.org/trac/ticket/1431)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug involving contains_eager(), which would apply itself to a secondary
    (i.e. lazy) load in a particular rare case, producing cartesian products. improved
    the targeting of query.options() on secondary loads overall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1461](https://www.sqlalchemy.org/trac/ticket/1461)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug introduced in 0.5.4 whereby Composite types fail when default-holding
    columns are flushed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed another 0.5.4 bug whereby mutable attributes (i.e. PickleType) wouldn’t
    be deserialized correctly when the whole object was serialized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1426](https://www.sqlalchemy.org/trac/ticket/1426)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby session.is_modified() would raise an exception if any synonyms
    were in use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed potential memory leak whereby previously pickled objects placed back in
    a session would not be fully garbage collected unless the Session were explicitly
    closed out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby list-based attributes, like pickletype and PGArray, failed
    to be merged() properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired non-working attributes.set_committed_value function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trimmed the pickle format for InstanceState which should further reduce the
    memory footprint of pickled instances. The format should be backwards compatible
    with that of 0.5.4 and previous.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.orm.join and sqlalchemy.orm.outerjoin are now added to __all__ in
    sqlalchemy.orm.*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1463](https://www.sqlalchemy.org/trac/ticket/1463)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where Query exception raise would fail when a too-short composite
    primary key value were passed to get().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1458](https://www.sqlalchemy.org/trac/ticket/1458)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed an obscure feature of execute() (including connection, engine, Session)
    whereby a bindparam() construct can be sent as a key to the params dictionary.
    This usage is undocumented and is at the core of an issue whereby the bindparam()
    object created implicitly by a text() construct may have the same hash value as
    a string placed in the params dictionary and may result in an inappropriate match
    when computing the final bind parameters. Internal checks for this condition would
    add significant latency to the critical task of parameter rendering, so the behavior
    is removed. This is a backwards incompatible change for any application that may
    have been using this feature, however the feature has never been documented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented recreate() for StaticPool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.4p2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue May 26 2009'
  prefs: []
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired the printing of SQL exceptions which are not based on parameters or
    are not executemany() style.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated the hardcoded TIMESTAMP function, which when used as func.TIMESTAMP(value)
    would render “TIMESTAMP value”. This breaks on some platforms as PostgreSQL doesn’t
    allow bind parameters to be used in this context. The hard-coded uppercase is
    also inappropriate and there’s lots of other PG casts that we’d need to support.
    So instead, use text constructs i.e. select([“timestamp ‘12/05/09’”]).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.4p1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon May 18 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an attribute error introduced in 0.5.4 which would occur when merge()
    was used with an incomplete object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sun May 17 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Significant performance enhancements regarding Sessions/flush() in conjunction
    with large mapper graphs, large numbers of objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Removed all* O(N) scanning behavior from the flush() process, i.e. operations
    that were scanning the full session, including an extremely expensive one that
    was erroneously assuming primary key values were changing when this was not the
    case.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: one edge case remains which may invoke a full scan, if an existing primary key
    attribute is modified to a new value.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Session’s “weak referencing” behavior is now *full* - no strong references
    whatsoever are made to a mapped object or related items/collections in its __dict__.
    Backrefs and other cycles in objects no longer affect the Session’s ability to
    lose all references to unmodified objects. Objects with pending changes still
    are maintained strongly until flush.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation also improves performance by moving the “resurrection” process
    of garbage collected items to only be relevant for mappings that map “mutable”
    attributes (i.e. PickleType, composite attrs). This removes overhead from the
    gc process and simplifies internal behavior.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If a “mutable” attribute change is the sole change on an object which is then
    dereferenced, the mapper will not have access to other attribute state when the
    UPDATE is issued. This may present itself differently to some MapperExtensions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The change also affects the internal attribute API, but not the AttributeExtension
    interface nor any of the publicly documented attribute functions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The unit of work no longer generates a graph of “dependency” processors for
    the full graph of mappers during flush(), instead creating such processors only
    for those mappers which represent objects with pending changes. This saves a tremendous
    number of method calls in the context of a large interconnected graph of mappers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cached a wasteful “table sort” operation that previously occurred multiple times
    per flush, also removing significant method call count from flush().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other redundant behaviors have been simplified in mapper._save_obj().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#1398](https://www.sqlalchemy.org/trac/ticket/1398)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified query_cls on DynamicAttributeImpl to accept a full mixin version of
    the AppenderQuery, which allows subclassing the AppenderMixin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “polymorphic discriminator” column may be part of a primary key, and it
    will be populated with the correct discriminator value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the evaluator not being able to evaluate IS NULL clauses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the “set collection” function on “dynamic” relations to initiate events
    correctly. Previously a collection could only be assigned to a pending parent
    instance, otherwise modified events would not be fired correctly. Set collection
    is now compatible with merge(), fixes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1352](https://www.sqlalchemy.org/trac/ticket/1352)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowed pickling of PropertyOption objects constructed with instrumented descriptors;
    previously, pickle errors would occur when pickling an object which was loaded
    with a descriptor-based option, such as query.options(eagerload(MyClass.foo)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loader will not use get() if the “lazy load” SQL clause matches the clause
    used by get(), but contains some parameters hardcoded. Previously the lazy strategy
    would fail with the get(). Ideally get() would be used with the hardcoded parameters
    but this would require further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1357](https://www.sqlalchemy.org/trac/ticket/1357)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MapperOptions and other state associated with query.options() is no longer bundled
    within callables associated with each lazy/deferred-loading attribute during a
    load. The options are now associated with the instance’s state object just once
    when it’s populated. This removes the need in most cases for per-instance/attribute
    loader objects, improving load speed and memory overhead for individual instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1391](https://www.sqlalchemy.org/trac/ticket/1391)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed another location where autoflush was interfering with session.merge().
    autoflush is disabled completely for the duration of merge() now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1360](https://www.sqlalchemy.org/trac/ticket/1360)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which prevented “mutable primary key” dependency logic from functioning
    properly on a one-to-one relation().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1406](https://www.sqlalchemy.org/trac/ticket/1406)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in relation(), introduced in 0.5.3, whereby a self referential relation
    from a base class to a joined-table subclass would not configure correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed obscure mapper compilation issue when inheriting mappers are used which
    would result in un-initialized attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed documentation for session weak_identity_map - the default value is True,
    indicating a weak referencing map in use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a unit of work issue whereby the foreign key attribute on an item contained
    within a collection owned by an object being deleted would not be set to None
    if the relation() was self-referential.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1376](https://www.sqlalchemy.org/trac/ticket/1376)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Query.update() and Query.delete() failures with eagerloaded relations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1378](https://www.sqlalchemy.org/trac/ticket/1378)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is now an error to specify both columns of a binary primaryjoin condition
    in the foreign_keys or remote_side collection. Whereas previously it was just
    nonsensical, but would succeed in a non-deterministic way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back-ported the “compiler” extension from SQLA 0.6\. This is a standardized
    interface which allows the creation of custom ClauseElement subclasses and compilers.
    In particular it’s handy as an alternative to text() when you’d like to build
    a construct that has database-specific compilations. See the extension docs for
    details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exception messages are truncated when the list of bound parameters is larger
    than 10, preventing enormous multi-page exceptions from filling up screens and
    logfiles for large executemany() statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1413](https://www.sqlalchemy.org/trac/ticket/1413)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlalchemy.extract()` is now dialect sensitive and can extract components
    of timestamps idiomatically across the supported databases, including SQLite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed __repr__() and other _get_colspec() methods on ForeignKey constructed
    from __clause_element__() style construct (i.e. declarative columns).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1353](https://www.sqlalchemy.org/trac/ticket/1353)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema] [1341] [ticket: 594]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a quote_schema() method to the IdentifierPreparer class so that dialects
    can override how schemas get handled. This enables the MSSQL dialect to treat
    schemas as multipart identifiers, such as ‘database.owner’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed adding of deferred or other column properties to a declarative class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1379](https://www.sqlalchemy.org/trac/ticket/1379)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflecting a FOREIGN KEY construct will take into account a dotted schema.tablename
    combination, if the foreign key references a table in a remote schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1405](https://www.sqlalchemy.org/trac/ticket/1405)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the SLBoolean type so that it properly treats only 1 as True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1402](https://www.sqlalchemy.org/trac/ticket/1402)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the float type so that it correctly maps to a SLFloat type when being
    reflected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1273](https://www.sqlalchemy.org/trac/ticket/1273)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified how savepoint logic works to prevent it from stepping on non-savepoint
    oriented routines. Savepoint support is still very experimental.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in reserved words for MSSQL that covers version 2008 and all prior versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1310](https://www.sqlalchemy.org/trac/ticket/1310)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with information schema not working with a binary collation
    based database. Cleaned up information schema since it is only used by mssql now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1343](https://www.sqlalchemy.org/trac/ticket/1343)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Mar 24 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “objects” argument to session.flush() is deprecated. State which represents
    the linkage between a parent and child object does not support “flushed” status
    on one side of the link and not the other, so supporting this operation leads
    to misleading results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query now implements __clause_element__() which produces its selectable, which
    means a Query instance can be accepted in many SQL expressions, including col.in_(query),
    union(query1, query2), select([foo]).select_from(query), etc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.join() can now construct multiple FROM clauses, if needed. Such as, query(A,
    B).join(A.x).join(B.y) might say SELECT A.*, B.* FROM A JOIN X, B JOIN Y. Eager
    loading can also tack its joins onto those multiple FROM clauses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1337](https://www.sqlalchemy.org/trac/ticket/1337)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in dynamic_loader() where append/remove events after construction
    time were not being propagated to the UOW to pick up on flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1347](https://www.sqlalchemy.org/trac/ticket/1347)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where column_prefix wasn’t being checked before not mapping an attribute
    that already had class-level name present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a session.expire() on a particular collection attribute will clear any pending
    backref additions as well, so that the next access correctly returns only what
    was present in the database. Presents some degree of a workaround for, although
    we are considering removing the flush([objects]) feature altogether.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.scalar() now converts raw SQL strings to text() the same way Session.execute()
    does and accepts same alternative **kw args.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to the “determine direction” logic of relation() such that the
    direction of tricky situations like mapper(A.join(B)) -> relation-> mapper(B)
    can be determined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When flushing partial sets of objects using session.flush([somelist]), pending
    objects which remain pending after the operation won’t inadvertently be added
    as persistent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1306](https://www.sqlalchemy.org/trac/ticket/1306)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added “post_configure_attribute” method to InstrumentationManager, so that the
    “listen_for_events.py” example works again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1314](https://www.sqlalchemy.org/trac/ticket/1314)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a forward and complementing backwards reference which are both of the same direction,
    i.e. ONETOMANY or MANYTOONE, is now detected, and an error message is raised.
    Saves crazy CircularDependencyErrors later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bugs in Query regarding simultaneous selection of multiple joined-table
    inheritance entities with common base classes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previously the adaption applied to “B” on “A JOIN B” would be erroneously partially
    applied to “A”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons on relations (i.e. A.related==someb) were not getting adapted when
    they should.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other filterings, like query(A).join(A.bs).filter(B.foo==’bar’), were erroneously
    adapting “B.foo” as though it were an “A”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed adaptation of EXISTS clauses via any(), has(), etc. in conjunction with
    an aliased object on the left and of_type() on the right.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1325](https://www.sqlalchemy.org/trac/ticket/1325)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an attribute helper method `set_committed_value` in sqlalchemy.orm.attributes.
    Given an object, attribute name, and value, will set the value on the object as
    part of its “committed” state, i.e. state that is understood to have been loaded
    from the database. Helps with the creation of homegrown collection loaders and
    such.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query won’t fail with weakref error when a non-mapper/class instrumented descriptor
    is passed, raises “Invalid column expression”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.group_by() properly takes into account aliasing applied to the FROM clause,
    such as with select_from(), using with_polymorphic(), or using from_self().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An alias() of a select() will convert to a “scalar subquery” when used in an
    unambiguously scalar context, i.e. it’s used in a comparison operation. This applies
    to the ORM when using query.subquery() as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed missing _label attribute on Function object, others when used in a select()
    with use_labels (such as when used in an ORM column_property()).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1302](https://www.sqlalchemy.org/trac/ticket/1302)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: anonymous alias names now truncate down to the max length allowed by the dialect.
    More significant on DBs like Oracle with very small character limits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the __selectable__() interface has been replaced entirely by __clause_element__().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a recursive pickling issue in serializer, triggered by an EXISTS or other
    embedded FROM construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative locates the “inherits” class using a search through __bases__, to
    skip over mixins that are local to subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative figures out joined-table inheritance primary join condition even
    if “inherits” mapper argument is given explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will properly interpret the “foreign_keys” argument on a backref()
    if it’s a string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will accept a table-bound column as a property when used in conjunction
    with __table__, if the column is already present in __table__. The column will
    be remapped to the given key the same way as when added to the mapper() properties
    dict.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index reflection won’t fail when an index with multiple expressions is encountered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added PGUuid and PGBit types to sqlalchemy.databases.postgres.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refection of unknown PG types won’t crash when those types are specified within
    a domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preliminary support for pymssql 1.0.1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected issue on mssql where max_identifier_length was not being respected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jan 24 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Further refined 0.5.1’s warning about delete-orphan cascade placed on a many-to-many
    relation. First, the bad news: the warning will apply to both many-to-many as
    well as many-to-one relations. This is necessary since in both cases, SQLA does
    not scan the full set of potential parents when determining “orphan” status -
    for a persistent object it only detects an in-python de-association event to establish
    the object as an “orphan”. Next, the good news: to support one-to-one via a foreign
    key or association table, or to support one-to-many via an association table,
    a new flag single_parent=True may be set which indicates objects linked to the
    relation are only meant to have a single parent. The relation will raise an error
    if multiple parent-association events occur within Python.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted the attribute instrumentation change from 0.5.1 to fully establish
    instrumentation for subclasses where the mapper was created after the superclass
    had already been fully instrumented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1292](https://www.sqlalchemy.org/trac/ticket/1292)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in delete-orphan cascade whereby two one-to-one relations from two
    different parent classes to the same target class would prematurely expunge the
    instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an eager loading bug whereby self-referential eager loading would prevent
    other eager loads, self referential or not, from joining to the parent JOIN properly.
    Thanks to Alex K for creating a great test case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.expire() and related methods will not expire() unloaded deferred attributes.
    This prevents them from being needlessly loaded when the instance is refreshed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.join()/outerjoin() will now properly join an aliased() construct to the
    existing left side, even if query.from_self() or query.select_from(someselectable)
    has been called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1293](https://www.sqlalchemy.org/trac/ticket/1293)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further fixes to the “percent signs and spaces in column/table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: names” functionality.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1284](https://www.sqlalchemy.org/trac/ticket/1284)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored convert_unicode handling. Results were being passed on through without
    conversion.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1291](https://www.sqlalchemy.org/trac/ticket/1291)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Really fixing the decimal handling this time..
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1282](https://www.sqlalchemy.org/trac/ticket/1282)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql] [Ticket:1289]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified table reflection code to use only kwargs when constructing tables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jan 17 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed an internal join cache which could potentially leak memory when issuing
    query.join() repeatedly to ad-hoc selectables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “clear()”, “save()”, “update()”, “save_or_update()” Session methods have
    been deprecated, replaced by “expunge_all()” and “add()”. “expunge_all()” has
    also been added to ScopedSession.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modernized the “no mapped table” exception and added a more explicit __table__/__tablename__
    exception to declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concrete inheriting mappers now instrument attributes which are inherited from
    the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute
    that issues a descriptive error when accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new relation() keyword back_populates. This allows configuration of
    backreferences using explicit relations. This is required when creating bidirectional
    relations between a hierarchy of concrete mappers and another class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage added for relation() objects specified on concrete mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.from_self() as well as query.subquery() both disable the rendering of
    eager joins inside the subquery produced. The “disable all eager joins” feature
    is available publicly via a new query.enable_eagerloads() generative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1276](https://www.sqlalchemy.org/trac/ticket/1276)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a rudimental series of set operations to Query that receive Query objects
    as arguments, including union(), union_all(), intersect(), except_(), intersect_all(),
    except_all(). See the API documentation for Query.union() for examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug that prevented Query.join() and eagerloads from attaching to a query
    that selected from a union or aliased union.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A short documentation example added for bidirectional relations specified on
    concrete mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mappers now instrument class attributes upon construction with the final InstrumentedAttribute
    object which remains persistent. The _CompileOnAttr/__getattribute__() methodology
    has been removed. The net effect is that Column-based mapped class attributes
    can now be used fully at the class level without invoking a mapper compilation
    operation, greatly simplifying typical usage patterns within declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1269](https://www.sqlalchemy.org/trac/ticket/1269)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ColumnProperty (and front-end helpers such as `deferred`) no longer ignores
    unknown **keyword arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug with the unitofwork’s “row switch” mechanism, i.e. the conversion
    of INSERT/DELETE into an UPDATE, when combined with joined-table inheritance and
    an object which contained no defined values for the child table where an UPDATE
    with no SET clause would be rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using delete-orphan on a many-to-many relation is deprecated. This produces
    misleading or erroneous results since SQLA does not retrieve the full list of
    “parents” for m2m. To get delete-orphan behavior with an m2m table, use an explicit
    association class so that the individual association row is treated as a parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: delete-orphan cascade always requires delete cascade. Specifying delete-orphan
    without delete now raises a deprecation warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the methodology to handling percent signs in column names from. Added
    more tests. MySQL and PostgreSQL dialects still do not issue correct CREATE TABLE
    statements for identifiers with percent signs in them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index now accepts column-oriented InstrumentedAttributes (i.e. column-based
    mapped class attributes) as column arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1214](https://www.sqlalchemy.org/trac/ticket/1214)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column with no name (as in declarative) won’t raise a NoneType error when its
    string output is requested (such as in a stack trace).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when overriding a Column with a ForeignKey on a reflected table, where
    derived columns (i.e. the “virtual” columns of a select, etc.) would inadvertently
    call upon schema-level cleanup logic intended only for the original column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1278](https://www.sqlalchemy.org/trac/ticket/1278)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the missing keywords from MySQL 4.1 so they get escaped properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected handling of large decimal values with more robust tests. Removed string
    manipulation on floats.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1280](https://www.sqlalchemy.org/trac/ticket/1280)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified the do_begin handling in mssql to use the Cursor not the Connection
    so it is DBAPI compatible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected SAVEPOINT support on adodbapi by changing the handling of savepoint_release,
    which is unsupported on mssql.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can now specify Column objects on subclasses which have no table of their own
    (i.e. use single table inheritance). The columns will be appended to the base
    table, but only mapped by the subclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For both joined and single inheriting subclasses, the subclass will only map
    those columns which are already mapped on the superclass and those explicit on
    the subclass. Other columns that are present on the Table will be excluded from
    the mapping by default, which can be disabled by passing a blank exclude_properties
    collection to the __mapper_args__. This is so that single-inheriting classes which
    define their own columns are the only classes to map those columns. The effect
    is actually a more organized mapping than you’d normally get with explicit mapper()
    calls unless you set up the exclude_properties arguments explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s an error to add new Column objects to a declarative class that specified
    an existing table using __table__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Jan 06 2009'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation has been converted to Sphinx. In particular, the generated API
    documentation has been constructed into a full blown “API Reference” section which
    organizes editorial documentation combined with generated docstrings. Cross linking
    between sections and API docs are vastly improved, a javascript-powered search
    feature is provided, and a full index of all classes, functions and members is
    provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setup.py now imports setuptools only optionally. If not present, distutils is
    used. The new “pip” installer is recommended over easy_install as it installs
    in a more simplified way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added an extremely basic illustration of a PostGIS integration to the examples
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.with_polymorphic() now accepts a third argument “discriminator” which
    will replace the value of mapper.polymorphic_on for that query. Mappers themselves
    no longer require polymorphic_on to be set, even if the mapper has a polymorphic_identity.
    When not set, the mapper will load non-polymorphically by default. Together, these
    two features allow a non-polymorphic concrete inheritance setup to use polymorphic
    loading on a per-query basis, since concrete setups are prone to many issues when
    used polymorphically in all cases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic_loader accepts a query_class= to customize the Query classes used for
    both the dynamic collection and the queries built from it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.order_by() accepts None which will remove any pending order_by state from
    the query, as well as cancel out any mapper/relation configured ordering. This
    is primarily useful for overriding the ordering specified on a dynamic_loader().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1079](https://www.sqlalchemy.org/trac/ticket/1079)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exceptions raised during compile_mappers() are now preserved to provide “sticky
    behavior” - if a hasattr() call on a pre-compiled mapped attribute triggers a
    failing compile and suppresses the exception, subsequent compilation is blocked
    and the exception will be reiterated on the next compile() call. This issue occurs
    frequently when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: property.of_type() is now recognized on a single-table inheriting target, when
    used in the context of prop.of_type(..).any()/has(), as well as query.join(prop.of_type(…)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.join() raises an error when the target of the join doesn’t match the property-based
    attribute - while it’s unlikely anyone is doing this, the SQLAlchemy author was
    guilty of this particular loosey-goosey behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when using weak_instance_map=False where modified events would not
    be intercepted for a flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1272](https://www.sqlalchemy.org/trac/ticket/1272)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed some deep “column correspondence” issues which could impact a Query made
    against a selectable containing multiple versions of the same table, as well as
    unions and similar which contained the same table columns in different column
    positions at different levels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1268](https://www.sqlalchemy.org/trac/ticket/1268)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom comparator classes used in conjunction with column_property(), relation()
    etc. can define new comparison methods on the Comparator, which will become available
    via __getattr__() on the InstrumentedAttribute. In the case of synonym() or comparable_property(),
    attributes are resolved first on the user-defined descriptor, then on the user-defined
    comparator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added ScopedSession.is_active accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can pass mapped attributes and column objects as keys to query.update({}).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1262](https://www.sqlalchemy.org/trac/ticket/1262)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped attributes passed to the values() of an expression level insert() or
    update() will use the keys of the mapped columns, not that of the mapped attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with Query.delete() and Query.update() not working properly
    with bind parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1242](https://www.sqlalchemy.org/trac/ticket/1242)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.select_from(), from_statement() ensure that the given argument is a FromClause,
    or Text/Select/Union, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query() can be passed a “composite” attribute as a column expression and it
    will be expanded. Somewhat related to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query() is a little more robust when passed various column expressions such
    as strings, clauselists, text() constructs (which may mean it just raises an error
    more nicely).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: first() works as expected with Query.from_statement().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug introduced in 0.5rc4 involving eager loading not functioning for properties
    which were added to a mapper post-compile using add_property() or equivalent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where many-to-many relation() with viewonly=True would not correctly
    reference the link between secondary->remote.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate items in a list-based collection will be maintained when issuing INSERTs
    to a “secondary” table in a many-to-many relation. Assuming the m2m table has
    a unique or primary key constraint on it, this will raise the expected constraint
    violation instead of silently dropping the duplicate entries. Note that the old
    behavior remains for a one-to-many relation since collection entries in that case
    don’t result in INSERT statements and SQLA doesn’t manually police collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1232](https://www.sqlalchemy.org/trac/ticket/1232)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.add_column() can accept FromClause objects in the same manner as session.query()
    can.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison of many-to-one relation to NULL is properly converted to IS NOT NULL
    based on not_().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra checks added to ensure explicit primaryjoin/secondaryjoin are ClauseElement
    instances, to prevent more confusing errors later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1087](https://www.sqlalchemy.org/trac/ticket/1087)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved mapper() check for non-class classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1236](https://www.sqlalchemy.org/trac/ticket/1236)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparator_factory argument is now documented and supported by all MapperProperty
    types, including column_property(), relation(), backref(), and synonym().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#5051](https://www.sqlalchemy.org/trac/ticket/5051)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the name of PropertyLoader to RelationProperty, to be consistent with
    all the other names. PropertyLoader is still present as a synonym.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed “double iter()” call causing bus errors in shard API, removed errant result.close()
    left over from the 0.4 version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: made Session.merge cascades not trigger autoflush. Fixes merged instances getting
    prematurely inserted with missing values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two fixes to help prevent out-of-band columns from being rendered in polymorphic_union
    inheritance scenarios (which then causes extra tables to be rendered in the FROM
    clause causing cartesian products):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: improvements to “column adaption” for a->b->c inheritance situations to better
    locate columns that are related to one another via multiple levels of indirection,
    rather than rendering the non-adapted column.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the “polymorphic discriminator” column is only rendered for the actual mapper
    being queried against. The column won’t be “pulled in” from a subclass or superclass
    mapper since it’s not needed.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shard_id argument on ShardedSession.execute().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RowProxy objects can be used in place of dictionary arguments sent to connection.execute()
    and friends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#935](https://www.sqlalchemy.org/trac/ticket/935)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns can again contain percent signs within their names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.sql.expression.Function is now a public class. It can be subclassed
    to provide user-defined SQL functions in an imperative style, including with pre-established
    behaviors. The postgis.py example illustrates one usage of this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PickleType now favors == comparison by default, if the incoming object (such
    as a dict) implements __eq__(). If the object does not implement __eq__() and
    mutable=True, a deprecation warning is raised.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the import weirdness in sqlalchemy.sql to not export __names__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1215](https://www.sqlalchemy.org/trac/ticket/1215)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the same ForeignKey object repeatedly raises an error instead of silently
    failing later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1238](https://www.sqlalchemy.org/trac/ticket/1238)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added NotImplementedError for params() method on Insert/Update/Delete constructs.
    These items currently don’t support this functionality, which also would be a
    little misleading compared to values().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflected foreign keys will properly locate their referenced column, even if
    the column was given a “key” attribute different from the reflected name. This
    is achieved via a new flag on ForeignKey/ForeignKeyConstraint called “link_to_name”,
    if True means the given name is the referred-to column’s name, not its assigned
    key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select() can accept a ClauseList as a column in the same way as a Table or other
    selectable and the interior expressions will be used as column elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the “passive” flag on session.is_modified() is correctly propagated to the attribute
    manager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: union() and union_all() will not whack any order_by() that has been applied
    to the select()s inside. If you union() a select() with order_by() (presumably
    to support LIMIT/OFFSET), you should also call self_group() on it to apply parenthesis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in exception raise when FK columns not present during reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving reflection of a remote-schema table with a foreign key ref
    to another table in that schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table reflection now stores the actual DefaultClause value for the column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1266](https://www.sqlalchemy.org/trac/ticket/1266)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes, behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in a new MSGenericBinary type. This maps to the Binary type so it can
    implement the specialized behavior of treating length specified types as fixed-width
    Binary types and non-length types as an unbound variable length Binary type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added in new types: MSVarBinary and MSImage.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in the MSReal, MSNText, MSSmallDateTime, MSTime, MSDateTimeOffset, and
    MSDateTime2 types
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactored the Date/Time types. The `smalldatetime` data type no longer truncates
    to a date only, and will now be mapped to the MSSmallDateTime type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1254](https://www.sqlalchemy.org/trac/ticket/1254)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected an issue with Numerics to accept an int.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped `char_length` to the `LEN()` function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an `INSERT` includes a subselect the `INSERT` is converted from an `INSERT
    INTO VALUES` construct to a `INSERT INTO SELECT` construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the column is part of a `primary_key` it will be `NOT NULL` since MSSQL doesn’t
    allow `NULL` in primary_key columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MSBinary` now returns a `BINARY` instead of an `IMAGE`. This is a backwards
    incompatible change in that `BINARY` is a fixed length data type whereas `IMAGE`
    is a variable length data type.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_default_schema_name` is now reflected from the database based on the user’s
    default schema. This only works with MSSQL 2005 and later.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1258](https://www.sqlalchemy.org/trac/ticket/1258)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added collation support through the use of a new collation argument. This is
    supported on the following types: char, nchar, varchar, nvarchar, text, ntext.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1248](https://www.sqlalchemy.org/trac/ticket/1248)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the connection string parameters favor DSN as the default specification
    for pyodbc. See the mssql.py docstring for detailed usage instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added experimental support of savepoints. It currently does not work fully with
    sessions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support for three levels of column nullability: NULL, NOT NULL, and the database’s
    configured default. The default Column configuration (nullable=True) will now
    generate NULL in the DDL. Previously no specification was emitted and the database
    default would take effect (usually NULL, but not always). To explicitly request
    the database default, configure columns with nullable=None and no specification
    will be emitted in DDL. This is backwards incompatible behavior.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1243](https://www.sqlalchemy.org/trac/ticket/1243)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted the format of create_xid() to repair two-phase commit. We now have
    field reports of Oracle two-phase commit working properly with this change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added OracleNVarchar type, produces NVARCHAR2, and also subclasses Unicode so
    that convert_unicode=True by default. NVARCHAR2 reflects into this type automatically
    so these columns pass unicode on a reflected table with no explicit convert_unicode=True
    flags.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1233](https://www.sqlalchemy.org/trac/ticket/1233)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[dialect]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new description_encoding attribute on the dialect that is used for encoding
    the column name when processing the metadata. This usually defaults to utf-8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NullPool supports reconnect on failure behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a mutex for the initial pool creation when using pool.manage(dbapi). This
    prevents a minor case of “dogpile” behavior which would otherwise occur upon a
    heavy load startup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#799](https://www.sqlalchemy.org/trac/ticket/799)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: _execute_clauseelement() goes back to being a private method. Subclassing Connection
    is not needed now that ConnectionProxy is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tickets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added note about create_session() defaults.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added section about metadata.reflect().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated TypeDecorator section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrote the “threadlocal” strategy section of the docs due to recent confusion
    over this feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed badly out of date ‘polymorphic_fetch’ and ‘select_table’ docs from inheritance,
    reworked the second half of “joined table inheritance”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented comparator_factory kwarg, added new doc section “Custom Comparators”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling alias.execute() in conjunction with server_side_cursors won’t raise
    AttributeError.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Index reflection support to PostgreSQL, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[associationproxy]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The association proxy properties are make themselves available at the class
    level, e.g. MyClass.aproxy. Previously this evaluated to None.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full list of arguments accepted as string by backref() includes ‘primaryjoin’,
    ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’, ‘remote_side’, ‘order_by’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri Nov 14 2008'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global “propigate”->”propagate” change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.count() has been enhanced to do the “right thing” in a wider variety of
    cases. It can now count multiple-entity queries, as well as column-based queries.
    Note that this means if you say query(A, B).count() without any joining criterion,
    it’s going to count the cartesian product of A*B. Any query which is against column-based
    entities will automatically issue “SELECT count(1) FROM (SELECT…)” so that the
    real rowcount is returned, meaning a query such as query(func.count(A.name)).count()
    will return a value of one, since that query would return one row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of performance tuning. A rough guesstimate over various ORM operations
    places it 10% faster over 0.5.0rc3, 25-30% over 0.4.8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes and behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustments to the enhanced garbage collection on InstanceState to better guard
    against errors due to lost state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.get() returns a more informative error message when executed against multiple
    entities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored NotImplementedError on Cls.relation.in_()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed PendingDeprecationWarning involving order_by parameter on relation().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the ‘properties’ attribute of the Connection object, Connection.info
    should be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored “active rowcount” fetch before ResultProxy autocloses the cursor. This
    was removed in 0.5rc3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rearranged the load_dialect_impl() method in TypeDecorator such that it will
    take effect even if the user-defined TypeDecorator uses another TypeDecorator
    as its impl.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of cleanup and fixes to correct problems with limit and offset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correct situation where subqueries as part of a binary expression need to be
    translated to use the IN and NOT IN syntax.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed E Notation issue that prevented the ability to insert decimal values less
    than 1E-6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1216](https://www.sqlalchemy.org/trac/ticket/1216)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problems with reflection when dealing with schemas, particularly when
    those schemas are the default schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1217](https://www.sqlalchemy.org/trac/ticket/1217)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with casting a zero length item to a varchar. It now correctly
    adjusts the CAST.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Currency type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions were not return their result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with joins. Access only support LEFT OUTER or INNER not just
    JOIN by itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can now use a custom “inherit_condition” in __mapper_args__ when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed string-based “remote_side”, “order_by” and others not propagating correctly
    when used in backref().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri Nov 07 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added two new hooks to SessionExtension: after_bulk_delete() and after_bulk_update().
    after_bulk_delete() is called after a bulk delete() operation on a query. after_bulk_update()
    is called after a bulk update() operation on a query.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”not equals” comparisons of simple many-to-one relation to an instance will
    not drop into an EXISTS clause and will compare foreign key columns instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed not-really-working use cases of comparing a collection to an iterable.
    Use contains() to test for collection membership.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the behavior of aliased() objects such that they more accurately adapt
    the expressions generated, which helps particularly with self-referential comparisons.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1171](https://www.sqlalchemy.org/trac/ticket/1171)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving primaryjoin/secondaryjoin conditions constructed from class-bound
    attributes (as often occurs when using declarative), which later would be inappropriately
    aliased by Query, particularly with the various EXISTS based comparators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when using multiple query.join() with an aliased-bound descriptor
    which would lose the left alias.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved weakref identity map memory management to no longer require mutexing,
    resurrects garbage collected instance on a lazy basis for an InstanceState with
    pending changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InstanceState object now removes circular references to itself upon disposal
    to keep it outside of cyclic garbage collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relation() won’t hide unrelated ForeignKey errors inside of the “please specify
    primaryjoin” message when determining join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in Query involving order_by() in conjunction with multiple aliases
    of the same class (will add tests in)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1218](https://www.sqlalchemy.org/trac/ticket/1218)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using Query.join() with an explicit clause for the ON clause, the clause
    will be aliased in terms of the left side of the join, allowing scenarios like
    query(Source). from_self().join((Dest, Source.id==Dest.source_id)) to work properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired support for “passive-deletes” on a many-to-one relation() with “delete”
    cascade.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1183](https://www.sqlalchemy.org/trac/ticket/1183)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added more granularity to internal attribute access, such that cascade and flush
    operations will not initialize unloaded attributes and collections, leaving them
    intact for a lazy-load later on. Backref events still initialize attributes and
    collections for pending instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1202](https://www.sqlalchemy.org/trac/ticket/1202)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL compiler optimizations and complexity reduction. The call count for compiling
    a typical select() construct is 20% less versus 0.5.0rc2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialects can now generate label names of adjustable length. Pass in the argument
    “label_length=<value>” to create_engine() to adjust how many characters max will
    be present in dynamically generated column labels, i.e. “somecolumn AS somelabel”.
    Any value less than 6 will result in a label of minimal size, consisting of an
    underscore and a numeric counter. The compiler uses the value of dialect.max_identifier_length
    as a default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1211](https://www.sqlalchemy.org/trac/ticket/1211)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified the check for ResultProxy “autoclose without results” to be based
    solely on presence of cursor.description. All the regexp-based guessing about
    statements returning rows has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1212](https://www.sqlalchemy.org/trac/ticket/1212)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct execution of a union() construct will properly set up result-row processing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1194](https://www.sqlalchemy.org/trac/ticket/1194)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal notion of an “OID” or “ROWID” column has been removed. It’s basically
    not used by any dialect, and the possibility of its usage with psycopg2’s cursor.lastrowid
    is basically gone now that INSERT..RETURNING is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed “default_order_by()” method on all FromClause objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired the table.tometadata() method so that a passed-in schema argument is
    propagated to ForeignKey constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slightly changed behavior of IN operator for comparing to empty collections.
    Now results in inequality comparison against self. More portable, but breaks with
    stored procedures that aren’t pure functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed foreign key reflection in the edge case where a Table’s explicit schema=
    is the same as the schema (database) the connection is attached to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No longer expects include_columns in table reflection to be lower case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrote a docstring for Oracle dialect. Apparently that Ohloh “few source code
    comments” label is starting to string :).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed FIRST_ROWS() optimize flag when using LIMIT/OFFSET, can be re-enabled
    with optimize_limits=True create_engine() flag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes and behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the auto_convert_lobs to False on create_engine() will also instruct
    the OracleBinary type to return the cx_oracle LOB object unchanged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new extension sqlalchemy.ext.serializer. Provides Serializer/Deserializer
    “classes” which mirror Pickle/Unpickle, as well as dumps() and loads(). This serializer
    implements an “external object” pickler which keeps key context-sensitive objects,
    including engines, sessions, metadata, Tables/Columns, and mappers, outside of
    the pickle stream, and can later restore the pickle using any engine/metadata/session
    provider. This is used not for pickling regular object instances, which are pickleable
    without any special logic, but for pickling expression objects and full Query
    objects, such that all mapper/engine/session dependencies can be restored at unpickle
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug preventing declarative-bound “column” objects from being used in column_mapped_collection().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1174](https://www.sqlalchemy.org/trac/ticket/1174)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[misc]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: util.flatten_iterator() func doesn’t interpret strings with __iter__() methods
    as iterators, such as in pypy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1077](https://www.sqlalchemy.org/trac/ticket/1077)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sun Oct 12 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving read/write relation()s that contain literal or other non-column
    expressions within their primaryjoin condition equated to a foreign key column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”non-batch” mode in mapper(), a feature which allows mapper extension methods
    to be called as each instance is updated/inserted, now honors the insert order
    of the objects given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ScopedSession.query_property now accepts a query_cls factory, overriding the
    session’s configured query_cls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shared state bug interfering with ScopedSession.mapper’s ability to apply
    default __init__ implementations on object subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed up slices on Query (i.e. query[x:y]) to work properly for zero length
    slices, slices with None on either end.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1177](https://www.sqlalchemy.org/trac/ticket/1177)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an example illustrating Celko’s “nested sets” as a SQLA mapping.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() with an alias argument works even when the alias is embedded
    in a SELECT, as when sent to the Query via query.select_from().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() usage is now compatible with a Query that also contains a regular
    eager load and limit/offset, in that the columns are added to the Query-generated
    subquery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1180](https://www.sqlalchemy.org/trac/ticket/1180)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.execute() will execute a Sequence object passed to it (regression from
    0.4).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the “raiseerror” keyword argument from object_mapper() and class_mapper().
    These functions raise in all cases if the given class/instance is not mapped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed session.transaction.commit() on a autocommit=False session not starting
    a new transaction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some adjustments to Session.identity_map’s weak referencing behavior to reduce
    asynchronous GC side effects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustment to Session’s post-flush accounting of newly “clean” objects to better
    protect against operating on objects as they’re asynchronously gc’ed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1182](https://www.sqlalchemy.org/trac/ticket/1182)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary tables are now reflectable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overhauled SQLite date/time bind/result processing to use regular expressions
    and format strings, rather than strptime/strftime, to generically support pre-1900
    dates, dates with microseconds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle will detect string-based statements which contain comments at the front
    before a SELECT as SELECT statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1187](https://www.sqlalchemy.org/trac/ticket/1187)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Sep 11 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query now has delete() and update(values) methods. This allows to perform bulk
    deletes/updates with the Query object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RowTuple object returned by Query(*cols) now features keynames which prefer
    mapped attribute names over column keys, column keys over column names, i.e. Query(Class.foo,
    Class.bar) will have names “foo” and “bar” even if those are not the names of
    the underlying Column objects. Direct Column objects such as Query(table.c.col)
    will return the “key” attribute of the Column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added scalar() and value() methods to Query, each return a single scalar value.
    scalar() takes no arguments and is roughly equivalent to first()[0], value() takes
    a single column expression and is roughly equivalent to values(expr).next()[0].
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the determination of the FROM clause when placing SQL expressions in
    the query() list of entities. In particular scalar subqueries should not “leak”
    their inner FROM objects out into the enclosing query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joins along a relation() from a mapped class to a mapped subclass, where the
    mapped subclass is configured with single table inheritance, will include an IN
    clause which limits the subtypes of the joined class to those requested, within
    the ON clause of the join. This takes effect for eager load joins as well as query.join().
    Note that in some scenarios the IN clause will appear in the WHERE clause of the
    query as well since this discrimination has multiple trigger points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AttributeExtension has been refined such that the event is fired before the
    mutation actually occurs. Additionally, the append() and set() methods must now
    return the given value, which is used as the value to be used in the mutation
    operation. This allows creation of validating AttributeListeners which raise before
    the action actually occurs, and which can change the given value into something
    else before its used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column_property(), composite_property(), and relation() now accept a single
    or list of AttributeExtensions using the “extension” keyword argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.order_by().get() silently drops the “ORDER BY” from the query issued by
    GET but does not raise an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a Validator AttributeExtension, as well as a @validates decorator which
    is used in a similar fashion as @reconstructor, and marks a method as validating
    one or more mapped attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: class.someprop.in_() raises NotImplementedError pending the implementation of
    “in_” for relation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed primary key update for many-to-many collections where the collection had
    not been loaded yet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1127](https://www.sqlalchemy.org/trac/ticket/1127)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby deferred() columns with a group in conjunction with an otherwise
    unrelated synonym() would produce an AttributeError during deferred load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The before_flush() hook on SessionExtension takes place before the list of new/dirty/deleted
    is calculated for the final time, allowing routines within before_flush() to further
    change the state of the Session before the flush proceeds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1128](https://www.sqlalchemy.org/trac/ticket/1128)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “extension” argument to Session and others can now optionally be a list,
    supporting events sent to multiple SessionExtension instances. Session places
    SessionExtensions in Session.extensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reentrant calls to flush() raise an error. This also serves as a rudimentary,
    but not foolproof, check against concurrent calls to Session.flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the behavior of query.join() when joining to joined-table inheritance
    subclasses, using explicit join criteria (i.e. not on a relation).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@orm.attributes.reconstitute and MapperExtension.reconstitute have been renamed
    to @orm.reconstructor and MapperExtension.reconstruct_instance'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed @reconstructor hook for subclasses which inherit from a base class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1129](https://www.sqlalchemy.org/trac/ticket/1129)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The composite() property type now supports a __set_composite_values__() method
    on the composite class which is required if the class represents state using attribute
    names other than the column’s keynames; default-generated values now get populated
    properly upon flush. Also, composites with attributes set to None compare correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1132](https://www.sqlalchemy.org/trac/ticket/1132)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 3-tuple of iterables returned by attributes.get_history() may now be a mix
    of lists and tuples. (Previously members were always lists.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby changing a primary key attribute on an entity where the attribute’s
    previous value had been expired would produce an error upon flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1151](https://www.sqlalchemy.org/trac/ticket/1151)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed custom instrumentation bug whereby get_instance_dict() was not called
    for newly constructed instances not loaded by the ORM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.delete() adds the given object to the session if not already present.
    This was a regression bug from 0.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1150](https://www.sqlalchemy.org/trac/ticket/1150)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The echo_uow flag on Session is deprecated, and unit-of-work logging is now
    application-level only, not per-session level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed conflicting contains() operator from InstrumentedAttribute which didn’t
    accept escape kwaarg.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1153](https://www.sqlalchemy.org/trac/ticket/1153)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporarily rolled back the “ORDER BY” enhancement from. This feature is on
    hold pending further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exists() construct won’t “export” its contained list of elements as FROM
    clauses, allowing them to be used more effectively in the columns clause of a
    SELECT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and_() and or_() now generate a ColumnElement, allowing boolean expressions
    as result columns, i.e. select([and_(1, 0)]).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#798](https://www.sqlalchemy.org/trac/ticket/798)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bind params now subclass ColumnElement which allows them to be selectable by
    orm.query (they already had most ColumnElement semantics).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added select_from() method to exists() construct, which becomes more and more
    compatible with a regular select().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added func.min(), func.max(), func.sum() as “generic functions”, which basically
    allows for their return type to be determined automatically. Helps with dates
    on SQLite, decimal types, others.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1160](https://www.sqlalchemy.org/trac/ticket/1160)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added decimal.Decimal as an “auto-detect” type; bind parameters and generic
    functions will set their type to Numeric when a Decimal is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added “sorted_tables” accessor to MetaData, which returns Table objects sorted
    in order of dependency as a list. This deprecates the MetaData.table_iterator()
    method. The “reverse=False” keyword argument has also been removed from util.sort_tables();
    use the Python ‘reversed’ function to reverse the results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1033](https://www.sqlalchemy.org/trac/ticket/1033)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘length’ argument to all Numeric types has been renamed to ‘scale’. ‘length’
    is deprecated and is still accepted with a warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped 0.3-compatibility for user defined types (convert_result_value, convert_bind_param).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘length’ argument to MSInteger, MSBigInteger, MSTinyInteger, MSSmallInteger
    and MSYear has been renamed to ‘display_width’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added MSMediumInteger type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the function func.utc_timestamp() compiles to UTC_TIMESTAMP, without the parenthesis,
    which seem to get in the way when using in conjunction with executemany().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: limit/offset no longer uses ROW NUMBER OVER to limit rows, and instead uses
    subqueries in conjunction with a special Oracle optimization comment. Allows LIMIT/OFFSET
    to work in conjunction with DISTINCT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has_sequence() now takes the current “schema” argument into account
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added BFILE to reflected type names
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby mapper couldn’t initialize if a composite primary key referenced
    another table that was not defined yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1161](https://www.sqlalchemy.org/trac/ticket/1161)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed exception throw which would occur when string-based primaryjoin condition
    was used in conjunction with backref.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0beta3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Aug 04 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “entity_name” feature of SQLAlchemy mappers has been removed. For rationale,
    see [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the “autoexpire” flag on Session, sessionmaker(), and scoped_session() has been
    renamed to “expire_on_commit”. It does not affect the expiration behavior of rollback().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed endless loop bug which could occur within a mapper’s deferred load of
    inherited attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a legacy-support flag “_enable_transaction_accounting” flag added to Session
    which when False, disables all transaction-level object accounting, including
    expire on rollback, expire on commit, new/deleted list maintenance, and autoflush
    on begin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘cascade’ parameter to relation() accepts None as a value, which is equivalent
    to no cascades.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A critical fix to dynamic relations allows the “modified” history to be properly
    cleared after a flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined @properties on a class are detected and left in place during mapper
    initialization. This means that a table-bound column of the same name will not
    be mapped at all if a @property is in the way (and the column is not remapped
    to a different name), nor will an instrumented attribute from an inherited class
    be applied. The same rules apply for names excluded using the include_properties/exclude_properties
    collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new SessionExtension hook called after_attach(). This is called at the
    point of attachment for objects via add(), add_all(), delete(), and merge().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mapper which inherits from another, when inheriting the columns of its inherited
    mapper, will use any reassigned property names specified in that inheriting mapper.
    Previously, if “Base” had reassigned “base_id” to the name “id”, “SubBase(Base)”
    would still get an attribute called “base_id”. This could be worked around by
    explicitly stating the column in each submapper as well but this is fairly unworkable
    and also impossible when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1111](https://www.sqlalchemy.org/trac/ticket/1111)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a series of potential race conditions in Session whereby asynchronous
    GC could remove unmodified, no longer referenced items from the session as they
    were present in a list of items to be processed, typically during session.expunge_all()
    and dependent methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some improvements to the _CompileOnAttr mechanism which should reduce the probability
    of “Attribute x was not replaced during compile” warnings. (this generally applies
    to SQLA hackers, like Elixir devs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby the “unsaved, pending instance” FlushError raised for a pending
    orphan would not take superclass mappers into account when generating the list
    of relations responsible for the error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: func.count() with no arguments renders as COUNT(*), equivalent to func.count(text(‘*’)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple label names in ORDER BY expressions render as themselves, and not as
    a re-statement of their corresponding expression. This feature is currently enabled
    only for SQLite, MySQL, and PostgreSQL. It can be enabled on other dialects as
    each is shown to support this behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quoting of MSEnum values for use in CREATE TABLE is now optional & will be quoted
    on demand as required. (Quoting was always optional for use with existing tables.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1110](https://www.sqlalchemy.org/trac/ticket/1110)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-bound attributes sent as arguments to relation()’s remote_side and foreign_keys
    parameters are now accepted, allowing them to be used with declarative. Additionally
    fixed bugs involving order_by being specified as a class-bound attribute in conjunction
    with eager loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarative initialization of Columns adjusted so that non-renamed columns initialize
    in the same way as a non declarative mapper. This allows an inheriting mapper
    to set up its same-named “id” columns in particular such that the parent “id”
    column is favored over the child column, reducing database round trips when this
    value is requested.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0beta2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Jul 14 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to expired attributes, deferred attributes also load if their data
    is present in the result set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#870](https://www.sqlalchemy.org/trac/ticket/870)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.refresh() raises an informative error message if the list of attributes
    does not include any column-based attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query() raises an informative error message if no columns or mappers are specified.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy loaders now trigger autoflush before proceeding. This allows expire() of
    a collection or scalar relation to function properly in the context of autoflush.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column_property() attributes which represent SQL expressions or columns that
    are not present in the mapped tables (such as those from views) are automatically
    expired after an INSERT or UPDATE, assuming they have not been locally modified,
    so that they are refreshed with the most recent data upon access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#887](https://www.sqlalchemy.org/trac/ticket/887)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed explicit, self-referential joins between two joined-table inheritance
    mappers when using query.join(cls, aliased=True).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1082](https://www.sqlalchemy.org/trac/ticket/1082)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed query.join() when used in conjunction with a columns-only clause and a
    SQL-expression ON clause in the join.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “allow_column_override” flag from mapper() has been removed. This flag is
    virtually always misunderstood. Its specific functionality is available via the
    include_properties/exclude_properties mapper arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired __str__() method on Query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1066](https://www.sqlalchemy.org/trac/ticket/1066)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.bind gets used as a default even when table/mapper specific binds are
    defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new match() operator that performs a full-text search. Supported on PostgreSQL,
    SQLite, MySQL, MS-SQL, and Oracle backends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added prefixes option to Table that accepts a list of strings to insert after
    CREATE in the CREATE TABLE statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1075](https://www.sqlalchemy.org/trac/ticket/1075)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode, UnicodeText types now set “assert_unicode” and “convert_unicode” by
    default, but accept overriding **kwargs for these values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative supports a __table_args__ class variable, which is either a dictionary,
    or tuple of the form (arg1, arg2, …, {kwarg1:value, …}) which contains positional
    + kw arguments to be passed to the Table constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1096](https://www.sqlalchemy.org/trac/ticket/1096)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified SQLite’s representation of “microseconds” to match the output of str(somedatetime),
    i.e. in that the microseconds are represented as fractional seconds in string
    format. This makes SQLA’s SQLite date type compatible with datetimes that were
    saved directly using Pysqlite (which just calls str()). Note that this is incompatible
    with the existing microseconds values in a SQLA 0.4 generated SQLite database
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get the old behavior globally:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To get the behavior on individual DateTime types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then use “t” as the type on the Column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1090](https://www.sqlalchemy.org/trac/ticket/1090)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite Date, DateTime, and Time types only accept Python datetime objects now,
    not strings. If you’d like to format dates as strings yourself with SQLite, use
    a String type. If you’d like them to return datetime objects anyway despite their
    accepting strings as input, make a TypeDecorator around String - SQLA doesn’t
    encourage this pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0beta1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Jun 12 2008'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global “propigate”->”propagate” change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed 0.4-only bug preventing composite columns from working properly with inheriting
    mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1199](https://www.sqlalchemy.org/trac/ticket/1199)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects. Ported from 0.5.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added ScopedSession.is_active accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-bound accessor can be used as the argument to relation() order_by.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#939](https://www.sqlalchemy.org/trac/ticket/939)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shard_id argument on ShardedSession.execute().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NullPool supports reconnect on failure behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in exception raise when FK columns not present during reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “__init__” trigger/decorator added by mapper now attempts to exactly mirror
    the argument signature of the original __init__. The pass-through for ‘_sa_session’
    is no longer implicit- you must allow for this keyword argument in your constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClassState is renamed to ClassManager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes may supply their own InstrumentationManager by providing a __sa_instrumentation_manager__
    property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom instrumentation may use any mechanism to associate a ClassManager with
    a class and an InstanceState with an instance. Attributes on those objects are
    still the default association mechanism used by SQLAlchemy’s native instrumentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved entity_name, _sa_session_id, and _instance_key from the instance object
    to the instance state. These values are still available in the old way, which
    is now deprecated, using descriptors attached to the class. A deprecation warning
    will be issued when accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.exceptions has been renamed to sqlalchemy.exc. The module may be
    imported under either name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM-related exceptions are now defined in sqlalchemy.orm.exc. ConcurrentModificationError,
    FlushError, and UnmappedColumnError compatibility aliases are installed in sqlalchemy.exc
    during the import of sqlalchemy.orm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.logging has been renamed to sqlalchemy.log.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transitional sqlalchemy.log.SADeprecationWarning alias for the warning’s
    definition in sqlalchemy.exc has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exc.AssertionError has been removed and usage replaced with Python’s built-in
    AssertionError.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The behavior of MapperExtensions attached to multiple, entity_name= primary
    mappers for a single class has been altered. The first mapper() defined for a
    class is the only mapper eligible for the MapperExtension ‘instrument_class’,
    ‘init_instance’ and ‘init_failed’ events. This is backwards incompatible; previously
    the extensions of last mapper defined would receive these events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[firebird]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for returning values from inserts (2.0+ only), updates and deletes
    (2.1+ only).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Index reflection support to Postgres, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: no release date
  prefs: []
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed erroneous self_group() call in expression package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1661](https://www.sqlalchemy.org/trac/ticket/1661)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed erroneous self_group() call in expression package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1661](https://www.sqlalchemy.org/trac/ticket/1661)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jan 16 2010'
  prefs: []
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The copy() method on Column now supports uninitialized, unnamed Column objects.
    This allows easy creation of declarative helpers which place common columns on
    multiple subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default generators like Sequence() translate correctly across a copy() operation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequence() and other DefaultGenerator objects are accepted as the value for
    the “default” and “onupdate” keyword arguments of Column, in addition to being
    accepted positionally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a column arithmetic bug that affected column correspondence for cloned
    selectables which contain free-standing column expressions. This bug is generally
    only noticeable when exercising newer ORM behavior only available in 0.6 via,
    but is more correct at the SQL expression level as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The extract() function, which was slightly improved in 0.5.7, needed a lot more
    work to generate the correct typecast (the typecasts appear to be necessary in
    PG’s EXTRACT quite a lot of the time). The typecast is now generated using a rule
    dictionary based on PG’s documentation for date/time/interval arithmetic. It also
    accepts text() constructs again, which was broken in 0.5.7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[firebird]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognize more errors as disconnections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The copy() method on Column now supports uninitialized, unnamed Column objects.
    This allows easy creation of declarative helpers which place common columns on
    multiple subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default generators like Sequence() translate correctly across a copy() operation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequence() and other DefaultGenerator objects are accepted as the value for
    the “default” and “onupdate” keyword arguments of Column, in addition to being
    accepted positionally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a column arithmetic bug that affected column correspondence for cloned
    selectables which contain free-standing column expressions. This bug is generally
    only noticeable when exercising newer ORM behavior only available in 0.6 via,
    but is more correct at the SQL expression level as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The extract() function, which was slightly improved in 0.5.7, needed a lot more
    work to generate the correct typecast (the typecasts appear to be necessary in
    PG’s EXTRACT quite a lot of the time). The typecast is now generated using a rule
    dictionary based on PG’s documentation for date/time/interval arithmetic. It also
    accepts text() constructs again, which was broken in 0.5.7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[firebird]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognize more errors as disconnections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Dec 26 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() now works with the automatically generated subquery that results
    when you say “query(Parent).join(Parent.somejoinedsubclass)”, i.e. when Parent
    joins to a joined-table-inheritance subclass. Previously contains_eager() would
    erroneously add the subclass table to the query separately producing a cartesian
    product. An example is in the ticket description.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1543](https://www.sqlalchemy.org/trac/ticket/1543)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.options() now only propagate to loaded objects for potential further sub-loads
    only for options where such behavior is relevant, keeping various unserializable
    options like those generated by contains_eager() out of individual instance states.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1553](https://www.sqlalchemy.org/trac/ticket/1553)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.execute() now locates table- and mapper-specific binds based on a passed
    in expression which is an insert()/update()/delete() construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1054](https://www.sqlalchemy.org/trac/ticket/1054)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.merge() now properly overwrites a many-to-one or uselist=False attribute
    to None if the attribute is also None in the given object to be merged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a needless select which would occur when merging transient objects that
    contained a null primary key identifier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1618](https://www.sqlalchemy.org/trac/ticket/1618)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutable collection passed to the “extension” attribute of relation(), column_property()
    etc. will not be mutated or shared among multiple instrumentation calls, preventing
    duplicate extensions, such as backref populators, from being inserted into the
    list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1585](https://www.sqlalchemy.org/trac/ticket/1585)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the call to get_committed_value() on CompositeProperty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1504](https://www.sqlalchemy.org/trac/ticket/1504)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where Query would crash if a join() with no clear “left” side were
    called when a non-mapped column entity appeared in the columns list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1602](https://www.sqlalchemy.org/trac/ticket/1602)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby composite columns wouldn’t load properly when configured on
    a joined-table subclass, introduced in version 0.5.6 as a result of the fix for.
    thx to Scott Torborg.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “use get” behavior of many-to-one relations, i.e. that a lazy load will
    fallback to the possibly cached query.get() value, now works across join conditions
    where the two compared types are not exactly the same class, but share the same
    “affinity” - i.e. Integer and SmallInteger. Also allows combinations of reflected
    and non-reflected types to work with 0.5 style type reflection, such as PGText/Text
    (note 0.6 reflects types as their generic versions).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in query.update() when passing Cls.attribute as keys in the value
    dict and using synchronize_session=’expire’ (‘fetch’ in 0.6).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1436](https://www.sqlalchemy.org/trac/ticket/1436)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in two-phase transaction whereby commit() method didn’t set the full
    state which allows subsequent close() call to succeed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1603](https://www.sqlalchemy.org/trac/ticket/1603)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the “numeric” paramstyle, which apparently is the default paramstyle used
    by Informixdb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat expressions in the columns clause of a select are deduped based on the
    identity of each clause element, not the actual string. This allows positional
    elements to render correctly even if they all render identically, such as “qmark”
    style bind parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1574](https://www.sqlalchemy.org/trac/ticket/1574)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cursor associated with connection pool connections (i.e. _CursorFairy) now
    proxies __iter__() to the underlying cursor correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1632](https://www.sqlalchemy.org/trac/ticket/1632)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types now support an “affinity comparison” operation, i.e. that an Integer/SmallInteger
    are “compatible”, or a Text/String, PickleType/Binary, etc. Part of.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug preventing alias() of an alias() from being cloned or adapted (occurs
    frequently in ORM operations).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1641](https://www.sqlalchemy.org/trac/ticket/1641)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reflecting the DOUBLE PRECISION type, via a new postgres.PGDoublePrecision
    object. This is postgresql.DOUBLE_PRECISION in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1085](https://www.sqlalchemy.org/trac/ticket/1085)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reflecting the INTERVAL YEAR TO MONTH and INTERVAL DAY TO
    SECOND syntaxes of the INTERVAL type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the “has_sequence” query to take current schema, or explicit sequence-stated
    schema, into account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1576](https://www.sqlalchemy.org/trac/ticket/1576)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the behavior of extract() to apply operator precedence rules to the “::”
    operator when applying the “timestamp” cast - ensures proper parenthesization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1611](https://www.sqlalchemy.org/trac/ticket/1611)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlite dialect properly generates CREATE INDEX for a table that is in an alternate
    schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1439](https://www.sqlalchemy.org/trac/ticket/1439)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the name of TrustedConnection to Trusted_Connection when constructing
    pyodbc connect arguments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1561](https://www.sqlalchemy.org/trac/ticket/1561)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “table_names” dialect function, used by MetaData .reflect(), omits “index
    overflow tables”, a system table generated by Oracle when “index only tables”
    with overflow are used. These tables aren’t accessible via SQL and can’t be reflected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1637](https://www.sqlalchemy.org/trac/ticket/1637)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A column can be added to a joined-table declarative superclass after the class
    has been constructed (i.e. via class-level attribute assignment), and the column
    will be propagated down to subclasses. This is the reverse situation as that of,
    fixed in 0.5.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a slight inaccuracy in the sharding example. Comparing equivalence of
    columns in the ORM is best accomplished using col1.shares_lineage(col2).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1491](https://www.sqlalchemy.org/trac/ticket/1491)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed unused load() method from ShardedQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1606](https://www.sqlalchemy.org/trac/ticket/1606)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() now works with the automatically generated subquery that results
    when you say “query(Parent).join(Parent.somejoinedsubclass)”, i.e. when Parent
    joins to a joined-table-inheritance subclass. Previously contains_eager() would
    erroneously add the subclass table to the query separately producing a cartesian
    product. An example is in the ticket description.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1543](https://www.sqlalchemy.org/trac/ticket/1543)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.options() now only propagate to loaded objects for potential further sub-loads
    only for options where such behavior is relevant, keeping various unserializable
    options like those generated by contains_eager() out of individual instance states.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1553](https://www.sqlalchemy.org/trac/ticket/1553)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.execute() now locates table- and mapper-specific binds based on a passed
    in expression which is an insert()/update()/delete() construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1054](https://www.sqlalchemy.org/trac/ticket/1054)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.merge() now properly overwrites a many-to-one or uselist=False attribute
    to None if the attribute is also None in the given object to be merged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a needless select which would occur when merging transient objects that
    contained a null primary key identifier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1618](https://www.sqlalchemy.org/trac/ticket/1618)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutable collection passed to the “extension” attribute of relation(), column_property()
    etc. will not be mutated or shared among multiple instrumentation calls, preventing
    duplicate extensions, such as backref populators, from being inserted into the
    list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1585](https://www.sqlalchemy.org/trac/ticket/1585)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the call to get_committed_value() on CompositeProperty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1504](https://www.sqlalchemy.org/trac/ticket/1504)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where Query would crash if a join() with no clear “left” side were
    called when a non-mapped column entity appeared in the columns list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1602](https://www.sqlalchemy.org/trac/ticket/1602)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby composite columns wouldn’t load properly when configured on
    a joined-table subclass, introduced in version 0.5.6 as a result of the fix for.
    thx to Scott Torborg.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “use get” behavior of many-to-one relations, i.e. that a lazy load will
    fallback to the possibly cached query.get() value, now works across join conditions
    where the two compared types are not exactly the same class, but share the same
    “affinity” - i.e. Integer and SmallInteger. Also allows combinations of reflected
    and non-reflected types to work with 0.5 style type reflection, such as PGText/Text
    (note 0.6 reflects types as their generic versions).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in query.update() when passing Cls.attribute as keys in the value
    dict and using synchronize_session=’expire’ (‘fetch’ in 0.6).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1436](https://www.sqlalchemy.org/trac/ticket/1436)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in two-phase transaction whereby commit() method didn’t set the full
    state which allows subsequent close() call to succeed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1603](https://www.sqlalchemy.org/trac/ticket/1603)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the “numeric” paramstyle, which apparently is the default paramstyle used
    by Informixdb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat expressions in the columns clause of a select are deduped based on the
    identity of each clause element, not the actual string. This allows positional
    elements to render correctly even if they all render identically, such as “qmark”
    style bind parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1574](https://www.sqlalchemy.org/trac/ticket/1574)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cursor associated with connection pool connections (i.e. _CursorFairy) now
    proxies __iter__() to the underlying cursor correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1632](https://www.sqlalchemy.org/trac/ticket/1632)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types now support an “affinity comparison” operation, i.e. that an Integer/SmallInteger
    are “compatible”, or a Text/String, PickleType/Binary, etc. Part of.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug preventing alias() of an alias() from being cloned or adapted (occurs
    frequently in ORM operations).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1641](https://www.sqlalchemy.org/trac/ticket/1641)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reflecting the DOUBLE PRECISION type, via a new postgres.PGDoublePrecision
    object. This is postgresql.DOUBLE_PRECISION in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1085](https://www.sqlalchemy.org/trac/ticket/1085)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reflecting the INTERVAL YEAR TO MONTH and INTERVAL DAY TO
    SECOND syntaxes of the INTERVAL type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the “has_sequence” query to take current schema, or explicit sequence-stated
    schema, into account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1576](https://www.sqlalchemy.org/trac/ticket/1576)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the behavior of extract() to apply operator precedence rules to the “::”
    operator when applying the “timestamp” cast - ensures proper parenthesization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1611](https://www.sqlalchemy.org/trac/ticket/1611)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlite dialect properly generates CREATE INDEX for a table that is in an alternate
    schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1439](https://www.sqlalchemy.org/trac/ticket/1439)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the name of TrustedConnection to Trusted_Connection when constructing
    pyodbc connect arguments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1561](https://www.sqlalchemy.org/trac/ticket/1561)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “table_names” dialect function, used by MetaData .reflect(), omits “index
    overflow tables”, a system table generated by Oracle when “index only tables”
    with overflow are used. These tables aren’t accessible via SQL and can’t be reflected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1637](https://www.sqlalchemy.org/trac/ticket/1637)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A column can be added to a joined-table declarative superclass after the class
    has been constructed (i.e. via class-level attribute assignment), and the column
    will be propagated down to subclasses. This is the reverse situation as that of,
    fixed in 0.5.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a slight inaccuracy in the sharding example. Comparing equivalence of
    columns in the ORM is best accomplished using col1.shares_lineage(col2).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1491](https://www.sqlalchemy.org/trac/ticket/1491)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed unused load() method from ShardedQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1606](https://www.sqlalchemy.org/trac/ticket/1606)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Sep 12 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby inheritance discriminator part of a composite primary key
    would fail on updates. Continuation of.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which disallowed one side of a many-to-many bidirectional reference
    to declare itself as “viewonly”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1507](https://www.sqlalchemy.org/trac/ticket/1507)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an assertion that prevents a @validates function or other AttributeExtension
    from loading an unloaded collection such that internal state may be corrupted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1526](https://www.sqlalchemy.org/trac/ticket/1526)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which prevented two entities from mutually replacing each other’s
    primary key values within a single flush() for some orderings of operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1519](https://www.sqlalchemy.org/trac/ticket/1519)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an obscure issue whereby a joined-table subclass with a self-referential
    eager load on the base class would populate the related object’s “subclass” table
    with data from the “subclass” table of the parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1485](https://www.sqlalchemy.org/trac/ticket/1485)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relations() now have greater ability to be “overridden”, meaning a subclass
    that explicitly specifies a relation() overriding that of the parent class will
    be honored during a flush. This is currently to support many-to-many relations
    from concrete inheritance setups. Outside of that use case, YMMV.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1477](https://www.sqlalchemy.org/trac/ticket/1477)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squeezed a few more unnecessary “lazy loads” out of relation(). When a collection
    is mutated, many-to-one backrefs on the other side will not fire off to load the
    “old” value, unless “single_parent=True” is set. A direct assignment of a many-to-one
    still loads the “old” value in order to update backref collections on that value,
    which may be present in the session already, thus maintaining the 0.5 behavioral
    contract.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1483](https://www.sqlalchemy.org/trac/ticket/1483)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby a load/refresh of joined table inheritance attributes which
    were based on column_property() or similar would fail to evaluate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for MapperProperty objects overriding that of an inherited
    mapper for non-concrete inheritance setups - attribute extensions won’t randomly
    collide with each other.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1488](https://www.sqlalchemy.org/trac/ticket/1488)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPDATE and DELETE do not support ORDER BY, LIMIT, OFFSET, etc. in standard SQL.
    Query.update() and Query.delete() now raise an exception if any of limit(), offset(),
    order_by(), group_by(), or distinct() have been called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1487](https://www.sqlalchemy.org/trac/ticket/1487)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added AttributeExtension to sqlalchemy.orm.__all__
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved error message when query() is called with a non-SQL /entity expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1476](https://www.sqlalchemy.org/trac/ticket/1476)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using False or 0 as a polymorphic discriminator now works on the base class
    as well as a subclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1440](https://www.sqlalchemy.org/trac/ticket/1440)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added enable_assertions(False) to Query which disables the usual assertions
    for expected state - used by Query subclasses to engineer custom state.. See [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    for an example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1424](https://www.sqlalchemy.org/trac/ticket/1424)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed recursion issue which occurred if a mapped object’s __len__() or __nonzero__()
    method resulted in state changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1501](https://www.sqlalchemy.org/trac/ticket/1501)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed incorrect exception raise in Weak/StrongIdentityMap.add()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1506](https://www.sqlalchemy.org/trac/ticket/1506)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the error message for “could not find a FROM clause” in query.join() which
    would fail to issue correctly if the query was against a pure SQL construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1522](https://www.sqlalchemy.org/trac/ticket/1522)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a somewhat hypothetical issue which would result in the wrong primary
    key being calculated for a mapper using the old polymorphic_union function - but
    this is old stuff.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1486](https://www.sqlalchemy.org/trac/ticket/1486)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed column.copy() to copy defaults and onupdates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1373](https://www.sqlalchemy.org/trac/ticket/1373)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in extract() introduced in 0.5.4 whereby the string “field” argument
    was getting treated as a ClauseElement, causing various errors within more complex
    SQL transformations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unary expressions such as DISTINCT propagate their type handling to result sets,
    allowing conversions like unicode and such to take place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1420](https://www.sqlalchemy.org/trac/ticket/1420)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in Table and Column whereby passing empty dict for “info” argument
    would raise an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1482](https://www.sqlalchemy.org/trac/ticket/1482)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backported 0.6 fix for Oracle alias names not getting truncated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collection proxies produced by associationproxy are now pickleable. A user-defined
    proxy_factory however is still not pickleable unless it defines __getstate__ and
    __setstate__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1446](https://www.sqlalchemy.org/trac/ticket/1446)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will raise an informative exception if __table_args__ is passed
    as a tuple with no dict argument. Improved documentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table objects declared in the MetaData can now be used in string expressions
    sent to primaryjoin/secondaryjoin/ secondary - the name is pulled from the MetaData
    of the declarative base.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1527](https://www.sqlalchemy.org/trac/ticket/1527)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A column can be added to a joined-table subclass after the class has been constructed
    (i.e. via class-level attribute assignment). The column is added to the underlying
    Table as always, but now the mapper will rebuild its “join” to include the new
    column, instead of raising an error about “no such column, use column_property()
    instead”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[test]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added examples into the test suite so they get exercised regularly and cleaned
    up a couple deprecation warnings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby inheritance discriminator part of a composite primary key
    would fail on updates. Continuation of.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which disallowed one side of a many-to-many bidirectional reference
    to declare itself as “viewonly”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1507](https://www.sqlalchemy.org/trac/ticket/1507)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an assertion that prevents a @validates function or other AttributeExtension
    from loading an unloaded collection such that internal state may be corrupted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1526](https://www.sqlalchemy.org/trac/ticket/1526)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which prevented two entities from mutually replacing each other’s
    primary key values within a single flush() for some orderings of operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1519](https://www.sqlalchemy.org/trac/ticket/1519)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an obscure issue whereby a joined-table subclass with a self-referential
    eager load on the base class would populate the related object’s “subclass” table
    with data from the “subclass” table of the parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1485](https://www.sqlalchemy.org/trac/ticket/1485)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relations() now have greater ability to be “overridden”, meaning a subclass
    that explicitly specifies a relation() overriding that of the parent class will
    be honored during a flush. This is currently to support many-to-many relations
    from concrete inheritance setups. Outside of that use case, YMMV.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1477](https://www.sqlalchemy.org/trac/ticket/1477)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squeezed a few more unnecessary “lazy loads” out of relation(). When a collection
    is mutated, many-to-one backrefs on the other side will not fire off to load the
    “old” value, unless “single_parent=True” is set. A direct assignment of a many-to-one
    still loads the “old” value in order to update backref collections on that value,
    which may be present in the session already, thus maintaining the 0.5 behavioral
    contract.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1483](https://www.sqlalchemy.org/trac/ticket/1483)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby a load/refresh of joined table inheritance attributes which
    were based on column_property() or similar would fail to evaluate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for MapperProperty objects overriding that of an inherited
    mapper for non-concrete inheritance setups - attribute extensions won’t randomly
    collide with each other.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1488](https://www.sqlalchemy.org/trac/ticket/1488)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPDATE and DELETE do not support ORDER BY, LIMIT, OFFSET, etc. in standard SQL.
    Query.update() and Query.delete() now raise an exception if any of limit(), offset(),
    order_by(), group_by(), or distinct() have been called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1487](https://www.sqlalchemy.org/trac/ticket/1487)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added AttributeExtension to sqlalchemy.orm.__all__
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved error message when query() is called with a non-SQL /entity expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1476](https://www.sqlalchemy.org/trac/ticket/1476)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using False or 0 as a polymorphic discriminator now works on the base class
    as well as a subclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1440](https://www.sqlalchemy.org/trac/ticket/1440)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added enable_assertions(False) to Query which disables the usual assertions
    for expected state - used by Query subclasses to engineer custom state.. See [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    for an example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1424](https://www.sqlalchemy.org/trac/ticket/1424)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed recursion issue which occurred if a mapped object’s __len__() or __nonzero__()
    method resulted in state changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1501](https://www.sqlalchemy.org/trac/ticket/1501)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed incorrect exception raise in Weak/StrongIdentityMap.add()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1506](https://www.sqlalchemy.org/trac/ticket/1506)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the error message for “could not find a FROM clause” in query.join() which
    would fail to issue correctly if the query was against a pure SQL construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1522](https://www.sqlalchemy.org/trac/ticket/1522)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a somewhat hypothetical issue which would result in the wrong primary
    key being calculated for a mapper using the old polymorphic_union function - but
    this is old stuff.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1486](https://www.sqlalchemy.org/trac/ticket/1486)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed column.copy() to copy defaults and onupdates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1373](https://www.sqlalchemy.org/trac/ticket/1373)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in extract() introduced in 0.5.4 whereby the string “field” argument
    was getting treated as a ClauseElement, causing various errors within more complex
    SQL transformations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unary expressions such as DISTINCT propagate their type handling to result sets,
    allowing conversions like unicode and such to take place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1420](https://www.sqlalchemy.org/trac/ticket/1420)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in Table and Column whereby passing empty dict for “info” argument
    would raise an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1482](https://www.sqlalchemy.org/trac/ticket/1482)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backported 0.6 fix for Oracle alias names not getting truncated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collection proxies produced by associationproxy are now pickleable. A user-defined
    proxy_factory however is still not pickleable unless it defines __getstate__ and
    __setstate__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1446](https://www.sqlalchemy.org/trac/ticket/1446)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will raise an informative exception if __table_args__ is passed
    as a tuple with no dict argument. Improved documentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table objects declared in the MetaData can now be used in string expressions
    sent to primaryjoin/secondaryjoin/ secondary - the name is pulled from the MetaData
    of the declarative base.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1527](https://www.sqlalchemy.org/trac/ticket/1527)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A column can be added to a joined-table subclass after the class has been constructed
    (i.e. via class-level attribute assignment). The column is added to the underlying
    Table as always, but now the mapper will rebuild its “join” to include the new
    column, instead of raising an error about “no such column, use column_property()
    instead”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[test]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added examples into the test suite so they get exercised regularly and cleaned
    up a couple deprecation warnings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Jul 13 2009'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests have been migrated from unittest to nose. See README.unittests for
    information on how to run the tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#970](https://www.sqlalchemy.org/trac/ticket/970)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “foreign_keys” argument of relation() will now propagate automatically to
    the backref in the same way that primaryjoin and secondaryjoin do. For the extremely
    rare use case where the backref of a relation() has intentionally different “foreign_keys”
    configured, both sides now need to be configured explicitly (if they do in fact
    require this setting, see the next note…).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …the only known (and really, really rare) use case where a different foreign_keys
    setting was used on the forwards/backwards side, a composite foreign key that
    partially points to its own columns, has been enhanced such that the fk->itself
    aspect of the relation won’t be used to determine relation direction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.mapper is now *deprecated*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Call session.add() if you’d like a free-standing object to be part of your session.
    Otherwise, a DIY version of Session.mapper is now documented at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    The method will remain deprecated throughout 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Query being able to join() from individual columns of a joined-table subclass
    entity, i.e. query(SubClass.foo, SubClass.bar).join(<anything>). In most cases,
    an error “Could not find a FROM clause to join from” would be raised. In a few
    others, the result would be returned in terms of the base class rather than the
    subclass - so applications which relied on this erroneous result need to be adjusted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1431](https://www.sqlalchemy.org/trac/ticket/1431)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug involving contains_eager(), which would apply itself to a secondary
    (i.e. lazy) load in a particular rare case, producing cartesian products. improved
    the targeting of query.options() on secondary loads overall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1461](https://www.sqlalchemy.org/trac/ticket/1461)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug introduced in 0.5.4 whereby Composite types fail when default-holding
    columns are flushed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed another 0.5.4 bug whereby mutable attributes (i.e. PickleType) wouldn’t
    be deserialized correctly when the whole object was serialized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1426](https://www.sqlalchemy.org/trac/ticket/1426)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby session.is_modified() would raise an exception if any synonyms
    were in use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed potential memory leak whereby previously pickled objects placed back in
    a session would not be fully garbage collected unless the Session were explicitly
    closed out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby list-based attributes, like pickletype and PGArray, failed
    to be merged() properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired non-working attributes.set_committed_value function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trimmed the pickle format for InstanceState which should further reduce the
    memory footprint of pickled instances. The format should be backwards compatible
    with that of 0.5.4 and previous.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.orm.join and sqlalchemy.orm.outerjoin are now added to __all__ in
    sqlalchemy.orm.*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1463](https://www.sqlalchemy.org/trac/ticket/1463)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where Query exception raise would fail when a too-short composite
    primary key value were passed to get().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1458](https://www.sqlalchemy.org/trac/ticket/1458)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed an obscure feature of execute() (including connection, engine, Session)
    whereby a bindparam() construct can be sent as a key to the params dictionary.
    This usage is undocumented and is at the core of an issue whereby the bindparam()
    object created implicitly by a text() construct may have the same hash value as
    a string placed in the params dictionary and may result in an inappropriate match
    when computing the final bind parameters. Internal checks for this condition would
    add significant latency to the critical task of parameter rendering, so the behavior
    is removed. This is a backwards incompatible change for any application that may
    have been using this feature, however the feature has never been documented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented recreate() for StaticPool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests have been migrated from unittest to nose. See README.unittests for
    information on how to run the tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#970](https://www.sqlalchemy.org/trac/ticket/970)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “foreign_keys” argument of relation() will now propagate automatically to
    the backref in the same way that primaryjoin and secondaryjoin do. For the extremely
    rare use case where the backref of a relation() has intentionally different “foreign_keys”
    configured, both sides now need to be configured explicitly (if they do in fact
    require this setting, see the next note…).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …the only known (and really, really rare) use case where a different foreign_keys
    setting was used on the forwards/backwards side, a composite foreign key that
    partially points to its own columns, has been enhanced such that the fk->itself
    aspect of the relation won’t be used to determine relation direction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.mapper is now *deprecated*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Call session.add() if you’d like a free-standing object to be part of your session.
    Otherwise, a DIY version of Session.mapper is now documented at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    The method will remain deprecated throughout 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Query being able to join() from individual columns of a joined-table subclass
    entity, i.e. query(SubClass.foo, SubClass.bar).join(<anything>). In most cases,
    an error “Could not find a FROM clause to join from” would be raised. In a few
    others, the result would be returned in terms of the base class rather than the
    subclass - so applications which relied on this erroneous result need to be adjusted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1431](https://www.sqlalchemy.org/trac/ticket/1431)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug involving contains_eager(), which would apply itself to a secondary
    (i.e. lazy) load in a particular rare case, producing cartesian products. improved
    the targeting of query.options() on secondary loads overall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1461](https://www.sqlalchemy.org/trac/ticket/1461)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug introduced in 0.5.4 whereby Composite types fail when default-holding
    columns are flushed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed another 0.5.4 bug whereby mutable attributes (i.e. PickleType) wouldn’t
    be deserialized correctly when the whole object was serialized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1426](https://www.sqlalchemy.org/trac/ticket/1426)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby session.is_modified() would raise an exception if any synonyms
    were in use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed potential memory leak whereby previously pickled objects placed back in
    a session would not be fully garbage collected unless the Session were explicitly
    closed out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby list-based attributes, like pickletype and PGArray, failed
    to be merged() properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired non-working attributes.set_committed_value function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trimmed the pickle format for InstanceState which should further reduce the
    memory footprint of pickled instances. The format should be backwards compatible
    with that of 0.5.4 and previous.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.orm.join and sqlalchemy.orm.outerjoin are now added to __all__ in
    sqlalchemy.orm.*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1463](https://www.sqlalchemy.org/trac/ticket/1463)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where Query exception raise would fail when a too-short composite
    primary key value were passed to get().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1458](https://www.sqlalchemy.org/trac/ticket/1458)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed an obscure feature of execute() (including connection, engine, Session)
    whereby a bindparam() construct can be sent as a key to the params dictionary.
    This usage is undocumented and is at the core of an issue whereby the bindparam()
    object created implicitly by a text() construct may have the same hash value as
    a string placed in the params dictionary and may result in an inappropriate match
    when computing the final bind parameters. Internal checks for this condition would
    add significant latency to the critical task of parameter rendering, so the behavior
    is removed. This is a backwards incompatible change for any application that may
    have been using this feature, however the feature has never been documented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented recreate() for StaticPool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.4p2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue May 26 2009'
  prefs: []
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired the printing of SQL exceptions which are not based on parameters or
    are not executemany() style.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated the hardcoded TIMESTAMP function, which when used as func.TIMESTAMP(value)
    would render “TIMESTAMP value”. This breaks on some platforms as PostgreSQL doesn’t
    allow bind parameters to be used in this context. The hard-coded uppercase is
    also inappropriate and there’s lots of other PG casts that we’d need to support.
    So instead, use text constructs i.e. select([“timestamp ‘12/05/09’”]).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired the printing of SQL exceptions which are not based on parameters or
    are not executemany() style.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated the hardcoded TIMESTAMP function, which when used as func.TIMESTAMP(value)
    would render “TIMESTAMP value”. This breaks on some platforms as PostgreSQL doesn’t
    allow bind parameters to be used in this context. The hard-coded uppercase is
    also inappropriate and there’s lots of other PG casts that we’d need to support.
    So instead, use text constructs i.e. select([“timestamp ‘12/05/09’”]).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.4p1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon May 18 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an attribute error introduced in 0.5.4 which would occur when merge()
    was used with an incomplete object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an attribute error introduced in 0.5.4 which would occur when merge()
    was used with an incomplete object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sun May 17 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Significant performance enhancements regarding Sessions/flush() in conjunction
    with large mapper graphs, large numbers of objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Removed all* O(N) scanning behavior from the flush() process, i.e. operations
    that were scanning the full session, including an extremely expensive one that
    was erroneously assuming primary key values were changing when this was not the
    case.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: one edge case remains which may invoke a full scan, if an existing primary key
    attribute is modified to a new value.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Session’s “weak referencing” behavior is now *full* - no strong references
    whatsoever are made to a mapped object or related items/collections in its __dict__.
    Backrefs and other cycles in objects no longer affect the Session’s ability to
    lose all references to unmodified objects. Objects with pending changes still
    are maintained strongly until flush.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation also improves performance by moving the “resurrection” process
    of garbage collected items to only be relevant for mappings that map “mutable”
    attributes (i.e. PickleType, composite attrs). This removes overhead from the
    gc process and simplifies internal behavior.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If a “mutable” attribute change is the sole change on an object which is then
    dereferenced, the mapper will not have access to other attribute state when the
    UPDATE is issued. This may present itself differently to some MapperExtensions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The change also affects the internal attribute API, but not the AttributeExtension
    interface nor any of the publicly documented attribute functions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The unit of work no longer generates a graph of “dependency” processors for
    the full graph of mappers during flush(), instead creating such processors only
    for those mappers which represent objects with pending changes. This saves a tremendous
    number of method calls in the context of a large interconnected graph of mappers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cached a wasteful “table sort” operation that previously occurred multiple times
    per flush, also removing significant method call count from flush().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other redundant behaviors have been simplified in mapper._save_obj().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#1398](https://www.sqlalchemy.org/trac/ticket/1398)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified query_cls on DynamicAttributeImpl to accept a full mixin version of
    the AppenderQuery, which allows subclassing the AppenderMixin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “polymorphic discriminator” column may be part of a primary key, and it
    will be populated with the correct discriminator value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the evaluator not being able to evaluate IS NULL clauses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the “set collection” function on “dynamic” relations to initiate events
    correctly. Previously a collection could only be assigned to a pending parent
    instance, otherwise modified events would not be fired correctly. Set collection
    is now compatible with merge(), fixes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1352](https://www.sqlalchemy.org/trac/ticket/1352)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowed pickling of PropertyOption objects constructed with instrumented descriptors;
    previously, pickle errors would occur when pickling an object which was loaded
    with a descriptor-based option, such as query.options(eagerload(MyClass.foo)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loader will not use get() if the “lazy load” SQL clause matches the clause
    used by get(), but contains some parameters hardcoded. Previously the lazy strategy
    would fail with the get(). Ideally get() would be used with the hardcoded parameters
    but this would require further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1357](https://www.sqlalchemy.org/trac/ticket/1357)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MapperOptions and other state associated with query.options() is no longer bundled
    within callables associated with each lazy/deferred-loading attribute during a
    load. The options are now associated with the instance’s state object just once
    when it’s populated. This removes the need in most cases for per-instance/attribute
    loader objects, improving load speed and memory overhead for individual instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1391](https://www.sqlalchemy.org/trac/ticket/1391)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed another location where autoflush was interfering with session.merge().
    autoflush is disabled completely for the duration of merge() now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1360](https://www.sqlalchemy.org/trac/ticket/1360)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which prevented “mutable primary key” dependency logic from functioning
    properly on a one-to-one relation().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1406](https://www.sqlalchemy.org/trac/ticket/1406)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in relation(), introduced in 0.5.3, whereby a self referential relation
    from a base class to a joined-table subclass would not configure correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed obscure mapper compilation issue when inheriting mappers are used which
    would result in un-initialized attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed documentation for session weak_identity_map - the default value is True,
    indicating a weak referencing map in use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a unit of work issue whereby the foreign key attribute on an item contained
    within a collection owned by an object being deleted would not be set to None
    if the relation() was self-referential.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1376](https://www.sqlalchemy.org/trac/ticket/1376)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Query.update() and Query.delete() failures with eagerloaded relations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1378](https://www.sqlalchemy.org/trac/ticket/1378)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is now an error to specify both columns of a binary primaryjoin condition
    in the foreign_keys or remote_side collection. Whereas previously it was just
    nonsensical, but would succeed in a non-deterministic way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back-ported the “compiler” extension from SQLA 0.6\. This is a standardized
    interface which allows the creation of custom ClauseElement subclasses and compilers.
    In particular it’s handy as an alternative to text() when you’d like to build
    a construct that has database-specific compilations. See the extension docs for
    details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exception messages are truncated when the list of bound parameters is larger
    than 10, preventing enormous multi-page exceptions from filling up screens and
    logfiles for large executemany() statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1413](https://www.sqlalchemy.org/trac/ticket/1413)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlalchemy.extract()` is now dialect sensitive and can extract components
    of timestamps idiomatically across the supported databases, including SQLite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed __repr__() and other _get_colspec() methods on ForeignKey constructed
    from __clause_element__() style construct (i.e. declarative columns).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1353](https://www.sqlalchemy.org/trac/ticket/1353)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema] [1341] [ticket: 594]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a quote_schema() method to the IdentifierPreparer class so that dialects
    can override how schemas get handled. This enables the MSSQL dialect to treat
    schemas as multipart identifiers, such as ‘database.owner’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed adding of deferred or other column properties to a declarative class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1379](https://www.sqlalchemy.org/trac/ticket/1379)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflecting a FOREIGN KEY construct will take into account a dotted schema.tablename
    combination, if the foreign key references a table in a remote schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1405](https://www.sqlalchemy.org/trac/ticket/1405)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the SLBoolean type so that it properly treats only 1 as True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1402](https://www.sqlalchemy.org/trac/ticket/1402)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the float type so that it correctly maps to a SLFloat type when being
    reflected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1273](https://www.sqlalchemy.org/trac/ticket/1273)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified how savepoint logic works to prevent it from stepping on non-savepoint
    oriented routines. Savepoint support is still very experimental.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in reserved words for MSSQL that covers version 2008 and all prior versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1310](https://www.sqlalchemy.org/trac/ticket/1310)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with information schema not working with a binary collation
    based database. Cleaned up information schema since it is only used by mssql now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1343](https://www.sqlalchemy.org/trac/ticket/1343)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Significant performance enhancements regarding Sessions/flush() in conjunction
    with large mapper graphs, large numbers of objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Removed all* O(N) scanning behavior from the flush() process, i.e. operations
    that were scanning the full session, including an extremely expensive one that
    was erroneously assuming primary key values were changing when this was not the
    case.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: one edge case remains which may invoke a full scan, if an existing primary key
    attribute is modified to a new value.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Session’s “weak referencing” behavior is now *full* - no strong references
    whatsoever are made to a mapped object or related items/collections in its __dict__.
    Backrefs and other cycles in objects no longer affect the Session’s ability to
    lose all references to unmodified objects. Objects with pending changes still
    are maintained strongly until flush.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation also improves performance by moving the “resurrection” process
    of garbage collected items to only be relevant for mappings that map “mutable”
    attributes (i.e. PickleType, composite attrs). This removes overhead from the
    gc process and simplifies internal behavior.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If a “mutable” attribute change is the sole change on an object which is then
    dereferenced, the mapper will not have access to other attribute state when the
    UPDATE is issued. This may present itself differently to some MapperExtensions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The change also affects the internal attribute API, but not the AttributeExtension
    interface nor any of the publicly documented attribute functions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The unit of work no longer generates a graph of “dependency” processors for
    the full graph of mappers during flush(), instead creating such processors only
    for those mappers which represent objects with pending changes. This saves a tremendous
    number of method calls in the context of a large interconnected graph of mappers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cached a wasteful “table sort” operation that previously occurred multiple times
    per flush, also removing significant method call count from flush().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other redundant behaviors have been simplified in mapper._save_obj().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References: [#1398](https://www.sqlalchemy.org/trac/ticket/1398)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified query_cls on DynamicAttributeImpl to accept a full mixin version of
    the AppenderQuery, which allows subclassing the AppenderMixin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “polymorphic discriminator” column may be part of a primary key, and it
    will be populated with the correct discriminator value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the evaluator not being able to evaluate IS NULL clauses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the “set collection” function on “dynamic” relations to initiate events
    correctly. Previously a collection could only be assigned to a pending parent
    instance, otherwise modified events would not be fired correctly. Set collection
    is now compatible with merge(), fixes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1352](https://www.sqlalchemy.org/trac/ticket/1352)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowed pickling of PropertyOption objects constructed with instrumented descriptors;
    previously, pickle errors would occur when pickling an object which was loaded
    with a descriptor-based option, such as query.options(eagerload(MyClass.foo)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loader will not use get() if the “lazy load” SQL clause matches the clause
    used by get(), but contains some parameters hardcoded. Previously the lazy strategy
    would fail with the get(). Ideally get() would be used with the hardcoded parameters
    but this would require further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1357](https://www.sqlalchemy.org/trac/ticket/1357)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MapperOptions and other state associated with query.options() is no longer bundled
    within callables associated with each lazy/deferred-loading attribute during a
    load. The options are now associated with the instance’s state object just once
    when it’s populated. This removes the need in most cases for per-instance/attribute
    loader objects, improving load speed and memory overhead for individual instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1391](https://www.sqlalchemy.org/trac/ticket/1391)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed another location where autoflush was interfering with session.merge().
    autoflush is disabled completely for the duration of merge() now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1360](https://www.sqlalchemy.org/trac/ticket/1360)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which prevented “mutable primary key” dependency logic from functioning
    properly on a one-to-one relation().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1406](https://www.sqlalchemy.org/trac/ticket/1406)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in relation(), introduced in 0.5.3, whereby a self referential relation
    from a base class to a joined-table subclass would not configure correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed obscure mapper compilation issue when inheriting mappers are used which
    would result in un-initialized attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed documentation for session weak_identity_map - the default value is True,
    indicating a weak referencing map in use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a unit of work issue whereby the foreign key attribute on an item contained
    within a collection owned by an object being deleted would not be set to None
    if the relation() was self-referential.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1376](https://www.sqlalchemy.org/trac/ticket/1376)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Query.update() and Query.delete() failures with eagerloaded relations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1378](https://www.sqlalchemy.org/trac/ticket/1378)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is now an error to specify both columns of a binary primaryjoin condition
    in the foreign_keys or remote_side collection. Whereas previously it was just
    nonsensical, but would succeed in a non-deterministic way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back-ported the “compiler” extension from SQLA 0.6\. This is a standardized
    interface which allows the creation of custom ClauseElement subclasses and compilers.
    In particular it’s handy as an alternative to text() when you’d like to build
    a construct that has database-specific compilations. See the extension docs for
    details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exception messages are truncated when the list of bound parameters is larger
    than 10, preventing enormous multi-page exceptions from filling up screens and
    logfiles for large executemany() statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1413](https://www.sqlalchemy.org/trac/ticket/1413)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlalchemy.extract()` is now dialect sensitive and can extract components
    of timestamps idiomatically across the supported databases, including SQLite.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed __repr__() and other _get_colspec() methods on ForeignKey constructed
    from __clause_element__() style construct (i.e. declarative columns).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1353](https://www.sqlalchemy.org/trac/ticket/1353)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema] [1341] [ticket: 594]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a quote_schema() method to the IdentifierPreparer class so that dialects
    can override how schemas get handled. This enables the MSSQL dialect to treat
    schemas as multipart identifiers, such as ‘database.owner’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed adding of deferred or other column properties to a declarative class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1379](https://www.sqlalchemy.org/trac/ticket/1379)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflecting a FOREIGN KEY construct will take into account a dotted schema.tablename
    combination, if the foreign key references a table in a remote schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1405](https://www.sqlalchemy.org/trac/ticket/1405)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the SLBoolean type so that it properly treats only 1 as True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1402](https://www.sqlalchemy.org/trac/ticket/1402)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the float type so that it correctly maps to a SLFloat type when being
    reflected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1273](https://www.sqlalchemy.org/trac/ticket/1273)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified how savepoint logic works to prevent it from stepping on non-savepoint
    oriented routines. Savepoint support is still very experimental.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in reserved words for MSSQL that covers version 2008 and all prior versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1310](https://www.sqlalchemy.org/trac/ticket/1310)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with information schema not working with a binary collation
    based database. Cleaned up information schema since it is only used by mssql now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1343](https://www.sqlalchemy.org/trac/ticket/1343)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Mar 24 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “objects” argument to session.flush() is deprecated. State which represents
    the linkage between a parent and child object does not support “flushed” status
    on one side of the link and not the other, so supporting this operation leads
    to misleading results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query now implements __clause_element__() which produces its selectable, which
    means a Query instance can be accepted in many SQL expressions, including col.in_(query),
    union(query1, query2), select([foo]).select_from(query), etc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.join() can now construct multiple FROM clauses, if needed. Such as, query(A,
    B).join(A.x).join(B.y) might say SELECT A.*, B.* FROM A JOIN X, B JOIN Y. Eager
    loading can also tack its joins onto those multiple FROM clauses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1337](https://www.sqlalchemy.org/trac/ticket/1337)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in dynamic_loader() where append/remove events after construction
    time were not being propagated to the UOW to pick up on flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1347](https://www.sqlalchemy.org/trac/ticket/1347)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where column_prefix wasn’t being checked before not mapping an attribute
    that already had class-level name present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a session.expire() on a particular collection attribute will clear any pending
    backref additions as well, so that the next access correctly returns only what
    was present in the database. Presents some degree of a workaround for, although
    we are considering removing the flush([objects]) feature altogether.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.scalar() now converts raw SQL strings to text() the same way Session.execute()
    does and accepts same alternative **kw args.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to the “determine direction” logic of relation() such that the
    direction of tricky situations like mapper(A.join(B)) -> relation-> mapper(B)
    can be determined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When flushing partial sets of objects using session.flush([somelist]), pending
    objects which remain pending after the operation won’t inadvertently be added
    as persistent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1306](https://www.sqlalchemy.org/trac/ticket/1306)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added “post_configure_attribute” method to InstrumentationManager, so that the
    “listen_for_events.py” example works again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1314](https://www.sqlalchemy.org/trac/ticket/1314)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a forward and complementing backwards reference which are both of the same direction,
    i.e. ONETOMANY or MANYTOONE, is now detected, and an error message is raised.
    Saves crazy CircularDependencyErrors later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bugs in Query regarding simultaneous selection of multiple joined-table
    inheritance entities with common base classes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previously the adaption applied to “B” on “A JOIN B” would be erroneously partially
    applied to “A”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons on relations (i.e. A.related==someb) were not getting adapted when
    they should.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other filterings, like query(A).join(A.bs).filter(B.foo==’bar’), were erroneously
    adapting “B.foo” as though it were an “A”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed adaptation of EXISTS clauses via any(), has(), etc. in conjunction with
    an aliased object on the left and of_type() on the right.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1325](https://www.sqlalchemy.org/trac/ticket/1325)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an attribute helper method `set_committed_value` in sqlalchemy.orm.attributes.
    Given an object, attribute name, and value, will set the value on the object as
    part of its “committed” state, i.e. state that is understood to have been loaded
    from the database. Helps with the creation of homegrown collection loaders and
    such.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query won’t fail with weakref error when a non-mapper/class instrumented descriptor
    is passed, raises “Invalid column expression”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.group_by() properly takes into account aliasing applied to the FROM clause,
    such as with select_from(), using with_polymorphic(), or using from_self().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An alias() of a select() will convert to a “scalar subquery” when used in an
    unambiguously scalar context, i.e. it’s used in a comparison operation. This applies
    to the ORM when using query.subquery() as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed missing _label attribute on Function object, others when used in a select()
    with use_labels (such as when used in an ORM column_property()).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1302](https://www.sqlalchemy.org/trac/ticket/1302)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: anonymous alias names now truncate down to the max length allowed by the dialect.
    More significant on DBs like Oracle with very small character limits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the __selectable__() interface has been replaced entirely by __clause_element__().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a recursive pickling issue in serializer, triggered by an EXISTS or other
    embedded FROM construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative locates the “inherits” class using a search through __bases__, to
    skip over mixins that are local to subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative figures out joined-table inheritance primary join condition even
    if “inherits” mapper argument is given explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will properly interpret the “foreign_keys” argument on a backref()
    if it’s a string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will accept a table-bound column as a property when used in conjunction
    with __table__, if the column is already present in __table__. The column will
    be remapped to the given key the same way as when added to the mapper() properties
    dict.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index reflection won’t fail when an index with multiple expressions is encountered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added PGUuid and PGBit types to sqlalchemy.databases.postgres.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refection of unknown PG types won’t crash when those types are specified within
    a domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preliminary support for pymssql 1.0.1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected issue on mssql where max_identifier_length was not being respected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “objects” argument to session.flush() is deprecated. State which represents
    the linkage between a parent and child object does not support “flushed” status
    on one side of the link and not the other, so supporting this operation leads
    to misleading results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query now implements __clause_element__() which produces its selectable, which
    means a Query instance can be accepted in many SQL expressions, including col.in_(query),
    union(query1, query2), select([foo]).select_from(query), etc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.join() can now construct multiple FROM clauses, if needed. Such as, query(A,
    B).join(A.x).join(B.y) might say SELECT A.*, B.* FROM A JOIN X, B JOIN Y. Eager
    loading can also tack its joins onto those multiple FROM clauses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1337](https://www.sqlalchemy.org/trac/ticket/1337)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in dynamic_loader() where append/remove events after construction
    time were not being propagated to the UOW to pick up on flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1347](https://www.sqlalchemy.org/trac/ticket/1347)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where column_prefix wasn’t being checked before not mapping an attribute
    that already had class-level name present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a session.expire() on a particular collection attribute will clear any pending
    backref additions as well, so that the next access correctly returns only what
    was present in the database. Presents some degree of a workaround for, although
    we are considering removing the flush([objects]) feature altogether.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.scalar() now converts raw SQL strings to text() the same way Session.execute()
    does and accepts same alternative **kw args.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improvements to the “determine direction” logic of relation() such that the
    direction of tricky situations like mapper(A.join(B)) -> relation-> mapper(B)
    can be determined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When flushing partial sets of objects using session.flush([somelist]), pending
    objects which remain pending after the operation won’t inadvertently be added
    as persistent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1306](https://www.sqlalchemy.org/trac/ticket/1306)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added “post_configure_attribute” method to InstrumentationManager, so that the
    “listen_for_events.py” example works again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1314](https://www.sqlalchemy.org/trac/ticket/1314)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a forward and complementing backwards reference which are both of the same direction,
    i.e. ONETOMANY or MANYTOONE, is now detected, and an error message is raised.
    Saves crazy CircularDependencyErrors later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bugs in Query regarding simultaneous selection of multiple joined-table
    inheritance entities with common base classes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previously the adaption applied to “B” on “A JOIN B” would be erroneously partially
    applied to “A”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: comparisons on relations (i.e. A.related==someb) were not getting adapted when
    they should.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other filterings, like query(A).join(A.bs).filter(B.foo==’bar’), were erroneously
    adapting “B.foo” as though it were an “A”.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed adaptation of EXISTS clauses via any(), has(), etc. in conjunction with
    an aliased object on the left and of_type() on the right.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1325](https://www.sqlalchemy.org/trac/ticket/1325)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an attribute helper method `set_committed_value` in sqlalchemy.orm.attributes.
    Given an object, attribute name, and value, will set the value on the object as
    part of its “committed” state, i.e. state that is understood to have been loaded
    from the database. Helps with the creation of homegrown collection loaders and
    such.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query won’t fail with weakref error when a non-mapper/class instrumented descriptor
    is passed, raises “Invalid column expression”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.group_by() properly takes into account aliasing applied to the FROM clause,
    such as with select_from(), using with_polymorphic(), or using from_self().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An alias() of a select() will convert to a “scalar subquery” when used in an
    unambiguously scalar context, i.e. it’s used in a comparison operation. This applies
    to the ORM when using query.subquery() as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed missing _label attribute on Function object, others when used in a select()
    with use_labels (such as when used in an ORM column_property()).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1302](https://www.sqlalchemy.org/trac/ticket/1302)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: anonymous alias names now truncate down to the max length allowed by the dialect.
    More significant on DBs like Oracle with very small character limits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the __selectable__() interface has been replaced entirely by __clause_element__().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a recursive pickling issue in serializer, triggered by an EXISTS or other
    embedded FROM construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative locates the “inherits” class using a search through __bases__, to
    skip over mixins that are local to subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative figures out joined-table inheritance primary join condition even
    if “inherits” mapper argument is given explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will properly interpret the “foreign_keys” argument on a backref()
    if it’s a string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative will accept a table-bound column as a property when used in conjunction
    with __table__, if the column is already present in __table__. The column will
    be remapped to the given key the same way as when added to the mapper() properties
    dict.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index reflection won’t fail when an index with multiple expressions is encountered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added PGUuid and PGBit types to sqlalchemy.databases.postgres.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgresql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refection of unknown PG types won’t crash when those types are specified within
    a domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preliminary support for pymssql 1.0.1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected issue on mssql where max_identifier_length was not being respected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jan 24 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Further refined 0.5.1’s warning about delete-orphan cascade placed on a many-to-many
    relation. First, the bad news: the warning will apply to both many-to-many as
    well as many-to-one relations. This is necessary since in both cases, SQLA does
    not scan the full set of potential parents when determining “orphan” status -
    for a persistent object it only detects an in-python de-association event to establish
    the object as an “orphan”. Next, the good news: to support one-to-one via a foreign
    key or association table, or to support one-to-many via an association table,
    a new flag single_parent=True may be set which indicates objects linked to the
    relation are only meant to have a single parent. The relation will raise an error
    if multiple parent-association events occur within Python.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted the attribute instrumentation change from 0.5.1 to fully establish
    instrumentation for subclasses where the mapper was created after the superclass
    had already been fully instrumented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1292](https://www.sqlalchemy.org/trac/ticket/1292)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in delete-orphan cascade whereby two one-to-one relations from two
    different parent classes to the same target class would prematurely expunge the
    instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an eager loading bug whereby self-referential eager loading would prevent
    other eager loads, self referential or not, from joining to the parent JOIN properly.
    Thanks to Alex K for creating a great test case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.expire() and related methods will not expire() unloaded deferred attributes.
    This prevents them from being needlessly loaded when the instance is refreshed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.join()/outerjoin() will now properly join an aliased() construct to the
    existing left side, even if query.from_self() or query.select_from(someselectable)
    has been called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1293](https://www.sqlalchemy.org/trac/ticket/1293)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further fixes to the “percent signs and spaces in column/table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: names” functionality.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1284](https://www.sqlalchemy.org/trac/ticket/1284)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored convert_unicode handling. Results were being passed on through without
    conversion.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1291](https://www.sqlalchemy.org/trac/ticket/1291)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Really fixing the decimal handling this time..
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1282](https://www.sqlalchemy.org/trac/ticket/1282)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql] [Ticket:1289]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified table reflection code to use only kwargs when constructing tables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Further refined 0.5.1’s warning about delete-orphan cascade placed on a many-to-many
    relation. First, the bad news: the warning will apply to both many-to-many as
    well as many-to-one relations. This is necessary since in both cases, SQLA does
    not scan the full set of potential parents when determining “orphan” status -
    for a persistent object it only detects an in-python de-association event to establish
    the object as an “orphan”. Next, the good news: to support one-to-one via a foreign
    key or association table, or to support one-to-many via an association table,
    a new flag single_parent=True may be set which indicates objects linked to the
    relation are only meant to have a single parent. The relation will raise an error
    if multiple parent-association events occur within Python.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted the attribute instrumentation change from 0.5.1 to fully establish
    instrumentation for subclasses where the mapper was created after the superclass
    had already been fully instrumented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1292](https://www.sqlalchemy.org/trac/ticket/1292)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in delete-orphan cascade whereby two one-to-one relations from two
    different parent classes to the same target class would prematurely expunge the
    instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an eager loading bug whereby self-referential eager loading would prevent
    other eager loads, self referential or not, from joining to the parent JOIN properly.
    Thanks to Alex K for creating a great test case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.expire() and related methods will not expire() unloaded deferred attributes.
    This prevents them from being needlessly loaded when the instance is refreshed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.join()/outerjoin() will now properly join an aliased() construct to the
    existing left side, even if query.from_self() or query.select_from(someselectable)
    has been called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1293](https://www.sqlalchemy.org/trac/ticket/1293)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further fixes to the “percent signs and spaces in column/table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: names” functionality.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1284](https://www.sqlalchemy.org/trac/ticket/1284)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored convert_unicode handling. Results were being passed on through without
    conversion.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1291](https://www.sqlalchemy.org/trac/ticket/1291)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Really fixing the decimal handling this time..
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1282](https://www.sqlalchemy.org/trac/ticket/1282)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql] [Ticket:1289]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified table reflection code to use only kwargs when constructing tables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sat Jan 17 2009'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed an internal join cache which could potentially leak memory when issuing
    query.join() repeatedly to ad-hoc selectables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “clear()”, “save()”, “update()”, “save_or_update()” Session methods have
    been deprecated, replaced by “expunge_all()” and “add()”. “expunge_all()” has
    also been added to ScopedSession.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modernized the “no mapped table” exception and added a more explicit __table__/__tablename__
    exception to declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concrete inheriting mappers now instrument attributes which are inherited from
    the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute
    that issues a descriptive error when accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new relation() keyword back_populates. This allows configuration of
    backreferences using explicit relations. This is required when creating bidirectional
    relations between a hierarchy of concrete mappers and another class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage added for relation() objects specified on concrete mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.from_self() as well as query.subquery() both disable the rendering of
    eager joins inside the subquery produced. The “disable all eager joins” feature
    is available publicly via a new query.enable_eagerloads() generative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1276](https://www.sqlalchemy.org/trac/ticket/1276)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a rudimental series of set operations to Query that receive Query objects
    as arguments, including union(), union_all(), intersect(), except_(), intersect_all(),
    except_all(). See the API documentation for Query.union() for examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug that prevented Query.join() and eagerloads from attaching to a query
    that selected from a union or aliased union.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A short documentation example added for bidirectional relations specified on
    concrete mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mappers now instrument class attributes upon construction with the final InstrumentedAttribute
    object which remains persistent. The _CompileOnAttr/__getattribute__() methodology
    has been removed. The net effect is that Column-based mapped class attributes
    can now be used fully at the class level without invoking a mapper compilation
    operation, greatly simplifying typical usage patterns within declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1269](https://www.sqlalchemy.org/trac/ticket/1269)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ColumnProperty (and front-end helpers such as `deferred`) no longer ignores
    unknown **keyword arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug with the unitofwork’s “row switch” mechanism, i.e. the conversion
    of INSERT/DELETE into an UPDATE, when combined with joined-table inheritance and
    an object which contained no defined values for the child table where an UPDATE
    with no SET clause would be rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using delete-orphan on a many-to-many relation is deprecated. This produces
    misleading or erroneous results since SQLA does not retrieve the full list of
    “parents” for m2m. To get delete-orphan behavior with an m2m table, use an explicit
    association class so that the individual association row is treated as a parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: delete-orphan cascade always requires delete cascade. Specifying delete-orphan
    without delete now raises a deprecation warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the methodology to handling percent signs in column names from. Added
    more tests. MySQL and PostgreSQL dialects still do not issue correct CREATE TABLE
    statements for identifiers with percent signs in them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index now accepts column-oriented InstrumentedAttributes (i.e. column-based
    mapped class attributes) as column arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1214](https://www.sqlalchemy.org/trac/ticket/1214)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column with no name (as in declarative) won’t raise a NoneType error when its
    string output is requested (such as in a stack trace).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when overriding a Column with a ForeignKey on a reflected table, where
    derived columns (i.e. the “virtual” columns of a select, etc.) would inadvertently
    call upon schema-level cleanup logic intended only for the original column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1278](https://www.sqlalchemy.org/trac/ticket/1278)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the missing keywords from MySQL 4.1 so they get escaped properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected handling of large decimal values with more robust tests. Removed string
    manipulation on floats.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1280](https://www.sqlalchemy.org/trac/ticket/1280)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified the do_begin handling in mssql to use the Cursor not the Connection
    so it is DBAPI compatible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected SAVEPOINT support on adodbapi by changing the handling of savepoint_release,
    which is unsupported on mssql.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can now specify Column objects on subclasses which have no table of their own
    (i.e. use single table inheritance). The columns will be appended to the base
    table, but only mapped by the subclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For both joined and single inheriting subclasses, the subclass will only map
    those columns which are already mapped on the superclass and those explicit on
    the subclass. Other columns that are present on the Table will be excluded from
    the mapping by default, which can be disabled by passing a blank exclude_properties
    collection to the __mapper_args__. This is so that single-inheriting classes which
    define their own columns are the only classes to map those columns. The effect
    is actually a more organized mapping than you’d normally get with explicit mapper()
    calls unless you set up the exclude_properties arguments explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s an error to add new Column objects to a declarative class that specified
    an existing table using __table__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed an internal join cache which could potentially leak memory when issuing
    query.join() repeatedly to ad-hoc selectables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “clear()”, “save()”, “update()”, “save_or_update()” Session methods have
    been deprecated, replaced by “expunge_all()” and “add()”. “expunge_all()” has
    also been added to ScopedSession.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modernized the “no mapped table” exception and added a more explicit __table__/__tablename__
    exception to declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concrete inheriting mappers now instrument attributes which are inherited from
    the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute
    that issues a descriptive error when accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new relation() keyword back_populates. This allows configuration of
    backreferences using explicit relations. This is required when creating bidirectional
    relations between a hierarchy of concrete mappers and another class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage added for relation() objects specified on concrete mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.from_self() as well as query.subquery() both disable the rendering of
    eager joins inside the subquery produced. The “disable all eager joins” feature
    is available publicly via a new query.enable_eagerloads() generative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1276](https://www.sqlalchemy.org/trac/ticket/1276)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a rudimental series of set operations to Query that receive Query objects
    as arguments, including union(), union_all(), intersect(), except_(), intersect_all(),
    except_all(). See the API documentation for Query.union() for examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug that prevented Query.join() and eagerloads from attaching to a query
    that selected from a union or aliased union.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A short documentation example added for bidirectional relations specified on
    concrete mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mappers now instrument class attributes upon construction with the final InstrumentedAttribute
    object which remains persistent. The _CompileOnAttr/__getattribute__() methodology
    has been removed. The net effect is that Column-based mapped class attributes
    can now be used fully at the class level without invoking a mapper compilation
    operation, greatly simplifying typical usage patterns within declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1269](https://www.sqlalchemy.org/trac/ticket/1269)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ColumnProperty (and front-end helpers such as `deferred`) no longer ignores
    unknown **keyword arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug with the unitofwork’s “row switch” mechanism, i.e. the conversion
    of INSERT/DELETE into an UPDATE, when combined with joined-table inheritance and
    an object which contained no defined values for the child table where an UPDATE
    with no SET clause would be rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using delete-orphan on a many-to-many relation is deprecated. This produces
    misleading or erroneous results since SQLA does not retrieve the full list of
    “parents” for m2m. To get delete-orphan behavior with an m2m table, use an explicit
    association class so that the individual association row is treated as a parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: delete-orphan cascade always requires delete cascade. Specifying delete-orphan
    without delete now raises a deprecation warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the methodology to handling percent signs in column names from. Added
    more tests. MySQL and PostgreSQL dialects still do not issue correct CREATE TABLE
    statements for identifiers with percent signs in them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index now accepts column-oriented InstrumentedAttributes (i.e. column-based
    mapped class attributes) as column arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1214](https://www.sqlalchemy.org/trac/ticket/1214)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column with no name (as in declarative) won’t raise a NoneType error when its
    string output is requested (such as in a stack trace).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when overriding a Column with a ForeignKey on a reflected table, where
    derived columns (i.e. the “virtual” columns of a select, etc.) would inadvertently
    call upon schema-level cleanup logic intended only for the original column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1278](https://www.sqlalchemy.org/trac/ticket/1278)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the missing keywords from MySQL 4.1 so they get escaped properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected handling of large decimal values with more robust tests. Removed string
    manipulation on floats.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1280](https://www.sqlalchemy.org/trac/ticket/1280)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified the do_begin handling in mssql to use the Cursor not the Connection
    so it is DBAPI compatible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected SAVEPOINT support on adodbapi by changing the handling of savepoint_release,
    which is unsupported on mssql.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can now specify Column objects on subclasses which have no table of their own
    (i.e. use single table inheritance). The columns will be appended to the base
    table, but only mapped by the subclass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For both joined and single inheriting subclasses, the subclass will only map
    those columns which are already mapped on the superclass and those explicit on
    the subclass. Other columns that are present on the Table will be excluded from
    the mapping by default, which can be disabled by passing a blank exclude_properties
    collection to the __mapper_args__. This is so that single-inheriting classes which
    define their own columns are the only classes to map those columns. The effect
    is actually a more organized mapping than you’d normally get with explicit mapper()
    calls unless you set up the exclude_properties arguments explicitly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s an error to add new Column objects to a declarative class that specified
    an existing table using __table__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Tue Jan 06 2009'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation has been converted to Sphinx. In particular, the generated API
    documentation has been constructed into a full blown “API Reference” section which
    organizes editorial documentation combined with generated docstrings. Cross linking
    between sections and API docs are vastly improved, a javascript-powered search
    feature is provided, and a full index of all classes, functions and members is
    provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setup.py now imports setuptools only optionally. If not present, distutils is
    used. The new “pip” installer is recommended over easy_install as it installs
    in a more simplified way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added an extremely basic illustration of a PostGIS integration to the examples
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.with_polymorphic() now accepts a third argument “discriminator” which
    will replace the value of mapper.polymorphic_on for that query. Mappers themselves
    no longer require polymorphic_on to be set, even if the mapper has a polymorphic_identity.
    When not set, the mapper will load non-polymorphically by default. Together, these
    two features allow a non-polymorphic concrete inheritance setup to use polymorphic
    loading on a per-query basis, since concrete setups are prone to many issues when
    used polymorphically in all cases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic_loader accepts a query_class= to customize the Query classes used for
    both the dynamic collection and the queries built from it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.order_by() accepts None which will remove any pending order_by state from
    the query, as well as cancel out any mapper/relation configured ordering. This
    is primarily useful for overriding the ordering specified on a dynamic_loader().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1079](https://www.sqlalchemy.org/trac/ticket/1079)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exceptions raised during compile_mappers() are now preserved to provide “sticky
    behavior” - if a hasattr() call on a pre-compiled mapped attribute triggers a
    failing compile and suppresses the exception, subsequent compilation is blocked
    and the exception will be reiterated on the next compile() call. This issue occurs
    frequently when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: property.of_type() is now recognized on a single-table inheriting target, when
    used in the context of prop.of_type(..).any()/has(), as well as query.join(prop.of_type(…)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.join() raises an error when the target of the join doesn’t match the property-based
    attribute - while it’s unlikely anyone is doing this, the SQLAlchemy author was
    guilty of this particular loosey-goosey behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when using weak_instance_map=False where modified events would not
    be intercepted for a flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1272](https://www.sqlalchemy.org/trac/ticket/1272)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed some deep “column correspondence” issues which could impact a Query made
    against a selectable containing multiple versions of the same table, as well as
    unions and similar which contained the same table columns in different column
    positions at different levels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1268](https://www.sqlalchemy.org/trac/ticket/1268)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom comparator classes used in conjunction with column_property(), relation()
    etc. can define new comparison methods on the Comparator, which will become available
    via __getattr__() on the InstrumentedAttribute. In the case of synonym() or comparable_property(),
    attributes are resolved first on the user-defined descriptor, then on the user-defined
    comparator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added ScopedSession.is_active accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can pass mapped attributes and column objects as keys to query.update({}).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1262](https://www.sqlalchemy.org/trac/ticket/1262)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped attributes passed to the values() of an expression level insert() or
    update() will use the keys of the mapped columns, not that of the mapped attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with Query.delete() and Query.update() not working properly
    with bind parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1242](https://www.sqlalchemy.org/trac/ticket/1242)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.select_from(), from_statement() ensure that the given argument is a FromClause,
    or Text/Select/Union, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query() can be passed a “composite” attribute as a column expression and it
    will be expanded. Somewhat related to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query() is a little more robust when passed various column expressions such
    as strings, clauselists, text() constructs (which may mean it just raises an error
    more nicely).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: first() works as expected with Query.from_statement().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug introduced in 0.5rc4 involving eager loading not functioning for properties
    which were added to a mapper post-compile using add_property() or equivalent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where many-to-many relation() with viewonly=True would not correctly
    reference the link between secondary->remote.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate items in a list-based collection will be maintained when issuing INSERTs
    to a “secondary” table in a many-to-many relation. Assuming the m2m table has
    a unique or primary key constraint on it, this will raise the expected constraint
    violation instead of silently dropping the duplicate entries. Note that the old
    behavior remains for a one-to-many relation since collection entries in that case
    don’t result in INSERT statements and SQLA doesn’t manually police collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1232](https://www.sqlalchemy.org/trac/ticket/1232)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.add_column() can accept FromClause objects in the same manner as session.query()
    can.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison of many-to-one relation to NULL is properly converted to IS NOT NULL
    based on not_().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra checks added to ensure explicit primaryjoin/secondaryjoin are ClauseElement
    instances, to prevent more confusing errors later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1087](https://www.sqlalchemy.org/trac/ticket/1087)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved mapper() check for non-class classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1236](https://www.sqlalchemy.org/trac/ticket/1236)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparator_factory argument is now documented and supported by all MapperProperty
    types, including column_property(), relation(), backref(), and synonym().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#5051](https://www.sqlalchemy.org/trac/ticket/5051)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the name of PropertyLoader to RelationProperty, to be consistent with
    all the other names. PropertyLoader is still present as a synonym.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed “double iter()” call causing bus errors in shard API, removed errant result.close()
    left over from the 0.4 version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: made Session.merge cascades not trigger autoflush. Fixes merged instances getting
    prematurely inserted with missing values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two fixes to help prevent out-of-band columns from being rendered in polymorphic_union
    inheritance scenarios (which then causes extra tables to be rendered in the FROM
    clause causing cartesian products):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: improvements to “column adaption” for a->b->c inheritance situations to better
    locate columns that are related to one another via multiple levels of indirection,
    rather than rendering the non-adapted column.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the “polymorphic discriminator” column is only rendered for the actual mapper
    being queried against. The column won’t be “pulled in” from a subclass or superclass
    mapper since it’s not needed.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shard_id argument on ShardedSession.execute().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RowProxy objects can be used in place of dictionary arguments sent to connection.execute()
    and friends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#935](https://www.sqlalchemy.org/trac/ticket/935)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns can again contain percent signs within their names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.sql.expression.Function is now a public class. It can be subclassed
    to provide user-defined SQL functions in an imperative style, including with pre-established
    behaviors. The postgis.py example illustrates one usage of this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PickleType now favors == comparison by default, if the incoming object (such
    as a dict) implements __eq__(). If the object does not implement __eq__() and
    mutable=True, a deprecation warning is raised.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the import weirdness in sqlalchemy.sql to not export __names__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1215](https://www.sqlalchemy.org/trac/ticket/1215)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the same ForeignKey object repeatedly raises an error instead of silently
    failing later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1238](https://www.sqlalchemy.org/trac/ticket/1238)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added NotImplementedError for params() method on Insert/Update/Delete constructs.
    These items currently don’t support this functionality, which also would be a
    little misleading compared to values().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflected foreign keys will properly locate their referenced column, even if
    the column was given a “key” attribute different from the reflected name. This
    is achieved via a new flag on ForeignKey/ForeignKeyConstraint called “link_to_name”,
    if True means the given name is the referred-to column’s name, not its assigned
    key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select() can accept a ClauseList as a column in the same way as a Table or other
    selectable and the interior expressions will be used as column elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the “passive” flag on session.is_modified() is correctly propagated to the attribute
    manager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: union() and union_all() will not whack any order_by() that has been applied
    to the select()s inside. If you union() a select() with order_by() (presumably
    to support LIMIT/OFFSET), you should also call self_group() on it to apply parenthesis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in exception raise when FK columns not present during reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving reflection of a remote-schema table with a foreign key ref
    to another table in that schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table reflection now stores the actual DefaultClause value for the column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1266](https://www.sqlalchemy.org/trac/ticket/1266)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes, behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in a new MSGenericBinary type. This maps to the Binary type so it can
    implement the specialized behavior of treating length specified types as fixed-width
    Binary types and non-length types as an unbound variable length Binary type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added in new types: MSVarBinary and MSImage.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in the MSReal, MSNText, MSSmallDateTime, MSTime, MSDateTimeOffset, and
    MSDateTime2 types
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactored the Date/Time types. The `smalldatetime` data type no longer truncates
    to a date only, and will now be mapped to the MSSmallDateTime type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1254](https://www.sqlalchemy.org/trac/ticket/1254)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected an issue with Numerics to accept an int.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped `char_length` to the `LEN()` function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an `INSERT` includes a subselect the `INSERT` is converted from an `INSERT
    INTO VALUES` construct to a `INSERT INTO SELECT` construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the column is part of a `primary_key` it will be `NOT NULL` since MSSQL doesn’t
    allow `NULL` in primary_key columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MSBinary` now returns a `BINARY` instead of an `IMAGE`. This is a backwards
    incompatible change in that `BINARY` is a fixed length data type whereas `IMAGE`
    is a variable length data type.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_default_schema_name` is now reflected from the database based on the user’s
    default schema. This only works with MSSQL 2005 and later.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1258](https://www.sqlalchemy.org/trac/ticket/1258)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added collation support through the use of a new collation argument. This is
    supported on the following types: char, nchar, varchar, nvarchar, text, ntext.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1248](https://www.sqlalchemy.org/trac/ticket/1248)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the connection string parameters favor DSN as the default specification
    for pyodbc. See the mssql.py docstring for detailed usage instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added experimental support of savepoints. It currently does not work fully with
    sessions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support for three levels of column nullability: NULL, NOT NULL, and the database’s
    configured default. The default Column configuration (nullable=True) will now
    generate NULL in the DDL. Previously no specification was emitted and the database
    default would take effect (usually NULL, but not always). To explicitly request
    the database default, configure columns with nullable=None and no specification
    will be emitted in DDL. This is backwards incompatible behavior.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1243](https://www.sqlalchemy.org/trac/ticket/1243)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted the format of create_xid() to repair two-phase commit. We now have
    field reports of Oracle two-phase commit working properly with this change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added OracleNVarchar type, produces NVARCHAR2, and also subclasses Unicode so
    that convert_unicode=True by default. NVARCHAR2 reflects into this type automatically
    so these columns pass unicode on a reflected table with no explicit convert_unicode=True
    flags.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1233](https://www.sqlalchemy.org/trac/ticket/1233)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[dialect]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new description_encoding attribute on the dialect that is used for encoding
    the column name when processing the metadata. This usually defaults to utf-8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NullPool supports reconnect on failure behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a mutex for the initial pool creation when using pool.manage(dbapi). This
    prevents a minor case of “dogpile” behavior which would otherwise occur upon a
    heavy load startup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#799](https://www.sqlalchemy.org/trac/ticket/799)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: _execute_clauseelement() goes back to being a private method. Subclassing Connection
    is not needed now that ConnectionProxy is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tickets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added note about create_session() defaults.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added section about metadata.reflect().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated TypeDecorator section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrote the “threadlocal” strategy section of the docs due to recent confusion
    over this feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed badly out of date ‘polymorphic_fetch’ and ‘select_table’ docs from inheritance,
    reworked the second half of “joined table inheritance”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented comparator_factory kwarg, added new doc section “Custom Comparators”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling alias.execute() in conjunction with server_side_cursors won’t raise
    AttributeError.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Index reflection support to PostgreSQL, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[associationproxy]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The association proxy properties are make themselves available at the class
    level, e.g. MyClass.aproxy. Previously this evaluated to None.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full list of arguments accepted as string by backref() includes ‘primaryjoin’,
    ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’, ‘remote_side’, ‘order_by’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation has been converted to Sphinx. In particular, the generated API
    documentation has been constructed into a full blown “API Reference” section which
    organizes editorial documentation combined with generated docstrings. Cross linking
    between sections and API docs are vastly improved, a javascript-powered search
    feature is provided, and a full index of all classes, functions and members is
    provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setup.py now imports setuptools only optionally. If not present, distutils is
    used. The new “pip” installer is recommended over easy_install as it installs
    in a more simplified way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added an extremely basic illustration of a PostGIS integration to the examples
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.with_polymorphic() now accepts a third argument “discriminator” which
    will replace the value of mapper.polymorphic_on for that query. Mappers themselves
    no longer require polymorphic_on to be set, even if the mapper has a polymorphic_identity.
    When not set, the mapper will load non-polymorphically by default. Together, these
    two features allow a non-polymorphic concrete inheritance setup to use polymorphic
    loading on a per-query basis, since concrete setups are prone to many issues when
    used polymorphically in all cases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic_loader accepts a query_class= to customize the Query classes used for
    both the dynamic collection and the queries built from it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.order_by() accepts None which will remove any pending order_by state from
    the query, as well as cancel out any mapper/relation configured ordering. This
    is primarily useful for overriding the ordering specified on a dynamic_loader().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1079](https://www.sqlalchemy.org/trac/ticket/1079)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exceptions raised during compile_mappers() are now preserved to provide “sticky
    behavior” - if a hasattr() call on a pre-compiled mapped attribute triggers a
    failing compile and suppresses the exception, subsequent compilation is blocked
    and the exception will be reiterated on the next compile() call. This issue occurs
    frequently when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: property.of_type() is now recognized on a single-table inheriting target, when
    used in the context of prop.of_type(..).any()/has(), as well as query.join(prop.of_type(…)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.join() raises an error when the target of the join doesn’t match the property-based
    attribute - while it’s unlikely anyone is doing this, the SQLAlchemy author was
    guilty of this particular loosey-goosey behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when using weak_instance_map=False where modified events would not
    be intercepted for a flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1272](https://www.sqlalchemy.org/trac/ticket/1272)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed some deep “column correspondence” issues which could impact a Query made
    against a selectable containing multiple versions of the same table, as well as
    unions and similar which contained the same table columns in different column
    positions at different levels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1268](https://www.sqlalchemy.org/trac/ticket/1268)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom comparator classes used in conjunction with column_property(), relation()
    etc. can define new comparison methods on the Comparator, which will become available
    via __getattr__() on the InstrumentedAttribute. In the case of synonym() or comparable_property(),
    attributes are resolved first on the user-defined descriptor, then on the user-defined
    comparator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added ScopedSession.is_active accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can pass mapped attributes and column objects as keys to query.update({}).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1262](https://www.sqlalchemy.org/trac/ticket/1262)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped attributes passed to the values() of an expression level insert() or
    update() will use the keys of the mapped columns, not that of the mapped attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with Query.delete() and Query.update() not working properly
    with bind parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1242](https://www.sqlalchemy.org/trac/ticket/1242)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.select_from(), from_statement() ensure that the given argument is a FromClause,
    or Text/Select/Union, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query() can be passed a “composite” attribute as a column expression and it
    will be expanded. Somewhat related to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query() is a little more robust when passed various column expressions such
    as strings, clauselists, text() constructs (which may mean it just raises an error
    more nicely).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: first() works as expected with Query.from_statement().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug introduced in 0.5rc4 involving eager loading not functioning for properties
    which were added to a mapper post-compile using add_property() or equivalent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where many-to-many relation() with viewonly=True would not correctly
    reference the link between secondary->remote.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate items in a list-based collection will be maintained when issuing INSERTs
    to a “secondary” table in a many-to-many relation. Assuming the m2m table has
    a unique or primary key constraint on it, this will raise the expected constraint
    violation instead of silently dropping the duplicate entries. Note that the old
    behavior remains for a one-to-many relation since collection entries in that case
    don’t result in INSERT statements and SQLA doesn’t manually police collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1232](https://www.sqlalchemy.org/trac/ticket/1232)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.add_column() can accept FromClause objects in the same manner as session.query()
    can.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison of many-to-one relation to NULL is properly converted to IS NOT NULL
    based on not_().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra checks added to ensure explicit primaryjoin/secondaryjoin are ClauseElement
    instances, to prevent more confusing errors later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1087](https://www.sqlalchemy.org/trac/ticket/1087)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved mapper() check for non-class classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1236](https://www.sqlalchemy.org/trac/ticket/1236)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comparator_factory argument is now documented and supported by all MapperProperty
    types, including column_property(), relation(), backref(), and synonym().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#5051](https://www.sqlalchemy.org/trac/ticket/5051)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed the name of PropertyLoader to RelationProperty, to be consistent with
    all the other names. PropertyLoader is still present as a synonym.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed “double iter()” call causing bus errors in shard API, removed errant result.close()
    left over from the 0.4 version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: made Session.merge cascades not trigger autoflush. Fixes merged instances getting
    prematurely inserted with missing values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two fixes to help prevent out-of-band columns from being rendered in polymorphic_union
    inheritance scenarios (which then causes extra tables to be rendered in the FROM
    clause causing cartesian products):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: improvements to “column adaption” for a->b->c inheritance situations to better
    locate columns that are related to one another via multiple levels of indirection,
    rather than rendering the non-adapted column.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the “polymorphic discriminator” column is only rendered for the actual mapper
    being queried against. The column won’t be “pulled in” from a subclass or superclass
    mapper since it’s not needed.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shard_id argument on ShardedSession.execute().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RowProxy objects can be used in place of dictionary arguments sent to connection.execute()
    and friends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#935](https://www.sqlalchemy.org/trac/ticket/935)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns can again contain percent signs within their names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.sql.expression.Function is now a public class. It can be subclassed
    to provide user-defined SQL functions in an imperative style, including with pre-established
    behaviors. The postgis.py example illustrates one usage of this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PickleType now favors == comparison by default, if the incoming object (such
    as a dict) implements __eq__(). If the object does not implement __eq__() and
    mutable=True, a deprecation warning is raised.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the import weirdness in sqlalchemy.sql to not export __names__.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1215](https://www.sqlalchemy.org/trac/ticket/1215)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the same ForeignKey object repeatedly raises an error instead of silently
    failing later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1238](https://www.sqlalchemy.org/trac/ticket/1238)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added NotImplementedError for params() method on Insert/Update/Delete constructs.
    These items currently don’t support this functionality, which also would be a
    little misleading compared to values().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflected foreign keys will properly locate their referenced column, even if
    the column was given a “key” attribute different from the reflected name. This
    is achieved via a new flag on ForeignKey/ForeignKeyConstraint called “link_to_name”,
    if True means the given name is the referred-to column’s name, not its assigned
    key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select() can accept a ClauseList as a column in the same way as a Table or other
    selectable and the interior expressions will be used as column elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the “passive” flag on session.is_modified() is correctly propagated to the attribute
    manager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: union() and union_all() will not whack any order_by() that has been applied
    to the select()s inside. If you union() a select() with order_by() (presumably
    to support LIMIT/OFFSET), you should also call self_group() on it to apply parenthesis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in exception raise when FK columns not present during reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving reflection of a remote-schema table with a foreign key ref
    to another table in that schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table reflection now stores the actual DefaultClause value for the column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1266](https://www.sqlalchemy.org/trac/ticket/1266)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes, behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in a new MSGenericBinary type. This maps to the Binary type so it can
    implement the specialized behavior of treating length specified types as fixed-width
    Binary types and non-length types as an unbound variable length Binary type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added in new types: MSVarBinary and MSImage.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in the MSReal, MSNText, MSSmallDateTime, MSTime, MSDateTimeOffset, and
    MSDateTime2 types
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactored the Date/Time types. The `smalldatetime` data type no longer truncates
    to a date only, and will now be mapped to the MSSmallDateTime type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1254](https://www.sqlalchemy.org/trac/ticket/1254)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected an issue with Numerics to accept an int.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapped `char_length` to the `LEN()` function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an `INSERT` includes a subselect the `INSERT` is converted from an `INSERT
    INTO VALUES` construct to a `INSERT INTO SELECT` construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the column is part of a `primary_key` it will be `NOT NULL` since MSSQL doesn’t
    allow `NULL` in primary_key columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MSBinary` now returns a `BINARY` instead of an `IMAGE`. This is a backwards
    incompatible change in that `BINARY` is a fixed length data type whereas `IMAGE`
    is a variable length data type.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_default_schema_name` is now reflected from the database based on the user’s
    default schema. This only works with MSSQL 2005 and later.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1258](https://www.sqlalchemy.org/trac/ticket/1258)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added collation support through the use of a new collation argument. This is
    supported on the following types: char, nchar, varchar, nvarchar, text, ntext.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1248](https://www.sqlalchemy.org/trac/ticket/1248)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the connection string parameters favor DSN as the default specification
    for pyodbc. See the mssql.py docstring for detailed usage instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added experimental support of savepoints. It currently does not work fully with
    sessions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support for three levels of column nullability: NULL, NOT NULL, and the database’s
    configured default. The default Column configuration (nullable=True) will now
    generate NULL in the DDL. Previously no specification was emitted and the database
    default would take effect (usually NULL, but not always). To explicitly request
    the database default, configure columns with nullable=None and no specification
    will be emitted in DDL. This is backwards incompatible behavior.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1243](https://www.sqlalchemy.org/trac/ticket/1243)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted the format of create_xid() to repair two-phase commit. We now have
    field reports of Oracle two-phase commit working properly with this change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added OracleNVarchar type, produces NVARCHAR2, and also subclasses Unicode so
    that convert_unicode=True by default. NVARCHAR2 reflects into this type automatically
    so these columns pass unicode on a reflected table with no explicit convert_unicode=True
    flags.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1233](https://www.sqlalchemy.org/trac/ticket/1233)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[dialect]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new description_encoding attribute on the dialect that is used for encoding
    the column name when processing the metadata. This usually defaults to utf-8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NullPool supports reconnect on failure behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a mutex for the initial pool creation when using pool.manage(dbapi). This
    prevents a minor case of “dogpile” behavior which would otherwise occur upon a
    heavy load startup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#799](https://www.sqlalchemy.org/trac/ticket/799)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[engine/pool]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: _execute_clauseelement() goes back to being a private method. Subclassing Connection
    is not needed now that ConnectionProxy is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tickets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added note about create_session() defaults.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added section about metadata.reflect().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated TypeDecorator section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrote the “threadlocal” strategy section of the docs due to recent confusion
    over this feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed badly out of date ‘polymorphic_fetch’ and ‘select_table’ docs from inheritance,
    reworked the second half of “joined table inheritance”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[documentation]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented comparator_factory kwarg, added new doc section “Custom Comparators”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling alias.execute() in conjunction with server_side_cursors won’t raise
    AttributeError.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Index reflection support to PostgreSQL, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[associationproxy]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The association proxy properties are make themselves available at the class
    level, e.g. MyClass.aproxy. Previously this evaluated to None.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full list of arguments accepted as string by backref() includes ‘primaryjoin’,
    ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’, ‘remote_side’, ‘order_by’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri Nov 14 2008'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global “propigate”->”propagate” change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.count() has been enhanced to do the “right thing” in a wider variety of
    cases. It can now count multiple-entity queries, as well as column-based queries.
    Note that this means if you say query(A, B).count() without any joining criterion,
    it’s going to count the cartesian product of A*B. Any query which is against column-based
    entities will automatically issue “SELECT count(1) FROM (SELECT…)” so that the
    real rowcount is returned, meaning a query such as query(func.count(A.name)).count()
    will return a value of one, since that query would return one row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of performance tuning. A rough guesstimate over various ORM operations
    places it 10% faster over 0.5.0rc3, 25-30% over 0.4.8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes and behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustments to the enhanced garbage collection on InstanceState to better guard
    against errors due to lost state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.get() returns a more informative error message when executed against multiple
    entities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored NotImplementedError on Cls.relation.in_()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed PendingDeprecationWarning involving order_by parameter on relation().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the ‘properties’ attribute of the Connection object, Connection.info
    should be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored “active rowcount” fetch before ResultProxy autocloses the cursor. This
    was removed in 0.5rc3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rearranged the load_dialect_impl() method in TypeDecorator such that it will
    take effect even if the user-defined TypeDecorator uses another TypeDecorator
    as its impl.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of cleanup and fixes to correct problems with limit and offset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correct situation where subqueries as part of a binary expression need to be
    translated to use the IN and NOT IN syntax.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed E Notation issue that prevented the ability to insert decimal values less
    than 1E-6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1216](https://www.sqlalchemy.org/trac/ticket/1216)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problems with reflection when dealing with schemas, particularly when
    those schemas are the default schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1217](https://www.sqlalchemy.org/trac/ticket/1217)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with casting a zero length item to a varchar. It now correctly
    adjusts the CAST.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Currency type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions were not return their result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with joins. Access only support LEFT OUTER or INNER not just
    JOIN by itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can now use a custom “inherit_condition” in __mapper_args__ when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed string-based “remote_side”, “order_by” and others not propagating correctly
    when used in backref().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global “propigate”->”propagate” change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.count() has been enhanced to do the “right thing” in a wider variety of
    cases. It can now count multiple-entity queries, as well as column-based queries.
    Note that this means if you say query(A, B).count() without any joining criterion,
    it’s going to count the cartesian product of A*B. Any query which is against column-based
    entities will automatically issue “SELECT count(1) FROM (SELECT…)” so that the
    real rowcount is returned, meaning a query such as query(func.count(A.name)).count()
    will return a value of one, since that query would return one row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of performance tuning. A rough guesstimate over various ORM operations
    places it 10% faster over 0.5.0rc3, 25-30% over 0.4.8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes and behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustments to the enhanced garbage collection on InstanceState to better guard
    against errors due to lost state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query.get() returns a more informative error message when executed against multiple
    entities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored NotImplementedError on Cls.relation.in_()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed PendingDeprecationWarning involving order_by parameter on relation().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the ‘properties’ attribute of the Connection object, Connection.info
    should be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restored “active rowcount” fetch before ResultProxy autocloses the cursor. This
    was removed in 0.5rc3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rearranged the load_dialect_impl() method in TypeDecorator such that it will
    take effect even if the user-defined TypeDecorator uses another TypeDecorator
    as its impl.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mssql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of cleanup and fixes to correct problems with limit and offset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correct situation where subqueries as part of a binary expression need to be
    translated to use the IN and NOT IN syntax.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed E Notation issue that prevented the ability to insert decimal values less
    than 1E-6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1216](https://www.sqlalchemy.org/trac/ticket/1216)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problems with reflection when dealing with schemas, particularly when
    those schemas are the default schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1217](https://www.sqlalchemy.org/trac/ticket/1217)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mssql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with casting a zero length item to a varchar. It now correctly
    adjusts the CAST.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Currency type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions were not return their result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[access]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected problem with joins. Access only support LEFT OUTER or INNER not just
    JOIN by itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can now use a custom “inherit_condition” in __mapper_args__ when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed string-based “remote_side”, “order_by” and others not propagating correctly
    when used in backref().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Fri Nov 07 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added two new hooks to SessionExtension: after_bulk_delete() and after_bulk_update().
    after_bulk_delete() is called after a bulk delete() operation on a query. after_bulk_update()
    is called after a bulk update() operation on a query.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”not equals” comparisons of simple many-to-one relation to an instance will
    not drop into an EXISTS clause and will compare foreign key columns instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed not-really-working use cases of comparing a collection to an iterable.
    Use contains() to test for collection membership.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the behavior of aliased() objects such that they more accurately adapt
    the expressions generated, which helps particularly with self-referential comparisons.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1171](https://www.sqlalchemy.org/trac/ticket/1171)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving primaryjoin/secondaryjoin conditions constructed from class-bound
    attributes (as often occurs when using declarative), which later would be inappropriately
    aliased by Query, particularly with the various EXISTS based comparators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when using multiple query.join() with an aliased-bound descriptor
    which would lose the left alias.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved weakref identity map memory management to no longer require mutexing,
    resurrects garbage collected instance on a lazy basis for an InstanceState with
    pending changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InstanceState object now removes circular references to itself upon disposal
    to keep it outside of cyclic garbage collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relation() won’t hide unrelated ForeignKey errors inside of the “please specify
    primaryjoin” message when determining join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in Query involving order_by() in conjunction with multiple aliases
    of the same class (will add tests in)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1218](https://www.sqlalchemy.org/trac/ticket/1218)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using Query.join() with an explicit clause for the ON clause, the clause
    will be aliased in terms of the left side of the join, allowing scenarios like
    query(Source). from_self().join((Dest, Source.id==Dest.source_id)) to work properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired support for “passive-deletes” on a many-to-one relation() with “delete”
    cascade.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1183](https://www.sqlalchemy.org/trac/ticket/1183)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added more granularity to internal attribute access, such that cascade and flush
    operations will not initialize unloaded attributes and collections, leaving them
    intact for a lazy-load later on. Backref events still initialize attributes and
    collections for pending instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1202](https://www.sqlalchemy.org/trac/ticket/1202)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL compiler optimizations and complexity reduction. The call count for compiling
    a typical select() construct is 20% less versus 0.5.0rc2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialects can now generate label names of adjustable length. Pass in the argument
    “label_length=<value>” to create_engine() to adjust how many characters max will
    be present in dynamically generated column labels, i.e. “somecolumn AS somelabel”.
    Any value less than 6 will result in a label of minimal size, consisting of an
    underscore and a numeric counter. The compiler uses the value of dialect.max_identifier_length
    as a default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1211](https://www.sqlalchemy.org/trac/ticket/1211)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified the check for ResultProxy “autoclose without results” to be based
    solely on presence of cursor.description. All the regexp-based guessing about
    statements returning rows has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1212](https://www.sqlalchemy.org/trac/ticket/1212)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct execution of a union() construct will properly set up result-row processing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1194](https://www.sqlalchemy.org/trac/ticket/1194)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal notion of an “OID” or “ROWID” column has been removed. It’s basically
    not used by any dialect, and the possibility of its usage with psycopg2’s cursor.lastrowid
    is basically gone now that INSERT..RETURNING is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed “default_order_by()” method on all FromClause objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired the table.tometadata() method so that a passed-in schema argument is
    propagated to ForeignKey constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slightly changed behavior of IN operator for comparing to empty collections.
    Now results in inequality comparison against self. More portable, but breaks with
    stored procedures that aren’t pure functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed foreign key reflection in the edge case where a Table’s explicit schema=
    is the same as the schema (database) the connection is attached to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No longer expects include_columns in table reflection to be lower case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrote a docstring for Oracle dialect. Apparently that Ohloh “few source code
    comments” label is starting to string :).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed FIRST_ROWS() optimize flag when using LIMIT/OFFSET, can be re-enabled
    with optimize_limits=True create_engine() flag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes and behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the auto_convert_lobs to False on create_engine() will also instruct
    the OracleBinary type to return the cx_oracle LOB object unchanged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new extension sqlalchemy.ext.serializer. Provides Serializer/Deserializer
    “classes” which mirror Pickle/Unpickle, as well as dumps() and loads(). This serializer
    implements an “external object” pickler which keeps key context-sensitive objects,
    including engines, sessions, metadata, Tables/Columns, and mappers, outside of
    the pickle stream, and can later restore the pickle using any engine/metadata/session
    provider. This is used not for pickling regular object instances, which are pickleable
    without any special logic, but for pickling expression objects and full Query
    objects, such that all mapper/engine/session dependencies can be restored at unpickle
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug preventing declarative-bound “column” objects from being used in column_mapped_collection().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1174](https://www.sqlalchemy.org/trac/ticket/1174)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[misc]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: util.flatten_iterator() func doesn’t interpret strings with __iter__() methods
    as iterators, such as in pypy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1077](https://www.sqlalchemy.org/trac/ticket/1077)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added two new hooks to SessionExtension: after_bulk_delete() and after_bulk_update().
    after_bulk_delete() is called after a bulk delete() operation on a query. after_bulk_update()
    is called after a bulk update() operation on a query.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”not equals” comparisons of simple many-to-one relation to an instance will
    not drop into an EXISTS clause and will compare foreign key columns instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed not-really-working use cases of comparing a collection to an iterable.
    Use contains() to test for collection membership.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the behavior of aliased() objects such that they more accurately adapt
    the expressions generated, which helps particularly with self-referential comparisons.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1171](https://www.sqlalchemy.org/trac/ticket/1171)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving primaryjoin/secondaryjoin conditions constructed from class-bound
    attributes (as often occurs when using declarative), which later would be inappropriately
    aliased by Query, particularly with the various EXISTS based comparators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug when using multiple query.join() with an aliased-bound descriptor
    which would lose the left alias.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved weakref identity map memory management to no longer require mutexing,
    resurrects garbage collected instance on a lazy basis for an InstanceState with
    pending changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InstanceState object now removes circular references to itself upon disposal
    to keep it outside of cyclic garbage collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relation() won’t hide unrelated ForeignKey errors inside of the “please specify
    primaryjoin” message when determining join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in Query involving order_by() in conjunction with multiple aliases
    of the same class (will add tests in)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1218](https://www.sqlalchemy.org/trac/ticket/1218)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using Query.join() with an explicit clause for the ON clause, the clause
    will be aliased in terms of the left side of the join, allowing scenarios like
    query(Source). from_self().join((Dest, Source.id==Dest.source_id)) to work properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired support for “passive-deletes” on a many-to-one relation() with “delete”
    cascade.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1183](https://www.sqlalchemy.org/trac/ticket/1183)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added more granularity to internal attribute access, such that cascade and flush
    operations will not initialize unloaded attributes and collections, leaving them
    intact for a lazy-load later on. Backref events still initialize attributes and
    collections for pending instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1202](https://www.sqlalchemy.org/trac/ticket/1202)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL compiler optimizations and complexity reduction. The call count for compiling
    a typical select() construct is 20% less versus 0.5.0rc2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialects can now generate label names of adjustable length. Pass in the argument
    “label_length=<value>” to create_engine() to adjust how many characters max will
    be present in dynamically generated column labels, i.e. “somecolumn AS somelabel”.
    Any value less than 6 will result in a label of minimal size, consisting of an
    underscore and a numeric counter. The compiler uses the value of dialect.max_identifier_length
    as a default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1211](https://www.sqlalchemy.org/trac/ticket/1211)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified the check for ResultProxy “autoclose without results” to be based
    solely on presence of cursor.description. All the regexp-based guessing about
    statements returning rows has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1212](https://www.sqlalchemy.org/trac/ticket/1212)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct execution of a union() construct will properly set up result-row processing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1194](https://www.sqlalchemy.org/trac/ticket/1194)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal notion of an “OID” or “ROWID” column has been removed. It’s basically
    not used by any dialect, and the possibility of its usage with psycopg2’s cursor.lastrowid
    is basically gone now that INSERT..RETURNING is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed “default_order_by()” method on all FromClause objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired the table.tometadata() method so that a passed-in schema argument is
    propagated to ForeignKey constructs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slightly changed behavior of IN operator for comparing to empty collections.
    Now results in inequality comparison against self. More portable, but breaks with
    stored procedures that aren’t pure functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed foreign key reflection in the edge case where a Table’s explicit schema=
    is the same as the schema (database) the connection is attached to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No longer expects include_columns in table reflection to be lower case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrote a docstring for Oracle dialect. Apparently that Ohloh “few source code
    comments” label is starting to string :).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed FIRST_ROWS() optimize flag when using LIMIT/OFFSET, can be re-enabled
    with optimize_limits=True create_engine() flag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bugfixes and behavioral changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the auto_convert_lobs to False on create_engine() will also instruct
    the OracleBinary type to return the cx_oracle LOB object unchanged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new extension sqlalchemy.ext.serializer. Provides Serializer/Deserializer
    “classes” which mirror Pickle/Unpickle, as well as dumps() and loads(). This serializer
    implements an “external object” pickler which keeps key context-sensitive objects,
    including engines, sessions, metadata, Tables/Columns, and mappers, outside of
    the pickle stream, and can later restore the pickle using any engine/metadata/session
    provider. This is used not for pickling regular object instances, which are pickleable
    without any special logic, but for pickling expression objects and full Query
    objects, such that all mapper/engine/session dependencies can be restored at unpickle
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug preventing declarative-bound “column” objects from being used in column_mapped_collection().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1174](https://www.sqlalchemy.org/trac/ticket/1174)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[misc]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: util.flatten_iterator() func doesn’t interpret strings with __iter__() methods
    as iterators, such as in pypy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1077](https://www.sqlalchemy.org/trac/ticket/1077)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Sun Oct 12 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving read/write relation()s that contain literal or other non-column
    expressions within their primaryjoin condition equated to a foreign key column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”non-batch” mode in mapper(), a feature which allows mapper extension methods
    to be called as each instance is updated/inserted, now honors the insert order
    of the objects given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ScopedSession.query_property now accepts a query_cls factory, overriding the
    session’s configured query_cls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shared state bug interfering with ScopedSession.mapper’s ability to apply
    default __init__ implementations on object subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed up slices on Query (i.e. query[x:y]) to work properly for zero length
    slices, slices with None on either end.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1177](https://www.sqlalchemy.org/trac/ticket/1177)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an example illustrating Celko’s “nested sets” as a SQLA mapping.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() with an alias argument works even when the alias is embedded
    in a SELECT, as when sent to the Query via query.select_from().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() usage is now compatible with a Query that also contains a regular
    eager load and limit/offset, in that the columns are added to the Query-generated
    subquery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1180](https://www.sqlalchemy.org/trac/ticket/1180)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.execute() will execute a Sequence object passed to it (regression from
    0.4).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the “raiseerror” keyword argument from object_mapper() and class_mapper().
    These functions raise in all cases if the given class/instance is not mapped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed session.transaction.commit() on a autocommit=False session not starting
    a new transaction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some adjustments to Session.identity_map’s weak referencing behavior to reduce
    asynchronous GC side effects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustment to Session’s post-flush accounting of newly “clean” objects to better
    protect against operating on objects as they’re asynchronously gc’ed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1182](https://www.sqlalchemy.org/trac/ticket/1182)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary tables are now reflectable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overhauled SQLite date/time bind/result processing to use regular expressions
    and format strings, rather than strptime/strftime, to generically support pre-1900
    dates, dates with microseconds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle will detect string-based statements which contain comments at the front
    before a SELECT as SELECT statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1187](https://www.sqlalchemy.org/trac/ticket/1187)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug involving read/write relation()s that contain literal or other non-column
    expressions within their primaryjoin condition equated to a foreign key column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”non-batch” mode in mapper(), a feature which allows mapper extension methods
    to be called as each instance is updated/inserted, now honors the insert order
    of the objects given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ScopedSession.query_property now accepts a query_cls factory, overriding the
    session’s configured query_cls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shared state bug interfering with ScopedSession.mapper’s ability to apply
    default __init__ implementations on object subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed up slices on Query (i.e. query[x:y]) to work properly for zero length
    slices, slices with None on either end.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1177](https://www.sqlalchemy.org/trac/ticket/1177)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an example illustrating Celko’s “nested sets” as a SQLA mapping.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() with an alias argument works even when the alias is embedded
    in a SELECT, as when sent to the Query via query.select_from().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contains_eager() usage is now compatible with a Query that also contains a regular
    eager load and limit/offset, in that the columns are added to the Query-generated
    subquery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1180](https://www.sqlalchemy.org/trac/ticket/1180)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.execute() will execute a Sequence object passed to it (regression from
    0.4).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the “raiseerror” keyword argument from object_mapper() and class_mapper().
    These functions raise in all cases if the given class/instance is not mapped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed session.transaction.commit() on a autocommit=False session not starting
    a new transaction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some adjustments to Session.identity_map’s weak referencing behavior to reduce
    asynchronous GC side effects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustment to Session’s post-flush accounting of newly “clean” objects to better
    protect against operating on objects as they’re asynchronously gc’ed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1182](https://www.sqlalchemy.org/trac/ticket/1182)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary tables are now reflectable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overhauled SQLite date/time bind/result processing to use regular expressions
    and format strings, rather than strptime/strftime, to generically support pre-1900
    dates, dates with microseconds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle will detect string-based statements which contain comments at the front
    before a SELECT as SELECT statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1187](https://www.sqlalchemy.org/trac/ticket/1187)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0rc1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Sep 11 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query now has delete() and update(values) methods. This allows to perform bulk
    deletes/updates with the Query object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RowTuple object returned by Query(*cols) now features keynames which prefer
    mapped attribute names over column keys, column keys over column names, i.e. Query(Class.foo,
    Class.bar) will have names “foo” and “bar” even if those are not the names of
    the underlying Column objects. Direct Column objects such as Query(table.c.col)
    will return the “key” attribute of the Column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added scalar() and value() methods to Query, each return a single scalar value.
    scalar() takes no arguments and is roughly equivalent to first()[0], value() takes
    a single column expression and is roughly equivalent to values(expr).next()[0].
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the determination of the FROM clause when placing SQL expressions in
    the query() list of entities. In particular scalar subqueries should not “leak”
    their inner FROM objects out into the enclosing query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joins along a relation() from a mapped class to a mapped subclass, where the
    mapped subclass is configured with single table inheritance, will include an IN
    clause which limits the subtypes of the joined class to those requested, within
    the ON clause of the join. This takes effect for eager load joins as well as query.join().
    Note that in some scenarios the IN clause will appear in the WHERE clause of the
    query as well since this discrimination has multiple trigger points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AttributeExtension has been refined such that the event is fired before the
    mutation actually occurs. Additionally, the append() and set() methods must now
    return the given value, which is used as the value to be used in the mutation
    operation. This allows creation of validating AttributeListeners which raise before
    the action actually occurs, and which can change the given value into something
    else before its used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column_property(), composite_property(), and relation() now accept a single
    or list of AttributeExtensions using the “extension” keyword argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.order_by().get() silently drops the “ORDER BY” from the query issued by
    GET but does not raise an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a Validator AttributeExtension, as well as a @validates decorator which
    is used in a similar fashion as @reconstructor, and marks a method as validating
    one or more mapped attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: class.someprop.in_() raises NotImplementedError pending the implementation of
    “in_” for relation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed primary key update for many-to-many collections where the collection had
    not been loaded yet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1127](https://www.sqlalchemy.org/trac/ticket/1127)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby deferred() columns with a group in conjunction with an otherwise
    unrelated synonym() would produce an AttributeError during deferred load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The before_flush() hook on SessionExtension takes place before the list of new/dirty/deleted
    is calculated for the final time, allowing routines within before_flush() to further
    change the state of the Session before the flush proceeds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1128](https://www.sqlalchemy.org/trac/ticket/1128)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “extension” argument to Session and others can now optionally be a list,
    supporting events sent to multiple SessionExtension instances. Session places
    SessionExtensions in Session.extensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reentrant calls to flush() raise an error. This also serves as a rudimentary,
    but not foolproof, check against concurrent calls to Session.flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the behavior of query.join() when joining to joined-table inheritance
    subclasses, using explicit join criteria (i.e. not on a relation).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@orm.attributes.reconstitute and MapperExtension.reconstitute have been renamed
    to @orm.reconstructor and MapperExtension.reconstruct_instance'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed @reconstructor hook for subclasses which inherit from a base class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1129](https://www.sqlalchemy.org/trac/ticket/1129)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The composite() property type now supports a __set_composite_values__() method
    on the composite class which is required if the class represents state using attribute
    names other than the column’s keynames; default-generated values now get populated
    properly upon flush. Also, composites with attributes set to None compare correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1132](https://www.sqlalchemy.org/trac/ticket/1132)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 3-tuple of iterables returned by attributes.get_history() may now be a mix
    of lists and tuples. (Previously members were always lists.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby changing a primary key attribute on an entity where the attribute’s
    previous value had been expired would produce an error upon flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1151](https://www.sqlalchemy.org/trac/ticket/1151)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed custom instrumentation bug whereby get_instance_dict() was not called
    for newly constructed instances not loaded by the ORM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.delete() adds the given object to the session if not already present.
    This was a regression bug from 0.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1150](https://www.sqlalchemy.org/trac/ticket/1150)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The echo_uow flag on Session is deprecated, and unit-of-work logging is now
    application-level only, not per-session level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed conflicting contains() operator from InstrumentedAttribute which didn’t
    accept escape kwaarg.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1153](https://www.sqlalchemy.org/trac/ticket/1153)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporarily rolled back the “ORDER BY” enhancement from. This feature is on
    hold pending further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exists() construct won’t “export” its contained list of elements as FROM
    clauses, allowing them to be used more effectively in the columns clause of a
    SELECT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and_() and or_() now generate a ColumnElement, allowing boolean expressions
    as result columns, i.e. select([and_(1, 0)]).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#798](https://www.sqlalchemy.org/trac/ticket/798)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bind params now subclass ColumnElement which allows them to be selectable by
    orm.query (they already had most ColumnElement semantics).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added select_from() method to exists() construct, which becomes more and more
    compatible with a regular select().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added func.min(), func.max(), func.sum() as “generic functions”, which basically
    allows for their return type to be determined automatically. Helps with dates
    on SQLite, decimal types, others.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1160](https://www.sqlalchemy.org/trac/ticket/1160)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added decimal.Decimal as an “auto-detect” type; bind parameters and generic
    functions will set their type to Numeric when a Decimal is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added “sorted_tables” accessor to MetaData, which returns Table objects sorted
    in order of dependency as a list. This deprecates the MetaData.table_iterator()
    method. The “reverse=False” keyword argument has also been removed from util.sort_tables();
    use the Python ‘reversed’ function to reverse the results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1033](https://www.sqlalchemy.org/trac/ticket/1033)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘length’ argument to all Numeric types has been renamed to ‘scale’. ‘length’
    is deprecated and is still accepted with a warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped 0.3-compatibility for user defined types (convert_result_value, convert_bind_param).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘length’ argument to MSInteger, MSBigInteger, MSTinyInteger, MSSmallInteger
    and MSYear has been renamed to ‘display_width’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added MSMediumInteger type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the function func.utc_timestamp() compiles to UTC_TIMESTAMP, without the parenthesis,
    which seem to get in the way when using in conjunction with executemany().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: limit/offset no longer uses ROW NUMBER OVER to limit rows, and instead uses
    subqueries in conjunction with a special Oracle optimization comment. Allows LIMIT/OFFSET
    to work in conjunction with DISTINCT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has_sequence() now takes the current “schema” argument into account
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added BFILE to reflected type names
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby mapper couldn’t initialize if a composite primary key referenced
    another table that was not defined yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1161](https://www.sqlalchemy.org/trac/ticket/1161)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed exception throw which would occur when string-based primaryjoin condition
    was used in conjunction with backref.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query now has delete() and update(values) methods. This allows to perform bulk
    deletes/updates with the Query object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RowTuple object returned by Query(*cols) now features keynames which prefer
    mapped attribute names over column keys, column keys over column names, i.e. Query(Class.foo,
    Class.bar) will have names “foo” and “bar” even if those are not the names of
    the underlying Column objects. Direct Column objects such as Query(table.c.col)
    will return the “key” attribute of the Column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added scalar() and value() methods to Query, each return a single scalar value.
    scalar() takes no arguments and is roughly equivalent to first()[0], value() takes
    a single column expression and is roughly equivalent to values(expr).next()[0].
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the determination of the FROM clause when placing SQL expressions in
    the query() list of entities. In particular scalar subqueries should not “leak”
    their inner FROM objects out into the enclosing query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joins along a relation() from a mapped class to a mapped subclass, where the
    mapped subclass is configured with single table inheritance, will include an IN
    clause which limits the subtypes of the joined class to those requested, within
    the ON clause of the join. This takes effect for eager load joins as well as query.join().
    Note that in some scenarios the IN clause will appear in the WHERE clause of the
    query as well since this discrimination has multiple trigger points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AttributeExtension has been refined such that the event is fired before the
    mutation actually occurs. Additionally, the append() and set() methods must now
    return the given value, which is used as the value to be used in the mutation
    operation. This allows creation of validating AttributeListeners which raise before
    the action actually occurs, and which can change the given value into something
    else before its used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column_property(), composite_property(), and relation() now accept a single
    or list of AttributeExtensions using the “extension” keyword argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query.order_by().get() silently drops the “ORDER BY” from the query issued by
    GET but does not raise an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a Validator AttributeExtension, as well as a @validates decorator which
    is used in a similar fashion as @reconstructor, and marks a method as validating
    one or more mapped attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: class.someprop.in_() raises NotImplementedError pending the implementation of
    “in_” for relation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed primary key update for many-to-many collections where the collection had
    not been loaded yet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1127](https://www.sqlalchemy.org/trac/ticket/1127)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby deferred() columns with a group in conjunction with an otherwise
    unrelated synonym() would produce an AttributeError during deferred load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The before_flush() hook on SessionExtension takes place before the list of new/dirty/deleted
    is calculated for the final time, allowing routines within before_flush() to further
    change the state of the Session before the flush proceeds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1128](https://www.sqlalchemy.org/trac/ticket/1128)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “extension” argument to Session and others can now optionally be a list,
    supporting events sent to multiple SessionExtension instances. Session places
    SessionExtensions in Session.extensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reentrant calls to flush() raise an error. This also serves as a rudimentary,
    but not foolproof, check against concurrent calls to Session.flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the behavior of query.join() when joining to joined-table inheritance
    subclasses, using explicit join criteria (i.e. not on a relation).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@orm.attributes.reconstitute and MapperExtension.reconstitute have been renamed
    to @orm.reconstructor and MapperExtension.reconstruct_instance'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed @reconstructor hook for subclasses which inherit from a base class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1129](https://www.sqlalchemy.org/trac/ticket/1129)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The composite() property type now supports a __set_composite_values__() method
    on the composite class which is required if the class represents state using attribute
    names other than the column’s keynames; default-generated values now get populated
    properly upon flush. Also, composites with attributes set to None compare correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1132](https://www.sqlalchemy.org/trac/ticket/1132)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 3-tuple of iterables returned by attributes.get_history() may now be a mix
    of lists and tuples. (Previously members were always lists.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby changing a primary key attribute on an entity where the attribute’s
    previous value had been expired would produce an error upon flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1151](https://www.sqlalchemy.org/trac/ticket/1151)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed custom instrumentation bug whereby get_instance_dict() was not called
    for newly constructed instances not loaded by the ORM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.delete() adds the given object to the session if not already present.
    This was a regression bug from 0.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1150](https://www.sqlalchemy.org/trac/ticket/1150)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The echo_uow flag on Session is deprecated, and unit-of-work logging is now
    application-level only, not per-session level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed conflicting contains() operator from InstrumentedAttribute which didn’t
    accept escape kwaarg.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1153](https://www.sqlalchemy.org/trac/ticket/1153)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporarily rolled back the “ORDER BY” enhancement from. This feature is on
    hold pending further development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exists() construct won’t “export” its contained list of elements as FROM
    clauses, allowing them to be used more effectively in the columns clause of a
    SELECT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and_() and or_() now generate a ColumnElement, allowing boolean expressions
    as result columns, i.e. select([and_(1, 0)]).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#798](https://www.sqlalchemy.org/trac/ticket/798)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bind params now subclass ColumnElement which allows them to be selectable by
    orm.query (they already had most ColumnElement semantics).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added select_from() method to exists() construct, which becomes more and more
    compatible with a regular select().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added func.min(), func.max(), func.sum() as “generic functions”, which basically
    allows for their return type to be determined automatically. Helps with dates
    on SQLite, decimal types, others.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1160](https://www.sqlalchemy.org/trac/ticket/1160)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added decimal.Decimal as an “auto-detect” type; bind parameters and generic
    functions will set their type to Numeric when a Decimal is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added “sorted_tables” accessor to MetaData, which returns Table objects sorted
    in order of dependency as a list. This deprecates the MetaData.table_iterator()
    method. The “reverse=False” keyword argument has also been removed from util.sort_tables();
    use the Python ‘reversed’ function to reverse the results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1033](https://www.sqlalchemy.org/trac/ticket/1033)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘length’ argument to all Numeric types has been renamed to ‘scale’. ‘length’
    is deprecated and is still accepted with a warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped 0.3-compatibility for user defined types (convert_result_value, convert_bind_param).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘length’ argument to MSInteger, MSBigInteger, MSTinyInteger, MSSmallInteger
    and MSYear has been renamed to ‘display_width’.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added MSMediumInteger type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the function func.utc_timestamp() compiles to UTC_TIMESTAMP, without the parenthesis,
    which seem to get in the way when using in conjunction with executemany().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: limit/offset no longer uses ROW NUMBER OVER to limit rows, and instead uses
    subqueries in conjunction with a special Oracle optimization comment. Allows LIMIT/OFFSET
    to work in conjunction with DISTINCT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has_sequence() now takes the current “schema” argument into account
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: added BFILE to reflected type names
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby mapper couldn’t initialize if a composite primary key referenced
    another table that was not defined yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1161](https://www.sqlalchemy.org/trac/ticket/1161)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[declarative]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed exception throw which would occur when string-based primaryjoin condition
    was used in conjunction with backref.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0beta3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Aug 04 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “entity_name” feature of SQLAlchemy mappers has been removed. For rationale,
    see [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the “autoexpire” flag on Session, sessionmaker(), and scoped_session() has been
    renamed to “expire_on_commit”. It does not affect the expiration behavior of rollback().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed endless loop bug which could occur within a mapper’s deferred load of
    inherited attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a legacy-support flag “_enable_transaction_accounting” flag added to Session
    which when False, disables all transaction-level object accounting, including
    expire on rollback, expire on commit, new/deleted list maintenance, and autoflush
    on begin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘cascade’ parameter to relation() accepts None as a value, which is equivalent
    to no cascades.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A critical fix to dynamic relations allows the “modified” history to be properly
    cleared after a flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined @properties on a class are detected and left in place during mapper
    initialization. This means that a table-bound column of the same name will not
    be mapped at all if a @property is in the way (and the column is not remapped
    to a different name), nor will an instrumented attribute from an inherited class
    be applied. The same rules apply for names excluded using the include_properties/exclude_properties
    collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new SessionExtension hook called after_attach(). This is called at the
    point of attachment for objects via add(), add_all(), delete(), and merge().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mapper which inherits from another, when inheriting the columns of its inherited
    mapper, will use any reassigned property names specified in that inheriting mapper.
    Previously, if “Base” had reassigned “base_id” to the name “id”, “SubBase(Base)”
    would still get an attribute called “base_id”. This could be worked around by
    explicitly stating the column in each submapper as well but this is fairly unworkable
    and also impossible when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1111](https://www.sqlalchemy.org/trac/ticket/1111)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a series of potential race conditions in Session whereby asynchronous
    GC could remove unmodified, no longer referenced items from the session as they
    were present in a list of items to be processed, typically during session.expunge_all()
    and dependent methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some improvements to the _CompileOnAttr mechanism which should reduce the probability
    of “Attribute x was not replaced during compile” warnings. (this generally applies
    to SQLA hackers, like Elixir devs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby the “unsaved, pending instance” FlushError raised for a pending
    orphan would not take superclass mappers into account when generating the list
    of relations responsible for the error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: func.count() with no arguments renders as COUNT(*), equivalent to func.count(text(‘*’)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple label names in ORDER BY expressions render as themselves, and not as
    a re-statement of their corresponding expression. This feature is currently enabled
    only for SQLite, MySQL, and PostgreSQL. It can be enabled on other dialects as
    each is shown to support this behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quoting of MSEnum values for use in CREATE TABLE is now optional & will be quoted
    on demand as required. (Quoting was always optional for use with existing tables.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1110](https://www.sqlalchemy.org/trac/ticket/1110)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-bound attributes sent as arguments to relation()’s remote_side and foreign_keys
    parameters are now accepted, allowing them to be used with declarative. Additionally
    fixed bugs involving order_by being specified as a class-bound attribute in conjunction
    with eager loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarative initialization of Columns adjusted so that non-renamed columns initialize
    in the same way as a non declarative mapper. This allows an inheriting mapper
    to set up its same-named “id” columns in particular such that the parent “id”
    column is favored over the child column, reducing database round trips when this
    value is requested.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “entity_name” feature of SQLAlchemy mappers has been removed. For rationale,
    see [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the “autoexpire” flag on Session, sessionmaker(), and scoped_session() has been
    renamed to “expire_on_commit”. It does not affect the expiration behavior of rollback().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed endless loop bug which could occur within a mapper’s deferred load of
    inherited attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a legacy-support flag “_enable_transaction_accounting” flag added to Session
    which when False, disables all transaction-level object accounting, including
    expire on rollback, expire on commit, new/deleted list maintenance, and autoflush
    on begin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ‘cascade’ parameter to relation() accepts None as a value, which is equivalent
    to no cascades.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A critical fix to dynamic relations allows the “modified” history to be properly
    cleared after a flush().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined @properties on a class are detected and left in place during mapper
    initialization. This means that a table-bound column of the same name will not
    be mapped at all if a @property is in the way (and the column is not remapped
    to a different name), nor will an instrumented attribute from an inherited class
    be applied. The same rules apply for names excluded using the include_properties/exclude_properties
    collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new SessionExtension hook called after_attach(). This is called at the
    point of attachment for objects via add(), add_all(), delete(), and merge().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mapper which inherits from another, when inheriting the columns of its inherited
    mapper, will use any reassigned property names specified in that inheriting mapper.
    Previously, if “Base” had reassigned “base_id” to the name “id”, “SubBase(Base)”
    would still get an attribute called “base_id”. This could be worked around by
    explicitly stating the column in each submapper as well but this is fairly unworkable
    and also impossible when using declarative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1111](https://www.sqlalchemy.org/trac/ticket/1111)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a series of potential race conditions in Session whereby asynchronous
    GC could remove unmodified, no longer referenced items from the session as they
    were present in a list of items to be processed, typically during session.expunge_all()
    and dependent methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some improvements to the _CompileOnAttr mechanism which should reduce the probability
    of “Attribute x was not replaced during compile” warnings. (this generally applies
    to SQLA hackers, like Elixir devs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug whereby the “unsaved, pending instance” FlushError raised for a pending
    orphan would not take superclass mappers into account when generating the list
    of relations responsible for the error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: func.count() with no arguments renders as COUNT(*), equivalent to func.count(text(‘*’)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple label names in ORDER BY expressions render as themselves, and not as
    a re-statement of their corresponding expression. This feature is currently enabled
    only for SQLite, MySQL, and PostgreSQL. It can be enabled on other dialects as
    each is shown to support this behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quoting of MSEnum values for use in CREATE TABLE is now optional & will be quoted
    on demand as required. (Quoting was always optional for use with existing tables.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1110](https://www.sqlalchemy.org/trac/ticket/1110)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-bound attributes sent as arguments to relation()’s remote_side and foreign_keys
    parameters are now accepted, allowing them to be used with declarative. Additionally
    fixed bugs involving order_by being specified as a class-bound attribute in conjunction
    with eager loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[ext]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarative initialization of Columns adjusted so that non-renamed columns initialize
    in the same way as a non declarative mapper. This allows an inheriting mapper
    to set up its same-named “id” columns in particular such that the parent “id”
    column is favored over the child column, reducing database round trips when this
    value is requested.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0beta2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Mon Jul 14 2008'
  prefs: []
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to expired attributes, deferred attributes also load if their data
    is present in the result set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#870](https://www.sqlalchemy.org/trac/ticket/870)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.refresh() raises an informative error message if the list of attributes
    does not include any column-based attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query() raises an informative error message if no columns or mappers are specified.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy loaders now trigger autoflush before proceeding. This allows expire() of
    a collection or scalar relation to function properly in the context of autoflush.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column_property() attributes which represent SQL expressions or columns that
    are not present in the mapped tables (such as those from views) are automatically
    expired after an INSERT or UPDATE, assuming they have not been locally modified,
    so that they are refreshed with the most recent data upon access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#887](https://www.sqlalchemy.org/trac/ticket/887)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed explicit, self-referential joins between two joined-table inheritance
    mappers when using query.join(cls, aliased=True).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1082](https://www.sqlalchemy.org/trac/ticket/1082)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed query.join() when used in conjunction with a columns-only clause and a
    SQL-expression ON clause in the join.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “allow_column_override” flag from mapper() has been removed. This flag is
    virtually always misunderstood. Its specific functionality is available via the
    include_properties/exclude_properties mapper arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired __str__() method on Query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1066](https://www.sqlalchemy.org/trac/ticket/1066)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.bind gets used as a default even when table/mapper specific binds are
    defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new match() operator that performs a full-text search. Supported on PostgreSQL,
    SQLite, MySQL, MS-SQL, and Oracle backends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added prefixes option to Table that accepts a list of strings to insert after
    CREATE in the CREATE TABLE statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1075](https://www.sqlalchemy.org/trac/ticket/1075)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode, UnicodeText types now set “assert_unicode” and “convert_unicode” by
    default, but accept overriding **kwargs for these values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative supports a __table_args__ class variable, which is either a dictionary,
    or tuple of the form (arg1, arg2, …, {kwarg1:value, …}) which contains positional
    + kw arguments to be passed to the Table constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1096](https://www.sqlalchemy.org/trac/ticket/1096)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified SQLite’s representation of “microseconds” to match the output of str(somedatetime),
    i.e. in that the microseconds are represented as fractional seconds in string
    format. This makes SQLA’s SQLite date type compatible with datetimes that were
    saved directly using Pysqlite (which just calls str()). Note that this is incompatible
    with the existing microseconds values in a SQLA 0.4 generated SQLite database
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get the old behavior globally:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To get the behavior on individual DateTime types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then use “t” as the type on the Column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1090](https://www.sqlalchemy.org/trac/ticket/1090)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite Date, DateTime, and Time types only accept Python datetime objects now,
    not strings. If you’d like to format dates as strings yourself with SQLite, use
    a String type. If you’d like them to return datetime objects anyway despite their
    accepting strings as input, make a TypeDecorator around String - SQLA doesn’t
    encourage this pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to expired attributes, deferred attributes also load if their data
    is present in the result set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#870](https://www.sqlalchemy.org/trac/ticket/870)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: session.refresh() raises an informative error message if the list of attributes
    does not include any column-based attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query() raises an informative error message if no columns or mappers are specified.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lazy loaders now trigger autoflush before proceeding. This allows expire() of
    a collection or scalar relation to function properly in the context of autoflush.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column_property() attributes which represent SQL expressions or columns that
    are not present in the mapped tables (such as those from views) are automatically
    expired after an INSERT or UPDATE, assuming they have not been locally modified,
    so that they are refreshed with the most recent data upon access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#887](https://www.sqlalchemy.org/trac/ticket/887)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed explicit, self-referential joins between two joined-table inheritance
    mappers when using query.join(cls, aliased=True).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1082](https://www.sqlalchemy.org/trac/ticket/1082)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed query.join() when used in conjunction with a columns-only clause and a
    SQL-expression ON clause in the join.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “allow_column_override” flag from mapper() has been removed. This flag is
    virtually always misunderstood. Its specific functionality is available via the
    include_properties/exclude_properties mapper arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repaired __str__() method on Query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1066](https://www.sqlalchemy.org/trac/ticket/1066)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session.bind gets used as a default even when table/mapper specific binds are
    defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new match() operator that performs a full-text search. Supported on PostgreSQL,
    SQLite, MySQL, MS-SQL, and Oracle backends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added prefixes option to Table that accepts a list of strings to insert after
    CREATE in the CREATE TABLE statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1075](https://www.sqlalchemy.org/trac/ticket/1075)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[schema]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode, UnicodeText types now set “assert_unicode” and “convert_unicode” by
    default, but accept overriding **kwargs for these values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[extensions]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative supports a __table_args__ class variable, which is either a dictionary,
    or tuple of the form (arg1, arg2, …, {kwarg1:value, …}) which contains positional
    + kw arguments to be passed to the Table constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1096](https://www.sqlalchemy.org/trac/ticket/1096)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sqlite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified SQLite’s representation of “microseconds” to match the output of str(somedatetime),
    i.e. in that the microseconds are represented as fractional seconds in string
    format. This makes SQLA’s SQLite date type compatible with datetimes that were
    saved directly using Pysqlite (which just calls str()). Note that this is incompatible
    with the existing microseconds values in a SQLA 0.4 generated SQLite database
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get the old behavior globally:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To get the behavior on individual DateTime types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then use “t” as the type on the Column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1090](https://www.sqlalchemy.org/trac/ticket/1090)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sqlite]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite Date, DateTime, and Time types only accept Python datetime objects now,
    not strings. If you’d like to format dates as strings yourself with SQLite, use
    a String type. If you’d like them to return datetime objects anyway despite their
    accepting strings as input, make a TypeDecorator around String - SQLA doesn’t
    encourage this pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 0.5.0beta1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Released: Thu Jun 12 2008'
  prefs: []
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global “propigate”->”propagate” change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed 0.4-only bug preventing composite columns from working properly with inheriting
    mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1199](https://www.sqlalchemy.org/trac/ticket/1199)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects. Ported from 0.5.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added ScopedSession.is_active accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-bound accessor can be used as the argument to relation() order_by.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#939](https://www.sqlalchemy.org/trac/ticket/939)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shard_id argument on ShardedSession.execute().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NullPool supports reconnect on failure behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in exception raise when FK columns not present during reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “__init__” trigger/decorator added by mapper now attempts to exactly mirror
    the argument signature of the original __init__. The pass-through for ‘_sa_session’
    is no longer implicit- you must allow for this keyword argument in your constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClassState is renamed to ClassManager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes may supply their own InstrumentationManager by providing a __sa_instrumentation_manager__
    property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom instrumentation may use any mechanism to associate a ClassManager with
    a class and an InstanceState with an instance. Attributes on those objects are
    still the default association mechanism used by SQLAlchemy’s native instrumentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved entity_name, _sa_session_id, and _instance_key from the instance object
    to the instance state. These values are still available in the old way, which
    is now deprecated, using descriptors attached to the class. A deprecation warning
    will be issued when accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.exceptions has been renamed to sqlalchemy.exc. The module may be
    imported under either name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM-related exceptions are now defined in sqlalchemy.orm.exc. ConcurrentModificationError,
    FlushError, and UnmappedColumnError compatibility aliases are installed in sqlalchemy.exc
    during the import of sqlalchemy.orm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.logging has been renamed to sqlalchemy.log.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transitional sqlalchemy.log.SADeprecationWarning alias for the warning’s
    definition in sqlalchemy.exc has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exc.AssertionError has been removed and usage replaced with Python’s built-in
    AssertionError.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The behavior of MapperExtensions attached to multiple, entity_name= primary
    mappers for a single class has been altered. The first mapper() defined for a
    class is the only mapper eligible for the MapperExtension ‘instrument_class’,
    ‘init_instance’ and ‘init_failed’ events. This is backwards incompatible; previously
    the extensions of last mapper defined would receive these events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[firebird]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for returning values from inserts (2.0+ only), updates and deletes
    (2.1+ only).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Index reflection support to Postgres, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: general
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[general]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global “propigate”->”propagate” change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed 0.4-only bug preventing composite columns from working properly with inheriting
    mappers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1199](https://www.sqlalchemy.org/trac/ticket/1199)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects. Ported from 0.5.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added ScopedSession.is_active accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-bound accessor can be used as the argument to relation() order_by.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#939](https://www.sqlalchemy.org/trac/ticket/939)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[orm]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed shard_id argument on ShardedSession.execute().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NullPool supports reconnect on failure behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[sql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[mysql]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in exception raise when FK columns not present during reflection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: oracle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[oracle]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “__init__” trigger/decorator added by mapper now attempts to exactly mirror
    the argument signature of the original __init__. The pass-through for ‘_sa_session’
    is no longer implicit- you must allow for this keyword argument in your constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClassState is renamed to ClassManager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes may supply their own InstrumentationManager by providing a __sa_instrumentation_manager__
    property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom instrumentation may use any mechanism to associate a ClassManager with
    a class and an InstanceState with an instance. Attributes on those objects are
    still the default association mechanism used by SQLAlchemy’s native instrumentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved entity_name, _sa_session_id, and _instance_key from the instance object
    to the instance state. These values are still available in the old way, which
    is now deprecated, using descriptors attached to the class. A deprecation warning
    will be issued when accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.exceptions has been renamed to sqlalchemy.exc. The module may be
    imported under either name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM-related exceptions are now defined in sqlalchemy.orm.exc. ConcurrentModificationError,
    FlushError, and UnmappedColumnError compatibility aliases are installed in sqlalchemy.exc
    during the import of sqlalchemy.orm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqlalchemy.logging has been renamed to sqlalchemy.log.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transitional sqlalchemy.log.SADeprecationWarning alias for the warning’s
    definition in sqlalchemy.exc has been removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exc.AssertionError has been removed and usage replaced with Python’s built-in
    AssertionError.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[no_tags]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The behavior of MapperExtensions attached to multiple, entity_name= primary
    mappers for a single class has been altered. The first mapper() defined for a
    class is the only mapper eligible for the MapperExtension ‘instrument_class’,
    ‘init_instance’ and ‘init_failed’ events. This is backwards incompatible; previously
    the extensions of last mapper defined would receive these events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[firebird]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for returning values from inserts (2.0+ only), updates and deletes
    (2.1+ only).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**[postgres]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Index reflection support to Postgres, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
