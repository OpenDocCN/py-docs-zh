- en: 0.5 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.5 变更日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_05.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_05.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_05.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_05.html)
- en: 0.5.9
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.9
- en: no release date
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: sql
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed erroneous self_group() call in expression package.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表达式包中修复了错误的self_group()调用。
- en: 'References: [#1661](https://www.sqlalchemy.org/trac/ticket/1661)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1661](https://www.sqlalchemy.org/trac/ticket/1661)
- en: 0.5.8
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.8
- en: 'Released: Sat Jan 16 2010'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010 年 1 月 16 日
- en: sql
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The copy() method on Column now supports uninitialized, unnamed Column objects.
    This allows easy creation of declarative helpers which place common columns on
    multiple subclasses.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 上的 copy() 方法现在支持未初始化、未命名的 Column 对象。这允许在多个子类上放置常见列的声明性助手的简单创建。
- en: '**[sql]**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Default generators like Sequence() translate correctly across a copy() operation.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似 Sequence() 的默认生成器在复制操作中正确转换。
- en: '**[sql]**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Sequence() and other DefaultGenerator objects are accepted as the value for
    the “default” and “onupdate” keyword arguments of Column, in addition to being
    accepted positionally.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence() 和其他 DefaultGenerator 对象现在可以作为 Column 的“default”和“onupdate”关键字参数的值被接受，除了被接受为位置参数。
- en: '**[sql]**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed a column arithmetic bug that affected column correspondence for cloned
    selectables which contain free-standing column expressions. This bug is generally
    only noticeable when exercising newer ORM behavior only available in 0.6 via,
    but is more correct at the SQL expression level as well.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个影响包含独立列表达式的克隆可选择项的列算术错误。这个 bug 通常只在使用 0.6 版本中仅在 ORM 行为中出现时才会注意到，但在 SQL
    表达式级别上更加正确。
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)
- en: postgresql
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The extract() function, which was slightly improved in 0.5.7, needed a lot more
    work to generate the correct typecast (the typecasts appear to be necessary in
    PG’s EXTRACT quite a lot of the time). The typecast is now generated using a rule
    dictionary based on PG’s documentation for date/time/interval arithmetic. It also
    accepts text() constructs again, which was broken in 0.5.7.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: extract() 函数在 0.5.7 中略有改进，但需要更多工作来生成正确的类型转换（在 PG 的 EXTRACT 中，类型转换在很多情况下都是必要的）。现在使用基于
    PG 文档的日期/时间/间隔算术的规则字典生成类型转换。它再次接受 text() 构造，这在 0.5.7 中被破坏。
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1647](https://www.sqlalchemy.org/trac/ticket/1647)
- en: misc
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[firebird]**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Recognize more errors as disconnections.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将更多错误识别为断开连接。
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1646](https://www.sqlalchemy.org/trac/ticket/1646)
- en: 0.5.7
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.7
- en: 'Released: Sat Dec 26 2009'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009 年 12 月 26 日
- en: orm
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() now works with the automatically generated subquery that results
    when you say “query(Parent).join(Parent.somejoinedsubclass)”, i.e. when Parent
    joins to a joined-table-inheritance subclass. Previously contains_eager() would
    erroneously add the subclass table to the query separately producing a cartesian
    product. An example is in the ticket description.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager() 现在与自动生成的子查询一起工作，当您说“query(Parent).join(Parent.somejoinedsubclass)”时会产生，即当
    Parent 加入到一个联接表继承子类时。以前，contains_eager() 会错误地将子类表单独添加到查询中，产生笛卡尔积。票据描述中有一个示例。
- en: 'References: [#1543](https://www.sqlalchemy.org/trac/ticket/1543)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1543](https://www.sqlalchemy.org/trac/ticket/1543)
- en: '**[orm]**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.options() now only propagate to loaded objects for potential further sub-loads
    only for options where such behavior is relevant, keeping various unserializable
    options like those generated by contains_eager() out of individual instance states.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.options() 现在仅对于相关行为的选项才传播到已加载对象，以进一步潜在地加载更多子加载，保持各种不可序列化的选项（如由 contains_eager()
    生成的选项）不会进入各个实例状态。
- en: 'References: [#1553](https://www.sqlalchemy.org/trac/ticket/1553)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1553](https://www.sqlalchemy.org/trac/ticket/1553)
- en: '**[orm]**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.execute() now locates table- and mapper-specific binds based on a passed
    in expression which is an insert()/update()/delete() construct.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.execute() 现在根据传入的表达式（insert()/update()/delete() 构造）定位特定于表和映射器的绑定。
- en: 'References: [#1054](https://www.sqlalchemy.org/trac/ticket/1054)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1054](https://www.sqlalchemy.org/trac/ticket/1054)
- en: '**[orm]**'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() now properly overwrites a many-to-one or uselist=False attribute
    to None if the attribute is also None in the given object to be merged.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge()现在正确地将many-to-one或uselist=False属性覆盖为None，如果给定要合并的对象中该属性也为None。
- en: '**[orm]**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a needless select which would occur when merging transient objects that
    contained a null primary key identifier.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在合并包含空主键标识符的瞬态对象时会发生不必要的select的问题。
- en: 'References: [#1618](https://www.sqlalchemy.org/trac/ticket/1618)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1618](https://www.sqlalchemy.org/trac/ticket/1618)
- en: '**[orm]**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mutable collection passed to the “extension” attribute of relation(), column_property()
    etc. will not be mutated or shared among multiple instrumentation calls, preventing
    duplicate extensions, such as backref populators, from being inserted into the
    list.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给relation()、column_property()等的“extension”属性的可变集合不会被修改或在多个instrumentation调用之间共享，防止重复的扩展（例如backref
    populators）被插入到列表中。
- en: 'References: [#1585](https://www.sqlalchemy.org/trac/ticket/1585)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1585](https://www.sqlalchemy.org/trac/ticket/1585)
- en: '**[orm]**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the call to get_committed_value() on CompositeProperty.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对CompositeProperty上get_committed_value()的调用。
- en: 'References: [#1504](https://www.sqlalchemy.org/trac/ticket/1504)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1504](https://www.sqlalchemy.org/trac/ticket/1504)
- en: '**[orm]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query would crash if a join() with no clear “left” side were
    called when a non-mapped column entity appeared in the columns list.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当在列列表中出现非映射列实体时，如果调用了没有明确“左”侧的join()，Query会崩溃。
- en: 'References: [#1602](https://www.sqlalchemy.org/trac/ticket/1602)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1602](https://www.sqlalchemy.org/trac/ticket/1602)
- en: '**[orm]**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby composite columns wouldn’t load properly when configured on
    a joined-table subclass, introduced in version 0.5.6 as a result of the fix for.
    thx to Scott Torborg.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在联接表子类上配置复合列时，由于0.5.6版本中为修复而引入的问题，复合列加载不正确的bug。感谢Scott Torborg。
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)
- en: '**[orm]**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “use get” behavior of many-to-one relations, i.e. that a lazy load will
    fallback to the possibly cached query.get() value, now works across join conditions
    where the two compared types are not exactly the same class, but share the same
    “affinity” - i.e. Integer and SmallInteger. Also allows combinations of reflected
    and non-reflected types to work with 0.5 style type reflection, such as PGText/Text
    (note 0.6 reflects types as their generic versions).
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许多对一关系的“use get”行为，即懒加载将回退到可能缓存的query.get()值，现在在两个比较类型不完全相同类，但共享相同“亲和性” - 即Integer和SmallInteger的连接条件中起作用。还允许反射和非反射类型的组合与0.5风格类型反射一起工作，例如PGText/Text（请注意0.6将类型反射为它们的通用版本）。
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1556](https://www.sqlalchemy.org/trac/ticket/1556)
- en: '**[orm]**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.update() when passing Cls.attribute as keys in the value
    dict and using synchronize_session=’expire’ (‘fetch’ in 0.6).
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.update()中将Cls.attribute作为值字典中的键传递，并使用synchronize_session='expire'（0.6中为'fetch'）时的bug。
- en: 'References: [#1436](https://www.sqlalchemy.org/trac/ticket/1436)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1436](https://www.sqlalchemy.org/trac/ticket/1436)
- en: sql
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in two-phase transaction whereby commit() method didn’t set the full
    state which allows subsequent close() call to succeed.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两阶段事务中commit()方法未设置完整状态的bug，这允许随后的close()调用成功。
- en: 'References: [#1603](https://www.sqlalchemy.org/trac/ticket/1603)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1603](https://www.sqlalchemy.org/trac/ticket/1603)
- en: '**[sql]**'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed the “numeric” paramstyle, which apparently is the default paramstyle used
    by Informixdb.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“numeric” paramstyle，显然这是Informixdb使用的默认paramstyle。
- en: '**[sql]**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repeat expressions in the columns clause of a select are deduped based on the
    identity of each clause element, not the actual string. This allows positional
    elements to render correctly even if they all render identically, such as “qmark”
    style bind parameters.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select的列子句中重复表达式根据每个子句元素的标识而不是实际字符串进行去重。这允许位置元素正确呈现，即使它们都呈现相同，例如“qmark”样式绑定参数。
- en: 'References: [#1574](https://www.sqlalchemy.org/trac/ticket/1574)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1574](https://www.sqlalchemy.org/trac/ticket/1574)
- en: '**[sql]**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The cursor associated with connection pool connections (i.e. _CursorFairy) now
    proxies __iter__() to the underlying cursor correctly.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与连接池连接相关联的光标（即_CursorFairy）现在正确地将__iter__()代理到底层光标。
- en: 'References: [#1632](https://www.sqlalchemy.org/trac/ticket/1632)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1632](https://www.sqlalchemy.org/trac/ticket/1632)
- en: '**[sql]**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: types now support an “affinity comparison” operation, i.e. that an Integer/SmallInteger
    are “compatible”, or a Text/String, PickleType/Binary, etc. Part of.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型现在支持“亲和性比较”操作，即Integer/SmallInteger是“兼容的”，或者Text/String，PickleType/Binary等。的一部分。
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1556](https://www.sqlalchemy.org/trac/ticket/1556)
- en: '**[sql]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug preventing alias() of an alias() from being cloned or adapted (occurs
    frequently in ORM operations).
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止对别名()的别名()进行克隆或适应的错误（在ORM操作中经常发生）。
- en: 'References: [#1641](https://www.sqlalchemy.org/trac/ticket/1641)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1641](https://www.sqlalchemy.org/trac/ticket/1641)
- en: postgresql
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added support for reflecting the DOUBLE PRECISION type, via a new postgres.PGDoublePrecision
    object. This is postgresql.DOUBLE_PRECISION in 0.6.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对反射DOUBLE PRECISION类型的支持，通过一个新的postgres.PGDoublePrecision对象。这在0.6中是postgresql.DOUBLE_PRECISION。
- en: 'References: [#1085](https://www.sqlalchemy.org/trac/ticket/1085)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1085](https://www.sqlalchemy.org/trac/ticket/1085)
- en: '**[postgresql]**'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added support for reflecting the INTERVAL YEAR TO MONTH and INTERVAL DAY TO
    SECOND syntaxes of the INTERVAL type.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对反射INTERVAL类型的INTERVAL YEAR TO MONTH和INTERVAL DAY TO SECOND语法的支持。
- en: 'References: [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#460](https://www.sqlalchemy.org/trac/ticket/460)
- en: '**[postgresql]**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Corrected the “has_sequence” query to take current schema, or explicit sequence-stated
    schema, into account.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了“has_sequence”查询以考虑当前模式，或显式序列指定的模式。
- en: 'References: [#1576](https://www.sqlalchemy.org/trac/ticket/1576)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1576](https://www.sqlalchemy.org/trac/ticket/1576)
- en: '**[postgresql]**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the behavior of extract() to apply operator precedence rules to the “::”
    operator when applying the “timestamp” cast - ensures proper parenthesization.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了extract()的行为，以应用运算符优先规则到“::”运算符，当应用“timestamp”转换时确保正确的括号。
- en: 'References: [#1611](https://www.sqlalchemy.org/trac/ticket/1611)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1611](https://www.sqlalchemy.org/trac/ticket/1611)
- en: sqlite
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite dialect properly generates CREATE INDEX for a table that is in an alternate
    schema.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite方言正确生成了一个在备用模式中的表的CREATE INDEX。
- en: 'References: [#1439](https://www.sqlalchemy.org/trac/ticket/1439)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1439](https://www.sqlalchemy.org/trac/ticket/1439)
- en: mssql
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changed the name of TrustedConnection to Trusted_Connection when constructing
    pyodbc connect arguments
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造pyodbc连接参数时，将TrustedConnection的名称更改为Trusted_Connection
- en: 'References: [#1561](https://www.sqlalchemy.org/trac/ticket/1561)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1561](https://www.sqlalchemy.org/trac/ticket/1561)
- en: oracle
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The “table_names” dialect function, used by MetaData .reflect(), omits “index
    overflow tables”, a system table generated by Oracle when “index only tables”
    with overflow are used. These tables aren’t accessible via SQL and can’t be reflected.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “table_names”方言函数，被MetaData .reflect()使用，省略了“索引溢出表”，这是Oracle在使用“溢出索引表”时生成的系统表。这些表无法通过SQL访问，也无法反射。
- en: 'References: [#1637](https://www.sqlalchemy.org/trac/ticket/1637)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1637](https://www.sqlalchemy.org/trac/ticket/1637)
- en: misc
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: A column can be added to a joined-table declarative superclass after the class
    has been constructed (i.e. via class-level attribute assignment), and the column
    will be propagated down to subclasses. This is the reverse situation as that of,
    fixed in 0.5.6.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造类后（即通过类级属性赋值），可以向连接表声明的超类添加列，并且列将传播到子类。这与0.5.6中修复的情况相反。
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)
- en: '**[ext]**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed a slight inaccuracy in the sharding example. Comparing equivalence of
    columns in the ORM is best accomplished using col1.shares_lineage(col2).
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了分片示例中的轻微不准确之处。在ORM中比较列的等价性最好使用col1.shares_lineage(col2)来实现。
- en: 'References: [#1491](https://www.sqlalchemy.org/trac/ticket/1491)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1491](https://www.sqlalchemy.org/trac/ticket/1491)
- en: '**[ext]**'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Removed unused load() method from ShardedQuery.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从ShardedQuery中删除未使用的load()方法。
- en: 'References: [#1606](https://www.sqlalchemy.org/trac/ticket/1606)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1606](https://www.sqlalchemy.org/trac/ticket/1606)
- en: 0.5.6
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.6
- en: 'Released: Sat Sep 12 2009'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年9月12日 星期六
- en: orm
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby inheritance discriminator part of a composite primary key
    would fail on updates. Continuation of.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了继承鉴别器作为复合主键的一部分在更新时失败的错误。的延续。
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1300](https://www.sqlalchemy.org/trac/ticket/1300)
- en: '**[orm]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which disallowed one side of a many-to-many bidirectional reference
    to declare itself as “viewonly”
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug不允许双向多对多引用的一侧声明自己为“viewonly”。
- en: 'References: [#1507](https://www.sqlalchemy.org/trac/ticket/1507)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1507](https://www.sqlalchemy.org/trac/ticket/1507)
- en: '**[orm]**'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an assertion that prevents a @validates function or other AttributeExtension
    from loading an unloaded collection such that internal state may be corrupted.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个断言，防止@validates函数或其他AttributeExtension加载未加载的集合，从而可能损坏内部状态。
- en: 'References: [#1526](https://www.sqlalchemy.org/trac/ticket/1526)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1526](https://www.sqlalchemy.org/trac/ticket/1526)
- en: '**[orm]**'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented two entities from mutually replacing each other’s
    primary key values within a single flush() for some orderings of operations.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了两个实体在单个flush()中相互替换主键值的某些操作顺序。
- en: 'References: [#1519](https://www.sqlalchemy.org/trac/ticket/1519)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1519](https://www.sqlalchemy.org/trac/ticket/1519)
- en: '**[orm]**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an obscure issue whereby a joined-table subclass with a self-referential
    eager load on the base class would populate the related object’s “subclass” table
    with data from the “subclass” table of the parent.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个隐晦的问题，即具有基类上自引用的急切加载的连接表子类将使用来自父类的“子类”表的数据填充相关对象的“子类”表。
- en: 'References: [#1485](https://www.sqlalchemy.org/trac/ticket/1485)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1485](https://www.sqlalchemy.org/trac/ticket/1485)
- en: '**[orm]**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relations() now have greater ability to be “overridden”, meaning a subclass
    that explicitly specifies a relation() overriding that of the parent class will
    be honored during a flush. This is currently to support many-to-many relations
    from concrete inheritance setups. Outside of that use case, YMMV.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relations()现在具有更大的“覆盖”能力，意味着明确指定覆盖父类关系的子类的关系()将在刷新期间被尊重。目前支持从具体继承设置中的多对多关系。除此用例外，效果可能有所不同。
- en: 'References: [#1477](https://www.sqlalchemy.org/trac/ticket/1477)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1477](https://www.sqlalchemy.org/trac/ticket/1477)
- en: '**[orm]**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Squeezed a few more unnecessary “lazy loads” out of relation(). When a collection
    is mutated, many-to-one backrefs on the other side will not fire off to load the
    “old” value, unless “single_parent=True” is set. A direct assignment of a many-to-one
    still loads the “old” value in order to update backref collections on that value,
    which may be present in the session already, thus maintaining the 0.5 behavioral
    contract.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从relation()中挤出了更多不必要的“延迟加载”。当集合发生变化时，另一侧的多对一反向引用不会加载“旧”值，除非设置了“single_parent=True”。直接分配多对一仍会加载“旧”值，以便更新该值上的反向引用集合，该值可能已经存在于会话中，从而保持0.5行为契约。
- en: 'References: [#1483](https://www.sqlalchemy.org/trac/ticket/1483)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1483](https://www.sqlalchemy.org/trac/ticket/1483)
- en: '**[orm]**'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby a load/refresh of joined table inheritance attributes which
    were based on column_property() or similar would fail to evaluate.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即基于column_property()或类似属性的加载/刷新连接表继承属性将无法评估。
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1480](https://www.sqlalchemy.org/trac/ticket/1480)
- en: '**[orm]**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved support for MapperProperty objects overriding that of an inherited
    mapper for non-concrete inheritance setups - attribute extensions won’t randomly
    collide with each other.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对MapperProperty对象的支持，覆盖了非具体继承设置中继承映射器的属性扩展不会随机冲突。
- en: 'References: [#1488](https://www.sqlalchemy.org/trac/ticket/1488)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1488](https://www.sqlalchemy.org/trac/ticket/1488)
- en: '**[orm]**'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: UPDATE and DELETE do not support ORDER BY, LIMIT, OFFSET, etc. in standard SQL.
    Query.update() and Query.delete() now raise an exception if any of limit(), offset(),
    order_by(), group_by(), or distinct() have been called.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准SQL中不支持UPDATE和DELETE支持ORDER BY、LIMIT、OFFSET等。如果调用了limit()、offset()、order_by()、group_by()或distinct()，Query.update()和Query.delete()现在会引发异常。
- en: 'References: [#1487](https://www.sqlalchemy.org/trac/ticket/1487)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1487](https://www.sqlalchemy.org/trac/ticket/1487)
- en: '**[orm]**'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added AttributeExtension to sqlalchemy.orm.__all__
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将AttributeExtension添加到sqlalchemy.orm.__all__
- en: '**[orm]**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved error message when query() is called with a non-SQL /entity expression.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用非SQL /实体表达式调用query()时，改进了错误消息。
- en: 'References: [#1476](https://www.sqlalchemy.org/trac/ticket/1476)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1476](https://www.sqlalchemy.org/trac/ticket/1476)
- en: '**[orm]**'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using False or 0 as a polymorphic discriminator now works on the base class
    as well as a subclass.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在基类和子类中使用False或0作为多态鉴别器也能正常工作。
- en: 'References: [#1440](https://www.sqlalchemy.org/trac/ticket/1440)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1440](https://www.sqlalchemy.org/trac/ticket/1440)
- en: '**[orm]**'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added enable_assertions(False) to Query which disables the usual assertions
    for expected state - used by Query subclasses to engineer custom state.. See [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    for an example.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询中添加了`enable_assertions(False)`，用于禁用对预期状态的通常断言 - 用于由查询子类工程化自定义状态。参见 [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    以获得示例。
- en: 'References: [#1424](https://www.sqlalchemy.org/trac/ticket/1424)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1424](https://www.sqlalchemy.org/trac/ticket/1424)
- en: '**[orm]**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed recursion issue which occurred if a mapped object’s __len__() or __nonzero__()
    method resulted in state changes.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个递归问题，该问题在映射对象的`__len__()`或`__nonzero__()`方法导致状态更改时发生。
- en: 'References: [#1501](https://www.sqlalchemy.org/trac/ticket/1501)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1501](https://www.sqlalchemy.org/trac/ticket/1501)
- en: '**[orm]**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed incorrect exception raise in Weak/StrongIdentityMap.add()
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Weak/StrongIdentityMap.add()`中的错误异常。
- en: 'References: [#1506](https://www.sqlalchemy.org/trac/ticket/1506)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1506](https://www.sqlalchemy.org/trac/ticket/1506)
- en: '**[orm]**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message for “could not find a FROM clause” in query.join() which
    would fail to issue correctly if the query was against a pure SQL construct.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对于“无法找到FROM子句”在`query.join()`中的错误消息，如果查询针对纯SQL结构，则无法正确发出。
- en: 'References: [#1522](https://www.sqlalchemy.org/trac/ticket/1522)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1522](https://www.sqlalchemy.org/trac/ticket/1522)
- en: '**[orm]**'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a somewhat hypothetical issue which would result in the wrong primary
    key being calculated for a mapper using the old polymorphic_union function - but
    this is old stuff.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个有点假设性的问题，该问题会导致使用旧的`polymorphic_union`函数的映射器计算出错误的主键 - 但这是旧问题。
- en: 'References: [#1486](https://www.sqlalchemy.org/trac/ticket/1486)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1486](https://www.sqlalchemy.org/trac/ticket/1486)
- en: sql
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed column.copy() to copy defaults and onupdates.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`column.copy()`以复制默认值和onupdates。
- en: 'References: [#1373](https://www.sqlalchemy.org/trac/ticket/1373)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1373](https://www.sqlalchemy.org/trac/ticket/1373)
- en: '**[sql]**'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed a bug in extract() introduced in 0.5.4 whereby the string “field” argument
    was getting treated as a ClauseElement, causing various errors within more complex
    SQL transformations.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.5.4中引入的`extract()`中的一个错误，其中字符串“field”参数被视为ClauseElement，导致更复杂的SQL转换中出现各种错误。
- en: '**[sql]**'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Unary expressions such as DISTINCT propagate their type handling to result sets,
    allowing conversions like unicode and such to take place.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一元表达式（例如`DISTINCT`）将其类型处理传播到结果集，允许进行unicode等转换。
- en: 'References: [#1420](https://www.sqlalchemy.org/trac/ticket/1420)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1420](https://www.sqlalchemy.org/trac/ticket/1420)
- en: '**[sql]**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in Table and Column whereby passing empty dict for “info” argument
    would raise an exception.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在`Table`和`Column`中传递空字典作为“info”参数会引发异常的错误。
- en: 'References: [#1482](https://www.sqlalchemy.org/trac/ticket/1482)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1482](https://www.sqlalchemy.org/trac/ticket/1482)
- en: oracle
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Backported 0.6 fix for Oracle alias names not getting truncated.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Oracle别名名称未被截断的0.6修复进行回溯。
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1309](https://www.sqlalchemy.org/trac/ticket/1309)
- en: misc
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[ext]**'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The collection proxies produced by associationproxy are now pickleable. A user-defined
    proxy_factory however is still not pickleable unless it defines __getstate__ and
    __setstate__.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由`associationproxy`生成的集合代理现在可以进行pickle化。 但是，用户定义的`proxy_factory`仍然不能进行pickle化，除非它定义了`__getstate__`和`__setstate__`。
- en: 'References: [#1446](https://www.sqlalchemy.org/trac/ticket/1446)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1446](https://www.sqlalchemy.org/trac/ticket/1446)
- en: '**[ext]**'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Declarative will raise an informative exception if __table_args__ is passed
    as a tuple with no dict argument. Improved documentation.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将`__table_args__`作为没有字典参数的元组传递，则`Declarative`将引发一条信息性异常。 改进了文档。
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1468](https://www.sqlalchemy.org/trac/ticket/1468)
- en: '**[ext]**'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Table objects declared in the MetaData can now be used in string expressions
    sent to primaryjoin/secondaryjoin/ secondary - the name is pulled from the MetaData
    of the declarative base.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`MetaData`中声明的`Table`对象现在可以在发送到`primaryjoin/secondaryjoin/secondary`的字符串表达式中使用
    - 名称从声明基础的`MetaData`中提取。
- en: 'References: [#1527](https://www.sqlalchemy.org/trac/ticket/1527)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1527](https://www.sqlalchemy.org/trac/ticket/1527)
- en: '**[ext]**'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: A column can be added to a joined-table subclass after the class has been constructed
    (i.e. via class-level attribute assignment). The column is added to the underlying
    Table as always, but now the mapper will rebuild its “join” to include the new
    column, instead of raising an error about “no such column, use column_property()
    instead”.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造类之后（即通过类级别属性赋值），可以向联接表子类添加列。该列始终会添加到底层的 Table 中，但现在映射器将重建其“join”以包括新列，而不是引发关于“没有这样的列，请使用
    column_property()”的错误。
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1523](https://www.sqlalchemy.org/trac/ticket/1523)
- en: '**[test]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[test]**'
- en: Added examples into the test suite so they get exercised regularly and cleaned
    up a couple deprecation warnings.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将示例添加到测试套件中，以便定期进行测试，并清理掉一些不必要的弃用警告。
- en: 0.5.5
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.5
- en: 'Released: Mon Jul 13 2009'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年7月13日星期一
- en: general
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: unit tests have been migrated from unittest to nose. See README.unittests for
    information on how to run the tests.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试已从 unittest 迁移到 nose。有关如何运行测试的信息，请参阅 README.unittests。
- en: 'References: [#970](https://www.sqlalchemy.org/trac/ticket/970)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#970](https://www.sqlalchemy.org/trac/ticket/970)
- en: orm
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “foreign_keys” argument of relation() will now propagate automatically to
    the backref in the same way that primaryjoin and secondaryjoin do. For the extremely
    rare use case where the backref of a relation() has intentionally different “foreign_keys”
    configured, both sides now need to be configured explicitly (if they do in fact
    require this setting, see the next note…).
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation() 的 “foreign_keys” 参数现在会自动传播到相同方式的 backref 中，就像 primaryjoin 和 secondaryjoin
    一样。对于极其罕见的情况，backref 的 relation() 有意配置了不同的 “foreign_keys”，现在双方都需要显式配置（如果它们实际上需要此设置，请参见下一个注释…）。
- en: '**[orm]**'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: …the only known (and really, really rare) use case where a different foreign_keys
    setting was used on the forwards/backwards side, a composite foreign key that
    partially points to its own columns, has been enhanced such that the fk->itself
    aspect of the relation won’t be used to determine relation direction.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: …唯一已知的（而且真的很少见）使用案例，其中在前向/后向方面使用了不同的 foreign_keys 设置，即部分指向自己列的复合外键，已得到增强，以便不再使用
    fk->itself 方面来确定关系方向。
- en: '**[orm]**'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.mapper is now *deprecated*.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.mapper 现在已被 *弃用*。
- en: Call session.add() if you’d like a free-standing object to be part of your session.
    Otherwise, a DIY version of Session.mapper is now documented at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    The method will remain deprecated throughout 0.6.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您希望一个独立的对象成为会话的一部分，请调用session.add()。否则，现在在 [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    文档中记录了 Session.mapper 的 DIY 版本。该方法在 0.6 版本中仍将被弃用。
- en: '**[orm]**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed Query being able to join() from individual columns of a joined-table subclass
    entity, i.e. query(SubClass.foo, SubClass.bar).join(<anything>). In most cases,
    an error “Could not find a FROM clause to join from” would be raised. In a few
    others, the result would be returned in terms of the base class rather than the
    subclass - so applications which relied on this erroneous result need to be adjusted.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 可以从联接表子类实体的单个列进行 join() 的 bug，即 query(SubClass.foo, SubClass.bar).join(<anything>)。在大多数情况下，会引发错误“找不到要从中联接的
    FROM 子句”。在另外一些情况下，结果将以基类而不是子类的方式返回，因此依赖于这个错误结果的应用程序需要进行调整。
- en: 'References: [#1431](https://www.sqlalchemy.org/trac/ticket/1431)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1431](https://www.sqlalchemy.org/trac/ticket/1431)
- en: '**[orm]**'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a bug involving contains_eager(), which would apply itself to a secondary
    (i.e. lazy) load in a particular rare case, producing cartesian products. improved
    the targeting of query.options() on secondary loads overall.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个涉及 contains_eager() 的 bug，在一个特定的罕见情况下，它会应用于次要（即惰性）加载，产生笛卡尔积。改进了对次要加载的 query.options()
    的定位。
- en: 'References: [#1461](https://www.sqlalchemy.org/trac/ticket/1461)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1461](https://www.sqlalchemy.org/trac/ticket/1461)
- en: '**[orm]**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug introduced in 0.5.4 whereby Composite types fail when default-holding
    columns are flushed.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.5.4 版本中引入的一个 bug，即当默认保持列被刷新时，组合类型失败。
- en: '**[orm]**'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed another 0.5.4 bug whereby mutable attributes (i.e. PickleType) wouldn’t
    be deserialized correctly when the whole object was serialized.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个 0.5.4 版本的 bug，即当整个对象被序列化时，可变属性（即 PickleType）不会被正确地反序列化。
- en: 'References: [#1426](https://www.sqlalchemy.org/trac/ticket/1426)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1426](https://www.sqlalchemy.org/trac/ticket/1426)
- en: '**[orm]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby session.is_modified() would raise an exception if any synonyms
    were in use.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果使用了任何同义词，session.is_modified() 将引发异常的错误。
- en: '**[orm]**'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed potential memory leak whereby previously pickled objects placed back in
    a session would not be fully garbage collected unless the Session were explicitly
    closed out.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了以前 pickled 对象重新放回会话时可能不会完全垃圾回收的潜在内存泄漏。
- en: '**[orm]**'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby list-based attributes, like pickletype and PGArray, failed
    to be merged() properly.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于列表的属性（如 pickletype 和 PGArray）未能正确合并的错误。
- en: '**[orm]**'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired non-working attributes.set_committed_value function.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了不起作用的 attributes.set_committed_value 函数。
- en: '**[orm]**'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Trimmed the pickle format for InstanceState which should further reduce the
    memory footprint of pickled instances. The format should be backwards compatible
    with that of 0.5.4 and previous.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 精简了 InstanceState 的 pickle 格式，这应该进一步减少 pickled 实例的内存占用。该格式应与 0.5.4 及之前的版本向后兼容。
- en: '**[orm]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: sqlalchemy.orm.join and sqlalchemy.orm.outerjoin are now added to __all__ in
    sqlalchemy.orm.*.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.join 和 sqlalchemy.orm.outerjoin 现在已添加到 sqlalchemy.orm.* 的 __all__
    中。
- en: 'References: [#1463](https://www.sqlalchemy.org/trac/ticket/1463)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1463](https://www.sqlalchemy.org/trac/ticket/1463)
- en: '**[orm]**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query exception raise would fail when a too-short composite
    primary key value were passed to get().
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当传递给 get() 的复合主键值过短时，Query 异常引发失败的错误。
- en: 'References: [#1458](https://www.sqlalchemy.org/trac/ticket/1458)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1458](https://www.sqlalchemy.org/trac/ticket/1458)
- en: sql
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed an obscure feature of execute() (including connection, engine, Session)
    whereby a bindparam() construct can be sent as a key to the params dictionary.
    This usage is undocumented and is at the core of an issue whereby the bindparam()
    object created implicitly by a text() construct may have the same hash value as
    a string placed in the params dictionary and may result in an inappropriate match
    when computing the final bind parameters. Internal checks for this condition would
    add significant latency to the critical task of parameter rendering, so the behavior
    is removed. This is a backwards incompatible change for any application that may
    have been using this feature, however the feature has never been documented.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了 execute() 的一个晦涩特性（包括 connection、engine、Session），其中 bindparam() 构造可以作为 params
    字典的键发送。这种用法未记录在案，并且是一个问题的核心，即由 text() 构造隐式创建的 bindparam() 对象可能具有与放置在 params 字典中的字符串相同的哈希值，并且在计算最终绑定参数时可能导致不适当的匹配。对于可能使用此功能的任何应用程序，此条件的内部检查将显著增加关键任务参数呈现的延迟，因此移除了此行为。这是一个向后不兼容的更改，但该功能从未被记录。
- en: misc
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engine/pool]**'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Implemented recreate() for StaticPool.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 StaticPool 实现了 recreate()。
- en: 0.5.4p2
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.4p2
- en: 'Released: Tue May 26 2009'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009 年 5 月 26 日
- en: sql
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repaired the printing of SQL exceptions which are not based on parameters or
    are not executemany() style.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于参数或不是 executemany() 样式的 SQL 异常打印。
- en: postgresql
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Deprecated the hardcoded TIMESTAMP function, which when used as func.TIMESTAMP(value)
    would render “TIMESTAMP value”. This breaks on some platforms as PostgreSQL doesn’t
    allow bind parameters to be used in this context. The hard-coded uppercase is
    also inappropriate and there’s lots of other PG casts that we’d need to support.
    So instead, use text constructs i.e. select([“timestamp ‘12/05/09’”]).
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 废弃了硬编码的 TIMESTAMP 函数，当作为 func.TIMESTAMP(value) 使用时，会呈现“TIMESTAMP value”。这在某些平台上会中断，因为
    PostgreSQL 不允许在此上下文中使用绑定��数。硬编码的大写也不合适，我们需要支持许多其他 PG 强制转换。因此，改用文本构造，即 select([“timestamp
    ‘12/05/09’”])。
- en: 0.5.4p1
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.4p1
- en: 'Released: Mon May 18 2009'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009 年 5 月 18 日
- en: orm
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an attribute error introduced in 0.5.4 which would occur when merge()
    was used with an incomplete object.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.5.4 版本中引入的一个属性错误，当使用 merge() 与不完整对象时会出现。
- en: 0.5.4
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.4
- en: 'Released: Sun May 17 2009'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009 年 5 月 17 日
- en: orm
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Significant performance enhancements regarding Sessions/flush() in conjunction
    with large mapper graphs, large numbers of objects:'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在会话/flush() 与大型映射图、大量对象一起使用时，有关性能的显著增强：
- en: Removed all* O(N) scanning behavior from the flush() process, i.e. operations
    that were scanning the full session, including an extremely expensive one that
    was erroneously assuming primary key values were changing when this was not the
    case.
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 flush() 过程中移除了所有* O(N) 扫描行为，即扫描整个会话的操作，包括一个极其昂贵的操作，错误地假设主键值正在更改，而实际上并非如此。
- en: one edge case remains which may invoke a full scan, if an existing primary key
    attribute is modified to a new value.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然存在一个特例，可能会调用完整扫描，如果现有的主键属性被修改为新值。
- en: The Session’s “weak referencing” behavior is now *full* - no strong references
    whatsoever are made to a mapped object or related items/collections in its __dict__.
    Backrefs and other cycles in objects no longer affect the Session’s ability to
    lose all references to unmodified objects. Objects with pending changes still
    are maintained strongly until flush.
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话的“弱引用”行为现在是*完全*的 - 对映射对象或相关项目/集合在其__dict__中不会有任何强引用。对象中的反向引用和其他循环不再影响会话丢失对未修改对象的所有引用的能力。具有待处理更改的对象仍然会被强制保留，直到flush。
- en: The implementation also improves performance by moving the “resurrection” process
    of garbage collected items to only be relevant for mappings that map “mutable”
    attributes (i.e. PickleType, composite attrs). This removes overhead from the
    gc process and simplifies internal behavior.
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该实现还通过将垃圾回收项的“复活”过程仅与映射“可变”属性（即PickleType、复合属性）相关联来提高性能。这消除了gc过程的开销，并简化了内部行为。
- en: If a “mutable” attribute change is the sole change on an object which is then
    dereferenced, the mapper will not have access to other attribute state when the
    UPDATE is issued. This may present itself differently to some MapperExtensions.
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“可变”属性更改是对象上唯一的更改，然后该对象被取消引用，那么在发出UPDATE时，映射器将无法访问其他属性状态。这可能对某些MapperExtensions表现出不同的行为。
- en: The change also affects the internal attribute API, but not the AttributeExtension
    interface nor any of the publicly documented attribute functions.
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还影响了内部属性API，但不影响AttributeExtension接口或任何公开文档化的属性函数。
- en: The unit of work no longer generates a graph of “dependency” processors for
    the full graph of mappers during flush(), instead creating such processors only
    for those mappers which represent objects with pending changes. This saves a tremendous
    number of method calls in the context of a large interconnected graph of mappers.
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作单元在flush()期间不再为整个映射器图生成“依赖”处理器图，而是仅为表示具有待处理更改的对象的那些映射器创建这样的处理器。在大型互连映射器图的情况下，这节省了大量方法调用。
- en: Cached a wasteful “table sort” operation that previously occurred multiple times
    per flush, also removing significant method call count from flush().
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存了以前在每次flush时多次发生的“表排序”操作，还从flush()中删除了大量方法调用次数。
- en: Other redundant behaviors have been simplified in mapper._save_obj().
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射器._save_obj()中的其他冗余行为已经简化。
- en: 'References: [#1398](https://www.sqlalchemy.org/trac/ticket/1398)'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1398](https://www.sqlalchemy.org/trac/ticket/1398)
- en: '**[orm]**'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modified query_cls on DynamicAttributeImpl to accept a full mixin version of
    the AppenderQuery, which allows subclassing the AppenderMixin.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了DynamicAttributeImpl上的query_cls，以接受AppenderQuery的完整mixin版本，从而允许对AppenderMixin进行子类化。
- en: '**[orm]**'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “polymorphic discriminator” column may be part of a primary key, and it
    will be populated with the correct discriminator value.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “多态鉴别器”列可能是主键的一部分，并且将填充正确的鉴别器值。
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1300](https://www.sqlalchemy.org/trac/ticket/1300)
- en: '**[orm]**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the evaluator not being able to evaluate IS NULL clauses.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了评估器无法评估IS NULL子句的问题。
- en: '**[orm]**'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the “set collection” function on “dynamic” relations to initiate events
    correctly. Previously a collection could only be assigned to a pending parent
    instance, otherwise modified events would not be fired correctly. Set collection
    is now compatible with merge(), fixes.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“动态”关系上的“设置集合”功能，以正确启动事件。以前，只能将集合分配给待处理的父实例，否则修改事件将无法正确触发。现在，设置集合与merge()兼容，修复了这个问题。
- en: 'References: [#1352](https://www.sqlalchemy.org/trac/ticket/1352)'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1352](https://www.sqlalchemy.org/trac/ticket/1352)
- en: '**[orm]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Allowed pickling of PropertyOption objects constructed with instrumented descriptors;
    previously, pickle errors would occur when pickling an object which was loaded
    with a descriptor-based option, such as query.options(eagerload(MyClass.foo)).
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许对使用仪器描述符构建的PropertyOption对象进行pickling；以前，在对使用描述符选项（例如query.options(eagerload(MyClass.foo)）加载的对象进行pickling时会出现pickling错误。
- en: '**[orm]**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Lazy loader will not use get() if the “lazy load” SQL clause matches the clause
    used by get(), but contains some parameters hardcoded. Previously the lazy strategy
    would fail with the get(). Ideally get() would be used with the hardcoded parameters
    but this would require further development.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“延迟加载”SQL子句与 get() 中使用的子句匹配，但包含一些硬编码的参数，则懒加载器将不使用 get()。以前，懒加载策略会在 get() 上失败。理想情况下，应该使用带有硬编码参数的
    get()，但这需要进一步开发。
- en: 'References: [#1357](https://www.sqlalchemy.org/trac/ticket/1357)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1357](https://www.sqlalchemy.org/trac/ticket/1357)
- en: '**[orm]**'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: MapperOptions and other state associated with query.options() is no longer bundled
    within callables associated with each lazy/deferred-loading attribute during a
    load. The options are now associated with the instance’s state object just once
    when it’s populated. This removes the need in most cases for per-instance/attribute
    loader objects, improving load speed and memory overhead for individual instances.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在加载期间，与 query.options() 关联的 MapperOptions 和其他状态不再捆绑在每个延迟/延迟加载属性的可调用对象中。这些选项现在仅与实例的状态对象关联一次，当它被填充时。这在大多数情况下消除了每个实例/属性加载器对象的需要，提高了单个实例的加载速度和内存开销。
- en: 'References: [#1391](https://www.sqlalchemy.org/trac/ticket/1391)'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1391](https://www.sqlalchemy.org/trac/ticket/1391)
- en: '**[orm]**'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed another location where autoflush was interfering with session.merge().
    autoflush is disabled completely for the duration of merge() now.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个位置，autoflush 干扰 session.merge() 的问题。现在，在 merge() 期间完全禁用 autoflush。
- en: 'References: [#1360](https://www.sqlalchemy.org/trac/ticket/1360)'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1360](https://www.sqlalchemy.org/trac/ticket/1360)
- en: '**[orm]**'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented “mutable primary key” dependency logic from functioning
    properly on a one-to-one relation().
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 阻止了“可变主键”依赖逻辑在一对一关系上正常运行。
- en: 'References: [#1406](https://www.sqlalchemy.org/trac/ticket/1406)'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1406](https://www.sqlalchemy.org/trac/ticket/1406)
- en: '**[orm]**'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in relation(), introduced in 0.5.3, whereby a self referential relation
    from a base class to a joined-table subclass would not configure correctly.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 relation() 中的 bug，在 0.5.3 中引入，其中从基类到连接表子类的自引用关系将无法正确配置。
- en: '**[orm]**'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed obscure mapper compilation issue when inheriting mappers are used which
    would result in un-initialized attributes.
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用继承映射器时可能出现的模糊映射器编译问题，这会导致未初始化的属性。
- en: '**[orm]**'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed documentation for session weak_identity_map - the default value is True,
    indicating a weak referencing map in use.
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 session weak_identity_map 的文档 - 默认值为 True，表示正在使用弱引用映射。
- en: '**[orm]**'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a unit of work issue whereby the foreign key attribute on an item contained
    within a collection owned by an object being deleted would not be set to None
    if the relation() was self-referential.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单位问题，即在被删除的对象所拥有的集合内的项目上的外键属性将不会在 relation() 自引用时设置为 None。
- en: 'References: [#1376](https://www.sqlalchemy.org/trac/ticket/1376)'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1376](https://www.sqlalchemy.org/trac/ticket/1376)
- en: '**[orm]**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed Query.update() and Query.delete() failures with eagerloaded relations.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query.update() 和 Query.delete() 在使用 eagerloaded 关系时的失败。
- en: 'References: [#1378](https://www.sqlalchemy.org/trac/ticket/1378)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1378](https://www.sqlalchemy.org/trac/ticket/1378)
- en: '**[orm]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It is now an error to specify both columns of a binary primaryjoin condition
    in the foreign_keys or remote_side collection. Whereas previously it was just
    nonsensical, but would succeed in a non-deterministic way.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在 foreign_keys 或 remote_side 集合中指定二进制 primaryjoin 条件的两个列是一个错误。而以前这只是荒谬的，但是以非确定性的方式会成功。
- en: sql
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Back-ported the “compiler” extension from SQLA 0.6\. This is a standardized
    interface which allows the creation of custom ClauseElement subclasses and compilers.
    In particular it’s handy as an alternative to text() when you’d like to build
    a construct that has database-specific compilations. See the extension docs for
    details.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 SQLA 0.6 版本开始，将“编译器”扩展进行了反向移植。这是一个标准化接口，允许创建自定义的 ClauseElement 子类和编译器。特别是当您想要构建具有特定于数据库的编译的构造时，它是
    text() 的一个方便的替代品。有关详细信息，请参阅扩展文档。
- en: '**[sql]**'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Exception messages are truncated when the list of bound parameters is larger
    than 10, preventing enormous multi-page exceptions from filling up screens and
    logfiles for large executemany() statements.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当绑定参数的列表大于 10 时，异常消息将被截断，防止大型 executemany() 语句填满屏幕和日志文件，导致巨大的多页异常。
- en: 'References: [#1413](https://www.sqlalchemy.org/trac/ticket/1413)'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1413](https://www.sqlalchemy.org/trac/ticket/1413)
- en: '**[sql]**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: '`sqlalchemy.extract()` is now dialect sensitive and can extract components
    of timestamps idiomatically across the supported databases, including SQLite.'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.extract()`现在是方言敏感的，可以在支持的数据库中按照惯例提取时间戳的组件，包括SQLite。'
- en: '**[sql]**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed __repr__() and other _get_colspec() methods on ForeignKey constructed
    from __clause_element__() style construct (i.e. declarative columns).
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从__clause_element__()样式构造（即声明列）构造的ForeignKey上的__repr__()和其他_get_colspec()方法的问题。
- en: 'References: [#1353](https://www.sqlalchemy.org/trac/ticket/1353)'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1353](https://www.sqlalchemy.org/trac/ticket/1353)
- en: schema
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [1341] [ticket: 594]**'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [1341] [ticket: 594]**'
- en: Added a quote_schema() method to the IdentifierPreparer class so that dialects
    can override how schemas get handled. This enables the MSSQL dialect to treat
    schemas as multipart identifiers, such as ‘database.owner’.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个quote_schema()方法到IdentifierPreparer类，以便方言可以覆盖如何处理模式。这使得MSSQL方言可以将模式视为多部分标识符，例如'database.owner'。
- en: extensions
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Fixed adding of deferred or other column properties to a declarative class.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了向声明类添加延迟或其他列属性的问题。
- en: 'References: [#1379](https://www.sqlalchemy.org/trac/ticket/1379)'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1379](https://www.sqlalchemy.org/trac/ticket/1379)
- en: mysql
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Reflecting a FOREIGN KEY construct will take into account a dotted schema.tablename
    combination, if the foreign key references a table in a remote schema.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射FOREIGN KEY构造将考虑到点分模式.表名组合，如果外键引用远程模式中的表。
- en: 'References: [#1405](https://www.sqlalchemy.org/trac/ticket/1405)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1405](https://www.sqlalchemy.org/trac/ticket/1405)
- en: sqlite
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Corrected the SLBoolean type so that it properly treats only 1 as True.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了SLBoolean类型，使其正确地将只有1视为True。
- en: 'References: [#1402](https://www.sqlalchemy.org/trac/ticket/1402)'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1402](https://www.sqlalchemy.org/trac/ticket/1402)
- en: '**[sqlite]**'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Corrected the float type so that it correctly maps to a SLFloat type when being
    reflected.
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了float类型，使其在反射时正确地映射到SLFloat类型。
- en: 'References: [#1273](https://www.sqlalchemy.org/trac/ticket/1273)'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1273](https://www.sqlalchemy.org/trac/ticket/1273)
- en: mssql
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Modified how savepoint logic works to prevent it from stepping on non-savepoint
    oriented routines. Savepoint support is still very experimental.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了保存点逻辑的工作方式，以防止它干扰非保存点导向的例程。保存点支持仍然非常实验性。
- en: '**[mssql]**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in reserved words for MSSQL that covers version 2008 and all prior versions.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了MSSQL的保留字，涵盖了2008年及以前的所有版本。
- en: 'References: [#1310](https://www.sqlalchemy.org/trac/ticket/1310)'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1310](https://www.sqlalchemy.org/trac/ticket/1310)
- en: '**[mssql]**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problem with information schema not working with a binary collation
    based database. Cleaned up information schema since it is only used by mssql now.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了与基于二进制排序的数据库不兼容的信息模式的问题。清理了信息模式，因为现在只有MSSQL在使用。
- en: 'References: [#1343](https://www.sqlalchemy.org/trac/ticket/1343)'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1343](https://www.sqlalchemy.org/trac/ticket/1343)
- en: 0.5.3
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.3
- en: 'Released: Tue Mar 24 2009'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年3月24日星期二
- en: orm
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “objects” argument to session.flush() is deprecated. State which represents
    the linkage between a parent and child object does not support “flushed” status
    on one side of the link and not the other, so supporting this operation leads
    to misleading results.
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.flush()中的“objects”参数已被弃用。表示父对象和子对象之间链接的状态不支持一个链接的一侧处于“flushed”状态而另一侧不处于该状态，因此支持此操作会导致误导性的结果。
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1315](https://www.sqlalchemy.org/trac/ticket/1315)
- en: '**[orm]**'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query now implements __clause_element__() which produces its selectable, which
    means a Query instance can be accepted in many SQL expressions, including col.in_(query),
    union(query1, query2), select([foo]).select_from(query), etc.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询现在实现了__clause_element__()，它生成了可选择的内容，这意味着查询实例可以在许多SQL表达式中被接受，包括col.in_(query)，union(query1,
    query2)，select([foo]).select_from(query)等。
- en: '**[orm]**'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() can now construct multiple FROM clauses, if needed. Such as, query(A,
    B).join(A.x).join(B.y) might say SELECT A.*, B.* FROM A JOIN X, B JOIN Y. Eager
    loading can also tack its joins onto those multiple FROM clauses.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()现在可以构造多个FROM子句，如果需要的话。例如，query(A, B).join(A.x).join(B.y)可能会生成SELECT
    A.*, B.* FROM A JOIN X, B JOIN Y。贪婪加载也可以将其连接到这些多个FROM子句上。
- en: 'References: [#1337](https://www.sqlalchemy.org/trac/ticket/1337)'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1337](https://www.sqlalchemy.org/trac/ticket/1337)
- en: '**[orm]**'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in dynamic_loader() where append/remove events after construction
    time were not being propagated to the UOW to pick up on flush().
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了dynamic_loader()中的错误，即在构建后未传播追加/删除事件到UOW以在flush()中进行处理。
- en: 'References: [#1347](https://www.sqlalchemy.org/trac/ticket/1347)'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1347](https://www.sqlalchemy.org/trac/ticket/1347)
- en: '**[orm]**'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where column_prefix wasn’t being checked before not mapping an attribute
    that already had class-level name present.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在未映射已具有类级名称的属性之前未检查 column_prefix 的错误。
- en: '**[orm]**'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a session.expire() on a particular collection attribute will clear any pending
    backref additions as well, so that the next access correctly returns only what
    was present in the database. Presents some degree of a workaround for, although
    we are considering removing the flush([objects]) feature altogether.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对特定集合属性执行 session.expire() 将清除任何待处理的反向引用添加，以便下一次访问正确返回数据库中存在的内容。对于 flush([objects])
    功能的一定程度的解决方案，尽管我们正在考虑完全删除该功能。
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1315](https://www.sqlalchemy.org/trac/ticket/1315)
- en: '**[orm]**'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.scalar() now converts raw SQL strings to text() the same way Session.execute()
    does and accepts same alternative **kw args.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.scalar() 现在将原始 SQL 字符串转换为 text()，与 Session.execute() 相同，并接受相同的替代**kw
    args。
- en: '**[orm]**'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improvements to the “determine direction” logic of relation() such that the
    direction of tricky situations like mapper(A.join(B)) -> relation-> mapper(B)
    can be determined.
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 relation() 的“确定方向”逻辑，以便确定类似 mapper(A.join(B)) -> relation-> mapper(B) 的棘手情况的方向。
- en: '**[orm]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When flushing partial sets of objects using session.flush([somelist]), pending
    objects which remain pending after the operation won’t inadvertently be added
    as persistent.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 session.flush([somelist]) 刷新部分对象集时，操作后仍保持待处理状态的对象不会被意外添加为持久对象。
- en: 'References: [#1306](https://www.sqlalchemy.org/trac/ticket/1306)'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1306](https://www.sqlalchemy.org/trac/ticket/1306)
- en: '**[orm]**'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “post_configure_attribute” method to InstrumentationManager, so that the
    “listen_for_events.py” example works again.
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“post_configure_attribute”方法到 InstrumentationManager，以便“listen_for_events.py”示例再次正常工作。
- en: 'References: [#1314](https://www.sqlalchemy.org/trac/ticket/1314)'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1314](https://www.sqlalchemy.org/trac/ticket/1314)
- en: '**[orm]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a forward and complementing backwards reference which are both of the same direction,
    i.e. ONETOMANY or MANYTOONE, is now detected, and an error message is raised.
    Saves crazy CircularDependencyErrors later on.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在检测到具有相同方向的前向和补充后向引用，即 ONETOMANY 或 MANYTOONE，将引发错误消息。以避免后续出现疯狂的 CircularDependencyErrors。
- en: '**[orm]**'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed bugs in Query regarding simultaneous selection of multiple joined-table
    inheritance entities with common base classes:'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中关于同时选择具有共同基类的多个连接表继承实体的错误：
- en: previously the adaption applied to “B” on “A JOIN B” would be erroneously partially
    applied to “A”.
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前对“A JOIN B”上的“B”应用的适应会错误地部分应用于“A”。
- en: comparisons on relations (i.e. A.related==someb) were not getting adapted when
    they should.
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在关系比较（即 A.related==someb）时，当应该进行适应时未进行适应。
- en: Other filterings, like query(A).join(A.bs).filter(B.foo==’bar’), were erroneously
    adapting “B.foo” as though it were an “A”.
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他过滤，如 query(A).join(A.bs).filter(B.foo==’bar’)，错误地将“B.foo”适应为“A”。
- en: '**[orm]**'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed adaptation of EXISTS clauses via any(), has(), etc. in conjunction with
    an aliased object on the left and of_type() on the right.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通过 any()、has() 等与左侧别名对象和右侧 of_type() 结合使用的 EXISTS 子句的适应。
- en: 'References: [#1325](https://www.sqlalchemy.org/trac/ticket/1325)'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1325](https://www.sqlalchemy.org/trac/ticket/1325)
- en: '**[orm]**'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an attribute helper method `set_committed_value` in sqlalchemy.orm.attributes.
    Given an object, attribute name, and value, will set the value on the object as
    part of its “committed” state, i.e. state that is understood to have been loaded
    from the database. Helps with the creation of homegrown collection loaders and
    such.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlalchemy.orm.attributes 中添加了一个属性助手方法 `set_committed_value`。给定一个对象、属性名称和值，将在对象上设置值作为其“已提交”状态的一部分，��被理解为已从数据库加载的状态。有助于创建自定义集合加载器等功能。
- en: '**[orm]**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query won’t fail with weakref error when a non-mapper/class instrumented descriptor
    is passed, raises “Invalid column expression”.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递非映射器/类的受仪器化描述符时，查询不会因弱引用错误而失败，而是引发“无效列表达式”。
- en: '**[orm]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.group_by() properly takes into account aliasing applied to the FROM clause,
    such as with select_from(), using with_polymorphic(), or using from_self().
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.group_by() 正确考虑应用于 FROM 子句的别名，例如使用 select_from()、使用 with_polymorphic()
    或使用 from_self()。
- en: sql
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: An alias() of a select() will convert to a “scalar subquery” when used in an
    unambiguously scalar context, i.e. it’s used in a comparison operation. This applies
    to the ORM when using query.subquery() as well.
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()的alias()在明确的标量上下文中使用时将转换为“标量子查询”，即在比较操作中使用时。当在ORM中使用query.subquery()时也适用。
- en: '**[sql]**'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed missing _label attribute on Function object, others when used in a select()
    with use_labels (such as when used in an ORM column_property()).
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用use_labels时，在select()中使用Function对象等时，修复了缺少的_label属性。
- en: 'References: [#1302](https://www.sqlalchemy.org/trac/ticket/1302)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1302](https://www.sqlalchemy.org/trac/ticket/1302)
- en: '**[sql]**'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: anonymous alias names now truncate down to the max length allowed by the dialect.
    More significant on DBs like Oracle with very small character limits.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名别名现在会截断到方言允许的最大长度。在像Oracle这样具有非常小字符限制的数据库上更为重要。
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1309](https://www.sqlalchemy.org/trac/ticket/1309)
- en: '**[sql]**'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the __selectable__() interface has been replaced entirely by __clause_element__().
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __selectable__()接口已完全被__clause_element__()替换。
- en: '**[sql]**'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine用于缓存特定于方言的类型的每个方言缓存现在是WeakKeyDictionary。这是为了防止方言对象被引用，以便为创建任意数量的引擎或方言的应用程序永远引用。这会有一点性能损失，将在0.6中解决。
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1299](https://www.sqlalchemy.org/trac/ticket/1299)
- en: extensions
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Fixed a recursive pickling issue in serializer, triggered by an EXISTS or other
    embedded FROM construct.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了serializer中的递归pickling问题，由EXISTS或其他嵌入的FROM构造触发。
- en: '**[extensions]**'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative locates the “inherits” class using a search through __bases__, to
    skip over mixins that are local to subclasses.
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative通过__bases__搜索定位“inherits”类，以跳过仅限于子类的mixin。
- en: '**[extensions]**'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative figures out joined-table inheritance primary join condition even
    if “inherits” mapper argument is given explicitly.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative即使明确给出“inherits”mapper参数，也会找出联接表继承的主要联接条件。
- en: '**[extensions]**'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative will properly interpret the “foreign_keys” argument on a backref()
    if it’s a string.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative将正确解释backref()上的“foreign_keys”参数，如果它是一个字符串。
- en: '**[extensions]**'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative will accept a table-bound column as a property when used in conjunction
    with __table__, if the column is already present in __table__. The column will
    be remapped to the given key the same way as when added to the mapper() properties
    dict.
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与__table__一起使用时，Declarative将接受一个绑定到表的列作为属性，如果该列已经存在于__table__中。该列将被重新映射到给定的键，就像添加到mapper()属性字典时一样。
- en: postgresql
  id: totrans-424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Index reflection won’t fail when an index with multiple expressions is encountered.
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当遇到具有多个表达式的索引时，索引反射不会失败。
- en: '**[postgresql]**'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added PGUuid and PGBit types to sqlalchemy.databases.postgres.
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.databases.postgres中添加了PGUuid和PGBit类型。
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1327](https://www.sqlalchemy.org/trac/ticket/1327)
- en: '**[postgresql]**'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Refection of unknown PG types won’t crash when those types are specified within
    a domain.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在域中指定未知PG类型的反射不会在这些类型被指定时崩溃。
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1327](https://www.sqlalchemy.org/trac/ticket/1327)
- en: sqlite
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite反射方法，以便在检测到不存在的cursor.description时（触发自动关闭游标），不会在最近版本的pysqlite上调用fetchone()时失败，因为没有行存在时会引发错误。
- en: mssql
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Preliminary support for pymssql 1.0.1
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对pymssql 1.0.1的初步支持
- en: '**[mssql]**'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected issue on mssql where max_identifier_length was not being respected.
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了在mssql上未遵守max_identifier_length的问题。
- en: 0.5.2
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.2
- en: 'Released: Sat Jan 24 2009'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年1月24日星期六
- en: orm
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Further refined 0.5.1’s warning about delete-orphan cascade placed on a many-to-many
    relation. First, the bad news: the warning will apply to both many-to-many as
    well as many-to-one relations. This is necessary since in both cases, SQLA does
    not scan the full set of potential parents when determining “orphan” status -
    for a persistent object it only detects an in-python de-association event to establish
    the object as an “orphan”. Next, the good news: to support one-to-one via a foreign
    key or association table, or to support one-to-many via an association table,
    a new flag single_parent=True may be set which indicates objects linked to the
    relation are only meant to have a single parent. The relation will raise an error
    if multiple parent-association events occur within Python.'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步完善了 0.5.1 对在多对多关系上放置 delete-orphan 级联的警告。首先，坏消息：警告将适用于多对多关系和多对一关系。这是必要的，因为在这两种情况下，SQLA
    在确定“孤立”的状态时不会扫描全部潜在的父项集合 - 对于持久化对象，它仅检测到一个在 Python 中的取消关联事件来将对象确定为“孤立”。接下来，好消息：为了通过外键或关联表支持一对一关系，或者通过关联表支持一对多关系，可以设置一个新标志
    single_parent=True，表示链接到关系的对象只应该有一个父对象。如果在 Python 中发生多个父关联事件，关系将引发错误。
- en: '**[orm]**'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted the attribute instrumentation change from 0.5.1 to fully establish
    instrumentation for subclasses where the mapper was created after the superclass
    had already been fully instrumented.
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了从 0.5.1 开始的属性检测更改，以便在超类已完全被检测后创建映射器的子类中完全建立属性检测。
- en: 'References: [#1292](https://www.sqlalchemy.org/trac/ticket/1292)'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1292](https://www.sqlalchemy.org/trac/ticket/1292)
- en: '**[orm]**'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in delete-orphan cascade whereby two one-to-one relations from two
    different parent classes to the same target class would prematurely expunge the
    instance.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 delete-orphan 级联中的错误，其中来自两个不同父类到同一目标类的两个一对一关系会过早地删除实例。
- en: '**[orm]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an eager loading bug whereby self-referential eager loading would prevent
    other eager loads, self referential or not, from joining to the parent JOIN properly.
    Thanks to Alex K for creating a great test case.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个急加载错误，即自引用急加载会阻止其他急加载，无论是否是自引用，都无法正确连接到父 JOIN。感谢 Alex K 创建了一个很好的测试用例。
- en: '**[orm]**'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.expire() and related methods will not expire() unloaded deferred attributes.
    This prevents them from being needlessly loaded when the instance is refreshed.
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.expire() 和相关方法将不会使未加载的延迟属性过期。这样可以防止在刷新实例时不必要地加载它们。
- en: '**[orm]**'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join()/outerjoin() will now properly join an aliased() construct to the
    existing left side, even if query.from_self() or query.select_from(someselectable)
    has been called.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()/outerjoin() 现在将正确地将 alias() 构造与现有的左侧连接起来，即使调用了 query.from_self()
    或 query.select_from(someselectable)。
- en: 'References: [#1293](https://www.sqlalchemy.org/trac/ticket/1293)'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1293](https://www.sqlalchemy.org/trac/ticket/1293)
- en: sql
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Further fixes to the “percent signs and spaces in column/table
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了“百分号和列/表中的空格。
- en: names” functionality.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称”功能。
- en: 'References: [#1284](https://www.sqlalchemy.org/trac/ticket/1284)'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1284](https://www.sqlalchemy.org/trac/ticket/1284)
- en: mssql
  id: totrans-463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Restored convert_unicode handling. Results were being passed on through without
    conversion.
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 convert_unicode 处理。结果被直接传递，而不进行转换。
- en: 'References: [#1291](https://www.sqlalchemy.org/trac/ticket/1291)'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1291](https://www.sqlalchemy.org/trac/ticket/1291)
- en: '**[mssql]**'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Really fixing the decimal handling this time..
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次真的修复了 decimal 处理问题。
- en: 'References: [#1282](https://www.sqlalchemy.org/trac/ticket/1282)'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1282](https://www.sqlalchemy.org/trac/ticket/1282)
- en: '**[mssql] [Ticket:1289]**'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [Ticket:1289]**'
- en: Modified table reflection code to use only kwargs when constructing tables.
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改表反射代码，仅在构造表时使用 kwargs。
- en: 0.5.1
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.1
- en: 'Released: Sat Jan 17 2009'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sat Jan 17 2009
- en: orm
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed an internal join cache which could potentially leak memory when issuing
    query.join() repeatedly to ad-hoc selectables.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个内部连接缓存，当对临时 selectables 重复发出 query.join() 时可能会泄漏内存。
- en: '**[orm]**'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “clear()”, “save()”, “update()”, “save_or_update()” Session methods have
    been deprecated, replaced by “expunge_all()” and “add()”. “expunge_all()” has
    also been added to ScopedSession.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “clear()”、“save()”、“update()”、“save_or_update()” Session 方法已被弃用，替换为“expunge_all()”和“add()”。“expunge_all()”也已添加到
    ScopedSession。
- en: '**[orm]**'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modernized the “no mapped table” exception and added a more explicit __table__/__tablename__
    exception to declarative.
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现代化了“没有映射表”异常，并为声明式添加了一个更明确的__table__/__tablename__异常。
- en: '**[orm]**'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Concrete inheriting mappers now instrument attributes which are inherited from
    the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute
    that issues a descriptive error when accessed.
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在具体继承映射器会对从超类继承的属性进行实例化，但对于具体映射器本身未定义的属性，会使用一个发出描述性错误的InstrumentedAttribute。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new relation() keyword back_populates. This allows configuration of
    backreferences using explicit relations. This is required when creating bidirectional
    relations between a hierarchy of concrete mappers and another class.
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的relation()关键字back_populates。这允许使用显式关系配置反向引用。在具体映射器层次结构和另一个类之间创建双向关系时，这是必需的。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)
- en: '**[orm]**'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Test coverage added for relation() objects specified on concrete mappers.
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为在具体映射器上指定的relation()对象添加了测试覆盖。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.from_self() as well as query.subquery() both disable the rendering of
    eager joins inside the subquery produced. The “disable all eager joins” feature
    is available publicly via a new query.enable_eagerloads() generative.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.from_self()以及query.subquery()都会禁用生成的子查询内部的急切连接的渲染。“禁用所有急切连接”功能可以通过新的query.enable_eagerloads()生成器公开使用。
- en: 'References: [#1276](https://www.sqlalchemy.org/trac/ticket/1276)'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1276](https://www.sqlalchemy.org/trac/ticket/1276)
- en: '**[orm]**'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a rudimental series of set operations to Query that receive Query objects
    as arguments, including union(), union_all(), intersect(), except_(), intersect_all(),
    except_all(). See the API documentation for Query.union() for examples.
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了一系列基本的集合操作，接受Query对象作为参数，包括union()、union_all()、intersect()、except_()、intersect_all()、except_all()。查看Query.union()的API文档以获取示例。
- en: '**[orm]**'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug that prevented Query.join() and eagerloads from attaching to a query
    that selected from a union or aliased union.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止Query.join()和eagerloads附加到从联合或别名联合选择的查询的错误。
- en: '**[orm]**'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A short documentation example added for bidirectional relations specified on
    concrete mappers.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为在具体映射器上指定的双向关系添加了一个简短的文档示例。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mappers now instrument class attributes upon construction with the final InstrumentedAttribute
    object which remains persistent. The _CompileOnAttr/__getattribute__() methodology
    has been removed. The net effect is that Column-based mapped class attributes
    can now be used fully at the class level without invoking a mapper compilation
    operation, greatly simplifying typical usage patterns within declarative.
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在映射器在构造时会使用最终的InstrumentedAttribute对象对类属性进行实例化，该对象保持持久。已删除_CompiledOnAttr/__getattribute__()方法。其净效果是，基于列的映射类属性现在可以在类级别完全使用，而不需要调用映射器编译操作，大大简化了声明中的典型使用模式。
- en: 'References: [#1269](https://www.sqlalchemy.org/trac/ticket/1269)'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1269](https://www.sqlalchemy.org/trac/ticket/1269)
- en: '**[orm]**'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ColumnProperty (and front-end helpers such as `deferred`) no longer ignores
    unknown **keyword arguments.
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnProperty（以及前端辅助程序如`deferred`）不再忽略未知的关键字参数。
- en: '**[orm]**'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a bug with the unitofwork’s “row switch” mechanism, i.e. the conversion
    of INSERT/DELETE into an UPDATE, when combined with joined-table inheritance and
    an object which contained no defined values for the child table where an UPDATE
    with no SET clause would be rendered.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与unitofwork的“行切换”机制相关的错误，即将INSERT/DELETE转换为UPDATE时，与联接表继承和一个不包含子表定义值的对象相结合，将渲染出一个没有SET子句的UPDATE。
- en: '**[orm]**'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using delete-orphan on a many-to-many relation is deprecated. This produces
    misleading or erroneous results since SQLA does not retrieve the full list of
    “parents” for m2m. To get delete-orphan behavior with an m2m table, use an explicit
    association class so that the individual association row is treated as a parent.
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多对多关系上使用delete-orphan已被弃用。这会产生误导性或错误的结果，因为SQLA不会检索m2m的完整“父级”列表。要在m2m表上获得delete-orphan行为，请使用显式关联类，以便将单个关联行视为父级。
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1281](https://www.sqlalchemy.org/trac/ticket/1281)
- en: '**[orm]**'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: delete-orphan cascade always requires delete cascade. Specifying delete-orphan
    without delete now raises a deprecation warning.
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: delete-orphan 级联总是需要 delete 级联。指定 delete-orphan 而不带 delete 现在会引发弃用警告。
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1281](https://www.sqlalchemy.org/trac/ticket/1281)
- en: sql
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Improved the methodology to handling percent signs in column names from. Added
    more tests. MySQL and PostgreSQL dialects still do not issue correct CREATE TABLE
    statements for identifiers with percent signs in them.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了处理列名中百分号的方法。增加了更多测试。MySQL 和 PostgreSQL 方言仍然无法正确发出带有百分号的标识符的 CREATE TABLE
    语句。
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1256](https://www.sqlalchemy.org/trac/ticket/1256)
- en: schema
  id: totrans-517
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Index now accepts column-oriented InstrumentedAttributes (i.e. column-based
    mapped class attributes) as column arguments.
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Index 现在接受基于列的 InstrumentedAttributes（即基于列的映射类属性）作为列参数。
- en: 'References: [#1214](https://www.sqlalchemy.org/trac/ticket/1214)'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1214](https://www.sqlalchemy.org/trac/ticket/1214)
- en: '**[schema]**'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Column with no name (as in declarative) won’t raise a NoneType error when its
    string output is requested (such as in a stack trace).
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在没有名称的列（如在声明中）请求其字符串输出时，不会引发 NoneType 错误（例如在堆栈跟踪中）。
- en: '**[schema]**'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Fixed bug when overriding a Column with a ForeignKey on a reflected table, where
    derived columns (i.e. the “virtual” columns of a select, etc.) would inadvertently
    call upon schema-level cleanup logic intended only for the original column.
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射表上覆盖具有 ForeignKey 的列时的 bug，其中派生列（即 select 的“虚拟”列等）会无意中调用仅用于原始列的模式级清理逻辑。
- en: 'References: [#1278](https://www.sqlalchemy.org/trac/ticket/1278)'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1278](https://www.sqlalchemy.org/trac/ticket/1278)
- en: mysql
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added the missing keywords from MySQL 4.1 so they get escaped properly.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MySQL 4.1 中缺失的关键字，以便正确转义。
- en: mssql
  id: totrans-529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected handling of large decimal values with more robust tests. Removed string
    manipulation on floats.
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更正了对大十进制值的处理，增加了更健壮的测试。移除了对浮点数的字符串操作。
- en: 'References: [#1280](https://www.sqlalchemy.org/trac/ticket/1280)'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1280](https://www.sqlalchemy.org/trac/ticket/1280)
- en: '**[mssql]**'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Modified the do_begin handling in mssql to use the Cursor not the Connection
    so it is DBAPI compatible.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 mssql 中 do_begin 处理，使用 Cursor 而不是 Connection，以使其与 DBAPI 兼容。
- en: '**[mssql]**'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected SAVEPOINT support on adodbapi by changing the handling of savepoint_release,
    which is unsupported on mssql.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过更改 savepoint_release 的处理方式，纠正了 adodbapi 上的 SAVEPOINT 支持，因为在 mssql 上不支持。
- en: misc
  id: totrans-537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明]**'
- en: Can now specify Column objects on subclasses which have no table of their own
    (i.e. use single table inheritance). The columns will be appended to the base
    table, but only mapped by the subclass.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在没有自己表的子类上指定 Column 对象（即使用单表继承）。这些列将附加到基本表，但仅由子类映射。
- en: '**[declarative]**'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明]**'
- en: For both joined and single inheriting subclasses, the subclass will only map
    those columns which are already mapped on the superclass and those explicit on
    the subclass. Other columns that are present on the Table will be excluded from
    the mapping by default, which can be disabled by passing a blank exclude_properties
    collection to the __mapper_args__. This is so that single-inheriting classes which
    define their own columns are the only classes to map those columns. The effect
    is actually a more organized mapping than you’d normally get with explicit mapper()
    calls unless you set up the exclude_properties arguments explicitly.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于连接和单一继承子类，子类只会映射那些已在超类上映射的列以及子类上显式指定的列。默认情况下，将排除表上存在但未映射的其他列，可以通过将空的 exclude_properties
    集合传递给 __mapper_args__ 来禁用此功能。这样，定义自己列的单一继承类将是唯一映射这些列的类。实际效果比通常使用显式 mapper() 调用设置
    exclude_properties 参数更有组织。
- en: '**[declarative]**'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明]**'
- en: It’s an error to add new Column objects to a declarative class that specified
    an existing table using __table__.
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向已使用 __table__ 指定现有表的声明类添加新的 Column 对象是错误的。
- en: 0.5.0
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0
- en: 'Released: Tue Jan 06 2009'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年1月6日 星期二
- en: general
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: Documentation has been converted to Sphinx. In particular, the generated API
    documentation has been constructed into a full blown “API Reference” section which
    organizes editorial documentation combined with generated docstrings. Cross linking
    between sections and API docs are vastly improved, a javascript-powered search
    feature is provided, and a full index of all classes, functions and members is
    provided.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档已转换为Sphinx。特别是，生成的API文档已构建为完整的“API参考”部分，其中组织了编辑文档和生成的文档字符串。各个部分和API文档之间的交叉链接得到了极大改善，提供了一个基于JavaScript的搜索功能，并提供了所有类、函数和成员的完整索引。
- en: '**[general]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: setup.py now imports setuptools only optionally. If not present, distutils is
    used. The new “pip” installer is recommended over easy_install as it installs
    in a more simplified way.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setup.py现在仅在可选情况下导入setuptools。如果不存在，将使用distutils。新的“pip”安装程序建议使用easy_install，因为它以更简化的方式安装。
- en: '**[general]**'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: added an extremely basic illustration of a PostGIS integration to the examples
    folder.
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在示例文件夹中添加了一个极其基本的PostGIS集成示例。
- en: orm
  id: totrans-553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.with_polymorphic() now accepts a third argument “discriminator” which
    will replace the value of mapper.polymorphic_on for that query. Mappers themselves
    no longer require polymorphic_on to be set, even if the mapper has a polymorphic_identity.
    When not set, the mapper will load non-polymorphically by default. Together, these
    two features allow a non-polymorphic concrete inheritance setup to use polymorphic
    loading on a per-query basis, since concrete setups are prone to many issues when
    used polymorphically in all cases.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.with_polymorphic()现在接受第三个参数“discriminator”，这将替换该查询的mapper.polymorphic_on的值。现在，即使mapper具有polymorphic_identity，也不再需要设置mapper的polymorphic_on。如果未设置，mapper将默认以非多态方式加载。这两个特性共同允许非多态具体继承设置在每个查询基础上使用多态加载，因为在所有情况下使用多态具体设置会导致许多问题。
- en: '**[orm]**'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dynamic_loader accepts a query_class= to customize the Query classes used for
    both the dynamic collection and the queries built from it.
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dynamic_loader接受一个query_class=来自定义用于动态集合和从中构建的查询的Query类。
- en: '**[orm]**'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() accepts None which will remove any pending order_by state from
    the query, as well as cancel out any mapper/relation configured ordering. This
    is primarily useful for overriding the ordering specified on a dynamic_loader().
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()接受None，这将从查询中删除任何待处理的order_by状态，同时取消任何映射/关系配置的排序。这主要用于覆盖在dynamic_loader()上指定的排序。
- en: 'References: [#1079](https://www.sqlalchemy.org/trac/ticket/1079)'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1079](https://www.sqlalchemy.org/trac/ticket/1079)
- en: '**[orm]**'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Exceptions raised during compile_mappers() are now preserved to provide “sticky
    behavior” - if a hasattr() call on a pre-compiled mapped attribute triggers a
    failing compile and suppresses the exception, subsequent compilation is blocked
    and the exception will be reiterated on the next compile() call. This issue occurs
    frequently when using declarative.
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在保留在compile_mappers()期间引发的异常以提供“粘性行为”-如果对预编译映射属性的hasattr()调用触发失败的编译并抑制异常，则会阻止后续编译，并且异常将在下一次compile()调用时被重复。在使用declarative时经常出现此问题。
- en: '**[orm]**'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: property.of_type() is now recognized on a single-table inheriting target, when
    used in the context of prop.of_type(..).any()/has(), as well as query.join(prop.of_type(…)).
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在prop.of_type(..).any()/has()的上下文中使用时，property.of_type()现在可以在单表继承目标上识别，以及query.join(prop.of_type(…))。
- en: '**[orm]**'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join() raises an error when the target of the join doesn’t match the property-based
    attribute - while it’s unlikely anyone is doing this, the SQLAlchemy author was
    guilty of this particular loosey-goosey behavior.
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当join的目标与基于属性的属性不匹配时，query.join()会引发错误-虽然不太可能有人这样做，但SQLAlchemy的作者却犯了这种特定的松散行为。
- en: '**[orm]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug when using weak_instance_map=False where modified events would not
    be intercepted for a flush().
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用weak_instance_map=False时，修改事件不会被拦截进行flush()的错误。
- en: 'References: [#1272](https://www.sqlalchemy.org/trac/ticket/1272)'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1272](https://www.sqlalchemy.org/trac/ticket/1272)
- en: '**[orm]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed some deep “column correspondence” issues which could impact a Query made
    against a selectable containing multiple versions of the same table, as well as
    unions and similar which contained the same table columns in different column
    positions at different levels.
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些可能影响针对包含同一表的多个版本的可选择性的查询的深层“列对应”问题，以及包含不同列位置的相同表列的联合和类似情况在不同级别。
- en: 'References: [#1268](https://www.sqlalchemy.org/trac/ticket/1268)'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1268](https://www.sqlalchemy.org/trac/ticket/1268)
- en: '**[orm]**'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Custom comparator classes used in conjunction with column_property(), relation()
    etc. can define new comparison methods on the Comparator, which will become available
    via __getattr__() on the InstrumentedAttribute. In the case of synonym() or comparable_property(),
    attributes are resolved first on the user-defined descriptor, then on the user-defined
    comparator.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 column_property()、relation() 等一起使用的自定义比较器类可以在 Comparator 上定义新的比较方法，这些方法将通过
    InstrumentedAttribute 上的 __getattr__() 变得可用。在 synonym() 或 comparable_property()
    的情况下，首先在用户定义的描述符上解析属性，然后在用户定义的比较器上解析属性。
- en: '**[orm]**'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added ScopedSession.is_active accessor.
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 ScopedSession.is_active 访问器。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: '**[orm]**'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Can pass mapped attributes and column objects as keys to query.update({}).
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将映射属性和列对象作为键传递给 query.update({})。
- en: 'References: [#1262](https://www.sqlalchemy.org/trac/ticket/1262)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1262](https://www.sqlalchemy.org/trac/ticket/1262)
- en: '**[orm]**'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped attributes passed to the values() of an expression level insert() or
    update() will use the keys of the mapped columns, not that of the mapped attribute.
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给表达式级别 insert() 或 update() 的 values() 的映射属性将使用映射列的键，而不是映射属性的键。
- en: '**[orm]**'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Corrected problem with Query.delete() and Query.update() not working properly
    with bind parameters.
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 Query.delete() 和 Query.update() 与绑定参数不正常工作的问题。
- en: 'References: [#1242](https://www.sqlalchemy.org/trac/ticket/1242)'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1242](https://www.sqlalchemy.org/trac/ticket/1242)
- en: '**[orm]**'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from(), from_statement() ensure that the given argument is a FromClause,
    or Text/Select/Union, respectively.
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from()、from_statement() 确保给定的参数是 FromClause，或 Text/Select/Union。
- en: '**[orm]**'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query() can be passed a “composite” attribute as a column expression and it
    will be expanded. Somewhat related to.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query() 可以将“复合”属性作为列表达式传递，并进行扩展。与某种程度相关。
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1253](https://www.sqlalchemy.org/trac/ticket/1253)
- en: '**[orm]**'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query() is a little more robust when passed various column expressions such
    as strings, clauselists, text() constructs (which may mean it just raises an error
    more nicely).
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递各种列表达式（如字符串、clauselists、text() 构造）给 Query() 时，Query() 更加健壮（这可能意味着它只是更好地提供错误提示）。
- en: '**[orm]**'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: first() works as expected with Query.from_statement().
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: first() 在 Query.from_statement() 中按预期工作。
- en: '**[orm]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug introduced in 0.5rc4 involving eager loading not functioning for properties
    which were added to a mapper post-compile using add_property() or equivalent.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.5rc4 中引入的关于对使用 add_property() 或等效方法在编译后向 mapper 添加属性的属性不起作用的急切加载的 bug。
- en: '**[orm]**'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where many-to-many relation() with viewonly=True would not correctly
    reference the link between secondary->remote.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 many-to-many relation() 中 viewonly=True 的 bug，该 bug 未正确引用 secondary->remote
    之间的链接。
- en: '**[orm]**'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Duplicate items in a list-based collection will be maintained when issuing INSERTs
    to a “secondary” table in a many-to-many relation. Assuming the m2m table has
    a unique or primary key constraint on it, this will raise the expected constraint
    violation instead of silently dropping the duplicate entries. Note that the old
    behavior remains for a one-to-many relation since collection entries in that case
    don’t result in INSERT statements and SQLA doesn’t manually police collections.
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在向“次要”表中的“二对多”关系发出 INSERT 时，列表型集合中的重复项将被保留。假设 m2m 表上有唯一或主键约束，这将引发预期的约束违规，而不是悄悄地删除重复条目。请注意，对于一对多关系，旧行为仍然保留，因为在这种情况下，集合条目不会导致
    INSERT 语句，并且 SQLA 不会手动监视集合。
- en: 'References: [#1232](https://www.sqlalchemy.org/trac/ticket/1232)'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1232](https://www.sqlalchemy.org/trac/ticket/1232)
- en: '**[orm]**'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.add_column() can accept FromClause objects in the same manner as session.query()
    can.
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.add_column() 可以像 session.query() 一样接受 FromClause 对象。
- en: '**[orm]**'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Comparison of many-to-one relation to NULL is properly converted to IS NOT NULL
    based on not_().
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将多对一关系与 NULL 的比较正确转换为基于 not_() 的 IS NOT NULL。
- en: '**[orm]**'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Extra checks added to ensure explicit primaryjoin/secondaryjoin are ClauseElement
    instances, to prevent more confusing errors later on.
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了额外的检查以确保显式的 primaryjoin/secondaryjoin 是 ClauseElement 实例，以防止后续出现更令人困惑的错误。
- en: 'References: [#1087](https://www.sqlalchemy.org/trac/ticket/1087)'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1087](https://www.sqlalchemy.org/trac/ticket/1087)
- en: '**[orm]**'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved mapper() check for non-class classes.
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 mapper() 对非类类的检查。
- en: 'References: [#1236](https://www.sqlalchemy.org/trac/ticket/1236)'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1236](https://www.sqlalchemy.org/trac/ticket/1236)
- en: '**[orm]**'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: comparator_factory argument is now documented and supported by all MapperProperty
    types, including column_property(), relation(), backref(), and synonym().
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: comparator_factory 参数现在已记录并受到所有 MapperProperty 类型的支持，包括 column_property()、relation()、backref()
    和 synonym()。
- en: 'References: [#5051](https://www.sqlalchemy.org/trac/ticket/5051)'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5051](https://www.sqlalchemy.org/trac/ticket/5051)
- en: '**[orm]**'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Changed the name of PropertyLoader to RelationProperty, to be consistent with
    all the other names. PropertyLoader is still present as a synonym.
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 PropertyLoader 的名称更改为 RelationProperty，以与所有其他名称保持一致。PropertyLoader 仍然存在作为同义词。
- en: '**[orm]**'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed “double iter()” call causing bus errors in shard API, removed errant result.close()
    left over from the 0.4 version.
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 shard API 中导致总线错误的“双重 iter()”调用，删除了 0.4 版本中遗留的错误 result.close()。
- en: 'References: [#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)
- en: '**[orm]**'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: made Session.merge cascades not trigger autoflush. Fixes merged instances getting
    prematurely inserted with missing values.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使 Session.merge 级联不触发自动刷新。修复了合并实例过早插入且缺少值的问题。
- en: '**[orm]**'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Two fixes to help prevent out-of-band columns from being rendered in polymorphic_union
    inheritance scenarios (which then causes extra tables to be rendered in the FROM
    clause causing cartesian products):'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了帮助防止在多态联合继承场景中呈��出带外列而进行了两次修复（导致在 FROM 子句中呈现额外表，导致笛卡尔积）：
- en: improvements to “column adaption” for a->b->c inheritance situations to better
    locate columns that are related to one another via multiple levels of indirection,
    rather than rendering the non-adapted column.
  id: totrans-624
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 a->b->c 继承情况的“列适配”进行了改进，以更好地定位通过多级间接关系相关的列，而不是呈现未适配的列。
- en: ''
  id: totrans-625
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-626
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the “polymorphic discriminator” column is only rendered for the actual mapper
    being queried against. The column won’t be “pulled in” from a subclass or superclass
    mapper since it’s not needed.
  id: totrans-627
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “多态鉴别器”列仅针对实际查询的映射器呈现。该列不会从子类或超类映射器中“拉取”，因为不需要。
- en: '**[orm]**'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shard_id argument on ShardedSession.execute().
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ShardedSession.execute() 上的 shard_id 参数。
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1072](https://www.sqlalchemy.org/trac/ticket/1072)
- en: sql
  id: totrans-631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: RowProxy objects can be used in place of dictionary arguments sent to connection.execute()
    and friends.
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy 对象可以用于替代发送给 connection.execute() 和相关函数的字典参数。
- en: 'References: [#935](https://www.sqlalchemy.org/trac/ticket/935)'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#935](https://www.sqlalchemy.org/trac/ticket/935)
- en: '**[sql]**'
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Columns can again contain percent signs within their names.
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列名中可以再次包含百分号。
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1256](https://www.sqlalchemy.org/trac/ticket/1256)
- en: '**[sql]**'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: sqlalchemy.sql.expression.Function is now a public class. It can be subclassed
    to provide user-defined SQL functions in an imperative style, including with pre-established
    behaviors. The postgis.py example illustrates one usage of this.
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.sql.expression.Function 现在是一个公共类。可以通过子类化以提供用户定义的 SQL 函数，采用命令式风格，包括预先建立的行为。postgis.py
    示例展示了其中一种用法。
- en: '**[sql]**'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: PickleType now favors == comparison by default, if the incoming object (such
    as a dict) implements __eq__(). If the object does not implement __eq__() and
    mutable=True, a deprecation warning is raised.
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType 现在默认偏爱 == 比较，如果传入对象（如字典）实现了 __eq__()。如果对象没有实现 __eq__() 并且 mutable=True，则会引发弃用警告。
- en: '**[sql]**'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed the import weirdness in sqlalchemy.sql to not export __names__.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 sqlalchemy.sql 中导出 __names__ 的奇怪问题。
- en: 'References: [#1215](https://www.sqlalchemy.org/trac/ticket/1215)'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1215](https://www.sqlalchemy.org/trac/ticket/1215)
- en: '**[sql]**'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Using the same ForeignKey object repeatedly raises an error instead of silently
    failing later.
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多次使用相同的 ForeignKey 对象会引发错误，而不是在后期默默失败。
- en: 'References: [#1238](https://www.sqlalchemy.org/trac/ticket/1238)'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1238](https://www.sqlalchemy.org/trac/ticket/1238)
- en: '**[sql]**'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added NotImplementedError for params() method on Insert/Update/Delete constructs.
    These items currently don’t support this functionality, which also would be a
    little misleading compared to values().
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Insert/Update/Delete 构造中为 params() 方法添加了 NotImplementedError。这些项目目前不支持此功能，与
    values() 相比也会有点误导。
- en: '**[sql]**'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Reflected foreign keys will properly locate their referenced column, even if
    the column was given a “key” attribute different from the reflected name. This
    is achieved via a new flag on ForeignKey/ForeignKeyConstraint called “link_to_name”,
    if True means the given name is the referred-to column’s name, not its assigned
    key.
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射的外键将正确定位其引用列，即使该列具有与反射名称不同的“key”属性。通过ForeignKey/ForeignKeyConstraint上的一个名为“link_to_name”的新标志来实现这一点，如果为True，则表示给定名称是所引用列的名称，而不是其分配的键。
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#650](https://www.sqlalchemy.org/trac/ticket/650)
- en: '**[sql]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select() can accept a ClauseList as a column in the same way as a Table or other
    selectable and the interior expressions will be used as column elements.
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()可以接受ClauseList作为列，方式与Table或其他可选择的方式相同，内部表达式将用作列元素。
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1253](https://www.sqlalchemy.org/trac/ticket/1253)
- en: '**[sql]**'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “passive” flag on session.is_modified() is correctly propagated to the attribute
    manager.
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.is_modified()上的“passive”标志正确传播到属性管理器。
- en: '**[sql]**'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: union() and union_all() will not whack any order_by() that has been applied
    to the select()s inside. If you union() a select() with order_by() (presumably
    to support LIMIT/OFFSET), you should also call self_group() on it to apply parenthesis.
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: union()和union_all()不会破坏应用于select()内部的order_by()。如果您将带有order_by()的select()与union()结合使用（可能是为了支持LIMIT/OFFSET），还应在其上调用self_group()以应用括号。
- en: mysql
  id: totrans-660
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在text()构造中的“%”符号会自动转义为“%%”。由于这一更改的向后不兼容性，如果在字符串中检测到‘%%’，则会发出警告。
- en: '**[mysql]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug in exception raise when FK columns not present during reflection.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射期间FK列不存在时引发异常的错误。
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1241](https://www.sqlalchemy.org/trac/ticket/1241)
- en: '**[mysql]**'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug involving reflection of a remote-schema table with a foreign key ref
    to another table in that schema.
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及反射远程模式表的bug，该表具有对该模式中另一个表的外键引用。
- en: sqlite
  id: totrans-668
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Table reflection now stores the actual DefaultClause value for the column.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表反射现在存储列的实际DefaultClause值。
- en: 'References: [#1266](https://www.sqlalchemy.org/trac/ticket/1266)'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1266](https://www.sqlalchemy.org/trac/ticket/1266)
- en: '**[sqlite]**'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: bugfixes, behavioral changes
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bug修复，行为变更
- en: mssql
  id: totrans-674
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in a new MSGenericBinary type. This maps to the Binary type so it can
    implement the specialized behavior of treating length specified types as fixed-width
    Binary types and non-length types as an unbound variable length Binary type.
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的MSGenericBinary类型。这对应于Binary类型，因此它可以实现将长度指定类型视为固定宽度Binary类型和非长度类型视为无限长度Binary类型的专门行为。
- en: '**[mssql]**'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added in new types: MSVarBinary and MSImage.'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新类型：MSVarBinary和MSImage。
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1249](https://www.sqlalchemy.org/trac/ticket/1249)
- en: '**[mssql]**'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in the MSReal, MSNText, MSSmallDateTime, MSTime, MSDateTimeOffset, and
    MSDateTime2 types
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了MSReal、MSNText、MSSmallDateTime、MSTime、MSDateTimeOffset和MSDateTime2类型
- en: '**[mssql]**'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Refactored the Date/Time types. The `smalldatetime` data type no longer truncates
    to a date only, and will now be mapped to the MSSmallDateTime type.
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了日期/时间类型。`smalldatetime`数据类型不再截断为仅日期，现在将映射到MSSmallDateTime类型。
- en: 'References: [#1254](https://www.sqlalchemy.org/trac/ticket/1254)'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1254](https://www.sqlalchemy.org/trac/ticket/1254)
- en: '**[mssql]**'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected an issue with Numerics to accept an int.
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了接受int的Numerics的问题。
- en: '**[mssql]**'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Mapped `char_length` to the `LEN()` function.
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`char_length`映射到`LEN()`函数。
- en: '**[mssql]**'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If an `INSERT` includes a subselect the `INSERT` is converted from an `INSERT
    INTO VALUES` construct to a `INSERT INTO SELECT` construct.
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`INSERT`包含子选择，则`INSERT`将从`INSERT INTO VALUES`构造转换为`INSERT INTO SELECT`构造。
- en: '**[mssql]**'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If the column is part of a `primary_key` it will be `NOT NULL` since MSSQL doesn’t
    allow `NULL` in primary_key columns.
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果列是`primary_key`的一部分，则将是`NOT NULL`，因为MSSQL不允许在`primary_key`列中使用`NULL`。
- en: '**[mssql]**'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: '`MSBinary` now returns a `BINARY` instead of an `IMAGE`. This is a backwards
    incompatible change in that `BINARY` is a fixed length data type whereas `IMAGE`
    is a variable length data type.'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MSBinary`现在返回`BINARY`而不是`IMAGE`。这是一个向后不兼容的更改，因为`BINARY`是固定长度数据类型，而`IMAGE`是可变长度数据类型。'
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1249](https://www.sqlalchemy.org/trac/ticket/1249)
- en: '**[mssql]**'
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: '`get_default_schema_name` is now reflected from the database based on the user’s
    default schema. This only works with MSSQL 2005 and later.'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get_default_schema_name` 现在从数据库中反射，基于用户的默认模式。这仅适用于 MSSQL 2005 及更高版本。'
- en: 'References: [#1258](https://www.sqlalchemy.org/trac/ticket/1258)'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1258](https://www.sqlalchemy.org/trac/ticket/1258)
- en: '**[mssql]**'
  id: totrans-699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added collation support through the use of a new collation argument. This is
    supported on the following types: char, nchar, varchar, nvarchar, text, ntext.'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用新的 collation 参数添加了排序规则支持。此功能支持以下类型：char、nchar、varchar、nvarchar、text、ntext。
- en: 'References: [#1248](https://www.sqlalchemy.org/trac/ticket/1248)'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1248](https://www.sqlalchemy.org/trac/ticket/1248)
- en: '**[mssql]**'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changes to the connection string parameters favor DSN as the default specification
    for pyodbc. See the mssql.py docstring for detailed usage instructions.
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对连接字符串参数进行了更改，优先选择 DSN 作为 pyodbc 的默认规范。有关详细使用说明，请参阅 mssql.py 的文档字符串。
- en: '**[mssql]**'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added experimental support of savepoints. It currently does not work fully with
    sessions.
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对保存点的实验性支持。目前与会话不完全兼容。
- en: '**[mssql]**'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Support for three levels of column nullability: NULL, NOT NULL, and the database’s
    configured default. The default Column configuration (nullable=True) will now
    generate NULL in the DDL. Previously no specification was emitted and the database
    default would take effect (usually NULL, but not always). To explicitly request
    the database default, configure columns with nullable=None and no specification
    will be emitted in DDL. This is backwards incompatible behavior.'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持三个级别的列可空性：NULL、NOT NULL 和数据库配置的默认值。默认列配置（nullable=True）现在将在 DDL 中生成 NULL。之前没有发出任何规范，数据库默认值会生效（通常为
    NULL，但不总是）。要显式请求数据库默认值，请使用 nullable=None 配置列，DDL 中将不发出任何规范。这是不兼容的行为。
- en: 'References: [#1243](https://www.sqlalchemy.org/trac/ticket/1243)'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1243](https://www.sqlalchemy.org/trac/ticket/1243)
- en: oracle
  id: totrans-709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Adjusted the format of create_xid() to repair two-phase commit. We now have
    field reports of Oracle two-phase commit working properly with this change.
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 create_xid() 的格式以修复两阶段提交。我们现在收到了有关使用此更改正常运行 Oracle 两阶段提交的现场报告。
- en: '**[oracle]**'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added OracleNVarchar type, produces NVARCHAR2, and also subclasses Unicode so
    that convert_unicode=True by default. NVARCHAR2 reflects into this type automatically
    so these columns pass unicode on a reflected table with no explicit convert_unicode=True
    flags.
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 OracleNVarchar 类型，生成 NVARCHAR2，并且还继承了 Unicode，因此默认情况下 convert_unicode=True。NVARCHAR2
    自动反映到此类型中，因此这些列在没有显式 convert_unicode=True 标志的反射表上传递 Unicode。
- en: 'References: [#1233](https://www.sqlalchemy.org/trac/ticket/1233)'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1233](https://www.sqlalchemy.org/trac/ticket/1233)
- en: '**[oracle]**'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了某些类型的 out 参数无法接收的错误；感谢 huddlej 在 wwu.edu 的帮助！
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1265](https://www.sqlalchemy.org/trac/ticket/1265)
- en: misc
  id: totrans-718
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialect]**'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect]**'
- en: Added a new description_encoding attribute on the dialect that is used for encoding
    the column name when processing the metadata. This usually defaults to utf-8.
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方言上添加了一个新的 description_encoding 属性，用于在处理元数据时编码列名。这通常默认为 utf-8。
- en: '**[engine/pool]**'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate() 检查关闭状态以避免属性错误。
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1246](https://www.sqlalchemy.org/trac/ticket/1246)
- en: '**[engine/pool]**'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: NullPool supports reconnect on failure behavior.
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NullPool 支持失败时重新连接的行为。
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1094](https://www.sqlalchemy.org/trac/ticket/1094)
- en: '**[engine/pool]**'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Added a mutex for the initial pool creation when using pool.manage(dbapi). This
    prevents a minor case of “dogpile” behavior which would otherwise occur upon a
    heavy load startup.
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 pool.manage(dbapi) 时，添加了一个互斥锁以防止启动时发生“dogpile”行为的小问题。这可以防止出现严重负载启动时可能发生的一种次要情况。
- en: 'References: [#799](https://www.sqlalchemy.org/trac/ticket/799)'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#799](https://www.sqlalchemy.org/trac/ticket/799)
- en: '**[engine/pool]**'
  id: totrans-730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: _execute_clauseelement() goes back to being a private method. Subclassing Connection
    is not needed now that ConnectionProxy is available.
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _execute_clauseelement() 现在再次成为私有方法。现在可用 ConnectionProxy，因此不再需要子类化 Connection。
- en: '**[documentation]**'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Tickets.
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 票务。
- en: 'References: [#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)
- en: '**[documentation]**'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added note about create_session() defaults.
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关于 create_session() 默认值的注释。
- en: '**[documentation]**'
  id: totrans-737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added section about metadata.reflect().
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关于 metadata.reflect() 的部分。
- en: '**[documentation]**'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Updated TypeDecorator section.
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 TypeDecorator 部分。
- en: '**[documentation]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Rewrote the “threadlocal” strategy section of the docs due to recent confusion
    over this feature.
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于最近对此功能的混淆，重写了文档中的“threadlocal”策略部分。
- en: '**[documentation]**'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Removed badly out of date ‘polymorphic_fetch’ and ‘select_table’ docs from inheritance,
    reworked the second half of “joined table inheritance”.
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从继承中删除了过时的‘polymorphic_fetch’和‘select_table’文档，重写了“joined table inheritance”的后半部分。
- en: '**[documentation]**'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented comparator_factory kwarg, added new doc section “Custom Comparators”.
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了 comparator_factory kwarg，增加了新的文档部分“自定义比较器”。
- en: '**[postgres]**'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 text() 结构中的“%”符号会自动转义为“%%”。由于此更改的向后不兼容性，如果在字符串中检测到‘%%’，则会发出警告。
- en: 'References: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1267](https://www.sqlalchemy.org/trac/ticket/1267)
- en: '**[postgres]**'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Calling alias.execute() in conjunction with server_side_cursors won’t raise
    AttributeError.
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与 server_side_cursors 结合使用时，调用 alias.execute() 不会引发 AttributeError。
- en: '**[postgres]**'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added Index reflection support to PostgreSQL, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加索引反射支持到 PostgreSQL，使用了我们长期忽视的一个很棒的补丁，由 Ken Kuhlman 提交。
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#714](https://www.sqlalchemy.org/trac/ticket/714)
- en: '**[associationproxy]**'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[associationproxy]**'
- en: The association proxy properties are make themselves available at the class
    level, e.g. MyClass.aproxy. Previously this evaluated to None.
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理属性现在在类级别上可用，例如 MyClass.aproxy。以前这会评估为 None。
- en: '**[declarative]**'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: The full list of arguments accepted as string by backref() includes ‘primaryjoin’,
    ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’, ‘remote_side’, ‘order_by’.
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 backref() 作为字符串接受的参数列表包括 ‘primaryjoin’、‘secondaryjoin’、‘secondary’、‘foreign_keys’、‘remote_side’、‘order_by’。
- en: 0.5.0rc4
  id: totrans-759
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc4
- en: 'Released: Fri Nov 14 2008'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Fri Nov 14 2008
- en: general
  id: totrans-761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: global “propigate”->”propagate” change.
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“propigate”->“propagate”变更。
- en: orm
  id: totrans-764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.count() has been enhanced to do the “right thing” in a wider variety of
    cases. It can now count multiple-entity queries, as well as column-based queries.
    Note that this means if you say query(A, B).count() without any joining criterion,
    it’s going to count the cartesian product of A*B. Any query which is against column-based
    entities will automatically issue “SELECT count(1) FROM (SELECT…)” so that the
    real rowcount is returned, meaning a query such as query(func.count(A.name)).count()
    will return a value of one, since that query would return one row.
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.count() 已增强以在更广泛的情况下执行“正确的操作”。现在它可以计算多实体查询，以及基于列的查询。请注意，这意味着如果你说 query(A,
    B).count() 没有任何连接条件，它将计算 A*B 的笛卡尔积。任何针对基于列的实体的查询都会自动发出“SELECT count(1) FROM (SELECT…)”以返回实际的行数，这意味着这样的查询
    query(func.count(A.name)).count() 将返回一个值，因为该查询将返回一行。
- en: '**[orm]**'
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Lots of performance tuning. A rough guesstimate over various ORM operations
    places it 10% faster over 0.5.0rc3, 25-30% over 0.4.8.
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大量的性能调优。对各种 ORM 操作的粗略估计将其速度提高了 10%，比 0.5.0rc3 快 25-30%。
- en: '**[orm]**'
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: bugfixes and behavioral changes
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复错误和行为变更
- en: '**[orm]**'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjustments to the enhanced garbage collection on InstanceState to better guard
    against errors due to lost state.
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了增强的 InstanceState 上的垃圾收集，以更好地防止由于丢失状态而引起的错误。
- en: '**[orm]**'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.get() returns a more informative error message when executed against multiple
    entities.
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当针对多个实体执行时，Query.get() 返回更具信息性的错误消息。
- en: 'References: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1220](https://www.sqlalchemy.org/trac/ticket/1220)
- en: '**[orm]**'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Restored NotImplementedError on Cls.relation.in_()
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Cls.relation.in_ 上恢复了 NotImplementedError。
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)
- en: '**[orm]**'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed PendingDeprecationWarning involving order_by parameter on relation().
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及 relation() 上 order_by 参数的 PendingDeprecationWarning。
- en: 'References: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1226](https://www.sqlalchemy.org/trac/ticket/1226)
- en: sql
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed the ‘properties’ attribute of the Connection object, Connection.info
    should be used.
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了 Connection 对象的 ‘properties’ 属性，应该使用 Connection.info。
- en: '**[sql]**'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored “active rowcount” fetch before ResultProxy autocloses the cursor. This
    was removed in 0.5rc3.
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在 ResultProxy 自动关闭游标之前获取 “active rowcount” 的情况。这在 0.5rc3 中被移除。
- en: '**[sql]**'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Rearranged the load_dialect_impl() method in TypeDecorator such that it will
    take effect even if the user-defined TypeDecorator uses another TypeDecorator
    as its impl.
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新排列了 TypeDecorator 中的 load_dialect_impl() 方法，使其即使用户定义的 TypeDecorator 使用另一个
    TypeDecorator 作为其实现也会生效。
- en: mssql
  id: totrans-789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Lots of cleanup and fixes to correct problems with limit and offset.
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大量清理和修复以纠正限制和偏移的问题。
- en: '**[mssql]**'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Correct situation where subqueries as part of a binary expression need to be
    translated to use the IN and NOT IN syntax.
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了作为二进制表达式一部分的子查询需要被转换为使用 IN 和 NOT IN 语法的情况。
- en: '**[mssql]**'
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed E Notation issue that prevented the ability to insert decimal values less
    than 1E-6.
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 E Notation 问题，该问题导致无法插入小于 1E-6 的十进制值。
- en: 'References: [#1216](https://www.sqlalchemy.org/trac/ticket/1216)'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1216](https://www.sqlalchemy.org/trac/ticket/1216)
- en: '**[mssql]**'
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problems with reflection when dealing with schemas, particularly when
    those schemas are the default schema.
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了处理模式时反射的问题，特别是当这些模式是默认模式时。
- en: 'References: [#1217](https://www.sqlalchemy.org/trac/ticket/1217)'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1217](https://www.sqlalchemy.org/trac/ticket/1217)
- en: '**[mssql]**'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problem with casting a zero length item to a varchar. It now correctly
    adjusts the CAST.
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了将零长度项转换为 varchar 时的问题。现在它会正确调整 CAST。
- en: misc
  id: totrans-802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[access]**'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Added support for Currency type.
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Currency 类型的支持。
- en: '**[access]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Functions were not return their result.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数没有返回它们的结果。
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1017](https://www.sqlalchemy.org/trac/ticket/1017)
- en: '**[access]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Corrected problem with joins. Access only support LEFT OUTER or INNER not just
    JOIN by itself.
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了连接的问题。Access 仅支持 LEFT OUTER 或 INNER，而不仅仅是 JOIN 本身。
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1017](https://www.sqlalchemy.org/trac/ticket/1017)
- en: '**[ext]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Can now use a custom “inherit_condition” in __mapper_args__ when using declarative.
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在使用 declarative 时在 __mapper_args__ 中使用自定义的 “inherit_condition”。
- en: '**[ext]**'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: fixed string-based “remote_side”, “order_by” and others not propagating correctly
    when used in backref().
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于字符串的“remote_side”、“order_by”等在 backref() 中使用时未正确传播的问题。
- en: 0.5.0rc3
  id: totrans-815
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc3
- en: 'Released: Fri Nov 07 2008'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年11月07日 星期五
- en: orm
  id: totrans-817
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added two new hooks to SessionExtension: after_bulk_delete() and after_bulk_update().
    after_bulk_delete() is called after a bulk delete() operation on a query. after_bulk_update()
    is called after a bulk update() operation on a query.'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了两个新的 SessionExtension 钩子：after_bulk_delete() 和 after_bulk_update()。after_bulk_delete()
    在查询上进行批量 delete() 操作后调用。after_bulk_update() 在查询上进行批量 update() 操作��调用。
- en: '**[orm]**'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”not equals” comparisons of simple many-to-one relation to an instance will
    not drop into an EXISTS clause and will compare foreign key columns instead.
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简单的一对多关系的“不等于”比较不会掉入到一个 EXISTS 子句中，而是会比较外键列。
- en: '**[orm]**'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed not-really-working use cases of comparing a collection to an iterable.
    Use contains() to test for collection membership.
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了比较集合和可迭代对象的不太有效的用例。使用 contains() 来测试集合成员资格。
- en: '**[orm]**'
  id: totrans-824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the behavior of aliased() objects such that they more accurately adapt
    the expressions generated, which helps particularly with self-referential comparisons.
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 aliased() 对象的行为，使其更准确地适应生成的表达式，这对于自引用比较特别有帮助。
- en: 'References: [#1171](https://www.sqlalchemy.org/trac/ticket/1171)'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1171](https://www.sqlalchemy.org/trac/ticket/1171)
- en: '**[orm]**'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug involving primaryjoin/secondaryjoin conditions constructed from class-bound
    attributes (as often occurs when using declarative), which later would be inappropriately
    aliased by Query, particularly with the various EXISTS based comparators.
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及从类绑定属性构造的 primaryjoin/secondaryjoin 条件的 bug（在使用 declarative 时经常发生），后者稍后会被
    Query 不适当地别名化，特别是在各种基于 EXISTS 的比较器中。
- en: '**[orm]**'
  id: totrans-829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug when using multiple query.join() with an aliased-bound descriptor
    which would lose the left alias.
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用多个 query.join() 与绑定到别名的描述符时会丢失左别名的 bug。
- en: '**[orm]**'
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved weakref identity map memory management to no longer require mutexing,
    resurrects garbage collected instance on a lazy basis for an InstanceState with
    pending changes.
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了弱引用标识映射的内存管理，不再需要互斥，对于具有挂起更改的 InstanceState，在需要时延迟恢复被垃圾回收的实例。
- en: '**[orm]**'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: InstanceState object now removes circular references to itself upon disposal
    to keep it outside of cyclic garbage collection.
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstanceState 对象现在在处理销毁时会删除对自身的循环引用，以使其保持在循环垃圾收集之外。
- en: '**[orm]**'
  id: totrans-835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() won’t hide unrelated ForeignKey errors inside of the “please specify
    primaryjoin” message when determining join condition.
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation() 在确定联接条件时不会在“请指定 primaryjoin”消息中隐藏不相关的 ForeignKey 错误。
- en: '**[orm]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query involving order_by() in conjunction with multiple aliases
    of the same class (will add tests in)
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与同一类的多个别名结合使用时涉及 order_by() 的查询中的错误（将添加测试）。
- en: 'References: [#1218](https://www.sqlalchemy.org/trac/ticket/1218)'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1218](https://www.sqlalchemy.org/trac/ticket/1218)
- en: '**[orm]**'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When using Query.join() with an explicit clause for the ON clause, the clause
    will be aliased in terms of the left side of the join, allowing scenarios like
    query(Source). from_self().join((Dest, Source.id==Dest.source_id)) to work properly.
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Query.join() 时，如果 ON 子句明确指定了一个子句，该子句将被别名化为连接的左侧，从而使诸如 query(Source). from_self().join((Dest,
    Source.id==Dest.source_id)) 这样的场景能够正常工作。
- en: '**[orm]**'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 polymorphic_union() 函数中的每个列的 “key” 与列的名称不同，则将尊重每个列的 “key”。
- en: '**[orm]**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired support for “passive-deletes” on a many-to-one relation() with “delete”
    cascade.
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在具有“delete”级联的多对一关系上的“被动删除”支持。
- en: 'References: [#1183](https://www.sqlalchemy.org/trac/ticket/1183)'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1183](https://www.sqlalchemy.org/trac/ticket/1183)
- en: '**[orm]**'
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合类型中的错误，该错误阻止了主键复合类型的变异。
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1213](https://www.sqlalchemy.org/trac/ticket/1213)
- en: '**[orm]**'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added more granularity to internal attribute access, such that cascade and flush
    operations will not initialize unloaded attributes and collections, leaving them
    intact for a lazy-load later on. Backref events still initialize attributes and
    collections for pending instances.
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对内部属性访问增加了更多细节，这样级联和刷新操作将不会初始化未加载的属性和集合，保留它们以便稍后进行延迟加载。对于待处理的实例，backref 事件仍然会初始化属性和集合。
- en: 'References: [#1202](https://www.sqlalchemy.org/trac/ticket/1202)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1202](https://www.sqlalchemy.org/trac/ticket/1202)
- en: sql
  id: totrans-853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SQL compiler optimizations and complexity reduction. The call count for compiling
    a typical select() construct is 20% less versus 0.5.0rc2.
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 编译器优化和复杂性降低。编译典型 select() 结构的调用次数比 0.5.0rc2 减少了 20%。
- en: '**[sql]**'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Dialects can now generate label names of adjustable length. Pass in the argument
    “label_length=<value>” to create_engine() to adjust how many characters max will
    be present in dynamically generated column labels, i.e. “somecolumn AS somelabel”.
    Any value less than 6 will result in a label of minimal size, consisting of an
    underscore and a numeric counter. The compiler uses the value of dialect.max_identifier_length
    as a default.
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言现在可以生成可调长度的标签名称。传递参数 “label_length=<value>” 到 create_engine() 来调整动态生成的列标签中最多包含多少个字符，例如“somecolumn
    AS somelabel”。任何小于 6 的值将导致标签的最小尺寸，包括下划线和数字计数器。编译器使用 dialect.max_identifier_length
    的值作为默认值。
- en: 'References: [#1211](https://www.sqlalchemy.org/trac/ticket/1211)'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1211](https://www.sqlalchemy.org/trac/ticket/1211)
- en: '**[sql]**'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Simplified the check for ResultProxy “autoclose without results” to be based
    solely on presence of cursor.description. All the regexp-based guessing about
    statements returning rows has been removed.
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在简化了对于 ResultProxy “无结果自动关闭” 的检查，仅基于光标描述的存在。所有基于正则表达式的有关返回行的猜测都已经被移除。
- en: 'References: [#1212](https://www.sqlalchemy.org/trac/ticket/1212)'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1212](https://www.sqlalchemy.org/trac/ticket/1212)
- en: '**[sql]**'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Direct execution of a union() construct will properly set up result-row processing.
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直接执行 union() 构造将正确设置结果行处理。
- en: 'References: [#1194](https://www.sqlalchemy.org/trac/ticket/1194)'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1194](https://www.sqlalchemy.org/trac/ticket/1194)
- en: '**[sql]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The internal notion of an “OID” or “ROWID” column has been removed. It’s basically
    not used by any dialect, and the possibility of its usage with psycopg2’s cursor.lastrowid
    is basically gone now that INSERT..RETURNING is available.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “OID”或“ROWID”列的内部概念已被移除。基本上没有任何方言使用它，现在使用INSERT..RETURNING，使用psycopg2的cursor.lastrowid的可能性基本上已经消失。
- en: '**[sql]**'
  id: totrans-867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed “default_order_by()” method on all FromClause objects.
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有FromClause对象上删除了“default_order_by()”方法。
- en: '**[sql]**'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repaired the table.tometadata() method so that a passed-in schema argument is
    propagated to ForeignKey constructs.
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了table.tometadata()方法，以便传递的schema参数传播到ForeignKey构造中。
- en: '**[sql]**'
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Slightly changed behavior of IN operator for comparing to empty collections.
    Now results in inequality comparison against self. More portable, but breaks with
    stored procedures that aren’t pure functions.
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微改变了对比空集合的IN运算符的行为。现在会导致与自身的不等比较。更具可移植性，但会破坏不是纯函数的存储过程。
- en: mysql
  id: totrans-873
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed foreign key reflection in the edge case where a Table’s explicit schema=
    is the same as the schema (database) the connection is attached to.
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了外键反射的bug，在这种情况下，一个Table的显式schema=与连接附加到的schema（数据库）相同。
- en: '**[mysql]**'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: No longer expects include_columns in table reflection to be lower case.
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再期望在表反射中包含include_columns为小写。
- en: oracle
  id: totrans-878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Wrote a docstring for Oracle dialect. Apparently that Ohloh “few source code
    comments” label is starting to string :).
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Oracle方言编写了一个文档字符串。显然，Ohloh的“few source code comments”标签开始串联了 :).
- en: '**[oracle]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Removed FIRST_ROWS() optimize flag when using LIMIT/OFFSET, can be re-enabled
    with optimize_limits=True create_engine() flag.
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用LIMIT/OFFSET时，删除了FIRST_ROWS()优化标志，可以通过optimize_limits=True create_engine()标志重新启用。
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#536](https://www.sqlalchemy.org/trac/ticket/536)
- en: '**[oracle]**'
  id: totrans-884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: bugfixes and behavioral changes
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了错误和行为变化
- en: '**[oracle]**'
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Setting the auto_convert_lobs to False on create_engine() will also instruct
    the OracleBinary type to return the cx_oracle LOB object unchanged.
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()上将auto_convert_lobs设置为False也会指示OracleBinary类型将cx_oracle LOB对象原样返回。
- en: misc
  id: totrans-888
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Added a new extension sqlalchemy.ext.serializer. Provides Serializer/Deserializer
    “classes” which mirror Pickle/Unpickle, as well as dumps() and loads(). This serializer
    implements an “external object” pickler which keeps key context-sensitive objects,
    including engines, sessions, metadata, Tables/Columns, and mappers, outside of
    the pickle stream, and can later restore the pickle using any engine/metadata/session
    provider. This is used not for pickling regular object instances, which are pickleable
    without any special logic, but for pickling expression objects and full Query
    objects, such that all mapper/engine/session dependencies can be restored at unpickle
    time.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的扩展 sqlalchemy.ext.serializer。提供了与Pickle/Unpickle相对应的Serializer/Deserializer“类”，以及dumps()和loads()。这个序列化器实现了一个“外部对象”pickler，它保留了关键的上下文敏感对象，包括engines、sessions、metadata、Tables/Columns和mappers，使其保持在pickle流之外，并且可以在以后使用任何engine/metadata/session提供程序来恢复pickle。这不是用于pickle常规对象实例，这些对象实例可以在没有任何特殊逻辑的情况下进行pickle，而是用于pickle表达式对象和完整的Query对象，以便在unpickle时可以恢复所有mapper/engine/session依赖关系。
- en: '**[ext]**'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed bug preventing declarative-bound “column” objects from being used in column_mapped_collection().
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，阻止了声明绑定的“column”对象在column_mapped_collection()中的使用。
- en: 'References: [#1174](https://www.sqlalchemy.org/trac/ticket/1174)'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1174](https://www.sqlalchemy.org/trac/ticket/1174)
- en: '**[misc]**'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc]**'
- en: util.flatten_iterator() func doesn’t interpret strings with __iter__() methods
    as iterators, such as in pypy.
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: util.flatten_iterator()函数不会将具有__iter__()方法的字符串解释为迭代器，例如在pypy中。
- en: 'References: [#1077](https://www.sqlalchemy.org/trac/ticket/1077)'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1077](https://www.sqlalchemy.org/trac/ticket/1077)
- en: 0.5.0rc2
  id: totrans-897
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc2
- en: 'Released: Sun Oct 12 2008'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年10月12日星期日
- en: orm
  id: totrans-899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug involving read/write relation()s that contain literal or other non-column
    expressions within their primaryjoin condition equated to a foreign key column.
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及包含字面值或其他非列表达式的read/write relation()在其primaryjoin条件等于外键列的bug。
- en: '**[orm]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”non-batch” mode in mapper(), a feature which allows mapper extension methods
    to be called as each instance is updated/inserted, now honors the insert order
    of the objects given.
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper()中的“non-batch”模式，这个功能允许在每个实例更新/插入时调用mapper扩展方法，现在遵循给定对象的插入顺序。
- en: '**[orm]**'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects.
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mapper 中与 RLock 相关的 bug，该 bug 可能在重新进入 mapper compile() 调用时发生死锁，这种情况发生在 ForeignKey
    对象中使用声明性构造时。
- en: '**[orm]**'
  id: totrans-906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ScopedSession.query_property now accepts a query_cls factory, overriding the
    session’s configured query_cls.
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ScopedSession.query_property 现在接受一个 query_cls 工厂，覆盖了会话配置的 query_cls。
- en: '**[orm]**'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shared state bug interfering with ScopedSession.mapper’s ability to apply
    default __init__ implementations on object subclasses.
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了共享状态 bug，干扰了 ScopedSession.mapper 对象能够在对象子类上应用默认 __init__ 实现的能力。
- en: '**[orm]**'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed up slices on Query (i.e. query[x:y]) to work properly for zero length
    slices, slices with None on either end.
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 上的切片（即 query[x:y]）在长度为零的切片、两端为 None 的切片上正常工作的问题。
- en: 'References: [#1177](https://www.sqlalchemy.org/trac/ticket/1177)'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1177](https://www.sqlalchemy.org/trac/ticket/1177)
- en: '**[orm]**'
  id: totrans-913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an example illustrating Celko’s “nested sets” as a SQLA mapping.
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个示例，说明了 Celko 的“嵌套集”作为 SQLA 映射的示例。
- en: '**[orm]**'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() with an alias argument works even when the alias is embedded
    in a SELECT, as when sent to the Query via query.select_from().
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含别名参数的 contains_eager() 即使别名嵌入在 SELECT 中，也可以在通过 query.select_from() 发送到 Query
    时工作。
- en: '**[orm]**'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() usage is now compatible with a Query that also contains a regular
    eager load and limit/offset, in that the columns are added to the Query-generated
    subquery.
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager() 的用法现在与同时包含常规 eager load 和 limit/offset 的 Query 兼容，因为这些列被添加到
    Query 生成的子查询中。
- en: 'References: [#1180](https://www.sqlalchemy.org/trac/ticket/1180)'
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1180](https://www.sqlalchemy.org/trac/ticket/1180)
- en: '**[orm]**'
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.execute() will execute a Sequence object passed to it (regression from
    0.4).
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.execute() 将执行传递给它的 Sequence 对象（从 0.4 版本开始的回归）。
- en: '**[orm]**'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed the “raiseerror” keyword argument from object_mapper() and class_mapper().
    These functions raise in all cases if the given class/instance is not mapped.
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 object_mapper() 和 class_mapper() 中删除了“raiseerror”关键字参数。如果给定的类/实例未映射，这些函数在所有情况下都会引发异常。
- en: '**[orm]**'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed session.transaction.commit() on a autocommit=False session not starting
    a new transaction.
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 autocommit=False 会话上调用 session.transaction.commit() 时未启动新事务的 bug。
- en: '**[orm]**'
  id: totrans-926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some adjustments to Session.identity_map’s weak referencing behavior to reduce
    asynchronous GC side effects.
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 Session.identity_map 的弱引用行为进行了一些调整，以减少异步 GC 副作用。
- en: '**[orm]**'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjustment to Session’s post-flush accounting of newly “clean” objects to better
    protect against operating on objects as they’re asynchronously gc’ed.
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 Session 在后刷新时对新“干净”对象的记账，以更好地防止在异步 gc 时对对象进行操作。
- en: 'References: [#1182](https://www.sqlalchemy.org/trac/ticket/1182)'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1182](https://www.sqlalchemy.org/trac/ticket/1182)
- en: sql
  id: totrans-931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.in_(someselect) 现在可以作为一个列子句表达式使用，而不会使子查询泄漏到 FROM 子句中。
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1074](https://www.sqlalchemy.org/trac/ticket/1074)
- en: mysql
  id: totrans-935
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Temporary tables are now reflectable.
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 临时表现在可以反射。
- en: sqlite
  id: totrans-938
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Overhauled SQLite date/time bind/result processing to use regular expressions
    and format strings, rather than strptime/strftime, to generically support pre-1900
    dates, dates with microseconds.
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQLite 日期/时间绑定/结果处理进行了全面改进，使用正则表达式和格式字符串，而不是 strptime/strftime，以通用支持 1900
    年前的日期、带微秒的日期。
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#968](https://www.sqlalchemy.org/trac/ticket/968)
- en: '**[sqlite]**'
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlite 方言中禁用了 String（以及 Unicode、UnicodeText 等）的 convert_unicode 逻辑，以适应 pysqlite
    2.5.0 的新要求，即只接受 Python unicode 对象；[https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
- en: oracle
  id: totrans-944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle will detect string-based statements which contain comments at the front
    before a SELECT as SELECT statements.
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 将检测包含在 SELECT 前面的字符串型语句中的注释作为 SELECT 语句。
- en: 'References: [#1187](https://www.sqlalchemy.org/trac/ticket/1187)'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1187](https://www.sqlalchemy.org/trac/ticket/1187)
- en: 0.5.0rc1
  id: totrans-948
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc1
- en: 'Released: Thu Sep 11 2008'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008 年 9 月 11 日 星期四
- en: orm
  id: totrans-950
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query now has delete() and update(values) methods. This allows to perform bulk
    deletes/updates with the Query object.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 现在具有 delete() 和 update(values) 方法。这允许使用 Query 对象执行批量删除/更新。
- en: '**[orm]**'
  id: totrans-953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The RowTuple object returned by Query(*cols) now features keynames which prefer
    mapped attribute names over column keys, column keys over column names, i.e. Query(Class.foo,
    Class.bar) will have names “foo” and “bar” even if those are not the names of
    the underlying Column objects. Direct Column objects such as Query(table.c.col)
    will return the “key” attribute of the Column.
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询(Query(*cols)返回的 RowTuple 对象现在优先使用映射属性名称而不是列键，列键而不是列名作为键名，即使这些不是底层 Column
    对象的名称。直接的 Column 对象，如 Query(table.c.col)，将返回 Column 的“key”属性。
- en: '**[orm]**'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added scalar() and value() methods to Query, each return a single scalar value.
    scalar() takes no arguments and is roughly equivalent to first()[0], value() takes
    a single column expression and is roughly equivalent to values(expr).next()[0].
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 添加了 scalar() 和 value() 方法，每个方法返回一个标量值。scalar() 不带参数，大致相当于 first()[0]，value()
    接受一个列表达式，大致相当于 values(expr).next()[0]。
- en: '**[orm]**'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the determination of the FROM clause when placing SQL expressions in
    the query() list of entities. In particular scalar subqueries should not “leak”
    their inner FROM objects out into the enclosing query.
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在查询() 实体列表中放置 SQL 表达式时确定 FROM 子句的方法。特别是标量子查询不应该将其内部 FROM 对象泄露到外部查询中。
- en: '**[orm]**'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Joins along a relation() from a mapped class to a mapped subclass, where the
    mapped subclass is configured with single table inheritance, will include an IN
    clause which limits the subtypes of the joined class to those requested, within
    the ON clause of the join. This takes effect for eager load joins as well as query.join().
    Note that in some scenarios the IN clause will appear in the WHERE clause of the
    query as well since this discrimination has multiple trigger points.
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从一个映射类到一个映射子类的关系(relation())的连接，在映射子类配置为单表继承时，将包括一个 IN 子句，该子句限制了连接类的子类型为请求的类型，在连接的
    ON 子句中生效。这对于急加载连接和查询.join()都生效。请注意，在某些情况下，IN 子句也会出现在查询的 WHERE 子句中，因为这个区分有多个触发点。
- en: '**[orm]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: AttributeExtension has been refined such that the event is fired before the
    mutation actually occurs. Additionally, the append() and set() methods must now
    return the given value, which is used as the value to be used in the mutation
    operation. This allows creation of validating AttributeListeners which raise before
    the action actually occurs, and which can change the given value into something
    else before its used.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AttributeExtension 已经得到改进，使得事件在突变实际发生之前触发。此外，append() 和 set() 方法现在必须返回给定的值，该值用作突变操作中要使用的值。这允许创建验证
    AttributeListeners，在实际操作发生之前引发异常，并且可以将给定的值更改为其他值。
- en: '**[orm]**'
  id: totrans-963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: column_property(), composite_property(), and relation() now accept a single
    or list of AttributeExtensions using the “extension” keyword argument.
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_property()、composite_property() 和 relation() 现在接受一个或多个 AttributeExtensions，使用“extension”关键字参数。
- en: '**[orm]**'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by().get() silently drops the “ORDER BY” from the query issued by
    GET but does not raise an exception.
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by().get() 从 GET 所发出的查询中悄悄删除了“ORDER BY”，但不会引发异常。
- en: '**[orm]**'
  id: totrans-967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a Validator AttributeExtension, as well as a @validates decorator which
    is used in a similar fashion as @reconstructor, and marks a method as validating
    one or more mapped attributes.
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个验证器 AttributeExtension，以及一个 @validates 装饰器，其用法与 @reconstructor 类似，标记一个方法为验证一个或多个映射属性。
- en: '**[orm]**'
  id: totrans-969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: class.someprop.in_() raises NotImplementedError pending the implementation of
    “in_” for relation
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: class.someprop.in_() 在关系“in_”实现之前引发 NotImplementedError
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140)'
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1140](https://www.sqlalchemy.org/trac/ticket/1140)
- en: '**[orm]**'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed primary key update for many-to-many collections where the collection had
    not been loaded yet
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了尚未加载集合的多对多集合的主键更新问题
- en: 'References: [#1127](https://www.sqlalchemy.org/trac/ticket/1127)'
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1127](https://www.sqlalchemy.org/trac/ticket/1127)
- en: '**[orm]**'
  id: totrans-975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby deferred() columns with a group in conjunction with an otherwise
    unrelated synonym() would produce an AttributeError during deferred load.
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用组的 deferred() 列与一个无关的 synonym() 一起产生 AttributeError 的 bug，在延迟加载时。
- en: '**[orm]**'
  id: totrans-977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The before_flush() hook on SessionExtension takes place before the list of new/dirty/deleted
    is calculated for the final time, allowing routines within before_flush() to further
    change the state of the Session before the flush proceeds.
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SessionExtension上的before_flush()挂钩在最终计算新/脏/已删除列表之前发生，允许在flush继续之前在before_flush()中进一步更改Session的状态。
- en: 'References: [#1128](https://www.sqlalchemy.org/trac/ticket/1128)'
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1128](https://www.sqlalchemy.org/trac/ticket/1128)
- en: '**[orm]**'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “extension” argument to Session and others can now optionally be a list,
    supporting events sent to multiple SessionExtension instances. Session places
    SessionExtensions in Session.extensions.
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session和其他对象的“extension”参数现在可以选择性地是一个列表，支持发送到多个SessionExtension实例的事件。Session将SessionExtensions放在Session.extensions中。
- en: '**[orm]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reentrant calls to flush() raise an error. This also serves as a rudimentary,
    but not foolproof, check against concurrent calls to Session.flush().
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对flush()的重入调用会引发错误。这也作为针对Session.flush()并发调用的基本但不是绝对可靠的检查。
- en: '**[orm]**'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the behavior of query.join() when joining to joined-table inheritance
    subclasses, using explicit join criteria (i.e. not on a relation).
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.join()在连接到已连接表继承子类时的行为，使用显式连接条件（即不是在关系上）。
- en: '**[orm]**'
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: '@orm.attributes.reconstitute and MapperExtension.reconstitute have been renamed
    to @orm.reconstructor and MapperExtension.reconstruct_instance'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@orm.attributes.reconstitute和MapperExtension.reconstitute已重命名为@orm.reconstructor和MapperExtension.reconstruct_instance'
- en: '**[orm]**'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed @reconstructor hook for subclasses which inherit from a base class.
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从基类继承的子类的@reconstructor挂钩。
- en: 'References: [#1129](https://www.sqlalchemy.org/trac/ticket/1129)'
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1129](https://www.sqlalchemy.org/trac/ticket/1129)
- en: '**[orm]**'
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The composite() property type now supports a __set_composite_values__() method
    on the composite class which is required if the class represents state using attribute
    names other than the column’s keynames; default-generated values now get populated
    properly upon flush. Also, composites with attributes set to None compare correctly.
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: composite()属性类型现在支持composite类上的__set_composite_values__()方法，如果类使用属性名称而不是列的键名表示状态，则需要该方法；默认生成的值现在在flush时正确填充。此外，将属性设置为None的复合体现在比较时是正确的。
- en: 'References: [#1132](https://www.sqlalchemy.org/trac/ticket/1132)'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1132](https://www.sqlalchemy.org/trac/ticket/1132)
- en: '**[orm]**'
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The 3-tuple of iterables returned by attributes.get_history() may now be a mix
    of lists and tuples. (Previously members were always lists.)
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: attributes.get_history()返回的三元组现在可以是列表和元组的混合。（以前成员总是列表。）
- en: '**[orm]**'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby changing a primary key attribute on an entity where the attribute’s
    previous value had been expired would produce an error upon flush().
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在实体上更改主键属性的错误，其中属性的先前值已过期会在flush()时产生错误。
- en: 'References: [#1151](https://www.sqlalchemy.org/trac/ticket/1151)'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1151](https://www.sqlalchemy.org/trac/ticket/1151)
- en: '**[orm]**'
  id: totrans-999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed custom instrumentation bug whereby get_instance_dict() was not called
    for newly constructed instances not loaded by the ORM.
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义仪器化bug，即对于ORM未加载的新构造实例，未调用get_instance_dict()。
- en: '**[orm]**'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.delete() adds the given object to the session if not already present.
    This was a regression bug from 0.4.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定对象尚未存在，则Session.delete()将给定对象添加到会话中。这是从0.4版本中的一个回归错误。
- en: 'References: [#1150](https://www.sqlalchemy.org/trac/ticket/1150)'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1150](https://www.sqlalchemy.org/trac/ticket/1150)
- en: '**[orm]**'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The echo_uow flag on Session is deprecated, and unit-of-work logging is now
    application-level only, not per-session level.
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session上的echo_uow标志已弃用，工作单元日志现在仅适用于应用程序级别，而不是每个会话级别。
- en: '**[orm]**'
  id: totrans-1006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed conflicting contains() operator from InstrumentedAttribute which didn’t
    accept escape kwaarg.
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从InstrumentedAttribute中删除了不接受escape kwaarg的冲突contains()运算符。
- en: 'References: [#1153](https://www.sqlalchemy.org/trac/ticket/1153)'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1153](https://www.sqlalchemy.org/trac/ticket/1153)
- en: sql
  id: totrans-1009
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Temporarily rolled back the “ORDER BY” enhancement from. This feature is on
    hold pending further development.
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 暂时回滚了“ORDER BY”增强功能。此功能暂停等待进一步开发。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: '**[sql]**'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The exists() construct won’t “export” its contained list of elements as FROM
    clauses, allowing them to be used more effectively in the columns clause of a
    SELECT.
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exists()构造不会将其包含的元素列表作为FROM子句“导出”，从而使它们可以更有效地在SELECT的列子句中使用。
- en: '**[sql]**'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: and_() and or_() now generate a ColumnElement, allowing boolean expressions
    as result columns, i.e. select([and_(1, 0)]).
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: and_() 和 or_() 现在生成一个 ColumnElement，允许布尔表达式作为结果列，例如 select([and_(1, 0)]).
- en: 'References: [#798](https://www.sqlalchemy.org/trac/ticket/798)'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#798](https://www.sqlalchemy.org/trac/ticket/798)
- en: '**[sql]**'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Bind params now subclass ColumnElement which allows them to be selectable by
    orm.query (they already had most ColumnElement semantics).
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Bind 参数现在是 ColumnElement 的子类，这使得它们可以被 orm.query 选择（它们已经具有大多数 ColumnElement 语义）。
- en: '**[sql]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added select_from() method to exists() construct, which becomes more and more
    compatible with a regular select().
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 exists() 构造添加了 select_from() 方法，使其与常规 select() 更加兼容。
- en: '**[sql]**'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added func.min(), func.max(), func.sum() as “generic functions”, which basically
    allows for their return type to be determined automatically. Helps with dates
    on SQLite, decimal types, others.
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 func.min()、func.max()、func.sum() 作为“通用函数”，基本上允许它们的返回类型自动确定。有助于 SQLite 上的日期、十进制类型等。
- en: 'References: [#1160](https://www.sqlalchemy.org/trac/ticket/1160)'
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1160](https://www.sqlalchemy.org/trac/ticket/1160)
- en: '**[sql]**'
  id: totrans-1025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added decimal.Decimal as an “auto-detect” type; bind parameters and generic
    functions will set their type to Numeric when a Decimal is used.
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 decimal.Decimal 作为“自动检测”类型；当使用 Decimal ��，绑定参数和通用函数将将它们的类型设置为 Numeric。
- en: schema
  id: totrans-1027
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added “sorted_tables” accessor to MetaData, which returns Table objects sorted
    in order of dependency as a list. This deprecates the MetaData.table_iterator()
    method. The “reverse=False” keyword argument has also been removed from util.sort_tables();
    use the Python ‘reversed’ function to reverse the results.
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“sorted_tables”访问器到 MetaData，它返回按依赖顺序排序的 Table 对象列表。这使得 MetaData.table_iterator()
    方法被弃用。util.sort_tables() 中的“reverse=False”关键字参数也已被移除；使用 Python 的 ‘reversed’ 函数来反转结果。
- en: 'References: [#1033](https://www.sqlalchemy.org/trac/ticket/1033)'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1033](https://www.sqlalchemy.org/trac/ticket/1033)
- en: '**[schema]**'
  id: totrans-1031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The ‘length’ argument to all Numeric types has been renamed to ‘scale’. ‘length’
    is deprecated and is still accepted with a warning.
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有 Numeric 类型的 ‘length’ 参数已重命名为 ‘scale’。‘length’ 已被弃用，仍会发出警告。
- en: '**[schema]**'
  id: totrans-1033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Dropped 0.3-compatibility for user defined types (convert_result_value, convert_bind_param).
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放弃了对用户定义类型（convert_result_value, convert_bind_param）的 0.3 兼容性。
- en: mysql
  id: totrans-1035
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The ‘length’ argument to MSInteger, MSBigInteger, MSTinyInteger, MSSmallInteger
    and MSYear has been renamed to ‘display_width’.
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSInteger、MSBigInteger、MSTinyInteger、MSSmallInteger 和 MSYear 的 ‘length’ 参数已重命名为
    ‘display_width’。
- en: '**[mysql]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added MSMediumInteger type.
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MSMediumInteger 类型。
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1146](https://www.sqlalchemy.org/trac/ticket/1146)
- en: '**[mysql]**'
  id: totrans-1041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the function func.utc_timestamp() compiles to UTC_TIMESTAMP, without the parenthesis,
    which seem to get in the way when using in conjunction with executemany().
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数 func.utc_timestamp() 编译为 UTC_TIMESTAMP，不带括号，当与 executemany() 结合使用时，括号似乎会妨碍使用。
- en: oracle
  id: totrans-1043
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: limit/offset no longer uses ROW NUMBER OVER to limit rows, and instead uses
    subqueries in conjunction with a special Oracle optimization comment. Allows LIMIT/OFFSET
    to work in conjunction with DISTINCT.
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: limit/offset 不再使用 ROW NUMBER OVER 来限制行数，而是与特殊的 Oracle 优化注释一起使用子查询。允许 LIMIT/OFFSET
    与 DISTINCT 一起使用。
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#536](https://www.sqlalchemy.org/trac/ticket/536)
- en: '**[oracle]**'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: has_sequence() now takes the current “schema” argument into account
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: has_sequence() 现在考虑当前的 “schema” 参数
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1155](https://www.sqlalchemy.org/trac/ticket/1155)
- en: '**[oracle]**'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added BFILE to reflected type names
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 BFILE 添加到反射类型名称中
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1121](https://www.sqlalchemy.org/trac/ticket/1121)
- en: misc
  id: totrans-1053
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug whereby mapper couldn’t initialize if a composite primary key referenced
    another table that was not defined yet.
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果复合主键引用另一个尚未定义的表，映射器无法初始化的 bug。
- en: 'References: [#1161](https://www.sqlalchemy.org/trac/ticket/1161)'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1161](https://www.sqlalchemy.org/trac/ticket/1161)
- en: '**[declarative]**'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed exception throw which would occur when string-based primaryjoin condition
    was used in conjunction with backref.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 backref 时使用基于字符串的 primaryjoin 条件会引发异常的问题。
- en: 0.5.0beta3
  id: totrans-1059
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0beta3
- en: 'Released: Mon Aug 04 2008'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年8月4日 星期一
- en: orm
  id: totrans-1061
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “entity_name” feature of SQLAlchemy mappers has been removed. For rationale,
    see [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 映射器的“entity_name” 功能已被移除。有关原因，请参见 [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
- en: '**[orm]**'
  id: totrans-1064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “autoexpire” flag on Session, sessionmaker(), and scoped_session() has been
    renamed to “expire_on_commit”. It does not affect the expiration behavior of rollback().
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session、sessionmaker() 和 scoped_session() 上的“autoexpire” 标志已重命名为“expire_on_commit”。它不会影响
    rollback() 的过期行为。
- en: '**[orm]**'
  id: totrans-1066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed endless loop bug which could occur within a mapper’s deferred load of
    inherited attributes.
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在映射器延迟加载继承属性时可能发生的无限循环 bug。
- en: '**[orm]**'
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a legacy-support flag “_enable_transaction_accounting” flag added to Session
    which when False, disables all transaction-level object accounting, including
    expire on rollback, expire on commit, new/deleted list maintenance, and autoflush
    on begin.
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Session 添加了一个名为“_enable_transaction_accounting”的遗留支持标志，当为 False 时，禁用所有事务级对象计数，包括回滚时的过期、提交时的过期、新建/删除列表维护和开始时的自动刷新。
- en: '**[orm]**'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ‘cascade’ parameter to relation() accepts None as a value, which is equivalent
    to no cascades.
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation() 的“cascade” 参数接受 None 作为值，这等效于没有级联。
- en: '**[orm]**'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A critical fix to dynamic relations allows the “modified” history to be properly
    cleared after a flush().
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对动态关系进行了关键修复，允许在 flush() 后正确清除“修改”历史记录。
- en: '**[orm]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: user-defined @properties on a class are detected and left in place during mapper
    initialization. This means that a table-bound column of the same name will not
    be mapped at all if a @property is in the way (and the column is not remapped
    to a different name), nor will an instrumented attribute from an inherited class
    be applied. The same rules apply for names excluded using the include_properties/exclude_properties
    collections.
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类上的用户定义的@property 在映射器初始化期间被检测并保留在原位。这意味着如果@property 挡住了同名的表列，那么该列将根本不会被映射（并且列没有被重新映射到不同的名称），也不会应用来自继承类的受控属性。使用
    include_properties/exclude_properties 集合排除的名称也适用相同的规则。
- en: '**[orm]**'
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new SessionExtension hook called after_attach(). This is called at the
    point of attachment for objects via add(), add_all(), delete(), and merge().
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个名为 after_attach() 的新 SessionExtension 钩子。这在通过 add()、add_all()、delete()
    和 merge() 附加对象时调用。
- en: '**[orm]**'
  id: totrans-1078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A mapper which inherits from another, when inheriting the columns of its inherited
    mapper, will use any reassigned property names specified in that inheriting mapper.
    Previously, if “Base” had reassigned “base_id” to the name “id”, “SubBase(Base)”
    would still get an attribute called “base_id”. This could be worked around by
    explicitly stating the column in each submapper as well but this is fairly unworkable
    and also impossible when using declarative.
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从另一个映射器继承的映射器，在继承其继承映射器的列时，将使用在该继承映射器中指定的重新分配的属性名称。以前，如果“Base” 将“base_id” 重新分配为名称“id”，那么“SubBase(Base)”
    仍将获得一个名为“base_id”的属性。这可以通过在每个子映射器中显式声明列来解决，但这相当难以实现，而且在使用声明时也是不可能的。
- en: 'References: [#1111](https://www.sqlalchemy.org/trac/ticket/1111)'
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1111](https://www.sqlalchemy.org/trac/ticket/1111)
- en: '**[orm]**'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a series of potential race conditions in Session whereby asynchronous
    GC could remove unmodified, no longer referenced items from the session as they
    were present in a list of items to be processed, typically during session.expunge_all()
    and dependent methods.
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Session 中潜在的一系列竞争条件，异步 GC 可能会在会话中删除未修改、不再引用的项目，因为它们存在于要处理的项目列表中，通常在 session.expunge_all()
    和相关方法中。
- en: '**[orm]**'
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some improvements to the _CompileOnAttr mechanism which should reduce the probability
    of “Attribute x was not replaced during compile” warnings. (this generally applies
    to SQLA hackers, like Elixir devs).
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 _CompileOnAttr 机制进行了一些改进，这应该会减少“在编译期间未替换属性 x”警告的概率。（这通常适用于 SQLA 黑客，如 Elixir
    开发人员）。
- en: '**[orm]**'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the “unsaved, pending instance” FlushError raised for a pending
    orphan would not take superclass mappers into account when generating the list
    of relations responsible for the error.
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即对于挂起的孤立实例引发的“未保存的挂起实例” FlushError 在生成负责错误的关系列表时不会考虑超类映射器。
- en: sql
  id: totrans-1087
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.count() with no arguments renders as COUNT(*), equivalent to func.count(text(‘*’)).
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有参数的 func.count() 渲染为 COUNT(*)，相当于 func.count(text(‘*’))。
- en: '**[sql]**'
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: simple label names in ORDER BY expressions render as themselves, and not as
    a re-statement of their corresponding expression. This feature is currently enabled
    only for SQLite, MySQL, and PostgreSQL. It can be enabled on other dialects as
    each is shown to support this behavior.
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORDER BY 表达式中的简单标签名称呈现为它们自身，而不是其对应表达式的重新陈述。目前，此功能仅对 SQLite、MySQL 和 PostgreSQL
    启用。可以在显示支持此行为的每个方言时启用它。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: mysql
  id: totrans-1093
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Quoting of MSEnum values for use in CREATE TABLE is now optional & will be quoted
    on demand as required. (Quoting was always optional for use with existing tables.)
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在 CREATE TABLE 中使用的 MSEnum 值的引用现在是可选的，并将根据需要进行引用。 (对于现有表格，引用始终是可选的。)
- en: 'References: [#1110](https://www.sqlalchemy.org/trac/ticket/1110)'
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1110](https://www.sqlalchemy.org/trac/ticket/1110)
- en: misc
  id: totrans-1097
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Class-bound attributes sent as arguments to relation()’s remote_side and foreign_keys
    parameters are now accepted, allowing them to be used with declarative. Additionally
    fixed bugs involving order_by being specified as a class-bound attribute in conjunction
    with eager loading.
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为参数发送给 relation() 的 remote_side 和 foreign_keys 参数的类绑定属性现在被接受，允许它们与声明式一起使用。此外，修复了在与急加载一起指定为类绑定属性时指定
    order_by 的错误。
- en: '**[ext]**'
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: declarative initialization of Columns adjusted so that non-renamed columns initialize
    in the same way as a non declarative mapper. This allows an inheriting mapper
    to set up its same-named “id” columns in particular such that the parent “id”
    column is favored over the child column, reducing database round trips when this
    value is requested.
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了声明式初始化的 Columns，使得非重命名列以与非声明式映射器相同的方式初始化。这允许继承映射器设置其同名的“id”列，以便父“id”列优先于子列，减少请求此值时的数据库往返。
- en: 0.5.0beta2
  id: totrans-1102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0beta2
- en: 'Released: Mon Jul 14 2008'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年7月14日星期一
- en: orm
  id: totrans-1104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: In addition to expired attributes, deferred attributes also load if their data
    is present in the result set.
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了过期属性，如果延迟属性的数据存在于结果集中，则也会加载。
- en: 'References: [#870](https://www.sqlalchemy.org/trac/ticket/870)'
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#870](https://www.sqlalchemy.org/trac/ticket/870)
- en: '**[orm]**'
  id: totrans-1108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: session.refresh() raises an informative error message if the list of attributes
    does not include any column-based attributes.
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果属性列表不包含任何基于列的属性，则 session.refresh() 将引发一个信息性错误消息。
- en: '**[orm]**'
  id: totrans-1110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: query() raises an informative error message if no columns or mappers are specified.
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未指定列或映射器，query() 将引发一个信息性错误消息。
- en: '**[orm]**'
  id: totrans-1112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: lazy loaders now trigger autoflush before proceeding. This allows expire() of
    a collection or scalar relation to function properly in the context of autoflush.
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 惰性加载器现在在继续之前会触发自动刷新。这使得在自动刷新的情况下，集合或标量关系的 expire() 函数能够正常工作。
- en: '**[orm]**'
  id: totrans-1114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: column_property() attributes which represent SQL expressions or columns that
    are not present in the mapped tables (such as those from views) are automatically
    expired after an INSERT or UPDATE, assuming they have not been locally modified,
    so that they are refreshed with the most recent data upon access.
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_property() 属性代表不在映射表中的 SQL 表达式或列（例如来自视图的列），在 INSERT 或 UPDATE 后会自动过期，假设它们没有在本地修改，以便在访问时刷新为最新数据。
- en: 'References: [#887](https://www.sqlalchemy.org/trac/ticket/887)'
  id: totrans-1116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#887](https://www.sqlalchemy.org/trac/ticket/887)
- en: '**[orm]**'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: Fixed explicit, self-referential joins between two joined-table inheritance
    mappers when using query.join(cls, aliased=True).
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 query.join(cls, aliased=True) 时，修复了两个连接表继承映射器之间的显式自引用连接。
- en: 'References: [#1082](https://www.sqlalchemy.org/trac/ticket/1082)'
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1082](https://www.sqlalchemy.org/trac/ticket/1082)
- en: '**[orm]**'
  id: totrans-1120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: Fixed query.join() when used in conjunction with a columns-only clause and a
    SQL-expression ON clause in the join.
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与仅包含列子句和 SQL 表达式 ON 子句的 join 一起使用时，修复了 query.join()。
- en: '**[orm]**'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: The “allow_column_override” flag from mapper() has been removed. This flag is
    virtually always misunderstood. Its specific functionality is available via the
    include_properties/exclude_properties mapper arguments.
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper() 中的“allow_column_override”标志已被移除。这个标志几乎总是被误解。其特定功能可以通过 include_properties/exclude_properties
    映射器参数实现。
- en: '**[orm]**'
  id: totrans-1124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: Repaired __str__() method on Query.
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 上的 __str__() 方法。
- en: 'References: [#1066](https://www.sqlalchemy.org/trac/ticket/1066)'
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1066](https://www.sqlalchemy.org/trac/ticket/1066)
- en: '**[orm]**'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[对象关系映射]**'
- en: Session.bind gets used as a default even when table/mapper specific binds are
    defined.
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使定义了特定于表/映射器的绑定，Session.bind 仍然作为默认值使用。
- en: sql
  id: totrans-1129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new match() operator that performs a full-text search. Supported on PostgreSQL,
    SQLite, MySQL, MS-SQL, and Oracle backends.
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 match() 运算符，执行全文搜索。支持 PostgreSQL、SQLite、MySQL、MS-SQL 和 Oracle 后端。
- en: schema
  id: totrans-1132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Added prefixes option to Table that accepts a list of strings to insert after
    CREATE in the CREATE TABLE statement.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 prefixes 选项到 Table，接受一个字符串列表，在 CREATE TABLE 语句中的 CREATE 后插入。
- en: 'References: [#1075](https://www.sqlalchemy.org/trac/ticket/1075)'
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1075](https://www.sqlalchemy.org/trac/ticket/1075)
- en: '**[schema]**'
  id: totrans-1136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Unicode, UnicodeText types now set “assert_unicode” and “convert_unicode” by
    default, but accept overriding **kwargs for these values.
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode、UnicodeText 类型现在默认设置为“assert_unicode”和“convert_unicode”，但接受这些值的覆盖 **kwargs。
- en: extensions
  id: totrans-1138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-1139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Declarative supports a __table_args__ class variable, which is either a dictionary,
    or tuple of the form (arg1, arg2, …, {kwarg1:value, …}) which contains positional
    + kw arguments to be passed to the Table constructor.
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明性支持一个 __table_args__ 类变量，它可以是一个字典，或者是一个元组形式的 (arg1, arg2, …, {kwarg1:value,
    …})，其中包含要传递给 Table 构造函数的位置参数 + 关键字参数。
- en: 'References: [#1096](https://www.sqlalchemy.org/trac/ticket/1096)'
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1096](https://www.sqlalchemy.org/trac/ticket/1096)
- en: sqlite
  id: totrans-1142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Modified SQLite’s representation of “microseconds” to match the output of str(somedatetime),
    i.e. in that the microseconds are represented as fractional seconds in string
    format. This makes SQLA’s SQLite date type compatible with datetimes that were
    saved directly using Pysqlite (which just calls str()). Note that this is incompatible
    with the existing microseconds values in a SQLA 0.4 generated SQLite database
    file.
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 SQLite 对“微秒”的表示，使其与 str(somedatetime) 的输出匹配，即微秒以字符串格式的小数秒表示。这使得 SQLA 的 SQLite
    日期类型与直接使用 Pysqlite 保存的日期时间兼容（Pysqlite 只调用 str()）。请注意，这与 SQLA 0.4 生成的 SQLite 数据库文件中现有的微秒值不兼容。
- en: 'To get the old behavior globally:'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要全局获取旧行为：
- en: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
  id: totrans-1146
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
- en: 'To get the behavior on individual DateTime types:'
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在单个 DateTime 类型上获取行为：
- en: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
  id: totrans-1148
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
- en: Then use “t” as the type on the Column.
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在 Column 上使用“t”作为类型。
- en: 'References: [#1090](https://www.sqlalchemy.org/trac/ticket/1090)'
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1090](https://www.sqlalchemy.org/trac/ticket/1090)
- en: '**[sqlite]**'
  id: totrans-1151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: SQLite Date, DateTime, and Time types only accept Python datetime objects now,
    not strings. If you’d like to format dates as strings yourself with SQLite, use
    a String type. If you’d like them to return datetime objects anyway despite their
    accepting strings as input, make a TypeDecorator around String - SQLA doesn’t
    encourage this pattern.
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 的 Date、DateTime 和 Time 类型现在只接受 Python datetime 对象，而不是字符串。如果您想要自己用 SQLite
    格式化日期为字符串，请使用 String 类型。如果您希望它们无论如何都返回 datetime 对象，尽管它们接受字符串作为输入，请围绕 String 创建一个
    TypeDecorator - SQLA 不鼓励这种模式。
- en: 0.5.0beta1
  id: totrans-1153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0beta1
- en: 'Released: Thu Jun 12 2008'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年6月12日 星期四
- en: general
  id: totrans-1155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: global “propigate”->”propagate” change.
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“propigate”->”propagate” 更改。
- en: orm
  id: totrans-1158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果每个 Column 的“key”与列的名称不同，则 polymorphic_union() 函数将尊重每个 Column 的“key”。
- en: '**[orm]**'
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed 0.4-only bug preventing composite columns from working properly with inheriting
    mappers
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个仅在0.4版本中存在的 bug，该 bug 阻止了复合列与继承映射器正常工作。
- en: 'References: [#1199](https://www.sqlalchemy.org/trac/ticket/1199)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1199](https://www.sqlalchemy.org/trac/ticket/1199)
- en: '**[orm]**'
  id: totrans-1164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects. Ported from 0.5.
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了映射器中与 RLock 相关的 bug，该 bug 可能在重新进入映射器 compile() 调用时发生死锁，这在 ForeignKey 对象中使用声明性构造时会发生。从
    0.5 移植而来。
- en: '**[orm]**'
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合类型中的 bug，该 bug 阻止了主键复合类型的变异。
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1213](https://www.sqlalchemy.org/trac/ticket/1213)
- en: '**[orm]**'
  id: totrans-1169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added ScopedSession.is_active accessor.
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 ScopedSession.is_active 访问器。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: '**[orm]**'
  id: totrans-1172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Class-bound accessor can be used as the argument to relation() order_by.
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类绑定访问器可以作为 relation() order_by 的参数使用。
- en: 'References: [#939](https://www.sqlalchemy.org/trac/ticket/939)'
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#939](https://www.sqlalchemy.org/trac/ticket/939)
- en: '**[orm]**'
  id: totrans-1175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed shard_id argument on ShardedSession.execute().
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ShardedSession.execute() 上的 shard_id 参数。
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1072](https://www.sqlalchemy.org/trac/ticket/1072)
- en: sql
  id: totrans-1178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  id: totrans-1180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate() 检查关闭状态以避免属性错误。
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1246](https://www.sqlalchemy.org/trac/ticket/1246)
- en: '**[sql]**'
  id: totrans-1182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: NullPool supports reconnect on failure behavior.
  id: totrans-1183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NullPool 支持失��时重新连接的行为。
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1094](https://www.sqlalchemy.org/trac/ticket/1094)
- en: '**[sql]**'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine 用于缓存特定于方言的类型的每个方言缓存现在是 WeakKeyDictionary。这是为了防止方言对象被引用，以便应用程序创建任意数量的引擎或方言。这会带来一些性能损失，将在
    0.6 版本中解决。
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1299](https://www.sqlalchemy.org/trac/ticket/1299)
- en: '**[sql]**'
  id: totrans-1188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 反射方法，以便检测到不存在的 cursor.description，触发自动关闭游标，以便在最近的 pysqlite 版本上不会在
    fetchone() 调用时失败，因为没有结果。
- en: mysql
  id: totrans-1190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug in exception raise when FK columns not present during reflection.
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射期间未出现 FK 列时引发异常的错误。
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1241](https://www.sqlalchemy.org/trac/ticket/1241)
- en: oracle
  id: totrans-1194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了某些类型的 out 参数无法接收的错误；非常感谢 huddlej at wwu.edu！
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1265](https://www.sqlalchemy.org/trac/ticket/1265)
- en: misc
  id: totrans-1198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-1199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The “__init__” trigger/decorator added by mapper now attempts to exactly mirror
    the argument signature of the original __init__. The pass-through for ‘_sa_session’
    is no longer implicit- you must allow for this keyword argument in your constructor.
  id: totrans-1200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 mapper 添加的 “__init__” 触发器/装饰器尝试精确地模仿原始 __init__ 的参数签名。对于 ‘_sa_session’ 的传递不再是隐式的-您必须在构造函数中允许此关键字参数。
- en: '**[no_tags]**'
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: ClassState is renamed to ClassManager.
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClassState 更名为 ClassManager。
- en: '**[no_tags]**'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Classes may supply their own InstrumentationManager by providing a __sa_instrumentation_manager__
    property.
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类可以通过提供 __sa_instrumentation_manager__ 属性来提供自己的 InstrumentationManager。
- en: '**[no_tags]**'
  id: totrans-1205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Custom instrumentation may use any mechanism to associate a ClassManager with
    a class and an InstanceState with an instance. Attributes on those objects are
    still the default association mechanism used by SQLAlchemy’s native instrumentation.
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义仪器可能使用任何机制将 ClassManager 与类关联，并将 InstanceState 与实例关联。这些对象上的属性仍然是 SQLAlchemy
    原生仪器使用的默认关联机制。
- en: '**[no_tags]**'
  id: totrans-1207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Moved entity_name, _sa_session_id, and _instance_key from the instance object
    to the instance state. These values are still available in the old way, which
    is now deprecated, using descriptors attached to the class. A deprecation warning
    will be issued when accessed.
  id: totrans-1208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 entity_name、_sa_session_id 和 _instance_key 从实例对象移动到实例状态。这些值仍然以旧方式可用，现在已弃用，使用附加到类的描述符。在访问时将发出弃用警告。
- en: '**[no_tags]**'
  id: totrans-1209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _prepare_instrumentation 的 _prepare_instrumentation 别名已被移除。
- en: '**[no_tags]**'
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: sqlalchemy.exceptions has been renamed to sqlalchemy.exc. The module may be
    imported under either name.
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.exceptions 已更名为 sqlalchemy.exc。该模块可以使用任一名称导入。
- en: '**[no_tags]**'
  id: totrans-1213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: ORM-related exceptions are now defined in sqlalchemy.orm.exc. ConcurrentModificationError,
    FlushError, and UnmappedColumnError compatibility aliases are installed in sqlalchemy.exc
    during the import of sqlalchemy.orm.
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 ORM 相关的异常现在在 sqlalchemy.orm.exc 中定义。在导入 sqlalchemy.orm 期间，ConcurrentModificationError、FlushError
    和 UnmappedColumnError 的兼容性别名将安装在 sqlalchemy.exc 中。
- en: '**[no_tags]**'
  id: totrans-1215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: sqlalchemy.logging has been renamed to sqlalchemy.log.
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.logging 已更名为 sqlalchemy.log。
- en: '**[no_tags]**'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The transitional sqlalchemy.log.SADeprecationWarning alias for the warning’s
    definition in sqlalchemy.exc has been removed.
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.log.SADeprecationWarning 的过渡别名已被移除。
- en: '**[no_tags]**'
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: exc.AssertionError has been removed and usage replaced with Python’s built-in
    AssertionError.
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了 exc.AssertionError，并使用 Python 内置的 AssertionError 替代使用。
- en: '**[no_tags]**'
  id: totrans-1221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The behavior of MapperExtensions attached to multiple, entity_name= primary
    mappers for a single class has been altered. The first mapper() defined for a
    class is the only mapper eligible for the MapperExtension ‘instrument_class’,
    ‘init_instance’ and ‘init_failed’ events. This is backwards incompatible; previously
    the extensions of last mapper defined would receive these events.
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单个类的多个 entity_name= 主映射器附加的 MapperExtensions 的行为已更改。对于一个类定义的第一个 mapper() 是唯一符合
    MapperExtension 'instrument_class'、'init_instance' 和 'init_failed' 事件的 mapper。这是不向后兼容的；以前定义的最后一个
    mapper 的扩展将接收这些事件。
- en: '**[firebird]**'
  id: totrans-1223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added support for returning values from inserts (2.0+ only), updates and deletes
    (2.1+ only).
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对插入（仅限 2.0+）、更新和删除（仅限 2.1+）返回值的支持。
- en: '**[postgres]**'
  id: totrans-1225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added Index reflection support to Postgres, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 Postgres 的索引反射支持，使用了 Ken Kuhlman 提交的一个很棒的我们长期忽视的补丁。
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#714](https://www.sqlalchemy.org/trac/ticket/714)
- en: 0.5.9
  id: totrans-1228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.9
- en: no release date
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: sql
  id: totrans-1230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed erroneous self_group() call in expression package.
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 expression 包中修复了错误的 self_group() 调用。
- en: 'References: [#1661](https://www.sqlalchemy.org/trac/ticket/1661)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1661](https://www.sqlalchemy.org/trac/ticket/1661)
- en: sql
  id: totrans-1234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed erroneous self_group() call in expression package.
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 expression 包中修复了错误的 self_group() 调用。
- en: 'References: [#1661](https://www.sqlalchemy.org/trac/ticket/1661)'
  id: totrans-1237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1661](https://www.sqlalchemy.org/trac/ticket/1661)
- en: 0.5.8
  id: totrans-1238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.8
- en: 'Released: Sat Jan 16 2010'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2010 年 1 月 16 日（周六）
- en: sql
  id: totrans-1240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The copy() method on Column now supports uninitialized, unnamed Column objects.
    This allows easy creation of declarative helpers which place common columns on
    multiple subclasses.
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 Column 上的 copy() 方法支持未初始化的、未命名的 Column 对象。这使得可以轻松创建声明性助手，将常见列放置在多个子类上。
- en: '**[sql]**'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Default generators like Sequence() translate correctly across a copy() operation.
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似 Sequence() 的默认生成器在复制操作中正确转换。
- en: '**[sql]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Sequence() and other DefaultGenerator objects are accepted as the value for
    the “default” and “onupdate” keyword arguments of Column, in addition to being
    accepted positionally.
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Sequence() 和其他 DefaultGenerator 对象现在可以作为 Column 的 “default” 和 “onupdate” 关键字参数的值接受，除了被位置接受。 '
- en: '**[sql]**'
  id: totrans-1247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed a column arithmetic bug that affected column correspondence for cloned
    selectables which contain free-standing column expressions. This bug is generally
    only noticeable when exercising newer ORM behavior only available in 0.6 via,
    but is more correct at the SQL expression level as well.
  id: totrans-1248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个列算术错误，该错误影响包含独立列表达式的克隆可选项的列对应关系。这个错误通常只有在使用新的 ORM 行为（仅在 0.6 中可用）时才会注意到，但在
    SQL 表达式级别也更加正确。
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)'
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1568](https://www.sqlalchemy.org/trac/ticket/1568)，[#1617](https://www.sqlalchemy.org/trac/ticket/1617)
- en: postgresql
  id: totrans-1250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The extract() function, which was slightly improved in 0.5.7, needed a lot more
    work to generate the correct typecast (the typecasts appear to be necessary in
    PG’s EXTRACT quite a lot of the time). The typecast is now generated using a rule
    dictionary based on PG’s documentation for date/time/interval arithmetic. It also
    accepts text() constructs again, which was broken in 0.5.7.
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: extract() 函数在 0.5.7 中稍微改进了，但仍需要更多工作来生成正确的类型转换（大部分时间在 PG 的 EXTRACT 中似乎是必要的）。现在，类型转换是使用基于
    PG 的日期/时间/间隔算术文档的规则字典生成的。它再次接受 text() 构造，这在 0.5.7 中已经损坏了。
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647)'
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1647](https://www.sqlalchemy.org/trac/ticket/1647)
- en: misc
  id: totrans-1254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[firebird]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Recognize more errors as disconnections.
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将更多错误识别为断开连接。
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1646](https://www.sqlalchemy.org/trac/ticket/1646)
- en: sql
  id: totrans-1258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The copy() method on Column now supports uninitialized, unnamed Column objects.
    This allows easy creation of declarative helpers which place common columns on
    multiple subclasses.
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 Column 上的 copy() 方法支持未初始化的、未命名的 Column 对象。这使得可以轻松创建声明性助手，将常见列放置在多个子类上。
- en: '**[sql]**'
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Default generators like Sequence() translate correctly across a copy() operation.
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像 Sequence() 这样的默认生成器在复制操作中能够正确转换。
- en: '**[sql]**'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Sequence() and other DefaultGenerator objects are accepted as the value for
    the “default” and “onupdate” keyword arguments of Column, in addition to being
    accepted positionally.
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sequence() 和其他 DefaultGenerator 对象可以作为 Column 的 “default” 和 “onupdate” 关键字参数的值被接受，除了可以按位置接受之外。
- en: '**[sql]**'
  id: totrans-1265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed a column arithmetic bug that affected column correspondence for cloned
    selectables which contain free-standing column expressions. This bug is generally
    only noticeable when exercising newer ORM behavior only available in 0.6 via,
    but is more correct at the SQL expression level as well.
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个影响包含独立列表达式的克隆可选择项的列算术错误。这个 bug 通常只在使用 0.6 中可用的新 ORM 行为时才会注意到，但在 SQL 表达式级别也更正确。
- en: 'References: [#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)'
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1568](https://www.sqlalchemy.org/trac/ticket/1568), [#1617](https://www.sqlalchemy.org/trac/ticket/1617)
- en: postgresql
  id: totrans-1268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: The extract() function, which was slightly improved in 0.5.7, needed a lot more
    work to generate the correct typecast (the typecasts appear to be necessary in
    PG’s EXTRACT quite a lot of the time). The typecast is now generated using a rule
    dictionary based on PG’s documentation for date/time/interval arithmetic. It also
    accepts text() constructs again, which was broken in 0.5.7.
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: extract() 函数在 0.5.7 中稍微改进了一下，需要更多的工作来生成正确的类型转换（在 PG 的 EXTRACT 中，类型转换在很多情况下是必要的）。现在，根据
    PG 的日期/时间/间隔算术文档生成一个规则字典来生成类型转换。它还再次接受 text() 构造，这在 0.5.7 中是有问题的。
- en: 'References: [#1647](https://www.sqlalchemy.org/trac/ticket/1647)'
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1647](https://www.sqlalchemy.org/trac/ticket/1647)
- en: misc
  id: totrans-1272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[firebird]**'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Recognize more errors as disconnections.
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多错误被识别为断开连接。
- en: 'References: [#1646](https://www.sqlalchemy.org/trac/ticket/1646)'
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1646](https://www.sqlalchemy.org/trac/ticket/1646)
- en: 0.5.7
  id: totrans-1276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本号：0.5.7
- en: 'Released: Sat Dec 26 2009'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年12月26日 星期六
- en: orm
  id: totrans-1278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() now works with the automatically generated subquery that results
    when you say “query(Parent).join(Parent.somejoinedsubclass)”, i.e. when Parent
    joins to a joined-table-inheritance subclass. Previously contains_eager() would
    erroneously add the subclass table to the query separately producing a cartesian
    product. An example is in the ticket description.
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager() 现在可以与自动生成的子查询一起使用，当你说“query(Parent).join(Parent.somejoinedsubclass)”时，即当
    Parent 加入到一个联接表继承子类时。以前，contains_eager() 会错误地将子类表单独添加到查询中，产生笛卡尔积。票务描述中有一个示例。
- en: 'References: [#1543](https://www.sqlalchemy.org/trac/ticket/1543)'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1543](https://www.sqlalchemy.org/trac/ticket/1543)
- en: '**[orm]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.options() now only propagate to loaded objects for potential further sub-loads
    only for options where such behavior is relevant, keeping various unserializable
    options like those generated by contains_eager() out of individual instance states.
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.options() 现在只对加载的对象传播，以便进一步子加载只对相关的选项进行传播，将像 contains_eager() 生成的各种不可序列化选项排除在各个实例状态之外。
- en: 'References: [#1553](https://www.sqlalchemy.org/trac/ticket/1553)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1553](https://www.sqlalchemy.org/trac/ticket/1553)
- en: '**[orm]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.execute() now locates table- and mapper-specific binds based on a passed
    in expression which is an insert()/update()/delete() construct.
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.execute() 现在根据传入的表达式（insert()/update()/delete() 构造）定位特定于表和映射器的绑定。
- en: 'References: [#1054](https://www.sqlalchemy.org/trac/ticket/1054)'
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1054](https://www.sqlalchemy.org/trac/ticket/1054)
- en: '**[orm]**'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() now properly overwrites a many-to-one or uselist=False attribute
    to None if the attribute is also None in the given object to be merged.
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge() 现在可以正确地将一个多对一或 uselist=False 属性覆盖为 None，如果在要合并的对象中该属性也为 None。
- en: '**[orm]**'
  id: totrans-1290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a needless select which would occur when merging transient objects that
    contained a null primary key identifier.
  id: totrans-1291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个不必要的选择，在合并包含空主键标识符的瞬态对象时会发生。
- en: 'References: [#1618](https://www.sqlalchemy.org/trac/ticket/1618)'
  id: totrans-1292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1618](https://www.sqlalchemy.org/trac/ticket/1618)
- en: '**[orm]**'
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mutable collection passed to the “extension” attribute of relation(), column_property()
    etc. will not be mutated or shared among multiple instrumentation calls, preventing
    duplicate extensions, such as backref populators, from being inserted into the
    list.
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 relation()、column_property() 等的 “extension” 属性的可变集合不会被改变或在多个仪器调用之间共享，防止重复的扩展，比如
    backref populators，被插入到列表中。
- en: 'References: [#1585](https://www.sqlalchemy.org/trac/ticket/1585)'
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1585](https://www.sqlalchemy.org/trac/ticket/1585)
- en: '**[orm]**'
  id: totrans-1296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the call to get_committed_value() on CompositeProperty.
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 CompositeProperty 上 get_committed_value() 的调用。
- en: 'References: [#1504](https://www.sqlalchemy.org/trac/ticket/1504)'
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1504](https://www.sqlalchemy.org/trac/ticket/1504)
- en: '**[orm]**'
  id: totrans-1299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query would crash if a join() with no clear “left” side were
    called when a non-mapped column entity appeared in the columns list.
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果在列列表中出现非映射列实体，则 Query 在调用没有明确“左”侧的 join() 时会崩溃的 bug。
- en: 'References: [#1602](https://www.sqlalchemy.org/trac/ticket/1602)'
  id: totrans-1301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1602](https://www.sqlalchemy.org/trac/ticket/1602)
- en: '**[orm]**'
  id: totrans-1302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby composite columns wouldn’t load properly when configured on
    a joined-table subclass, introduced in version 0.5.6 as a result of the fix for.
    thx to Scott Torborg.
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在联接表子类上配置复合列时，复合列无法正确加载的 bug，在版本 0.5.6 中引入，作为修复的结果。感谢 Scott Torborg。
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)'
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)
- en: '**[orm]**'
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “use get” behavior of many-to-one relations, i.e. that a lazy load will
    fallback to the possibly cached query.get() value, now works across join conditions
    where the two compared types are not exactly the same class, but share the same
    “affinity” - i.e. Integer and SmallInteger. Also allows combinations of reflected
    and non-reflected types to work with 0.5 style type reflection, such as PGText/Text
    (note 0.6 reflects types as their generic versions).
  id: totrans-1306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于多对一关系的“使用 get”行为，即懒加载将回退到可能缓存的 query.get() 值，现在可以跨越连接条件工作，其中两个比较的类型不是完全相同的类，但共享相同的“亲和性”
    - 即 Integer 和 SmallInteger。还允许反射和非反射类型的组合使用 0.5 风格的类型反射，例如 PGText/Text（注意 0.6
    反射类型为其泛型版本）。
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1556](https://www.sqlalchemy.org/trac/ticket/1556)
- en: '**[orm]**'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.update() when passing Cls.attribute as keys in the value
    dict and using synchronize_session=’expire’ (‘fetch’ in 0.6).
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 query.update() 中将 Cls.attribute 作为值字典中的键并使用 synchronize_session='expire'（在
    0.6 中为 'fetch'）时的 bug。
- en: 'References: [#1436](https://www.sqlalchemy.org/trac/ticket/1436)'
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1436](https://www.sqlalchemy.org/trac/ticket/1436)
- en: sql
  id: totrans-1311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in two-phase transaction whereby commit() method didn’t set the full
    state which allows subsequent close() call to succeed.
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两阶段事务中的一个 bug，即 commit() 方法未设置完整状态，从而允许后续的 close() 调用成功。
- en: 'References: [#1603](https://www.sqlalchemy.org/trac/ticket/1603)'
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1603](https://www.sqlalchemy.org/trac/ticket/1603)
- en: '**[sql]**'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed the “numeric” paramstyle, which apparently is the default paramstyle used
    by Informixdb.
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“numeric”参数风格，默认参数风格使用 Informixdb。
- en: '**[sql]**'
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repeat expressions in the columns clause of a select are deduped based on the
    identity of each clause element, not the actual string. This allows positional
    elements to render correctly even if they all render identically, such as “qmark”
    style bind parameters.
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 select 的列子句中重复表达式根据每个子句元素的标识进行去重，而不是实际字符串。这允许位置元素正确呈现，即使它们都呈现相同，比如“问号”样式的绑定参数。
- en: 'References: [#1574](https://www.sqlalchemy.org/trac/ticket/1574)'
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1574](https://www.sqlalchemy.org/trac/ticket/1574)
- en: '**[sql]**'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The cursor associated with connection pool connections (i.e. _CursorFairy) now
    proxies __iter__() to the underlying cursor correctly.
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与连接池连接相关联的游标（即 _CursorFairy）现在正确地代理 __iter__() 到底层游标。
- en: 'References: [#1632](https://www.sqlalchemy.org/trac/ticket/1632)'
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1632](https://www.sqlalchemy.org/trac/ticket/1632)
- en: '**[sql]**'
  id: totrans-1323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: types now support an “affinity comparison” operation, i.e. that an Integer/SmallInteger
    are “compatible”, or a Text/String, PickleType/Binary, etc. Part of.
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型现在支持“亲和性比较”操作，即 Integer/SmallInteger 是“兼容的”，或者 Text/String，PickleType/Binary
    等。的一部分。
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1556](https://www.sqlalchemy.org/trac/ticket/1556)
- en: '**[sql]**'
  id: totrans-1326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug preventing alias() of an alias() from being cloned or adapted (occurs
    frequently in ORM operations).
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止别名的别名() 被克隆或适应的 bug（在 ORM 操作中经常发生）。
- en: 'References: [#1641](https://www.sqlalchemy.org/trac/ticket/1641)'
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1641](https://www.sqlalchemy.org/trac/ticket/1641)
- en: postgresql
  id: totrans-1329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added support for reflecting the DOUBLE PRECISION type, via a new postgres.PGDoublePrecision
    object. This is postgresql.DOUBLE_PRECISION in 0.6.
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 DOUBLE PRECISION 类型的反射支持，通过新的 postgres.PGDoublePrecision 对象。这是 postgresql.DOUBLE_PRECISION
    在 0.6 中的表示。
- en: 'References: [#1085](https://www.sqlalchemy.org/trac/ticket/1085)'
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1085](https://www.sqlalchemy.org/trac/ticket/1085)
- en: '**[postgresql]**'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added support for reflecting the INTERVAL YEAR TO MONTH and INTERVAL DAY TO
    SECOND syntaxes of the INTERVAL type.
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对反映INTERVAL类型的INTERVAL YEAR TO MONTH和INTERVAL DAY TO SECOND语法的支持。
- en: 'References: [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#460](https://www.sqlalchemy.org/trac/ticket/460)
- en: '**[postgresql]**'
  id: totrans-1336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Corrected the “has_sequence” query to take current schema, or explicit sequence-stated
    schema, into account.
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了“has_sequence”查询，以考虑当前模式或显式序列状态的模式。
- en: 'References: [#1576](https://www.sqlalchemy.org/trac/ticket/1576)'
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1576](https://www.sqlalchemy.org/trac/ticket/1576)
- en: '**[postgresql]**'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the behavior of extract() to apply operator precedence rules to the “::”
    operator when applying the “timestamp” cast - ensures proper parenthesization.
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了extract()的行为，以应用运算符优先规则到应用“timestamp”转换时的“::”运算符 - 确保正确的括号。
- en: 'References: [#1611](https://www.sqlalchemy.org/trac/ticket/1611)'
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1611](https://www.sqlalchemy.org/trac/ticket/1611)
- en: sqlite
  id: totrans-1342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite dialect properly generates CREATE INDEX for a table that is in an alternate
    schema.
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite方言正确生成用于在备用模式中的表的CREATE INDEX。
- en: 'References: [#1439](https://www.sqlalchemy.org/trac/ticket/1439)'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1439](https://www.sqlalchemy.org/trac/ticket/1439)
- en: mssql
  id: totrans-1346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changed the name of TrustedConnection to Trusted_Connection when constructing
    pyodbc connect arguments
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造pyodbc连接参数时，将TrustedConnection的名称更改为Trusted_Connection
- en: 'References: [#1561](https://www.sqlalchemy.org/trac/ticket/1561)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1561](https://www.sqlalchemy.org/trac/ticket/1561)
- en: oracle
  id: totrans-1350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The “table_names” dialect function, used by MetaData .reflect(), omits “index
    overflow tables”, a system table generated by Oracle when “index only tables”
    with overflow are used. These tables aren’t accessible via SQL and can’t be reflected.
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “table_names”方言函数，被MetaData .reflect()使用，省略了“索引溢出表”，这是Oracle在使用“只有索引表”并且溢出时生成的系统表。这些表无法通过SQL访问，也无法反射。
- en: 'References: [#1637](https://www.sqlalchemy.org/trac/ticket/1637)'
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1637](https://www.sqlalchemy.org/trac/ticket/1637)
- en: misc
  id: totrans-1354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[ext]**'
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: A column can be added to a joined-table declarative superclass after the class
    has been constructed (i.e. via class-level attribute assignment), and the column
    will be propagated down to subclasses. This is the reverse situation as that of,
    fixed in 0.5.6.
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构建类之后（即通过类级属性赋值），可以向连接表声明的超类添加列，并且该列将传播到子类。这是与0.5.6中修复的相反情况。
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)'
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)
- en: '**[ext]**'
  id: totrans-1358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed a slight inaccuracy in the sharding example. Comparing equivalence of
    columns in the ORM is best accomplished using col1.shares_lineage(col2).
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了分片示例中的轻微不准确性。在ORM中比较列的等价性最好使用col1.shares_lineage(col2)。
- en: 'References: [#1491](https://www.sqlalchemy.org/trac/ticket/1491)'
  id: totrans-1360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1491](https://www.sqlalchemy.org/trac/ticket/1491)
- en: '**[ext]**'
  id: totrans-1361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Removed unused load() method from ShardedQuery.
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从ShardedQuery中删除了未使用的load()方法。
- en: 'References: [#1606](https://www.sqlalchemy.org/trac/ticket/1606)'
  id: totrans-1363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1606](https://www.sqlalchemy.org/trac/ticket/1606)
- en: orm
  id: totrans-1364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() now works with the automatically generated subquery that results
    when you say “query(Parent).join(Parent.somejoinedsubclass)”, i.e. when Parent
    joins to a joined-table-inheritance subclass. Previously contains_eager() would
    erroneously add the subclass table to the query separately producing a cartesian
    product. An example is in the ticket description.
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager()现在可以与自动生成的子查询一起使用，当您说“query(Parent).join(Parent.somejoinedsubclass)”时，即当Parent连接到一个连接表继承子类时。以前，contains_eager()会错误地将子类表单独添加到查询中，产生笛卡尔积。票务描述中有一个示例。
- en: 'References: [#1543](https://www.sqlalchemy.org/trac/ticket/1543)'
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1543](https://www.sqlalchemy.org/trac/ticket/1543)
- en: '**[orm]**'
  id: totrans-1368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.options() now only propagate to loaded objects for potential further sub-loads
    only for options where such behavior is relevant, keeping various unserializable
    options like those generated by contains_eager() out of individual instance states.
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.options()现在仅对可能进一步子加载的对象传播，仅对这种行为相关的选项进行传播，将由contains_eager()生成的各种不可序列化选项排除在各个实例状态之外。
- en: 'References: [#1553](https://www.sqlalchemy.org/trac/ticket/1553)'
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1553](https://www.sqlalchemy.org/trac/ticket/1553)
- en: '**[orm]**'
  id: totrans-1371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.execute() now locates table- and mapper-specific binds based on a passed
    in expression which is an insert()/update()/delete() construct.
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，Session.execute()根据传入的表达式（即insert()/update()/delete()构造）定位特定于表和映射器的绑定。
- en: 'References: [#1054](https://www.sqlalchemy.org/trac/ticket/1054)'
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1054](https://www.sqlalchemy.org/trac/ticket/1054)
- en: '**[orm]**'
  id: totrans-1374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.merge() now properly overwrites a many-to-one or uselist=False attribute
    to None if the attribute is also None in the given object to be merged.
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.merge() 现在可以正确地将 many-to-one 或 uselist=False 属性重写为 None，如果给定要合并的对象中的属性也为
    None。
- en: '**[orm]**'
  id: totrans-1376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a needless select which would occur when merging transient objects that
    contained a null primary key identifier.
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在合并包含空主键标识符的瞬态对象时会发生不必要的选择的 bug。
- en: 'References: [#1618](https://www.sqlalchemy.org/trac/ticket/1618)'
  id: totrans-1378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1618](https://www.sqlalchemy.org/trac/ticket/1618)
- en: '**[orm]**'
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mutable collection passed to the “extension” attribute of relation(), column_property()
    etc. will not be mutated or shared among multiple instrumentation calls, preventing
    duplicate extensions, such as backref populators, from being inserted into the
    list.
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给 relation()、column_property() 等的“extension”属性的可变集合不会在多个插装调用之间被突变或共享，防止重复扩展，例如插入到列表中的
    backref populator。
- en: 'References: [#1585](https://www.sqlalchemy.org/trac/ticket/1585)'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1585](https://www.sqlalchemy.org/trac/ticket/1585)
- en: '**[orm]**'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the call to get_committed_value() on CompositeProperty.
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 CompositeProperty 上 get_committed_value() 的调用。
- en: 'References: [#1504](https://www.sqlalchemy.org/trac/ticket/1504)'
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1504](https://www.sqlalchemy.org/trac/ticket/1504)
- en: '**[orm]**'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query would crash if a join() with no clear “left” side were
    called when a non-mapped column entity appeared in the columns list.
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果在列列表中出现非映射列实体时调用没有明确“左”侧的 join()，则 Query 会崩溃的 bug。
- en: 'References: [#1602](https://www.sqlalchemy.org/trac/ticket/1602)'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1602](https://www.sqlalchemy.org/trac/ticket/1602)
- en: '**[orm]**'
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby composite columns wouldn’t load properly when configured on
    a joined-table subclass, introduced in version 0.5.6 as a result of the fix for.
    thx to Scott Torborg.
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合列在配置为连接表子类时无法正确加载的 bug，该 bug 由 0.5.6 版本中的修复引入，感谢 Scott Torborg。
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1480](https://www.sqlalchemy.org/trac/ticket/1480), [#1616](https://www.sqlalchemy.org/trac/ticket/1616)
- en: '**[orm]**'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “use get” behavior of many-to-one relations, i.e. that a lazy load will
    fallback to the possibly cached query.get() value, now works across join conditions
    where the two compared types are not exactly the same class, but share the same
    “affinity” - i.e. Integer and SmallInteger. Also allows combinations of reflected
    and non-reflected types to work with 0.5 style type reflection, such as PGText/Text
    (note 0.6 reflects types as their generic versions).
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许多对一关系的“使用 get”行为，即延迟加载将回退到可能被缓存的 query.get() 值，现在可以跨越连接条件工作，其中两个比较的类型不完全相同，但共享相同的“亲和性”
    - 即 Integer 和 SmallInteger。还允许反射和非反射类型的组合与 0.5 风格的类型反射一起工作，例如 PGText/Text（请注意
    0.6 反映类型为它们的通用版本）。
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1556](https://www.sqlalchemy.org/trac/ticket/1556)
- en: '**[orm]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in query.update() when passing Cls.attribute as keys in the value
    dict and using synchronize_session=’expire’ (‘fetch’ in 0.6).
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在传递 Cls.attribute 作为值字典中的键并使用 synchronize_session=’expire’（0.6 版本中为‘fetch’）时，修复了
    query.update() 中的 bug。
- en: 'References: [#1436](https://www.sqlalchemy.org/trac/ticket/1436)'
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1436](https://www.sqlalchemy.org/trac/ticket/1436)
- en: sql
  id: totrans-1397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in two-phase transaction whereby commit() method didn’t set the full
    state which allows subsequent close() call to succeed.
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了两阶段事务中 commit() 方法未设置完整状态的 bug，从而允许后续的 close() 调用成功。
- en: 'References: [#1603](https://www.sqlalchemy.org/trac/ticket/1603)'
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1603](https://www.sqlalchemy.org/trac/ticket/1603)
- en: '**[sql]**'
  id: totrans-1401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed the “numeric” paramstyle, which apparently is the default paramstyle used
    by Informixdb.
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“numeric” paramstyle，默认情况下是 Informixdb 使用的默认 paramstyle。
- en: '**[sql]**'
  id: totrans-1403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repeat expressions in the columns clause of a select are deduped based on the
    identity of each clause element, not the actual string. This allows positional
    elements to render correctly even if they all render identically, such as “qmark”
    style bind parameters.
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 select 的 columns 子句中重复表达式基于每个子句元素的标识进行去重，而不是实际字符串。这允许位置元素在所有元素都以相同方式呈现时正确呈现，例如“问号”样式的绑定参数。
- en: 'References: [#1574](https://www.sqlalchemy.org/trac/ticket/1574)'
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1574](https://www.sqlalchemy.org/trac/ticket/1574)
- en: '**[sql]**'
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The cursor associated with connection pool connections (i.e. _CursorFairy) now
    proxies __iter__() to the underlying cursor correctly.
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与连接池连接关联的游标（即 _CursorFairy）现在正确地代理 __iter__() 到底层游标。
- en: 'References: [#1632](https://www.sqlalchemy.org/trac/ticket/1632)'
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1632](https://www.sqlalchemy.org/trac/ticket/1632)
- en: '**[sql]**'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: types now support an “affinity comparison” operation, i.e. that an Integer/SmallInteger
    are “compatible”, or a Text/String, PickleType/Binary, etc. Part of.
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: types 现在支持“关联比较”操作，即 Integer/SmallInteger 是“兼容的”，或者 Text/String、PickleType/Binary
    等。部分。
- en: 'References: [#1556](https://www.sqlalchemy.org/trac/ticket/1556)'
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1556](https://www.sqlalchemy.org/trac/ticket/1556)
- en: '**[sql]**'
  id: totrans-1412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug preventing alias() of an alias() from being cloned or adapted (occurs
    frequently in ORM operations).
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 alias() 的 alias() 被克隆或适应的错误（在 ORM 操作中经常发生）。
- en: 'References: [#1641](https://www.sqlalchemy.org/trac/ticket/1641)'
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1641](https://www.sqlalchemy.org/trac/ticket/1641)
- en: postgresql
  id: totrans-1415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added support for reflecting the DOUBLE PRECISION type, via a new postgres.PGDoublePrecision
    object. This is postgresql.DOUBLE_PRECISION in 0.6.
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对反映 DOUBLE PRECISION 类型的支持，通过一个新的 postgres.PGDoublePrecision 对象。这在 0.6 中是
    postgresql.DOUBLE_PRECISION。
- en: 'References: [#1085](https://www.sqlalchemy.org/trac/ticket/1085)'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1085](https://www.sqlalchemy.org/trac/ticket/1085)
- en: '**[postgresql]**'
  id: totrans-1419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added support for reflecting the INTERVAL YEAR TO MONTH and INTERVAL DAY TO
    SECOND syntaxes of the INTERVAL type.
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对反映 INTERVAL 类型的 INTERVAL YEAR TO MONTH 和 INTERVAL DAY TO SECOND 语法的支持。
- en: 'References: [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#460](https://www.sqlalchemy.org/trac/ticket/460)
- en: '**[postgresql]**'
  id: totrans-1422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Corrected the “has_sequence” query to take current schema, or explicit sequence-stated
    schema, into account.
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了“has_sequence”查询以考虑当前模式或显式序列指定的模式。
- en: 'References: [#1576](https://www.sqlalchemy.org/trac/ticket/1576)'
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1576](https://www.sqlalchemy.org/trac/ticket/1576)
- en: '**[postgresql]**'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Fixed the behavior of extract() to apply operator precedence rules to the “::”
    operator when applying the “timestamp” cast - ensures proper parenthesization.
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 extract() 的行为，以应用操作符优先级规则到“::”操作符时应用“timestamp”转换 - 确保正确的括号化。
- en: 'References: [#1611](https://www.sqlalchemy.org/trac/ticket/1611)'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1611](https://www.sqlalchemy.org/trac/ticket/1611)
- en: sqlite
  id: totrans-1428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite dialect properly generates CREATE INDEX for a table that is in an alternate
    schema.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 方言正确地为位于替代模式中的表生成 CREATE INDEX。
- en: 'References: [#1439](https://www.sqlalchemy.org/trac/ticket/1439)'
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1439](https://www.sqlalchemy.org/trac/ticket/1439)
- en: mssql
  id: totrans-1432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changed the name of TrustedConnection to Trusted_Connection when constructing
    pyodbc connect arguments
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造 pyodbc 连接参数时，将 TrustedConnection 的名称更改为 Trusted_Connection
- en: 'References: [#1561](https://www.sqlalchemy.org/trac/ticket/1561)'
  id: totrans-1435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1561](https://www.sqlalchemy.org/trac/ticket/1561)
- en: oracle
  id: totrans-1436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: The “table_names” dialect function, used by MetaData .reflect(), omits “index
    overflow tables”, a system table generated by Oracle when “index only tables”
    with overflow are used. These tables aren’t accessible via SQL and can’t be reflected.
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “table_names” 方言函数，被 MetaData.reflect() 使用，省略了“索引溢出表”，这是 Oracle 在使用“仅索引表”且溢出时生成的系统表。这些表无法通过
    SQL 访问，也无法反映。
- en: 'References: [#1637](https://www.sqlalchemy.org/trac/ticket/1637)'
  id: totrans-1439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1637](https://www.sqlalchemy.org/trac/ticket/1637)
- en: misc
  id: totrans-1440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[ext]**'
  id: totrans-1441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: A column can be added to a joined-table declarative superclass after the class
    has been constructed (i.e. via class-level attribute assignment), and the column
    will be propagated down to subclasses. This is the reverse situation as that of,
    fixed in 0.5.6.
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在类构造完成后（即通过类级属性分配），可以向连接表声明超类添加列，并且列将向下传播到子类。这与 0.5.6 中的情况相反。
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523), [#1570](https://www.sqlalchemy.org/trac/ticket/1570)'
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1523](https://www.sqlalchemy.org/trac/ticket/1523)，[#1570](https://www.sqlalchemy.org/trac/ticket/1570)
- en: '**[ext]**'
  id: totrans-1444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed a slight inaccuracy in the sharding example. Comparing equivalence of
    columns in the ORM is best accomplished using col1.shares_lineage(col2).
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了分片示例中的轻微不准确。在 ORM 中比较列的等效性最好使用 col1.shares_lineage(col2)。
- en: 'References: [#1491](https://www.sqlalchemy.org/trac/ticket/1491)'
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1491](https://www.sqlalchemy.org/trac/ticket/1491)
- en: '**[ext]**'
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Removed unused load() method from ShardedQuery.
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 ShardedQuery 中删除了未使用的 load() 方法。
- en: 'References: [#1606](https://www.sqlalchemy.org/trac/ticket/1606)'
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1606](https://www.sqlalchemy.org/trac/ticket/1606)
- en: 0.5.6
  id: totrans-1450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.6
- en: 'Released: Sat Sep 12 2009'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sat Sep 12 2009
- en: orm
  id: totrans-1452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby inheritance discriminator part of a composite primary key
    would fail on updates. Continuation of.
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了继承主键的一部分在更新时会失败的错误。持续。
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1300](https://www.sqlalchemy.org/trac/ticket/1300)
- en: '**[orm]**'
  id: totrans-1456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which disallowed one side of a many-to-many bidirectional reference
    to declare itself as “viewonly”
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，不允许多对多双向引用的一侧声明自身为“viewonly”
- en: 'References: [#1507](https://www.sqlalchemy.org/trac/ticket/1507)'
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1507](https://www.sqlalchemy.org/trac/ticket/1507)
- en: '**[orm]**'
  id: totrans-1459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an assertion that prevents a @validates function or other AttributeExtension
    from loading an unloaded collection such that internal state may be corrupted.
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个断言，防止@validates函数或其他AttributeExtension加载未加载的集合，从而可能损坏内部状态。
- en: 'References: [#1526](https://www.sqlalchemy.org/trac/ticket/1526)'
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1526](https://www.sqlalchemy.org/trac/ticket/1526)
- en: '**[orm]**'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented two entities from mutually replacing each other’s
    primary key values within a single flush() for some orderings of operations.
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，阻止了两个实体在单个flush()中相互替换主键值的某些操作顺序。
- en: 'References: [#1519](https://www.sqlalchemy.org/trac/ticket/1519)'
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1519](https://www.sqlalchemy.org/trac/ticket/1519)
- en: '**[orm]**'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an obscure issue whereby a joined-table subclass with a self-referential
    eager load on the base class would populate the related object’s “subclass” table
    with data from the “subclass” table of the parent.
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个隐晦的问题，即具有基类上自引用的延迟加载的连接表子类将使用来自父类的“子类”表的数据填充相关对象的“子类”表。
- en: 'References: [#1485](https://www.sqlalchemy.org/trac/ticket/1485)'
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1485](https://www.sqlalchemy.org/trac/ticket/1485)
- en: '**[orm]**'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relations() now have greater ability to be “overridden”, meaning a subclass
    that explicitly specifies a relation() overriding that of the parent class will
    be honored during a flush. This is currently to support many-to-many relations
    from concrete inheritance setups. Outside of that use case, YMMV.
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relations()现在具有更大的“覆盖”能力，意味着显式指定覆盖父类relation()的子类将在flush期间被尊重。目前支持具体继承设置中的多对多关系。除此之外，效果可能有所不同。
- en: 'References: [#1477](https://www.sqlalchemy.org/trac/ticket/1477)'
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1477](https://www.sqlalchemy.org/trac/ticket/1477)
- en: '**[orm]**'
  id: totrans-1471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Squeezed a few more unnecessary “lazy loads” out of relation(). When a collection
    is mutated, many-to-one backrefs on the other side will not fire off to load the
    “old” value, unless “single_parent=True” is set. A direct assignment of a many-to-one
    still loads the “old” value in order to update backref collections on that value,
    which may be present in the session already, thus maintaining the 0.5 behavioral
    contract.
  id: totrans-1472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从relation()中挤出了更多不必要的“懒加载”。当集合发生变化时，另一侧的多对一反向引用不会触发加载“旧”值，除非设置了“single_parent=True”。直接赋值多对一仍会加载“旧”值以更新该值上的反向引用集合，该值可能已经存在于会话中，从而保持0.5行为契约。
- en: 'References: [#1483](https://www.sqlalchemy.org/trac/ticket/1483)'
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1483](https://www.sqlalchemy.org/trac/ticket/1483)
- en: '**[orm]**'
  id: totrans-1474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby a load/refresh of joined table inheritance attributes which
    were based on column_property() or similar would fail to evaluate.
  id: totrans-1475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即基于column_property()或类似属性的连接表继承属性的加载/刷新将无法评估。
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480)'
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1480](https://www.sqlalchemy.org/trac/ticket/1480)
- en: '**[orm]**'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved support for MapperProperty objects overriding that of an inherited
    mapper for non-concrete inheritance setups - attribute extensions won’t randomly
    collide with each other.
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对MapperProperty对象覆盖非具体继承设置中继承映射器的支持 - 属性扩展不会随机冲突。
- en: 'References: [#1488](https://www.sqlalchemy.org/trac/ticket/1488)'
  id: totrans-1479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1488](https://www.sqlalchemy.org/trac/ticket/1488)
- en: '**[orm]**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: UPDATE and DELETE do not support ORDER BY, LIMIT, OFFSET, etc. in standard SQL.
    Query.update() and Query.delete() now raise an exception if any of limit(), offset(),
    order_by(), group_by(), or distinct() have been called.
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准SQL中的UPDATE和DELETE不支持ORDER BY、LIMIT、OFFSET等。如果调用了limit()、offset()、order_by()、group_by()或distinct()，Query.update()和Query.delete()现在会引发异常。
- en: 'References: [#1487](https://www.sqlalchemy.org/trac/ticket/1487)'
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1487](https://www.sqlalchemy.org/trac/ticket/1487)
- en: '**[orm]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added AttributeExtension to sqlalchemy.orm.__all__
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将AttributeExtension添加到sqlalchemy.orm.__all__
- en: '**[orm]**'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved error message when query() is called with a non-SQL /entity expression.
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用非SQL /entity表达式调用query()时，改进了错误消息。
- en: 'References: [#1476](https://www.sqlalchemy.org/trac/ticket/1476)'
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1476](https://www.sqlalchemy.org/trac/ticket/1476)
- en: '**[orm]**'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using False or 0 as a polymorphic discriminator now works on the base class
    as well as a subclass.
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基类以及子类中使用False或0作为多态鉴别器现在也可以正常工作。
- en: 'References: [#1440](https://www.sqlalchemy.org/trac/ticket/1440)'
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1440](https://www.sqlalchemy.org/trac/ticket/1440)
- en: '**[orm]**'
  id: totrans-1491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added enable_assertions(False) to Query which disables the usual assertions
    for expected state - used by Query subclasses to engineer custom state.. See [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    for an example.
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query中添加了enable_assertions(False)，用于禁用对预期状态的常规断言 - 由Query子类使用以设计自定义状态。参见[https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)以获取示例。
- en: 'References: [#1424](https://www.sqlalchemy.org/trac/ticket/1424)'
  id: totrans-1493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1424](https://www.sqlalchemy.org/trac/ticket/1424)
- en: '**[orm]**'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed recursion issue which occurred if a mapped object’s __len__() or __nonzero__()
    method resulted in state changes.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了递归问题，该问题会在映射对象的__len__()或__nonzero__()方法导致状态更改时发生。
- en: 'References: [#1501](https://www.sqlalchemy.org/trac/ticket/1501)'
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1501](https://www.sqlalchemy.org/trac/ticket/1501)
- en: '**[orm]**'
  id: totrans-1497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed incorrect exception raise in Weak/StrongIdentityMap.add()
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Weak/StrongIdentityMap.add()中的错误异常引发。
- en: 'References: [#1506](https://www.sqlalchemy.org/trac/ticket/1506)'
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1506](https://www.sqlalchemy.org/trac/ticket/1506)
- en: '**[orm]**'
  id: totrans-1500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed the error message for “could not find a FROM clause” in query.join() which
    would fail to issue correctly if the query was against a pure SQL construct.
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.join()中“找不到FROM子句”的错误消息，如果查询针对纯SQL构造，则无法正确发出。
- en: 'References: [#1522](https://www.sqlalchemy.org/trac/ticket/1522)'
  id: totrans-1502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1522](https://www.sqlalchemy.org/trac/ticket/1522)
- en: '**[orm]**'
  id: totrans-1503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed a somewhat hypothetical issue which would result in the wrong primary
    key being calculated for a mapper using the old polymorphic_union function - but
    this is old stuff.
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个有点假设性的问题，该问题会导致使用旧的polymorphic_union函数的映射器计算出错的主键 - 但这是旧的东西。
- en: 'References: [#1486](https://www.sqlalchemy.org/trac/ticket/1486)'
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1486](https://www.sqlalchemy.org/trac/ticket/1486)
- en: sql
  id: totrans-1506
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed column.copy() to copy defaults and onupdates.
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了column.copy()的问题，以便复制默认值和onupdates。
- en: 'References: [#1373](https://www.sqlalchemy.org/trac/ticket/1373)'
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1373](https://www.sqlalchemy.org/trac/ticket/1373)
- en: '**[sql]**'
  id: totrans-1510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed a bug in extract() introduced in 0.5.4 whereby the string “field” argument
    was getting treated as a ClauseElement, causing various errors within more complex
    SQL transformations.
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.5.4中引入的extract()中的一个错误，其中字符串“field”参数被视为ClauseElement，导致更复杂的SQL转换中出现各种错误。
- en: '**[sql]**'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Unary expressions such as DISTINCT propagate their type handling to result sets,
    allowing conversions like unicode and such to take place.
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如DISTINCT之类的一元表达式将其类型处理传播到结果集，从而允许进行类似unicode等的转换。
- en: 'References: [#1420](https://www.sqlalchemy.org/trac/ticket/1420)'
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1420](https://www.sqlalchemy.org/trac/ticket/1420)
- en: '**[sql]**'
  id: totrans-1515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Fixed bug in Table and Column whereby passing empty dict for “info” argument
    would raise an exception.
  id: totrans-1516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Table和Column中传递空字典作为“info”参数会引发异常的错误。
- en: 'References: [#1482](https://www.sqlalchemy.org/trac/ticket/1482)'
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1482](https://www.sqlalchemy.org/trac/ticket/1482)
- en: oracle
  id: totrans-1518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Backported 0.6 fix for Oracle alias names not getting truncated.
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将0.6版本的Oracle别名名称不被截断的修复引入到0.6中。
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1309](https://www.sqlalchemy.org/trac/ticket/1309)
- en: misc
  id: totrans-1522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: The collection proxies produced by associationproxy are now pickleable. A user-defined
    proxy_factory however is still not pickleable unless it defines __getstate__ and
    __setstate__.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由associationproxy生成的集合代理现在可以进行pickle化。然而，用户定义的proxy_factory除非定义了__getstate__和__setstate__，否则仍然不能pickle化。
- en: 'References: [#1446](https://www.sqlalchemy.org/trac/ticket/1446)'
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1446](https://www.sqlalchemy.org/trac/ticket/1446)
- en: '**[ext]**'
  id: totrans-1526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Declarative will raise an informative exception if __table_args__ is passed
    as a tuple with no dict argument. Improved documentation.
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将__table_args__作为没有字典参数的元组传递，Declarative将引发一个提供信息的异常。改进了文档。
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  id: totrans-1528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1468](https://www.sqlalchemy.org/trac/ticket/1468)
- en: '**[ext]**'
  id: totrans-1529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Table objects declared in the MetaData can now be used in string expressions
    sent to primaryjoin/secondaryjoin/ secondary - the name is pulled from the MetaData
    of the declarative base.
  id: totrans-1530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MetaData中声明的Table对象现在可以在发送到primaryjoin/secondaryjoin/secondary的字符串表达式中使用 -
    名称从声明基类的MetaData中提取。
- en: 'References: [#1527](https://www.sqlalchemy.org/trac/ticket/1527)'
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#1527](https://www.sqlalchemy.org/trac/ticket/1527)
- en: '**[ext]**'
  id: totrans-1532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: A column can be added to a joined-table subclass after the class has been constructed
    (i.e. via class-level attribute assignment). The column is added to the underlying
    Table as always, but now the mapper will rebuild its “join” to include the new
    column, instead of raising an error about “no such column, use column_property()
    instead”.
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造类之后（即通过类级属性分配），可以向连接表子类添加列。该列始终添加到底层表中，但现在映射器将重建其“join”以包括新列，而不是引发关于“没有这样的列，请改用column_property()”的错误。
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523)'
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1523](https://www.sqlalchemy.org/trac/ticket/1523)
- en: '**[test]**'
  id: totrans-1535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试]**'
- en: Added examples into the test suite so they get exercised regularly and cleaned
    up a couple deprecation warnings.
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试套件中添加了示例，以便定期执行，并清理了一些弃用警告。
- en: orm
  id: totrans-1537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-1538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug whereby inheritance discriminator part of a composite primary key
    would fail on updates. Continuation of.
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即继承的复合主键的鉴别器部分在更新时会失败。继续。
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1300](https://www.sqlalchemy.org/trac/ticket/1300)
- en: '**[orm]**'
  id: totrans-1541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug which disallowed one side of a many-to-many bidirectional reference
    to declare itself as “viewonly”
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，该问题不允许双向多对多引用的一侧声明自己为“viewonly”。
- en: 'References: [#1507](https://www.sqlalchemy.org/trac/ticket/1507)'
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1507](https://www.sqlalchemy.org/trac/ticket/1507)
- en: '**[orm]**'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Added an assertion that prevents a @validates function or other AttributeExtension
    from loading an unloaded collection such that internal state may be corrupted.
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个断言，防止@validates函数或其他AttributeExtension加载未加载的集合，从而可能损坏内部状态。
- en: 'References: [#1526](https://www.sqlalchemy.org/trac/ticket/1526)'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1526](https://www.sqlalchemy.org/trac/ticket/1526)
- en: '**[orm]**'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug which prevented two entities from mutually replacing each other’s
    primary key values within a single flush() for some orderings of operations.
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，该问题阻止两个实体在单个flush()中相互替换主键值的某些操作顺序。
- en: 'References: [#1519](https://www.sqlalchemy.org/trac/ticket/1519)'
  id: totrans-1549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1519](https://www.sqlalchemy.org/trac/ticket/1519)
- en: '**[orm]**'
  id: totrans-1550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed an obscure issue whereby a joined-table subclass with a self-referential
    eager load on the base class would populate the related object’s “subclass” table
    with data from the “subclass” table of the parent.
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个晦涩的问题，即具有基类上自引用贪婪加载的连接表子类将使用来自父类“子类”表的数据填充相关对象的“子类”表。
- en: 'References: [#1485](https://www.sqlalchemy.org/trac/ticket/1485)'
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1485](https://www.sqlalchemy.org/trac/ticket/1485)
- en: '**[orm]**'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: relations() now have greater ability to be “overridden”, meaning a subclass
    that explicitly specifies a relation() overriding that of the parent class will
    be honored during a flush. This is currently to support many-to-many relations
    from concrete inheritance setups. Outside of that use case, YMMV.
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relations()现在具有更大的“覆盖”能力，这意味着明确指定覆盖父类的关系()的子类将在flush期间受到尊重。目前，这是为了支持具体继承设置的多对多关系。除此用例外，效果可能有所不同。
- en: 'References: [#1477](https://www.sqlalchemy.org/trac/ticket/1477)'
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1477](https://www.sqlalchemy.org/trac/ticket/1477)
- en: '**[orm]**'
  id: totrans-1556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Squeezed a few more unnecessary “lazy loads” out of relation(). When a collection
    is mutated, many-to-one backrefs on the other side will not fire off to load the
    “old” value, unless “single_parent=True” is set. A direct assignment of a many-to-one
    still loads the “old” value in order to update backref collections on that value,
    which may be present in the session already, thus maintaining the 0.5 behavioral
    contract.
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从relation()中挤出了更多不必要的“懒加载”。当集合发生变化时，另一侧的多对一反向引用不会触发加载“旧”值，除非设置了“single_parent=True”。直接分配一个多对一仍然会加载“旧”值，以便更新该值上的反向引用集合，该值可能已经存在于会话中，从而保持0.5行为契约。
- en: 'References: [#1483](https://www.sqlalchemy.org/trac/ticket/1483)'
  id: totrans-1558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1483](https://www.sqlalchemy.org/trac/ticket/1483)
- en: '**[orm]**'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug whereby a load/refresh of joined table inheritance attributes which
    were based on column_property() or similar would fail to evaluate.
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即基于column_property()或类似属性的连接表继承属性的加载/刷新将无法评估。
- en: 'References: [#1480](https://www.sqlalchemy.org/trac/ticket/1480)'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1480](https://www.sqlalchemy.org/trac/ticket/1480)
- en: '**[orm]**'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Improved support for MapperProperty objects overriding that of an inherited
    mapper for non-concrete inheritance setups - attribute extensions won’t randomly
    collide with each other.
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对MapperProperty对象覆盖非具体继承设置的继承映射器的支持 - 属性扩展不会随机冲突。
- en: 'References: [#1488](https://www.sqlalchemy.org/trac/ticket/1488)'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1488](https://www.sqlalchemy.org/trac/ticket/1488)
- en: '**[orm]**'
  id: totrans-1565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: UPDATE and DELETE do not support ORDER BY, LIMIT, OFFSET, etc. in standard SQL.
    Query.update() and Query.delete() now raise an exception if any of limit(), offset(),
    order_by(), group_by(), or distinct() have been called.
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准SQL不支持UPDATE和DELETE中的ORDER BY、LIMIT、OFFSET等。如果调用了limit()、offset()、order_by()、group_by()或distinct()中的任何一个，Query.update()和Query.delete()现在会引发异常。
- en: 'References: [#1487](https://www.sqlalchemy.org/trac/ticket/1487)'
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1487](https://www.sqlalchemy.org/trac/ticket/1487)
- en: '**[orm]**'
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added AttributeExtension to sqlalchemy.orm.__all__
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将AttributeExtension添加到sqlalchemy.orm.__all__
- en: '**[orm]**'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved error message when query() is called with a non-SQL /entity expression.
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用非SQL /实体表达式调用query()时，改进了错误消息。
- en: 'References: [#1476](https://www.sqlalchemy.org/trac/ticket/1476)'
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1476](https://www.sqlalchemy.org/trac/ticket/1476)
- en: '**[orm]**'
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using False or 0 as a polymorphic discriminator now works on the base class
    as well as a subclass.
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基类和子类上使用False或0作为多态鉴别器现在也可以正常工作。
- en: 'References: [#1440](https://www.sqlalchemy.org/trac/ticket/1440)'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1440](https://www.sqlalchemy.org/trac/ticket/1440)
- en: '**[orm]**'
  id: totrans-1576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added enable_assertions(False) to Query which disables the usual assertions
    for expected state - used by Query subclasses to engineer custom state.. See [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)
    for an example.
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了enable_assertions(False)，用于禁用通常的对预期状态的断言 - 由Query子类用于设计自定义状态。参见[https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/PreFilteredQuery)以获取示例。
- en: 'References: [#1424](https://www.sqlalchemy.org/trac/ticket/1424)'
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1424](https://www.sqlalchemy.org/trac/ticket/1424)
- en: '**[orm]**'
  id: totrans-1579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed recursion issue which occurred if a mapped object’s __len__() or __nonzero__()
    method resulted in state changes.
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了递归问题，如果映射对象的__len__()或__nonzero__()方法导致状态更改，则会发生。
- en: 'References: [#1501](https://www.sqlalchemy.org/trac/ticket/1501)'
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1501](https://www.sqlalchemy.org/trac/ticket/1501)
- en: '**[orm]**'
  id: totrans-1582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed incorrect exception raise in Weak/StrongIdentityMap.add()
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Weak/StrongIdentityMap.add()中不正确的异常抛出。
- en: 'References: [#1506](https://www.sqlalchemy.org/trac/ticket/1506)'
  id: totrans-1584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1506](https://www.sqlalchemy.org/trac/ticket/1506)
- en: '**[orm]**'
  id: totrans-1585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the error message for “could not find a FROM clause” in query.join() which
    would fail to issue correctly if the query was against a pure SQL construct.
  id: totrans-1586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在query.join()中“找不到FROM子句”错误消息，如果查询针对纯SQL构造，则无法正确发出。
- en: 'References: [#1522](https://www.sqlalchemy.org/trac/ticket/1522)'
  id: totrans-1587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1522](https://www.sqlalchemy.org/trac/ticket/1522)
- en: '**[orm]**'
  id: totrans-1588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a somewhat hypothetical issue which would result in the wrong primary
    key being calculated for a mapper using the old polymorphic_union function - but
    this is old stuff.
  id: totrans-1589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个有点假设的问题，即使用旧的polymorphic_union函数计算映射器的错误主键 - 但这是旧的东西。
- en: 'References: [#1486](https://www.sqlalchemy.org/trac/ticket/1486)'
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1486](https://www.sqlalchemy.org/trac/ticket/1486)
- en: sql
  id: totrans-1591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed column.copy() to copy defaults and onupdates.
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了column.copy()以复制默认值和onupdates。
- en: 'References: [#1373](https://www.sqlalchemy.org/trac/ticket/1373)'
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1373](https://www.sqlalchemy.org/trac/ticket/1373)
- en: '**[sql]**'
  id: totrans-1595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed a bug in extract() introduced in 0.5.4 whereby the string “field” argument
    was getting treated as a ClauseElement, causing various errors within more complex
    SQL transformations.
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.5.4中引入的extract()中的错误，其中字符串“field”参数被视为ClauseElement，导致更复杂的SQL转换中出现各种错误。
- en: '**[sql]**'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Unary expressions such as DISTINCT propagate their type handling to result sets,
    allowing conversions like unicode and such to take place.
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一元表达式（如DISTINCT）将其类型处理传播到结果集，允许进行类似unicode的转换。
- en: 'References: [#1420](https://www.sqlalchemy.org/trac/ticket/1420)'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1420](https://www.sqlalchemy.org/trac/ticket/1420)
- en: '**[sql]**'
  id: totrans-1600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed bug in Table and Column whereby passing empty dict for “info” argument
    would raise an exception.
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Table和Column中传递空字典给“info”参数会引发异常的bug。
- en: 'References: [#1482](https://www.sqlalchemy.org/trac/ticket/1482)'
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1482](https://www.sqlalchemy.org/trac/ticket/1482)
- en: oracle
  id: totrans-1603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Backported 0.6 fix for Oracle alias names not getting truncated.
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Oracle别名名称未被截断的0.6修复进行了回溯。
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1309](https://www.sqlalchemy.org/trac/ticket/1309)
- en: misc
  id: totrans-1607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: The collection proxies produced by associationproxy are now pickleable. A user-defined
    proxy_factory however is still not pickleable unless it defines __getstate__ and
    __setstate__.
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: associationproxy生成的集合代理现在是可pickle的。然而，用户定义的proxy_factory仍然不可pickle，除非它定义了__getstate__和__setstate__。
- en: 'References: [#1446](https://www.sqlalchemy.org/trac/ticket/1446)'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1446](https://www.sqlalchemy.org/trac/ticket/1446)
- en: '**[ext]**'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Declarative will raise an informative exception if __table_args__ is passed
    as a tuple with no dict argument. Improved documentation.
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将__table_args__作为没有字典参数的元组传递给Declarative，将引发一个信息性异常。改进了文档。
- en: 'References: [#1468](https://www.sqlalchemy.org/trac/ticket/1468)'
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1468](https://www.sqlalchemy.org/trac/ticket/1468)
- en: '**[ext]**'
  id: totrans-1614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Table objects declared in the MetaData can now be used in string expressions
    sent to primaryjoin/secondaryjoin/ secondary - the name is pulled from the MetaData
    of the declarative base.
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MetaData中声明的Table对象现在可以在发送到primaryjoin/secondaryjoin/secondary的字符串表达式中使用 -
    名称从declarative base的MetaData中提取。
- en: 'References: [#1527](https://www.sqlalchemy.org/trac/ticket/1527)'
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1527](https://www.sqlalchemy.org/trac/ticket/1527)
- en: '**[ext]**'
  id: totrans-1617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: A column can be added to a joined-table subclass after the class has been constructed
    (i.e. via class-level attribute assignment). The column is added to the underlying
    Table as always, but now the mapper will rebuild its “join” to include the new
    column, instead of raising an error about “no such column, use column_property()
    instead”.
  id: totrans-1618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在构造类后（即通过类级属性赋值）可以向joined-table子类添加列。该列始终添加到底层表中，但现在映射器将重建其“join”以包括新列，而不是引发关于“没有这样的列，请改用column_property()”的错误。
- en: 'References: [#1523](https://www.sqlalchemy.org/trac/ticket/1523)'
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1523](https://www.sqlalchemy.org/trac/ticket/1523)
- en: '**[test]**'
  id: totrans-1620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[test]**'
- en: Added examples into the test suite so they get exercised regularly and cleaned
    up a couple deprecation warnings.
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将示例添加到测试套件中，以便定期执行，并清理了一些弃用警告。
- en: 0.5.5
  id: totrans-1622
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.5
- en: 'Released: Mon Jul 13 2009'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年7月13日星期一
- en: general
  id: totrans-1624
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: unit tests have been migrated from unittest to nose. See README.unittests for
    information on how to run the tests.
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试已从unittest迁移到nose。有关如何运行测试的信息，请参阅README.unittests。
- en: 'References: [#970](https://www.sqlalchemy.org/trac/ticket/970)'
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#970](https://www.sqlalchemy.org/trac/ticket/970)
- en: orm
  id: totrans-1628
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “foreign_keys” argument of relation() will now propagate automatically to
    the backref in the same way that primaryjoin and secondaryjoin do. For the extremely
    rare use case where the backref of a relation() has intentionally different “foreign_keys”
    configured, both sides now need to be configured explicitly (if they do in fact
    require this setting, see the next note…).
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()的“foreign_keys”参数现在将自动传播到同一backref中，就像primaryjoin和secondaryjoin一样。对于极为罕见的情况，即relation()的backref有意不同的“foreign_keys”配置，现在两侧都需要显式配置（如果它们确实需要此设置，请参阅下一个注释…）。
- en: '**[orm]**'
  id: totrans-1631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: …the only known (and really, really rare) use case where a different foreign_keys
    setting was used on the forwards/backwards side, a composite foreign key that
    partially points to its own columns, has been enhanced such that the fk->itself
    aspect of the relation won’t be used to determine relation direction.
  id: totrans-1632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: …唯一已知的（而且真的非常罕见）使用情况是，在前向/后向方面使用了不同的foreign_keys设置，部分指向自身列的复合外键已经得到增强，以便关系的fk->itself方面不会用于确定关系方向。
- en: '**[orm]**'
  id: totrans-1633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.mapper is now *deprecated*.
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.mapper现在已被*弃用*。
- en: Call session.add() if you’d like a free-standing object to be part of your session.
    Otherwise, a DIY version of Session.mapper is now documented at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    The method will remain deprecated throughout 0.6.
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您希望一个独立的对象成为会话的一部分，请调用session.add()。否则，现在在[https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)上记录了Session.mapper的DIY版本。该方法将在0.6版本中继续被弃用。
- en: '**[orm]**'
  id: totrans-1636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed Query being able to join() from individual columns of a joined-table subclass
    entity, i.e. query(SubClass.foo, SubClass.bar).join(<anything>). In most cases,
    an error “Could not find a FROM clause to join from” would be raised. In a few
    others, the result would be returned in terms of the base class rather than the
    subclass - so applications which relied on this erroneous result need to be adjusted.
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query能够从joined-table子类实体的单独列（即query(SubClass.foo, SubClass.bar).join(<anything>)）进行join()的问题。在大多数情况下，会引发错误“找不到要加入的FROM子句”。在少数情况下，结果将以基类而不是子类的形式返回
    - 因此依赖于这种错误结果的应用程序需要进行调整。
- en: 'References: [#1431](https://www.sqlalchemy.org/trac/ticket/1431)'
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1431](https://www.sqlalchemy.org/trac/ticket/1431)
- en: '**[orm]**'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a bug involving contains_eager(), which would apply itself to a secondary
    (i.e. lazy) load in a particular rare case, producing cartesian products. improved
    the targeting of query.options() on secondary loads overall.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及contains_eager()的错误，该错误会在特定情况下将其应用于次要（即懒加载）加载，从而产生笛卡尔积。改进了对次要加载上的query.options()的定位。
- en: 'References: [#1461](https://www.sqlalchemy.org/trac/ticket/1461)'
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1461](https://www.sqlalchemy.org/trac/ticket/1461)
- en: '**[orm]**'
  id: totrans-1642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug introduced in 0.5.4 whereby Composite types fail when default-holding
    columns are flushed.
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5.4版本引入的bug，即当默认保持列被刷新时，复合类型会失败。
- en: '**[orm]**'
  id: totrans-1644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed another 0.5.4 bug whereby mutable attributes (i.e. PickleType) wouldn’t
    be deserialized correctly when the whole object was serialized.
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个0.5.4版本的bug，即当整个对象被序列化时，可变属性（即PickleType）无法正确反序列化。
- en: 'References: [#1426](https://www.sqlalchemy.org/trac/ticket/1426)'
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1426](https://www.sqlalchemy.org/trac/ticket/1426)
- en: '**[orm]**'
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby session.is_modified() would raise an exception if any synonyms
    were in use.
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.is_modified()在使用任何同义词时会引发异常的bug。
- en: '**[orm]**'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed potential memory leak whereby previously pickled objects placed back in
    a session would not be fully garbage collected unless the Session were explicitly
    closed out.
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了潜在的内存泄漏问题，即以前被pickled的对象放回会话后，除非显式关闭Session，否则不会完全被垃圾回收。
- en: '**[orm]**'
  id: totrans-1651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby list-based attributes, like pickletype and PGArray, failed
    to be merged() properly.
  id: totrans-1652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于列表的属性（如pickletype和PGArray）未能正确合并的bug。
- en: '**[orm]**'
  id: totrans-1653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired non-working attributes.set_committed_value function.
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了attributes.set_committed_value函数无法正常工作的问题。
- en: '**[orm]**'
  id: totrans-1655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Trimmed the pickle format for InstanceState which should further reduce the
    memory footprint of pickled instances. The format should be backwards compatible
    with that of 0.5.4 and previous.
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修剪了InstanceState的pickle格式，这应进一步减少pickled实例的内存占用。该格式应向后兼容0.5.4及以前的版本。
- en: '**[orm]**'
  id: totrans-1657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: sqlalchemy.orm.join and sqlalchemy.orm.outerjoin are now added to __all__ in
    sqlalchemy.orm.*.
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.join和sqlalchemy.orm.outerjoin现在添加到sqlalchemy.orm.*的__all__中。
- en: 'References: [#1463](https://www.sqlalchemy.org/trac/ticket/1463)'
  id: totrans-1659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1463](https://www.sqlalchemy.org/trac/ticket/1463)
- en: '**[orm]**'
  id: totrans-1660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query exception raise would fail when a too-short composite
    primary key value were passed to get().
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当传递给get()的复合主键值过短时，Query异常引发失败的bug。
- en: 'References: [#1458](https://www.sqlalchemy.org/trac/ticket/1458)'
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1458](https://www.sqlalchemy.org/trac/ticket/1458)
- en: sql
  id: totrans-1663
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed an obscure feature of execute() (including connection, engine, Session)
    whereby a bindparam() construct can be sent as a key to the params dictionary.
    This usage is undocumented and is at the core of an issue whereby the bindparam()
    object created implicitly by a text() construct may have the same hash value as
    a string placed in the params dictionary and may result in an inappropriate match
    when computing the final bind parameters. Internal checks for this condition would
    add significant latency to the critical task of parameter rendering, so the behavior
    is removed. This is a backwards incompatible change for any application that may
    have been using this feature, however the feature has never been documented.
  id: totrans-1665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了execute()的一个晦涩特性（包括connection、engine、Session），即可以将bindparam()构造作为params字典的键发送。这种用法未记录在案，并且是一个问题的核心，即text()构造隐式创建的bindparam()对象可能具有与放置在params字典中的字符串相同的哈希值，并且在计算最终绑定参数时可能导致不适当的匹配。对于可能使用此功能的任何应用程序来说，这是一个向后不兼容的更改，但是该功能从未被记录在案。
- en: misc
  id: totrans-1666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[engine/pool]**'
  id: totrans-1667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Implemented recreate() for StaticPool.
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为StaticPool实现了recreate()。
- en: general
  id: totrans-1669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-1670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: unit tests have been migrated from unittest to nose. See README.unittests for
    information on how to run the tests.
  id: totrans-1671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试已从unittest迁移到nose。有关如何运行测试的信息，请参阅README.unittests。
- en: 'References: [#970](https://www.sqlalchemy.org/trac/ticket/970)'
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#970](https://www.sqlalchemy.org/trac/ticket/970)
- en: orm
  id: totrans-1673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “foreign_keys” argument of relation() will now propagate automatically to
    the backref in the same way that primaryjoin and secondaryjoin do. For the extremely
    rare use case where the backref of a relation() has intentionally different “foreign_keys”
    configured, both sides now need to be configured explicitly (if they do in fact
    require this setting, see the next note…).
  id: totrans-1675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()的“foreign_keys”参数现在会自动传播到backref，就像primaryjoin和secondaryjoin一样。对于极为罕见的情况，即relation()的backref有意配置了不同的“foreign_keys”，现在两侧都需要显式配置（如果它们确实需要这个设置，请参见下一个注释…）。
- en: '**[orm]**'
  id: totrans-1676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: …the only known (and really, really rare) use case where a different foreign_keys
    setting was used on the forwards/backwards side, a composite foreign key that
    partially points to its own columns, has been enhanced such that the fk->itself
    aspect of the relation won’t be used to determine relation direction.
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: …唯一已知的（而且真的非常罕见）使用不同foreign_keys设置在前向/后向方向上的情况，部分指向自己列的复合外键，已经增强，使得关系的fk->itself方面不会用于确定关系方向。
- en: '**[orm]**'
  id: totrans-1678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.mapper is now *deprecated*.
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.mapper现在已经*弃用*。
- en: Call session.add() if you’d like a free-standing object to be part of your session.
    Otherwise, a DIY version of Session.mapper is now documented at [https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)
    The method will remain deprecated throughout 0.6.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您希望一个独立的对象成为会话的一部分，请调用session.add()。否则，现在在[https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/SessionAwareMapper)上记录了Session.mapper的DIY版本。该方法将在整个0.6版本中保持弃用。
- en: '**[orm]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed Query being able to join() from individual columns of a joined-table subclass
    entity, i.e. query(SubClass.foo, SubClass.bar).join(<anything>). In most cases,
    an error “Could not find a FROM clause to join from” would be raised. In a few
    others, the result would be returned in terms of the base class rather than the
    subclass - so applications which relied on this erroneous result need to be adjusted.
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query能够从连接表子类实体的单个列进行join()的bug，即query(SubClass.foo, SubClass.bar).join(<anything>)。在大多数情况下，会引发错误“找不到要加入的FROM子句”。在少数情况下，结果将以基类而不是子类的形式返回，因此依赖于这个错误结果的应用程序需要进行调整。
- en: 'References: [#1431](https://www.sqlalchemy.org/trac/ticket/1431)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1431](https://www.sqlalchemy.org/trac/ticket/1431)
- en: '**[orm]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a bug involving contains_eager(), which would apply itself to a secondary
    (i.e. lazy) load in a particular rare case, producing cartesian products. improved
    the targeting of query.options() on secondary loads overall.
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及contains_eager()的bug，在一个特定罕见情况下会应用于次要（即懒加载）加载，产生笛卡尔积。改进了对次要加载上的query.options()的定位。
- en: 'References: [#1461](https://www.sqlalchemy.org/trac/ticket/1461)'
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1461](https://www.sqlalchemy.org/trac/ticket/1461)
- en: '**[orm]**'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug introduced in 0.5.4 whereby Composite types fail when default-holding
    columns are flushed.
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5.4中引入的bug，即当刷新默认保持列时，复合类型会失败。
- en: '**[orm]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed another 0.5.4 bug whereby mutable attributes (i.e. PickleType) wouldn’t
    be deserialized correctly when the whole object was serialized.
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5.4中的另一个bug，即可变属性（即PickleType）在整个对象被序列化时无法正确反序列化。
- en: 'References: [#1426](https://www.sqlalchemy.org/trac/ticket/1426)'
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1426](https://www.sqlalchemy.org/trac/ticket/1426)
- en: '**[orm]**'
  id: totrans-1692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby session.is_modified() would raise an exception if any synonyms
    were in use.
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.is_modified()在使用任何同义词时会引发异常的bug。
- en: '**[orm]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed potential memory leak whereby previously pickled objects placed back in
    a session would not be fully garbage collected unless the Session were explicitly
    closed out.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了潜在的内存泄漏bug，即以前pickled的对象重新放入会话中时，除非显式关闭Session，否则不会完全被垃圾回收。
- en: '**[orm]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby list-based attributes, like pickletype and PGArray, failed
    to be merged() properly.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于列表的属性（如pickletype和PGArray）未能正确合并()的bug。
- en: '**[orm]**'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired non-working attributes.set_committed_value function.
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了不起作用的attributes.set_committed_value函数。
- en: '**[orm]**'
  id: totrans-1700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Trimmed the pickle format for InstanceState which should further reduce the
    memory footprint of pickled instances. The format should be backwards compatible
    with that of 0.5.4 and previous.
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修剪了InstanceState的pickle格式，这应该进一步减少pickled实例的内存占用。该格式应该向后兼容0.5.4及之前的版本。
- en: '**[orm]**'
  id: totrans-1702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: sqlalchemy.orm.join and sqlalchemy.orm.outerjoin are now added to __all__ in
    sqlalchemy.orm.*.
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.join和sqlalchemy.orm.outerjoin现在已添加到sqlalchemy.orm.*的__all__中。
- en: 'References: [#1463](https://www.sqlalchemy.org/trac/ticket/1463)'
  id: totrans-1704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1463](https://www.sqlalchemy.org/trac/ticket/1463)
- en: '**[orm]**'
  id: totrans-1705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where Query exception raise would fail when a too-short composite
    primary key value were passed to get().
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当向get()传递太短的复合主键值时，Query异常引发失败的错误。
- en: 'References: [#1458](https://www.sqlalchemy.org/trac/ticket/1458)'
  id: totrans-1707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1458](https://www.sqlalchemy.org/trac/ticket/1458)
- en: sql
  id: totrans-1708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed an obscure feature of execute() (including connection, engine, Session)
    whereby a bindparam() construct can be sent as a key to the params dictionary.
    This usage is undocumented and is at the core of an issue whereby the bindparam()
    object created implicitly by a text() construct may have the same hash value as
    a string placed in the params dictionary and may result in an inappropriate match
    when computing the final bind parameters. Internal checks for this condition would
    add significant latency to the critical task of parameter rendering, so the behavior
    is removed. This is a backwards incompatible change for any application that may
    have been using this feature, however the feature has never been documented.
  id: totrans-1710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了execute()的一个晦涩特性（包括connection、engine、Session），其中bindparam()构造可以作为params字典的键发送。这种用法未记录在案，并且是一个问题的核心，即text()构造隐式创建的bindparam()对象可能具有与放置在params字典中的字符串相同的哈希值，并且在计算最终绑定参数时可能导致不恰当的匹配。对于这种情况的内部检查将显著增加关键任务参数渲染的延迟，因此移除了该行为。对于可能使用此功能的任何应用程序，这是一个不兼容的更改，但是该功能从未被记录。
- en: misc
  id: totrans-1711
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engine/pool]**'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Implemented recreate() for StaticPool.
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为StaticPool实现了recreate()。
- en: 0.5.4p2
  id: totrans-1714
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.4p2
- en: 'Released: Tue May 26 2009'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年5月26日星期二
- en: sql
  id: totrans-1716
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repaired the printing of SQL exceptions which are not based on parameters or
    are not executemany() style.
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了不基于参数或不是executemany()风格的SQL异常打印。
- en: postgresql
  id: totrans-1719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Deprecated the hardcoded TIMESTAMP function, which when used as func.TIMESTAMP(value)
    would render “TIMESTAMP value”. This breaks on some platforms as PostgreSQL doesn’t
    allow bind parameters to be used in this context. The hard-coded uppercase is
    also inappropriate and there’s lots of other PG casts that we’d need to support.
    So instead, use text constructs i.e. select([“timestamp ‘12/05/09’”]).
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用了硬编码的TIMESTAMP函数，当作为func.TIMESTAMP(value)使用时，会呈现“TIMESTAMP value”。这在某些平台上会出现问题，因为PostgreSQL不允许在此上下文中使用绑定参数。硬编码的大写也是不合适的，我们需要支持很多其他PG转换。因此，使用文本构造，即select([“timestamp
    ‘12/05/09’”])。
- en: sql
  id: totrans-1722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repaired the printing of SQL exceptions which are not based on parameters or
    are not executemany() style.
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了不基于参数或不是executemany()风格的SQL异常打印。
- en: postgresql
  id: totrans-1725
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Deprecated the hardcoded TIMESTAMP function, which when used as func.TIMESTAMP(value)
    would render “TIMESTAMP value”. This breaks on some platforms as PostgreSQL doesn’t
    allow bind parameters to be used in this context. The hard-coded uppercase is
    also inappropriate and there’s lots of other PG casts that we’d need to support.
    So instead, use text constructs i.e. select([“timestamp ‘12/05/09’”]).
  id: totrans-1727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用了硬编码的TIMESTAMP函数，当作为func.TIMESTAMP(value)使用时，会呈现“TIMESTAMP value”。这在某些平台上会出现问题，因为PostgreSQL不允许在此上下文中使用绑定参数。硬编码的大写也是不合适的，我们需要支持很多其他PG转换。因此，使用文本构造，即select([“timestamp
    ‘12/05/09’”])。
- en: 0.5.4p1
  id: totrans-1728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.4p1
- en: 'Released: Mon May 18 2009'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年5月18日星期一
- en: orm
  id: totrans-1730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an attribute error introduced in 0.5.4 which would occur when merge()
    was used with an incomplete object.
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5.4中引入的属性错误，当使用不完整对象进行merge()时会发生。
- en: orm
  id: totrans-1733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an attribute error introduced in 0.5.4 which would occur when merge()
    was used with an incomplete object.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5.4中引入的属性错误，当使用不完整对象进行merge()时会发生。
- en: 0.5.4
  id: totrans-1736
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.4
- en: 'Released: Sun May 17 2009'
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年5月17日星期日
- en: orm
  id: totrans-1738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Significant performance enhancements regarding Sessions/flush() in conjunction
    with large mapper graphs, large numbers of objects:'
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与大型映射器图、大量对象一起使用时，关于Sessions/flush()的显著性能增强：
- en: Removed all* O(N) scanning behavior from the flush() process, i.e. operations
    that were scanning the full session, including an extremely expensive one that
    was erroneously assuming primary key values were changing when this was not the
    case.
  id: totrans-1741
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从flush()过程中移除了所有* O(N)扫描行为，即扫描整个会话的操作，包括一个极其昂贵的操作，错误地假设主键值正在更改，而实际情况并非如此。
- en: one edge case remains which may invoke a full scan, if an existing primary key
    attribute is modified to a new value.
  id: totrans-1742
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然存在一个边缘情况，可能会调用完整扫描，如果现有的主键属性被修改为新值。
- en: The Session’s “weak referencing” behavior is now *full* - no strong references
    whatsoever are made to a mapped object or related items/collections in its __dict__.
    Backrefs and other cycles in objects no longer affect the Session’s ability to
    lose all references to unmodified objects. Objects with pending changes still
    are maintained strongly until flush.
  id: totrans-1743
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话的“弱引用”行为现在是*完全*的 - 对映射对象或相关项/集合在其__dict__中不再进行任何强引用。对象中的反向引用和其他循环不再影响会话丢失对未修改对象的所有引用的能力。具有待处理更改的对象仍然会在flush之前被强制保留。
- en: The implementation also improves performance by moving the “resurrection” process
    of garbage collected items to only be relevant for mappings that map “mutable”
    attributes (i.e. PickleType, composite attrs). This removes overhead from the
    gc process and simplifies internal behavior.
  id: totrans-1744
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该实现还通过将垃圾回收项的“复活”过程仅适用于映射“可变”属性（即PickleType、复合属性）来提高性能。这消除了gc过程的开销，并简化了内部行为。
- en: If a “mutable” attribute change is the sole change on an object which is then
    dereferenced, the mapper will not have access to other attribute state when the
    UPDATE is issued. This may present itself differently to some MapperExtensions.
  id: totrans-1745
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“可变”属性更改是对象上唯一的更改，然后该对象被取消引用，那么在发出UPDATE时，映射器将无法访问其他属性状态。这可能会对某些MapperExtensions产生不同的影响。
- en: The change also affects the internal attribute API, but not the AttributeExtension
    interface nor any of the publicly documented attribute functions.
  id: totrans-1746
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还影响了内部属性API，但不影响AttributeExtension接口或任何公开文档化的属性函数。
- en: The unit of work no longer generates a graph of “dependency” processors for
    the full graph of mappers during flush(), instead creating such processors only
    for those mappers which represent objects with pending changes. This saves a tremendous
    number of method calls in the context of a large interconnected graph of mappers.
  id: totrans-1747
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作单元在flush()期间不再为整个映射器图生成“依赖”处理器图，而是仅为表示具有待处理更改的对象的那些映射器创建这样的处理器。在大型相互连接的映射器图的上下文中，这节省了大量的方法调用。
- en: Cached a wasteful “table sort” operation that previously occurred multiple times
    per flush, also removing significant method call count from flush().
  id: totrans-1748
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存了以前在每次flush时多次发生的“表排序”操作，还从flush()中删除了大量的方法调用次数。
- en: Other redundant behaviors have been simplified in mapper._save_obj().
  id: totrans-1749
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在mapper._save_obj()中简化了其他冗余行为。
- en: 'References: [#1398](https://www.sqlalchemy.org/trac/ticket/1398)'
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1398](https://www.sqlalchemy.org/trac/ticket/1398)
- en: '**[orm]**'
  id: totrans-1751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modified query_cls on DynamicAttributeImpl to accept a full mixin version of
    the AppenderQuery, which allows subclassing the AppenderMixin.
  id: totrans-1752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了DynamicAttributeImpl上的query_cls，以接受AppenderQuery的完整mixin版本，这允许对AppenderMixin进行子类化。
- en: '**[orm]**'
  id: totrans-1753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “polymorphic discriminator” column may be part of a primary key, and it
    will be populated with the correct discriminator value.
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “多态鉴别器”列可能是主键的一部分，并且将填充正确的鉴别器值。
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  id: totrans-1755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1300](https://www.sqlalchemy.org/trac/ticket/1300)
- en: '**[orm]**'
  id: totrans-1756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the evaluator not being able to evaluate IS NULL clauses.
  id: totrans-1757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了评估器无法评估IS NULL子句的问题。
- en: '**[orm]**'
  id: totrans-1758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the “set collection” function on “dynamic” relations to initiate events
    correctly. Previously a collection could only be assigned to a pending parent
    instance, otherwise modified events would not be fired correctly. Set collection
    is now compatible with merge(), fixes.
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“dynamic”关系上的“set collection”函数以正确启动事件。以前，只能将集合分配给待处理的父实例，否则修改事件将无法正确触发。现在，set
    collection与merge()兼容，修复了问题。
- en: 'References: [#1352](https://www.sqlalchemy.org/trac/ticket/1352)'
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1352](https://www.sqlalchemy.org/trac/ticket/1352)
- en: '**[orm]**'
  id: totrans-1761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Allowed pickling of PropertyOption objects constructed with instrumented descriptors;
    previously, pickle errors would occur when pickling an object which was loaded
    with a descriptor-based option, such as query.options(eagerload(MyClass.foo)).
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许对使用instrumented descriptors构造的PropertyOption对象进行pickle；以前，在对加载了基于描述符的选项的对象进行pickle时会出现pickle错误，例如query.options(eagerload(MyClass.foo))。
- en: '**[orm]**'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Lazy loader will not use get() if the “lazy load” SQL clause matches the clause
    used by get(), but contains some parameters hardcoded. Previously the lazy strategy
    would fail with the get(). Ideally get() would be used with the hardcoded parameters
    but this would require further development.
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“lazy load” SQL子句与get()使用的子句匹配，但包含一些硬编码参数，则惰性加载器将不使用get()。以前，惰性策略会因为get()失败。理想情况下，应该使用带有硬编码参数的get()，但这需要进一步开发。
- en: 'References: [#1357](https://www.sqlalchemy.org/trac/ticket/1357)'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1357](https://www.sqlalchemy.org/trac/ticket/1357)
- en: '**[orm]**'
  id: totrans-1766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: MapperOptions and other state associated with query.options() is no longer bundled
    within callables associated with each lazy/deferred-loading attribute during a
    load. The options are now associated with the instance’s state object just once
    when it’s populated. This removes the need in most cases for per-instance/attribute
    loader objects, improving load speed and memory overhead for individual instances.
  id: totrans-1767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，与query.options()关联的MapperOptions和其他状态不再在每次加载期间与每个惰性/延迟加载属性相关联的可调用对象中捆绑。这些选项现在与实例的状态对象关联一次，当它被填充时。这在大多数情况下消除了每个实例/属性加载器对象的需要，提高了单个实例的加载速度和内存开销。
- en: 'References: [#1391](https://www.sqlalchemy.org/trac/ticket/1391)'
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1391](https://www.sqlalchemy.org/trac/ticket/1391)
- en: '**[orm]**'
  id: totrans-1769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed another location where autoflush was interfering with session.merge().
    autoflush is disabled completely for the duration of merge() now.
  id: totrans-1770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个位置，其中自动刷新干扰了session.merge()。现在在merge()期间完全禁用了autoflush。
- en: 'References: [#1360](https://www.sqlalchemy.org/trac/ticket/1360)'
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1360](https://www.sqlalchemy.org/trac/ticket/1360)
- en: '**[orm]**'
  id: totrans-1772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented “mutable primary key” dependency logic from functioning
    properly on a one-to-one relation().
  id: totrans-1773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止“可变主键”依赖逻辑在一对一relation()上正常运行的错误。
- en: 'References: [#1406](https://www.sqlalchemy.org/trac/ticket/1406)'
  id: totrans-1774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1406](https://www.sqlalchemy.org/trac/ticket/1406)
- en: '**[orm]**'
  id: totrans-1775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in relation(), introduced in 0.5.3, whereby a self referential relation
    from a base class to a joined-table subclass would not configure correctly.
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了relation()中的错误，该错误在0.5.3中引入，其中从基类到连接表子类的自引用关系不会正确配置。
- en: '**[orm]**'
  id: totrans-1777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed obscure mapper compilation issue when inheriting mappers are used which
    would result in un-initialized attributes.
  id: totrans-1778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了继承映射器使用时的模糊编译问题，这会导致未初始化的属性。
- en: '**[orm]**'
  id: totrans-1779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed documentation for session weak_identity_map - the default value is True,
    indicating a weak referencing map in use.
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session weak_identity_map的文档错误-默认值为True，表示正在使用弱引用映射。
- en: '**[orm]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a unit of work issue whereby the foreign key attribute on an item contained
    within a collection owned by an object being deleted would not be set to None
    if the relation() was self-referential.
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个工作单元问题，即在要删除的对象所拥有的集合中的项目上的外键属性如果relation()是自引用的，则不会设置为None。
- en: 'References: [#1376](https://www.sqlalchemy.org/trac/ticket/1376)'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1376](https://www.sqlalchemy.org/trac/ticket/1376)
- en: '**[orm]**'
  id: totrans-1784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed Query.update() and Query.delete() failures with eagerloaded relations.
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query.update()和Query.delete()在急加载关系中的失败。
- en: 'References: [#1378](https://www.sqlalchemy.org/trac/ticket/1378)'
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1378](https://www.sqlalchemy.org/trac/ticket/1378)
- en: '**[orm]**'
  id: totrans-1787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It is now an error to specify both columns of a binary primaryjoin condition
    in the foreign_keys or remote_side collection. Whereas previously it was just
    nonsensical, but would succeed in a non-deterministic way.
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在foreign_keys或remote_side集合中指定二进制主连接条件的两列是一个错误。而以前只是荒谬的，但以一种非确定性的方式成功。
- en: sql
  id: totrans-1789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Back-ported the “compiler” extension from SQLA 0.6\. This is a standardized
    interface which allows the creation of custom ClauseElement subclasses and compilers.
    In particular it’s handy as an alternative to text() when you’d like to build
    a construct that has database-specific compilations. See the extension docs for
    details.
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从SQLA 0.6中回溯了“compiler”扩展。这是一个标准化接口，允许创建自定义ClauseElement子类和编译器。特别是作为text()的替代方案很方便，当您想要构建具有数据库特定编译的构造时。有关详细信息，请参阅扩展文档。
- en: '**[sql]**'
  id: totrans-1792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Exception messages are truncated when the list of bound parameters is larger
    than 10, preventing enormous multi-page exceptions from filling up screens and
    logfiles for large executemany() statements.
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当绑定参数列表大于10时，异常消息会被截断，防止大量的多页异常填满屏幕和大型executemany()语句的日志文件。
- en: 'References: [#1413](https://www.sqlalchemy.org/trac/ticket/1413)'
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1413](https://www.sqlalchemy.org/trac/ticket/1413)
- en: '**[sql]**'
  id: totrans-1795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: '`sqlalchemy.extract()` is now dialect sensitive and can extract components
    of timestamps idiomatically across the supported databases, including SQLite.'
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.extract()` 现在是方言敏感的，并且可以在支持的数据库中惯用地提取时间戳组件，包括 SQLite。'
- en: '**[sql]**'
  id: totrans-1797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed __repr__() and other _get_colspec() methods on ForeignKey constructed
    from __clause_element__() style construct (i.e. declarative columns).
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 __clause_element__() 样式构造的 ForeignKey 上的 __repr__() 和其他 _get_colspec()
    方法（即声明性列）。
- en: 'References: [#1353](https://www.sqlalchemy.org/trac/ticket/1353)'
  id: totrans-1799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1353](https://www.sqlalchemy.org/trac/ticket/1353)
- en: schema
  id: totrans-1800
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [1341] [ticket: 594]**'
  id: totrans-1801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [1341] [ticket: 594]**'
- en: Added a quote_schema() method to the IdentifierPreparer class so that dialects
    can override how schemas get handled. This enables the MSSQL dialect to treat
    schemas as multipart identifiers, such as ‘database.owner’.
  id: totrans-1802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 IdentifierPreparer 类添加了 quote_schema() 方法，以便方言可以重写模式的处理方式。这使得 MSSQL 方言可以将模式视为多部分标识符，例如
    'database.owner'。
- en: extensions
  id: totrans-1803
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-1804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Fixed adding of deferred or other column properties to a declarative class.
  id: totrans-1805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将延迟或其他列属性添加到声明性类的问题。
- en: 'References: [#1379](https://www.sqlalchemy.org/trac/ticket/1379)'
  id: totrans-1806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1379](https://www.sqlalchemy.org/trac/ticket/1379)
- en: mysql
  id: totrans-1807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Reflecting a FOREIGN KEY construct will take into account a dotted schema.tablename
    combination, if the foreign key references a table in a remote schema.
  id: totrans-1809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射 FOREIGN KEY 构造将考虑点分模式.表名组合，如果外键引用远程模式中的表。
- en: 'References: [#1405](https://www.sqlalchemy.org/trac/ticket/1405)'
  id: totrans-1810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1405](https://www.sqlalchemy.org/trac/ticket/1405)
- en: sqlite
  id: totrans-1811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Corrected the SLBoolean type so that it properly treats only 1 as True.
  id: totrans-1813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 SLBoolean 类型，使其正确地将只有 1 视为 True。
- en: 'References: [#1402](https://www.sqlalchemy.org/trac/ticket/1402)'
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1402](https://www.sqlalchemy.org/trac/ticket/1402)
- en: '**[sqlite]**'
  id: totrans-1815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Corrected the float type so that it correctly maps to a SLFloat type when being
    reflected.
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 float 类型，使其在反射时正确地映射到 SLFloat 类型。
- en: 'References: [#1273](https://www.sqlalchemy.org/trac/ticket/1273)'
  id: totrans-1817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1273](https://www.sqlalchemy.org/trac/ticket/1273)
- en: mssql
  id: totrans-1818
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Modified how savepoint logic works to prevent it from stepping on non-savepoint
    oriented routines. Savepoint support is still very experimental.
  id: totrans-1820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了保存点逻辑的工作方式，以防止其干扰非保存点导向的例程。保存点支持仍然非常实验性。
- en: '**[mssql]**'
  id: totrans-1821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in reserved words for MSSQL that covers version 2008 and all prior versions.
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了适用于 MSSQL 的保留字，涵盖了 2008 年及以前的所有版本。
- en: 'References: [#1310](https://www.sqlalchemy.org/trac/ticket/1310)'
  id: totrans-1823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1310](https://www.sqlalchemy.org/trac/ticket/1310)
- en: '**[mssql]**'
  id: totrans-1824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problem with information schema not working with a binary collation
    based database. Cleaned up information schema since it is only used by mssql now.
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了信息模式在基于二进制排序的数据库上不起作用的问题。清理了信息模式，因为它现在只由 mssql 使用。
- en: 'References: [#1343](https://www.sqlalchemy.org/trac/ticket/1343)'
  id: totrans-1826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1343](https://www.sqlalchemy.org/trac/ticket/1343)
- en: orm
  id: totrans-1827
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Significant performance enhancements regarding Sessions/flush() in conjunction
    with large mapper graphs, large numbers of objects:'
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与大型映射器图、大量对象一起使用时，针对 Sessions/flush() 的显著性能增强：
- en: Removed all* O(N) scanning behavior from the flush() process, i.e. operations
    that were scanning the full session, including an extremely expensive one that
    was erroneously assuming primary key values were changing when this was not the
    case.
  id: totrans-1830
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 flush() 过程中删除了所有* O(N) 扫描行为，即扫描整个会话的操作，包括一个极其昂贵的操作，错误地假定主键值正在更改，而事实并非如此。
- en: one edge case remains which may invoke a full scan, if an existing primary key
    attribute is modified to a new value.
  id: totrans-1831
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然存在一个边缘情况，可能会触发完全扫描，如果现有的主键属性被修改为新值。
- en: The Session’s “weak referencing” behavior is now *full* - no strong references
    whatsoever are made to a mapped object or related items/collections in its __dict__.
    Backrefs and other cycles in objects no longer affect the Session’s ability to
    lose all references to unmodified objects. Objects with pending changes still
    are maintained strongly until flush.
  id: totrans-1832
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话的“弱引用”行为现在是*完整的* - 在其 __dict__ 中不再对映射对象或相关项目/集合进行任何强引用。对象中的反向引用和其他循环不再影响会话完全失去对未修改对象的所有引用的能力。具有待处理更改的对象仍然会强烈保留，直到
    flush。
- en: The implementation also improves performance by moving the “resurrection” process
    of garbage collected items to only be relevant for mappings that map “mutable”
    attributes (i.e. PickleType, composite attrs). This removes overhead from the
    gc process and simplifies internal behavior.
  id: totrans-1833
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该实现还通过将垃圾回收项的“复活”过程仅与映射“可变”属性（即 PickleType、复合属性）相关的映射器相关联，从而提高了性能。这消除了 gc 过程的开销，并简化了内部行为。
- en: If a “mutable” attribute change is the sole change on an object which is then
    dereferenced, the mapper will not have access to other attribute state when the
    UPDATE is issued. This may present itself differently to some MapperExtensions.
  id: totrans-1834
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“可变”属性更改是对象上唯一的更改，然后该对象被取消引用，那么在发出 UPDATE 时，映射器将无法访问其他属性状态。这可能会对某些 MapperExtensions
    产生不同的影响。
- en: The change also affects the internal attribute API, but not the AttributeExtension
    interface nor any of the publicly documented attribute functions.
  id: totrans-1835
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变化也影响了内部属性 API，但不影响 AttributeExtension 接口，也不影响任何公开文档中记录的属性函数。
- en: The unit of work no longer generates a graph of “dependency” processors for
    the full graph of mappers during flush(), instead creating such processors only
    for those mappers which represent objects with pending changes. This saves a tremendous
    number of method calls in the context of a large interconnected graph of mappers.
  id: totrans-1836
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作单元在 flush() 期间不再为整个映射器图生成“依赖”处理器图，而是仅为表示具有待处理更改的对象的那些映射器创建这样的处理器。这在大型互连映射器图的情况下节省了大量方法调用。
- en: Cached a wasteful “table sort” operation that previously occurred multiple times
    per flush, also removing significant method call count from flush().
  id: totrans-1837
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化了以前每次刷新都会发生多次“表排序”操作的性能浪费，同时还从 flush() 中删除了大量方法调用次数。
- en: Other redundant behaviors have been simplified in mapper._save_obj().
  id: totrans-1838
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他冗余行为已经在 mapper._save_obj() 中简化。
- en: 'References: [#1398](https://www.sqlalchemy.org/trac/ticket/1398)'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1398](https://www.sqlalchemy.org/trac/ticket/1398)
- en: '**[orm]**'
  id: totrans-1840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modified query_cls on DynamicAttributeImpl to accept a full mixin version of
    the AppenderQuery, which allows subclassing the AppenderMixin.
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 DynamicAttributeImpl 上的 query_cls，以接受 AppenderQuery 的完整混合版本，这允许对 AppenderMixin
    进行子类化。
- en: '**[orm]**'
  id: totrans-1842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “polymorphic discriminator” column may be part of a primary key, and it
    will be populated with the correct discriminator value.
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “多态鉴别器”列可以是主键的一部分，并且将填充正确的鉴别器值。
- en: 'References: [#1300](https://www.sqlalchemy.org/trac/ticket/1300)'
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1300](https://www.sqlalchemy.org/trac/ticket/1300)
- en: '**[orm]**'
  id: totrans-1845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the evaluator not being able to evaluate IS NULL clauses.
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了评估器无法评估 IS NULL 子句的问题。
- en: '**[orm]**'
  id: totrans-1847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed the “set collection” function on “dynamic” relations to initiate events
    correctly. Previously a collection could only be assigned to a pending parent
    instance, otherwise modified events would not be fired correctly. Set collection
    is now compatible with merge(), fixes.
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在“动态”关系上的“设置集合”函数无法正确触发事件的问题。以前，只能将集合分配给待处理的父实例，否则修改事件将无法正确触发。现在，设置集合与 merge()
    兼容，修复了这个问题。
- en: 'References: [#1352](https://www.sqlalchemy.org/trac/ticket/1352)'
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1352](https://www.sqlalchemy.org/trac/ticket/1352)
- en: '**[orm]**'
  id: totrans-1850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Allowed pickling of PropertyOption objects constructed with instrumented descriptors;
    previously, pickle errors would occur when pickling an object which was loaded
    with a descriptor-based option, such as query.options(eagerload(MyClass.foo)).
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许对使用 instrumented descriptors 构建的 PropertyOption 对象进行 pickling；以前，在 pickle
    一个使用基于描述符的选项（例如 query.options(eagerload(MyClass.foo)）加载的对象时，会出现 pickle 错误。
- en: '**[orm]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Lazy loader will not use get() if the “lazy load” SQL clause matches the clause
    used by get(), but contains some parameters hardcoded. Previously the lazy strategy
    would fail with the get(). Ideally get() would be used with the hardcoded parameters
    but this would require further development.
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“延迟加载”SQL子句与 get() 使用的子句匹配，但包含一些硬编码参数，则惰性加载器将不使用 get()。以前，惰性策略会在 get() 中失败。理想情况下，应该使用带有硬编码参数的
    get()，但这需要进一步开发。
- en: 'References: [#1357](https://www.sqlalchemy.org/trac/ticket/1357)'
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1357](https://www.sqlalchemy.org/trac/ticket/1357)
- en: '**[orm]**'
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: MapperOptions and other state associated with query.options() is no longer bundled
    within callables associated with each lazy/deferred-loading attribute during a
    load. The options are now associated with the instance’s state object just once
    when it’s populated. This removes the need in most cases for per-instance/attribute
    loader objects, improving load speed and memory overhead for individual instances.
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MapperOptions和与query.options()关联的其他状态不再在每次加载期间与每个延迟/延迟加载属性相关的可调用对象捆绑在一起。现在，选项仅在填充实例时与实例的状态对象关联一次。这在大多数情况下消除了每个实例/属性加载器对象的需要，提高了单个实例的加载速度和内存开销。
- en: 'References: [#1391](https://www.sqlalchemy.org/trac/ticket/1391)'
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1391](https://www.sqlalchemy.org/trac/ticket/1391)
- en: '**[orm]**'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed another location where autoflush was interfering with session.merge().
    autoflush is disabled completely for the duration of merge() now.
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个位置，其中autoflush干扰了session.merge()。现在，在merge()期间完全禁用autoflush。
- en: 'References: [#1360](https://www.sqlalchemy.org/trac/ticket/1360)'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1360](https://www.sqlalchemy.org/trac/ticket/1360)
- en: '**[orm]**'
  id: totrans-1861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug which prevented “mutable primary key” dependency logic from functioning
    properly on a one-to-one relation().
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止“可变主键”依赖逻辑在一对一关系()上正常运行的错误。
- en: 'References: [#1406](https://www.sqlalchemy.org/trac/ticket/1406)'
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1406](https://www.sqlalchemy.org/trac/ticket/1406)
- en: '**[orm]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in relation(), introduced in 0.5.3, whereby a self referential relation
    from a base class to a joined-table subclass would not configure correctly.
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.5.3版本中引入的relation()中的错误，即从基类到连接表子类的自引用关系将无法正确配置。
- en: '**[orm]**'
  id: totrans-1866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed obscure mapper compilation issue when inheriting mappers are used which
    would result in un-initialized attributes.
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用继承映射器时会导致未初始化属性的模糊映射器编译问题。
- en: '**[orm]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed documentation for session weak_identity_map - the default value is True,
    indicating a weak referencing map in use.
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session weak_identity_map的文档 - 默认值为True，表示正在使用弱引用映射。
- en: '**[orm]**'
  id: totrans-1870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a unit of work issue whereby the foreign key attribute on an item contained
    within a collection owned by an object being deleted would not be set to None
    if the relation() was self-referential.
  id: totrans-1871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个工作单元问题，即在要删除的对象拥有的集合中的项目上的外键属性如果关系()是自引用的，则不会设置为None。
- en: 'References: [#1376](https://www.sqlalchemy.org/trac/ticket/1376)'
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1376](https://www.sqlalchemy.org/trac/ticket/1376)
- en: '**[orm]**'
  id: totrans-1873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed Query.update() and Query.delete() failures with eagerloaded relations.
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query.update()和Query.delete()在预加载关系时的失败。
- en: 'References: [#1378](https://www.sqlalchemy.org/trac/ticket/1378)'
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1378](https://www.sqlalchemy.org/trac/ticket/1378)
- en: '**[orm]**'
  id: totrans-1876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: It is now an error to specify both columns of a binary primaryjoin condition
    in the foreign_keys or remote_side collection. Whereas previously it was just
    nonsensical, but would succeed in a non-deterministic way.
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在foreign_keys或remote_side集合中指定二进制primaryjoin条件的两个列是一个错误。而以前只是荒谬的，但会以一种非确定性的方式成功。
- en: sql
  id: totrans-1878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Back-ported the “compiler” extension from SQLA 0.6\. This is a standardized
    interface which allows the creation of custom ClauseElement subclasses and compilers.
    In particular it’s handy as an alternative to text() when you’d like to build
    a construct that has database-specific compilations. See the extension docs for
    details.
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从SQLA 0.6版本中回溯了“编译器”扩展。这是一个标准化接口，允许创建自定义的ClauseElement子类和编译器。特别是当您想要构建具有特定于数据库的编译的构造时，它是text()的一个替代方案。有关详细信息，请参阅扩展文档。
- en: '**[sql]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Exception messages are truncated when the list of bound parameters is larger
    than 10, preventing enormous multi-page exceptions from filling up screens and
    logfiles for large executemany() statements.
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当绑定参数列表大于10时，异常消息将被截断，防止大型executemany()语句填满屏幕和日志文件。
- en: 'References: [#1413](https://www.sqlalchemy.org/trac/ticket/1413)'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1413](https://www.sqlalchemy.org/trac/ticket/1413)
- en: '**[sql]**'
  id: totrans-1884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: '`sqlalchemy.extract()` is now dialect sensitive and can extract components
    of timestamps idiomatically across the supported databases, including SQLite.'
  id: totrans-1885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.extract()`现在是方言敏感的，并且可以在支持的数据库中习惯地提取时间戳的组件，包括SQLite。'
- en: '**[sql]**'
  id: totrans-1886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed __repr__() and other _get_colspec() methods on ForeignKey constructed
    from __clause_element__() style construct (i.e. declarative columns).
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由__clause_element__()样式构造（即声明列）构造的ForeignKey上的__repr__()和其他_get_colspec()方法。
- en: 'References: [#1353](https://www.sqlalchemy.org/trac/ticket/1353)'
  id: totrans-1888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1353](https://www.sqlalchemy.org/trac/ticket/1353)
- en: schema
  id: totrans-1889
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [1341] [ticket: 594]**'
  id: totrans-1890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [1341] [票号：594]**'
- en: Added a quote_schema() method to the IdentifierPreparer class so that dialects
    can override how schemas get handled. This enables the MSSQL dialect to treat
    schemas as multipart identifiers, such as ‘database.owner’.
  id: totrans-1891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个 quote_schema() 方法到 IdentifierPreparer 类，以便方言可以覆盖如何处理模式。这使得 MSSQL 方言可以将模式视为多部分标识符，例如
    'database.owner'。
- en: extensions
  id: totrans-1892
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: '**[extensions]**'
  id: totrans-1893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Fixed adding of deferred or other column properties to a declarative class.
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将延迟或其他列属性添加到声明类的问题。
- en: 'References: [#1379](https://www.sqlalchemy.org/trac/ticket/1379)'
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1379](https://www.sqlalchemy.org/trac/ticket/1379)
- en: mysql
  id: totrans-1896
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Reflecting a FOREIGN KEY construct will take into account a dotted schema.tablename
    combination, if the foreign key references a table in a remote schema.
  id: totrans-1898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射 FOREIGN KEY 构造将考虑到点分模式.表名组合，如果外键引用远程模式中的表。
- en: 'References: [#1405](https://www.sqlalchemy.org/trac/ticket/1405)'
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1405](https://www.sqlalchemy.org/trac/ticket/1405)
- en: sqlite
  id: totrans-1900
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: '**[sqlite]**'
  id: totrans-1901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Corrected the SLBoolean type so that it properly treats only 1 as True.
  id: totrans-1902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 SLBoolean 类型，使其正确地将只有 1 视为 True。
- en: 'References: [#1402](https://www.sqlalchemy.org/trac/ticket/1402)'
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1402](https://www.sqlalchemy.org/trac/ticket/1402)
- en: '**[sqlite]**'
  id: totrans-1904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Corrected the float type so that it correctly maps to a SLFloat type when being
    reflected.
  id: totrans-1905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 float 类型，使其在反射时正确映射为 SLFloat 类型。
- en: 'References: [#1273](https://www.sqlalchemy.org/trac/ticket/1273)'
  id: totrans-1906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1273](https://www.sqlalchemy.org/trac/ticket/1273)
- en: mssql
  id: totrans-1907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Modified how savepoint logic works to prevent it from stepping on non-savepoint
    oriented routines. Savepoint support is still very experimental.
  id: totrans-1909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了保存点逻辑的工作方式，以防止它干扰非保存点导向的例程。保存点支持仍然是非常实验性的。
- en: '**[mssql]**'
  id: totrans-1910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in reserved words for MSSQL that covers version 2008 and all prior versions.
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MSSQL 的保留字，涵盖了 2008 版本和所有之前的版本。
- en: 'References: [#1310](https://www.sqlalchemy.org/trac/ticket/1310)'
  id: totrans-1912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1310](https://www.sqlalchemy.org/trac/ticket/1310)
- en: '**[mssql]**'
  id: totrans-1913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problem with information schema not working with a binary collation
    based database. Cleaned up information schema since it is only used by mssql now.
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了与基于二进制排序的数据库不兼容的信息模式的问题。清理了信息模式，因为现在只有 mssql 在使用。
- en: 'References: [#1343](https://www.sqlalchemy.org/trac/ticket/1343)'
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1343](https://www.sqlalchemy.org/trac/ticket/1343)
- en: 0.5.3
  id: totrans-1916
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.3
- en: 'Released: Tue Mar 24 2009'
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年3月24日 星期二
- en: orm
  id: totrans-1918
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-1919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The “objects” argument to session.flush() is deprecated. State which represents
    the linkage between a parent and child object does not support “flushed” status
    on one side of the link and not the other, so supporting this operation leads
    to misleading results.
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 session.flush() 的 “objects” 参数已被弃用。表示父对象和子对象之间链接的状态不支持在链接的一侧处于“flushed”状态而在另一侧不是，因此支持此操作会导致误导性的结果。
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  id: totrans-1921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1315](https://www.sqlalchemy.org/trac/ticket/1315)
- en: '**[orm]**'
  id: totrans-1922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Query now implements __clause_element__() which produces its selectable, which
    means a Query instance can be accepted in many SQL expressions, including col.in_(query),
    union(query1, query2), select([foo]).select_from(query), etc.
  id: totrans-1923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 现在实现了 __clause_element__()，它产生其可选择的，这意味着 Query 实例可以在许多 SQL 表达式中被接受，包括
    col.in_(query)，union(query1, query2)，select([foo]).select_from(query) 等。
- en: '**[orm]**'
  id: totrans-1924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Query.join() can now construct multiple FROM clauses, if needed. Such as, query(A,
    B).join(A.x).join(B.y) might say SELECT A.*, B.* FROM A JOIN X, B JOIN Y. Eager
    loading can also tack its joins onto those multiple FROM clauses.
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join() 现在可以构造多个 FROM 子句，如果需要的话。例如，query(A, B).join(A.x).join(B.y) 可能会生成
    SELECT A.*, B.* FROM A JOIN X, B JOIN Y。Eager loading 也可以将其连接附加到这些多个 FROM 子句上。
- en: 'References: [#1337](https://www.sqlalchemy.org/trac/ticket/1337)'
  id: totrans-1926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1337](https://www.sqlalchemy.org/trac/ticket/1337)
- en: '**[orm]**'
  id: totrans-1927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug in dynamic_loader() where append/remove events after construction
    time were not being propagated to the UOW to pick up on flush().
  id: totrans-1928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 dynamic_loader() 中的 bug，其中在构建后未传播追加/移除事件到 UOW 以进行 flush()。
- en: 'References: [#1347](https://www.sqlalchemy.org/trac/ticket/1347)'
  id: totrans-1929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1347](https://www.sqlalchemy.org/trac/ticket/1347)
- en: '**[orm]**'
  id: totrans-1930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug where column_prefix wasn’t being checked before not mapping an attribute
    that already had class-level name present.
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在未检查 column_prefix 的情况下不映射已经存在类级别名称的属性的 bug。
- en: '**[orm]**'
  id: totrans-1932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: a session.expire() on a particular collection attribute will clear any pending
    backref additions as well, so that the next access correctly returns only what
    was present in the database. Presents some degree of a workaround for, although
    we are considering removing the flush([objects]) feature altogether.
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对特定集合属性的session.expire()也会清除任何挂起的反向引用添加，以便下一次访问正确地只返回数据库中存在的内容。虽然我们正在考虑完全删除flush([objects])功能，但也提供了一定程度的解决方案。
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1315](https://www.sqlalchemy.org/trac/ticket/1315)
- en: '**[orm]**'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.scalar() now converts raw SQL strings to text() the same way Session.execute()
    does and accepts same alternative **kw args.
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.scalar()现在将原始SQL字符串转换为text()，与Session.execute()相同，并接受相同的替代**kw args。
- en: '**[orm]**'
  id: totrans-1937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improvements to the “determine direction” logic of relation() such that the
    direction of tricky situations like mapper(A.join(B)) -> relation-> mapper(B)
    can be determined.
  id: totrans-1938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了relation()的“确定方向”逻辑，以便可以确定复杂情况的方向，比如mapper(A.join(B)) -> relation-> mapper(B)。
- en: '**[orm]**'
  id: totrans-1939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When flushing partial sets of objects using session.flush([somelist]), pending
    objects which remain pending after the operation won’t inadvertently be added
    as persistent.
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用session.flush([somelist])刷新对象的部分集合时，操作后保留的挂起对象不会不经意地被添加为持久对象。
- en: 'References: [#1306](https://www.sqlalchemy.org/trac/ticket/1306)'
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1306](https://www.sqlalchemy.org/trac/ticket/1306)
- en: '**[orm]**'
  id: totrans-1942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “post_configure_attribute” method to InstrumentationManager, so that the
    “listen_for_events.py” example works again.
  id: totrans-1943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“post_configure_attribute”方法到InstrumentationManager，以便“listen_for_events.py”示例再次起作用。
- en: 'References: [#1314](https://www.sqlalchemy.org/trac/ticket/1314)'
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1314](https://www.sqlalchemy.org/trac/ticket/1314)
- en: '**[orm]**'
  id: totrans-1945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a forward and complementing backwards reference which are both of the same direction,
    i.e. ONETOMANY or MANYTOONE, is now detected, and an error message is raised.
    Saves crazy CircularDependencyErrors later on.
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发现了前向和补充的反向引用，两者都是相同方向的，即ONETOMANY或MANYTOONE，并引发了错误消息。以后可以避免疯狂的CircularDependencyErrors。
- en: '**[orm]**'
  id: totrans-1947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed bugs in Query regarding simultaneous selection of multiple joined-table
    inheritance entities with common base classes:'
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query在同时选择具有相同基类的多个联接表继承实体时的错误：
- en: previously the adaption applied to “B” on “A JOIN B” would be erroneously partially
    applied to “A”.
  id: totrans-1949
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前对“A JOIN B”上的“B”的适应会错误地部分应用到“A”上。
- en: comparisons on relations (i.e. A.related==someb) were not getting adapted when
    they should.
  id: totrans-1950
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在关系比较（即A.related==someb）时，当应该进行适应时没有适应。
- en: Other filterings, like query(A).join(A.bs).filter(B.foo==’bar’), were erroneously
    adapting “B.foo” as though it were an “A”.
  id: totrans-1951
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他过滤，比如query(A).join(A.bs).filter(B.foo=='bar')，错误地将“B.foo”适应为“A”。
- en: '**[orm]**'
  id: totrans-1952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed adaptation of EXISTS clauses via any(), has(), etc. in conjunction with
    an aliased object on the left and of_type() on the right.
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与左侧的别名对象和of_type()右侧一起使用EXISTS子句的适应。
- en: 'References: [#1325](https://www.sqlalchemy.org/trac/ticket/1325)'
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1325](https://www.sqlalchemy.org/trac/ticket/1325)
- en: '**[orm]**'
  id: totrans-1955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an attribute helper method `set_committed_value` in sqlalchemy.orm.attributes.
    Given an object, attribute name, and value, will set the value on the object as
    part of its “committed” state, i.e. state that is understood to have been loaded
    from the database. Helps with the creation of homegrown collection loaders and
    such.
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.orm.attributes中添加了一个属性助手方法`set_committed_value`。给定对象、属性名称和值，将值设置在对象上作为其“已提交”状态的一部分，即被理解为从数据库加载的状态。有助于创建自制集合加载器等。
- en: '**[orm]**'
  id: totrans-1957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query won’t fail with weakref error when a non-mapper/class instrumented descriptor
    is passed, raises “Invalid column expression”.
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递非映射器/类的被仪器化描述符时，查询不会因为弱引用错误而失败，而是引发“无效的列表达式”。
- en: '**[orm]**'
  id: totrans-1959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.group_by() properly takes into account aliasing applied to the FROM clause,
    such as with select_from(), using with_polymorphic(), or using from_self().
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.group_by()正确考虑了应用于FROM子句的别名，比如select_from()，使用with_polymorphic()，或使用from_self()。
- en: sql
  id: totrans-1961
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: An alias() of a select() will convert to a “scalar subquery” when used in an
    unambiguously scalar context, i.e. it’s used in a comparison operation. This applies
    to the ORM when using query.subquery() as well.
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()的alias()在明确的标量上下文中使用时将转换为“标量子查询”，即它在比较操作中使用。当使用query.subquery()时，这也适用于ORM。
- en: '**[sql]**'
  id: totrans-1964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed missing _label attribute on Function object, others when used in a select()
    with use_labels (such as when used in an ORM column_property()).
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 select() 中使用 use_labels（例如在 ORM column_property() 中使用时）时，Function 对象上的 _label
    属性等属性不会丢失。
- en: 'References: [#1302](https://www.sqlalchemy.org/trac/ticket/1302)'
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1302](https://www.sqlalchemy.org/trac/ticket/1302)
- en: '**[sql]**'
  id: totrans-1967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: anonymous alias names now truncate down to the max length allowed by the dialect.
    More significant on DBs like Oracle with very small character limits.
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名别名现在会截断到方言允许的最大长度。在像 Oracle 这样具有非常小字符限制的数据库上更为重要。
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1309](https://www.sqlalchemy.org/trac/ticket/1309)
- en: '**[sql]**'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the __selectable__() interface has been replaced entirely by __clause_element__().
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __selectable__() 接口已完全被 __clause_element__() 取代。
- en: '**[sql]**'
  id: totrans-1972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine 用于缓存特定于方言的类型的每个方言缓存现在是 WeakKeyDictionary。这是为了防止方言对象被引用，对于创建任意数量的引擎或方言的应用程序，这会永远存在。这会带来一些性能损失，将在
    0.6 中解决。
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1299](https://www.sqlalchemy.org/trac/ticket/1299)
- en: extensions
  id: totrans-1975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Fixed a recursive pickling issue in serializer, triggered by an EXISTS or other
    embedded FROM construct.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了序列化器中的递归 pickling 问题，由 EXISTS 或其他嵌入的 FROM 构造触发。
- en: '**[extensions]**'
  id: totrans-1978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative locates the “inherits” class using a search through __bases__, to
    skip over mixins that are local to subclasses.
  id: totrans-1979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 使用 __bases__ 中的搜索来定位 “inherits” 类，以跳过局部于子类的混入。
- en: '**[extensions]**'
  id: totrans-1980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative figures out joined-table inheritance primary join condition even
    if “inherits” mapper argument is given explicitly.
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使显式给出 “inherits” 映射器参数，Declarative 也会找出联接表继承的主要联接条件。
- en: '**[extensions]**'
  id: totrans-1982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative will properly interpret the “foreign_keys” argument on a backref()
    if it’s a string.
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 backref() 的 “foreign_keys” 参数是字符串，Declarative 将正确解释它。
- en: '**[extensions]**'
  id: totrans-1984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative will accept a table-bound column as a property when used in conjunction
    with __table__, if the column is already present in __table__. The column will
    be remapped to the given key the same way as when added to the mapper() properties
    dict.
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与 __table__ 结合使用时，Declarative 将接受一个绑定到表的列作为属性，如果该列已经存在于 __table__ 中。该列将被重新映射到给定的键，方式与添加到
    mapper() 属性字典时相同。
- en: postgresql
  id: totrans-1986
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Index reflection won’t fail when an index with multiple expressions is encountered.
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当遇到具有多个表达式的索引时，索引反射不会失败。
- en: '**[postgresql]**'
  id: totrans-1989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added PGUuid and PGBit types to sqlalchemy.databases.postgres.
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 sqlalchemy.databases.postgres 添加了 PGUuid 和 PGBit 类型。
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  id: totrans-1991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1327](https://www.sqlalchemy.org/trac/ticket/1327)
- en: '**[postgresql]**'
  id: totrans-1992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Refection of unknown PG types won’t crash when those types are specified within
    a domain.
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当这些类型在域内指定时，未知 PG 类型的反射不会崩溃。
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1327](https://www.sqlalchemy.org/trac/ticket/1327)
- en: sqlite
  id: totrans-1995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 反射方法，以便在最近版本的 pysqlite 上检测到不存在的 cursor.description，触发自动关闭游标，以便在调用
    fetchone() 时没有行时不会失败。
- en: mssql
  id: totrans-1998
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Preliminary support for pymssql 1.0.1
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 pymssql 1.0.1 的初步支持
- en: '**[mssql]**'
  id: totrans-2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected issue on mssql where max_identifier_length was not being respected.
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了在 mssql 上未遵守 max_identifier_length 的问题。
- en: orm
  id: totrans-2003
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “objects” argument to session.flush() is deprecated. State which represents
    the linkage between a parent and child object does not support “flushed” status
    on one side of the link and not the other, so supporting this operation leads
    to misleading results.
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.flush() 的 “objects” 参数已被弃用。表示父对象和子对象之间链接的状态不支持链接的一侧处于 “flushed�� 状态而另一侧不是，因此支持此操作会导致误导性的结果。
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  id: totrans-2006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1315](https://www.sqlalchemy.org/trac/ticket/1315)
- en: '**[orm]**'
  id: totrans-2007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query now implements __clause_element__() which produces its selectable, which
    means a Query instance can be accepted in many SQL expressions, including col.in_(query),
    union(query1, query2), select([foo]).select_from(query), etc.
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query现在实现了__clause_element__()，它生成其可选择的内容，这意味着Query实例可以在许多SQL表达式中被接受，包括col.in_(query)，union(query1,
    query2)，select([foo]).select_from(query)等。
- en: '**[orm]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.join() can now construct multiple FROM clauses, if needed. Such as, query(A,
    B).join(A.x).join(B.y) might say SELECT A.*, B.* FROM A JOIN X, B JOIN Y. Eager
    loading can also tack its joins onto those multiple FROM clauses.
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.join()现在可以构造多个FROM子句，如果需要的话。例如，query(A, B).join(A.x).join(B.y)可能会生成SELECT
    A.*, B.* FROM A JOIN X, B JOIN Y。Eager loading也可以将其连接附加到这些多个FROM子句上。
- en: 'References: [#1337](https://www.sqlalchemy.org/trac/ticket/1337)'
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1337](https://www.sqlalchemy.org/trac/ticket/1337)
- en: '**[orm]**'
  id: totrans-2012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in dynamic_loader() where append/remove events after construction
    time were not being propagated to the UOW to pick up on flush().
  id: totrans-2013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了dynamic_loader()中在构造后追加/删除事件未传播到UOW以在flush()中捕获的bug。
- en: 'References: [#1347](https://www.sqlalchemy.org/trac/ticket/1347)'
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1347](https://www.sqlalchemy.org/trac/ticket/1347)
- en: '**[orm]**'
  id: totrans-2015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where column_prefix wasn’t being checked before not mapping an attribute
    that already had class-level name present.
  id: totrans-2016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在未检查column_prefix之前未映射已具有类级名称的属性的bug。
- en: '**[orm]**'
  id: totrans-2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a session.expire() on a particular collection attribute will clear any pending
    backref additions as well, so that the next access correctly returns only what
    was present in the database. Presents some degree of a workaround for, although
    we are considering removing the flush([objects]) feature altogether.
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对特定集合属性进行session.expire()将清除任何待定的反向引用添加，以便下一次访问正确地返回仅在数据库中存在的内容。对于flush([objects])功能的某种程度的解决方案，尽管我们正在考虑完全删除它。
- en: 'References: [#1315](https://www.sqlalchemy.org/trac/ticket/1315)'
  id: totrans-2019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1315](https://www.sqlalchemy.org/trac/ticket/1315)
- en: '**[orm]**'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.scalar() now converts raw SQL strings to text() the same way Session.execute()
    does and accepts same alternative **kw args.
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.scalar()现在将原始SQL字符串转换为text()，与Session.execute()相同，并接受相同的替代**kw参数。
- en: '**[orm]**'
  id: totrans-2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improvements to the “determine direction” logic of relation() such that the
    direction of tricky situations like mapper(A.join(B)) -> relation-> mapper(B)
    can be determined.
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了relation()的“确定方向”逻辑，以便可以确定类似mapper(A.join(B)) -> relation-> mapper(B)这样的棘手情况的方向。
- en: '**[orm]**'
  id: totrans-2024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When flushing partial sets of objects using session.flush([somelist]), pending
    objects which remain pending after the operation won’t inadvertently be added
    as persistent.
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用session.flush([somelist])刷新部分对象集时，操作后仍保持待定状态的对象不会被意外添加为持久对象。
- en: 'References: [#1306](https://www.sqlalchemy.org/trac/ticket/1306)'
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1306](https://www.sqlalchemy.org/trac/ticket/1306)
- en: '**[orm]**'
  id: totrans-2027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added “post_configure_attribute” method to InstrumentationManager, so that the
    “listen_for_events.py” example works again.
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“post_configure_attribute”方法到InstrumentationManager，以便“listen_for_events.py”示例再次起作用。
- en: 'References: [#1314](https://www.sqlalchemy.org/trac/ticket/1314)'
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1314](https://www.sqlalchemy.org/trac/ticket/1314)
- en: '**[orm]**'
  id: totrans-2030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a forward and complementing backwards reference which are both of the same direction,
    i.e. ONETOMANY or MANYTOONE, is now detected, and an error message is raised.
    Saves crazy CircularDependencyErrors later on.
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在检测到具有相同方向的前向和补充后向引用，即ONETOMANY或MANYTOONE，并引发错误消息。以后可以避免疯狂的CircularDependencyErrors。
- en: '**[orm]**'
  id: totrans-2032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Fixed bugs in Query regarding simultaneous selection of multiple joined-table
    inheritance entities with common base classes:'
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query中关于同时选择具有共同基类的多个连接表继承实体的bug：
- en: previously the adaption applied to “B” on “A JOIN B” would be erroneously partially
    applied to “A”.
  id: totrans-2034
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前对“A JOIN B”中的“B”的适应会错误地部分应用于“A”。
- en: comparisons on relations (i.e. A.related==someb) were not getting adapted when
    they should.
  id: totrans-2035
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对关系的比较（即A.related==someb）在应该适应时未被适应。
- en: Other filterings, like query(A).join(A.bs).filter(B.foo==’bar’), were erroneously
    adapting “B.foo” as though it were an “A”.
  id: totrans-2036
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他过滤，如query(A).join(A.bs).filter(B.foo==’bar’)，错误地将“B.foo”适应为“A”。
- en: '**[orm]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed adaptation of EXISTS clauses via any(), has(), etc. in conjunction with
    an aliased object on the left and of_type() on the right.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通过any()，has()等与左侧别名对象和右侧of_type()结合使用的EXISTS子句的适应。
- en: 'References: [#1325](https://www.sqlalchemy.org/trac/ticket/1325)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1325](https://www.sqlalchemy.org/trac/ticket/1325)
- en: '**[orm]**'
  id: totrans-2040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an attribute helper method `set_committed_value` in sqlalchemy.orm.attributes.
    Given an object, attribute name, and value, will set the value on the object as
    part of its “committed” state, i.e. state that is understood to have been loaded
    from the database. Helps with the creation of homegrown collection loaders and
    such.
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.orm.attributes中添加了一个属性助手方法`set_committed_value`。给定一个对象、属性名称和值，将在对象上设置该值作为其“已提交”状态的一部分，即从数据库加载的状态。有助于创建自制集合加载器等。
- en: '**[orm]**'
  id: totrans-2042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query won’t fail with weakref error when a non-mapper/class instrumented descriptor
    is passed, raises “Invalid column expression”.
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递非映射器/类的受仪器化描述符时，查询不会因弱引用错误而失败，而会引发“无效列表达式”。
- en: '**[orm]**'
  id: totrans-2044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.group_by() properly takes into account aliasing applied to the FROM clause,
    such as with select_from(), using with_polymorphic(), or using from_self().
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.group_by()正确考虑应用于FROM子句的别名，例如使用select_from()、使用with_polymorphic()或使用from_self()。
- en: sql
  id: totrans-2046
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: An alias() of a select() will convert to a “scalar subquery” when used in an
    unambiguously scalar context, i.e. it’s used in a comparison operation. This applies
    to the ORM when using query.subquery() as well.
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在明确的标量上下文中使用时，select()的alias()将转换为“标量子查询”，即在比较操作中使用。当在ORM中使用query.subquery()时也适用。
- en: '**[sql]**'
  id: totrans-2049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed missing _label attribute on Function object, others when used in a select()
    with use_labels (such as when used in an ORM column_property()).
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用use_labels（例如在ORM column_property()中使用时）的select()中使用Function对象时，修复了缺少的_label属性等。
- en: 'References: [#1302](https://www.sqlalchemy.org/trac/ticket/1302)'
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1302](https://www.sqlalchemy.org/trac/ticket/1302)
- en: '**[sql]**'
  id: totrans-2052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: anonymous alias names now truncate down to the max length allowed by the dialect.
    More significant on DBs like Oracle with very small character limits.
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匿名别名现在会截断到方言允许的最大长度。在像Oracle这样具有非常小字符限制的数据库上更为重要。
- en: 'References: [#1309](https://www.sqlalchemy.org/trac/ticket/1309)'
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1309](https://www.sqlalchemy.org/trac/ticket/1309)
- en: '**[sql]**'
  id: totrans-2055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the __selectable__() interface has been replaced entirely by __clause_element__().
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __selectable__()接口已完全被__clause_element__()取代。
- en: '**[sql]**'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine用于缓存特定于方言的类型的每方言缓存现在是WeakKeyDictionary。这是为了防止方言对象被引用，以便应用程序创建任意数量的引擎或方言。这会有一点性能损失，将在0.6中解决。
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1299](https://www.sqlalchemy.org/trac/ticket/1299)
- en: extensions
  id: totrans-2060
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-2061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Fixed a recursive pickling issue in serializer, triggered by an EXISTS or other
    embedded FROM construct.
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了序列化器中的递归pickling问题，由EXISTS或其他嵌入的FROM构造触发。
- en: '**[extensions]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative locates the “inherits” class using a search through __bases__, to
    skip over mixins that are local to subclasses.
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative通过__bases__搜索定位“inherits”��，以跳过子类本地的混入。
- en: '**[extensions]**'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative figures out joined-table inheritance primary join condition even
    if “inherits” mapper argument is given explicitly.
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使明确给出“inherits”映射器参数，声明性图形也会找出连接表继承的主连接条件。
- en: '**[extensions]**'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative will properly interpret the “foreign_keys” argument on a backref()
    if it’s a string.
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果“foreign_keys”参数是字符串，Declarative将正确解释backref()上的“foreign_keys”参数。
- en: '**[extensions]**'
  id: totrans-2069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative will accept a table-bound column as a property when used in conjunction
    with __table__, if the column is already present in __table__. The column will
    be remapped to the given key the same way as when added to the mapper() properties
    dict.
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与__table__一起使用时，如果列已经存在于__table__中，Declarative将接受绑定到表的列作为属性。该列将被重新映射到给定键，方式与添加到mapper()属性字典时相同。
- en: postgresql
  id: totrans-2071
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql]**'
  id: totrans-2072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Index reflection won’t fail when an index with multiple expressions is encountered.
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当遇到具有多个表达式的索引时，索引反射不会失败。
- en: '**[postgresql]**'
  id: totrans-2074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Added PGUuid and PGBit types to sqlalchemy.databases.postgres.
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy.databases.postgres中添加了PGUuid和PGBit类型。
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1327](https://www.sqlalchemy.org/trac/ticket/1327)
- en: '**[postgresql]**'
  id: totrans-2077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql]**'
- en: Refection of unknown PG types won’t crash when those types are specified within
    a domain.
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在域中指定未知PG类型时，未知PG类型的反射不会崩溃。
- en: 'References: [#1327](https://www.sqlalchemy.org/trac/ticket/1327)'
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1327](https://www.sqlalchemy.org/trac/ticket/1327)
- en: sqlite
  id: totrans-2080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 反射方法，以便检测到不存在的 cursor.description，触发自动关闭游标，这样在最近版本的 pysqlite 上调用
    fetchone() 时不会因没有结果而失败，后者在没有行时会引发错误。
- en: mssql
  id: totrans-2083
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Preliminary support for pymssql 1.0.1
  id: totrans-2085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 pymssql 1.0.1 的初步支持
- en: '**[mssql]**'
  id: totrans-2086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected issue on mssql where max_identifier_length was not being respected.
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 mssql 上未正确处理 max_identifier_length 的问题。
- en: 0.5.2
  id: totrans-2088
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.2
- en: 'Released: Sat Jan 24 2009'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年1月24日 星期六
- en: orm
  id: totrans-2090
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Further refined 0.5.1’s warning about delete-orphan cascade placed on a many-to-many
    relation. First, the bad news: the warning will apply to both many-to-many as
    well as many-to-one relations. This is necessary since in both cases, SQLA does
    not scan the full set of potential parents when determining “orphan” status -
    for a persistent object it only detects an in-python de-association event to establish
    the object as an “orphan”. Next, the good news: to support one-to-one via a foreign
    key or association table, or to support one-to-many via an association table,
    a new flag single_parent=True may be set which indicates objects linked to the
    relation are only meant to have a single parent. The relation will raise an error
    if multiple parent-association events occur within Python.'
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步完善了0.5.1版本关于在多对多关系上放置 delete-orphan 级联的警告。首先，坏消息是：警告将适用于多对多关系和多对一关系。这是必要的，因为在这两种情况下，SQLA
    在确定“孤儿”状态时不会扫描所有潜在的父对象集合 - 对于持久对象，它只会检测到一个在 Python 中的取消关联事件来确定对象是否为“孤儿”。接下来，好消息是：为了支持通过外键或关联表实现一对一，或者通过关联表支持一对多，可以设置一个新标志
    single_parent=True，表示链接到关系的对象只能有一个父对象。如果在 Python 中发生多个父关联事件，关系将引发错误。
- en: '**[orm]**'
  id: totrans-2093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted the attribute instrumentation change from 0.5.1 to fully establish
    instrumentation for subclasses where the mapper was created after the superclass
    had already been fully instrumented.
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了从0.5.1版本开始的属性检测变化，完全为在超类已完全被检测后创建的子类建立属性检测。
- en: 'References: [#1292](https://www.sqlalchemy.org/trac/ticket/1292)'
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1292](https://www.sqlalchemy.org/trac/ticket/1292)
- en: '**[orm]**'
  id: totrans-2096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in delete-orphan cascade whereby two one-to-one relations from two
    different parent classes to the same target class would prematurely expunge the
    instance.
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 delete-orphan 级联中的错误，即从两个不同的父类到相同目标类的两个一对一关系会过早地清除实例。
- en: '**[orm]**'
  id: totrans-2098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an eager loading bug whereby self-referential eager loading would prevent
    other eager loads, self referential or not, from joining to the parent JOIN properly.
    Thanks to Alex K for creating a great test case.
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个急加载错误，即自引用急加载会阻止其他急加载（自引用或非自引用）正确地加入到父 JOIN 中。感谢 Alex K 创建了一个很好的测试用例。
- en: '**[orm]**'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.expire() and related methods will not expire() unloaded deferred attributes.
    This prevents them from being needlessly loaded when the instance is refreshed.
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.expire() 和相关方法不会使未加载的延迟属性过期。这样可以防止在刷新实例时不必要地加载它们。
- en: '**[orm]**'
  id: totrans-2102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join()/outerjoin() will now properly join an aliased() construct to the
    existing left side, even if query.from_self() or query.select_from(someselectable)
    has been called.
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()/outerjoin() 现在将正确地将一个 aliased() 构造加入到现有的左侧，即使已调用 query.from_self()
    或 query.select_from(someselectable)。
- en: 'References: [#1293](https://www.sqlalchemy.org/trac/ticket/1293)'
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1293](https://www.sqlalchemy.org/trac/ticket/1293)
- en: sql
  id: totrans-2105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Further fixes to the “percent signs and spaces in column/table
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了“列/表中的百分号和空格
- en: names” functionality.
  id: totrans-2108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: names” 功能。
- en: 'References: [#1284](https://www.sqlalchemy.org/trac/ticket/1284)'
  id: totrans-2109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1284](https://www.sqlalchemy.org/trac/ticket/1284)
- en: mssql
  id: totrans-2110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Restored convert_unicode handling. Results were being passed on through without
    conversion.
  id: totrans-2112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 convert_unicode 处理。结果被传递而没有转换。
- en: 'References: [#1291](https://www.sqlalchemy.org/trac/ticket/1291)'
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1291](https://www.sqlalchemy.org/trac/ticket/1291)
- en: '**[mssql]**'
  id: totrans-2114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Really fixing the decimal handling this time..
  id: totrans-2115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次真的修复了十进制处理..
- en: 'References: [#1282](https://www.sqlalchemy.org/trac/ticket/1282)'
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1282](https://www.sqlalchemy.org/trac/ticket/1282)
- en: '**[mssql] [Ticket:1289]**'
  id: totrans-2117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [工单:1289]**'
- en: Modified table reflection code to use only kwargs when constructing tables.
  id: totrans-2118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了表反射代码，只使用 kwargs 构建表。
- en: orm
  id: totrans-2119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Further refined 0.5.1’s warning about delete-orphan cascade placed on a many-to-many
    relation. First, the bad news: the warning will apply to both many-to-many as
    well as many-to-one relations. This is necessary since in both cases, SQLA does
    not scan the full set of potential parents when determining “orphan” status -
    for a persistent object it only detects an in-python de-association event to establish
    the object as an “orphan”. Next, the good news: to support one-to-one via a foreign
    key or association table, or to support one-to-many via an association table,
    a new flag single_parent=True may be set which indicates objects linked to the
    relation are only meant to have a single parent. The relation will raise an error
    if multiple parent-association events occur within Python.'
  id: totrans-2121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步改进了0.5.1版本关于在多对多关系上放置的delete-orphan级联的警告。首先，坏消息是：该警告将适用于多对多关系和多对一关系。这是必要的，因为在这两种情况下，SQLA
    在确定“孤儿”状态时并不会扫描全部潜在的父对象集合 - 对于持久对象，它只会检测到一个在 Python 中的取消关联事件以确立对象为“孤儿”。接下来是好消息：为了支持通过外键或关联表进行一对一，或者通过关联表进行一对多，可以设置一个新的标志
    `single_parent=True`，表示与关系相关联的对象只能有一个父对象。如果 Python 中发生多个父关联事件，则该关系将引发错误。
- en: '**[orm]**'
  id: totrans-2122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjusted the attribute instrumentation change from 0.5.1 to fully establish
    instrumentation for subclasses where the mapper was created after the superclass
    had already been fully instrumented.
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了从0.5.1版本开始的属性检测变更，以完全为在超类已经完全被检测后创建的子类建立属性检测。
- en: 'References: [#1292](https://www.sqlalchemy.org/trac/ticket/1292)'
  id: totrans-2124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1292](https://www.sqlalchemy.org/trac/ticket/1292)
- en: '**[orm]**'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in delete-orphan cascade whereby two one-to-one relations from two
    different parent classes to the same target class would prematurely expunge the
    instance.
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了删除孤立级联中的错误，其中两个从两个不同的父类到相同目标类的一对一关系会过早地删除实例。
- en: '**[orm]**'
  id: totrans-2127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed an eager loading bug whereby self-referential eager loading would prevent
    other eager loads, self referential or not, from joining to the parent JOIN properly.
    Thanks to Alex K for creating a great test case.
  id: totrans-2128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个贪婪加载 bug，即自我引用的贪婪加载将阻止其他贪婪加载（自我引用或非自我引用）正确地加入到父 JOIN 中。感谢 Alex K 创建了一个很好的测试用例。
- en: '**[orm]**'
  id: totrans-2129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.expire() and related methods will not expire() unloaded deferred attributes.
    This prevents them from being needlessly loaded when the instance is refreshed.
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`session.expire()` 和相关方法将不会过期未加载的延迟属性。这样在刷新实例时就不会被不必要地加载。'
- en: '**[orm]**'
  id: totrans-2131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join()/outerjoin() will now properly join an aliased() construct to the
    existing left side, even if query.from_self() or query.select_from(someselectable)
    has been called.
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`query.join()/outerjoin()` 现在将正确地将一个 `aliased()` 构造加入到现有的左侧，即使已调用了 `query.from_self()`
    或 `query.select_from(someselectable)`。'
- en: 'References: [#1293](https://www.sqlalchemy.org/trac/ticket/1293)'
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1293](https://www.sqlalchemy.org/trac/ticket/1293)
- en: sql
  id: totrans-2134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Further fixes to the “percent signs and spaces in column/table
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了在列/表中的百分号和空格。
- en: names” functionality.
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: names” 功能。
- en: 'References: [#1284](https://www.sqlalchemy.org/trac/ticket/1284)'
  id: totrans-2138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1284](https://www.sqlalchemy.org/trac/ticket/1284)
- en: mssql
  id: totrans-2139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Restored convert_unicode handling. Results were being passed on through without
    conversion.
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 `convert_unicode` 处理。结果将不会转换而被传递。
- en: 'References: [#1291](https://www.sqlalchemy.org/trac/ticket/1291)'
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1291](https://www.sqlalchemy.org/trac/ticket/1291)
- en: '**[mssql]**'
  id: totrans-2143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Really fixing the decimal handling this time..
  id: totrans-2144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次真正修复了十进制处理问题。
- en: 'References: [#1282](https://www.sqlalchemy.org/trac/ticket/1282)'
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1282](https://www.sqlalchemy.org/trac/ticket/1282)
- en: '**[mssql] [Ticket:1289]**'
  id: totrans-2146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [Ticket:1289]**'
- en: Modified table reflection code to use only kwargs when constructing tables.
  id: totrans-2147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了表反射代码，只使用 kwargs 构建表。
- en: 0.5.1
  id: totrans-2148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.1
- en: 'Released: Sat Jan 17 2009'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Sat Jan 17 2009
- en: orm
  id: totrans-2150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed an internal join cache which could potentially leak memory when issuing
    query.join() repeatedly to ad-hoc selectables.
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个内部连接缓存，当重复发出 query.join() 到 ad-hoc 可选择时，可能会泄漏内存。
- en: '**[orm]**'
  id: totrans-2153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “clear()”, “save()”, “update()”, “save_or_update()” Session methods have
    been deprecated, replaced by “expunge_all()” and “add()”. “expunge_all()” has
    also been added to ScopedSession.
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “clear()”、“save()”、“update()”、“save_or_update()” Session 方法已被弃用，取而代之的是 “expunge_all()”
    和 “add()”。 “expunge_all()” 也已添加到 `ScopedSession` 中。
- en: '**[orm]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modernized the “no mapped table” exception and added a more explicit __table__/__tablename__
    exception to declarative.
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现代化了“无映射表”异常，并在声明中添加了更明确的 `__table__/__tablename__` 异常。
- en: '**[orm]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Concrete inheriting mappers now instrument attributes which are inherited from
    the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute
    that issues a descriptive error when accessed.
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具体继承的映射器现在会为从超类继承但未为具体映射器本身定义的属性实例化一个发出描述性错误的 InstrumentedAttribute。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-2159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-2160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new relation() keyword back_populates. This allows configuration of
    backreferences using explicit relations. This is required when creating bidirectional
    relations between a hierarchy of concrete mappers and another class.
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 relation() 关键字 back_populates。这允许使用显式关系配置反向引用。在具体映射器的层次结构和另一个类之间创建双向关系时，这是必需的。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)'
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)
- en: '**[orm]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Test coverage added for relation() objects specified on concrete mappers.
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为在具体映射器上指定的 relation() 对象添加了测试覆盖。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-2166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.from_self() as well as query.subquery() both disable the rendering of
    eager joins inside the subquery produced. The “disable all eager joins” feature
    is available publicly via a new query.enable_eagerloads() generative.
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.from_self() 以及 query.subquery() 都会禁用生成的子查询内部的 eager joins 渲染���通过新的 query.enable_eagerloads()
    生成器，公开提供“禁用所有 eager joins”功能。
- en: 'References: [#1276](https://www.sqlalchemy.org/trac/ticket/1276)'
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1276](https://www.sqlalchemy.org/trac/ticket/1276)
- en: '**[orm]**'
  id: totrans-2169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a rudimental series of set operations to Query that receive Query objects
    as arguments, including union(), union_all(), intersect(), except_(), intersect_all(),
    except_all(). See the API documentation for Query.union() for examples.
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Query 中添加了一系列基本的集合操作，接受 Query 对象作为参数，包括 union()、union_all()、intersect()、except_()、intersect_all()、except_all()。请参阅
    Query.union() 的 API 文档以获取示例。
- en: '**[orm]**'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug that prevented Query.join() and eagerloads from attaching to a query
    that selected from a union or aliased union.
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 Query.join() 和 eagerloads 附加到从联合或别名联合选择的查询的 bug。
- en: '**[orm]**'
  id: totrans-2173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A short documentation example added for bidirectional relations specified on
    concrete mappers.
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为在具体映射器上指定的双向关系添加了一个简短的文档示例。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-2175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-2176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mappers now instrument class attributes upon construction with the final InstrumentedAttribute
    object which remains persistent. The _CompileOnAttr/__getattribute__() methodology
    has been removed. The net effect is that Column-based mapped class attributes
    can now be used fully at the class level without invoking a mapper compilation
    operation, greatly simplifying typical usage patterns within declarative.
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在构造时，Mappers 会使用最终的 InstrumentedAttribute 对象对类属性进行实例化，该对象保持持久性。_CompileOnAttr/__getattribute__()
    方法论已被移除。其净效果是，基于 Column 的映射类属性现在可以在类级别完全使用，而不需要调用映射编译操作，大大简化了声明中的典型使用模式。
- en: 'References: [#1269](https://www.sqlalchemy.org/trac/ticket/1269)'
  id: totrans-2178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1269](https://www.sqlalchemy.org/trac/ticket/1269)
- en: '**[orm]**'
  id: totrans-2179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ColumnProperty (and front-end helpers such as `deferred`) no longer ignores
    unknown **keyword arguments.
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnProperty（以及前端辅助程序，如 `deferred`）不再忽略未知的关键字参数。
- en: '**[orm]**'
  id: totrans-2181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a bug with the unitofwork’s “row switch” mechanism, i.e. the conversion
    of INSERT/DELETE into an UPDATE, when combined with joined-table inheritance and
    an object which contained no defined values for the child table where an UPDATE
    with no SET clause would be rendered.
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 unitofwork 的“行切换”机制相关的 bug，即将 INSERT/DELETE 转换为 UPDATE，当与联接表继承和一个对象结合时，该对象对于子表没有定义值，将渲染一个没有
    SET 子句的 UPDATE。
- en: '**[orm]**'
  id: totrans-2183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using delete-orphan on a many-to-many relation is deprecated. This produces
    misleading or erroneous results since SQLA does not retrieve the full list of
    “parents” for m2m. To get delete-orphan behavior with an m2m table, use an explicit
    association class so that the individual association row is treated as a parent.
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多对多关系上使用 delete-orphan 已被弃用。这会产生误导性或错误的结果，因为 SQLA 不会检索 m2m 的完整“父级”列表。要在 m2m
    表上获得 delete-orphan 行为，请使用显式关联类，以便将单个关联行视为父级。
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1281](https://www.sqlalchemy.org/trac/ticket/1281)
- en: '**[orm]**'
  id: totrans-2186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: delete-orphan cascade always requires delete cascade. Specifying delete-orphan
    without delete now raises a deprecation warning.
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: delete-orphan 级联始终需要 delete 级联。指定 delete-orphan 而不删除现在会引发弃用警告。
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1281](https://www.sqlalchemy.org/trac/ticket/1281)
- en: sql
  id: totrans-2189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Improved the methodology to handling percent signs in column names from. Added
    more tests. MySQL and PostgreSQL dialects still do not issue correct CREATE TABLE
    statements for identifiers with percent signs in them.
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了处理列名中百分号的方法。增加了更多测试。MySQL 和 PostgreSQL 方言仍然无法正确发出带有百分号的标识符的 CREATE TABLE
    语句。
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  id: totrans-2192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1256](https://www.sqlalchemy.org/trac/ticket/1256)
- en: schema
  id: totrans-2193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-2194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Index now accepts column-oriented InstrumentedAttributes (i.e. column-based
    mapped class attributes) as column arguments.
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Index 现在接受基于列的 InstrumentedAttributes（即基于列的映射类属性）作为列参数。
- en: 'References: [#1214](https://www.sqlalchemy.org/trac/ticket/1214)'
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1214](https://www.sqlalchemy.org/trac/ticket/1214)
- en: '**[schema]**'
  id: totrans-2197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Column with no name (as in declarative) won’t raise a NoneType error when its
    string output is requested (such as in a stack trace).
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列没有名称（如在声明式中），当请求其字符串输出时不会引发 NoneType 错误（例如在堆栈跟踪中）。
- en: '**[schema]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Fixed bug when overriding a Column with a ForeignKey on a reflected table, where
    derived columns (i.e. the “virtual” columns of a select, etc.) would inadvertently
    call upon schema-level cleanup logic intended only for the original column.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射表上覆盖具有 ForeignKey 的列时的 bug，其中派生列（即 select 的“虚拟”列等）会无意中调用仅用于原始列的模式级清理逻辑。
- en: 'References: [#1278](https://www.sqlalchemy.org/trac/ticket/1278)'
  id: totrans-2201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1278](https://www.sqlalchemy.org/trac/ticket/1278)
- en: mysql
  id: totrans-2202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added the missing keywords from MySQL 4.1 so they get escaped properly.
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MySQL 4.1 中缺失的关键字，以便正确转义它们。
- en: mssql
  id: totrans-2205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected handling of large decimal values with more robust tests. Removed string
    manipulation on floats.
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更正了对大十进制值的处理，增加了更健壮的测试。移除了对浮点数的字符串操作。
- en: 'References: [#1280](https://www.sqlalchemy.org/trac/ticket/1280)'
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1280](https://www.sqlalchemy.org/trac/ticket/1280)
- en: '**[mssql]**'
  id: totrans-2209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Modified the do_begin handling in mssql to use the Cursor not the Connection
    so it is DBAPI compatible.
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 mssql 中的 do_begin 处理，使用 Cursor 而不是 Connection，以使其与 DBAPI 兼容。
- en: '**[mssql]**'
  id: totrans-2211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected SAVEPOINT support on adodbapi by changing the handling of savepoint_release,
    which is unsupported on mssql.
  id: totrans-2212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过更改对 savepoint_release 的处理方式，修正了 adodbapi 上的 SAVEPOINT 支持，因为 mssql 不支持。
- en: misc
  id: totrans-2213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Can now specify Column objects on subclasses which have no table of their own
    (i.e. use single table inheritance). The columns will be appended to the base
    table, but only mapped by the subclass.
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在没有自己表的子类上指定 Column 对象（即使用单一表继承）。这些列将附加到基本表，但仅由子类映射。
- en: '**[declarative]**'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: For both joined and single inheriting subclasses, the subclass will only map
    those columns which are already mapped on the superclass and those explicit on
    the subclass. Other columns that are present on the Table will be excluded from
    the mapping by default, which can be disabled by passing a blank exclude_properties
    collection to the __mapper_args__. This is so that single-inheriting classes which
    define their own columns are the only classes to map those columns. The effect
    is actually a more organized mapping than you’d normally get with explicit mapper()
    calls unless you set up the exclude_properties arguments explicitly.
  id: totrans-2217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于连接和单一继承子类，子类只会映射那些已在超类上映射的列以及子类上显式指定的列。默认情况下，表中存在的其他列将被排除在映射之外，可以通过将空的 exclude_properties
    集合传递给 __mapper_args__ 来禁用此功能。这样，定义自己列的单一继承类将是唯一映射这些列的类。实际效果比通常使用显式 mapper() 调用获得的映射更有组织性，除非您显式设置
    exclude_properties 参数。
- en: '**[declarative]**'
  id: totrans-2218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: It’s an error to add new Column objects to a declarative class that specified
    an existing table using __table__.
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向声明式类添加新的 Column 对象，而该类使用 __table__ 指定了现有表，这是一个错误。
- en: orm
  id: totrans-2220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Removed an internal join cache which could potentially leak memory when issuing
    query.join() repeatedly to ad-hoc selectables.
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了一个内部连接缓存，当对 ad-hoc 可选择对象重复调用 query.join() 时可能会泄漏内存。
- en: '**[orm]**'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: The “clear()”, “save()”, “update()”, “save_or_update()” Session methods have
    been deprecated, replaced by “expunge_all()” and “add()”. “expunge_all()” has
    also been added to ScopedSession.
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “clear()”、“save()”、“update()”、“save_or_update()” Session 方法已被弃用，被“expunge_all()”和“add()”取代。“expunge_all()”也已添加到ScopedSession。
- en: '**[orm]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Modernized the “no mapped table” exception and added a more explicit __table__/__tablename__
    exception to declarative.
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现代化了“no mapped table”异常，并在declarative中添加了一个更明确的__table__/__tablename__异常。
- en: '**[orm]**'
  id: totrans-2227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Concrete inheriting mappers now instrument attributes which are inherited from
    the superclass, but are not defined for the concrete mapper itself, with an InstrumentedAttribute
    that issues a descriptive error when accessed.
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，具体继承的映射器会对从超类继承的但对于具体映射器本身未定义的属性进行仪器化，使用一个发出描述性错误的InstrumentedAttribute当被访问时。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-2230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new relation() keyword back_populates. This allows configuration of
    backreferences using explicit relations. This is required when creating bidirectional
    relations between a hierarchy of concrete mappers and another class.
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的relation()关键字back_populates。这允许使用显式关系配置反向引用。在创建具体映射器层次结构和另一个类之间的双向关系时，这是必需的。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237), [#781](https://www.sqlalchemy.org/trac/ticket/781)'
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)，[#781](https://www.sqlalchemy.org/trac/ticket/781)
- en: '**[orm]**'
  id: totrans-2233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Test coverage added for relation() objects specified on concrete mappers.
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为在具体映射器上指定的relation()对象添加了测试覆盖。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-2236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.from_self() as well as query.subquery() both disable the rendering of
    eager joins inside the subquery produced. The “disable all eager joins” feature
    is available publicly via a new query.enable_eagerloads() generative.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.from_self()以及query.subquery()都会禁用生成的子查询内部的急切连接的渲染。通过新的query.enable_eagerloads()生成器，公开提供“禁用所有急切连接”的功能。
- en: 'References: [#1276](https://www.sqlalchemy.org/trac/ticket/1276)'
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1276](https://www.sqlalchemy.org/trac/ticket/1276)
- en: '**[orm]**'
  id: totrans-2239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a rudimental series of set operations to Query that receive Query objects
    as arguments, including union(), union_all(), intersect(), except_(), intersect_all(),
    except_all(). See the API documentation for Query.union() for examples.
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了一系列基本的集合操作，接受Query对象作为参数，包括union()、union_all()、intersect()、except_()、intersect_all()、except_all()。查看Query.union()的API文档以获取示例。
- en: '**[orm]**'
  id: totrans-2241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug that prevented Query.join() and eagerloads from attaching to a query
    that selected from a union or aliased union.
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了Query.join()和eagerloads附加到从联合或别名联合中选择的查询。
- en: '**[orm]**'
  id: totrans-2243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A short documentation example added for bidirectional relations specified on
    concrete mappers.
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为在具体映射器上指定的双向关系添加了一个简短的文档示例。
- en: 'References: [#1237](https://www.sqlalchemy.org/trac/ticket/1237)'
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1237](https://www.sqlalchemy.org/trac/ticket/1237)
- en: '**[orm]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mappers now instrument class attributes upon construction with the final InstrumentedAttribute
    object which remains persistent. The _CompileOnAttr/__getattribute__() methodology
    has been removed. The net effect is that Column-based mapped class attributes
    can now be used fully at the class level without invoking a mapper compilation
    operation, greatly simplifying typical usage patterns within declarative.
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，映射器在构造时会使用最终的InstrumentedAttribute对象对类属性进行仪器化，该对象保持持久。_CompileOnAttr/__getattribute__()方法论已被移除。其净效果是，基于列的映射类属性现在可以在类级别完全使用，而不需要调用映射器编译操作，大大简化了declarative中的典型使用模式。
- en: 'References: [#1269](https://www.sqlalchemy.org/trac/ticket/1269)'
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1269](https://www.sqlalchemy.org/trac/ticket/1269)
- en: '**[orm]**'
  id: totrans-2249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ColumnProperty (and front-end helpers such as `deferred`) no longer ignores
    unknown **keyword arguments.
  id: totrans-2250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnProperty（以及前端助手如`deferred`）不再忽略未知的关键字参数。
- en: '**[orm]**'
  id: totrans-2251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a bug with the unitofwork’s “row switch” mechanism, i.e. the conversion
    of INSERT/DELETE into an UPDATE, when combined with joined-table inheritance and
    an object which contained no defined values for the child table where an UPDATE
    with no SET clause would be rendered.
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与unitofwork的“行切换”机制的bug，即将INSERT/DELETE转换为UPDATE时，与联接表继承和一个不包含子表定义值的对象结合使用时，将渲染出一个没有SET子句的UPDATE。
- en: '**[orm]**'
  id: totrans-2253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Using delete-orphan on a many-to-many relation is deprecated. This produces
    misleading or erroneous results since SQLA does not retrieve the full list of
    “parents” for m2m. To get delete-orphan behavior with an m2m table, use an explicit
    association class so that the individual association row is treated as a parent.
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多对多关系上使用 delete-orphan 已被弃用。这会产生误导或错误的结果，因为 SQLA 不会检索 m2m 的“父级”完整列表。要在 m2m
    表上获得 delete-orphan 行为，请使用显式关联类，以便将单个关联行视为父级。
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1281](https://www.sqlalchemy.org/trac/ticket/1281)
- en: '**[orm]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: delete-orphan cascade always requires delete cascade. Specifying delete-orphan
    without delete now raises a deprecation warning.
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: delete-orphan 级联总是需要 delete 级联。指定 delete-orphan 而不指定 delete 现在会引发弃用警告。
- en: 'References: [#1281](https://www.sqlalchemy.org/trac/ticket/1281)'
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1281](https://www.sqlalchemy.org/trac/ticket/1281)
- en: sql
  id: totrans-2259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-2260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Improved the methodology to handling percent signs in column names from. Added
    more tests. MySQL and PostgreSQL dialects still do not issue correct CREATE TABLE
    statements for identifiers with percent signs in them.
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了处理列名中百分号的方法。添加了更多测试。MySQL 和 PostgreSQL 方言仍无法为其中带有百分号的标识符发出正确的 CREATE TABLE
    语句。
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1256](https://www.sqlalchemy.org/trac/ticket/1256)
- en: schema
  id: totrans-2263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-2264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Index now accepts column-oriented InstrumentedAttributes (i.e. column-based
    mapped class attributes) as column arguments.
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Index 现在接受基于列的 InstrumentedAttributes（即基于列的映射类属性）作为列参数。
- en: 'References: [#1214](https://www.sqlalchemy.org/trac/ticket/1214)'
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1214](https://www.sqlalchemy.org/trac/ticket/1214)
- en: '**[schema]**'
  id: totrans-2267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Column with no name (as in declarative) won’t raise a NoneType error when its
    string output is requested (such as in a stack trace).
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在没有名称的列（如在声明式中）请求其字符串输出时不会引发 NoneType 错误（例如在堆栈跟踪中）。
- en: '**[schema]**'
  id: totrans-2269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Fixed bug when overriding a Column with a ForeignKey on a reflected table, where
    derived columns (i.e. the “virtual” columns of a select, etc.) would inadvertently
    call upon schema-level cleanup logic intended only for the original column.
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射表上覆盖具有外键的列时的 bug，其中派生列（即 select 的“虚拟”列等）会无意中调用原始列专用的模式级清理逻辑。
- en: 'References: [#1278](https://www.sqlalchemy.org/trac/ticket/1278)'
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1278](https://www.sqlalchemy.org/trac/ticket/1278)
- en: mysql
  id: totrans-2272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added the missing keywords from MySQL 4.1 so they get escaped properly.
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了来自 MySQL 4.1 的缺失关键字，以便正确转义。
- en: mssql
  id: totrans-2275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected handling of large decimal values with more robust tests. Removed string
    manipulation on floats.
  id: totrans-2277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更正了对大十进制值的处理，增加了更健壮的测试。移除了对浮点数的字符串操作。
- en: 'References: [#1280](https://www.sqlalchemy.org/trac/ticket/1280)'
  id: totrans-2278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1280](https://www.sqlalchemy.org/trac/ticket/1280)
- en: '**[mssql]**'
  id: totrans-2279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Modified the do_begin handling in mssql to use the Cursor not the Connection
    so it is DBAPI compatible.
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了在 mssql 中处理 do_begin 的方法，使用 Cursor 而不是 Connection，以使其与 DBAPI 兼容。
- en: '**[mssql]**'
  id: totrans-2281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected SAVEPOINT support on adodbapi by changing the handling of savepoint_release,
    which is unsupported on mssql.
  id: totrans-2282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过更改 savepoint_release 的处理方式来更正 adodbapi 上的 SAVEPOINT 支持，因为 mssql 不支持该功能。
- en: misc
  id: totrans-2283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-2284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: Can now specify Column objects on subclasses which have no table of their own
    (i.e. use single table inheritance). The columns will be appended to the base
    table, but only mapped by the subclass.
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在没有自己表的子类上指定 Column 对象（即使用单表继承）。这些列将附加到基本表，但只由子类映射。
- en: '**[declarative]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: For both joined and single inheriting subclasses, the subclass will only map
    those columns which are already mapped on the superclass and those explicit on
    the subclass. Other columns that are present on the Table will be excluded from
    the mapping by default, which can be disabled by passing a blank exclude_properties
    collection to the __mapper_args__. This is so that single-inheriting classes which
    define their own columns are the only classes to map those columns. The effect
    is actually a more organized mapping than you’d normally get with explicit mapper()
    calls unless you set up the exclude_properties arguments explicitly.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于连接和单一继承子类，子类只会映射那些已在超类上映射的列以及子类上显式指定的列。表中存在的其他列默认将被排除在映射之外，可以通过将空的 exclude_properties
    集合传递给 __mapper_args__ 来禁用此功能。这样，定义自己列的单一继承类将是唯一映射这些列的类。实际效果比通常使用显式 mapper() 调用获得的映射更有组织性，除非你显式设置了
    exclude_properties 参数。
- en: '**[declarative]**'
  id: totrans-2288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: It’s an error to add new Column objects to a declarative class that specified
    an existing table using __table__.
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向指定了现有表使用__table__的声明类添加新的Column对象是错误的。
- en: 0.5.0
  id: totrans-2290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0
- en: 'Released: Tue Jan 06 2009'
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2009年1月6日星期二
- en: general
  id: totrans-2292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Documentation has been converted to Sphinx. In particular, the generated API
    documentation has been constructed into a full blown “API Reference” section which
    organizes editorial documentation combined with generated docstrings. Cross linking
    between sections and API docs are vastly improved, a javascript-powered search
    feature is provided, and a full index of all classes, functions and members is
    provided.
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档已转换为Sphinx。特别是，生成的API文档已构建为完整的“API参考”部分，其中组织了编辑文档和生成的文档字符串。各个部分和API文档之间的交叉链接得到了极大改善，提供了一个基于JavaScript的搜索功能，并提供了所有类、函数和成员的完整索引。
- en: '**[general]**'
  id: totrans-2295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: setup.py now imports setuptools only optionally. If not present, distutils is
    used. The new “pip” installer is recommended over easy_install as it installs
    in a more simplified way.
  id: totrans-2296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'setup.py现在仅在可选情况下导入setuptools。如果不存在，将使用distutils。新的“pip”安装程序建议使用easy_install，因为它以更简化的方式安装。 '
- en: '**[general]**'
  id: totrans-2297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: added an extremely basic illustration of a PostGIS integration to the examples
    folder.
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在示例文件夹中添加了一个极其基本的PostGIS集成示例。
- en: orm
  id: totrans-2299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.with_polymorphic() now accepts a third argument “discriminator” which
    will replace the value of mapper.polymorphic_on for that query. Mappers themselves
    no longer require polymorphic_on to be set, even if the mapper has a polymorphic_identity.
    When not set, the mapper will load non-polymorphically by default. Together, these
    two features allow a non-polymorphic concrete inheritance setup to use polymorphic
    loading on a per-query basis, since concrete setups are prone to many issues when
    used polymorphically in all cases.
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.with_polymorphic()现在接受第三个参数“鉴别器”，该参数将替换该查询的mapper.polymorphic_on的值。即使映射器具有多态标识，也不再需要设置多态标识。当未设置时，默认情况下，映射器将以非多态方式加载。这两个特性共同允许非多态具体继承设置在每个查询基础上使用多态加载，因为在所有情况下使用多态的具体设置容易出现许多问题。
- en: '**[orm]**'
  id: totrans-2302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dynamic_loader accepts a query_class= to customize the Query classes used for
    both the dynamic collection and the queries built from it.
  id: totrans-2303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dynamic_loader接受query_class=来自定义用于动态集合和从中构建的查询的Query类。
- en: '**[orm]**'
  id: totrans-2304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() accepts None which will remove any pending order_by state from
    the query, as well as cancel out any mapper/relation configured ordering. This
    is primarily useful for overriding the ordering specified on a dynamic_loader().
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()接受None，这将从查询中删除任何待定的order_by状态，同时取消任何映射器/关系配置的排序。这主要用于覆盖在dynamic_loader()上指定的排序。
- en: 'References: [#1079](https://www.sqlalchemy.org/trac/ticket/1079)'
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1079](https://www.sqlalchemy.org/trac/ticket/1079)
- en: '**[orm]**'
  id: totrans-2307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Exceptions raised during compile_mappers() are now preserved to provide “sticky
    behavior” - if a hasattr() call on a pre-compiled mapped attribute triggers a
    failing compile and suppresses the exception, subsequent compilation is blocked
    and the exception will be reiterated on the next compile() call. This issue occurs
    frequently when using declarative.
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在compile_mappers()期间引发的异常现在被保留以提供“粘性行为” - 如果对预编译映射属性的hasattr()调用触发失败的编译并抑制异常，则后续编译将被阻止，并且异常将在下一次compile()调用时被重复。在使用declarative时，这个问题经常发生。
- en: '**[orm]**'
  id: totrans-2309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: property.of_type() is now recognized on a single-table inheriting target, when
    used in the context of prop.of_type(..).any()/has(), as well as query.join(prop.of_type(…)).
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: property.of_type()现在在单表继承目标上被识别，当在prop.of_type(..).any()/has()的上下文中使用时，以及query.join(prop.of_type(…))。
- en: '**[orm]**'
  id: totrans-2311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join() raises an error when the target of the join doesn’t match the property-based
    attribute - while it’s unlikely anyone is doing this, the SQLAlchemy author was
    guilty of this particular loosey-goosey behavior.
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当连接的目标与基于属性的属性不匹配时，query.join()会引发错误 - 虽然不太可能有人这样做，但SQLAlchemy的作者曾犯过这种特定的松散行为。
- en: '**[orm]**'
  id: totrans-2313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug when using weak_instance_map=False where modified events would not
    be intercepted for a flush().
  id: totrans-2314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用weak_instance_map=False时，修改事件不会被拦截以进行flush()的bug。
- en: 'References: [#1272](https://www.sqlalchemy.org/trac/ticket/1272)'
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1272](https://www.sqlalchemy.org/trac/ticket/1272)
- en: '**[orm]**'
  id: totrans-2316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed some deep “column correspondence” issues which could impact a Query made
    against a selectable containing multiple versions of the same table, as well as
    unions and similar which contained the same table columns in different column
    positions at different levels.
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些可能影响针对包含同一表的多个版本的可选择项进行的查询的深层“列对应”问题，以及包含不同列位置的相同表列的联合等问题，这些问题在不同级别上。
- en: 'References: [#1268](https://www.sqlalchemy.org/trac/ticket/1268)'
  id: totrans-2318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1268](https://www.sqlalchemy.org/trac/ticket/1268)
- en: '**[orm]**'
  id: totrans-2319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Custom comparator classes used in conjunction with column_property(), relation()
    etc. can define new comparison methods on the Comparator, which will become available
    via __getattr__() on the InstrumentedAttribute. In the case of synonym() or comparable_property(),
    attributes are resolved first on the user-defined descriptor, then on the user-defined
    comparator.
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与column_property()，relation()等一起使用的自定义比较器类可以在比较器上定义新的比较方法，这些方法将通过InstrumentedAttribute上的__getattr__()变得可用。在synonym()或comparable_property()的情况下，首先在用户定义的描述符上解析属性，然后在用户定义的比较器上解析属性。
- en: '**[orm]**'
  id: totrans-2321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added ScopedSession.is_active accessor.
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了ScopedSession.is_active访问器。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: '**[orm]**'
  id: totrans-2324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Can pass mapped attributes and column objects as keys to query.update({}).
  id: totrans-2325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将映射属性和列对象作为键传递给query.update({})。
- en: 'References: [#1262](https://www.sqlalchemy.org/trac/ticket/1262)'
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1262](https://www.sqlalchemy.org/trac/ticket/1262)
- en: '**[orm]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped attributes passed to the values() of an expression level insert() or
    update() will use the keys of the mapped columns, not that of the mapped attribute.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给表达式级别insert()或update()的values()的映射属性将使用映射列的键，而不是映射属性的键��
- en: '**[orm]**'
  id: totrans-2329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Corrected problem with Query.delete() and Query.update() not working properly
    with bind parameters.
  id: totrans-2330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了Query.delete()和Query.update()与绑定参数不正常工作的问题。
- en: 'References: [#1242](https://www.sqlalchemy.org/trac/ticket/1242)'
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1242](https://www.sqlalchemy.org/trac/ticket/1242)
- en: '**[orm]**'
  id: totrans-2332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from(), from_statement() ensure that the given argument is a FromClause,
    or Text/Select/Union, respectively.
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from()，from_statement()确保给定的参数是FromClause，或Text/Select/Union，分别。
- en: '**[orm]**'
  id: totrans-2334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query() can be passed a “composite” attribute as a column expression and it
    will be expanded. Somewhat related to.
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query()可以将“composite”属性作为列表达式传递，并将其展开。与某种程度相关。
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  id: totrans-2336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1253](https://www.sqlalchemy.org/trac/ticket/1253)
- en: '**[orm]**'
  id: totrans-2337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query() is a little more robust when passed various column expressions such
    as strings, clauselists, text() constructs (which may mean it just raises an error
    more nicely).
  id: totrans-2338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递各种列表达式（如字符串，clauselists，text()构造）时，Query()更加健壮（这可能意味着它只是更好地引发错误）。
- en: '**[orm]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: first() works as expected with Query.from_statement().
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: first()与Query.from_statement()一起按预期工作。
- en: '**[orm]**'
  id: totrans-2341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug introduced in 0.5rc4 involving eager loading not functioning for properties
    which were added to a mapper post-compile using add_property() or equivalent.
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5rc4中引入的有关延迟加载对使用add_property()或等效方法在编译后向映射器添加属性的属性不起作用的错误。
- en: '**[orm]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where many-to-many relation() with viewonly=True would not correctly
    reference the link between secondary->remote.
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当viewonly=True时，许多对多关系（many-to-many relation()）无法正确引用secondary->remote之间链接的错误。
- en: '**[orm]**'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Duplicate items in a list-based collection will be maintained when issuing INSERTs
    to a “secondary” table in a many-to-many relation. Assuming the m2m table has
    a unique or primary key constraint on it, this will raise the expected constraint
    violation instead of silently dropping the duplicate entries. Note that the old
    behavior remains for a one-to-many relation since collection entries in that case
    don’t result in INSERT statements and SQLA doesn’t manually police collections.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在向“secondary”表中的“many-to-many”关系发出INSERT时，列表型集合中的重复项将被保留。假设m2m表上有唯一或主键约束，这将引发预期的约束违规，而不是悄悄删除重复条目。请注意，对于一对多关系，旧行为仍然保留，因为在这种情况下，集合条目不会导致INSERT语句，并且SQLA不会手动监视集合。
- en: 'References: [#1232](https://www.sqlalchemy.org/trac/ticket/1232)'
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1232](https://www.sqlalchemy.org/trac/ticket/1232)
- en: '**[orm]**'
  id: totrans-2348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.add_column() can accept FromClause objects in the same manner as session.query()
    can.
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.add_column()可以像session.query()一样接受FromClause对象。
- en: '**[orm]**'
  id: totrans-2350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Comparison of many-to-one relation to NULL is properly converted to IS NOT NULL
    based on not_().
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将对多对一关系的比较与NULL正确转换为基于not_()的IS NOT NULL。
- en: '**[orm]**'
  id: totrans-2352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Extra checks added to ensure explicit primaryjoin/secondaryjoin are ClauseElement
    instances, to prevent more confusing errors later on.
  id: totrans-2353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加额外检查以确保显式的primaryjoin/secondaryjoin是ClauseElement实例，以防止后续出现更令人困惑的错误。
- en: 'References: [#1087](https://www.sqlalchemy.org/trac/ticket/1087)'
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1087](https://www.sqlalchemy.org/trac/ticket/1087)
- en: '**[orm]**'
  id: totrans-2355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved mapper() check for non-class classes.
  id: totrans-2356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对非类类的mapper()检查。
- en: 'References: [#1236](https://www.sqlalchemy.org/trac/ticket/1236)'
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1236](https://www.sqlalchemy.org/trac/ticket/1236)
- en: '**[orm]**'
  id: totrans-2358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: comparator_factory argument is now documented and supported by all MapperProperty
    types, including column_property(), relation(), backref(), and synonym().
  id: totrans-2359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: comparator_factory参数现在已记录并受到所有MapperProperty类型的支持，包括column_property()、relation()、backref()和synonym()。
- en: 'References: [#5051](https://www.sqlalchemy.org/trac/ticket/5051)'
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5051](https://www.sqlalchemy.org/trac/ticket/5051)
- en: '**[orm]**'
  id: totrans-2361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Changed the name of PropertyLoader to RelationProperty, to be consistent with
    all the other names. PropertyLoader is still present as a synonym.
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将PropertyLoader的名称更改为RelationProperty，以与所有其他名称保持一致。PropertyLoader仍然存在作为同义词。
- en: '**[orm]**'
  id: totrans-2363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed “double iter()” call causing bus errors in shard API, removed errant result.close()
    left over from the 0.4 version.
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在shard API中导致总线错误的“双iter()”调用，删除了0.4版本中遗留的错误result.close()。
- en: 'References: [#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)'
  id: totrans-2365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)
- en: '**[orm]**'
  id: totrans-2366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: made Session.merge cascades not trigger autoflush. Fixes merged instances getting
    prematurely inserted with missing values.
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使Session.merge级联不触发自动刷新。修复了合并实例过早插入丢失值的问题。
- en: '**[orm]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Two fixes to help prevent out-of-band columns from being rendered in polymorphic_union
    inheritance scenarios (which then causes extra tables to be rendered in the FROM
    clause causing cartesian products):'
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了防止在多态联合继承场景中渲染出现额外列（导致在FROM子句中渲染额外表，导致笛卡尔积）的两个修复：
- en: improvements to “column adaption” for a->b->c inheritance situations to better
    locate columns that are related to one another via multiple levels of indirection,
    rather than rendering the non-adapted column.
  id: totrans-2370
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于a->b->c继承情况的“列适应”进行了改进，以更好地定位通过多级间接关系相关的列，而不是呈现未适应的列。
- en: ''
  id: totrans-2371
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2372
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the “polymorphic discriminator” column is only rendered for the actual mapper
    being queried against. The column won’t be “pulled in” from a subclass or superclass
    mapper since it’s not needed.
  id: totrans-2373
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “多态鉴别器”列仅针对实际查询的mapper进行呈现。该列不会从子类或超类mapper中“拉入”，因为这是不需要的。
- en: '**[orm]**'
  id: totrans-2374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shard_id argument on ShardedSession.execute().
  id: totrans-2375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ShardedSession.execute()中的shard_id参数。
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1072](https://www.sqlalchemy.org/trac/ticket/1072)
- en: sql
  id: totrans-2377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: RowProxy objects can be used in place of dictionary arguments sent to connection.execute()
    and friends.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy对象可以用于替代发送给connection.execute()和其它函数的字典参数。
- en: 'References: [#935](https://www.sqlalchemy.org/trac/ticket/935)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#935](https://www.sqlalchemy.org/trac/ticket/935)
- en: '**[sql]**'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Columns can again contain percent signs within their names.
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列名中再次可以包含百分号。
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1256](https://www.sqlalchemy.org/trac/ticket/1256)
- en: '**[sql]**'
  id: totrans-2384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: sqlalchemy.sql.expression.Function is now a public class. It can be subclassed
    to provide user-defined SQL functions in an imperative style, including with pre-established
    behaviors. The postgis.py example illustrates one usage of this.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.sql.expression.Function现在是一个公共类。可以对其进行子类化，以提供用户定义的SQL函数，采用命令式风格，包括预先建立的行为。postgis.py示例说明了其中一种用法。
- en: '**[sql]**'
  id: totrans-2386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: PickleType now favors == comparison by default, if the incoming object (such
    as a dict) implements __eq__(). If the object does not implement __eq__() and
    mutable=True, a deprecation warning is raised.
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType现在默认偏爱==比较，如果传入对象（如dict）实现了__eq__()。如果对象没有实现__eq__()并且mutable=True，则会引发弃用警告。
- en: '**[sql]**'
  id: totrans-2388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed the import weirdness in sqlalchemy.sql to not export __names__.
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sqlalchemy.sql中导出__names__的奇怪问题。
- en: 'References: [#1215](https://www.sqlalchemy.org/trac/ticket/1215)'
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1215](https://www.sqlalchemy.org/trac/ticket/1215)
- en: '**[sql]**'
  id: totrans-2391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Using the same ForeignKey object repeatedly raises an error instead of silently
    failing later.
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多次使用相同的ForeignKey对象会引发错误，而不是在稍后默默失败。
- en: 'References: [#1238](https://www.sqlalchemy.org/trac/ticket/1238)'
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1238](https://www.sqlalchemy.org/trac/ticket/1238)
- en: '**[sql]**'
  id: totrans-2394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added NotImplementedError for params() method on Insert/Update/Delete constructs.
    These items currently don’t support this functionality, which also would be a
    little misleading compared to values().
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Insert/Update/Delete 构造的 params() 方法添加了 NotImplementedError。这些项目目前不支持此功能，这也会与
    values() 相比有点误导。
- en: '**[sql]**'
  id: totrans-2396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Reflected foreign keys will properly locate their referenced column, even if
    the column was given a “key” attribute different from the reflected name. This
    is achieved via a new flag on ForeignKey/ForeignKeyConstraint called “link_to_name”,
    if True means the given name is the referred-to column’s name, not its assigned
    key.
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射外键将正确定位其引用的列，即使该列具有与反射名称不同的“key”属性。这是通过 ForeignKey/ForeignKeyConstraint 上的一个名为“link_to_name”的新标志实现的，如果为
    True，则表示给定名称是被引用列的名称，而不是其分配的键。
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  id: totrans-2398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#650](https://www.sqlalchemy.org/trac/ticket/650)
- en: '**[sql]**'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select() can accept a ClauseList as a column in the same way as a Table or other
    selectable and the interior expressions will be used as column elements.
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 可以接受 ClauseList 作为列，方式与 Table 或其他可选择的方式相同，内部表达式将用作列元素。
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1253](https://www.sqlalchemy.org/trac/ticket/1253)
- en: '**[sql]**'
  id: totrans-2402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “passive” flag on session.is_modified() is correctly propagated to the attribute
    manager.
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.is_modified() 上的“passive”标志正确传播到属性管理器。
- en: '**[sql]**'
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: union() and union_all() will not whack any order_by() that has been applied
    to the select()s inside. If you union() a select() with order_by() (presumably
    to support LIMIT/OFFSET), you should also call self_group() on it to apply parenthesis.
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: union() 和 union_all() 不会破坏应用于 select() 内部的 order_by()。如果您将带有 order_by() 的 select()
    进行 union()（可能是为了支持 LIMIT/OFFSET），您还应该对其调用 self_group() 以应用括号。
- en: mysql
  id: totrans-2406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 text() 构造中的“%”符号会自动转义为“%%”。由于这种变化具有向后不兼容的性质，如果在字符串中检测到‘%%’，则会发出警告。
- en: '**[mysql]**'
  id: totrans-2409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug in exception raise when FK columns not present during reflection.
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射期间未出现 FK 列时引发异常的错误。
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  id: totrans-2411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1241](https://www.sqlalchemy.org/trac/ticket/1241)
- en: '**[mysql]**'
  id: totrans-2412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug involving reflection of a remote-schema table with a foreign key ref
    to another table in that schema.
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射远程模式表时出现的问题，该表具有对该模式中另一表的外键引用。
- en: sqlite
  id: totrans-2414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Table reflection now stores the actual DefaultClause value for the column.
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在表反射会存储列的实际 DefaultClause ���。
- en: 'References: [#1266](https://www.sqlalchemy.org/trac/ticket/1266)'
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1266](https://www.sqlalchemy.org/trac/ticket/1266)
- en: '**[sqlite]**'
  id: totrans-2418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: bugfixes, behavioral changes
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了错误，行为更改
- en: mssql
  id: totrans-2420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in a new MSGenericBinary type. This maps to the Binary type so it can
    implement the specialized behavior of treating length specified types as fixed-width
    Binary types and non-length types as an unbound variable length Binary type.
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 MSGenericBinary 类型。这将映射到 Binary 类型，以便实现将长度指定类型视为固定宽度的 Binary 类型，而非长度类型视为无限长度的
    Binary 类型的专门行为。
- en: '**[mssql]**'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added in new types: MSVarBinary and MSImage.'
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新类型：MSVarBinary 和 MSImage。
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1249](https://www.sqlalchemy.org/trac/ticket/1249)
- en: '**[mssql]**'
  id: totrans-2426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in the MSReal, MSNText, MSSmallDateTime, MSTime, MSDateTimeOffset, and
    MSDateTime2 types
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 MSReal、MSNText、MSSmallDateTime、MSTime、MSDateTimeOffset 和 MSDateTime2 类型
- en: '**[mssql]**'
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Refactored the Date/Time types. The `smalldatetime` data type no longer truncates
    to a date only, and will now be mapped to the MSSmallDateTime type.
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了日期/时间类型。`smalldatetime` 数据类型不再截断为仅日期，现在将映射到 MSSmallDateTime 类型。
- en: 'References: [#1254](https://www.sqlalchemy.org/trac/ticket/1254)'
  id: totrans-2430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1254](https://www.sqlalchemy.org/trac/ticket/1254)
- en: '**[mssql]**'
  id: totrans-2431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected an issue with Numerics to accept an int.
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了接受 int 的 Numerics 的问题。
- en: '**[mssql]**'
  id: totrans-2433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Mapped `char_length` to the `LEN()` function.
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `char_length` 映射到 `LEN()` 函数。
- en: '**[mssql]**'
  id: totrans-2435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If an `INSERT` includes a subselect the `INSERT` is converted from an `INSERT
    INTO VALUES` construct to a `INSERT INTO SELECT` construct.
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `INSERT` 包含子选择，则将 `INSERT` 从 `INSERT INTO VALUES` 构造转换为 `INSERT INTO SELECT`
    构造。
- en: '**[mssql]**'
  id: totrans-2437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If the column is part of a `primary_key` it will be `NOT NULL` since MSSQL doesn’t
    allow `NULL` in primary_key columns.
  id: totrans-2438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果列是 `primary_key` 的一部分，则它将是 `NOT NULL`，因为 MSSQL 不允许在主键列中使用 `NULL`。
- en: '**[mssql]**'
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: '`MSBinary` now returns a `BINARY` instead of an `IMAGE`. This is a backwards
    incompatible change in that `BINARY` is a fixed length data type whereas `IMAGE`
    is a variable length data type.'
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MSBinary`现在返回`BINARY`而不是`IMAGE`。这是一个不兼容的变化，因为`BINARY`是一个固定长度数据类型，而`IMAGE`是一个可变长度数据类型。'
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1249](https://www.sqlalchemy.org/trac/ticket/1249)
- en: '**[mssql]**'
  id: totrans-2442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: '`get_default_schema_name` is now reflected from the database based on the user’s
    default schema. This only works with MSSQL 2005 and later.'
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get_default_schema_name`现在根据用户的默认模式从数据库中反映��这仅适用于MSSQL 2005及更高版本。'
- en: 'References: [#1258](https://www.sqlalchemy.org/trac/ticket/1258)'
  id: totrans-2444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1258](https://www.sqlalchemy.org/trac/ticket/1258)
- en: '**[mssql]**'
  id: totrans-2445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added collation support through the use of a new collation argument. This is
    supported on the following types: char, nchar, varchar, nvarchar, text, ntext.'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用新的collation参数添加了排序规则支持。此功能支持以下类型：char，nchar，varchar，nvarchar，text，ntext。
- en: 'References: [#1248](https://www.sqlalchemy.org/trac/ticket/1248)'
  id: totrans-2447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1248](https://www.sqlalchemy.org/trac/ticket/1248)
- en: '**[mssql]**'
  id: totrans-2448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changes to the connection string parameters favor DSN as the default specification
    for pyodbc. See the mssql.py docstring for detailed usage instructions.
  id: totrans-2449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对连接字符串参数的更改支持DSN作为pyodbc的默认规范。有关详细使用说明，请参阅mssql.py文档字符串。
- en: '**[mssql]**'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added experimental support of savepoints. It currently does not work fully with
    sessions.
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对保存点的实验性支持。目前与会话不完全兼容。
- en: '**[mssql]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Support for three levels of column nullability: NULL, NOT NULL, and the database’s
    configured default. The default Column configuration (nullable=True) will now
    generate NULL in the DDL. Previously no specification was emitted and the database
    default would take effect (usually NULL, but not always). To explicitly request
    the database default, configure columns with nullable=None and no specification
    will be emitted in DDL. This is backwards incompatible behavior.'
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持三种列空值性质的级别：NULL，NOT NULL和数据库配置的默认值。默认的列配置（nullable=True）现在将在DDL中生成NULL。以前没有发出规范，数据库默认值会生效（通常为NULL，但并非总是）。要显式请求数据库默认值，请使用nullable=None配置列，DDL中将不会发出规范。这是不兼容的行为。
- en: 'References: [#1243](https://www.sqlalchemy.org/trac/ticket/1243)'
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1243](https://www.sqlalchemy.org/trac/ticket/1243)
- en: oracle
  id: totrans-2455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Adjusted the format of create_xid() to repair two-phase commit. We now have
    field reports of Oracle two-phase commit working properly with this change.
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了create_xid()的格式以修复两阶段提交。我们现在有关于Oracle两阶段提交正常工作的现场报告。
- en: '**[oracle]**'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added OracleNVarchar type, produces NVARCHAR2, and also subclasses Unicode so
    that convert_unicode=True by default. NVARCHAR2 reflects into this type automatically
    so these columns pass unicode on a reflected table with no explicit convert_unicode=True
    flags.
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了OracleNVarchar类型，生成NVARCHAR2，并且默认情况下也继承Unicode，因此convert_unicode=True。NVARCHAR2会自动反映到这种类型，因此这些列在没有显式convert_unicode=True标志的反射表上传递unicode。
- en: 'References: [#1233](https://www.sqlalchemy.org/trac/ticket/1233)'
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1233](https://www.sqlalchemy.org/trac/ticket/1233)
- en: '**[oracle]**'
  id: totrans-2461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了某些类型的out参数被接收；非常感谢wwu.edu上的huddlej！
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1265](https://www.sqlalchemy.org/trac/ticket/1265)
- en: misc
  id: totrans-2464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[dialect]**'
  id: totrans-2465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect]**'
- en: Added a new description_encoding attribute on the dialect that is used for encoding
    the column name when processing the metadata. This usually defaults to utf-8.
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在dialect上添加了一个新的description_encoding属性，用于在处理元数据时对列名进行编码。通常默认为utf-8。
- en: '**[engine/pool]**'
  id: totrans-2467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate()检查关闭状态以避免属性错误。
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1246](https://www.sqlalchemy.org/trac/ticket/1246)
- en: '**[engine/pool]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: NullPool supports reconnect on failure behavior.
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NullPool支持失败时重新连接的行为。
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1094](https://www.sqlalchemy.org/trac/ticket/1094)
- en: '**[engine/pool]**'
  id: totrans-2473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Added a mutex for the initial pool creation when using pool.manage(dbapi). This
    prevents a minor case of “dogpile” behavior which would otherwise occur upon a
    heavy load startup.
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pool.manage(dbapi)时为初始池创建添加了互斥锁。这可以防止在启动时出现一种轻微的“堆积”行为。
- en: 'References: [#799](https://www.sqlalchemy.org/trac/ticket/799)'
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#799](https://www.sqlalchemy.org/trac/ticket/799)
- en: '**[engine/pool]**'
  id: totrans-2476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: _execute_clauseelement() goes back to being a private method. Subclassing Connection
    is not needed now that ConnectionProxy is available.
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _execute_clauseelement()重新成为私有方法。现在有了ConnectionProxy，不再需要对Connection进行子类化。
- en: '**[documentation]**'
  id: totrans-2478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Tickets.
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Tickets.
- en: 'References: [#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)'
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)
- en: '**[documentation]**'
  id: totrans-2481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added note about create_session() defaults.
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关于create_session()默认值的说明。
- en: '**[documentation]**'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added section about metadata.reflect().
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关于metadata.reflect()的部分。
- en: '**[documentation]**'
  id: totrans-2485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Updated TypeDecorator section.
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了TypeDecorator部分。
- en: '**[documentation]**'
  id: totrans-2487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Rewrote the “threadlocal” strategy section of the docs due to recent confusion
    over this feature.
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于最近对这一功能的混淆，重写了文档中关于“threadlocal”策略的部分。
- en: '**[documentation]**'
  id: totrans-2489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Removed badly out of date ‘polymorphic_fetch’ and ‘select_table’ docs from inheritance,
    reworked the second half of “joined table inheritance”.
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从继承中删除了非常过时的‘polymorphic_fetch’和‘select_table’文档，重新制作了“联接表继承”的后半部分。
- en: '**[documentation]**'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented comparator_factory kwarg, added new doc section “Custom Comparators”.
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录了comparator_factory关键字参数，添加了新的文档部分“自定义比较器”。
- en: '**[postgres]**'
  id: totrans-2493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在text()构造中的“%”符号会自动转义为“%%”。由于这种变化的不兼容性，如果在字符串中检测到‘%%’，则会发出警告。
- en: 'References: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1267](https://www.sqlalchemy.org/trac/ticket/1267)
- en: '**[postgres]**'
  id: totrans-2496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Calling alias.execute() in conjunction with server_side_cursors won’t raise
    AttributeError.
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用server_side_cursors时，调用alias.execute()不会引发AttributeError。
- en: '**[postgres]**'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added Index reflection support to PostgreSQL, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL的索引反射支持，使用了我们长期忽视的一个很棒的补丁，由Ken Kuhlman提交。
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#714](https://www.sqlalchemy.org/trac/ticket/714)
- en: '**[associationproxy]**'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[associationproxy]**'
- en: The association proxy properties are make themselves available at the class
    level, e.g. MyClass.aproxy. Previously this evaluated to None.
  id: totrans-2502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理属性现在在类级别上可用，例如MyClass.aproxy。以前这会评估为None。
- en: '**[declarative]**'
  id: totrans-2503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: The full list of arguments accepted as string by backref() includes ‘primaryjoin’,
    ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’, ‘remote_side’, ‘order_by’.
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: backref()接受的作为字符串的参数完整列表包括‘primaryjoin’, ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’,
    ‘remote_side’, ‘order_by’。
- en: general
  id: totrans-2505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: Documentation has been converted to Sphinx. In particular, the generated API
    documentation has been constructed into a full blown “API Reference” section which
    organizes editorial documentation combined with generated docstrings. Cross linking
    between sections and API docs are vastly improved, a javascript-powered search
    feature is provided, and a full index of all classes, functions and members is
    provided.
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档已转换为Sphinx。特别是生成的API文档已构建为完整的“API参考”部分，将编辑文档与生成的文档字符串组合在一起。各个部分和API文档之间的交叉链接得到了极大改善，提供了一个基于JavaScript的搜索功能，并提供了所有类、函数和成员的完整索引。
- en: '**[general]**'
  id: totrans-2508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: setup.py now imports setuptools only optionally. If not present, distutils is
    used. The new “pip” installer is recommended over easy_install as it installs
    in a more simplified way.
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setup.py现在只是可选地导入setuptools。如果不存在，将使用distutils。新的“pip”安装程序建议使用easy_install，因为它以更简化的方式安装。
- en: '**[general]**'
  id: totrans-2510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: added an extremely basic illustration of a PostGIS integration to the examples
    folder.
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在示例文件夹中添加了一个极其基本的PostGIS集成示例。
- en: orm
  id: totrans-2512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.with_polymorphic() now accepts a third argument “discriminator” which
    will replace the value of mapper.polymorphic_on for that query. Mappers themselves
    no longer require polymorphic_on to be set, even if the mapper has a polymorphic_identity.
    When not set, the mapper will load non-polymorphically by default. Together, these
    two features allow a non-polymorphic concrete inheritance setup to use polymorphic
    loading on a per-query basis, since concrete setups are prone to many issues when
    used polymorphically in all cases.
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.with_polymorphic()现在接受第三个参数“discriminator”，该参数将替换该查询的mapper.polymorphic_on的值。即使mapper具有polymorphic_identity，也不再需要设置mappers的polymorphic_on。当未设置时，默认情况下，mapper将以非多态方式加载。这两个功能共同允许非多态具体继承设置在每个查询基础上使用多态加载，因为在所有情况下使用多态的具体设置容易出现许多问题。
- en: '**[orm]**'
  id: totrans-2515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: dynamic_loader accepts a query_class= to customize the Query classes used for
    both the dynamic collection and the queries built from it.
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dynamic_loader接受query_class=来自定义用于动态集合和从中构建的查询的Query类。
- en: '**[orm]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by() accepts None which will remove any pending order_by state from
    the query, as well as cancel out any mapper/relation configured ordering. This
    is primarily useful for overriding the ordering specified on a dynamic_loader().
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by()接受None，这将从查询中删除任何待定的order_by状态，并取消任何映射器/关系配置的排序。这主要用于覆盖在dynamic_loader()上指定的排序。
- en: 'References: [#1079](https://www.sqlalchemy.org/trac/ticket/1079)'
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1079](https://www.sqlalchemy.org/trac/ticket/1079)
- en: '**[orm]**'
  id: totrans-2520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Exceptions raised during compile_mappers() are now preserved to provide “sticky
    behavior” - if a hasattr() call on a pre-compiled mapped attribute triggers a
    failing compile and suppresses the exception, subsequent compilation is blocked
    and the exception will be reiterated on the next compile() call. This issue occurs
    frequently when using declarative.
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在compile_mappers()期间引发的异常现在被保留以提供“粘性行为” - 如果对预编译映射属性的hasattr()调用触发失败的编译并抑制异常，则后续编译将被阻止，并且异常将在下一次compile()调用时被重复。在使用declarative时，这个问题经常发生。
- en: '**[orm]**'
  id: totrans-2522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: property.of_type() is now recognized on a single-table inheriting target, when
    used in the context of prop.of_type(..).any()/has(), as well as query.join(prop.of_type(…)).
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: property.of_type()现在在单表继承目标上被识别，当在prop.of_type(..).any()/has()的上下文中使用时，以及在query.join(prop.of_type(…))中使用时。
- en: '**[orm]**'
  id: totrans-2524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.join() raises an error when the target of the join doesn’t match the property-based
    attribute - while it’s unlikely anyone is doing this, the SQLAlchemy author was
    guilty of this particular loosey-goosey behavior.
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.join()在连接的目标与基于属性的属性不匹配时会引发错误 - 虽然不太可能有人这样做，但SQLAlchemy的作者却犯了这种特定的错误行为。
- en: '**[orm]**'
  id: totrans-2526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug when using weak_instance_map=False where modified events would not
    be intercepted for a flush().
  id: totrans-2527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用weak_instance_map=False时，修改事件不会被拦截以进行flush()的bug。
- en: 'References: [#1272](https://www.sqlalchemy.org/trac/ticket/1272)'
  id: totrans-2528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1272](https://www.sqlalchemy.org/trac/ticket/1272)
- en: '**[orm]**'
  id: totrans-2529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed some deep “column correspondence” issues which could impact a Query made
    against a selectable containing multiple versions of the same table, as well as
    unions and similar which contained the same table columns in different column
    positions at different levels.
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些深层次的“列对应”问题，这可能会影响针对包含同一表的多个版本的selectable进行的查询，以及包含不同列位置的同一表列的联合等情况。
- en: 'References: [#1268](https://www.sqlalchemy.org/trac/ticket/1268)'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1268](https://www.sqlalchemy.org/trac/ticket/1268)
- en: '**[orm]**'
  id: totrans-2532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Custom comparator classes used in conjunction with column_property(), relation()
    etc. can define new comparison methods on the Comparator, which will become available
    via __getattr__() on the InstrumentedAttribute. In the case of synonym() or comparable_property(),
    attributes are resolved first on the user-defined descriptor, then on the user-defined
    comparator.
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与column_property()，relation()等一起使用的自定义比较器类可以在Comparator上定义新的比较方法，这些方法将通过InstrumentedAttribute上的__getattr__()可用。在synonym()或comparable_property()的情况下，首先在用户定义的描述符上解析属性，然后在用户定义的比较器上解析属性。
- en: '**[orm]**'
  id: totrans-2534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added ScopedSession.is_active accessor.
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了ScopedSession.is_active访问器。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: '**[orm]**'
  id: totrans-2537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Can pass mapped attributes and column objects as keys to query.update({}).
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将映射属性和列对象作为键传递给query.update({})。
- en: 'References: [#1262](https://www.sqlalchemy.org/trac/ticket/1262)'
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1262](https://www.sqlalchemy.org/trac/ticket/1262)
- en: '**[orm]**'
  id: totrans-2540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Mapped attributes passed to the values() of an expression level insert() or
    update() will use the keys of the mapped columns, not that of the mapped attribute.
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给表达式级insert()或update()的values()的映射属性将使用映射列的键，而不是映射属性的键。
- en: '**[orm]**'
  id: totrans-2542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Corrected problem with Query.delete() and Query.update() not working properly
    with bind parameters.
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了Query.delete()和Query.update()与绑定参数不正常工作的问题。
- en: 'References: [#1242](https://www.sqlalchemy.org/trac/ticket/1242)'
  id: totrans-2544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1242](https://www.sqlalchemy.org/trac/ticket/1242)
- en: '**[orm]**'
  id: totrans-2545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.select_from(), from_statement() ensure that the given argument is a FromClause,
    or Text/Select/Union, respectively.
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.select_from()、from_statement()确保给定的参数是FromClause，或Text/Select/Union，分别。
- en: '**[orm]**'
  id: totrans-2547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query() can be passed a “composite” attribute as a column expression and it
    will be expanded. Somewhat related to.
  id: totrans-2548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query()可以将“复合”属性作为列表达式传递，并将其展开。与某种程度相关。
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1253](https://www.sqlalchemy.org/trac/ticket/1253)
- en: '**[orm]**'
  id: totrans-2550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query() is a little more robust when passed various column expressions such
    as strings, clauselists, text() constructs (which may mean it just raises an error
    more nicely).
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递各种列表达式（如字符串、clauselists、text()构造）时，Query()更加健壮（这可能意味着它只是更好地提供错误信息）。
- en: '**[orm]**'
  id: totrans-2552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: first() works as expected with Query.from_statement().
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: first()在Query.from_statement()中按预期工作。
- en: '**[orm]**'
  id: totrans-2554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug introduced in 0.5rc4 involving eager loading not functioning for properties
    which were added to a mapper post-compile using add_property() or equivalent.
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.5rc4中引入的关于eager loading对于后期使用add_property()或等效方法添加到mapper的属性不起作用的错误。
- en: '**[orm]**'
  id: totrans-2556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug where many-to-many relation() with viewonly=True would not correctly
    reference the link between secondary->remote.
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当viewonly=True的many-to-many relation()不正确引用secondary->remote之间的链接时的错误。
- en: '**[orm]**'
  id: totrans-2558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Duplicate items in a list-based collection will be maintained when issuing INSERTs
    to a “secondary” table in a many-to-many relation. Assuming the m2m table has
    a unique or primary key constraint on it, this will raise the expected constraint
    violation instead of silently dropping the duplicate entries. Note that the old
    behavior remains for a one-to-many relation since collection entries in that case
    don’t result in INSERT statements and SQLA doesn’t manually police collections.
  id: totrans-2559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在向“secondary”表中插入数据时，列表型集合中的重复项将被保留在许多对多关系中。假设m2m表上有唯一或主键约束，这将引发预期的约束违规，而不是悄悄地删除重复条目。请注意，对于一对多关系，旧的行为仍然保留，因为在这种情况下，集合条目不会导致INSERT语句，SQLA不会手动监视集合。
- en: 'References: [#1232](https://www.sqlalchemy.org/trac/ticket/1232)'
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1232](https://www.sqlalchemy.org/trac/ticket/1232)
- en: '**[orm]**'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.add_column() can accept FromClause objects in the same manner as session.query()
    can.
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.add_column()可以接受FromClause对象，方式与session.query()相同。
- en: '**[orm]**'
  id: totrans-2563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Comparison of many-to-one relation to NULL is properly converted to IS NOT NULL
    based on not_().
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将多对一关系与NULL的比较正确转换为基于not_()的IS NOT NULL。
- en: '**[orm]**'
  id: totrans-2565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Extra checks added to ensure explicit primaryjoin/secondaryjoin are ClauseElement
    instances, to prevent more confusing errors later on.
  id: totrans-2566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了确保显式的primaryjoin/secondaryjoin是ClauseElement实例，以防后续出现更加混乱的错误，添加了额外的检查。
- en: 'References: [#1087](https://www.sqlalchemy.org/trac/ticket/1087)'
  id: totrans-2567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ���考：[#1087](https://www.sqlalchemy.org/trac/ticket/1087)
- en: '**[orm]**'
  id: totrans-2568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved mapper() check for non-class classes.
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对非类类的mapper()检查。
- en: 'References: [#1236](https://www.sqlalchemy.org/trac/ticket/1236)'
  id: totrans-2570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1236](https://www.sqlalchemy.org/trac/ticket/1236)
- en: '**[orm]**'
  id: totrans-2571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: comparator_factory argument is now documented and supported by all MapperProperty
    types, including column_property(), relation(), backref(), and synonym().
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: comparator_factory参数现在已被所有MapperProperty类型文档化和支持，包括column_property()、relation()、backref()和synonym()。
- en: 'References: [#5051](https://www.sqlalchemy.org/trac/ticket/5051)'
  id: totrans-2573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5051](https://www.sqlalchemy.org/trac/ticket/5051)
- en: '**[orm]**'
  id: totrans-2574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Changed the name of PropertyLoader to RelationProperty, to be consistent with
    all the other names. PropertyLoader is still present as a synonym.
  id: totrans-2575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将PropertyLoader的名称更改为RelationProperty，以与所有其他名称保持一致。PropertyLoader仍然存在作为同义词。
- en: '**[orm]**'
  id: totrans-2576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed “double iter()” call causing bus errors in shard API, removed errant result.close()
    left over from the 0.4 version.
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在shard API中导致总线错误的“双重iter()”调用，删除了0.4版本中遗留的错误的result.close()。
- en: 'References: [#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)'
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1099](https://www.sqlalchemy.org/trac/ticket/1099), [#1228](https://www.sqlalchemy.org/trac/ticket/1228)
- en: '**[orm]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: made Session.merge cascades not trigger autoflush. Fixes merged instances getting
    prematurely inserted with missing values.
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使 Session.merge 的级联不触发自动刷新。修复了合并的实例过早插入丢失值的问题。
- en: '**[orm]**'
  id: totrans-2581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Two fixes to help prevent out-of-band columns from being rendered in polymorphic_union
    inheritance scenarios (which then causes extra tables to be rendered in the FROM
    clause causing cartesian products):'
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两个修复以防止在多态联合继承方案中渲染超出范围的列（然后导致在 FROM 子句中渲染额外的表以导致笛卡尔积）：
- en: improvements to “column adaption” for a->b->c inheritance situations to better
    locate columns that are related to one another via multiple levels of indirection,
    rather than rendering the non-adapted column.
  id: totrans-2583
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 a->b->c 继承情况的“列适应”进行了改进，以更好地定位通过多级间接关系相关的列，而不是渲染非适应列。
- en: ''
  id: totrans-2584
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2585
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the “polymorphic discriminator” column is only rendered for the actual mapper
    being queried against. The column won’t be “pulled in” from a subclass or superclass
    mapper since it’s not needed.
  id: totrans-2586
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: “多态鉴别器”列仅对实际查询的映射器进行渲染。该列不会从子类或超类映射器中“拉入”，因为它不需要。
- en: '**[orm]**'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shard_id argument on ShardedSession.execute().
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ShardedSession.execute() 上的 shard_id 参数。
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1072](https://www.sqlalchemy.org/trac/ticket/1072)
- en: sql
  id: totrans-2590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: RowProxy objects can be used in place of dictionary arguments sent to connection.execute()
    and friends.
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RowProxy 对象可以用于替代发送给 `connection.execute()` 等函数的字典参数。
- en: 'References: [#935](https://www.sqlalchemy.org/trac/ticket/935)'
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#935](https://www.sqlalchemy.org/trac/ticket/935)
- en: '**[sql]**'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Columns can again contain percent signs within their names.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列名中可以再次包含百分号。
- en: 'References: [#1256](https://www.sqlalchemy.org/trac/ticket/1256)'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1256](https://www.sqlalchemy.org/trac/ticket/1256)
- en: '**[sql]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: sqlalchemy.sql.expression.Function is now a public class. It can be subclassed
    to provide user-defined SQL functions in an imperative style, including with pre-established
    behaviors. The postgis.py example illustrates one usage of this.
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.sql.expression.Function 现在是一个公共类。它可以被子类化以在命令式风格中提供用户定义的 SQL 函数，包括具有预先建立的行为。
    postgis.py 示例说明了其一种用法。
- en: '**[sql]**'
  id: totrans-2599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: PickleType now favors == comparison by default, if the incoming object (such
    as a dict) implements __eq__(). If the object does not implement __eq__() and
    mutable=True, a deprecation warning is raised.
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PickleType 现在默认偏向于使用 == 比较，如果传入对象（例如字典）实现了 __eq__()。如果对象没有实现 __eq__() 并且 mutable=True，则会引发弃用警告。
- en: '**[sql]**'
  id: totrans-2601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed the import weirdness in sqlalchemy.sql to not export __names__.
  id: totrans-2602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 sqlalchemy.sql 中导入的怪异行为，不再导出 __names__。
- en: 'References: [#1215](https://www.sqlalchemy.org/trac/ticket/1215)'
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1215](https://www.sqlalchemy.org/trac/ticket/1215)
- en: '**[sql]**'
  id: totrans-2604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Using the same ForeignKey object repeatedly raises an error instead of silently
    failing later.
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多次使用相同的 ForeignKey 对象会引发错误，而不是后来默默失败。
- en: 'References: [#1238](https://www.sqlalchemy.org/trac/ticket/1238)'
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1238](https://www.sqlalchemy.org/trac/ticket/1238)
- en: '**[sql]**'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added NotImplementedError for params() method on Insert/Update/Delete constructs.
    These items currently don’t support this functionality, which also would be a
    little misleading compared to values().
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Insert/Update/Delete 构造上为 params() 方法添加了 NotImplementedError。这些项目目前不支持此功能，这与
    values() 相比也会有一些误导。
- en: '**[sql]**'
  id: totrans-2609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Reflected foreign keys will properly locate their referenced column, even if
    the column was given a “key” attribute different from the reflected name. This
    is achieved via a new flag on ForeignKey/ForeignKeyConstraint called “link_to_name”,
    if True means the given name is the referred-to column’s name, not its assigned
    key.
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射的外键将正确定位其引用的列，即使该列被赋予了与反射名称不同的“key”属性。这通过 ForeignKey/ForeignKeyConstraint
    上的一个名为“link_to_name”的新标志实现，如果为 True，则表示给定名称是被引用列的名称，而不是其分配的键。
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#650](https://www.sqlalchemy.org/trac/ticket/650)
- en: '**[sql]**'
  id: totrans-2612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: select() can accept a ClauseList as a column in the same way as a Table or other
    selectable and the interior expressions will be used as column elements.
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 可以像表或其他可选择对象一样接受 ClauseList 作为列，内部表达式将被用作列元素。
- en: 'References: [#1253](https://www.sqlalchemy.org/trac/ticket/1253)'
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1253](https://www.sqlalchemy.org/trac/ticket/1253)
- en: '**[sql]**'
  id: totrans-2615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “passive” flag on session.is_modified() is correctly propagated to the attribute
    manager.
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.is_modified() 上的“被动”标志正确地传播到属性管理器。
- en: '**[sql]**'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: union() and union_all() will not whack any order_by() that has been applied
    to the select()s inside. If you union() a select() with order_by() (presumably
    to support LIMIT/OFFSET), you should also call self_group() on it to apply parenthesis.
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: union()和union_all()不会影响已应用到select()内部的order_by()。 如果你union()一个带有order_by()的select()（可能是为了支持LIMIT/OFFSET），你应该在它上面调用self_group()来应用括号。
- en: mysql
  id: totrans-2619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在text()构造中的“%”符号会自动转义为“%%”。 由于此更改的向后不兼容性，如果在字符串中检测到‘%%’，则会发出警告。
- en: '**[mysql]**'
  id: totrans-2622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug in exception raise when FK columns not present during reflection.
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射时未存在FK列时引发异常的错误。
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1241](https://www.sqlalchemy.org/trac/ticket/1241)
- en: '**[mysql]**'
  id: totrans-2625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug involving reflection of a remote-schema table with a foreign key ref
    to another table in that schema.
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及反映具有对该模式中另一个表的外键引用的远程模式表的错误。
- en: sqlite
  id: totrans-2627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Table reflection now stores the actual DefaultClause value for the column.
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，表反射将为列存储实际的DefaultClause值。
- en: 'References: [#1266](https://www.sqlalchemy.org/trac/ticket/1266)'
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1266](https://www.sqlalchemy.org/trac/ticket/1266)
- en: '**[sqlite]**'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: bugfixes, behavioral changes
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bug修复，行为变更
- en: mssql
  id: totrans-2633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in a new MSGenericBinary type. This maps to the Binary type so it can
    implement the specialized behavior of treating length specified types as fixed-width
    Binary types and non-length types as an unbound variable length Binary type.
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的MSGenericBinary类型。 这将其映射到Binary类型，以便它可以实现将长度指定类型视为固定宽度Binary类型和将非长度类型视为未绑定变量长度Binary类型的专门行为。
- en: '**[mssql]**'
  id: totrans-2636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added in new types: MSVarBinary and MSImage.'
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新类型：MSVarBinary和MSImage。
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1249](https://www.sqlalchemy.org/trac/ticket/1249)
- en: '**[mssql]**'
  id: totrans-2639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added in the MSReal, MSNText, MSSmallDateTime, MSTime, MSDateTimeOffset, and
    MSDateTime2 types
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了MSReal、MSNText、MSSmallDateTime、MSTime、MSDateTimeOffset和MSDateTime2类型
- en: '**[mssql]**'
  id: totrans-2641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Refactored the Date/Time types. The `smalldatetime` data type no longer truncates
    to a date only, and will now be mapped to the MSSmallDateTime type.
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了日期/时间类型。 `smalldatetime`数据类型不再截断为仅日期，现在将映射到MSSmallDateTime类型。
- en: 'References: [#1254](https://www.sqlalchemy.org/trac/ticket/1254)'
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1254](https://www.sqlalchemy.org/trac/ticket/1254)
- en: '**[mssql]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected an issue with Numerics to accept an int.
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了一个关于Numerics接受int的问题。
- en: '**[mssql]**'
  id: totrans-2646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Mapped `char_length` to the `LEN()` function.
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`char_length`映射到`LEN()`函数。
- en: '**[mssql]**'
  id: totrans-2648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If an `INSERT` includes a subselect the `INSERT` is converted from an `INSERT
    INTO VALUES` construct to a `INSERT INTO SELECT` construct.
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`INSERT`包含子查询，则`INSERT`会从`INSERT INTO VALUES`构造转换为`INSERT INTO SELECT`构造。
- en: '**[mssql]**'
  id: totrans-2650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: If the column is part of a `primary_key` it will be `NOT NULL` since MSSQL doesn’t
    allow `NULL` in primary_key columns.
  id: totrans-2651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果列是`primary_key`的一部分，则它将是`NOT NULL`，因为MSSQL不允许在`primary_key`列中使用`NULL`。
- en: '**[mssql]**'
  id: totrans-2652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: '`MSBinary` now returns a `BINARY` instead of an `IMAGE`. This is a backwards
    incompatible change in that `BINARY` is a fixed length data type whereas `IMAGE`
    is a variable length data type.'
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MSBinary`现在返回`BINARY`而不是`IMAGE`。 这是一个向后不兼容的更改，因为`BINARY`是一个固定长度的数据类型，而`IMAGE`是一个可变长度的数据类型。'
- en: 'References: [#1249](https://www.sqlalchemy.org/trac/ticket/1249)'
  id: totrans-2654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1249](https://www.sqlalchemy.org/trac/ticket/1249)
- en: '**[mssql]**'
  id: totrans-2655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: '`get_default_schema_name` is now reflected from the database based on the user’s
    default schema. This only works with MSSQL 2005 and later.'
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get_default_schema_name`现在从数据库中反映出来，基于用户的默认模式。 这仅适用于MSSQL 2005及更高版本。'
- en: 'References: [#1258](https://www.sqlalchemy.org/trac/ticket/1258)'
  id: totrans-2657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1258](https://www.sqlalchemy.org/trac/ticket/1258)
- en: '**[mssql]**'
  id: totrans-2658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Added collation support through the use of a new collation argument. This is
    supported on the following types: char, nchar, varchar, nvarchar, text, ntext.'
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用新的collation参数，添加了对collation的支持。 这在以下类型上受支持：char、nchar、varchar、nvarchar、text、ntext。
- en: 'References: [#1248](https://www.sqlalchemy.org/trac/ticket/1248)'
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1248](https://www.sqlalchemy.org/trac/ticket/1248)
- en: '**[mssql]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Changes to the connection string parameters favor DSN as the default specification
    for pyodbc. See the mssql.py docstring for detailed usage instructions.
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接字符串参数的更改更倾向于将DSN作为pyodbc的默认规范。 有关详细的使用说明，请参阅mssql.py docstring。
- en: '**[mssql]**'
  id: totrans-2663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Added experimental support of savepoints. It currently does not work fully with
    sessions.
  id: totrans-2664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对保存点的实验性支持。目前与会话不完全兼容。
- en: '**[mssql]**'
  id: totrans-2665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: 'Support for three levels of column nullability: NULL, NOT NULL, and the database’s
    configured default. The default Column configuration (nullable=True) will now
    generate NULL in the DDL. Previously no specification was emitted and the database
    default would take effect (usually NULL, but not always). To explicitly request
    the database default, configure columns with nullable=None and no specification
    will be emitted in DDL. This is backwards incompatible behavior.'
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持三种列的空值性质：NULL、NOT NULL 和数据库配置的默认值。默认列配置（nullable=True）现在将在 DDL 中生成 NULL。以前没有发出任何规范，并且将采取数据库默认值（通常是
    NULL，但并非总是）。为了显式请求数据库默认值，请使用 nullable=None 配置列，DDL 中将不会发出任何规范。这是向后不兼容的行为。
- en: 'References: [#1243](https://www.sqlalchemy.org/trac/ticket/1243)'
  id: totrans-2667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1243](https://www.sqlalchemy.org/trac/ticket/1243)
- en: oracle
  id: totrans-2668
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Adjusted the format of create_xid() to repair two-phase commit. We now have
    field reports of Oracle two-phase commit working properly with this change.
  id: totrans-2670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 create_xid() 的格式以修复两阶段提交。我们现在收到了 Oracle 两阶段提交正常工作的实地报告。
- en: '**[oracle]**'
  id: totrans-2671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Added OracleNVarchar type, produces NVARCHAR2, and also subclasses Unicode so
    that convert_unicode=True by default. NVARCHAR2 reflects into this type automatically
    so these columns pass unicode on a reflected table with no explicit convert_unicode=True
    flags.
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 OracleNVarchar 类型，生成 NVARCHAR2，并且默认情况下也是 Unicode 子类，因此 convert_unicode=True。NVARCHAR2
    自动反映到此类型，因此这些列在没有显式 convert_unicode=True 标志的情况下在反映表上传递 Unicode。
- en: 'References: [#1233](https://www.sqlalchemy.org/trac/ticket/1233)'
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1233](https://www.sqlalchemy.org/trac/ticket/1233)
- en: '**[oracle]**'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止接收某些类型的 out 参数的错误；非常感谢 wwu.edu 上的 huddlej！
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1265](https://www.sqlalchemy.org/trac/ticket/1265)
- en: misc
  id: totrans-2677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[dialect]**'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[dialect]**'
- en: Added a new description_encoding attribute on the dialect that is used for encoding
    the column name when processing the metadata. This usually defaults to utf-8.
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方言上添加了一个新的 description_encoding 属性，用于在处理元数据时对列名进行编码。这通常默认为 utf-8。
- en: '**[engine/pool]**'
  id: totrans-2680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate() 检查关闭状态以避免属性错误。
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  id: totrans-2682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1246](https://www.sqlalchemy.org/trac/ticket/1246)
- en: '**[engine/pool]**'
  id: totrans-2683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: NullPool supports reconnect on failure behavior.
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NullPool 支持失败时重新连接的行为。
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  id: totrans-2685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1094](https://www.sqlalchemy.org/trac/ticket/1094)
- en: '**[engine/pool]**'
  id: totrans-2686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: Added a mutex for the initial pool creation when using pool.manage(dbapi). This
    prevents a minor case of “dogpile” behavior which would otherwise occur upon a
    heavy load startup.
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 pool.manage(dbapi) 时，为初始池创建添加了互斥锁。这可以防止在启动时出现一种轻微的“堆积”行为。
- en: 'References: [#799](https://www.sqlalchemy.org/trac/ticket/799)'
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#799](https://www.sqlalchemy.org/trac/ticket/799)
- en: '**[engine/pool]**'
  id: totrans-2689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: _execute_clauseelement() goes back to being a private method. Subclassing Connection
    is not needed now that ConnectionProxy is available.
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _execute_clauseelement() 方法重新变为私有方法。现在可以使用 ConnectionProxy，无需子类化 Connection。
- en: '**[documentation]**'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Tickets.
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Tickets。
- en: 'References: [#1149](https://www.sqlalchemy.org/trac/ticket/1149), [#1200](https://www.sqlalchemy.org/trac/ticket/1200)'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1149](https://www.sqlalchemy.org/trac/ticket/1149)，[#1200](https://www.sqlalchemy.org/trac/ticket/1200)
- en: '**[documentation]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added note about create_session() defaults.
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关于 create_session() 默认值的说明。
- en: '**[documentation]**'
  id: totrans-2696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Added section about metadata.reflect().
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了关于 metadata.reflect() 的部分。
- en: '**[documentation]**'
  id: totrans-2698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Updated TypeDecorator section.
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 TypeDecorator 部分。
- en: '**[documentation]**'
  id: totrans-2700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Rewrote the “threadlocal” strategy section of the docs due to recent confusion
    over this feature.
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于最近对此功能的混淆，重写了文档中“threadlocal”策略部分。
- en: '**[documentation]**'
  id: totrans-2702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Removed badly out of date ‘polymorphic_fetch’ and ‘select_table’ docs from inheritance,
    reworked the second half of “joined table inheritance”.
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从继承中删除了过时的“polymorphic_fetch”和“select_table”文档，重新设计了“联接表继承”的后半部分。
- en: '**[documentation]**'
  id: totrans-2704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[documentation]**'
- en: Documented comparator_factory kwarg, added new doc section “Custom Comparators”.
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 comparator_factory 参数的文档说明，新增了名为“自定义比较器”的新文档部分。
- en: '**[postgres]**'
  id: totrans-2706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: ”%” signs in text() constructs are automatically escaped to “%%”. Because of
    the backwards incompatible nature of this change, a warning is emitted if ‘%%’
    is detected in the string.
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 text() 构造中的 “%” 符号自动转义为 “%%”。由于此更改的向后不兼容性，如果在字符串中检测到 ‘%%’，则会发出警告。
- en: 'References: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#1267](https://www.sqlalchemy.org/trac/ticket/1267)'
- en: '**[postgres]**'
  id: totrans-2709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Postgres]**'
- en: Calling alias.execute() in conjunction with server_side_cursors won’t raise
    AttributeError.
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 server_side_cursors 结合使用时，调用 alias.execute() 不会引发 AttributeError。
- en: '**[postgres]**'
  id: totrans-2711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Postgres]**'
- en: Added Index reflection support to PostgreSQL, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 的索引反射支持，使用了长期被忽视的出色补丁，由 Ken Kuhlman 提交。
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
- en: '**[associationproxy]**'
  id: totrans-2714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[关联代理]**'
- en: The association proxy properties are make themselves available at the class
    level, e.g. MyClass.aproxy. Previously this evaluated to None.
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理属性现在在类级别上可用，例如 MyClass.aproxy。之前这会评估为 None。
- en: '**[declarative]**'
  id: totrans-2716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[声明式]**'
- en: The full list of arguments accepted as string by backref() includes ‘primaryjoin’,
    ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’, ‘remote_side’, ‘order_by’.
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串形式的 backref() 接受的参数包括 ‘primaryjoin’, ‘secondaryjoin’, ‘secondary’, ‘foreign_keys’,
    ‘remote_side’, ‘order_by’。
- en: 0.5.0rc4
  id: totrans-2718
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc4
- en: 'Released: Fri Nov 14 2008'
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
  zh: '发布日期: 2008 年 11 月 14 日'
- en: general
  id: totrans-2720
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: global “propigate”->”propagate” change.
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局 “propigate”->”propagate” 更改。
- en: orm
  id: totrans-2723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Query.count() has been enhanced to do the “right thing” in a wider variety of
    cases. It can now count multiple-entity queries, as well as column-based queries.
    Note that this means if you say query(A, B).count() without any joining criterion,
    it’s going to count the cartesian product of A*B. Any query which is against column-based
    entities will automatically issue “SELECT count(1) FROM (SELECT…)” so that the
    real rowcount is returned, meaning a query such as query(func.count(A.name)).count()
    will return a value of one, since that query would return one row.
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.count() 已经增强，以在更广泛的情况下执行“正确的操作”。它现在可以计算多实体查询，以及基于列的查询。请注意，这意味着如果你说 query(A,
    B).count() 而没有任何连接条件，它将计算 A*B 的笛卡尔积。对于针对基于列的实体的任何查询，将自动发出 “SELECT count(1) FROM
    (SELECT…)”，以便返回真实的行数，这意味着像 query(func.count(A.name)).count() 这样的查询将返回一个值，因为该查询将返回一行。
- en: '**[orm]**'
  id: totrans-2726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Lots of performance tuning. A rough guesstimate over various ORM operations
    places it 10% faster over 0.5.0rc3, 25-30% over 0.4.8.
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大量性能调优。对各种 ORM 操作的粗略估计将其速度提高了 10%，比 0.5.0rc3 快 25-30%。
- en: '**[orm]**'
  id: totrans-2728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: bugfixes and behavioral changes
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误修复和行为变更
- en: '**[orm]**'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Adjustments to the enhanced garbage collection on InstanceState to better guard
    against errors due to lost state.
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对 InstanceState 的增强垃圾回收，以更好地防止由于丢失状态而导致的错误。
- en: '**[orm]**'
  id: totrans-2732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Query.get() returns a more informative error message when executed against multiple
    entities.
  id: totrans-2733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当针对多个实体执行时，Query.get() 返回一个更具信息性的错误消息。
- en: 'References: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
- en: '**[orm]**'
  id: totrans-2735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Restored NotImplementedError on Cls.relation.in_()
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 Cls.relation.in_() 上的 NotImplementedError。
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
- en: '**[orm]**'
  id: totrans-2738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed PendingDeprecationWarning involving order_by parameter on relation().
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及 relation() 上 order_by 参数的 PendingDeprecationWarning。
- en: 'References: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
  id: totrans-2740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
- en: sql
  id: totrans-2741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql]**'
  id: totrans-2742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Removed the ‘properties’ attribute of the Connection object, Connection.info
    should be used.
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了 Connection 对象的 ‘properties’ 属性，应该使用 Connection.info。
- en: '**[sql]**'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Restored “active rowcount” fetch before ResultProxy autocloses the cursor. This
    was removed in 0.5rc3.
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ResultProxy 自动关闭游标之前恢复了 “活动行数” 获取。这在 0.5rc3 中被移除。
- en: '**[sql]**'
  id: totrans-2746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL]**'
- en: Rearranged the load_dialect_impl() method in TypeDecorator such that it will
    take effect even if the user-defined TypeDecorator uses another TypeDecorator
    as its impl.
  id: totrans-2747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新排列了 TypeDecorator 中的 load_dialect_impl() 方法，以便即使用户定义的 TypeDecorator 使用另一个
    TypeDecorator 作为其 impl，也会生效。
- en: mssql
  id: totrans-2748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql]**'
  id: totrans-2749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MSSQL]**'
- en: Lots of cleanup and fixes to correct problems with limit and offset.
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大量清理和修复，以纠正限制和偏移的问题。
- en: '**[mssql]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MSSQL]**'
- en: Correct situation where subqueries as part of a binary expression need to be
    translated to use the IN and NOT IN syntax.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了作为二进制表达式一部分的子查询需要被转换为使用 IN 和 NOT IN 语法的情况。
- en: '**[mssql]**'
  id: totrans-2753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MSSQL]**'
- en: Fixed E Notation issue that prevented the ability to insert decimal values less
    than 1E-6.
  id: totrans-2754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了E Notation问题，导致无法插入小于1E-6的十进制值。
- en: 'References: [#1216](https://www.sqlalchemy.org/trac/ticket/1216)'
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1216](https://www.sqlalchemy.org/trac/ticket/1216)
- en: '**[mssql]**'
  id: totrans-2756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problems with reflection when dealing with schemas, particularly when
    those schemas are the default schema.
  id: totrans-2757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了处理模式时反射的问题，特别是当这些模式是默认模式时。
- en: 'References: [#1217](https://www.sqlalchemy.org/trac/ticket/1217)'
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1217](https://www.sqlalchemy.org/trac/ticket/1217)
- en: '**[mssql]**'
  id: totrans-2759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problem with casting a zero length item to a varchar. It now correctly
    adjusts the CAST.
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了将零长度项转换为varchar时出现的问题。现在它会正确调整CAST。
- en: misc
  id: totrans-2761
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[access]**'
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Added support for Currency type.
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Currency类型的支持。
- en: '**[access]**'
  id: totrans-2764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Functions were not return their result.
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数未返回它们的结果。
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1017](https://www.sqlalchemy.org/trac/ticket/1017)
- en: '**[access]**'
  id: totrans-2767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Corrected problem with joins. Access only support LEFT OUTER or INNER not just
    JOIN by itself.
  id: totrans-2768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了关联的问题。Access仅支持LEFT OUTER或INNER，而不仅仅是JOIN本身。
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1017](https://www.sqlalchemy.org/trac/ticket/1017)
- en: '**[ext]**'
  id: totrans-2770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Can now use a custom “inherit_condition” in __mapper_args__ when using declarative.
  id: totrans-2771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用declarative时，现在可以在__mapper_args__中使用自定义的“inherit_condition”。
- en: '**[ext]**'
  id: totrans-2772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: fixed string-based “remote_side”, “order_by” and others not propagating correctly
    when used in backref().
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在backref()中使用基于字符串的“remote_side”、“order_by”等时未正确传播的问题。
- en: general
  id: totrans-2774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: global “propigate”->”propagate” change.
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“propigate”->”propagate”更改。
- en: orm
  id: totrans-2777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.count() has been enhanced to do the “right thing” in a wider variety of
    cases. It can now count multiple-entity queries, as well as column-based queries.
    Note that this means if you say query(A, B).count() without any joining criterion,
    it’s going to count the cartesian product of A*B. Any query which is against column-based
    entities will automatically issue “SELECT count(1) FROM (SELECT…)” so that the
    real rowcount is returned, meaning a query such as query(func.count(A.name)).count()
    will return a value of one, since that query would return one row.
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.count()已经增强，以在更广泛的情况下执行“正确的操作”。它现在可以计算多实体查询，以及基于列的查询。请注意，这意味着如果你说query(A,
    B).count()没有任何连接条件，它将计算A*B的笛卡尔积。对于针对基于列的实体的查询，将自动发出“SELECT count(1) FROM (SELECT…)”以返回真实的行数，这意味着像query(func.count(A.name)).count()这样的查询将返回一个值，因为该查询将返回一行。
- en: '**[orm]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Lots of performance tuning. A rough guesstimate over various ORM operations
    places it 10% faster over 0.5.0rc3, 25-30% over 0.4.8.
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进行了大量性能调优。对各种ORM操作的粗略估计表明，它比0.5.0rc3快10%，比0.4.8快25-30%。
- en: '**[orm]**'
  id: totrans-2782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: bugfixes and behavioral changes
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了错误和行为变化
- en: '**[orm]**'
  id: totrans-2784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjustments to the enhanced garbage collection on InstanceState to better guard
    against errors due to lost state.
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对InstanceState的增强垃圾回收，以更好地防止由于丢失状态而导致的错误。
- en: '**[orm]**'
  id: totrans-2786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query.get() returns a more informative error message when executed against multiple
    entities.
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.get()在针对多个实体执行时返回更具信息性的错误消息。
- en: 'References: [#1220](https://www.sqlalchemy.org/trac/ticket/1220)'
  id: totrans-2788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1220](https://www.sqlalchemy.org/trac/ticket/1220)
- en: '**[orm]**'
  id: totrans-2789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Restored NotImplementedError on Cls.relation.in_()
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了Cls.relation.in_上的NotImplementedError
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1140](https://www.sqlalchemy.org/trac/ticket/1140), [#1221](https://www.sqlalchemy.org/trac/ticket/1221)
- en: '**[orm]**'
  id: totrans-2792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed PendingDeprecationWarning involving order_by parameter on relation().
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及relation()上order_by参数的PendingDeprecationWarning。
- en: 'References: [#1226](https://www.sqlalchemy.org/trac/ticket/1226)'
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1226](https://www.sqlalchemy.org/trac/ticket/1226)
- en: sql
  id: totrans-2795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed the ‘properties’ attribute of the Connection object, Connection.info
    should be used.
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了Connection对象的‘properties’属性，应该使用Connection.info。
- en: '**[sql]**'
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Restored “active rowcount” fetch before ResultProxy autocloses the cursor. This
    was removed in 0.5rc3.
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在ResultProxy自动关闭游标之前获取“活动行数”的获取。这在0.5rc3中被移除。
- en: '**[sql]**'
  id: totrans-2800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Rearranged the load_dialect_impl() method in TypeDecorator such that it will
    take effect even if the user-defined TypeDecorator uses another TypeDecorator
    as its impl.
  id: totrans-2801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新排列了TypeDecorator中的load_dialect_impl()方法，以便即使用户定义的TypeDecorator使用另一个TypeDecorator作为其impl，它也会生效。
- en: mssql
  id: totrans-2802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Lots of cleanup and fixes to correct problems with limit and offset.
  id: totrans-2804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进行了大量清理和修复，以纠正限制和偏移的问题。
- en: '**[mssql]**'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Correct situation where subqueries as part of a binary expression need to be
    translated to use the IN and NOT IN syntax.
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了作为二元表达式一部分的子查询需要转换为使用 IN 和 NOT IN 语法的情况。
- en: '**[mssql]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Fixed E Notation issue that prevented the ability to insert decimal values less
    than 1E-6.
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 E 表示法问题，导致无法插入小于 1E-6 的十进制值。
- en: 'References: [#1216](https://www.sqlalchemy.org/trac/ticket/1216)'
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1216](https://www.sqlalchemy.org/trac/ticket/1216)
- en: '**[mssql]**'
  id: totrans-2810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problems with reflection when dealing with schemas, particularly when
    those schemas are the default schema.
  id: totrans-2811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了在处理模式时反射的问题，特别是当这些模式是默认模式时。
- en: 'References: [#1217](https://www.sqlalchemy.org/trac/ticket/1217)'
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1217](https://www.sqlalchemy.org/trac/ticket/1217)
- en: '**[mssql]**'
  id: totrans-2813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: Corrected problem with casting a zero length item to a varchar. It now correctly
    adjusts the CAST.
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了将零长度项目转换为 varchar 的问题。现在它会正确调整 CAST。
- en: misc
  id: totrans-2815
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[access]**'
  id: totrans-2816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Added support for Currency type.
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 Currency 类型的支持。
- en: '**[access]**'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Functions were not return their result.
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数没有返回它们的结果。
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1017](https://www.sqlalchemy.org/trac/ticket/1017)
- en: '**[access]**'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[access]**'
- en: Corrected problem with joins. Access only support LEFT OUTER or INNER not just
    JOIN by itself.
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了连接问题。Access 只支持 LEFT OUTER 或 INNER，而不是仅仅 JOIN。
- en: 'References: [#1017](https://www.sqlalchemy.org/trac/ticket/1017)'
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1017](https://www.sqlalchemy.org/trac/ticket/1017)
- en: '**[ext]**'
  id: totrans-2824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Can now use a custom “inherit_condition” in __mapper_args__ when using declarative.
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 declarative 时，现在可以在 __mapper_args__ 中使用自定义的 “inherit_condition”。
- en: '**[ext]**'
  id: totrans-2826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: fixed string-based “remote_side”, “order_by” and others not propagating correctly
    when used in backref().
  id: totrans-2827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 backref() 中使用基于字符串的 “remote_side”、“order_by” 等时未正确传播的问题。
- en: 0.5.0rc3
  id: totrans-2828
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc3
- en: 'Released: Fri Nov 07 2008'
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年11月07日
- en: orm
  id: totrans-2830
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'Added two new hooks to SessionExtension: after_bulk_delete() and after_bulk_update().
    after_bulk_delete() is called after a bulk delete() operation on a query. after_bulk_update()
    is called after a bulk update() operation on a query.'
  id: totrans-2832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SessionExtension 中添加了两个新的钩子：after_bulk_delete() 和 after_bulk_update()。在查询上执行
    bulk delete() 操作后会调用 after_bulk_delete()。在查询上执行 bulk update() 操作后会调用 after_bulk_update()。
- en: '**[orm]**'
  id: totrans-2833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”not equals” comparisons of simple many-to-one relation to an instance will
    not drop into an EXISTS clause and will compare foreign key columns instead.
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简单的一对多关系的“不等于”比较将不会陷入 EXISTS 子句，而是会比较外键列。
- en: '**[orm]**'
  id: totrans-2835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed not-really-working use cases of comparing a collection to an iterable.
    Use contains() to test for collection membership.
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了将集合与可迭代对象进行比较的不太有效的用例。使用 contains() 来测试集合成员资格。
- en: '**[orm]**'
  id: totrans-2837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the behavior of aliased() objects such that they more accurately adapt
    the expressions generated, which helps particularly with self-referential comparisons.
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 aliased() 对象的行为，使其更准确地适应生成的表达式，这在自引用比较中特别有帮助。
- en: 'References: [#1171](https://www.sqlalchemy.org/trac/ticket/1171)'
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1171](https://www.sqlalchemy.org/trac/ticket/1171)
- en: '**[orm]**'
  id: totrans-2840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug involving primaryjoin/secondaryjoin conditions constructed from class-bound
    attributes (as often occurs when using declarative), which later would be inappropriately
    aliased by Query, particularly with the various EXISTS based comparators.
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从类绑定属性构造的 primaryjoin/secondaryjoin 条件的 bug（通常在使用 declarative 时发生），稍后 Query
    会不正确地别名，特别是在使用各种基于 EXISTS 的比较器时。
- en: '**[orm]**'
  id: totrans-2842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug when using multiple query.join() with an aliased-bound descriptor
    which would lose the left alias.
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用多个 query.join() 与别名绑定描述符时会丢失左别名的 bug。
- en: '**[orm]**'
  id: totrans-2844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved weakref identity map memory management to no longer require mutexing,
    resurrects garbage collected instance on a lazy basis for an InstanceState with
    pending changes.
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了弱引用标识映射的内存管理，不再需要互斥锁，对具有挂起更改的 InstanceState 在懒惰基础上复活被垃圾回收的实例。
- en: '**[orm]**'
  id: totrans-2846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: InstanceState object now removes circular references to itself upon disposal
    to keep it outside of cyclic garbage collection.
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstanceState 对象现在在处理后会删除对自身的循环引用，以使其不受循环垃圾回收的影响。
- en: '**[orm]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() won’t hide unrelated ForeignKey errors inside of the “please specify
    primaryjoin” message when determining join condition.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定连接条件时，relation() 不会在“请指定 primaryjoin”消息中隐藏无关的 ForeignKey 错误。
- en: '**[orm]**'
  id: totrans-2850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query involving order_by() in conjunction with multiple aliases
    of the same class (will add tests in)
  id: totrans-2851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中涉及 order_by() 与同一类的多个别名一起使用时的 bug（将添加测试）。
- en: 'References: [#1218](https://www.sqlalchemy.org/trac/ticket/1218)'
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1218](https://www.sqlalchemy.org/trac/ticket/1218)
- en: '**[orm]**'
  id: totrans-2853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When using Query.join() with an explicit clause for the ON clause, the clause
    will be aliased in terms of the left side of the join, allowing scenarios like
    query(Source). from_self().join((Dest, Source.id==Dest.source_id)) to work properly.
  id: totrans-2854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用Query.join()时，如果ON子句有明确的条件，该条件将被别名化为连接的左侧，允许像query(Source). from_self().join((Dest,
    Source.id==Dest.source_id))这样的场景正常工作。
- en: '**[orm]**'
  id: totrans-2855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果每个列的“key”与列的名称不同，polymorphic_union()函数将尊重每个列的“key”。
- en: '**[orm]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired support for “passive-deletes” on a many-to-one relation() with “delete”
    cascade.
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“被动删除”在具有“delete”级联的多对一关系()上的支持。
- en: 'References: [#1183](https://www.sqlalchemy.org/trac/ticket/1183)'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1183](https://www.sqlalchemy.org/trac/ticket/1183)
- en: '**[orm]**'
  id: totrans-2860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  id: totrans-2861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了组合类型中的错误，该错误阻止了主键组合类型的变异。
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1213](https://www.sqlalchemy.org/trac/ticket/1213)
- en: '**[orm]**'
  id: totrans-2863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added more granularity to internal attribute access, such that cascade and flush
    operations will not initialize unloaded attributes and collections, leaving them
    intact for a lazy-load later on. Backref events still initialize attributes and
    collections for pending instances.
  id: totrans-2864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对内部属性访问的更细粒度，使得级联和刷新操作不会初始化未加载的属性和集合，使它们保持原样以便稍后进行延迟加载。对于待处理实例，反向引用事件仍会初始化属性和集合。
- en: 'References: [#1202](https://www.sqlalchemy.org/trac/ticket/1202)'
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1202](https://www.sqlalchemy.org/trac/ticket/1202)
- en: sql
  id: totrans-2866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SQL compiler optimizations and complexity reduction. The call count for compiling
    a typical select() construct is 20% less versus 0.5.0rc2.
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'SQL编译器优化和复杂性降低。编译典型select()构造的调用次数比0.5.0rc2少20%。 '
- en: '**[sql]**'
  id: totrans-2869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Dialects can now generate label names of adjustable length. Pass in the argument
    “label_length=<value>” to create_engine() to adjust how many characters max will
    be present in dynamically generated column labels, i.e. “somecolumn AS somelabel”.
    Any value less than 6 will result in a label of minimal size, consisting of an
    underscore and a numeric counter. The compiler uses the value of dialect.max_identifier_length
    as a default.
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言现在可以生成可调整长度的标签名称。传入参数“label_length=<value>”到create_engine()以调整动态生成列标签中最多有多少个字符，即“somecolumn
    AS somelabel”。任何小于6的值将导致最小尺寸的标签，由下划线和数字计数器组成。编译器使用dialect.max_identifier_length的值作为默认值。
- en: 'References: [#1211](https://www.sqlalchemy.org/trac/ticket/1211)'
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1211](https://www.sqlalchemy.org/trac/ticket/1211)
- en: '**[sql]**'
  id: totrans-2872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Simplified the check for ResultProxy “autoclose without results” to be based
    solely on presence of cursor.description. All the regexp-based guessing about
    statements returning rows has been removed.
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了对ResultProxy“无结果自动关闭”的检查，仅基于光标描述的存在。所有基于正则表达式的关于返回行的猜测都已被移除。
- en: 'References: [#1212](https://www.sqlalchemy.org/trac/ticket/1212)'
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1212](https://www.sqlalchemy.org/trac/ticket/1212)
- en: '**[sql]**'
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Direct execution of a union() construct will properly set up result-row processing.
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直接执行union()构造将正确设置结果行处理。
- en: 'References: [#1194](https://www.sqlalchemy.org/trac/ticket/1194)'
  id: totrans-2877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1194](https://www.sqlalchemy.org/trac/ticket/1194)
- en: '**[sql]**'
  id: totrans-2878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The internal notion of an “OID” or “ROWID” column has been removed. It’s basically
    not used by any dialect, and the possibility of its usage with psycopg2’s cursor.lastrowid
    is basically gone now that INSERT..RETURNING is available.
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除“OID”或“ROWID”列的内部概念。它基本上没有被任何方言使用，而且现在使用INSERT..RETURNING，基本上不再可能与psycopg2的cursor.lastrowid一起使用。
- en: '**[sql]**'
  id: totrans-2880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed “default_order_by()” method on all FromClause objects.
  id: totrans-2881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有FromClause对象上移除了“default_order_by()”方法。
- en: '**[sql]**'
  id: totrans-2882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repaired the table.tometadata() method so that a passed-in schema argument is
    propagated to ForeignKey constructs.
  id: totrans-2883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了table.tometadata()方法，使传入的模式参数传播到ForeignKey构造中。
- en: '**[sql]**'
  id: totrans-2884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Slightly changed behavior of IN operator for comparing to empty collections.
    Now results in inequality comparison against self. More portable, but breaks with
    stored procedures that aren’t pure functions.
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微改变了用于与空集合比较的IN运算符的行为。现在会导致与自身的不等比较。更具可移植性，但会破坏不是纯函数的存储过程。
- en: mysql
  id: totrans-2886
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed foreign key reflection in the edge case where a Table’s explicit schema=
    is the same as the schema (database) the connection is attached to.
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表的显式 schema= 与连接附加到的 schema（数据库）相同时，修复了外键反射的边缘情况。
- en: '**[mysql]**'
  id: totrans-2889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MySQL]**'
- en: No longer expects include_columns in table reflection to be lower case.
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再期望表反射中的 include_columns 为小写。
- en: oracle
  id: totrans-2891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle]**'
  id: totrans-2892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Wrote a docstring for Oracle dialect. Apparently that Ohloh “few source code
    comments” label is starting to string :).
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Oracle dialect 编写了一个文档字符串。显然，Ohloh 的“few source code comments”标签开始串联 :).
- en: '**[oracle]**'
  id: totrans-2894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Removed FIRST_ROWS() optimize flag when using LIMIT/OFFSET, can be re-enabled
    with optimize_limits=True create_engine() flag.
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 LIMIT/OFFSET 时移除了 FIRST_ROWS() 优化标志，可以通过 optimize_limits=True create_engine()
    标志重新启用。
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#536](https://www.sqlalchemy.org/trac/ticket/536)
- en: '**[oracle]**'
  id: totrans-2897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: bugfixes and behavioral changes
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误修复和行为更改
- en: '**[oracle]**'
  id: totrans-2899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[Oracle]**'
- en: Setting the auto_convert_lobs to False on create_engine() will also instruct
    the OracleBinary type to return the cx_oracle LOB object unchanged.
  id: totrans-2900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 create_engine() 上将 auto_convert_lobs 设置为 False 也将指示 OracleBinary 类型返回 cx_oracle
    LOB 对象不变。
- en: misc
  id: totrans-2901
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Added a new extension sqlalchemy.ext.serializer. Provides Serializer/Deserializer
    “classes” which mirror Pickle/Unpickle, as well as dumps() and loads(). This serializer
    implements an “external object” pickler which keeps key context-sensitive objects,
    including engines, sessions, metadata, Tables/Columns, and mappers, outside of
    the pickle stream, and can later restore the pickle using any engine/metadata/session
    provider. This is used not for pickling regular object instances, which are pickleable
    without any special logic, but for pickling expression objects and full Query
    objects, such that all mapper/engine/session dependencies can be restored at unpickle
    time.
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的扩展 sqlalchemy.ext.serializer。提供了与 Pickle/Unpickle 镜像的 Serializer/Deserializer
    “类”，以及 dumps() 和 loads()。此序列化程序实现了一个“外部对象” pickler，将关键上下文敏感对象，包括 engines、sessions、metadata、Tables/Columns
    和 mappers，保持在 pickle 流之外，并且可以稍后使用任何 engine/metadata/session 提供程序恢复 pickle。这不是用于
    pickling 普通对象实例，这些对象实例可以在没有任何特殊逻辑的情况下进行 pickling，而是用于 pickling 表达式对象和完整的 Query
    对象，以便在 unpickle 时可以恢复所有 mapper/engine/session 依赖项。
- en: '**[ext]**'
  id: totrans-2904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: Fixed bug preventing declarative-bound “column” objects from being used in column_mapped_collection().
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 declarative-bound “column” 对象在 column_mapped_collection() 中使用的 bug。
- en: 'References: [#1174](https://www.sqlalchemy.org/trac/ticket/1174)'
  id: totrans-2906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1174](https://www.sqlalchemy.org/trac/ticket/1174)
- en: '**[misc]**'
  id: totrans-2907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[杂项]**'
- en: util.flatten_iterator() func doesn’t interpret strings with __iter__() methods
    as iterators, such as in pypy.
  id: totrans-2908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: util.flatten_iterator() 函数不会将具有 __iter__() 方法的字符串解释为迭代器，例如在 pypy 中。
- en: 'References: [#1077](https://www.sqlalchemy.org/trac/ticket/1077)'
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1077](https://www.sqlalchemy.org/trac/ticket/1077)
- en: orm
  id: totrans-2910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'Added two new hooks to SessionExtension: after_bulk_delete() and after_bulk_update().
    after_bulk_delete() is called after a bulk delete() operation on a query. after_bulk_update()
    is called after a bulk update() operation on a query.'
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 SessionExtension 添加了两个新的 hooks：after_bulk_delete() 和 after_bulk_update()。在查询上执行
    bulk delete() 操作后调用 after_bulk_delete()。在查询上执行 bulk update() 操作后调用 after_bulk_update()。
- en: '**[orm]**'
  id: totrans-2913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: ”not equals” comparisons of simple many-to-one relation to an instance will
    not drop into an EXISTS clause and will compare foreign key columns instead.
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简单的多对一关系的“不等于”比较将不会陷入 EXISTS 子句，并将比较外键列。
- en: '**[orm]**'
  id: totrans-2915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Removed not-really-working use cases of comparing a collection to an iterable.
    Use contains() to test for collection membership.
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了比较集合与可迭代对象的不真正有效的用例。使用 contains() 来测试集合成员资格。
- en: '**[orm]**'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Improved the behavior of aliased() objects such that they more accurately adapt
    the expressions generated, which helps particularly with self-referential comparisons.
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 aliased() 对象的行为，使其更准确地适应生成的表达式，特别有助于自引用比较。
- en: 'References: [#1171](https://www.sqlalchemy.org/trac/ticket/1171)'
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1171](https://www.sqlalchemy.org/trac/ticket/1171)
- en: '**[orm]**'
  id: totrans-2920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug involving primaryjoin/secondaryjoin conditions constructed from class-bound
    attributes (as often occurs when using declarative), which later would be inappropriately
    aliased by Query, particularly with the various EXISTS based comparators.
  id: totrans-2921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从类绑定属性构造的 primaryjoin/secondaryjoin 条件的 bug（在使用 declarative 时经常发生），稍后 Query
    会不适当地别名化这些条件，��别是在各种基于 EXISTS 的比较器中。
- en: '**[orm]**'
  id: totrans-2922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Fixed bug when using multiple query.join() with an aliased-bound descriptor
    which would lose the left alias.
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用多个 query.join() 与别名绑定描述符时会丢失左别名的 bug。
- en: '**[orm]**'
  id: totrans-2924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved weakref identity map memory management to no longer require mutexing,
    resurrects garbage collected instance on a lazy basis for an InstanceState with
    pending changes.
  id: totrans-2925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了弱引用标识映射的内存管理，不再需要互斥锁，对具有挂起更改的 InstanceState 在懒惰基础上复活被垃圾回收的实例。
- en: '**[orm]**'
  id: totrans-2926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: InstanceState object now removes circular references to itself upon disposal
    to keep it outside of cyclic garbage collection.
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstanceState 对象现在在处理后会删除对自身的循环引用，以使其保持在循环垃圾回收之外。
- en: '**[orm]**'
  id: totrans-2928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: relation() won’t hide unrelated ForeignKey errors inside of the “please specify
    primaryjoin” message when determining join condition.
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定连接条件时，relation() 不会在“请指定 primaryjoin”消息中隐藏不相关的 ForeignKey 错误。
- en: '**[orm]**'
  id: totrans-2930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in Query involving order_by() in conjunction with multiple aliases
    of the same class (will add tests in)
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 中涉及 order_by() 与同一类的多个别名结合时的 bug（将添加测试）
- en: 'References: [#1218](https://www.sqlalchemy.org/trac/ticket/1218)'
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1218](https://www.sqlalchemy.org/trac/ticket/1218)
- en: '**[orm]**'
  id: totrans-2933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: When using Query.join() with an explicit clause for the ON clause, the clause
    will be aliased in terms of the left side of the join, allowing scenarios like
    query(Source). from_self().join((Dest, Source.id==Dest.source_id)) to work properly.
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Query.join() 时，对 ON 子句进行显式定义，该子句将别名化为连接的左侧，允许像 query(Source). from_self().join((Dest,
    Source.id==Dest.source_id)) 这样的场景正常工作。
- en: '**[orm]**'
  id: totrans-2935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 polymorphic_union() 函数中的每个 Column 的“key”与列名不同，则会予以尊重。
- en: '**[orm]**'
  id: totrans-2937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired support for “passive-deletes” on a many-to-one relation() with “delete”
    cascade.
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在“delete”级联关系上支持“被动删除”对多对一 relation() 的支持。
- en: 'References: [#1183](https://www.sqlalchemy.org/trac/ticket/1183)'
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1183](https://www.sqlalchemy.org/trac/ticket/1183)
- en: '**[orm]**'
  id: totrans-2940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  id: totrans-2941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了组合类型中的 bug，该 bug 阻止了主键组合类型的变异。
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1213](https://www.sqlalchemy.org/trac/ticket/1213)
- en: '**[orm]**'
  id: totrans-2943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added more granularity to internal attribute access, such that cascade and flush
    operations will not initialize unloaded attributes and collections, leaving them
    intact for a lazy-load later on. Backref events still initialize attributes and
    collections for pending instances.
  id: totrans-2944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对内部属性访问增加了更多细粒度，使得级联和刷新操作不会初始化未加载的属性和集合，保持它们完整以供稍后进行延迟加载。对于待处理实例，反向引用事件仍会初始化属性和集合。
- en: 'References: [#1202](https://www.sqlalchemy.org/trac/ticket/1202)'
  id: totrans-2945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1202](https://www.sqlalchemy.org/trac/ticket/1202)
- en: sql
  id: totrans-2946
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: SQL compiler optimizations and complexity reduction. The call count for compiling
    a typical select() construct is 20% less versus 0.5.0rc2.
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 编译器优化和复杂性降低。编译典型 select() 构造的调用次数比 0.5.0rc2 少 20%。
- en: '**[sql]**'
  id: totrans-2949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Dialects can now generate label names of adjustable length. Pass in the argument
    “label_length=<value>” to create_engine() to adjust how many characters max will
    be present in dynamically generated column labels, i.e. “somecolumn AS somelabel”.
    Any value less than 6 will result in a label of minimal size, consisting of an
    underscore and a numeric counter. The compiler uses the value of dialect.max_identifier_length
    as a default.
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言现在可以生成可调整长度的标签名称。传入参数“label_length=<value>”到 create_engine() 中，以调整动态生成列标签中最多存在多少个字符，即“somecolumn
    AS somelabel”。任何小于 6 的值将导致最小尺寸的标签，由下划线和数字计数器组成。编译器使用 dialect.max_identifier_length
    的值作为默认值。
- en: 'References: [#1211](https://www.sqlalchemy.org/trac/ticket/1211)'
  id: totrans-2951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1211](https://www.sqlalchemy.org/trac/ticket/1211)
- en: '**[sql]**'
  id: totrans-2952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Simplified the check for ResultProxy “autoclose without results” to be based
    solely on presence of cursor.description. All the regexp-based guessing about
    statements returning rows has been removed.
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化了对 ResultProxy “无结果自动关闭” 的检查，仅基于存在 cursor.description。所有基于正则表达式的关于语句返回行的猜测都已被移除。
- en: 'References: [#1212](https://www.sqlalchemy.org/trac/ticket/1212)'
  id: totrans-2954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1212](https://www.sqlalchemy.org/trac/ticket/1212)
- en: '**[sql]**'
  id: totrans-2955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Direct execution of a union() construct will properly set up result-row processing.
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直接执行 union() 构造将正确设置结果行处理。
- en: 'References: [#1194](https://www.sqlalchemy.org/trac/ticket/1194)'
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1194](https://www.sqlalchemy.org/trac/ticket/1194)
- en: '**[sql]**'
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The internal notion of an “OID” or “ROWID” column has been removed. It’s basically
    not used by any dialect, and the possibility of its usage with psycopg2’s cursor.lastrowid
    is basically gone now that INSERT..RETURNING is available.
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除“OID”或“ROWID”列的内部概念。基本上没有任何方言使用它，而且现在使用INSERT..RETURNING，使用psycopg2的cursor.lastrowid的可能性基本上已经消失。
- en: '**[sql]**'
  id: totrans-2960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed “default_order_by()” method on all FromClause objects.
  id: totrans-2961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有FromClause对象上删除了“default_order_by()”方法。
- en: '**[sql]**'
  id: totrans-2962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Repaired the table.tometadata() method so that a passed-in schema argument is
    propagated to ForeignKey constructs.
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了table.tometadata()方法，使传入的模式参数传播到ForeignKey构造中。
- en: '**[sql]**'
  id: totrans-2964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Slightly changed behavior of IN operator for comparing to empty collections.
    Now results in inequality comparison against self. More portable, but breaks with
    stored procedures that aren’t pure functions.
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍微改变了用于与空集合比较的IN运算符的行为。现在会导致与自身的不等式比较。更具可移植性，但会破坏不是纯函数的存储过程。
- en: mysql
  id: totrans-2966
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed foreign key reflection in the edge case where a Table’s explicit schema=
    is the same as the schema (database) the connection is attached to.
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在表的显式schema=与连接附加到的schema（数据库）相同时的外键反射问题。
- en: '**[mysql]**'
  id: totrans-2969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: No longer expects include_columns in table reflection to be lower case.
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再期望在表反射中包含的列为小写。
- en: oracle
  id: totrans-2971
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Wrote a docstring for Oracle dialect. Apparently that Ohloh “few source code
    comments” label is starting to string :).
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Oracle方言编写了一个文档字符串。显然，Ohloh的“few source code comments”标签开始串联了 :).
- en: '**[oracle]**'
  id: totrans-2974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Removed FIRST_ROWS() optimize flag when using LIMIT/OFFSET, can be re-enabled
    with optimize_limits=True create_engine() flag.
  id: totrans-2975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用LIMIT/OFFSET时删除了FIRST_ROWS()优化标志，可以通过optimize_limits=True create_engine()标志重新启用。
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#536](https://www.sqlalchemy.org/trac/ticket/536)
- en: '**[oracle]**'
  id: totrans-2977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: bugfixes and behavioral changes
  id: totrans-2978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复错误和行为更改
- en: '**[oracle]**'
  id: totrans-2979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Setting the auto_convert_lobs to False on create_engine() will also instruct
    the OracleBinary type to return the cx_oracle LOB object unchanged.
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在create_engine()上将auto_convert_lobs设置为False也将指示OracleBinary类型将cx_oracle LOB对象原样返回。
- en: misc
  id: totrans-2981
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[ext]**'
  id: totrans-2982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Added a new extension sqlalchemy.ext.serializer. Provides Serializer/Deserializer
    “classes” which mirror Pickle/Unpickle, as well as dumps() and loads(). This serializer
    implements an “external object” pickler which keeps key context-sensitive objects,
    including engines, sessions, metadata, Tables/Columns, and mappers, outside of
    the pickle stream, and can later restore the pickle using any engine/metadata/session
    provider. This is used not for pickling regular object instances, which are pickleable
    without any special logic, but for pickling expression objects and full Query
    objects, such that all mapper/engine/session dependencies can be restored at unpickle
    time.
  id: totrans-2983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的扩展sqlalchemy.ext.serializer。提供了Serializer/Deserializer“类”，这些类镜像了Pickle/Unpickle，以及dumps()和loads()。这个序列化器实现了一个“外部对象”pickler，它将关键上下文敏感对象，包括engines、sessions、metadata、Tables/Columns和mappers，保持在pickle流之外，并且可以在以后使用任何engine/metadata/session提供程序恢复pickle。这不是用于pickle常规对象��例，这些对象实例可以在没有任何特殊逻辑的情况下进行pickle，而是用于pickle表达式对象和完整的Query对象，以便在unpickle时可以恢复所有mapper/engine/session依赖关系。
- en: '**[ext]**'
  id: totrans-2984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Fixed bug preventing declarative-bound “column” objects from being used in column_mapped_collection().
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止声明绑定的“column”对象在column_mapped_collection()中使用的错误。
- en: 'References: [#1174](https://www.sqlalchemy.org/trac/ticket/1174)'
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1174](https://www.sqlalchemy.org/trac/ticket/1174)
- en: '**[misc]**'
  id: totrans-2987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[misc]**'
- en: util.flatten_iterator() func doesn’t interpret strings with __iter__() methods
    as iterators, such as in pypy.
  id: totrans-2988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: util.flatten_iterator()函数不会将具有__iter__()方法的字符串解释为迭代器，例如在pypy中。
- en: 'References: [#1077](https://www.sqlalchemy.org/trac/ticket/1077)'
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1077](https://www.sqlalchemy.org/trac/ticket/1077)
- en: 0.5.0rc2
  id: totrans-2990
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc2
- en: 'Released: Sun Oct 12 2008'
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年10月12日星期日
- en: orm
  id: totrans-2992
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug involving read/write relation()s that contain literal or other non-column
    expressions within their primaryjoin condition equated to a foreign key column.
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及包含文字或其他非列表达式的read/write relation()在其primaryjoin条件中等于外键列的错误。
- en: '**[orm]**'
  id: totrans-2995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”non-batch” mode in mapper(), a feature which allows mapper extension methods
    to be called as each instance is updated/inserted, now honors the insert order
    of the objects given.
  id: totrans-2996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper()中的“non-batch”模式，这个功能允许在每个实例更新/插入时调用mapper扩展方法，现在遵守给定对象的插入顺序。
- en: '**[orm]**'
  id: totrans-2997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects.
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mapper中与RLock相关的bug，该bug可能在重新进入的mapper compile()调用时发生死锁，这种情况发生在在ForeignKey对象中使用声明性构造时。
- en: '**[orm]**'
  id: totrans-2999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ScopedSession.query_property now accepts a query_cls factory, overriding the
    session’s configured query_cls.
  id: totrans-3000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ScopedSession.query_property现在接受一个query_cls工厂，覆盖了会话配置的query_cls。
- en: '**[orm]**'
  id: totrans-3001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shared state bug interfering with ScopedSession.mapper’s ability to apply
    default __init__ implementations on object subclasses.
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了共享状态bug，干扰了ScopedSession.mapper在对象子类上应用默认__init__实现的能力。
- en: '**[orm]**'
  id: totrans-3003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed up slices on Query (i.e. query[x:y]) to work properly for zero length
    slices, slices with None on either end.
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query上的切片（即query[x:y]）对于零长度切片、两端为None的切片的正确工作。
- en: 'References: [#1177](https://www.sqlalchemy.org/trac/ticket/1177)'
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1177](https://www.sqlalchemy.org/trac/ticket/1177)
- en: '**[orm]**'
  id: totrans-3006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an example illustrating Celko’s “nested sets” as a SQLA mapping.
  id: totrans-3007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个示例，说明了Celko的“嵌套集合”作为SQLA映射的方法。
- en: '**[orm]**'
  id: totrans-3008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() with an alias argument works even when the alias is embedded
    in a SELECT, as when sent to the Query via query.select_from().
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含带有别名参数的contains_eager()即使别名嵌入在SELECT中，也可以在通过query.select_from()发送到查询时正常工作。
- en: '**[orm]**'
  id: totrans-3010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() usage is now compatible with a Query that also contains a regular
    eager load and limit/offset, in that the columns are added to the Query-generated
    subquery.
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager()的用法现在与同时包含常规急加载和限制/偏移的查询兼容，因为列被添加到由查询生成的子查询中。
- en: 'References: [#1180](https://www.sqlalchemy.org/trac/ticket/1180)'
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1180](https://www.sqlalchemy.org/trac/ticket/1180)
- en: '**[orm]**'
  id: totrans-3013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.execute() will execute a Sequence object passed to it (regression from
    0.4).
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.execute()将执行传递给它的Sequence对象（从0.4版本中的回归）。
- en: '**[orm]**'
  id: totrans-3015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed the “raiseerror” keyword argument from object_mapper() and class_mapper().
    These functions raise in all cases if the given class/instance is not mapped.
  id: totrans-3016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从object_mapper()和class_mapper()中删除了“raiseerror”关键字参数。如果给定的类/实例未映射，这些函数在所有情况下都会引发异常。
- en: '**[orm]**'
  id: totrans-3017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed session.transaction.commit() on a autocommit=False session not starting
    a new transaction.
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在autocommit=False会话上调用session.transaction.commit()不启动新事务的问题。
- en: '**[orm]**'
  id: totrans-3019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some adjustments to Session.identity_map’s weak referencing behavior to reduce
    asynchronous GC side effects.
  id: totrans-3020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对Session.identity_map的弱引用行为进行了一些调整，以减少异步GC的副作用。
- en: '**[orm]**'
  id: totrans-3021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjustment to Session’s post-flush accounting of newly “clean” objects to better
    protect against operating on objects as they’re asynchronously gc’ed.
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了Session在后刷新时对新“干净”对象的计数，以更好地防止在异步gc时对对象进行操作。
- en: 'References: [#1182](https://www.sqlalchemy.org/trac/ticket/1182)'
  id: totrans-3023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1182](https://www.sqlalchemy.org/trac/ticket/1182)
- en: sql
  id: totrans-3024
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  id: totrans-3026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.in_(someselect)现在可以作为一个列子句表达式使用，而不会导致子查询泄漏到FROM子句中
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1074](https://www.sqlalchemy.org/trac/ticket/1074)
- en: mysql
  id: totrans-3028
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Temporary tables are now reflectable.
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 临时表现在可以反射。
- en: sqlite
  id: totrans-3031
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Overhauled SQLite date/time bind/result processing to use regular expressions
    and format strings, rather than strptime/strftime, to generically support pre-1900
    dates, dates with microseconds.
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SQLite日期/时间绑定/结果处理进行了全面改进，使用正则表达式和格式字符串，而不是strptime/strftime，以通用支持1900年前的日期、带微秒的日期。
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  id: totrans-3034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#968](https://www.sqlalchemy.org/trac/ticket/968)
- en: '**[sqlite]**'
  id: totrans-3035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlite方言中禁用了String（以及Unicode，UnicodeText等）的convert_unicode逻辑，以适应pysqlite 2.5.0的新要求，即只接受Python
    unicode对象；[https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
- en: oracle
  id: totrans-3037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle will detect string-based statements which contain comments at the front
    before a SELECT as SELECT statements.
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle将检测包含在SELECT之前的字符串语句中的注释作为SELECT语句。
- en: 'References: [#1187](https://www.sqlalchemy.org/trac/ticket/1187)'
  id: totrans-3040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1187](https://www.sqlalchemy.org/trac/ticket/1187)
- en: orm
  id: totrans-3041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug involving read/write relation()s that contain literal or other non-column
    expressions within their primaryjoin condition equated to a foreign key column.
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及包含文字或其他非列表达式的 read/write relation() 在其 primaryjoin 条件中等于外键列的 bug。
- en: '**[orm]**'
  id: totrans-3044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”non-batch” mode in mapper(), a feature which allows mapper extension methods
    to be called as each instance is updated/inserted, now honors the insert order
    of the objects given.
  id: totrans-3045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ”非批量”模式在 mapper() 中，这个特性允许在每个实例更新/插入时调用映射扩展方法，现在遵循给定对象的插入顺序。
- en: '**[orm]**'
  id: totrans-3046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects.
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mapper 中与 RLock 相关的 bug，该 bug 可能在重新进入 mapper compile() 调用时发生死锁，这种情况发生在 ForeignKey
    对象中使用声明性构造时。
- en: '**[orm]**'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ScopedSession.query_property now accepts a query_cls factory, overriding the
    session’s configured query_cls.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ScopedSession.query_property 现在接受一个 query_cls 工厂，覆盖了会话配置的 query_cls。
- en: '**[orm]**'
  id: totrans-3050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shared state bug interfering with ScopedSession.mapper’s ability to apply
    default __init__ implementations on object subclasses.
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了共享状态 bug，干扰了 ScopedSession.mapper 对对象子类应用默认 __init__ 实现的能力。
- en: '**[orm]**'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed up slices on Query (i.e. query[x:y]) to work properly for zero length
    slices, slices with None on either end.
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 上的切片（即 query[x:y]）对于零长度切片、任一端为 None 的切片的正确工作。
- en: 'References: [#1177](https://www.sqlalchemy.org/trac/ticket/1177)'
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1177](https://www.sqlalchemy.org/trac/ticket/1177)
- en: '**[orm]**'
  id: totrans-3055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added an example illustrating Celko’s “nested sets” as a SQLA mapping.
  id: totrans-3056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个示例，说明了 Celko 的“嵌套集”作为 SQLA 映射。
- en: '**[orm]**'
  id: totrans-3057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() with an alias argument works even when the alias is embedded
    in a SELECT, as when sent to the Query via query.select_from().
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含了一个别名参数的 contains_eager() 在 SELECT 中嵌入别名时也能正常工作，就像通过 query.select_from() 发送给
    Query 一样。
- en: '**[orm]**'
  id: totrans-3059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: contains_eager() usage is now compatible with a Query that also contains a regular
    eager load and limit/offset, in that the columns are added to the Query-generated
    subquery.
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager() 的用法现在与同时包含常规 eager load 和 limit/offset 的 Query 兼容，因此列被添加到 Query
    生成的子查询中。
- en: 'References: [#1180](https://www.sqlalchemy.org/trac/ticket/1180)'
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1180](https://www.sqlalchemy.org/trac/ticket/1180)
- en: '**[orm]**'
  id: totrans-3062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.execute() will execute a Sequence object passed to it (regression from
    0.4).
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.execute() 现在可以执行传递给它的 Sequence 对象（从 0.4 版本中的回归）。
- en: '**[orm]**'
  id: totrans-3064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed the “raiseerror” keyword argument from object_mapper() and class_mapper().
    These functions raise in all cases if the given class/instance is not mapped.
  id: totrans-3065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 object_mapper() 和 class_mapper() 中移除了“raiseerror”关键字参数。如果给定的类/实例未映射，这些函数在所有情况下都会引发异常。
- en: '**[orm]**'
  id: totrans-3066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed session.transaction.commit() on a autocommit=False session not starting
    a new transaction.
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 autocommit=False 会话上调用 session.transaction.commit() 未启动新事务的 bug。
- en: '**[orm]**'
  id: totrans-3068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some adjustments to Session.identity_map’s weak referencing behavior to reduce
    asynchronous GC side effects.
  id: totrans-3069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 Session.identity_map 的弱引用行为进行了一些调整，以减少异步 GC 的副作用。
- en: '**[orm]**'
  id: totrans-3070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Adjustment to Session’s post-flush accounting of newly “clean” objects to better
    protect against operating on objects as they’re asynchronously gc’ed.
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 Session 在后刷新时对新“干净”对象的计数，以更好地防止在对象异步 gc 时对其进行操作。
- en: 'References: [#1182](https://www.sqlalchemy.org/trac/ticket/1182)'
  id: totrans-3072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1182](https://www.sqlalchemy.org/trac/ticket/1182)
- en: sql
  id: totrans-3073
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column.in_(someselect) can now be used as a columns-clause expression without
    the subquery bleeding into the FROM clause
  id: totrans-3075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.in_(someselect) 现在可以作为一个列子句表达式使用，而不会导致子查询泄漏到 FROM 子句中。
- en: 'References: [#1074](https://www.sqlalchemy.org/trac/ticket/1074)'
  id: totrans-3076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1074](https://www.sqlalchemy.org/trac/ticket/1074)
- en: mysql
  id: totrans-3077
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Temporary tables are now reflectable.
  id: totrans-3079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 临时表现在可以反射。
- en: sqlite
  id: totrans-3080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Overhauled SQLite date/time bind/result processing to use regular expressions
    and format strings, rather than strptime/strftime, to generically support pre-1900
    dates, dates with microseconds.
  id: totrans-3082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQLite 日期/时间绑定/结果处理进行了全面改进，使用正则表达式和格式字符串，而不是 strptime/strftime，以通用支持 1900
    年前的日期、带微秒的日期。
- en: 'References: [#968](https://www.sqlalchemy.org/trac/ticket/968)'
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#968](https://www.sqlalchemy.org/trac/ticket/968)
- en: '**[sqlite]**'
  id: totrans-3084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: String’s (and Unicode’s, UnicodeText’s, etc.) convert_unicode logic disabled
    in the sqlite dialect, to adjust for pysqlite 2.5.0’s new requirement that only
    Python unicode objects are accepted; [https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
  id: totrans-3085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlite方言中禁用了String（和Unicode，UnicodeText等）的convert_unicode逻辑，以适应pysqlite 2.5.0的新要求，即只接受Python
    unicode对象；[https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html](https://itsystementwicklung.de/pipermail/list-pysqlite/2008-March/000018.html)
- en: oracle
  id: totrans-3086
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle will detect string-based statements which contain comments at the front
    before a SELECT as SELECT statements.
  id: totrans-3088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle将检测包含在SELECT之前的前面的注释的基于字符串的语句作为SELECT语句。
- en: 'References: [#1187](https://www.sqlalchemy.org/trac/ticket/1187)'
  id: totrans-3089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1187](https://www.sqlalchemy.org/trac/ticket/1187)
- en: 0.5.0rc1
  id: totrans-3090
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0rc1
- en: 'Released: Thu Sep 11 2008'
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Sep 11 2008
- en: orm
  id: totrans-3092
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query now has delete() and update(values) methods. This allows to perform bulk
    deletes/updates with the Query object.
  id: totrans-3094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query现在具有delete()和update(values)方法。这允许使用Query对象执行批量删除/更新。
- en: '**[orm]**'
  id: totrans-3095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The RowTuple object returned by Query(*cols) now features keynames which prefer
    mapped attribute names over column keys, column keys over column names, i.e. Query(Class.foo,
    Class.bar) will have names “foo” and “bar” even if those are not the names of
    the underlying Column objects. Direct Column objects such as Query(table.c.col)
    will return the “key” attribute of the Column.
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query(*cols)返回的RowTuple对象现在具有keynames，它们更喜欢映射属性名称而不是列键，列键而不是列名称，即Query(Class.foo,
    Class.bar)将具有名称“foo”和“bar”，即使它们不是基础Column对象的名称。直接的Column对象，如Query(table.c.col)，将���回Column的“key”属性。
- en: '**[orm]**'
  id: totrans-3097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added scalar() and value() methods to Query, each return a single scalar value.
    scalar() takes no arguments and is roughly equivalent to first()[0], value() takes
    a single column expression and is roughly equivalent to values(expr).next()[0].
  id: totrans-3098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向Query添加了scalar()和value()方法，每个方法返回单个标量值。scalar()不带参数，大致相当于first()[0]，value()接受单个列表达式，大致相当于values(expr).next()[0]。
- en: '**[orm]**'
  id: totrans-3099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the determination of the FROM clause when placing SQL expressions in
    the query() list of entities. In particular scalar subqueries should not “leak”
    their inner FROM objects out into the enclosing query.
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在将SQL表达式放置在查询()实体列表中时确定FROM子句的方法。特别是标量子查询不应该将其内部FROM对象泄漏到封闭查询中。
- en: '**[orm]**'
  id: totrans-3101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Joins along a relation() from a mapped class to a mapped subclass, where the
    mapped subclass is configured with single table inheritance, will include an IN
    clause which limits the subtypes of the joined class to those requested, within
    the ON clause of the join. This takes effect for eager load joins as well as query.join().
    Note that in some scenarios the IN clause will appear in the WHERE clause of the
    query as well since this discrimination has multiple trigger points.
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过从映射类到映射子类的关系()进行连接，其中映射子类配置为单表继承，将在连接的ON子句中包含一个IN子句，该子句将限制所请求的连接类的子类型。这对急加载连接以及query.join()都有效。请注意，在某些情况下，由于此区分具有多个触发点，IN子句也将出现在查询的WHERE子句中。
- en: '**[orm]**'
  id: totrans-3103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: AttributeExtension has been refined such that the event is fired before the
    mutation actually occurs. Additionally, the append() and set() methods must now
    return the given value, which is used as the value to be used in the mutation
    operation. This allows creation of validating AttributeListeners which raise before
    the action actually occurs, and which can change the given value into something
    else before its used.
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AttributeExtension已经得到改进，使得事件在实际发生变化之前被触发。此外，append()和set()方法现在必须返回给定的值，该值用作要在变异操作中使用的值。这允许创建验证AttributeListeners，它们在实际操作发生之前引发，并且可以将给定的值更改为其他值。
- en: '**[orm]**'
  id: totrans-3105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: column_property(), composite_property(), and relation() now accept a single
    or list of AttributeExtensions using the “extension” keyword argument.
  id: totrans-3106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_property()，composite_property()和relation()现在接受一个单个或AttributeExtensions列表，使用“extension”关键字参数。
- en: '**[orm]**'
  id: totrans-3107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by().get() silently drops the “ORDER BY” from the query issued by
    GET but does not raise an exception.
  id: totrans-3108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by().get()会在GET发出的查询中静默删除“ORDER BY”，但不会引发异常。
- en: '**[orm]**'
  id: totrans-3109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a Validator AttributeExtension, as well as a @validates decorator which
    is used in a similar fashion as @reconstructor, and marks a method as validating
    one or more mapped attributes.
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个验证器AttributeExtension，以及一个@validates装饰器，类似于@reconstructor，标记一个方法验证一个或多个映射属性。
- en: '**[orm]**'
  id: totrans-3111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: class.someprop.in_() raises NotImplementedError pending the implementation of
    “in_” for relation
  id: totrans-3112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: class.someprop.in_()在关系的“in_”实现之前引发NotImplementedError
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140)'
  id: totrans-3113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1140](https://www.sqlalchemy.org/trac/ticket/1140)
- en: '**[orm]**'
  id: totrans-3114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed primary key update for many-to-many collections where the collection had
    not been loaded yet
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了许多对多集合的主键更新，其中集合尚未加载的bug
- en: 'References: [#1127](https://www.sqlalchemy.org/trac/ticket/1127)'
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1127](https://www.sqlalchemy.org/trac/ticket/1127)
- en: '**[orm]**'
  id: totrans-3117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby deferred() columns with a group in conjunction with an otherwise
    unrelated synonym() would produce an AttributeError during deferred load.
  id: totrans-3118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具有组合在一起的deferred()列与与其无关的synonym()一起产生AttributeError的bug。
- en: '**[orm]**'
  id: totrans-3119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The before_flush() hook on SessionExtension takes place before the list of new/dirty/deleted
    is calculated for the final time, allowing routines within before_flush() to further
    change the state of the Session before the flush proceeds.
  id: totrans-3120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SessionExtension的before_flush()钩子在最终计算新/脏/已删除列表之前发生，允许在flush继续之前在before_flush()中进一步更改Session的状态。
- en: 'References: [#1128](https://www.sqlalchemy.org/trac/ticket/1128)'
  id: totrans-3121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1128](https://www.sqlalchemy.org/trac/ticket/1128)
- en: '**[orm]**'
  id: totrans-3122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “extension” argument to Session and others can now optionally be a list,
    supporting events sent to multiple SessionExtension instances. Session places
    SessionExtensions in Session.extensions.
  id: totrans-3123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session和其他对象的“extension”参数现在可以选择性地是一个列表，支持发送到多个SessionExtension实例的事件。 Session将SessionExtensions放在Session.extensions中。
- en: '**[orm]**'
  id: totrans-3124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reentrant calls to flush() raise an error. This also serves as a rudimentary,
    but not foolproof, check against concurrent calls to Session.flush().
  id: totrans-3125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对flush()的可重入调用会引发错误。 这也作为针对Session.flush()的并发调用的基本但不是绝对可靠的检查。
- en: '**[orm]**'
  id: totrans-3126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the behavior of query.join() when joining to joined-table inheritance
    subclasses, using explicit join criteria (i.e. not on a relation).
  id: totrans-3127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在使用显式连接条件（即不是在关系上）连接到继承子类时，query.join()的行为。
- en: '**[orm]**'
  id: totrans-3128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: '@orm.attributes.reconstitute and MapperExtension.reconstitute have been renamed
    to @orm.reconstructor and MapperExtension.reconstruct_instance'
  id: totrans-3129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@orm.attributes.reconstitute和MapperExtension.reconstitute已重命名为@orm.reconstructor和MapperExtension.reconstruct_instance'
- en: '**[orm]**'
  id: totrans-3130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed @reconstructor hook for subclasses which inherit from a base class.
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从基类继承的子类的@reconstructor钩子。
- en: 'References: [#1129](https://www.sqlalchemy.org/trac/ticket/1129)'
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1129](https://www.sqlalchemy.org/trac/ticket/1129)
- en: '**[orm]**'
  id: totrans-3133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The composite() property type now supports a __set_composite_values__() method
    on the composite class which is required if the class represents state using attribute
    names other than the column’s keynames; default-generated values now get populated
    properly upon flush. Also, composites with attributes set to None compare correctly.
  id: totrans-3134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: composite()属性类型现在支持在复合类上的__set_composite_values__()方法，如果该类使用属性名称而不是列的键名来表示状态，则需要该方法；默认生成的值现在在flush时正确填充。此外，将属性设置为None的复合类现在可以正确比较。
- en: 'References: [#1132](https://www.sqlalchemy.org/trac/ticket/1132)'
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1132](https://www.sqlalchemy.org/trac/ticket/1132)
- en: '**[orm]**'
  id: totrans-3136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The 3-tuple of iterables returned by attributes.get_history() may now be a mix
    of lists and tuples. (Previously members were always lists.)
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由attributes.get_history()返回的三元组现在可以是列表和元组的混合。 （以前成员总是列表。）
- en: '**[orm]**'
  id: totrans-3138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby changing a primary key attribute on an entity where the attribute’s
    previous value had been expired would produce an error upon flush().
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在更改实体上的主键属性时，如果属性的先前值已过期，则在flush()时会产生错误的错误。
- en: 'References: [#1151](https://www.sqlalchemy.org/trac/ticket/1151)'
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1151](https://www.sqlalchemy.org/trac/ticket/1151)
- en: '**[orm]**'
  id: totrans-3141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed custom instrumentation bug whereby get_instance_dict() was not called
    for newly constructed instances not loaded by the ORM.
  id: totrans-3142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义仪器化bug，其中对于ORM尚未加载的新构造实例未调用get_instance_dict()。
- en: '**[orm]**'
  id: totrans-3143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.delete() adds the given object to the session if not already present.
    This was a regression bug from 0.4.
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定对象尚未存在，则Session.delete()将该对象添加到会话中。这是从0.4版本开始的一个回归错误。
- en: 'References: [#1150](https://www.sqlalchemy.org/trac/ticket/1150)'
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1150](https://www.sqlalchemy.org/trac/ticket/1150)
- en: '**[orm]**'
  id: totrans-3146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The echo_uow flag on Session is deprecated, and unit-of-work logging is now
    application-level only, not per-session level.
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session上的echo_uow标志已弃用，现在单元操作日志记录仅适用于应用程序级别，而不是每个会话级别。
- en: '**[orm]**'
  id: totrans-3148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed conflicting contains() operator from InstrumentedAttribute which didn’t
    accept escape kwaarg.
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从InstrumentedAttribute中删除了冲突的contains()运算符，该运算符不接受escape kwaarg。
- en: 'References: [#1153](https://www.sqlalchemy.org/trac/ticket/1153)'
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1153](https://www.sqlalchemy.org/trac/ticket/1153)
- en: sql
  id: totrans-3151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Temporarily rolled back the “ORDER BY” enhancement from. This feature is on
    hold pending further development.
  id: totrans-3153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 暂时回滚了“ORDER BY”增强功能。此功能暂停等待进一步开发。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: '**[sql]**'
  id: totrans-3155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The exists() construct won’t “export” its contained list of elements as FROM
    clauses, allowing them to be used more effectively in the columns clause of a
    SELECT.
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exists()构造不会将其包含的元素列表作为FROM子句“导出”，这使得它们可以更有效地在SELECT的列子句中使用。
- en: '**[sql]**'
  id: totrans-3157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: and_() and or_() now generate a ColumnElement, allowing boolean expressions
    as result columns, i.e. select([and_(1, 0)]).
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: and_()和or_()现在生成ColumnElement，允许布尔表达式作为结果列，例如select([and_(1, 0)]）。
- en: 'References: [#798](https://www.sqlalchemy.org/trac/ticket/798)'
  id: totrans-3159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#798](https://www.sqlalchemy.org/trac/ticket/798)
- en: '**[sql]**'
  id: totrans-3160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Bind params now subclass ColumnElement which allows them to be selectable by
    orm.query (they already had most ColumnElement semantics).
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绑定参数现在是ColumnElement的子类，这使得它们可以被orm.query选择（它们已经具有大多数ColumnElement语义）。
- en: '**[sql]**'
  id: totrans-3162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added select_from() method to exists() construct, which becomes more and more
    compatible with a regular select().
  id: totrans-3163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为exists()构造添加了select_from()方法，使其与常规select()更加兼容。
- en: '**[sql]**'
  id: totrans-3164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added func.min(), func.max(), func.sum() as “generic functions”, which basically
    allows for their return type to be determined automatically. Helps with dates
    on SQLite, decimal types, others.
  id: totrans-3165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了func.min()，func.max()，func.sum()作为“通用函数”，基本上允许它们的返回类型自动确定。有助于SQLite上的日期，十进制类型等。
- en: 'References: [#1160](https://www.sqlalchemy.org/trac/ticket/1160)'
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1160](https://www.sqlalchemy.org/trac/ticket/1160)
- en: '**[sql]**'
  id: totrans-3167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added decimal.Decimal as an “auto-detect” type; bind parameters and generic
    functions will set their type to Numeric when a Decimal is used.
  id: totrans-3168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了decimal.Decimal作为“自动检测”类型；当使用Decimal时，绑定参数和通用函数将将它们的类型设置为Numeric。
- en: schema
  id: totrans-3169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-3170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added “sorted_tables” accessor to MetaData, which returns Table objects sorted
    in order of dependency as a list. This deprecates the MetaData.table_iterator()
    method. The “reverse=False” keyword argument has also been removed from util.sort_tables();
    use the Python ‘reversed’ function to reverse the results.
  id: totrans-3171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“sorted_tables”访问器到MetaData，它返回按依赖顺序排序的Table对象列表。这使得MetaData.table_iterator()方法已被弃用。util.sort_tables()中的“reverse=False”关键字参数也已被移除；使用Python的‘reversed’函数来反转结果。
- en: 'References: [#1033](https://www.sqlalchemy.org/trac/ticket/1033)'
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1033](https://www.sqlalchemy.org/trac/ticket/1033)
- en: '**[schema]**'
  id: totrans-3173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The ‘length’ argument to all Numeric types has been renamed to ‘scale’. ‘length’
    is deprecated and is still accepted with a warning.
  id: totrans-3174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有数字类型的“长度”参数已更名为“精度”。 “长度”已被弃用，但仍会发出警告。
- en: '**[schema]**'
  id: totrans-3175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Dropped 0.3-compatibility for user defined types (convert_result_value, convert_bind_param).
  id: totrans-3176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放弃了对用户定义类型（convert_result_value，convert_bind_param）的0.3兼容性。
- en: mysql
  id: totrans-3177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The ‘length’ argument to MSInteger, MSBigInteger, MSTinyInteger, MSSmallInteger
    and MSYear has been renamed to ‘display_width’.
  id: totrans-3179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSInteger，MSBigInteger，MSTinyInteger，MSSmallInteger和MSYear的“长度”参数已更名为“显示宽度”。
- en: '**[mysql]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added MSMediumInteger type.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了MSMediumInteger类型。
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1146](https://www.sqlalchemy.org/trac/ticket/1146)
- en: '**[mysql]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the function func.utc_timestamp() compiles to UTC_TIMESTAMP, without the parenthesis,
    which seem to get in the way when using in conjunction with executemany().
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数func.utc_timestamp()编译为UTC_TIMESTAMP，不带括号，这似乎在与executemany()一起使用时会有问题。
- en: oracle
  id: totrans-3185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: limit/offset no longer uses ROW NUMBER OVER to limit rows, and instead uses
    subqueries in conjunction with a special Oracle optimization comment. Allows LIMIT/OFFSET
    to work in conjunction with DISTINCT.
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: limit/offset不再使用ROW NUMBER OVER来限制行数，而是与特殊的Oracle优化注释一起使用子查询。允许LIMIT/OFFSET与DISTINCT一起使用。
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#536](https://www.sqlalchemy.org/trac/ticket/536)
- en: '**[oracle]**'
  id: totrans-3189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: has_sequence() now takes the current “schema” argument into account
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: has_sequence()现在考虑当前的“模式”参数
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  id: totrans-3191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1155](https://www.sqlalchemy.org/trac/ticket/1155)
- en: '**[oracle]**'
  id: totrans-3192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added BFILE to reflected type names
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了BFILE到反射类型名称
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1121](https://www.sqlalchemy.org/trac/ticket/1121)
- en: misc
  id: totrans-3195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-3196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug whereby mapper couldn’t initialize if a composite primary key referenced
    another table that was not defined yet.
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果复合主键引用另一个尚未定义的表，则映射器无法初始化的 bug。
- en: 'References: [#1161](https://www.sqlalchemy.org/trac/ticket/1161)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1161](https://www.sqlalchemy.org/trac/ticket/1161)
- en: '**[declarative]**'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed exception throw which would occur when string-based primaryjoin condition
    was used in conjunction with backref.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用基于字符串的 primaryjoin 条件与 backref 结合使用时会抛出异常的 bug。
- en: orm
  id: totrans-3201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query now has delete() and update(values) methods. This allows to perform bulk
    deletes/updates with the Query object.
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 现在具有 delete() 和 update(values) 方法。这允许使用 Query 对象执行批量删除/更新。
- en: '**[orm]**'
  id: totrans-3204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The RowTuple object returned by Query(*cols) now features keynames which prefer
    mapped attribute names over column keys, column keys over column names, i.e. Query(Class.foo,
    Class.bar) will have names “foo” and “bar” even if those are not the names of
    the underlying Column objects. Direct Column objects such as Query(table.c.col)
    will return the “key” attribute of the Column.
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query(*cols) 返回的 RowTuple 对象现在具有 keynames，优先使用映射属性名称而不是列键，列键优先于列名称，即 Query(Class.foo,
    Class.bar) 将具有名称“foo”和“bar”，即使这些不是底层 Column 对象的名称���直接的 Column 对象，如 Query(table.c.col)，将返回
    Column 的“key”属性。
- en: '**[orm]**'
  id: totrans-3206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added scalar() and value() methods to Query, each return a single scalar value.
    scalar() takes no arguments and is roughly equivalent to first()[0], value() takes
    a single column expression and is roughly equivalent to values(expr).next()[0].
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 现在具有 scalar() 和 value() 方法，每个方法返回一个单个标量值。scalar() 不带参数，大致相当于 first()[0]，value()
    接受一个列表达式，大致相当于 values(expr).next()[0]。
- en: '**[orm]**'
  id: totrans-3208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the determination of the FROM clause when placing SQL expressions in
    the query() list of entities. In particular scalar subqueries should not “leak”
    their inner FROM objects out into the enclosing query.
  id: totrans-3209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在将 SQL 表达式放置在实体的 query() 列表中时确定 FROM 子句的方法。特别是标量子查询不应该将其内部的 FROM 对象泄漏到封闭查询中。
- en: '**[orm]**'
  id: totrans-3210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Joins along a relation() from a mapped class to a mapped subclass, where the
    mapped subclass is configured with single table inheritance, will include an IN
    clause which limits the subtypes of the joined class to those requested, within
    the ON clause of the join. This takes effect for eager load joins as well as query.join().
    Note that in some scenarios the IN clause will appear in the WHERE clause of the
    query as well since this discrimination has multiple trigger points.
  id: totrans-3211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从映射类到映射子类的 relation() 连接，其中映射子类配置为单表继承，将包括一个 IN 子句，限制连接类的子类型为请求的子类型，在连接的 ON
    子句中生效。这适用于急加载连接以及 query.join()。请注意，在某些情况下，由于此区分具有多个触发点，IN 子句也会出现在查询的 WHERE 子句中。
- en: '**[orm]**'
  id: totrans-3212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: AttributeExtension has been refined such that the event is fired before the
    mutation actually occurs. Additionally, the append() and set() methods must now
    return the given value, which is used as the value to be used in the mutation
    operation. This allows creation of validating AttributeListeners which raise before
    the action actually occurs, and which can change the given value into something
    else before its used.
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AttributeExtension 已经得到改进，使事件在实际发生变化之前触发。此外，append() 和 set() 方法现在必须返回给定的值，该值用作要在变异操作中使用的值。这允许创建验证
    AttributeListeners，在实际操作发生之前引发，并且可以将给定的值更改为其他值。
- en: '**[orm]**'
  id: totrans-3214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: column_property(), composite_property(), and relation() now accept a single
    or list of AttributeExtensions using the “extension” keyword argument.
  id: totrans-3215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_property()、composite_property() 和 relation() 现在接受一个或多个 AttributeExtensions，使用“extension”关键字参数。
- en: '**[orm]**'
  id: totrans-3216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query.order_by().get() silently drops the “ORDER BY” from the query issued by
    GET but does not raise an exception.
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query.order_by().get() 会在 GET 发出的查询中静默删除“ORDER BY”，但不会引发异常。
- en: '**[orm]**'
  id: totrans-3218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a Validator AttributeExtension, as well as a @validates decorator which
    is used in a similar fashion as @reconstructor, and marks a method as validating
    one or more mapped attributes.
  id: totrans-3219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个验证器属性扩展（Validator AttributeExtension），以及一个 @validates 装饰器，类似于 @reconstructor，标记一个方法验证一个或多个映射属性。
- en: '**[orm]**'
  id: totrans-3220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: class.someprop.in_() raises NotImplementedError pending the implementation of
    “in_” for relation
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: class.someprop.in_() 在 relation 的“in_”实现之前会引发 NotImplementedError
- en: 'References: [#1140](https://www.sqlalchemy.org/trac/ticket/1140)'
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1140](https://www.sqlalchemy.org/trac/ticket/1140)
- en: '**[orm]**'
  id: totrans-3223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed primary key update for many-to-many collections where the collection had
    not been loaded yet
  id: totrans-3224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在尚未加载集合的多对多集合的主键更新问题
- en: 'References: [#1127](https://www.sqlalchemy.org/trac/ticket/1127)'
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1127](https://www.sqlalchemy.org/trac/ticket/1127)
- en: '**[orm]**'
  id: totrans-3226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby deferred() columns with a group in conjunction with an otherwise
    unrelated synonym() would produce an AttributeError during deferred load.
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了具有组并与否无关的synonym()的deferred()列在延迟加载期间会产生AttributeError的bug。
- en: '**[orm]**'
  id: totrans-3228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The before_flush() hook on SessionExtension takes place before the list of new/dirty/deleted
    is calculated for the final time, allowing routines within before_flush() to further
    change the state of the Session before the flush proceeds.
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SessionExtension上的before_flush()钩子在最终计算新/脏/已删除列表之前发生，允许在flush继续之前在before_flush()中进一步更改Session的状态。
- en: 'References: [#1128](https://www.sqlalchemy.org/trac/ticket/1128)'
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1128](https://www.sqlalchemy.org/trac/ticket/1128)
- en: '**[orm]**'
  id: totrans-3231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “extension” argument to Session and others can now optionally be a list,
    supporting events sent to multiple SessionExtension instances. Session places
    SessionExtensions in Session.extensions.
  id: totrans-3232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “extension”参数现在可以选择性地是一个列表，支持发送到多个SessionExtension实例的事件。Session将SessionExtensions放在Session.extensions中。
- en: '**[orm]**'
  id: totrans-3233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Reentrant calls to flush() raise an error. This also serves as a rudimentary,
    but not foolproof, check against concurrent calls to Session.flush().
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对flush()的重入调用会引发错误。这也作为针对Session.flush()的并发调用的基本但不是绝对可靠的检查。
- en: '**[orm]**'
  id: totrans-3235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Improved the behavior of query.join() when joining to joined-table inheritance
    subclasses, using explicit join criteria (i.e. not on a relation).
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.join()在连接到连接表继承子类时的行为，使用显式的连接条件（即不是在关系上）。
- en: '**[orm]**'
  id: totrans-3237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: '@orm.attributes.reconstitute and MapperExtension.reconstitute have been renamed
    to @orm.reconstructor and MapperExtension.reconstruct_instance'
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@orm.attributes.reconstitute和MapperExtension.reconstitute已重命名为@orm.reconstructor和MapperExtension.reconstruct_instance'
- en: '**[orm]**'
  id: totrans-3239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed @reconstructor hook for subclasses which inherit from a base class.
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从基类继承的子类的@reconstructor钩子。
- en: 'References: [#1129](https://www.sqlalchemy.org/trac/ticket/1129)'
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1129](https://www.sqlalchemy.org/trac/ticket/1129)
- en: '**[orm]**'
  id: totrans-3242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The composite() property type now supports a __set_composite_values__() method
    on the composite class which is required if the class represents state using attribute
    names other than the column’s keynames; default-generated values now get populated
    properly upon flush. Also, composites with attributes set to None compare correctly.
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: composite()属性类型现在支持composite类上的__set_composite_values__()方法，如果该类使用除列键名之外的属性名称表示状态，则该方法是必需的；默认生成的值现在在flush时正确填充。此外，将属性设置为None的复合体现在比较时是正确的。
- en: 'References: [#1132](https://www.sqlalchemy.org/trac/ticket/1132)'
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1132](https://www.sqlalchemy.org/trac/ticket/1132)
- en: '**[orm]**'
  id: totrans-3245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The 3-tuple of iterables returned by attributes.get_history() may now be a mix
    of lists and tuples. (Previously members were always lists.)
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: attributes.get_history()返回的三元组现在可以是列表和元组的混合。（以前成员总是列表。）
- en: '**[orm]**'
  id: totrans-3247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby changing a primary key attribute on an entity where the attribute’s
    previous value had been expired would produce an error upon flush().
  id: totrans-3248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在属性的先前值已过期的实体上更改主键属性会在flush()时产生错误的bug。
- en: 'References: [#1151](https://www.sqlalchemy.org/trac/ticket/1151)'
  id: totrans-3249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1151](https://www.sqlalchemy.org/trac/ticket/1151)
- en: '**[orm]**'
  id: totrans-3250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed custom instrumentation bug whereby get_instance_dict() was not called
    for newly constructed instances not loaded by the ORM.
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义仪器bug，其中get_instance_dict()未对未由ORM加载的新构造实例调用。
- en: '**[orm]**'
  id: totrans-3252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.delete() adds the given object to the session if not already present.
    This was a regression bug from 0.4.
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果给定对象尚未存在，则Session.delete()将给定对象添加到会话中。这是从0.4版本开始的一个回归bug。
- en: 'References: [#1150](https://www.sqlalchemy.org/trac/ticket/1150)'
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1150](https://www.sqlalchemy.org/trac/ticket/1150)
- en: '**[orm]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The echo_uow flag on Session is deprecated, and unit-of-work logging is now
    application-level only, not per-session level.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session上的echo_uow标志已弃用，工作单元日志现在仅适用于应用程序级别，而不是每个会话级别。
- en: '**[orm]**'
  id: totrans-3257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Removed conflicting contains() operator from InstrumentedAttribute which didn’t
    accept escape kwaarg.
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从InstrumentedAttribute中删除了冲突的contains()运算符，该运算符不接受escape kwaarg。
- en: 'References: [#1153](https://www.sqlalchemy.org/trac/ticket/1153)'
  id: totrans-3259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1153](https://www.sqlalchemy.org/trac/ticket/1153)
- en: sql
  id: totrans-3260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Temporarily rolled back the “ORDER BY” enhancement from. This feature is on
    hold pending further development.
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 暂时回滚了“ORDER BY”增强功能。该功能暂停等待进一步开发。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: '**[sql]**'
  id: totrans-3264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The exists() construct won’t “export” its contained list of elements as FROM
    clauses, allowing them to be used more effectively in the columns clause of a
    SELECT.
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exists()构造不会将其包含的元素列表作为FROM子句“导出”，这样可以更有效地在SELECT的columns子句中使用它们。
- en: '**[sql]**'
  id: totrans-3266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: and_() and or_() now generate a ColumnElement, allowing boolean expressions
    as result columns, i.e. select([and_(1, 0)]).
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: and_()和or_()现在生成ColumnElement，允许布尔表达式作为结果列，即select([and_(1, 0)]).
- en: 'References: [#798](https://www.sqlalchemy.org/trac/ticket/798)'
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#798](https://www.sqlalchemy.org/trac/ticket/798)
- en: '**[sql]**'
  id: totrans-3269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Bind params now subclass ColumnElement which allows them to be selectable by
    orm.query (they already had most ColumnElement semantics).
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绑定参数现在是ColumnElement的子类，这使它们可以被orm.query选择（它们已经具有大多数ColumnElement语义）。
- en: '**[sql]**'
  id: totrans-3271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added select_from() method to exists() construct, which becomes more and more
    compatible with a regular select().
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为exists()构造添加了select_from()方法，使其与常规select()更加兼容。
- en: '**[sql]**'
  id: totrans-3273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added func.min(), func.max(), func.sum() as “generic functions”, which basically
    allows for their return type to be determined automatically. Helps with dates
    on SQLite, decimal types, others.
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了func.min()、func.max()、func.sum()作为“通用函数”，基本上允许它们的返回类型自动确定。有助于SQLite上的日期、十进制类型等。
- en: 'References: [#1160](https://www.sqlalchemy.org/trac/ticket/1160)'
  id: totrans-3275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1160](https://www.sqlalchemy.org/trac/ticket/1160)
- en: '**[sql]**'
  id: totrans-3276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added decimal.Decimal as an “auto-detect” type; bind parameters and generic
    functions will set their type to Numeric when a Decimal is used.
  id: totrans-3277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了decimal.Decimal作为“自动检测”类型；当使用Decimal时，绑定参数和通用函数将将它们的类型设置为Numeric。
- en: schema
  id: totrans-3278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-3279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added “sorted_tables” accessor to MetaData, which returns Table objects sorted
    in order of dependency as a list. This deprecates the MetaData.table_iterator()
    method. The “reverse=False” keyword argument has also been removed from util.sort_tables();
    use the Python ‘reversed’ function to reverse the results.
  id: totrans-3280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“sorted_tables”访问器到MetaData，它返回按依赖顺序排序的Table对���列表。这使MetaData.table_iterator()方法过时。util.sort_tables()中的“reverse=False”关键字参数也已被移除；使用Python的‘reversed’函数来反转结果。
- en: 'References: [#1033](https://www.sqlalchemy.org/trac/ticket/1033)'
  id: totrans-3281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1033](https://www.sqlalchemy.org/trac/ticket/1033)
- en: '**[schema]**'
  id: totrans-3282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: The ‘length’ argument to all Numeric types has been renamed to ‘scale’. ‘length’
    is deprecated and is still accepted with a warning.
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有Numeric类型的‘length’参数已重命名为‘scale’。‘length’已被弃用，但仍会发出警告。
- en: '**[schema]**'
  id: totrans-3284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Dropped 0.3-compatibility for user defined types (convert_result_value, convert_bind_param).
  id: totrans-3285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放弃了用户定义类型（convert_result_value, convert_bind_param）的0.3兼容性。
- en: mysql
  id: totrans-3286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The ‘length’ argument to MSInteger, MSBigInteger, MSTinyInteger, MSSmallInteger
    and MSYear has been renamed to ‘display_width’.
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSInteger、MSBigInteger、MSTinyInteger、MSSmallInteger和MSYear的‘length’参数已重命名为‘display_width’。
- en: '**[mysql]**'
  id: totrans-3289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Added MSMediumInteger type.
  id: totrans-3290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了MSMediumInteger类型。
- en: 'References: [#1146](https://www.sqlalchemy.org/trac/ticket/1146)'
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1146](https://www.sqlalchemy.org/trac/ticket/1146)
- en: '**[mysql]**'
  id: totrans-3292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: the function func.utc_timestamp() compiles to UTC_TIMESTAMP, without the parenthesis,
    which seem to get in the way when using in conjunction with executemany().
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数func.utc_timestamp()编译为UTC_TIMESTAMP，不带括号，当与executemany()一起使用时，括号似乎会妨碍使用。
- en: oracle
  id: totrans-3294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: limit/offset no longer uses ROW NUMBER OVER to limit rows, and instead uses
    subqueries in conjunction with a special Oracle optimization comment. Allows LIMIT/OFFSET
    to work in conjunction with DISTINCT.
  id: totrans-3296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: limit/offset不再使用ROW NUMBER OVER来限制行数，而是与特殊的Oracle优化注释一起使用子查询。允许LIMIT/OFFSET与DISTINCT一起使用。
- en: 'References: [#536](https://www.sqlalchemy.org/trac/ticket/536)'
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#536](https://www.sqlalchemy.org/trac/ticket/536)
- en: '**[oracle]**'
  id: totrans-3298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: has_sequence() now takes the current “schema” argument into account
  id: totrans-3299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: has_sequence()现在考虑了当前的“schema”参数
- en: 'References: [#1155](https://www.sqlalchemy.org/trac/ticket/1155)'
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1155](https://www.sqlalchemy.org/trac/ticket/1155)
- en: '**[oracle]**'
  id: totrans-3301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added BFILE to reflected type names
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将BFILE添加到反射类型名称中
- en: 'References: [#1121](https://www.sqlalchemy.org/trac/ticket/1121)'
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1121](https://www.sqlalchemy.org/trac/ticket/1121)
- en: misc
  id: totrans-3304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[declarative]**'
  id: totrans-3305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed bug whereby mapper couldn’t initialize if a composite primary key referenced
    another table that was not defined yet.
  id: totrans-3306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果复合主键引用另一个尚未定义的表，则映射器无法初始化。
- en: 'References: [#1161](https://www.sqlalchemy.org/trac/ticket/1161)'
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1161](https://www.sqlalchemy.org/trac/ticket/1161)
- en: '**[declarative]**'
  id: totrans-3308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[declarative]**'
- en: Fixed exception throw which would occur when string-based primaryjoin condition
    was used in conjunction with backref.
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用backref时使用基于字符串的primaryjoin条件时可能发生的异常抛出。
- en: 0.5.0beta3
  id: totrans-3310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0beta3
- en: 'Released: Mon Aug 04 2008'
  id: totrans-3311
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2008年8月4日星期一
- en: orm
  id: totrans-3312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “entity_name” feature of SQLAlchemy mappers has been removed. For rationale,
    see [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy映射器的“entity_name”功能已被移除。有关原因，请参见[https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
- en: '**[orm]**'
  id: totrans-3315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “autoexpire” flag on Session, sessionmaker(), and scoped_session() has been
    renamed to “expire_on_commit”. It does not affect the expiration behavior of rollback().
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session、sessionmaker()和scoped_session()上的“autoexpire”标志已重命名为“expire_on_commit”。它不会影响rollback()的过期行为。
- en: '**[orm]**'
  id: totrans-3317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed endless loop bug which could occur within a mapper’s deferred load of
    inherited attributes.
  id: totrans-3318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在映射器延迟加载继承属性时可能发生的无限循环错误。
- en: '**[orm]**'
  id: totrans-3319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a legacy-support flag “_enable_transaction_accounting” flag added to Session
    which when False, disables all transaction-level object accounting, including
    expire on rollback, expire on commit, new/deleted list maintenance, and autoflush
    on begin.
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Session添加了一个名为“_enable_transaction_accounting”的遗留支持标志，当为False时，禁用所有事务级对象计数，包括回滚时的过期，提交时的过期，新建/删除列表维护以及在开始时的自动刷新。
- en: '**[orm]**'
  id: totrans-3321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ‘cascade’ parameter to relation() accepts None as a value, which is equivalent
    to no cascades.
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()的“cascade”参数接受None作为值，这等效于没有级联。
- en: '**[orm]**'
  id: totrans-3323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A critical fix to dynamic relations allows the “modified” history to be properly
    cleared after a flush().
  id: totrans-3324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复动态关系的关键问题，允许在flush()之后正确清除“修改后”的历史记录。
- en: '**[orm]**'
  id: totrans-3325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: user-defined @properties on a class are detected and left in place during mapper
    initialization. This means that a table-bound column of the same name will not
    be mapped at all if a @property is in the way (and the column is not remapped
    to a different name), nor will an instrumented attribute from an inherited class
    be applied. The same rules apply for names excluded using the include_properties/exclude_properties
    collections.
  id: totrans-3326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类上的用户定义的@property在映射器初始化期间被检测并保留在原位。这意味着如果@property挡住了同名的表绑定列（且该列未被重新映射为不同名称），或者从继承类中继承的instrumented属性被应用，那么同名的表绑定列将根本不会被映射。使用include_properties/exclude_properties集合排除的名称也适用相同的规则。
- en: '**[orm]**'
  id: totrans-3327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new SessionExtension hook called after_attach(). This is called at the
    point of attachment for objects via add(), add_all(), delete(), and merge().
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个名为after_attach()的新SessionExtension钩子。这在通过add()、add_all()、delete()和merge()附加对象时调用。
- en: '**[orm]**'
  id: totrans-3329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A mapper which inherits from another, when inheriting the columns of its inherited
    mapper, will use any reassigned property names specified in that inheriting mapper.
    Previously, if “Base” had reassigned “base_id” to the name “id”, “SubBase(Base)”
    would still get an attribute called “base_id”. This could be worked around by
    explicitly stating the column in each submapper as well but this is fairly unworkable
    and also impossible when using declarative.
  id: totrans-3330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继承自另一个映射器的映射器，在继承其继承映射器的列时，将使用在该继承映射器中指定的任何重新分配的属性名称。以前，如果“Base”将“base_id”重新分配为名称“id”，那么“SubBase(Base)”仍将获得名为“base_id”的属性。可以通过在每个子映射器中明确声明列来解决此问题，但这在使用声明性时也是相当不可行的。
- en: 'References: [#1111](https://www.sqlalchemy.org/trac/ticket/1111)'
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1111](https://www.sqlalchemy.org/trac/ticket/1111)
- en: '**[orm]**'
  id: totrans-3332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a series of potential race conditions in Session whereby asynchronous
    GC could remove unmodified, no longer referenced items from the session as they
    were present in a list of items to be processed, typically during session.expunge_all()
    and dependent methods.
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Session中潜在的一系列竞争条件，异步GC可能会在session.expunge_all()和相关方法期间将未修改且不再引用的项目从会话中移除，因为它们存在于要处理的项目列表中。
- en: '**[orm]**'
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some improvements to the _CompileOnAttr mechanism which should reduce the probability
    of “Attribute x was not replaced during compile” warnings. (this generally applies
    to SQLA hackers, like Elixir devs).
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于应该减少“在编译期间未替换属性x”警告概率的_CompileOnAttr机制进行了一些改进。（这通常适用于SQLA黑客，如Elixir开发人员）。
- en: '**[orm]**'
  id: totrans-3336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the “unsaved, pending instance” FlushError raised for a pending
    orphan would not take superclass mappers into account when generating the list
    of relations responsible for the error.
  id: totrans-3337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即对于挂起的孤立实例，如果在生成负责错误的关系列表时不考虑超类映射器，则会引发“未保存的挂起实例”FlushError。
- en: sql
  id: totrans-3338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.count() with no arguments renders as COUNT(*), equivalent to func.count(text(‘*’)).
  id: totrans-3340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.count()如果没有参数，则呈现为COUNT(*)，相当于func.count(text(‘*’))。
- en: '**[sql]**'
  id: totrans-3341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: simple label names in ORDER BY expressions render as themselves, and not as
    a re-statement of their corresponding expression. This feature is currently enabled
    only for SQLite, MySQL, and PostgreSQL. It can be enabled on other dialects as
    each is shown to support this behavior.
  id: totrans-3342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORDER BY表达式中的简单标签名称呈现为它们自身，而不是其对应表达式的重新陈述。此功能目前仅对SQLite、MySQL和PostgreSQL启用。可以在其他方言上启用此行为，只要每个方言都支持此行为。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: mysql
  id: totrans-3344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Quoting of MSEnum values for use in CREATE TABLE is now optional & will be quoted
    on demand as required. (Quoting was always optional for use with existing tables.)
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建表时，对于MSEnum值的引用现在是可选的，并且将根据需要进行引用。（对于现有表的使用，引用始终是可选的。）
- en: 'References: [#1110](https://www.sqlalchemy.org/trac/ticket/1110)'
  id: totrans-3347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1110](https://www.sqlalchemy.org/trac/ticket/1110)
- en: misc
  id: totrans-3348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-3349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Class-bound attributes sent as arguments to relation()’s remote_side and foreign_keys
    parameters are now accepted, allowing them to be used with declarative. Additionally
    fixed bugs involving order_by being specified as a class-bound attribute in conjunction
    with eager loading.
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为参数发送给relation()的remote_side和foreign_keys参数的类绑定属性现在被接受，允许它们与declarative一起使用。此外，修复了在与急加载一起指定为类绑定属性的order_by时出现的错误。
- en: '**[ext]**'
  id: totrans-3351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: declarative initialization of Columns adjusted so that non-renamed columns initialize
    in the same way as a non declarative mapper. This allows an inheriting mapper
    to set up its same-named “id” columns in particular such that the parent “id”
    column is favored over the child column, reducing database round trips when this
    value is requested.
  id: totrans-3352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了列的声明式初始化，使得非重命名列以与非声明式映射器相同的方式初始化。这允许继承映射器设置其同名的“id”列，以便父“id”列优先于子列，减少请求此值时的数据库往返。
- en: orm
  id: totrans-3353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “entity_name” feature of SQLAlchemy mappers has been removed. For rationale,
    see [https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
  id: totrans-3355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy映射器的“entity_name”功能已被移除。有关原因，请参见[https://tinyurl.com/6nm2ne](https://tinyurl.com/6nm2ne)
- en: '**[orm]**'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “autoexpire” flag on Session, sessionmaker(), and scoped_session() has been
    renamed to “expire_on_commit”. It does not affect the expiration behavior of rollback().
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session、sessionmaker()和scoped_session()上的“autoexpire”标志已重命名为“expire_on_commit”。它不影响rollback()的过期行为。
- en: '**[orm]**'
  id: totrans-3358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed endless loop bug which could occur within a mapper’s deferred load of
    inherited attributes.
  id: totrans-3359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在映射器的延迟加载中可能发生的无限循环错误。
- en: '**[orm]**'
  id: totrans-3360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a legacy-support flag “_enable_transaction_accounting” flag added to Session
    which when False, disables all transaction-level object accounting, including
    expire on rollback, expire on commit, new/deleted list maintenance, and autoflush
    on begin.
  id: totrans-3361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Session添加了一个名为“_enable_transaction_accounting”的遗留支持标志，当为False时，禁用所有事务级对象计数，包括回滚时的expire，提交时的expire，新建/删除列表维护以及begin时的自动刷新。
- en: '**[orm]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The ‘cascade’ parameter to relation() accepts None as a value, which is equivalent
    to no cascades.
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relation()的“cascade”参数接受None作为值，这等效于不进行级联。
- en: '**[orm]**'
  id: totrans-3364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A critical fix to dynamic relations allows the “modified” history to be properly
    cleared after a flush().
  id: totrans-3365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于动态关系的关键修复允许在flush()后正确清除“modified”历史记录。
- en: '**[orm]**'
  id: totrans-3366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: user-defined @properties on a class are detected and left in place during mapper
    initialization. This means that a table-bound column of the same name will not
    be mapped at all if a @property is in the way (and the column is not remapped
    to a different name), nor will an instrumented attribute from an inherited class
    be applied. The same rules apply for names excluded using the include_properties/exclude_properties
    collections.
  id: totrans-3367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类中的用户定义的@property属性在映射器初始化期间被检测并保留在原位。这意味着如果@property属性挡在路上，那么具有相同名称的表绑定列将根本不被映射（且列未被重新映射为不同名称），也不会应用来自继承类的instrumented属性。使用include_properties/exclude_properties集合排除的名称也适用相同的规则。
- en: '**[orm]**'
  id: totrans-3368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added a new SessionExtension hook called after_attach(). This is called at the
    point of attachment for objects via add(), add_all(), delete(), and merge().
  id: totrans-3369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个名为after_attach()的新的SessionExtension钩子。这在通过add()、add_all()、delete()和merge()附加对象时调用。
- en: '**[orm]**'
  id: totrans-3370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: A mapper which inherits from another, when inheriting the columns of its inherited
    mapper, will use any reassigned property names specified in that inheriting mapper.
    Previously, if “Base” had reassigned “base_id” to the name “id”, “SubBase(Base)”
    would still get an attribute called “base_id”. This could be worked around by
    explicitly stating the column in each submapper as well but this is fairly unworkable
    and also impossible when using declarative.
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个继承自另一个映射器的映射器继承其继承映射器中重新分配的属性名称时，将使用在继承映射器中指定的重新分配的属性名称。以前，如果“Base”将“base_id”重新分配为名称“id”，那么“SubBase(Base)”仍将获得一个名为“base_id”的属性。可以通过在每个子映射器中明确声明列来解决此问题，但这在使用声明性时也是相当不可行的。
- en: 'References: [#1111](https://www.sqlalchemy.org/trac/ticket/1111)'
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1111](https://www.sqlalchemy.org/trac/ticket/1111)
- en: '**[orm]**'
  id: totrans-3373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed a series of potential race conditions in Session whereby asynchronous
    GC could remove unmodified, no longer referenced items from the session as they
    were present in a list of items to be processed, typically during session.expunge_all()
    and dependent methods.
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Session中潜在的一系列竞争条件，在异步GC可能会从会话中删除未修改���、不再引用的项目，因为它们存在于要处理的项目列表中，通常在session.expunge_all()和相关方法期间。
- en: '**[orm]**'
  id: totrans-3375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Some improvements to the _CompileOnAttr mechanism which should reduce the probability
    of “Attribute x was not replaced during compile” warnings. (this generally applies
    to SQLA hackers, like Elixir devs).
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于应该减少“在编译期间未替换属性x”警告概率的_CompileOnAttr机制进行了一些改进（这通常适用于SQLA黑客，如Elixir开发人员）。
- en: '**[orm]**'
  id: totrans-3377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug whereby the “unsaved, pending instance” FlushError raised for a pending
    orphan would not take superclass mappers into account when generating the list
    of relations responsible for the error.
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即对于挂起的孤立实例引发的“未保存的挂起实例”FlushError在生成负责错误的关系列表时不会考虑超类映射器。
- en: sql
  id: totrans-3379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: func.count() with no arguments renders as COUNT(*), equivalent to func.count(text(‘*’)).
  id: totrans-3381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有参数的func.count()呈现为COUNT(*)，相当于func.count(text(‘*’))。
- en: '**[sql]**'
  id: totrans-3382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: simple label names in ORDER BY expressions render as themselves, and not as
    a re-statement of their corresponding expression. This feature is currently enabled
    only for SQLite, MySQL, and PostgreSQL. It can be enabled on other dialects as
    each is shown to support this behavior.
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORDER BY表达式中的简单标签名称呈现为它们自身，而不是其对应表达式的重新陈述。目前，此功能仅对SQLite、MySQL和PostgreSQL启用。可以在其他方言上启用此行为，因为每个方言都显示支持此行为。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: mysql
  id: totrans-3385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Quoting of MSEnum values for use in CREATE TABLE is now optional & will be quoted
    on demand as required. (Quoting was always optional for use with existing tables.)
  id: totrans-3387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在CREATE TABLE中使用的MSEnum值的引用现在是可选的，并将根据需要进行引用。 （对于与现有表一起使用，引用始终是可选的。）
- en: 'References: [#1110](https://www.sqlalchemy.org/trac/ticket/1110)'
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1110](https://www.sqlalchemy.org/trac/ticket/1110)
- en: misc
  id: totrans-3389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: Class-bound attributes sent as arguments to relation()’s remote_side and foreign_keys
    parameters are now accepted, allowing them to be used with declarative. Additionally
    fixed bugs involving order_by being specified as a class-bound attribute in conjunction
    with eager loading.
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为relation()的remote_side和foreign_keys参数的参数发送给类绑定属性现在被接受，允许它们与声明性一起使用。此外，修复了在与急加载一起指定order_by作为类绑定属性时涉及的错误。
- en: '**[ext]**'
  id: totrans-3392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: declarative initialization of Columns adjusted so that non-renamed columns initialize
    in the same way as a non declarative mapper. This allows an inheriting mapper
    to set up its same-named “id” columns in particular such that the parent “id”
    column is favored over the child column, reducing database round trips when this
    value is requested.
  id: totrans-3393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了列的声明式初始化，使得非重命名列以与非声明式映射器相同的方式初始化。这允许继承映射器特别设置其同名的“id”列，以便父“id”列优先于子列，减少在请求此值时的数据库往返次数。
- en: 0.5.0beta2
  id: totrans-3394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0beta2
- en: 'Released: Mon Jul 14 2008'
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Mon Jul 14 2008
- en: orm
  id: totrans-3396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: In addition to expired attributes, deferred attributes also load if their data
    is present in the result set.
  id: totrans-3398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了过期属性外，延迟属性也会在结果集中存在其数据时加载。
- en: 'References: [#870](https://www.sqlalchemy.org/trac/ticket/870)'
  id: totrans-3399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#870](https://www.sqlalchemy.org/trac/ticket/870)
- en: '**[orm]**'
  id: totrans-3400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() raises an informative error message if the list of attributes
    does not include any column-based attributes.
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果属性列表不包含任何基于列的属性，则session.refresh()会引发一个信息性错误消息。
- en: '**[orm]**'
  id: totrans-3402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query() raises an informative error message if no columns or mappers are specified.
  id: totrans-3403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未指定列或映射器，则 query() 会引发一个信息丰富的错误消息。
- en: '**[orm]**'
  id: totrans-3404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: lazy loaders now trigger autoflush before proceeding. This allows expire() of
    a collection or scalar relation to function properly in the context of autoflush.
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 惰性加载器现在在继续之前会触发自动刷新。这允许在自动刷新的上下文中正确地执行集合或标量关系的 expire()。
- en: '**[orm]**'
  id: totrans-3406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: column_property() attributes which represent SQL expressions or columns that
    are not present in the mapped tables (such as those from views) are automatically
    expired after an INSERT or UPDATE, assuming they have not been locally modified,
    so that they are refreshed with the most recent data upon access.
  id: totrans-3407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_property() 属性代表 SQL 表达式或映射表中不存在的列（例如来自视图的列），在 INSERT 或 UPDATE 后会自动过期，假设它们没有被本地修改，以便在访问时使用最新的数据进行刷新。
- en: 'References: [#887](https://www.sqlalchemy.org/trac/ticket/887)'
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#887](https://www.sqlalchemy.org/trac/ticket/887)
- en: '**[orm]**'
  id: totrans-3409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed explicit, self-referential joins between two joined-table inheritance
    mappers when using query.join(cls, aliased=True).
  id: totrans-3410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 query.join(cls, aliased=True) 时两个连接表继承映射器之间的显式自引用连接。
- en: 'References: [#1082](https://www.sqlalchemy.org/trac/ticket/1082)'
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1082](https://www.sqlalchemy.org/trac/ticket/1082)
- en: '**[orm]**'
  id: totrans-3412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed query.join() when used in conjunction with a columns-only clause and a
    SQL-expression ON clause in the join.
  id: totrans-3413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与仅包含列子句和 SQL 表达式 ON 子句一起使用时的 query.join()。
- en: '**[orm]**'
  id: totrans-3414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “allow_column_override” flag from mapper() has been removed. This flag is
    virtually always misunderstood. Its specific functionality is available via the
    include_properties/exclude_properties mapper arguments.
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper() 中的 “allow_column_override” 标志已被移除。这个标志几乎总是被误解。其特定功能可以通过 include_properties/exclude_properties
    mapper 参数来实现。
- en: '**[orm]**'
  id: totrans-3416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired __str__() method on Query.
  id: totrans-3417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Query 上的 __str__() 方法。
- en: 'References: [#1066](https://www.sqlalchemy.org/trac/ticket/1066)'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1066](https://www.sqlalchemy.org/trac/ticket/1066)
- en: '**[orm]**'
  id: totrans-3419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.bind gets used as a default even when table/mapper specific binds are
    defined.
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使定义了表/映射器特定绑定，Session.bind 也会被默认使用。
- en: sql
  id: totrans-3421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new match() operator that performs a full-text search. Supported on PostgreSQL,
    SQLite, MySQL, MS-SQL, and Oracle backends.
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 match() 操作符，执行全文搜索。在 PostgreSQL、SQLite、MySQL、MS-SQL 和 Oracle 后端支持。
- en: schema
  id: totrans-3424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-3425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added prefixes option to Table that accepts a list of strings to insert after
    CREATE in the CREATE TABLE statement.
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Table 添加了 prefixes 选项，它接受一个字符串列表，用于在 CREATE TABLE 语句中的 CREATE 之后插入。
- en: 'References: [#1075](https://www.sqlalchemy.org/trac/ticket/1075)'
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1075](https://www.sqlalchemy.org/trac/ticket/1075)
- en: '**[schema]**'
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Unicode, UnicodeText types now set “assert_unicode” and “convert_unicode” by
    default, but accept overriding **kwargs for these values.
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode、UnicodeText 类型现在默认设置 “assert_unicode” 和 “convert_unicode”，但可以接受这些值的覆盖
    **kwargs。
- en: extensions
  id: totrans-3430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-3431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative supports a __table_args__ class variable, which is either a dictionary,
    or tuple of the form (arg1, arg2, …, {kwarg1:value, …}) which contains positional
    + kw arguments to be passed to the Table constructor.
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 支持一个名为 __table_args__ 的类变量，它可以是一个字典，或者一个形如 (arg1, arg2, …, {kwarg1:value,
    …}) 的元组，其中包含传递给 Table 构造函数的位置参数和关键字参数。
- en: 'References: [#1096](https://www.sqlalchemy.org/trac/ticket/1096)'
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1096](https://www.sqlalchemy.org/trac/ticket/1096)
- en: sqlite
  id: totrans-3434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Modified SQLite’s representation of “microseconds” to match the output of str(somedatetime),
    i.e. in that the microseconds are represented as fractional seconds in string
    format. This makes SQLA’s SQLite date type compatible with datetimes that were
    saved directly using Pysqlite (which just calls str()). Note that this is incompatible
    with the existing microseconds values in a SQLA 0.4 generated SQLite database
    file.
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 SQLite 对 “微秒” 的表示，使其与 str(somedatetime) 的输出匹配，即微秒以字符串格式的小数秒表示。这使得 SQLA 的
    SQLite 日期类型与直接使用 Pysqlite 保存的日期时间兼容（它只是调用 str()）。请注意，这与 SQLA 0.4 生成的 SQLite 数据库文件中现有的微秒值不兼容。
- en: 'To get the old behavior globally:'
  id: totrans-3437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要全局获取旧行为：
- en: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
  id: totrans-3438
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
- en: 'To get the behavior on individual DateTime types:'
  id: totrans-3439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在个别 DateTime 类型上获取行为：
- en: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
  id: totrans-3440
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
- en: Then use “t” as the type on the Column.
  id: totrans-3441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在 Column 上使用 “t” 作为类型。
- en: 'References: [#1090](https://www.sqlalchemy.org/trac/ticket/1090)'
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#1090](https://www.sqlalchemy.org/trac/ticket/1090)
- en: '**[sqlite]**'
  id: totrans-3443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: SQLite Date, DateTime, and Time types only accept Python datetime objects now,
    not strings. If you’d like to format dates as strings yourself with SQLite, use
    a String type. If you’d like them to return datetime objects anyway despite their
    accepting strings as input, make a TypeDecorator around String - SQLA doesn’t
    encourage this pattern.
  id: totrans-3444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite的Date、DateTime和Time类型现在只接受Python datetime对象，而不是字符串。如果您想要自己用SQLite格式化日期为字符串，请使用String类型。如果您希望它们无论如何返回datetime对象，尽管它们接受字符串作为输入，请使用TypeDecorator包装String
    - SQLA不鼓励这种模式。
- en: orm
  id: totrans-3445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: In addition to expired attributes, deferred attributes also load if their data
    is present in the result set.
  id: totrans-3447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了过期属性，延迟属性也会在结果集中加载。
- en: 'References: [#870](https://www.sqlalchemy.org/trac/ticket/870)'
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#870](https://www.sqlalchemy.org/trac/ticket/870)
- en: '**[orm]**'
  id: totrans-3449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.refresh() raises an informative error message if the list of attributes
    does not include any column-based attributes.
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果属性列表不包含任何基于列的属性，session.refresh()会引发一个信息性错误消息。
- en: '**[orm]**'
  id: totrans-3451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: query() raises an informative error message if no columns or mappers are specified.
  id: totrans-3452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未指定列或映射器，query()会引发一个信息性错误消息。
- en: '**[orm]**'
  id: totrans-3453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: lazy loaders now trigger autoflush before proceeding. This allows expire() of
    a collection or scalar relation to function properly in the context of autoflush.
  id: totrans-3454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 惰性加载器现在在继续之前会触发自动刷新。这允许在自动刷新的上下文中使集合或标量关系的expire()函数正常工作。
- en: '**[orm]**'
  id: totrans-3455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: column_property() attributes which represent SQL expressions or columns that
    are not present in the mapped tables (such as those from views) are automatically
    expired after an INSERT or UPDATE, assuming they have not been locally modified,
    so that they are refreshed with the most recent data upon access.
  id: totrans-3456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_property()属性代表SQL表达式或映射表中不存在的列（例如来自视图的列），在INSERT或UPDATE后会自动过期，假设它们没有在本地修改，以便在访问时使用最新数据进行刷新。
- en: 'References: [#887](https://www.sqlalchemy.org/trac/ticket/887)'
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#887](https://www.sqlalchemy.org/trac/ticket/887)
- en: '**[orm]**'
  id: totrans-3458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed explicit, self-referential joins between two joined-table inheritance
    mappers when using query.join(cls, aliased=True).
  id: totrans-3459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用query.join(cls, aliased=True)时两个连接表继承映射器之间的显式自引用连接。
- en: 'References: [#1082](https://www.sqlalchemy.org/trac/ticket/1082)'
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1082](https://www.sqlalchemy.org/trac/ticket/1082)
- en: '**[orm]**'
  id: totrans-3461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed query.join() when used in conjunction with a columns-only clause and a
    SQL-expression ON clause in the join.
  id: totrans-3462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.join()在与仅列子句和SQL表达式ON子句一起使用时的问题。
- en: '**[orm]**'
  id: totrans-3463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: The “allow_column_override” flag from mapper() has been removed. This flag is
    virtually always misunderstood. Its specific functionality is available via the
    include_properties/exclude_properties mapper arguments.
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()中的“allow_column_override”标志已被移除。这个标志几乎总是被误解。其特定功能可以通过mapper参数中的include_properties/exclude_properties实现。
- en: '**[orm]**'
  id: totrans-3465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Repaired __str__() method on Query.
  id: totrans-3466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Query上的__str__()方法。
- en: 'References: [#1066](https://www.sqlalchemy.org/trac/ticket/1066)'
  id: totrans-3467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1066](https://www.sqlalchemy.org/trac/ticket/1066)
- en: '**[orm]**'
  id: totrans-3468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Session.bind gets used as a default even when table/mapper specific binds are
    defined.
  id: totrans-3469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使定义了特定于表/映射器的绑定，Session.bind仍然作为默认值使用。
- en: sql
  id: totrans-3470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added new match() operator that performs a full-text search. Supported on PostgreSQL,
    SQLite, MySQL, MS-SQL, and Oracle backends.
  id: totrans-3472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的match()操作符，执行全文搜索。在PostgreSQL、SQLite、MySQL、MS-SQL和Oracle后端支持。
- en: schema
  id: totrans-3473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-3474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Added prefixes option to Table that accepts a list of strings to insert after
    CREATE in the CREATE TABLE statement.
  id: totrans-3475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table添加了一个prefixes选项，接受一个字符串列表，在CREATE TABLE语句中的CREATE后插入。
- en: 'References: [#1075](https://www.sqlalchemy.org/trac/ticket/1075)'
  id: totrans-3476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1075](https://www.sqlalchemy.org/trac/ticket/1075)
- en: '**[schema]**'
  id: totrans-3477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Unicode, UnicodeText types now set “assert_unicode” and “convert_unicode” by
    default, but accept overriding **kwargs for these values.
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode、UnicodeText类型现在默认设置为“assert_unicode”和“convert_unicode”，但接受这些值的覆盖**kwargs。
- en: extensions
  id: totrans-3479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-3480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: Declarative supports a __table_args__ class variable, which is either a dictionary,
    or tuple of the form (arg1, arg2, …, {kwarg1:value, …}) which contains positional
    + kw arguments to be passed to the Table constructor.
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative支持一个__table_args__类变量，它可以是一个字典，或者是一个元组形式的(arg1, arg2, …, {kwarg1:value,
    …})，其中包含传递给Table构造函数的位置参数和关键字参数。
- en: 'References: [#1096](https://www.sqlalchemy.org/trac/ticket/1096)'
  id: totrans-3482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1096](https://www.sqlalchemy.org/trac/ticket/1096)
- en: sqlite
  id: totrans-3483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-3484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Modified SQLite’s representation of “microseconds” to match the output of str(somedatetime),
    i.e. in that the microseconds are represented as fractional seconds in string
    format. This makes SQLA’s SQLite date type compatible with datetimes that were
    saved directly using Pysqlite (which just calls str()). Note that this is incompatible
    with the existing microseconds values in a SQLA 0.4 generated SQLite database
    file.
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 SQLite 对“微秒”的表示，使其与 str(somedatetime) 的输出匹配，即微秒以字符串格式表示为分数秒。这使得 SQLA 的 SQLite
    日期类型与直接使用 Pysqlite（仅调用 str()）保存的日期时间兼容。请注意，这与 SQLA 0.4 生成的 SQLite 数据库文件中现有微秒值不兼容。
- en: 'To get the old behavior globally:'
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要全局获得旧的行为：
- en: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
  id: totrans-3487
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: from sqlalchemy.databases.sqlite import DateTimeMixin DateTimeMixin.__legacy_microseconds__
    = True
- en: 'To get the behavior on individual DateTime types:'
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在个别 DateTime 类型上获得此行为：
- en: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
  id: totrans-3489
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: t = sqlite.SLDateTime() t.__legacy_microseconds__ = True
- en: Then use “t” as the type on the Column.
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在 Column 上使用“t”作为类型。
- en: 'References: [#1090](https://www.sqlalchemy.org/trac/ticket/1090)'
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1090](https://www.sqlalchemy.org/trac/ticket/1090)
- en: '**[sqlite]**'
  id: totrans-3492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: SQLite Date, DateTime, and Time types only accept Python datetime objects now,
    not strings. If you’d like to format dates as strings yourself with SQLite, use
    a String type. If you’d like them to return datetime objects anyway despite their
    accepting strings as input, make a TypeDecorator around String - SQLA doesn’t
    encourage this pattern.
  id: totrans-3493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 的 Date、DateTime 和 Time 类型现在只接受 Python datetime 对象，不接受字符串。如果你想要用 SQLite
    格式化日期为字符串，请使用 String 类型。如果你想要它们返回 datetime 对象，尽管它们接受字符串作为输入，请使用 TypeDecorator
    包装 String——SQLA 不鼓励这种模式。
- en: 0.5.0beta1
  id: totrans-3494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5.0beta1
- en: 'Released: Thu Jun 12 2008'
  id: totrans-3495
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Jun 12 2008
- en: general
  id: totrans-3496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-3497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: global “propigate”->”propagate” change.
  id: totrans-3498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“propigate”->“propagate” 更改。
- en: orm
  id: totrans-3499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  id: totrans-3501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union() 函数尊重每个列的“key”，如果它们与列的名称不同。
- en: '**[orm]**'
  id: totrans-3502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed 0.4-only bug preventing composite columns from working properly with inheriting
    mappers
  id: totrans-3503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个仅针对 0.4 版本的 bug，该 bug 阻止复合列与继承映射器正常工作
- en: 'References: [#1199](https://www.sqlalchemy.org/trac/ticket/1199)'
  id: totrans-3504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1199](https://www.sqlalchemy.org/trac/ticket/1199)
- en: '**[orm]**'
  id: totrans-3505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects. Ported from 0.5.
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mapper 中的 RLock 相关 bug，该 bug 在重新进入 mapper compile() 调用时可能导致死锁，当使用 ForeignKey
    对象内部的声明性构造时会发生这种情况。从0.5移植。
- en: '**[orm]**'
  id: totrans-3507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  id: totrans-3508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合类型中的 bug，该 bug 阻止了主键复合类型的变异。
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1213](https://www.sqlalchemy.org/trac/ticket/1213)
- en: '**[orm]**'
  id: totrans-3510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added ScopedSession.is_active accessor.
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 ScopedSession.is_active 访问器。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: '**[orm]**'
  id: totrans-3513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Class-bound accessor can be used as the argument to relation() order_by.
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类绑定访问器可以用作 relation() 的 order_by 参数。
- en: 'References: [#939](https://www.sqlalchemy.org/trac/ticket/939)'
  id: totrans-3515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#939](https://www.sqlalchemy.org/trac/ticket/939)
- en: '**[orm]**'
  id: totrans-3516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shard_id argument on ShardedSession.execute().
  id: totrans-3517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ShardedSession.execute() 上的 shard_id 参数。
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1072](https://www.sqlalchemy.org/trac/ticket/1072)
- en: sql
  id: totrans-3519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate() 检查关闭状态以避免属性错误。
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  id: totrans-3522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1246](https://www.sqlalchemy.org/trac/ticket/1246)
- en: '**[sql]**'
  id: totrans-3523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: NullPool supports reconnect on failure behavior.
  id: totrans-3524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NullPool 支持失败时重新连接的行为。
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1094](https://www.sqlalchemy.org/trac/ticket/1094)
- en: '**[sql]**'
  id: totrans-3526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  id: totrans-3527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine 使用的每种方言缓存现在是一个 WeakKeyDictionary。这样可以防止方言对象被永久引用，对于创建任意数量的引擎或方言的应用程序来说，这是必要的。这会有一点性能损失，将在0.6中解决。
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1299](https://www.sqlalchemy.org/trac/ticket/1299)
- en: '**[sql]**'
  id: totrans-3529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  id: totrans-3530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 反��方法，以便检测到不存在的 cursor.description，触发自动关闭游标，以便在最近版本的 pysqlite 上不会因为调用
    fetchone() 时没有行而失败，后者在没有结果时会引发错误。
- en: mysql
  id: totrans-3531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug in exception raise when FK columns not present during reflection.
  id: totrans-3533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射期间未出现 FK 列时引发异常的 bug。
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  id: totrans-3534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1241](https://www.sqlalchemy.org/trac/ticket/1241)
- en: oracle
  id: totrans-3535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  id: totrans-3537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止接收某些类型的 out 参数的 bug；非常感谢 huddlej at wwu.edu！
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  id: totrans-3538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1265](https://www.sqlalchemy.org/trac/ticket/1265)
- en: misc
  id: totrans-3539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-3540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The “__init__” trigger/decorator added by mapper now attempts to exactly mirror
    the argument signature of the original __init__. The pass-through for ‘_sa_session’
    is no longer implicit- you must allow for this keyword argument in your constructor.
  id: totrans-3541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 mapper 添加的 "__init__" 触发器/装饰器尝试精确复制原始 __init__ 的参数签名。对于 ‘_sa_session’ 的传递不再是隐式的-您必须在构造函数中允许此关键字参数。
- en: '**[no_tags]**'
  id: totrans-3542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: ClassState is renamed to ClassManager.
  id: totrans-3543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClassState 已更名为 ClassManager。
- en: '**[no_tags]**'
  id: totrans-3544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Classes may supply their own InstrumentationManager by providing a __sa_instrumentation_manager__
    property.
  id: totrans-3545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类可以通过提供 __sa_instrumentation_manager__ 属性来提供自己的 InstrumentationManager。
- en: '**[no_tags]**'
  id: totrans-3546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Custom instrumentation may use any mechanism to associate a ClassManager with
    a class and an InstanceState with an instance. Attributes on those objects are
    still the default association mechanism used by SQLAlchemy’s native instrumentation.
  id: totrans-3547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义仪器可以使用任何机制将 ClassManager 与类和 InstanceState 与实例关联起来。这些对象上的属性仍然是 SQLAlchemy
    本机仪器使用的默认关联机制。
- en: '**[no_tags]**'
  id: totrans-3548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Moved entity_name, _sa_session_id, and _instance_key from the instance object
    to the instance state. These values are still available in the old way, which
    is now deprecated, using descriptors attached to the class. A deprecation warning
    will be issued when accessed.
  id: totrans-3549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从实例对象中移动了 entity_name、_sa_session_id 和 _instance_key 到实例状态。这些值仍然以旧方式可用，现在已弃用，使用附加到类的描述符。在访问时将发出弃用警告。
- en: '**[no_tags]**'
  id: totrans-3550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _prepare_instrumentation 的别名 prepare_instrumentation 已被移除。
- en: '**[no_tags]**'
  id: totrans-3552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: sqlalchemy.exceptions has been renamed to sqlalchemy.exc. The module may be
    imported under either name.
  id: totrans-3553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.exceptions 已更名为 sqlalchemy.exc。该模块可以使用任一名称导入。
- en: '**[no_tags]**'
  id: totrans-3554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: ORM-related exceptions are now defined in sqlalchemy.orm.exc. ConcurrentModificationError,
    FlushError, and UnmappedColumnError compatibility aliases are installed in sqlalchemy.exc
    during the import of sqlalchemy.orm.
  id: totrans-3555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 ORM 相关的异常现在在 sqlalchemy.orm.exc 中定义。在导入 sqlalchemy.orm 时，ConcurrentModificationError、FlushError
    和 UnmappedColumnError 的兼容性别名将安装在 sqlalchemy.exc 中。
- en: '**[no_tags]**'
  id: totrans-3556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: sqlalchemy.logging has been renamed to sqlalchemy.log.
  id: totrans-3557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.logging 已更名为 sqlalchemy.log。
- en: '**[no_tags]**'
  id: totrans-3558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The transitional sqlalchemy.log.SADeprecationWarning alias for the warning’s
    definition in sqlalchemy.exc has been removed.
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过渡性别名 sqlalchemy.log.SADeprecationWarning 用于 sqlalchemy.exc 中警告的定义已被移除。
- en: '**[no_tags]**'
  id: totrans-3560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: exc.AssertionError has been removed and usage replaced with Python’s built-in
    AssertionError.
  id: totrans-3561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exc.AssertionError 已被移除，使用 Python 的内置 AssertionError 替换。
- en: '**[no_tags]**'
  id: totrans-3562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The behavior of MapperExtensions attached to multiple, entity_name= primary
    mappers for a single class has been altered. The first mapper() defined for a
    class is the only mapper eligible for the MapperExtension ‘instrument_class’,
    ‘init_instance’ and ‘init_failed’ events. This is backwards incompatible; previously
    the extensions of last mapper defined would receive these events.
  id: totrans-3563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已更改附加到单个类的多个 entity_name= 主映射器的 MapperExtensions 的行为。为类定义的第一个 mapper() 是唯一符合
    MapperExtension 'instrument_class'、'init_instance' 和 'init_failed' 事件的映射器。这是不兼容的；以前定义的最后一个映射器的扩展将接收这些事件。
- en: '**[firebird]**'
  id: totrans-3564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added support for returning values from inserts (2.0+ only), updates and deletes
    (2.1+ only).
  id: totrans-3565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了从插入（仅限2.0+）、更新和删除（仅限2.1+）中返回值的支持。
- en: '**[postgres]**'
  id: totrans-3566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added Index reflection support to Postgres, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  id: totrans-3567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Postgres 的索引反射支持，使用了长期被忽视的优秀补丁，由 Ken Kuhlman 提交。
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  id: totrans-3568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#714](https://www.sqlalchemy.org/trac/ticket/714)
- en: general
  id: totrans-3569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般的
- en: '**[general]**'
  id: totrans-3570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般的]**'
- en: global “propigate”->”propagate” change.
  id: totrans-3571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“propigate”->”propagate”更改。
- en: orm
  id: totrans-3572
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-3573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic_union() function respects the “key” of each Column if they differ
    from the column’s name.
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: polymorphic_union()函数尊重每个Column的“key”，如果它们与列的名称不同。
- en: '**[orm]**'
  id: totrans-3575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed 0.4-only bug preventing composite columns from working properly with inheriting
    mappers
  id: totrans-3576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅在0.4中阻止复合列与继承映射器正常工作的bug
- en: 'References: [#1199](https://www.sqlalchemy.org/trac/ticket/1199)'
  id: totrans-3577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1199](https://www.sqlalchemy.org/trac/ticket/1199)
- en: '**[orm]**'
  id: totrans-3578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed RLock-related bug in mapper which could deadlock upon reentrant mapper
    compile() calls, something that occurs when using declarative constructs inside
    of ForeignKey objects. Ported from 0.5.
  id: totrans-3579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mapper中与RLock相关的bug，该bug可能在重新进入的mapper compile()调用时发生死锁，这在ForeignKey对象内部使用声明性构造时会发生。从0.5移植。
- en: '**[orm]**'
  id: totrans-3580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed bug in composite types which prevented a primary-key composite type from
    being mutated.
  id: totrans-3581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了组合类型中的错误，该错误阻止了主键组合类型的变异。
- en: 'References: [#1213](https://www.sqlalchemy.org/trac/ticket/1213)'
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1213](https://www.sqlalchemy.org/trac/ticket/1213)
- en: '**[orm]**'
  id: totrans-3583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Added ScopedSession.is_active accessor.
  id: totrans-3584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了ScopedSession.is_active访问器。
- en: 'References: [#976](https://www.sqlalchemy.org/trac/ticket/976)'
  id: totrans-3585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#976](https://www.sqlalchemy.org/trac/ticket/976)
- en: '**[orm]**'
  id: totrans-3586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Class-bound accessor can be used as the argument to relation() order_by.
  id: totrans-3587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类绑定访问器可以用作relation() order_by的参数。
- en: 'References: [#939](https://www.sqlalchemy.org/trac/ticket/939)'
  id: totrans-3588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#939](https://www.sqlalchemy.org/trac/ticket/939)
- en: '**[orm]**'
  id: totrans-3589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Fixed shard_id argument on ShardedSession.execute().
  id: totrans-3590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ShardedSession.execute()中的shard_id参数。
- en: 'References: [#1072](https://www.sqlalchemy.org/trac/ticket/1072)'
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1072](https://www.sqlalchemy.org/trac/ticket/1072)
- en: sql
  id: totrans-3592
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-3593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Connection.invalidate() checks for closed status to avoid attribute errors.
  id: totrans-3594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Connection.invalidate()检查关闭状态以避免属性错误。
- en: 'References: [#1246](https://www.sqlalchemy.org/trac/ticket/1246)'
  id: totrans-3595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1246](https://www.sqlalchemy.org/trac/ticket/1246)
- en: '**[sql]**'
  id: totrans-3596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: NullPool supports reconnect on failure behavior.
  id: totrans-3597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NullPool支持失败时重新连接的行为。
- en: 'References: [#1094](https://www.sqlalchemy.org/trac/ticket/1094)'
  id: totrans-3598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1094](https://www.sqlalchemy.org/trac/ticket/1094)
- en: '**[sql]**'
  id: totrans-3599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: The per-dialect cache used by TypeEngine to cache dialect-specific types is
    now a WeakKeyDictionary. This to prevent dialect objects from being referenced
    forever for an application that creates an arbitrarily large number of engines
    or dialects. There is a small performance penalty which will be resolved in 0.6.
  id: totrans-3600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine用于缓存特定于方言的类型的每个方言缓存现在是WeakKeyDictionary。这是为了防止方言对象被引用，以便为创建任意数量的引擎或方言的应用程序永远存在。这会有一点性能损失，将在0.6中解决。
- en: 'References: [#1299](https://www.sqlalchemy.org/trac/ticket/1299)'
  id: totrans-3601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1299](https://www.sqlalchemy.org/trac/ticket/1299)
- en: '**[sql]**'
  id: totrans-3602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed SQLite reflection methods so that non-present cursor.description, which
    triggers an auto-cursor close, will be detected so that no results doesn’t fail
    on recent versions of pysqlite which raise an error when fetchone() called with
    no rows present.
  id: totrans-3603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite反射方法，以便检测到不存在的cursor.description，这会触发自动关闭游标，以便在最近版本的pysqlite上调用fetchone()时不会失败，因为在没有行的情���下会引发错误。
- en: mysql
  id: totrans-3604
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-3605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Fixed bug in exception raise when FK columns not present during reflection.
  id: totrans-3606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射期间未出现FK列时引发异常的bug。
- en: 'References: [#1241](https://www.sqlalchemy.org/trac/ticket/1241)'
  id: totrans-3607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1241](https://www.sqlalchemy.org/trac/ticket/1241)
- en: oracle
  id: totrans-3608
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-3609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Fixed bug which was preventing out params of certain types from being received;
    thanks a ton to huddlej at wwu.edu !
  id: totrans-3610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了某些类型的输出参数被接收；非常感谢wwu.edu的huddlej！
- en: 'References: [#1265](https://www.sqlalchemy.org/trac/ticket/1265)'
  id: totrans-3611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1265](https://www.sqlalchemy.org/trac/ticket/1265)
- en: misc
  id: totrans-3612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[no_tags]**'
  id: totrans-3613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: The “__init__” trigger/decorator added by mapper now attempts to exactly mirror
    the argument signature of the original __init__. The pass-through for ‘_sa_session’
    is no longer implicit- you must allow for this keyword argument in your constructor.
  id: totrans-3614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper添加的“__init__”触发器/装饰器现在尝试精确地模仿原始__init__的参数签名。对于‘_sa_session’的传递不再是隐式的-您必须在构造函数中允许此关键字参数。
- en: '**[no_tags]**'
  id: totrans-3615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: ClassState is renamed to ClassManager.
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClassState重命名为ClassManager。
- en: '**[no_tags]**'
  id: totrans-3617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Classes may supply their own InstrumentationManager by providing a __sa_instrumentation_manager__
    property.
  id: totrans-3618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类可以通过提供__sa_instrumentation_manager__属性来提供自己的InstrumentationManager。
- en: '**[no_tags]**'
  id: totrans-3619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: Custom instrumentation may use any mechanism to associate a ClassManager with
    a class and an InstanceState with an instance. Attributes on those objects are
    still the default association mechanism used by SQLAlchemy’s native instrumentation.
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义仪器可以使用任何机制将 ClassManager 与类关联，将 InstanceState 与实例关联。这些对象上的属性仍然是 SQLAlchemy
    原生仪器使用的默认关联机制。
- en: '**[no_tags]**'
  id: totrans-3621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: Moved entity_name, _sa_session_id, and _instance_key from the instance object
    to the instance state. These values are still available in the old way, which
    is now deprecated, using descriptors attached to the class. A deprecation warning
    will be issued when accessed.
  id: totrans-3622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 entity_name、_sa_session_id 和 _instance_key 从实例对象移动到实例状态。这些值仍然可以以旧方式访问，但现在已被弃用，使用附加到类的描述符。访问时将发出弃用警告。
- en: '**[no_tags]**'
  id: totrans-3623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The _prepare_instrumentation alias for prepare_instrumentation has been removed.
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _prepare_instrumentation 的别名 prepare_instrumentation 已被移除。
- en: '**[no_tags]**'
  id: totrans-3625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: sqlalchemy.exceptions has been renamed to sqlalchemy.exc. The module may be
    imported under either name.
  id: totrans-3626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.exceptions 已重命名为 sqlalchemy.exc。该模块可以使用任一名称导入。
- en: '**[no_tags]**'
  id: totrans-3627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: ORM-related exceptions are now defined in sqlalchemy.orm.exc. ConcurrentModificationError,
    FlushError, and UnmappedColumnError compatibility aliases are installed in sqlalchemy.exc
    during the import of sqlalchemy.orm.
  id: totrans-3628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM相关的异常现在在 sqlalchemy.orm.exc 中定义。在导入 sqlalchemy.orm 时，会在 sqlalchemy.exc 中安装
    ConcurrentModificationError、FlushError 和 UnmappedColumnError 的兼容别名。
- en: '**[no_tags]**'
  id: totrans-3629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: sqlalchemy.logging has been renamed to sqlalchemy.log.
  id: totrans-3630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.logging 已重命名为 sqlalchemy.log。
- en: '**[no_tags]**'
  id: totrans-3631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The transitional sqlalchemy.log.SADeprecationWarning alias for the warning’s
    definition in sqlalchemy.exc has been removed.
  id: totrans-3632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过渡性的 sqlalchemy.log.SADeprecationWarning 别名已被移除。
- en: '**[no_tags]**'
  id: totrans-3633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: exc.AssertionError has been removed and usage replaced with Python’s built-in
    AssertionError.
  id: totrans-3634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exc.AssertionError 已被移除，使用被 Python 内置的 AssertionError 替代。
- en: '**[no_tags]**'
  id: totrans-3635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: The behavior of MapperExtensions attached to multiple, entity_name= primary
    mappers for a single class has been altered. The first mapper() defined for a
    class is the only mapper eligible for the MapperExtension ‘instrument_class’,
    ‘init_instance’ and ‘init_failed’ events. This is backwards incompatible; previously
    the extensions of last mapper defined would receive these events.
  id: totrans-3636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于一个类的多个 entity_name= 主映射器附加的 MapperExtensions 的行为已更改。为一个类定义的第一个 mapper() 是唯一符合
    MapperExtension 'instrument_class'、'init_instance' 和 'init_failed' 事件的映射器。这是不兼容的；以前定义的最后一个映射器的扩展将接收这些事件。
- en: '**[firebird]**'
  id: totrans-3637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Added support for returning values from inserts (2.0+ only), updates and deletes
    (2.1+ only).
  id: totrans-3638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对插入（仅限2.0+）、更新和删除（仅限2.1+）返回值的支持。
- en: '**[postgres]**'
  id: totrans-3639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: Added Index reflection support to Postgres, using a great patch we long neglected,
    submitted by Ken Kuhlman.
  id: totrans-3640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Postgres 的索引反射支持，使用了 Ken Kuhlman 提交的长期被忽视的优秀补丁。
- en: 'References: [#714](https://www.sqlalchemy.org/trac/ticket/714)'
  id: totrans-3641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#714](https://www.sqlalchemy.org/trac/ticket/714)
