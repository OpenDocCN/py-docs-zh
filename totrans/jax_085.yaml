- en: jax.Array migration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`jax.Array` 迁移'
- en: 原文：[`jax.readthedocs.io/en/latest/jax_array_migration.html`](https://jax.readthedocs.io/en/latest/jax_array_migration.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax_array_migration.html`](https://jax.readthedocs.io/en/latest/jax_array_migration.html)
- en: '**yashkatariya@**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**yashkatariya@**'
- en: TL;DR
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TL;DR
- en: JAX switched its default array implementation to the new `jax.Array` as of version
    0.4.1. This guide explains the reasoning behind this, the impact it might have
    on your code, and how to (temporarily) switch back to the old behavior.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 将其默认数组实现切换为新的 `jax.Array` 自版本 0.4.1 起。本指南解释了这一决定的背景，它可能对您的代码产生的影响，以及如何（临时）切换回旧行为。
- en: What’s going on?
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: '`jax.Array` is a unified array type that subsumes `DeviceArray`, `ShardedDeviceArray`,
    and `GlobalDeviceArray` types in JAX. The `jax.Array` type helps make parallelism
    a core feature of JAX, simplifies and unifies JAX internals, and allows us to
    unify jit and pjit. If your code doesn’t mention `DeviceArray` vs `ShardedDeviceArray`
    vs `GlobalDeviceArray`, no changes are needed. But code that depends on details
    of these separate classes may need to be tweaked to work with the unified jax.Array'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.Array` 是 JAX 中统一的数组类型，包括 `DeviceArray`、`ShardedDeviceArray` 和 `GlobalDeviceArray`
    类型。`jax.Array` 类型有助于使并行成为 JAX 的核心特性，简化和统一了 JAX 的内部结构，并允许我们统一 `jit` 和 `pjit`。如果你的代码没有涉及到
    `DeviceArray`、`ShardedDeviceArray` 和 `GlobalDeviceArray` 的区别，那就不需要进行任何更改。但是依赖于这些单独类细节的代码可能需要进行调整以适配统一的
    `jax.Array`。'
- en: After the migration is complete `jax.Array` will be the only type of array in
    JAX.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移完成后，`jax.Array` 将成为 JAX 中唯一的数组类型。
- en: This doc explains how to migrate existing codebases to `jax.Array`. For more
    information on using `jax.Array` and JAX parallelism APIs, see the [Distributed
    arrays and automatic parallelization](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html)
    tutorial.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了如何将现有代码库迁移到 `jax.Array`。有关如何使用 `jax.Array` 和 JAX 并行 API 的更多信息，请参阅 [Distributed
    arrays and automatic parallelization](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html)
    教程。
- en: How to enable jax.Array?
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何启用 `jax.Array`？
- en: 'You can enable `jax.Array` by:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式启用 `jax.Array`：
- en: setting the shell environment variable `JAX_ARRAY` to something true-like (e.g.,
    `1`);
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 shell 环境变量 `JAX_ARRAY` 为真值（例如 `1`）；
- en: setting the boolean flag `jax_array` to something true-like if your code parses
    flags with absl;
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的代码使用 absl 解析标志，可以将布尔标志 `jax_array` 设置为真值；
- en: 'using this statement at the top of your main file:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的主文件顶部加入以下声明：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How do I know if jax.Array broke my code?
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何判断 `jax.Array` 是否破坏了我的代码？
- en: The easiest way to tell if `jax.Array` is responsible for any problems is to
    disable `jax.Array` and see if the issues go away.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是禁用 `jax.Array`，看看问题是否解决。
- en: How can I disable jax.Array for now?
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我如何暂时禁用 `jax.Array`？
- en: 'Through **March 15, 2023** it will be possible to disable jax.Array by:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 **2023年3月15日**，可以通过以下方式禁用 `jax.Array`：
- en: setting the shell environment variable `JAX_ARRAY` to something falsey (e.g.,
    `0`);
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 shell 环境变量 `JAX_ARRAY` 为假值（例如 `0`）；
- en: setting the boolean flag `jax_array` to something falsey if your code parses
    flags with absl;
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的代码使用 absl 解析标志，可以将布尔标志 `jax_array` 设置为假值；
- en: 'using this statement at the top of your main file:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的主文件顶部加入以下声明：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Why create jax.Array?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么创建 `jax.Array`？
- en: Currently JAX has three types; `DeviceArray`, `ShardedDeviceArray` and `GlobalDeviceArray`.
    `jax.Array` merges these three types and cleans up JAX’s internals while adding
    new parallelism features.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 JAX 有三种类型：`DeviceArray`、`ShardedDeviceArray` 和 `GlobalDeviceArray`。`jax.Array`
    合并了这三种类型，并清理了 JAX 的内部结构，同时增加了新的并行特性。
- en: We also introduce a new `Sharding` abstraction that describes how a logical
    Array is physically sharded out across one or more devices, such as TPUs or GPUs.
    The change also upgrades, simplifies and merges the parallelism features of `pjit`
    into `jit`. Functions decorated with `jit` will be able to operate over sharded
    arrays without copying data onto a single device.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还引入了一个新的 `Sharding` 抽象，描述了逻辑数组如何在一个或多个设备（如TPU或GPU）上物理分片。这一变更还升级、简化并将 `pjit`
    的并行性特性合并到 `jit` 中。使用 `jit` 装饰的函数将能够在分片数组上操作，而无需将数据复制到单个设备上。
- en: 'Features you get with `jax.Array`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `jax.Array` 可以获得的功能：
- en: C++ `pjit` dispatch path
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ `pjit` 分派路径
- en: Op-by-op parallelism (even if the array distributed across multiple devices
    across multiple hosts)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐操作并行性（即使数组分布在多台设备上，跨多个主机）
- en: Simpler batch data parallelism with `pjit`/`jit`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pjit`/`jit` 更简单的批数据并行性。
- en: Ways to create `Sharding`s that are not necessarily consisting of a mesh and
    partition spec. Can fully utilize the flexibility of OpSharding if you want or
    any other Sharding that you want.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以完全利用 OpSharding 的灵活性，或者任何您想要的其他分片方式来创建不一定包含网格和分区规范的 `Sharding`。
- en: and many more
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等
- en: 'Example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What issues can arise when jax.Array is switched on?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换到 `jax.Array` 后可能会出现哪些问题？
- en: New public type named jax.Array
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新公共类型命名为 `jax.Array`。
- en: All `isinstance(..., jnp.DeviceArray)` or `isinstance(.., jax.xla.DeviceArray)`
    and other variants of `DeviceArray` should be switched to using `isinstance(...,
    jax.Array)`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 `isinstance(..., jnp.DeviceArray)` 或 `isinstance(.., jax.xla.DeviceArray)`
    以及其他 `DeviceArray` 的变体应该切换到使用 `isinstance(..., jax.Array)`。
- en: 'Since `jax.Array` can represent DA, SDA and GDA, you can differentiate those
    3 types in `jax.Array` via:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `jax.Array` 可以表示 DA、SDA 和 GDA，您可以通过以下方式在 `jax.Array` 中区分这三种类型：
- en: '`x.is_fully_addressable and len(x.sharding.device_set) == 1` – this means that
    `jax.Array` is like a DA'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x.is_fully_addressable and len(x.sharding.device_set) == 1` – 这意味着 `jax.Array`
    类似于 DA。'
- en: '`x.is_fully_addressable and (len(x.sharding.device_set) > 1` – this means that
    `jax.Array` is like a SDA'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x.is_fully_addressable and (len(x.sharding.device_set) > 1` – 这意味着 `jax.Array`
    类似于 SDA。'
- en: '`not x.is_fully_addressable` – this means that `jax.Array` is like a GDA and
    spans across multiple processes'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not x.is_fully_addressable` – 这意味着 `jax.Array` 类似于 GDA，并跨多个进程。'
- en: For `ShardedDeviceArray`, you can move `isinstance(..., pxla.ShardedDeviceArray)`
    to `isinstance(..., jax.Array) and x.is_fully_addressable and len(x.sharding.device_set)
    > 1`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `ShardedDeviceArray`，可以将 `isinstance(..., pxla.ShardedDeviceArray)` 转移到 `isinstance(...,
    jax.Array) and x.is_fully_addressable and len(x.sharding.device_set) > 1`。
- en: In general it is not possible to differentiate a `ShardedDeviceArray` on 1 device
    from any other kind of single-device Array.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通常无法区分单设备数组上的 `ShardedDeviceArray` 与任何其他类型的单设备数组。
- en: GDA’s API name changes
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GDA 的 API 名称变更
- en: GDA’s `local_shards` and `local_data` have been deprecated.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: GDA 的 `local_shards` 和 `local_data` 已经被弃用。
- en: Please use `addressable_shards` and `addressable_data` which are compatible
    with `jax.Array` and `GDA`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用与 `jax.Array` 和 `GDA` 兼容的 `addressable_shards` 和 `addressable_data`。
- en: Creating jax.Array
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 `jax.Array`。
- en: All JAX functions will output `jax.Array` when the `jax_array` flag is True.
    If you were using `GlobalDeviceArray.from_callback` or `make_sharded_device_array`
    or `make_device_array` functions to explicitly create the respective JAX data
    types, you will need to switch them to use `jax.make_array_from_callback()` or
    `jax.make_array_from_single_device_arrays()`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `jax_array` 标志为真时，所有 JAX 函数将输出 `jax.Array`。如果您曾使用 `GlobalDeviceArray.from_callback`、`make_sharded_device_array`
    或 `make_device_array` 函数显式创建相应的 JAX 数据类型，则需要切换为使用 `jax.make_array_from_callback()`
    或 `jax.make_array_from_single_device_arrays()`。
- en: '**For GDA:**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 GDA：**'
- en: '`GlobalDeviceArray.from_callback(shape, mesh, pspec, callback)` can become
    `jax.make_array_from_callback(shape, jax.sharding.NamedSharding(mesh, pspec),
    callback)` in a 1:1 switch.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`GlobalDeviceArray.from_callback(shape, mesh, pspec, callback)` 可以一对一地切换为 `jax.make_array_from_callback(shape,
    jax.sharding.NamedSharding(mesh, pspec), callback)`。'
- en: 'If you were using the raw GDA constructor to create GDAs, then do this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾使用原始的 GDA 构造函数来创建 GDAs，则执行以下操作：
- en: '`GlobalDeviceArray(shape, mesh, pspec, buffers)` can become `jax.make_array_from_single_device_arrays(shape,
    jax.sharding.NamedSharding(mesh, pspec), buffers)`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`GlobalDeviceArray(shape, mesh, pspec, buffers)` 可以变成 `jax.make_array_from_single_device_arrays(shape,
    jax.sharding.NamedSharding(mesh, pspec), buffers)`。'
- en: '**For SDA:**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 SDA：**'
- en: '`make_sharded_device_array(aval, sharding_spec, device_buffers, indices)` can
    become `jax.make_array_from_single_device_arrays(shape, sharding, device_buffers)`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_sharded_device_array(aval, sharding_spec, device_buffers, indices)` 可以变成
    `jax.make_array_from_single_device_arrays(shape, sharding, device_buffers)`。'
- en: 'To decide what the sharding should be, it depends on why you were creating
    the SDAs:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要决定分片应该是什么，取决于您创建 SDA 的原因：
- en: 'If it was created to give as an input to `pmap`, then sharding can be: `jax.sharding.PmapSharding(devices,
    sharding_spec)`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它被创建为 `pmap` 的输入，则分片可以是：`jax.sharding.PmapSharding(devices, sharding_spec)`。
- en: If it was created to give as an input to `pjit`, then sharding can be `jax.sharding.NamedSharding(mesh,
    pspec)`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它被创建为 pjit 的输入，则分片可以是 `jax.sharding.NamedSharding(mesh, pspec)`。
- en: Breaking change for pjit after switching to jax.Array for host local inputs
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换到 `jax.Array` 后对于主机本地输入的 pjit 有破坏性变更。
- en: '**If you are exclusively using GDA arguments to pjit, you can skip this section!
    🎉**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您完全使用 GDA 参数作为 pjit 的输入，则可以跳过此部分！ 🎉**'
- en: With `jax.Array` enabled, all inputs to `pjit` must be globally shaped. This
    is a breaking change from the previous behavior where `pjit` would concatenate
    process-local arguments into a global value; this concatenation no longer occurs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 启用`jax.Array`后，所有传递给`pjit`的输入必须是全局形状的。这是与之前行为不兼容的变化，之前的`pjit`会将进程本地的参数连接成一个全局值；现在不再进行此连接。
- en: Why are we making this breaking change? Each array now says explicitly how its
    local shards fit into a global whole, rather than leaving it implicit. The more
    explicit representation also unlocks additional flexibility, for example the use
    of non-contiguous meshes with `pjit` which can improve efficiency on some TPU
    models.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要进行这个突破性的变化？现在每个数组都明确说明了它的本地分片如何适合全局整体，而不是留下隐含的情况。更明确的表示方式还可以解锁额外的灵活性，例如在某些TPU模型上可以提高效率的非连续网格使用`pjit`。
- en: 'Running **multi-process pjit computation** and passing host-local inputs when
    `jax.Array` is enabled can lead to an error similar to this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用`jax.Array`时，运行**多进程pjit计算**并在传递主机本地输入时可能会导致类似以下错误：
- en: 'Example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: 'Mesh = `{''x'': 2, ''y'': 2, ''z'': 2}` and host local input shape == `(4,)`
    and pspec = `P((''x'', ''y'', ''z''))`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mesh = {''x'': 2, ''y'': 2, ''z'': 2}` 和主机本地输入形状 == `(4,)` 以及`pspec = P((''x'',
    ''y'', ''z''))`'
- en: 'Since `pjit` doesn’t lift host local shapes to global shapes with `jax.Array`,
    you get the following error:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`pjit`不会将主机本地形状提升为全局形状，所以您会收到以下错误：
- en: 'Note: You will only see this error if your host local shape is smaller than
    the shape of the mesh.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：只有当您的主机本地形状小于网格的形状时，才会看到此错误。
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The error makes sense because you can’t shard dimension 0, 8 ways when the value
    on dimension `0` is `4`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 错误出现是因为当维度`0`上的值为`4`时，无法将其分片成8份。
- en: 'How can you migrate if you still pass host local inputs to `pjit`? We are providing
    transitional APIs to help you migrate:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然将主机本地输入传递给`pjit`，如何迁移？我们提供了过渡API来帮助您迁移：
- en: 'Note: You don’t need these utilities if you run your pjitted computation on
    a single process.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您在单进程上运行`pjit`计算，则不需要这些实用程序。
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`host_local_array_to_global_array` is a type cast that looks at a value with
    only local shards and changes its local shape to the shape that `pjit` would have
    previously assumed if that value was passed before the change.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`host_local_array_to_global_array`是一种类型转换，它查看具有仅本地分片的值，并将其本地形状更改为在更改之前如果传递该值`pjit`会假定的形状。'
- en: Passing in fully replicated inputs i.e. same shape on each process with `P(None)`
    as `in_axis_resources` is still supported. In this case you do not have to use
    `host_local_array_to_global_array` because the shape is already global.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 支持完全复制的输入，即每个进程上具有相同形状，并且`in_axis_resources`为`P(None)`的情况。在这种情况下，您无需使用`host_local_array_to_global_array`，因为形状已经是全局的。
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: FROM_GDA and jax.Array
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`FROM_GDA`和`jax.Array`'
- en: If you were using `FROM_GDA` in `in_axis_resources` argument to `pjit`, then
    with `jax.Array` there is no need to pass anything to `in_axis_resources` as `jax.Array`
    will follow **computation follows sharding** semantics.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`in_axis_resources`参数中使用`FROM_GDA`来传递给`pjit`，那么在使用`jax.Array`时，无需向`in_axis_resources`传递任何内容，因为`jax.Array`将遵循**计算遵循分片**的语义。
- en: 'For example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you have PartitionSpecs mixed in with `FROM_GDA` for inputs like numpy arrays,
    etc, then use `host_local_array_to_global_array` to convert them to `jax.Array`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的输入中混合了`PartitionSpecs`和`FROM_GDA`，例如numpy数组等，则使用`host_local_array_to_global_array`将它们转换为`jax.Array`。
- en: 'For example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: 'If you had this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有这样的情况：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'then you can replace it with:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以将其替换为：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: live_buffers replaced with live_arrays
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`live_buffers`替换为`live_arrays`。'
- en: '`live_buffers` attribute on jax `Device` has been deprecated. Please use `jax.live_arrays()`
    instead which is compatible with `jax.Array`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: jax `Device`上的`live_buffers`属性已被弃用。请改用与`jax.Array`兼容的`jax.live_arrays()`。
- en: Handling of host local inputs to pjit like batch, etc
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理向`pjit`传递的主机本地输入，例如批次等。
- en: If you are passing host local inputs to `pjit` in a **multi-process environment**,
    then please use `multihost_utils.host_local_array_to_global_array` to convert
    the batch to a global `jax.Array` and then pass that to `pjit`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在**多进程环境**中向`pjit`传递主机本地输入，请使用`multihost_utils.host_local_array_to_global_array`将批次转换为全局`jax.Array`，然后将其传递给`pjit`。
- en: The most common example of such a host local input is a **batch of input data**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种主机本地输入最常见的例子是**输入数据批次**。
- en: This will work for any host local input (not just a batch of input data).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这对任何主机本地输入都有效（不仅仅是输入数据批次）。
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See the pjit section above for more details about this change and more examples.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这种变化以及更多示例，请参阅上面的pjit部分。
- en: 'RecursionError: Recursively calling jit'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RecursionError：递归调用 jit 时发生的错误。
- en: This happens when some part of your code has `jax.Array` disabled and then you
    enable it only for some other part. For example, if you use some third_party code
    which has `jax.Array` disabled and you get a `DeviceArray` from that library and
    then you enable `jax.Array` in your library and pass that `DeviceArray` to JAX
    functions, it will lead to a RecursionError.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码的某部分禁用了 `jax.Array`，然后你仅在其他部分启用它时会出现这种情况。例如，如果你使用某些第三方代码，该代码已禁用了 `jax.Array`
    并从该库获得一个 `DeviceArray`，然后在你的库中启用 `jax.Array` 并将该 `DeviceArray` 传递给 JAX 函数，就会导致
    RecursionError。
- en: This error should go away when `jax.Array` is enabled by default so that all
    libraries return `jax.Array` unless they explicitly disable it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `jax.Array` 默认启用时，所有库都返回 `jax.Array`，除非显式禁用它，这个错误就应该消失。
