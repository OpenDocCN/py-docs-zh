- en: Custom SQL Constructs and Compilation Extension
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义SQL构造和编译扩展
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/compiler.html](https://docs.sqlalchemy.org/en/20/core/compiler.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/compiler.html](https://docs.sqlalchemy.org/en/20/core/compiler.html)
- en: Provides an API for creation of custom ClauseElements and compilers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了用于创建自定义ClauseElements和编译器的API。
- en: Synopsis
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: 'Usage involves the creation of one or more [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") subclasses and one or more callables
    defining its compilation:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用涉及创建一个或多个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")子类和一个或多个定义其编译的可调用对象：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Above, `MyColumn` extends [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), the base expression element for named
    column objects. The `compiles` decorator registers itself with the `MyColumn`
    class so that it is invoked when the object is compiled to a string:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`MyColumn`扩展了[`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")，这是命名列对象的基本表达式元素。`compiles`装饰器向`MyColumn`类注册自身，以便在将对象编译为字符串时调用它：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Produces:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Dialect-specific compilation rules
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方言特定的编译规则
- en: 'Compilers can also be made dialect-specific. The appropriate compiler will
    be invoked for the dialect in use:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器也可以是特定于方言的。将为使用的方言调用适当的编译器：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The second `visit_alter_table` will be invoked when any `postgresql` dialect
    is used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用任何`postgresql`方言时，第二个`visit_alter_table`将被调用。
- en: '## Compiling sub-elements of a custom expression construct'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '## 编译自定义表达式构造的子元素'
- en: 'The `compiler` argument is the `Compiled` object in use. This object can be
    inspected for any information about the in-progress compilation, including `compiler.dialect`,
    `compiler.statement` etc. The [`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") and [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") both include a `process()` method which
    can be used for compilation of embedded attributes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`compiler`参数是正在使用的`Compiled`对象。可以检查此对象的任何有关进行中编译的信息，包括`compiler.dialect`、`compiler.statement`等。[`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")和[`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")都包括一个`process()`方法，可用于编译嵌入属性：'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Produces:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The above `InsertFromSelect` construct is only an example, this actual functionality
    is already available using the [`Insert.from_select()`](dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`InsertFromSelect`构造仅是一个示例，这种实际功能已经可以使用[`Insert.from_select()`](dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")方法。
- en: Cross Compiling between SQL and DDL compilers
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在SQL和DDL编译器之间进行交叉编译
- en: 'SQL and DDL constructs are each compiled using different base compilers - `SQLCompiler`
    and `DDLCompiler`. A common need is to access the compilation rules of SQL expressions
    from within a DDL expression. The `DDLCompiler` includes an accessor `sql_compiler`
    for this reason, such as below where we generate a CHECK constraint that embeds
    a SQL expression:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SQL和DDL构造分别使用不同的基本编译器 - `SQLCompiler`和`DDLCompiler`。一个常见的需求是从DDL表达式中访问SQL表达式的编译规则。`DDLCompiler`包含一个访问器`sql_compiler`，因此我们可以生成嵌入SQL表达式的CHECK约束，如下所示：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Above, we add an additional flag to the process step as called by `SQLCompiler.process()`,
    which is the `literal_binds` flag. This indicates that any SQL expression which
    refers to a [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object or other “literal” object such
    as those which refer to strings or integers should be rendered **in-place**, rather
    than being referred to as a bound parameter; when emitting DDL, bound parameters
    are typically not supported.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们在`SQLCompiler.process()`中调用的过程步骤中添加了一个额外的标志，即`literal_binds`标志。这表示任何引用[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象或其他“literal”对象（如引用字符串或整数的对象）的SQL表达式应该**原地**呈现，而不是作为绑定参数引用；在发出DDL时，通常不支持绑定参数。
- en: Changing the default compilation of existing constructs
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改现有构造的默认编译
- en: The compiler extension applies just as well to the existing constructs. When
    overriding the compilation of a built in SQL construct, the @compiles decorator
    is invoked upon the appropriate class (be sure to use the class, i.e. `Insert`
    or `Select`, instead of the creation function such as `insert()` or `select()`).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器扩展同样适用于现有的结构。当覆盖内置 SQL 结构的编译时，@compiles 装饰器会调用适当的类（确保使用类，即 `Insert` 或 `Select`，而不是创建函数，比如
    `insert()` 或 `select()`）。
- en: 'Within the new compilation function, to get at the “original” compilation routine,
    use the appropriate visit_XXX method - this because compiler.process() will call
    upon the overriding routine and cause an endless loop. Such as, to add “prefix”
    to all insert statements:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的编译函数中，要获取“原始”的编译例程，使用适当的 visit_XXX 方法 - 这是因为编译器.process() 将调用重写的例程并导致无限循环。比如，要向所有的插入语句添加“前缀”：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The above compiler will prefix all INSERT statements with “some prefix” when
    compiled.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述编译器在编译时会在所有的 INSERT 语句前加上“某个前缀”。
- en: '## Changing Compilation of Types'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '## 更改类型的编译'
- en: '`compiler` works for types, too, such as below where we implement the MS-SQL
    specific ‘max’ keyword for `String`/`VARCHAR`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`compiler` 也适用于类型，比如下面我们为 `String`/`VARCHAR` 实现了 MS-SQL 特定的 ‘max’ 关键字：'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Subclassing Guidelines
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类化指南
- en: 'A big part of using the compiler extension is subclassing SQLAlchemy expression
    constructs. To make this easier, the expression and schema packages feature a
    set of “bases” intended for common tasks. A synopsis is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用编译器扩展的一个重要部分是子类化 SQLAlchemy 表达式结构。为了使这更容易，表达式和模式包含一组旨在用于常见任务的“基础”。概要如下：
- en: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - This is the root expression class. Any SQL expression can be derived from this
    base, and is probably the best choice for longer constructs such as specialized
    INSERT statements.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - 这是根表达式类。任何 SQL 表达式都可以从这个基类派生，并且对于长一些的构造，比如专门的 INSERT 语句，这可能是最好的选择。'
- en: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    - The root of all “column-like” elements. Anything that you’d place in the “columns”
    clause of a SELECT statement (as well as order by and group by) can derive from
    this - the object will automatically have Python “comparison” behavior.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    - 所有“类似列”的元素的根。你在 SELECT 语句的“列”子句中（以及 order by 和 group by）放置的任何东西都可以从这个派生 - 该对象将自动具有
    Python 的“比较”行为。'
- en: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    classes want to have a `type` member which is expression’s return type. This can
    be established at the instance level in the constructor, or at the class level
    if its generally constant:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    类希望有一个 `type` 成员，该成员是表达式的返回类型。这可以在构造函数的实例级别或类级别上建立：'
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") - This is a hybrid of a `ColumnElement`
    and a “from clause” like object, and represents a SQL function or stored procedure
    type of call. Since most databases support statements along the line of “SELECT
    FROM <some function>” `FunctionElement` adds in the ability to be used in the
    FROM clause of a `select()` construct:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") - 这是 `ColumnElement` 和“from 子句”类似对象的混合体，并表示
    SQL 函数或存储过程类型的调用。由于大多数数据库支持“SELECT FROM <某个函数>”这样的语句，`FunctionElement` 添加了在 `select()`
    构造的 FROM 子句中使用的能力：'
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    - The root of all DDL expressions, like CREATE TABLE, ALTER TABLE, etc. Compilation
    of [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    subclasses is issued by a [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") instead of a [`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler"). [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") can also be used as an event hook in
    conjunction with event hooks like [`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create") and [`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), allowing the construct to be invoked
    automatically during CREATE TABLE and DROP TABLE sequences.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    - 所有DDL表达式的根，比如CREATE TABLE，ALTER TABLE等。[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")的子类的编译由[`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")发出，而不是由[`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")发出。[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")也可以与[`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")和[`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")等事件钩子一起用作事件钩子，允许在CREATE TABLE和DROP
    TABLE序列期间自动调用构造。'
- en: See also
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Customizing DDL](ddl.html) - contains examples of associating [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") objects (which are themselves [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") instances) with [`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") event hooks.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义DDL](ddl.html) - 包含将[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")对象（它们本身是[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")实例）与[`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents")事件钩子相关联的示例。'
- en: '[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    - This is a mixin which should be used with any expression class that represents
    a “standalone” SQL statement that can be passed directly to an `execute()` method.
    It is already implicit within `DDLElement` and `FunctionElement`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    - 这是一个mixin，应该与任何表示可以直接传递给`execute()`方法的“独立”SQL语句的表达式类一起使用。它已经隐含在`DDLElement`和`FunctionElement`中。'
- en: Most of the above constructs also respond to SQL statement caching. A subclassed
    construct will want to define the caching behavior for the object, which usually
    means setting the flag `inherit_cache` to the value of `False` or `True`. See
    the next section [Enabling Caching Support for Custom Constructs](#compilerext-caching)
    for background.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上述大部分构造也响应SQL语句缓存。子类构造将希望为对象定义缓存行为，这通常意味着将标志`inherit_cache`设置为`False`或`True`的值。有关背景信息，请参见下一节[为自定义构造启用缓存支持](#compilerext-caching)。
- en: '## Enabling Caching Support for Custom Constructs'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '## 为自定义构造启用缓存支持'
- en: SQLAlchemy as of version 1.4 includes a [SQL compilation caching facility](connections.html#sql-caching)
    which will allow equivalent SQL constructs to cache their stringified form, along
    with other structural information used to fetch results from the statement.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始，SQLAlchemy包括一个[SQL编译缓存设施](connections.html#sql-caching)，它将允许等效的SQL构造缓存它们的字符串形式，以及用于从语句中获取结果的其他结构信息。
- en: 'For reasons discussed at [Object will not produce a cache key, Performance
    Implications](../errors.html#caching-caveats), the implementation of this caching
    system takes a conservative approach towards including custom SQL constructs and/or
    subclasses within the caching system. This includes that any user-defined SQL
    constructs, including all the examples for this extension, will not participate
    in caching by default unless they positively assert that they are able to do so.
    The [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute when set to `True`
    at the class level of a specific subclass will indicate that instances of this
    class may be safely cached, using the cache key generation scheme of the immediate
    superclass. This applies for example to the “synopsis” example indicated previously:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[对象不会生成缓存键，性能影响](../errors.html#caching-caveats)中讨论的原因，该缓存系统的实现对于在缓存系统中包含自定义SQL构造和/或子类采取了保守的方法。这包括任何用户定义的SQL构造，包括此扩展的所有示例，除非它们明确声明能够这样做，否则默认情况下不会参与缓存。当在特定子类的类级别设置[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性为`True`时，将指示该类的实例可以安全地进行缓存，使用直接父类的缓存键生成方案。例如，这适用于先前指示的“概要”示例：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Above, the `MyColumn` class does not include any new state that affects its
    SQL compilation; the cache key of `MyColumn` instances will make use of that of
    the `ColumnClause` superclass, meaning it will take into account the class of
    the object (`MyColumn`), the string name and datatype of the object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`MyColumn`类不包含任何影响其SQL编译的新状态；`MyColumn`实例的缓存键将利用`ColumnClause`超类的缓存键，这意味着它将考虑对象的类（`MyColumn`）、对象的字符串名称和数据类型：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For objects that are likely to be **used liberally as components within many
    larger statements**, such as [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") subclasses and custom SQL datatypes, it’s important
    that **caching be enabled as much as possible**, as this may otherwise negatively
    affect performance.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些**在许多更大语句中可能被大量使用作为组件**的对象，比如[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")子类和自定义SQL数据类型，尽可能**启用缓存**非常重要，否则可能会对性能产生负面影响。
- en: 'An example of an object that **does** contain state which affects its SQL compilation
    is the one illustrated at [Compiling sub-elements of a custom expression construct](#compilerext-compiling-subelements);
    this is an “INSERT FROM SELECT” construct that combines together a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, each of which independently affect
    the SQL string generation of the construct. For this class, the example illustrates
    that it simply does not participate in caching:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**包含影响其SQL编译的状态**的对象示例是在[编译自定义表达式构造的子元素](#compilerext-compiling-subelements)中所示的一个示例；这是一个将[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造组合在一起的“INSERT FROM SELECT”构造，每个构造独立影响构造的SQL字符串生成。对于这个类，示例说明它根本不参与缓存：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: While it is also possible that the above `InsertFromSelect` could be made to
    produce a cache key that is composed of that of the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") components together, the API for this is not
    at the moment fully public. However, for an “INSERT FROM SELECT” construct, which
    is only used by itself for specific operations, caching is not as critical as
    in the previous example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述`InsertFromSelect`也可能生成由[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")组件组合而成的缓存键，但目前该API并不完全公开。然而，对于“INSERT FROM
    SELECT”构造，它仅用于特定操作，缓存并不像前面的示例那样关键。
- en: For objects that are **used in relative isolation and are generally standalone**,
    such as custom [DML](../glossary.html#term-DML) constructs like an “INSERT FROM
    SELECT”, **caching is generally less critical** as the lack of caching for such
    a construct will have only localized implications for that specific operation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**在相对孤立并且通常是独立的**对象，例如自定义 [DML](../glossary.html#term-DML) 构造，如 “INSERT FROM
    SELECT”，**缓存通常不那么关键**，因为对于这种构造缺乏缓存仅对该特定操作具有局部影响。
- en: Further Examples
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多示例
- en: “UTC timestamp” function
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “UTC 时间戳”函数
- en: A function that works like “CURRENT_TIMESTAMP” except applies the appropriate
    conversions so that the time is in UTC time. Timestamps are best stored in relational
    databases as UTC, without time zones. UTC so that your database doesn’t think
    time has gone backwards in the hour when daylight savings ends, without timezones
    because timezones are like character encodings - they’re best applied only at
    the endpoints of an application (i.e. convert to UTC upon user input, re-apply
    desired timezone upon display).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似于 “CURRENT_TIMESTAMP” 的函数，但应用适当的转换，使时间为 UTC 时间。时间戳最好存储在关系型数据库中作为 UTC，不带时区。UTC
    使您的数据库在夏令时结束时不会认为时间已经倒退，不带时区是因为时区就像字符编码 - 最好只在应用程序的端点（即在用户输入时转换为 UTC，在显示时重新应用所需的时区）应用它们。
- en: 'For PostgreSQL and Microsoft SQL Server:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PostgreSQL 和 Microsoft SQL Server：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Example usage:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: “GREATEST” function
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “GREATEST”函数
- en: 'The “GREATEST” function is given any number of arguments and returns the one
    that is of the highest value - its equivalent to Python’s `max` function. A SQL
    standard version versus a CASE based version which only accommodates two arguments:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “GREATEST”函数接受任意数量的参数，并返回具有最高值的参数 - 它等同于 Python 的 `max` 函数。与仅容纳两个参数的基于 CASE
    的版本相比，SQL 标准版本：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Example usage:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: “false” expression
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “false” 表达式
- en: 'Render a “false” constant expression, rendering as “0” on platforms that don’t
    have a “false” constant:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染“false”常量表达式，对于没有“false”常量的平台，渲染为“0”：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Example usage:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| Object Name | Description |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [compiles](#sqlalchemy.ext.compiler.compiles)(class_, *specs) | Register
    a function as a compiler for a given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") type. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [compiles](#sqlalchemy.ext.compiler.compiles)(class_, *specs) | 为给定[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类型注册函数作为编译器。 |'
- en: '| [deregister](#sqlalchemy.ext.compiler.deregister)(class_) | Remove all custom
    compilers associated with a given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") type. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [deregister](#sqlalchemy.ext.compiler.deregister)(class_) | 删除与给定[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类型关联的所有自定义编译器。 |'
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Register a function as a compiler for a given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") type.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类型注册函数作为编译器。
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Remove all custom compilers associated with a given [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") type.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 删除与给定[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")类型关联的所有自定义编译器。
- en: Synopsis
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: 'Usage involves the creation of one or more [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") subclasses and one or more callables
    defining its compilation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用涉及创建一个或多个[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")子类和一个或多个定义其编译的可调用对象：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Above, `MyColumn` extends [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), the base expression element for named
    column objects. The `compiles` decorator registers itself with the `MyColumn`
    class so that it is invoked when the object is compiled to a string:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`MyColumn` 扩展了[`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")，命名列对象的基本表达式元素。`compiles` 装饰器将自身注册到 `MyColumn`
    类，以便在对象编译为字符串时调用它：
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Produces:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Dialect-specific compilation rules
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定于方言的编译规则
- en: 'Compilers can also be made dialect-specific. The appropriate compiler will
    be invoked for the dialect in use:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器也可以是特定于方言的。将为使用的方言调用适当的编译器：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The second `visit_alter_table` will be invoked when any `postgresql` dialect
    is used.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用任何 `postgresql` 方言时，将调用第二个 `visit_alter_table`。
- en: '## Compiling sub-elements of a custom expression construct'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '## 编译自定义表达式结构的子元素'
- en: 'The `compiler` argument is the `Compiled` object in use. This object can be
    inspected for any information about the in-progress compilation, including `compiler.dialect`,
    `compiler.statement` etc. The [`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") and [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") both include a `process()` method which
    can be used for compilation of embedded attributes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`compiler` 参数是正在使用的 `Compiled` 对象。此对象可以用于检查关于正在进行的编译的任何信息，包括 `compiler.dialect`、`compiler.statement`
    等。[`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    和 [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler "sqlalchemy.sql.compiler.DDLCompiler")
    都包含一个 `process()` 方法，可用于编译嵌入属性：'
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Produces:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The above `InsertFromSelect` construct is only an example, this actual functionality
    is already available using the [`Insert.from_select()`](dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的 `InsertFromSelect` 构造只是一个例子，实际功能已经可以使用 [`Insert.from_select()`](dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 方法实现。
- en: Cross Compiling between SQL and DDL compilers
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 SQL 和 DDL 编译器之间进行交叉编译
- en: 'SQL and DDL constructs are each compiled using different base compilers - `SQLCompiler`
    and `DDLCompiler`. A common need is to access the compilation rules of SQL expressions
    from within a DDL expression. The `DDLCompiler` includes an accessor `sql_compiler`
    for this reason, such as below where we generate a CHECK constraint that embeds
    a SQL expression:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 和 DDL 构造使用不同的基础编译器 - `SQLCompiler` 和 `DDLCompiler` 进行编译。常见的需要是从 DDL 表达式中访问
    SQL 表达式的编译规则。因此，`DDLCompiler` 包含一个访问器 `sql_compiler`，如下所示，我们生成一个嵌入了 SQL 表达式的 CHECK
    约束：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Above, we add an additional flag to the process step as called by `SQLCompiler.process()`,
    which is the `literal_binds` flag. This indicates that any SQL expression which
    refers to a [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object or other “literal” object such
    as those which refer to strings or integers should be rendered **in-place**, rather
    than being referred to as a bound parameter; when emitting DDL, bound parameters
    are typically not supported.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们在由 `SQLCompiler.process()` 调用的处理步骤中添加了一个额外的标志，即 `literal_binds` 标志。这表示任何引用
    [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    对象或其他“文字”对象（如引用字符串或整数的对象）的 SQL 表达式应该**就地**渲染，而不是作为一个绑定参数引用；在发出 DDL 时，通常不支持绑定参数。
- en: Cross Compiling between SQL and DDL compilers
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 SQL 和 DDL 编译器之间进行交叉编译
- en: 'SQL and DDL constructs are each compiled using different base compilers - `SQLCompiler`
    and `DDLCompiler`. A common need is to access the compilation rules of SQL expressions
    from within a DDL expression. The `DDLCompiler` includes an accessor `sql_compiler`
    for this reason, such as below where we generate a CHECK constraint that embeds
    a SQL expression:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 和 DDL 构造使用不同的基础编译器 - `SQLCompiler` 和 `DDLCompiler` 进行编译。常见的需要是从 DDL 表达式中访问
    SQL 表达式的编译规则。因此，`DDLCompiler` 包含一个访问器 `sql_compiler`，如下所示，我们生成一个嵌入了 SQL 表达式的 CHECK
    约束：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Above, we add an additional flag to the process step as called by `SQLCompiler.process()`,
    which is the `literal_binds` flag. This indicates that any SQL expression which
    refers to a [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object or other “literal” object such
    as those which refer to strings or integers should be rendered **in-place**, rather
    than being referred to as a bound parameter; when emitting DDL, bound parameters
    are typically not supported.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们在由 `SQLCompiler.process()` 调用的处理步骤中添加了一个额外的标志，即 `literal_binds` 标志。这表示任何引用
    [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    对象或其他“文字”对象（如引用字符串或整数的对象）的 SQL 表达式应该**就地**渲染，而不是作为一个绑定参数引用；在发出 DDL 时，通常不支持绑定参数。
- en: Changing the default compilation of existing constructs
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改现有构造的默认编译
- en: The compiler extension applies just as well to the existing constructs. When
    overriding the compilation of a built in SQL construct, the @compiles decorator
    is invoked upon the appropriate class (be sure to use the class, i.e. `Insert`
    or `Select`, instead of the creation function such as `insert()` or `select()`).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器扩展同样适用于现有构造。当重写内置 SQL 构造的编译时，@compiles 装饰器会在适当的类上调用（确保使用类，即 `Insert` 或 `Select`，而不是创建函数，如
    `insert()` 或 `select()`）。
- en: 'Within the new compilation function, to get at the “original” compilation routine,
    use the appropriate visit_XXX method - this because compiler.process() will call
    upon the overriding routine and cause an endless loop. Such as, to add “prefix”
    to all insert statements:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的编译函数中，要获取“原始”编译例程，使用适当的 visit_XXX 方法 - 这是因为编译器.process() 将调用重写例程并导致无限循环。例如，要向所有插入语句添加“前缀”：
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The above compiler will prefix all INSERT statements with “some prefix” when
    compiled.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述编译器在编译时将所有 INSERT 语句前缀为“some prefix”。
- en: '## Changing Compilation of Types'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '## 更改类型的编译'
- en: '`compiler` works for types, too, such as below where we implement the MS-SQL
    specific ‘max’ keyword for `String`/`VARCHAR`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`compiler` 也适用于类型，比如下面我们为 `String`/`VARCHAR` 实现 MS-SQL 特定的 ‘max’ 关键字：'
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Subclassing Guidelines
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类指南
- en: 'A big part of using the compiler extension is subclassing SQLAlchemy expression
    constructs. To make this easier, the expression and schema packages feature a
    set of “bases” intended for common tasks. A synopsis is as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用编译器扩展的一个重要部分是子类化 SQLAlchemy 表达式构造。为了使这更容易，表达式和模式包含一组用于常见任务的“基类”。概要如下：
- en: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - This is the root expression class. Any SQL expression can be derived from this
    base, and is probably the best choice for longer constructs such as specialized
    INSERT statements.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    - 这是根表达式类。任何 SQL 表达式都可以从这个基类派生，对于像专门的 INSERT 语句这样的较长构造来说，这可能是最好的选择。'
- en: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    - The root of all “column-like” elements. Anything that you’d place in the “columns”
    clause of a SELECT statement (as well as order by and group by) can derive from
    this - the object will automatically have Python “comparison” behavior.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    - 所有“列样”元素的根。您在 SELECT 语句的“columns”子句中（以及 order by 和 group by）中放置的任何内容都可以从这里派生
    - 该对象将自动具有 Python 的“比较”行为。'
- en: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    classes want to have a `type` member which is expression’s return type. This can
    be established at the instance level in the constructor, or at the class level
    if its generally constant:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement "sqlalchemy.sql.expression.ColumnElement")
    类希望有一个 `type` 成员，该成员是表达式的返回类型。这可以在构造函数的实例级别或在类级别（如果通常是常量）中建立：'
- en: '[PRE32]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") - This is a hybrid of a `ColumnElement`
    and a “from clause” like object, and represents a SQL function or stored procedure
    type of call. Since most databases support statements along the line of “SELECT
    FROM <some function>” `FunctionElement` adds in the ability to be used in the
    FROM clause of a `select()` construct:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FunctionElement`](functions.html#sqlalchemy.sql.functions.FunctionElement
    "sqlalchemy.sql.functions.FunctionElement") - 这是 `ColumnElement` 和“from clause”类似对象的混合体，表示
    SQL 函数或存储过程类型的调用。由于大多数数据库支持类似“SELECT FROM <some function>”的语句，`FunctionElement`
    添加了在 `select()` 构造的 FROM 子句中使用的能力：'
- en: '[PRE33]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    - The root of all DDL expressions, like CREATE TABLE, ALTER TABLE, etc. Compilation
    of [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    subclasses is issued by a [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") instead of a [`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler"). [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") can also be used as an event hook in
    conjunction with event hooks like [`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create") and [`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), allowing the construct to be invoked
    automatically during CREATE TABLE and DROP TABLE sequences.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")
    - 所有DDL表达式的根，比如CREATE TABLE，ALTER TABLE等。 [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 的子类的编译由 [`DDLCompiler`](internals.html#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") 发出，而不是 [`SQLCompiler`](internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")。 [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 还可以与诸如 [`DDLEvents.before_create()`](events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create") 和 [`DDLEvents.after_create()`](events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") 等事件钩子一起用作事件钩子，允许在CREATE TABLE和DROP
    TABLE序列期间自动调用构造。'
- en: See also
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Customizing DDL](ddl.html) - contains examples of associating [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") objects (which are themselves [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") instances) with [`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") event hooks.'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自定义DDL](ddl.html) - 包含将 [`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    对象（它们本身是 [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 实例）与 [`DDLEvents`](events.html#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") 事件钩子相关联的示例。'
- en: '[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    - This is a mixin which should be used with any expression class that represents
    a “standalone” SQL statement that can be passed directly to an `execute()` method.
    It is already implicit within `DDLElement` and `FunctionElement`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Executable`](selectable.html#sqlalchemy.sql.expression.Executable "sqlalchemy.sql.expression.Executable")
    - 这是一个混合类，应该与表示“独立”SQL语句的任何表达式类一起使用，可以直接传递给`execute()`方法。 它已经隐式地存在于 `DDLElement`
    和 `FunctionElement` 中。'
- en: Most of the above constructs also respond to SQL statement caching. A subclassed
    construct will want to define the caching behavior for the object, which usually
    means setting the flag `inherit_cache` to the value of `False` or `True`. See
    the next section [Enabling Caching Support for Custom Constructs](#compilerext-caching)
    for background.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 上述大多数构造也会响应SQL语句缓存。 子类化的构造将希望为对象定义缓存行为，这通常意味着将标志 `inherit_cache` 设置为 `False`
    或 `True` 的值。 有关背景信息，请参见下一节 [为自定义构造启用缓存支持](#compilerext-caching)。
- en: '## Enabling Caching Support for Custom Constructs'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '## 为自定义构造启用缓存支持'
- en: SQLAlchemy as of version 1.4 includes a [SQL compilation caching facility](connections.html#sql-caching)
    which will allow equivalent SQL constructs to cache their stringified form, along
    with other structural information used to fetch results from the statement.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 截至版本1.4，SQLAlchemy 包括一个 [SQL 编译缓存功能](connections.html#sql-caching)，它将允许等效的 SQL
    构造缓存它们的字符串形式，以及用于从语句获取结果的其他结构信息。
- en: 'For reasons discussed at [Object will not produce a cache key, Performance
    Implications](../errors.html#caching-caveats), the implementation of this caching
    system takes a conservative approach towards including custom SQL constructs and/or
    subclasses within the caching system. This includes that any user-defined SQL
    constructs, including all the examples for this extension, will not participate
    in caching by default unless they positively assert that they are able to do so.
    The [`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache") attribute when set to `True`
    at the class level of a specific subclass will indicate that instances of this
    class may be safely cached, using the cache key generation scheme of the immediate
    superclass. This applies for example to the “synopsis” example indicated previously:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于讨论的原因在[对象不会生成缓存键，性能影响](../errors.html#caching-caveats)，这个缓存系统的实现采用了一种保守的方式来包括自定义
    SQL 构造和/或子类在缓存系统中。这包括任何用户定义的 SQL 构造，包括此扩展的所有示例，默认情况下将不参与缓存，除非它们明确声明能够参与缓存。当[`HasCacheKey.inherit_cache`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey.inherit_cache
    "sqlalchemy.sql.traversals.HasCacheKey.inherit_cache")属性在特定子类的类级别上设置为`True`时，将表示此类的实例可以安全地缓存，使用其直接超类的缓存键生成方案。例如，这适用于先前指示的“概要”示例：
- en: '[PRE34]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Above, the `MyColumn` class does not include any new state that affects its
    SQL compilation; the cache key of `MyColumn` instances will make use of that of
    the `ColumnClause` superclass, meaning it will take into account the class of
    the object (`MyColumn`), the string name and datatype of the object:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，`MyColumn` 类不包含任何影响其 SQL 编译的新状态；`MyColumn` 实例的缓存键将利用 `ColumnClause` 超类的缓存键，这意味着它将考虑对象的类（`MyColumn`）、对象的字符串名称和数据类型：
- en: '[PRE35]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For objects that are likely to be **used liberally as components within many
    larger statements**, such as [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") subclasses and custom SQL datatypes, it’s important
    that **caching be enabled as much as possible**, as this may otherwise negatively
    affect performance.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可能在许多较大语句中自由使用的对象，例如 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    子类和自定义 SQL 数据类型，尽可能启用缓存是很重要的，否则可能会对性能产生负面影响。
- en: 'An example of an object that **does** contain state which affects its SQL compilation
    is the one illustrated at [Compiling sub-elements of a custom expression construct](#compilerext-compiling-subelements);
    this is an “INSERT FROM SELECT” construct that combines together a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") as well as a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, each of which independently affect
    the SQL string generation of the construct. For this class, the example illustrates
    that it simply does not participate in caching:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含影响其 SQL 编译的状态的对象示例是在[编译自定义表达式结构的子元素](#compilerext-compiling-subelements)中所示的对象；这是一个将
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") 与 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造组合在一起的“INSERT FROM SELECT”构造，它们各自独立地影响构造的
    SQL 字符串生成。对于这个类，示例说明了它根本不参与缓存：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: While it is also possible that the above `InsertFromSelect` could be made to
    produce a cache key that is composed of that of the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") components together, the API for this is not
    at the moment fully public. However, for an “INSERT FROM SELECT” construct, which
    is only used by itself for specific operations, caching is not as critical as
    in the previous example.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述的 `InsertFromSelect` 也可能生成由 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 组件组成的缓存键，但目前该 API 并不完全公开。但是，对于“INSERT FROM
    SELECT”构造，它只用于特定操作，缓存并不像前面的示例那样关键。
- en: For objects that are **used in relative isolation and are generally standalone**,
    such as custom [DML](../glossary.html#term-DML) constructs like an “INSERT FROM
    SELECT”, **caching is generally less critical** as the lack of caching for such
    a construct will have only localized implications for that specific operation.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**在相对孤立并且通常是独立的对象**，比如自定义[DML](../glossary.html#term-DML)构造，比如“INSERT FROM
    SELECT”，**缓存通常不太关键**，因为对于这种构造物的缺乏缓存只会对该特定操作产生局部影响。
- en: Further Examples
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多示例
- en: “UTC timestamp” function
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “UTC时间戳”函数
- en: A function that works like “CURRENT_TIMESTAMP” except applies the appropriate
    conversions so that the time is in UTC time. Timestamps are best stored in relational
    databases as UTC, without time zones. UTC so that your database doesn’t think
    time has gone backwards in the hour when daylight savings ends, without timezones
    because timezones are like character encodings - they’re best applied only at
    the endpoints of an application (i.e. convert to UTC upon user input, re-apply
    desired timezone upon display).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似于“CURRENT_TIMESTAMP”的函数，但应用适当的转换，使时间处于UTC时间。时间戳最好存储在关系数据库中作为UTC时间，不带时区。UTC时间是为了在夏令时结束时，数据库不会认为时间倒退一小时，不带时区是因为时区就像字符编码一样——最好只在应用程序的端点应用（即在用户输入时转换为UTC时间，在显示时重新应用所需的时区）。
- en: 'For PostgreSQL and Microsoft SQL Server:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PostgreSQL和Microsoft SQL Server：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Example usage:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE38]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: “GREATEST” function
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “GREATEST”函数
- en: 'The “GREATEST” function is given any number of arguments and returns the one
    that is of the highest value - its equivalent to Python’s `max` function. A SQL
    standard version versus a CASE based version which only accommodates two arguments:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: “GREATEST”函数被赋予任意数量的参数，并返回具有最高值的参数——它等同于Python的`max`函数。一个SQL标准版本与一个基于CASE的版本相对应，后者仅容纳两个参数：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Example usage:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: “false” expression
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “false”表达式
- en: 'Render a “false” constant expression, rendering as “0” on platforms that don’t
    have a “false” constant:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染“false”常量表达式，在没有“false”常量的平台上呈现为“0”：
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Example usage:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: “UTC timestamp” function
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “UTC时间戳”函数
- en: A function that works like “CURRENT_TIMESTAMP” except applies the appropriate
    conversions so that the time is in UTC time. Timestamps are best stored in relational
    databases as UTC, without time zones. UTC so that your database doesn’t think
    time has gone backwards in the hour when daylight savings ends, without timezones
    because timezones are like character encodings - they’re best applied only at
    the endpoints of an application (i.e. convert to UTC upon user input, re-apply
    desired timezone upon display).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似于“CURRENT_TIMESTAMP”的函数，但应用适当的转换，使时间处于UTC时间。时间戳最好存储在关系数据库中作为UTC时间，不带时区。UTC时间是为了在夏令时结束时，数据库不会认为时间倒退一小时，不带时区是因为时区就像字符编码一样——最好只在应用程序的端点应用（即在用户输入时转换为UTC时间，在显示时重新应用所需的时区）。
- en: 'For PostgreSQL and Microsoft SQL Server:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PostgreSQL和Microsoft SQL Server：
- en: '[PRE43]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Example usage:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: “GREATEST” function
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “GREATEST”函数
- en: 'The “GREATEST” function is given any number of arguments and returns the one
    that is of the highest value - its equivalent to Python’s `max` function. A SQL
    standard version versus a CASE based version which only accommodates two arguments:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “GREATEST”函数被赋予任意数量的参数，并返回具有最高值的参数——它等同于Python的`max`函数。一个SQL标准版本与一个基于CASE的版本相对应，后者仅容纳两个参数：
- en: '[PRE45]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Example usage:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE46]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: “false” expression
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “false”表达式
- en: 'Render a “false” constant expression, rendering as “0” on platforms that don’t
    have a “false” constant:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染“false”常量表达式，在没有“false”常量的平台上呈现为“0”：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Example usage:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE48]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
