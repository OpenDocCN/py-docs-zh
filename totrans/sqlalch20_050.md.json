["```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import Session\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# create session and add objects\nwith Session(engine) as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```", "```py\n# verbose version of what a context manager will do\nwith Session(engine) as session:\n    session.begin()\n    try:\n        session.add(some_object)\n        session.add(some_other_object)\n    except:\n        session.rollback()\n        raise\n    else:\n        session.commit()\n```", "```py\n# create session and add objects\nwith Session(engine) as session:\n    with session.begin():\n        session.add(some_object)\n        session.add(some_other_object)\n    # inner context calls session.commit(), if there were no exceptions\n# outer context calls session.close()\n```", "```py\n# create session and add objects\nwith Session(engine) as session, session.begin():\n    session.add(some_object)\n    session.add(some_other_object)\n# inner context calls session.commit(), if there were no exceptions\n# outer context calls session.close()\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources, typically in module scope\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() without needing to pass the\n# engine each time\nwith Session() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n# closes the session\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() and include begin()/commit()/rollback()\n# at once\nwith Session.begin() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n# commits the transaction, closes the session\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    # query for ``User`` objects\n    statement = select(User).filter_by(name=\"ed\")\n\n    # list of ``User`` objects\n    user_obj = session.scalars(statement).all()\n\n    # query for individual columns\n    statement = select(User.name, User.fullname)\n\n    # list of Row objects\n    rows = session.execute(statement).all()\n```", "```py\nuser1 = User(name=\"user1\")\nuser2 = User(name=\"user2\")\nsession.add(user1)\nsession.add(user2)\n\nsession.commit()  # write changes to the database\n```", "```py\nsession.add_all([item1, item2, item3])\n```", "```py\n# mark two objects to be deleted\nsession.delete(obj1)\nsession.delete(obj2)\n\n# commit (or flush)\nsession.commit()\n```", "```py\nsession.flush()\n```", "```py\nSession = sessionmaker(autoflush=False)\n```", "```py\nwith mysession.no_autoflush:\n    mysession.add(some_object)\n    mysession.flush()\n```", "```py\nmy_user = session.get(User, 5)\n```", "```py\n>>> u1 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u2 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u1 is u2\nTrue\n```", "```py\n    session.expire(u1)\n    u1.some_attribute  # <-- lazy loads from the transaction\n    ```", "```py\n    session.refresh(u1)  # <-- emits a SQL query\n    u1.some_attribute  # <-- is refreshed from the transaction\n    ```", "```py\n    u2 = session.scalars(\n        select(User).where(User.id == 5).execution_options(populate_existing=True)\n    ).one()\n    ```", "```py\nwith Session(engine, autobegin=False) as session:\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    session.add(User(name=\"u1\"))\n    session.commit()\n\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    u1 = session.scalar(select(User).filter_by(name=\"u1\"))\n```", "```py\nwith Session(engine) as session:\n    result = session.execute(select(User))\n\n# closes session automatically\n```", "```py\n### this is the **wrong way to do it** ###\n\nclass ThingOne:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(FooBar).values(x=5))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\nclass ThingTwo:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(Widget).values(q=18))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\ndef run_my_program():\n    ThingOne().go()\n    ThingTwo().go()\n```", "```py\n### this is a **better** (but not the only) way to do it ###\n\nclass ThingOne:\n    def go(self, session):\n        session.execute(update(FooBar).values(x=5))\n\nclass ThingTwo:\n    def go(self, session):\n        session.execute(update(Widget).values(q=18))\n\ndef run_my_program():\n    with Session() as session:\n        with session.begin():\n            ThingOne().go(session)\n            ThingTwo().go(session)\n```", "```py\nsession = Session.object_session(someobject)\n```", "```py\nfrom sqlalchemy import inspect\n\nsession = inspect(someobject).session\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import Session\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# create session and add objects\nwith Session(engine) as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```", "```py\n# verbose version of what a context manager will do\nwith Session(engine) as session:\n    session.begin()\n    try:\n        session.add(some_object)\n        session.add(some_other_object)\n    except:\n        session.rollback()\n        raise\n    else:\n        session.commit()\n```", "```py\n# create session and add objects\nwith Session(engine) as session:\n    with session.begin():\n        session.add(some_object)\n        session.add(some_other_object)\n    # inner context calls session.commit(), if there were no exceptions\n# outer context calls session.close()\n```", "```py\n# create session and add objects\nwith Session(engine) as session, session.begin():\n    session.add(some_object)\n    session.add(some_other_object)\n# inner context calls session.commit(), if there were no exceptions\n# outer context calls session.close()\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources, typically in module scope\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() without needing to pass the\n# engine each time\nwith Session() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n# closes the session\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() and include begin()/commit()/rollback()\n# at once\nwith Session.begin() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n# commits the transaction, closes the session\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    # query for ``User`` objects\n    statement = select(User).filter_by(name=\"ed\")\n\n    # list of ``User`` objects\n    user_obj = session.scalars(statement).all()\n\n    # query for individual columns\n    statement = select(User.name, User.fullname)\n\n    # list of Row objects\n    rows = session.execute(statement).all()\n```", "```py\nuser1 = User(name=\"user1\")\nuser2 = User(name=\"user2\")\nsession.add(user1)\nsession.add(user2)\n\nsession.commit()  # write changes to the database\n```", "```py\nsession.add_all([item1, item2, item3])\n```", "```py\n# mark two objects to be deleted\nsession.delete(obj1)\nsession.delete(obj2)\n\n# commit (or flush)\nsession.commit()\n```", "```py\nsession.flush()\n```", "```py\nSession = sessionmaker(autoflush=False)\n```", "```py\nwith mysession.no_autoflush:\n    mysession.add(some_object)\n    mysession.flush()\n```", "```py\nmy_user = session.get(User, 5)\n```", "```py\n>>> u1 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u2 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u1 is u2\nTrue\n```", "```py\n    session.expire(u1)\n    u1.some_attribute  # <-- lazy loads from the transaction\n    ```", "```py\n    session.refresh(u1)  # <-- emits a SQL query\n    u1.some_attribute  # <-- is refreshed from the transaction\n    ```", "```py\n    u2 = session.scalars(\n        select(User).where(User.id == 5).execution_options(populate_existing=True)\n    ).one()\n    ```", "```py\nwith Session(engine, autobegin=False) as session:\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    session.add(User(name=\"u1\"))\n    session.commit()\n\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    u1 = session.scalar(select(User).filter_by(name=\"u1\"))\n```", "```py\nwith Session(engine) as session:\n    result = session.execute(select(User))\n\n# closes session automatically\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import Session\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# create session and add objects\nwith Session(engine) as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```", "```py\n# verbose version of what a context manager will do\nwith Session(engine) as session:\n    session.begin()\n    try:\n        session.add(some_object)\n        session.add(some_other_object)\n    except:\n        session.rollback()\n        raise\n    else:\n        session.commit()\n```", "```py\n# create session and add objects\nwith Session(engine) as session:\n    with session.begin():\n        session.add(some_object)\n        session.add(some_other_object)\n    # inner context calls session.commit(), if there were no exceptions\n# outer context calls session.close()\n```", "```py\n# create session and add objects\nwith Session(engine) as session, session.begin():\n    session.add(some_object)\n    session.add(some_other_object)\n# inner context calls session.commit(), if there were no exceptions\n# outer context calls session.close()\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources, typically in module scope\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() without needing to pass the\n# engine each time\nwith Session() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n# closes the session\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() and include begin()/commit()/rollback()\n# at once\nwith Session.begin() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n# commits the transaction, closes the session\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    # query for ``User`` objects\n    statement = select(User).filter_by(name=\"ed\")\n\n    # list of ``User`` objects\n    user_obj = session.scalars(statement).all()\n\n    # query for individual columns\n    statement = select(User.name, User.fullname)\n\n    # list of Row objects\n    rows = session.execute(statement).all()\n```", "```py\nuser1 = User(name=\"user1\")\nuser2 = User(name=\"user2\")\nsession.add(user1)\nsession.add(user2)\n\nsession.commit()  # write changes to the database\n```", "```py\nsession.add_all([item1, item2, item3])\n```", "```py\n# mark two objects to be deleted\nsession.delete(obj1)\nsession.delete(obj2)\n\n# commit (or flush)\nsession.commit()\n```", "```py\nsession.flush()\n```", "```py\nSession = sessionmaker(autoflush=False)\n```", "```py\nwith mysession.no_autoflush:\n    mysession.add(some_object)\n    mysession.flush()\n```", "```py\nmy_user = session.get(User, 5)\n```", "```py\n>>> u1 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u2 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u1 is u2\nTrue\n```", "```py\n    session.expire(u1)\n    u1.some_attribute  # <-- lazy loads from the transaction\n    ```", "```py\n    session.refresh(u1)  # <-- emits a SQL query\n    u1.some_attribute  # <-- is refreshed from the transaction\n    ```", "```py\n    u2 = session.scalars(\n        select(User).where(User.id == 5).execution_options(populate_existing=True)\n    ).one()\n    ```", "```py\nwith Session(engine, autobegin=False) as session:\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    session.add(User(name=\"u1\"))\n    session.commit()\n\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    u1 = session.scalar(select(User).filter_by(name=\"u1\"))\n```", "```py\nwith Session(engine, autobegin=False) as session:\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    session.add(User(name=\"u1\"))\n    session.commit()\n\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    u1 = session.scalar(select(User).filter_by(name=\"u1\"))\n```", "```py\nwith Session(engine) as session:\n    result = session.execute(select(User))\n\n# closes session automatically\n```", "```py\n### this is the **wrong way to do it** ###\n\nclass ThingOne:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(FooBar).values(x=5))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\nclass ThingTwo:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(Widget).values(q=18))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\ndef run_my_program():\n    ThingOne().go()\n    ThingTwo().go()\n```", "```py\n### this is a **better** (but not the only) way to do it ###\n\nclass ThingOne:\n    def go(self, session):\n        session.execute(update(FooBar).values(x=5))\n\nclass ThingTwo:\n    def go(self, session):\n        session.execute(update(Widget).values(q=18))\n\ndef run_my_program():\n    with Session() as session:\n        with session.begin():\n            ThingOne().go(session)\n            ThingTwo().go(session)\n```", "```py\nsession = Session.object_session(someobject)\n```", "```py\nfrom sqlalchemy import inspect\n\nsession = inspect(someobject).session\n```", "```py\n### this is the **wrong way to do it** ###\n\nclass ThingOne:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(FooBar).values(x=5))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\nclass ThingTwo:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(Widget).values(q=18))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\ndef run_my_program():\n    ThingOne().go()\n    ThingTwo().go()\n```", "```py\n### this is a **better** (but not the only) way to do it ###\n\nclass ThingOne:\n    def go(self, session):\n        session.execute(update(FooBar).values(x=5))\n\nclass ThingTwo:\n    def go(self, session):\n        session.execute(update(Widget).values(q=18))\n\ndef run_my_program():\n    with Session() as session:\n        with session.begin():\n            ThingOne().go(session)\n            ThingTwo().go(session)\n```", "```py\nsession = Session.object_session(someobject)\n```", "```py\nfrom sqlalchemy import inspect\n\nsession = inspect(someobject).session\n```"]