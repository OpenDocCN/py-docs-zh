- en: 'JEP 9263: Typed keys & pluggable RNGs'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JEP 9263：类型化密钥和可插拔的RNG
- en: 原文：[`jax.readthedocs.io/en/latest/jep/9263-typed-keys.html`](https://jax.readthedocs.io/en/latest/jep/9263-typed-keys.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jep/9263-typed-keys.html`](https://jax.readthedocs.io/en/latest/jep/9263-typed-keys.html)
- en: '*Jake VanderPlas, Roy Frostig*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jake VanderPlas, Roy Frostig*'
- en: '*August 2023*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*August 2023*'
- en: Overview
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Going forward, RNG keys in JAX will be more type-safe and customizable. Rather
    than representing a single PRNG key by a length-2 `uint32` array, it will be represented
    as a scalar array with a special RNG dtype that satisfies `jnp.issubdtype(key.dtype,
    jax.dtypes.prng_key)`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，在JAX中，RNG密钥将更加类型安全和可定制。 不再通过长度为2的`uint32`数组表示单个PRNG密钥，而是通过一个标量数组表示，该数组具有满足`jnp.issubdtype(key.dtype,
    jax.dtypes.prng_key)`的特殊RNG dtype。
- en: 'For now, old-style RNG keys can still be created with `jax.random.PRNGKey()`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，可以使用`jax.random.PRNGKey()`仍然创建旧样式的RNG密钥：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Starting now, new-style RNG keys can be created with `jax.random.key()`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，可以使用`jax.random.key()`创建新样式的RNG密钥：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This (scalar-shaped) array behaves the same as any other JAX array, except
    that its element type is a key (and associated metadata). We can make non-scalar
    key arrays as well, for example by applying `jax.vmap()` to `jax.random.key()`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个（标量形状的）数组的行为与任何其他JAX数组相同，只是其元素类型是一个密钥（及其关联的元数据）。 我们也可以制作非标量密钥数组，例如通过将`jax.vmap()`应用于`jax.random.key()`：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Aside from switching to a new constructor, most PRNG-related code should continue
    to work as expected. You can continue to use keys in `jax.random` APIs as before;
    for example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了切换到新的构造函数外，大多数与PRNG相关的代码应该继续按预期工作。 您可以像以前一样继续使用`jax.random` API中的密钥；例如：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, not all numerical operations work on key arrays. They now intentionally
    raise errors:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有数值操作都适用于密钥数组。 它们现在故意引发错误：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If for some reason you need to recover the underlying buffer (the old-style
    key), you can do so with `jax.random.key_data()`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因您需要恢复底层缓冲区（旧样式密钥），您可以使用`jax.random.key_data()`来实现：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For old-style keys, `key_data()` is an identity operation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于旧样式密钥，`key_data()`是一个身份操作。
- en: What does this mean for users?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对用户来说，这意味着什么？
- en: 'For JAX users, this change does not require any code changes now, but we hope
    that you will find the upgrade worthwhile and switch to using typed keys. To try
    this out, replace uses of jax.random.PRNGKey() with jax.random.key(). This may
    introduce breakages in your code that fall into one of a few categories:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JAX用户，这种变化现在不需要任何代码更改，但我们希望您会发现升级是值得的，并切换到使用类型化密钥。 要尝试这个功能，请将使用`jax.random.PRNGKey()`替换为`jax.random.key()`。
    这可能会在您的代码中引入一些破坏性变化，属于以下几类之一：
- en: If your code performs unsafe/unsupported operations on keys (such as indexing,
    arithmetic, transposition, etc; see Type Safety section below), this change will
    catch it. You can update your code to avoid such unsupported operations, or use
    `jax.random.key_data()` and `jax.random.wrap_key_data()` to manipulate raw key
    buffers in an unsafe way.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的代码对密钥执行不安全/不支持的操作（如索引、算术运算、转置等；请参阅下面的类型安全部分），这种变化将捕捉到它。 您可以更新您的代码以避免此类不支持的操作，或者使用`jax.random.key_data()`和`jax.random.wrap_key_data()`以不安全的方式操作原始密钥缓冲区。
- en: If your code includes explicit logic about `key.shape`, you may need to update
    this logic to account for the fact that the trailing key buffer dimension is no
    longer an explicit part of the shape.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的代码包含关于`key.shape`的显式逻辑，您可能需要更新此逻辑以考虑尾部密钥缓冲区维度不再是形状的显式部分。
- en: If your code includes explicit logic about `key.dtype`, you will need to upgrade
    it to use the new public APIs for reasoning about RNG dtypes, such as `dtypes.issubdtype(dtype,
    dtypes.prng_key)`.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的代码包含关于`key.dtype`的显式逻辑，您需要将其升级为使用新的公共API来推理RNG dtypes，例如`dtypes.issubdtype(dtype,
    dtypes.prng_key)`。
- en: If you call a JAX-based library which does not yet handle typed PRNG keys, you
    can use `raw_key = jax.random.key_data(key)` for now to recover the raw buffer,
    but please keep a TODO to remove this once the downstream library supports typed
    RNG keys.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您调用一个尚未处理类型化PRNG密钥的基于JAX的库，您现在可以使用`raw_key = jax.random.key_data(key)`来恢复原始缓冲区，但请务必保留一个TODO来在下游库支持类型化RNG密钥后移除此操作。
- en: At some point in the future, we plan to deprecate `jax.random.PRNGKey()` and
    require the use of `jax.random.key()`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的某个时候，我们计划废弃`jax.random.PRNGKey()`并要求使用`jax.random.key()`。
- en: Detecting new-style typed keys
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测新样式的类型化密钥
- en: 'To check whether an object is a new-style typed PRNG key, you can use `jax.dtypes.issubdtype`
    or `jax.numpy.issubdtype`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查对象是否为新样式的类型化PRNG密钥，可以使用`jax.dtypes.issubdtype`或`jax.numpy.issubdtype`：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Type annotations for PRNG Keys
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PRNG密钥的类型注释
- en: The recommended type annotation for both old and new-style PRNG keys is `jax.Array`.
    A PRNG key is distinguished from other arrays based on its `dtype`, and it is
    not currently possible to specify dtypes of JAX arrays within a type annotation.
    Previously it was possible to use `jax.random.KeyArray` or `jax.random.PRNGKeyArray`
    as type annotations, but these have always been aliased to `Any` under type checking,
    and so `jax.Array` has much more specificity.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 旧式和新式PRNG密钥的推荐类型注释是 `jax.Array`。PRNG密钥根据其`dtype`与其他数组区分开来，目前无法在类型注释中指定JAX数组的dtype。以前可以使用`jax.random.KeyArray`或`jax.random.PRNGKeyArray`作为类型注释，但在类型检查下始终被别名为`Any`，因此`jax.Array`具有更高的特异性。
- en: '*Note: `jax.random.KeyArray` and `jax.random.PRNGKeyArray` were deprecated
    in JAX version 0.4.16, and removed in JAX version 0.4.24*.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*注：在 JAX 版本 0.4.16 中，`jax.random.KeyArray` 和 `jax.random.PRNGKeyArray` 已弃用，并在
    JAX 版本 0.4.24 中移除*。'
- en: Notes for JAX library authors
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JAX库作者注意事项
- en: 'If you maintain a JAX-based library, your users are also JAX users. Know that
    JAX will continue to support “raw” old-style keys in `jax.random` for now, so
    callers may expect them to remain accepted everywhere. If you prefer to require
    new-style typed keys in your library, then you may want to enforce them with a
    check along the following lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您维护基于JAX的库，您的用户也是JAX用户。请知道JAX将继续支持“原始”旧式密钥在`jax.random`中，因此调用者可能期望它们在所有地方都被接受。如果您希望在您的库中要求新式类型化密钥，则可能希望使用以下方式进行检查以强制执行它们：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Motivation
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: Two major motivating factors for this change are customizability and safety.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改的两个主要动机因素是可定制性和安全性。
- en: Customizing PRNG implementations
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义PRNG实现
- en: JAX currently operates with a single, globally configured PRNG algorithm. A
    PRNG key is a vector of unsigned 32-bit integers, which jax.random APIs consume
    to produce pseudorandom streams. Any higher-rank uint32 array is interpreted as
    an array of such key buffers, where the trailing dimension represents keys.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JAX目前使用单一的全局配置PRNG算法。PRNG密钥是无符号32位整数的向量，jax.random API使用它们生成伪随机流。任何更高秩的uint32数组都被解释为具有这些密钥缓冲区的数组，其中尾部维度表示密钥。
- en: The drawbacks of this design became clearer as we introduced alternative PRNG
    implementations, which must be selected by setting a global or local configuration
    flag. Different PRNG implementations have different size key buffers, and different
    algorithms for generating random bits. Determining this behavior with a global
    flag is error-prone, especially when there is more than one key implementation
    in use process-wide.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计的缺点在我们引入替代的伪随机数生成器（PRNG）实现时变得更加明显，这些实现必须通过设置全局或本地配置标志来选择。不同的PRNG实现具有不同大小的密钥缓冲区和生成随机比特的不同算法。通过全局标志确定此行为容易出错，特别是在整个进程中使用多个密钥实现时。
- en: 'Our new approach is to carry the implementation as part of the PRNG key type,
    i.e. with the element type of the key array. Using the new key API, here is an
    example of generating pseudorandom values under the default threefry2x32 implementation
    (which is implemented in pure Python and compiled with JAX), and under the non-default
    rbg implementation (which corresponds to a single XLA random-bit generation operation):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新方法是将实现作为PRNG密钥类型的一部分，即密钥数组的元素类型。使用新的密钥API，下面是在默认的threefry2x32实现（纯Python实现，并与JAX编译）和非默认的rbg实现（对应单个XLA随机比特生成操作）下生成伪随机值的示例：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Safe PRNG key use
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全的PRNG密钥使用
- en: PRNG keys are really only meant to support a few operations in principle, namely
    key derivation (e.g. splitting) and random number generation. The PRNG is designed
    to generate independent pseudorandom numbers, provided keys are properly split
    and that every key is consumed once.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，PRNG密钥确实只支持少数几种操作，即密钥衍生（例如拆分）和随机数生成。只要正确拆分密钥并且每个密钥只使用一次，PRNG就设计为生成独立的伪随机数。
- en: 'Code that manipulates or consumes key data in other ways often indicates an
    accidental bug, and representing key arrays as raw uint32 buffers has allowed
    for easy misuse along these lines. Here are a few example misuses that we’ve encountered
    in the wild:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他方式中操作或消耗密钥数据的代码通常表明是意外的错误，将密钥数组表示为原始uint32缓冲区已经允许沿着这些方向容易发生误用。以下是我们在实际使用中遇到的几个示例错误用法：
- en: Key buffer indexing
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 密钥缓冲区索引
- en: 'Access to the underlying integer buffers makes it easy to try and derive keys
    in non-standard ways, sometimes with unexpectedly bad consequences:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 访问底层整数缓冲区使得可以轻松尝试以非标准方式导出密钥，有时会带来意想不到的不良后果：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If this key were a new-style typed key made with `random.key(999)`, indexing
    into the key buffer would error instead.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此关键是使用`random.key(999)`创建的新型类型化关键，则索引到关键缓冲区将会出错。
- en: Key arithmetic
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关键算术
- en: 'Key arithmetic is a similarly treacherous way to derive keys from other keys.
    Deriving keys in a way that avoids `jax.random.split()` or `jax.random.fold_in()`
    by manipulating key data directly produces a batch of keys that—depending on the
    PRNG implementation—might then generate correlated random numbers within the batch:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关键算术是从其他关键派生关键的一种类似险恶的方式。通过直接操作关键数据而避免`jax.random.split()`或`jax.random.fold_in()`来派生关键，会产生一批关键，这些关键——根据
    PRNG 实现——可能会在批次内生成相关的随机数：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: New-style typed keys created with `random.key(0)` address this by disallowing
    arithmetic operations on keys.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`random.key(0)`创建的新型类型化关键通过禁止对关键进行算术操作来解决这个问题。
- en: Inadvertent transposing of key buffers
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 意外转置关键缓冲区
- en: 'With “raw” old-style key arrays, it’s easy to accidentally swap batch (leading)
    dimensions and key buffer (trailing) dimensions. Again this possibly results in
    keys that produce correlated pseudorandomness. A pattern that we’ve seen over
    time boils down to this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“原始”旧式关键数组时，很容易意外交换批次（前导）维度和关键缓冲区（尾随）维度。再次可能导致产生相关伪随机性的关键。多年来我们见过的一个模式归结如下：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The bug here is subtle. By mapping over `in_axes=1`, this code makes new keys
    by combining a single element from each key buffer in the batch. The resulting
    keys are different from one another, but are effectively “derived” in a non-standard
    way. Again, the PRNG is not designed or tested to produce independent random streams
    from such a key batch.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 bug 很微妙。通过在 `in_axes=1` 上映射，此代码通过将批次中每个关键缓冲区的单个元素组合成新关键来生成新关键。生成的关键彼此不同，但实质上以非标准方式“派生”。再次强调，PRNG
    并未设计或测试以从这样的关键批次生成独立的随机流。
- en: New-style typed keys created with `random.key(0)` address this by hiding the
    buffer representation of individual keys, instead treating keys as opaque elements
    of a key array. Key arrays have no trailing “buffer” dimension to index, transpose,
    or map over.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`random.key(0)`创建的新型类型化关键通过隐藏个体关键的缓冲区表示，而将关键视为关键数组的不透明元素来解决这个问题。关键数组没有尾随的“缓冲区”维度可以索引、转置或映射。
- en: Key reuse
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关键重用
- en: Unlike state-based PRNG APIs like [`numpy.random`](https://numpy.org/doc/stable/reference/random/index.html#module-numpy.random
    "(in NumPy v2.0)"), JAX’s functional PRNG does not implicitly update a key when
    it has been used.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不像像[`numpy.random`](https://numpy.org/doc/stable/reference/random/index.html#module-numpy.random
    "(在 NumPy v2.0 中)")这样的基于状态的 PRNG API，JAX 的函数式 PRNG 在使用后不会隐式更新关键。
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We’re actively working on tools to detect and prevent unintended key reuse.
    This is still work in progress, but it relies on typed key arrays. Upgrading to
    typed keys now sets us up to introduce these safety features as we build them
    out.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在积极开发工具来检测和防止意外的关键重用。这仍然是一个正在进行中的工作，但它依赖于类型化关键数组。现在升级到类型化关键使我们能够在构建这些安全功能时引入它们。
- en: Design of typed PRNG keys
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型化 PRNG 关键的设计
- en: Typed PRNG keys are implemented as an instance of extended dtypes within JAX,
    of which the new PRNG dtypes are a sub-dtype.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化 PRNG 关键在 JAX 中实现为扩展 dtypes 的实例，其中新的 PRNG dtypes 是子 dtype。
- en: Extended dtypes
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展 dtypes
- en: 'From the user perspective, an extended dtype dt has the following user-visible
    properties:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户角度来看，扩展 dtype dt 具有以下用户可见属性：
- en: '`jax.dtypes.issubdtype(dt, jax.dtypes.extended)` returns `True`: this is the
    public API that should be used to detect whether a dtype is an extended dtype.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.dtypes.issubdtype(dt, jax.dtypes.extended)` 返回 `True`：这是应该用于检测 dtype 是否为扩展
    dtype 的公共 API。'
- en: It has a class-level attribute `dt.type`, which returns a typeclass in the hierarchy
    of `numpy.generic`. This is analogous to how `np.dtype('int32').type` returns
    `numpy.int32`, which is not a dtype but rather a scalar type, and a subclass of
    `numpy.generic`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有类级属性`dt.type`，返回在`numpy.generic`层次结构中的类型类。这类似于`np.dtype('int32').type`返回`numpy.int32`，这不是
    dtype 而是标量类型，并且是`numpy.generic`的子类。
- en: 'Unlike numpy scalar types, we do not allow instantiation of `dt.type` scalar
    objects: this is in accordance with JAX’s decision to represent scalar values
    as zero-dimensional arrays.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 numpy 标量类型不同，我们不允许实例化`dt.type`标量对象：这符合 JAX 将标量值表示为零维数组的决定。
- en: 'From a non-public implementation perspective, an extended dtype has the following
    properties:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从非公开实现的角度来看，扩展 dtype 具有以下属性：
- en: Its type is a subclass of the private base class `jax._src.dtypes.ExtendedDtype`,
    the non-public base class used for extended dtypes. An instance of `ExtendedDtype`
    is analogous to an instance of `np.dtype`, like `np.dtype('int32')`.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的类型是私有基类`jax._src.dtypes.ExtendedDtype`的子类，这是用于扩展数据类型的非公开基类。`ExtendedDtype`的实例类似于`np.dtype`的实例，例如`np.dtype('int32')`。
- en: It has a private `_rules` attribute which allows the dtype to define how it
    behaves under particular operations. For example, `jax.lax.full(shape, fill_value,
    dtype)` will delegate to `dtype._rules.full(shape, fill_value, dtype)` when `dtype`
    is an extended dtype.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有私有的`_rules`属性，允许数据类型定义在特定操作下的行为方式。例如，当`dtype`是扩展数据类型时，`jax.lax.full(shape,
    fill_value, dtype)`将委托给`dtype._rules.full(shape, fill_value, dtype)`。
- en: Why introduce extended dtypes in generality, beyond PRNGs? We reuse this same
    extended dtype mechanism elsewhere internally. For example, the `jax._src.core.bint`
    object, a bounded integer type used for experimental work on dynamic shapes, is
    another extended dtype. In recent JAX versions it satisfies the properties above
    (See [jax/_src/core.py#L1789-L1802](https://github.com/google/jax/blob/jax-v0.4.14/jax/_src/core.py#L1789-L1802)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要在一般情况下引入扩展数据类型，超出了伪随机数生成器的范围？我们在内部的其他地方重复使用同样的扩展数据类型机制。例如，`jax._src.core.bint`对象是另一种扩展数据类型，用于动态形状的实验工作。在最近的JAX版本中，它满足上述属性（见[jax/_src/core.py#L1789-L1802](https://github.com/google/jax/blob/jax-v0.4.14/jax/_src/core.py#L1789-L1802)）。
- en: PRNG dtypes
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PRNG数据类型
- en: 'PRNG dtypes are defined as a particular case of extended dtypes. Specifically,
    this change introduces a new public scalar type class jax.dtypes.prng_key, which
    has the following property:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: PRNG数据类型被定义为扩展数据类型的特例。具体来说，此更改引入了一个新的公共标量类型类`jax.dtypes.prng_key`，其具有以下属性：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'PRNG key arrays then have a dtype with the following properties:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: PRNG密钥数组然后具有以下属性的数据类型：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And in addition to `key.dtype._rules` as outlined for extended dtypes in general,
    PRNG dtypes define `key.dtype._impl`, which contains the metadata that defines
    the PRNG implementation. The PRNG implementation is currently defined by the non-public
    `jax._src.prng.PRNGImpl` class. For now, `PRNGImpl` isn’t meant to be a public
    API, but we might revisit this soon to allow for fully custom PRNG implementations.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一般情况下扩展数据类型的`key.dtype._rules`，PRNG数据类型定义了`key.dtype._impl`，其中包含定义PRNG实现的元数据。当前，`PRNGImpl`并不打算成为公共API，但我们可能很快会重新审视这一点，以允许完全自定义的PRNG实现。
- en: Progress
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进展
- en: Following is a non-comprehensive list of key Pull Requests implementing the
    above design. The main tracking issue is [#9263](https://github.com/google/jax/issues/9263).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实施上述设计的关键拉取请求的非全面列表。主要的跟踪问题是[#9263](https://github.com/google/jax/issues/9263)。
- en: 'Implement pluggable PRNG via `PRNGImpl`: [#6899](https://github.com/google/jax/issues/6899)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`PRNGImpl`实现可插拔PRNG：[#6899](https://github.com/google/jax/issues/6899)
- en: 'Implement `PRNGKeyArray`, without dtype: [#11952](https://github.com/google/jax/issues/11952)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现`PRNGKeyArray`，不包括数据类型：[#11952](https://github.com/google/jax/issues/11952)
- en: 'Add a “custom element” dtype property to `PRNGKeyArray` with `_rules` attribute:
    [#12167](https://github.com/google/jax/issues/12167)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`PRNGKeyArray`添加一个“自定义元素”数据类型属性，具有`_rules`属性：[#12167](https://github.com/google/jax/issues/12167)
- en: 'Rename “custom element type” to “opaque dtype”: [#12170](https://github.com/google/jax/issues/12170)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“自定义元素类型”重命名为“不透明数据类型”：[#12170](https://github.com/google/jax/issues/12170)
- en: 'Refactor `bint` to use the opaque dtype infrastructure: [#12707](https://github.com/google/jax/issues/12707)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构`bint`以使用不透明数据类型基础设施：[#12707](https://github.com/google/jax/issues/12707)
- en: 'Add `jax.random.key` to create typed keys directly: [#16086](https://github.com/google/jax/issues/16086)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`jax.random.key`以直接创建带类型的密钥：[#16086](https://github.com/google/jax/issues/16086)
- en: 'Add `impl` argument to `key` and `PRNGKey`: [#16589](https://github.com/google/jax/issues/16589)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`key`和`PRNGKey`添加`impl`参数：[#16589](https://github.com/google/jax/issues/16589)
- en: 'Rename “opaque dtype” to “extended dtype” & define `jax.dtypes.extended`: [#16824](https://github.com/google/jax/issues/16824)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“不透明数据类型”重命名为“扩展数据类型”，并定义`jax.dtypes.extended`：[#16824](https://github.com/google/jax/issues/16824)
- en: 'Introduce `jax.dtypes.prng_key` and unify PRNG dtype with Extended dtype: [#16781](https://github.com/google/jax/issues/16781)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入`jax.dtypes.prng_key`并统一PRNG数据类型和扩展数据类型：[#16781](https://github.com/google/jax/issues/16781)
- en: 'Add a `jax_legacy_prng_key` flag to support warning or erroring when using
    legacy (raw) PRNG keys: [#17225](https://github.com/google/jax/issues/17225)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个`jax_legacy_prng_key`标志，以支持在使用传统（原始）PRNG密钥时发出警告或错误：[#17225](https://github.com/google/jax/issues/17225)
