- en: Working with pytrees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 pytrees
- en: 原文：[`jax.readthedocs.io/en/latest/working-with-pytrees.html`](https://jax.readthedocs.io/en/latest/working-with-pytrees.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[原文：`jax.readthedocs.io/en/latest/working-with-pytrees.html`](https://jax.readthedocs.io/en/latest/working-with-pytrees.html)'
- en: JAX has built-in support for objects that look like dictionaries (dicts) of
    arrays, or lists of lists of dicts, or other nested structures — in JAX these
    are called pytrees. This section will explain how to use them, provide useful
    code examples, and point out common “gotchas” and patterns.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 内置支持类似字典（dicts）的数组对象，或者列表的列表的字典，或其他嵌套结构 — 在 JAX 中称为 pytrees。本节将解释如何使用它们，提供有用的代码示例，并指出常见的“坑”和模式。
- en: '## What is a pytree?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 什么是 pytree？'
- en: A pytree is a container-like structure built out of container-like Python objects
    — “leaf” pytrees and/or more pytrees. A pytree can include lists, tuples, and
    dicts. A leaf is anything that’s not a pytree, such as an array, but a single
    leaf is also a pytree.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 pytree 是由类似容器的 Python 对象构建的容器结构 — “叶子” pytrees 和/或更多的 pytrees。一个 pytree 可以包括列表、元组和字典。一个叶子是任何不是
    pytree 的东西，比如一个数组，但一个单独的叶子也是一个 pytree。
- en: 'In the context of machine learning (ML), a pytree can contain:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习（ML）的上下文中，一个 pytree 可能包含：
- en: Model parameters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型参数
- en: Dataset entries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据集条目
- en: Reinforcement learning agent observations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化学习代理观察
- en: When working with datasets, you can often come across pytrees (such as lists
    of lists of dicts).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理数据集时，你经常会遇到 pytrees（比如列表的列表的字典）。
- en: 'Below is an example of a simple pytree. In JAX, you can use `jax.tree.leaves()`,
    to extract the flattened leaves from the trees, as demonstrated here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单 pytree 的示例。在 JAX 中，你可以使用 `jax.tree.leaves()`，从树中提取扁平化的叶子，如此处所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Any tree-like structure built out of container-like Python objects can be treated
    as a pytree in JAX. Classes are considered container-like if they are in the pytree
    registry, which by default includes lists, tuples, and dicts. Any object whose
    type is *not* in the pytree container registry will be treated as a leaf node
    in the tree.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JAX 中，任何由类似容器的 Python 对象构建的树状结构都可以被视为 pytree。如果它们在 pytree 注册表中，则类被视为容器类，默认情况下包括列表、元组和字典。任何类型不在
    pytree 容器注册表中的对象都将被视为树中的叶子节点。
- en: 'The pytree registry can be extended to include user-defined container classes
    by registering the class with functions that specify how to flatten the tree;
    see Custom pytree nodes below.  ## Common pytree functions'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过注册类并使用指定如何扁平化树的函数来扩展 pytree 注册表以包括用户定义的容器类；请参见下面的自定义 pytree 节点。
- en: JAX provides a number of utilities to operate over pytrees. These can be found
    in the `jax.tree_util` subpackage; for convenience many of these have aliases
    in the `jax.tree` module.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 提供了许多实用程序来操作 pytrees。这些可以在 `jax.tree_util` 子包中找到；为了方便起见，其中许多在 `jax.tree`
    模块中有别名。
- en: 'Common function: `jax.tree.map`'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见功能：`jax.tree.map`
- en: The most commonly used pytree function is `jax.tree.map()`. It works analogously
    to Python’s native `map`, but transparently operates over entire pytrees.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的 pytree 函数是 `jax.tree.map()`。它的工作方式类似于 Python 的原生 `map`，但透明地操作整个 pytree。
- en: 'Here’s an example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`jax.tree.map()` also allows mapping a [N-ary](https://en.wikipedia.org/wiki/N-ary)
    function over multiple arguments. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.tree.map()` 也允许在多个参数上映射一个[N-ary](https://en.wikipedia.org/wiki/N-ary)函数。例如：'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When using multiple arguments with `jax.tree.map()`, the structure of the inputs
    must exactly match. That is, lists must have the same number of elements, dicts
    must have the same keys, etc.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用多个参数与 `jax.tree.map()` 时，输入的结构必须完全匹配。也就是说，列表必须有相同数量的元素，字典必须有相同的键，等等。
- en: '### Example of `jax.tree.map` with ML model parameters'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '### 用 `jax.tree.map` 示例解释 ML 模型参数'
- en: This example demonstrates how pytree operations can be useful when training
    a simple [multi-layer perceptron (MLP)](https://en.wikipedia.org/wiki/Multilayer_perceptron).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了在训练简单[多层感知器（MLP）](https://en.wikipedia.org/wiki/Multilayer_perceptron)时，pytree
    操作如何有用。
- en: 'Begin with defining the initial model parameters:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从定义初始模型参数开始：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use `jax.tree.map()` to check the shapes of the initial parameters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `jax.tree.map()` 检查初始参数的形状：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, define the functions for training the MLP model:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义训练 MLP 模型的函数：
- en: '[PRE9]  ## Custom pytree nodes'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]  ## 自定义 pytree 节点'
- en: This section explains how in JAX you can extend the set of Python types that
    will be considered *internal nodes* in pytrees (pytree nodes) by using `jax.tree_util.register_pytree_node()`
    with `jax.tree.map()`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了在 JAX 中如何通过使用 `jax.tree_util.register_pytree_node()` 和 `jax.tree.map()`
    扩展将被视为 pytree 内部节点（pytree 节点）的 Python 类型集合。
- en: 'Why would you need this? In the previous examples, pytrees were shown as lists,
    tuples, and dicts, with everything else as pytree leaves. This is because if you
    define your own container class, it will be considered to be a pytree leaf unless
    you *register* it with JAX. This is also the case even if your container class
    has trees inside it. For example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么需要这个？在前面的示例中，pytrees 被展示为列表、元组和字典，其他所有内容都作为 pytree 叶子。这是因为如果你定义了自己的容器类，它会被视为
    pytree 叶子，除非你*注册*它到 JAX。即使你的容器类内部包含树形结构，这个情况也是一样的。例如：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Accordingly, if you try to use a `jax.tree.map()` expecting the leaves to be
    elements inside the container, you will get an error:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你尝试使用 `jax.tree.map()` 来期望容器内的元素作为叶子，你会得到一个错误：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As a solution, JAX allows to extend the set of types to be considered internal
    pytree nodes through a global registry of types. Additionally, the values of registered
    types are traversed recursively.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案，JAX 允许通过全局类型注册表扩展被视为内部 pytree 节点的类型集合。此外，已注册类型的值被递归地遍历。
- en: 'First, register a new type using `jax.tree_util.register_pytree_node()`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 `jax.tree_util.register_pytree_node()` 注册一个新类型：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now you can traverse the special container structure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以遍历特殊容器结构：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Modern Python comes equipped with helpful tools to make defining containers
    easier. Some will work with JAX out-of-the-box, but others require more care.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 Python 配备了有助于更轻松定义容器的有用工具。一些工具可以直接与 JAX 兼容，但其他的则需要更多关注。
- en: 'For instance, a Python `NamedTuple` subclass doesn’t need to be registered
    to be considered a pytree node type:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Python 中的 `NamedTuple` 子类不需要注册即可被视为 pytree 节点类型：
- en: '[PRE17]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Notice that the `name` field now appears as a leaf, because all tuple elements
    are children. This is what happens when you don’t have to register the class the
    hard way.  ## Pytrees and JAX transformations'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，现在 `name` 字段出现为一个叶子，因为所有元组元素都是子元素。这就是当你不必费力注册类时会发生的情况。 ## Pytrees 和 JAX
    变换'
- en: Many JAX functions, like `jax.lax.scan()`, operate over pytrees of arrays. In
    addition, all JAX function transformations can be applied to functions that accept
    as input and produce as output pytrees of arrays.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 JAX 函数，比如 `jax.lax.scan()`，操作的是数组的 pytrees。此外，所有 JAX 函数变换都可以应用于接受作为输入和输出的数组
    pytrees 的函数。
- en: Some JAX function transformations take optional parameters that specify how
    certain input or output values should be treated (such as the `in_axes` and `out_axes`
    arguments to `jax.vmap()`). These parameters can also be pytrees, and their structure
    must correspond to the pytree structure of the corresponding arguments. In particular,
    to be able to “match up” leaves in these parameter pytrees with values in the
    argument pytrees, the parameter pytrees are often constrained to be tree prefixes
    of the argument pytrees.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 JAX 函数变换接受可选参数，指定如何处理某些输入或输出值（例如 `in_axes` 和 `out_axes` 参数给 `jax.vmap()`）。这些参数也可以是
    pytrees，它们的结构必须对应于相应参数的 pytree 结构。特别是为了能够将这些参数 pytree 中的叶子与参数 pytree 中的值匹配起来，“匹配”参数
    pytrees 的叶子与参数 pytrees 的值，这些参数 pytrees 通常受到一定限制。
- en: 'For example, if you pass the following input to `jax.vmap()` (note that the
    input arguments to a function are considered a tuple):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你将以下输入传递给 `jax.vmap()`（请注意，函数的输入参数被视为一个元组）：
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'then you can use the following `in_axes` pytree to specify that only the `k2`
    argument is mapped (`axis=0`), and the rest aren’t mapped over (`axis=None`):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下 `in_axes` pytree 来指定仅映射 `k2` 参数（`axis=0`），其余不进行映射（`axis=None`）：
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The optional parameter pytree structure must match that of the main input pytree.
    However, the optional parameters can optionally be specified as a “prefix” pytree,
    meaning that a single leaf value can be applied to an entire sub-pytree.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数 pytree 结构必须匹配主输入 pytree 的结构。但是，可选参数可以选择作为“前缀” pytree 指定，这意味着一个单独的叶值可以应用于整个子
    pytree。
- en: 'For example, if you have the same `jax.vmap()` input as above, but wish to
    only map over the dictionary argument, you can use:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有与上述相同的 `jax.vmap()` 输入，但希望仅对字典参数进行映射，你可以使用：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Alternatively, if you want every argument to be mapped, you can write a single
    leaf value that is applied over the entire argument tuple pytree:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果希望每个参数都被映射，可以编写一个应用于整个参数元组 pytree 的单个叶值：
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This happens to be the default `in_axes` value for `jax.vmap()`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这恰好是`jax.vmap()`的默认`in_axes`值。
- en: 'The same logic applies to other optional parameters that refer to specific
    input or output values of a transformed function, such as `out_axes` in `jax.vmap()`.  ##
    Explicit key paths'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '对于转换函数的特定输入或输出值的其他可选参数，例如`jax.vmap()`中的`out_axes`，相同的逻辑也适用于其他可选参数。  ## 显式键路径'
- en: In a pytree each leaf has a *key path*. A key path for a leaf is a `list` of
    *keys*, where the length of the list is equal to the depth of the leaf in the
    pytree . Each *key* is a [hashable object](https://docs.python.org/3/glossary.html#term-hashable)
    that represents an index into the corresponding pytree node type. The type of
    the key depends on the pytree node type; for example, the type of keys for `dict`s
    is different from the type of keys for `tuple`s.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pytree 中，每个叶子都有一个*键路径*。叶的键路径是一个*键*的`list`，列表的长度等于叶在 pytree 中的深度。每个*键*是一个[hashable
    对象](https://docs.python.org/3/glossary.html#term-hashable)，表示对应的 pytree 节点类型中的索引。键的类型取决于
    pytree 节点类型；例如，对于`dict`，键的类型与`tuple`的键的类型不同。
- en: For built-in pytree node types, the set of keys for any pytree node instance
    is unique. For a pytree comprising nodes with this property, the key path for
    each leaf is unique.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何 pytree 节点实例的内置 pytree 节点类型，其键集是唯一的。对于具有此属性的节点组成的 pytree，每个叶的键路径都是唯一的。
- en: 'JAX has the following `jax.tree_util.*` methods for working with key paths:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 提供了以下用于处理键路径的`jax.tree_util.*`方法：
- en: '`jax.tree_util.tree_flatten_with_path()`: Works similarly to `jax.tree.flatten()`,
    but returns key paths.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util.tree_flatten_with_path()`: 类似于`jax.tree.flatten()`，但返回键路径。'
- en: '`jax.tree_util.tree_map_with_path()`: Works similarly to `jax.tree.map()`,
    but the function also takes key paths as arguments.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util.tree_map_with_path()`: 类似于`jax.tree.map()`，但函数还接受键路径作为参数。'
- en: '`jax.tree_util.keystr()`: Given a general key path, returns a reader-friendly
    string expression.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jax.tree_util.keystr()`: 给定一个通用键路径，返回一个友好的读取器字符串表达式。'
- en: 'For example, one use case is to print debugging information related to a certain
    leaf value:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个用例是打印与某个叶值相关的调试信息：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To express key paths, JAX provides a few default key types for the built-in
    pytree node types, namely:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要表达键路径，JAX 提供了几种内置 pytree 节点类型的默认键类型，即：
- en: '`SequenceKey(idx: int)`: For lists and tuples.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SequenceKey(idx: int)`: 适用于列表和元组。'
- en: '`DictKey(key: Hashable)`: For dictionaries.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DictKey(key: Hashable)`: 用于字典。'
- en: '`GetAttrKey(name: str)`: For `namedtuple`s and preferably custom pytree nodes
    (more in the next section)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetAttrKey(name: str)`: 适用于`namedtuple`和最好是自定义的 pytree 节点（更多见下一节）'
- en: You are free to define your own key types for your custom nodes. They will work
    with `jax.tree_util.keystr()` as long as their `__str__()` method is also overridden
    with a reader-friendly expression.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自由地为自定义节点定义自己的键类型。只要它们的`__str__()`方法也被覆盖为友好的表达式，它们将与`jax.tree_util.keystr()`一起使用。
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]  ## Common pytree gotchas'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE26]  ## 常见的 pytree 陷阱'
- en: This section covers some of the most common problems (“gotchas”) encountered
    when using JAX pytrees.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了在使用 JAX pytrees 时遇到的一些常见问题（“陷阱”）。
- en: Mistaking pytree nodes for leaves
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 pytree 节点误认为叶子
- en: 'A common gotcha to look out for is accidentally introducing *tree nodes* instead
    of *leaves*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的需要注意的问题是意外引入*树节点*而不是*叶子节点*：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What happened here is that the `shape` of an array is a tuple, which is a pytree
    node, with its elements as leaves. Thus, in the map, instead of calling `jnp.ones`
    on e.g. `(2, 3)`, it’s called on `2` and `3`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是数组的`shape`是一个元组，它是一个 pytree 节点，其元素是叶子节点。因此，在映射中，不是在例如`(2, 3)`上调用`jnp.ones`，而是在`2`和`3`上调用。
- en: 'The solution will depend on the specifics, but there are two broadly applicable
    options:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案将取决于具体情况，但有两种广泛适用的选项：
- en: Rewrite the code to avoid the intermediate `jax.tree.map()`.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写代码以避免中间`jax.tree.map()`。
- en: Convert the tuple into a NumPy array (`np.array`) or a JAX NumPy array (`jnp.array`),
    which makes the entire sequence a leaf.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将元组转换为 NumPy 数组（`np.array`）或 JAX NumPy 数组（`jnp.array`），这样整个序列就成为一个叶子。
- en: Handling of `None` by `jax.tree_util`
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`jax.tree_util` 对`None`的处理'
- en: '`jax.tree_util` functions treat `None` as the absence of a pytree node, not
    as a leaf:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.tree_util` 函数将`None`视为不存在的 pytree 节点，而不是叶子：'
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To treat `None` as a leaf, you can use the `is_leaf` argument:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`None`视为叶子，可以使用`is_leaf`参数：
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Custom pytrees and initialization with unexpected values
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义 pytrees 和使用意外值进行初始化
- en: 'Another common gotcha with user-defined pytree objects is that JAX transformations
    occasionally initialize them with unexpected values, so that any input validation
    done at initialization may fail. For example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与用户定义的 pytree 对象常见的陷阱是，JAX 变换偶尔会使用意外值来初始化它们，因此在初始化时执行的任何输入验证可能会失败。例如：
- en: '[PRE33]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the first case with `jax.vmap(...)(tree)`, JAX’s internals use arrays of
    `object()` values to infer the structure of the tree
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一种情况下，使用 `jax.vmap(...)(tree)`，JAX 的内部使用 `object()` 值的数组来推断树的结构。
- en: In the second case with `jax.jacobian(...)(tree)`, the Jacobian of a function
    mapping a tree to a tree is defined as a tree of trees.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二种情况下，使用 `jax.jacobian(...)(tree)`，将一个将树映射到树的函数的雅可比矩阵定义为树的树。
- en: '**Potential solution 1:**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**潜在解决方案 1：**'
- en: 'The `__init__` and `__new__` methods of custom pytree classes should generally
    avoid doing any array conversion or other input validation, or else anticipate
    and handle these special cases. For example:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 pytree 类的 `__init__` 和 `__new__` 方法通常应避免执行任何数组转换或其他输入验证，或者预期并处理这些特殊情况。例如：
- en: '[PRE38]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Potential solution 2:**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**潜在解决方案 2：**'
- en: 'Structure your custom `tree_unflatten` function so that it avoids calling `__init__`.
    If you choose this route, make sure that your `tree_unflatten` function stays
    in sync with `__init__` if and when the code is updated. Example:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化您的自定义 `tree_unflatten` 函数，以避免调用 `__init__`。如果选择这条路线，请确保您的 `tree_unflatten`
    函数在代码更新时与 `__init__` 保持同步。例如：
- en: '[PRE39]  ## Common pytree patterns'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE39]  ## 常见 pytree 模式'
- en: This section covers some of the most common patterns with JAX pytrees.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了 JAX pytrees 中一些最常见的模式。
- en: Transposing pytrees with `jax.tree.map` and `jax.tree.transpose`
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `jax.tree.map` 和 `jax.tree.transpose` 对 pytree 进行转置
- en: 'To transpose a pytree (turn a list of trees into a tree of lists), JAX has
    two functions: {func} `jax.tree.map` (more basic) and `jax.tree.transpose()` (more
    flexible, complex and verbose).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要对 pytree 进行转置（将树的列表转换为列表的树），JAX 提供了两个函数：{func} `jax.tree.map`（更基础）和 `jax.tree.transpose()`（更灵活、复杂且冗长）。
- en: '**Option 1:** Use `jax.tree.map()`. Here’s an example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 1：** 使用 `jax.tree.map()`。这里是一个例子：'
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Option 2:** For more complex transposes, use `jax.tree.transpose()`, which
    is more verbose, but allows you specify the structure of the inner and outer pytree
    for more flexibility. For example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 2：** 对于更复杂的转置，使用 `jax.tree.transpose()`，它更冗长，但允许您指定更灵活的内部和外部 pytree 结构。例如：'
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
