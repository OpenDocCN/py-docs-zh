- en: Asynchronous I/O (asyncio)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html](https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Support for Python asyncio. Support for Core and ORM usage is included, using
    asyncio-compatible dialects.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Please read [Asyncio Platform Installation Notes (Including Apple M1)](#asyncio-install)
    for important platform installation notes for many platforms, including **Apple
    M1 Architecture**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Asynchronous IO Support for Core and ORM](../../changelog/migration_14.html#change-3414)
    - initial feature announcement'
  prefs: []
  type: TYPE_NORMAL
- en: '[Asyncio Integration](../examples.html#examples-asyncio) - example scripts
    illustrating working examples of Core and ORM use within the asyncio extension.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Asyncio Platform Installation Notes (Including Apple M1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The asyncio extension requires Python 3 only. It also depends upon the [greenlet](https://pypi.org/project/greenlet/)
    library. This dependency is installed by default on common machine platforms including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For the above platforms, `greenlet` is known to supply pre-built wheel files.
    For other platforms, **greenlet does not install by default**; the current file
    listing for greenlet can be seen at [Greenlet - Download Files](https://pypi.org/project/greenlet/#files).
    Note that **there are many architectures omitted, including Apple M1**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SQLAlchemy while ensuring the `greenlet` dependency is present regardless
    of what platform is in use, the `[asyncio]` [setuptools extra](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-setuptools-extras)
    may be installed as follows, which will include also instruct `pip` to install
    `greenlet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that installation of `greenlet` on platforms that do not have a pre-built
    wheel file means that `greenlet` will be built from source, which requires that
    Python’s development libraries also be present.
  prefs: []
  type: TYPE_NORMAL
- en: Synopsis - Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Core use, the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function creates an instance of
    [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    which then offers an async version of the traditional [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") API. The [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") delivers an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") via its [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") and [`AsyncEngine.begin()`](#sqlalchemy.ext.asyncio.AsyncEngine.begin
    "sqlalchemy.ext.asyncio.AsyncEngine.begin") methods which both deliver asynchronous
    context managers. The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") can then invoke statements using either
    the [`AsyncConnection.execute()`](#sqlalchemy.ext.asyncio.AsyncConnection.execute
    "sqlalchemy.ext.asyncio.AsyncConnection.execute") method to deliver a buffered
    [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result"),
    or the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method to deliver a streaming
    server-side [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Above, the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method may be used to invoke
    special DDL functions such as [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") that don’t include an awaitable hook.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s advisable to invoke the [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") method using `await` when using
    the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    object in a scope that will go out of context and be garbage collected, as illustrated
    in the `async_main` function in the above example. This ensures that any connections
    held open by the connection pool will be properly disposed within an awaitable
    context. Unlike when using blocking IO, SQLAlchemy cannot properly dispose of
    these connections within methods like `__del__` or weakref finalizers as there
    is no opportunity to invoke `await`. Failing to explicitly dispose of the engine
    when it falls out of scope may result in warnings emitted to standard out resembling
    the form `RuntimeError: Event loop is closed` within garbage collection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    also features a “streaming” API via the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method that returns an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object. This result object uses a server-side
    cursor and provides an async/await API, such as an async iterator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '## Synopsis - ORM'
  prefs: []
  type: TYPE_NORMAL
- en: Using [2.0 style](../../glossary.html#term-2.0-style) querying, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class provides full ORM functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Within the default mode of use, special care must be taken to avoid [lazy loading](../../glossary.html#term-lazy-loading)
    or other expired-attribute access involving ORM relationships and column attributes;
    the next section [Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)
    details this.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: A single instance of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in multiple, concurrent tasks**. See the sections [Using
    AsyncSession with Concurrent Tasks](#asyncio-concurrency) and [Is the Session
    thread-safe? Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates a complete example including mapper and session
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is instantiated using the optional [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") helper, which provides a factory
    for new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects with a fixed set of parameters, which here includes associating it with
    an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    against particular database URL. It is then passed to other methods where it may
    be used in a Python asynchronous context manager (i.e. `async with:` statement)
    so that it is automatically closed at the end of the block; this is equivalent
    to calling the [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") method.
  prefs: []
  type: TYPE_NORMAL
- en: '### Using AsyncSession with Concurrent Tasks'
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object is a **mutable, stateful object** which represents a **single, stateful
    database transaction in progress**. Using concurrent tasks with asyncio, with
    APIs such as `asyncio.gather()` for example, should use a **separate** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") **per individual task**.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the section [Is the Session thread-safe? Is AsyncSession safe to share
    in concurrent tasks?](../session_basics.html#session-faq-threadsafe) for a general
    description of the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with regards to how they should be used with concurrent workloads.  ### Preventing
    Implicit IO when Using AsyncSession'
  prefs: []
  type: TYPE_NORMAL
- en: Using traditional asyncio, the application needs to avoid any points at which
    IO-on-attribute access may occur. Techniques that can be used to help this are
    below, many of which are illustrated in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes that are lazy-loading relationships, deferred columns or expressions,
    or are being accessed in expiration scenarios can take advantage of the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin. This mixin, when added to a specific
    class or more generally to the Declarative `Base` superclass, provides an accessor
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") which delivers any attribute
    as an awaitable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Accessing the `A.bs` collection on newly loaded instances of `A` when eager
    loading is not in use will normally use [lazy loading](../../glossary.html#term-lazy-loading),
    which in order to succeed will usually emit IO to the database, which will fail
    under asyncio as no implicit IO is allowed. To access this attribute directly
    under asyncio without any prior loading operations, the attribute can be accessed
    as an awaitable by indicating the [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") prefix:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin provides a succinct facade over the internal approach that’s also used by
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.13.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Collections can be replaced with **write only collections** that will never
    emit IO implicitly, by using the [Write Only Relationships](../large_collections.html#write-only-relationship)
    feature in SQLAlchemy 2.0\. Using this feature, collections are never read from,
    only queried using explicit SQL calls. See the example `async_orm_writeonly.py`
    in the [Asyncio Integration](../examples.html#examples-asyncio) section for an
    example of write-only collections used with asyncio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using write only collections, the program’s behavior is simple and easy
    to predict regarding collections. However, the downside is that there is not any
    built-in system for loading many of these collections all at once, which instead
    would need to be performed manually. Therefore, many of the bullets below address
    specific techniques when using traditional lazy-loaded relationships with asyncio,
    which requires more care.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If not using [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs"),
    relationships can be declared with `lazy="raise"` so that by default they will
    not attempt to emit SQL. In order to load collections, [eager loading](../../glossary.html#term-eager-loading)
    would be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most useful eager loading strategy is the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader, which is employed in the previous
    example in order to eagerly load the `A.bs` collection within the scope of the
    `await session.execute()` call:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When constructing new objects, **collections are always assigned a default,
    empty collection**, such as a list in the above example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This allows the `.bs` collection on the above `A` object to be present and readable
    when the `A` object is flushed; otherwise, when the `A` is flushed, `.bs` would
    be unloaded and would raise an error on access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is configured using [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") set to False, so that we may access attributes on an
    object subsequent to a call to [`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit"), as in the line at the end where
    we access an attribute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Other guidelines include:'
  prefs: []
  type: TYPE_NORMAL
- en: Methods like [`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire") should be avoided in favor of [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh"); **if** expiration is absolutely
    needed. Expiration should generally **not** be needed as [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") should normally be set to `False` when using asyncio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A lazy-loaded relationship **can be loaded explicitly under asyncio** using
    [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh"),
    **if** the desired attribute name is passed explicitly to [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It’s of course preferable to use eager loading up front in order to have collections
    already set up without the need to lazy-load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0.4: Added support for [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") and the underlying [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method to force lazy-loaded relationships to
    load, if they are named explicitly in the [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") parameter. In previous versions, the relationship
    would be silently skipped even if named in the parameter.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Avoid using the `all` cascade option documented at [Cascades](../cascades.html#unitofwork-cascades)
    in favor of listing out the desired cascade features explicitly. The `all` cascade
    option implies among others the [refresh-expire](../cascades.html#cascade-refresh-expire)
    setting, which means that the [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") method will expire the attributes
    on related objects, but not necessarily refresh those related objects assuming
    eager loading is not configured within the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), leaving them in an expired state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate loader options should be employed for [`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") columns, if used at all, in addition to that of [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs as noted above. See [Limiting which
    Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)
    for background on deferred column loading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The “dynamic” relationship loader strategy described at [Dynamic Relationship
    Loaders](../large_collections.html#dynamic-relationship) is not compatible by
    default with the asyncio approach. It can be used directly only if invoked within
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method described at [Running Synchronous
    Methods and Functions under asyncio](#session-run-sync), or by using its `.statement`
    attribute to obtain a normal select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [write only](../large_collections.html#write-only-relationship) technique,
    introduced in version 2.0 of SQLAlchemy, is fully compatible with asyncio and
    should be preferred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Dynamic” relationship loaders superseded by “Write Only”](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - notes on migration to 2.0 style'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If using asyncio with a database that does not support RETURNING, such as MySQL
    8, server default values such as generated timestamps will not be available on
    newly flushed objects unless the [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") option is used. In SQLAlchemy 2.0, this behavior is applied
    automatically to backends like PostgreSQL, SQLite and MariaDB which use RETURNING
    to fetch new values when rows are INSERTed.  ### Running Synchronous Methods and
    Functions under asyncio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: This approach is essentially exposing publicly the mechanism by which SQLAlchemy
    is able to provide the asyncio interface in the first place. While there is no
    technical issue with doing so, overall the approach can probably be considered
    “controversial” as it works against some of the central philosophies of the asyncio
    programming model, which is essentially that any programming statement that can
    potentially result in IO being invoked **must** have an `await` call, lest the
    program does not make it explicitly clear every line at which IO may occur. This
    approach does not change that general idea, except that it allows a series of
    synchronous IO instructions to be exempted from this rule within the scope of
    a function call, essentially bundled up into a single awaitable.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative means of integrating traditional SQLAlchemy “lazy loading”
    within an asyncio event loop, an **optional** method known as [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") is provided which will run any
    Python function inside of a greenlet, where traditional synchronous programming
    concepts will be translated to use `await` when they reach the database driver.
    A hypothetical approach here is an asyncio-oriented application can package up
    database-related methods into functions that are invoked using [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync").
  prefs: []
  type: TYPE_NORMAL
- en: 'Altering the above example, if we didn’t use [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") for the `A.bs` collection, we could accomplish
    our treatment of these attribute accesses within a separate function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The above approach of running certain functions within a “sync” runner has
    some parallels to an application that runs a SQLAlchemy application on top of
    an event-based programming library such as `gevent`. The differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: unlike when using `gevent`, we can continue to use the standard Python asyncio
    event loop, or any custom event loop, without the need to integrate into the `gevent`
    event loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no “monkeypatching” whatsoever. The above example makes use of a real
    asyncio driver and the underlying SQLAlchemy connection pool is also using the
    Python built-in `asyncio.Queue` for pooling connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program can freely switch between async/await code and contained functions
    that use sync code with virtually no performance penalty. There is no “thread
    executor” or any additional waiters or synchronization in use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The underlying network drivers are also using pure Python asyncio concepts,
    no third party networking libraries as `gevent` and `eventlet` provides are in
    use.  ## Using events with the asyncio extension'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The SQLAlchemy [event system](../../core/event.html) is not directly exposed
    by the asyncio extension, meaning there is not yet an “async” version of a SQLAlchemy
    event handler.
  prefs: []
  type: TYPE_NORMAL
- en: However, as the asyncio extension surrounds the usual synchronous SQLAlchemy
    API, regular “synchronous” style event handlers are freely available as they would
    be if asyncio were not used.
  prefs: []
  type: TYPE_NORMAL
- en: 'As detailed below, there are two current strategies to register events given
    asyncio-facing APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Events can be registered at the instance level (e.g. a specific [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance) by associating the event with
    the `sync` attribute that refers to the proxied object. For example to register
    the [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event against an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance, use its [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute as target. Targets
    include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_connection`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_connection")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_engine`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_engine")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: To register an event at the class level, targeting all instances of the same
    type (e.g. all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instances), use the corresponding sync-style class. For example to register the
    [`SessionEvents.before_commit()`](../events.html#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event against the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class, use the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class as the target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To register at the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") level, combine an explicit [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") with an [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker"), and associate events with the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working within an event handler that is within an asyncio context, objects
    like the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") continue to work in their usual “synchronous”
    way without requiring `await` or `async` usage; when messages are ultimately received
    by the asyncio database adapter, the calling style is transparently adapted back
    into the asyncio calling style. For events that are passed a DBAPI level connection,
    such as [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect"), the object is a [pep-249](../../glossary.html#term-pep-249)
    compliant “connection” object which will adapt sync-style calls into the asyncio
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Event Listeners with Async Engines / Sessions / Sessionmakers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some examples of sync style event handlers associated with async-facing API
    constructs are illustrated below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core Events on AsyncEngine**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we access the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") as the target for [`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ORM Events on AsyncSession**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we access [`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session") as the target for [`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ORM Events on async_sessionmaker**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this use case, we make a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") as the event target, then assign it to the [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using the [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker") parameter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '### Using awaitable-only driver methods in connection pool and other events'
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in the above section, event handlers such as those oriented around
    the [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    event handlers receive a sync-style “DBAPI” connection, which is a wrapper object
    supplied by SQLAlchemy asyncio dialects to adapt the underlying asyncio “driver”
    connection into one that can be used by SQLAlchemy’s internals. A special use
    case arises when the user-defined implementation for such an event handler needs
    to make use of the ultimate “driver” connection directly, using awaitable only
    methods on that driver connection. One such example is the `.set_type_codec()`
    method supplied by the asyncpg driver.
  prefs: []
  type: TYPE_NORMAL
- en: To accommodate this use case, SQLAlchemy’s [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") class provides a method [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") that allows an awaitable function
    to be invoked within the “synchronous” context of an event handler or other SQLAlchemy
    internal. This method is directly analogous to the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method that allows a sync-style
    method to run under async.
  prefs: []
  type: TYPE_NORMAL
- en: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") should be passed a function that
    will accept the innermost “driver” connection as a single argument, and return
    an awaitable that will be invoked by the [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method. The given function itself
    does not need to be declared as `async`; it’s perfectly fine for it to be a Python
    `lambda:`, as the return awaitable value will be invoked after being returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Above, the object passed to the `register_custom_types` event handler is an
    instance of [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection"), which provides a DBAPI-like interface
    to an underlying async-only driver-level connection object. The [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method then provides access to
    an awaitable environment where the underlying driver level connection may be acted
    upon.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.30.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple asyncio event loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An application that makes use of multiple event loops, for example in the uncommon
    case of combining asyncio with multithreading, should not share the same [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") with different event loops when using the
    default pool implementation.
  prefs: []
  type: TYPE_NORMAL
- en: If an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is be passed from one event loop to another, the method [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") should be called before it’s re-used
    on a new event loop. Failing to do so may lead to a `RuntimeError` along the lines
    of `Task <Task pending ...> got Future attached to a different loop`
  prefs: []
  type: TYPE_NORMAL
- en: 'If the same engine must be shared between different loop, it should be configured
    to disable pooling using [`NullPool`](../../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), preventing the Engine from using any connection more
    than once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '## Using asyncio scoped session'
  prefs: []
  type: TYPE_NORMAL
- en: The “scoped session” pattern used in threaded SQLAlchemy with the [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") object is also available in asyncio, using an
    adapted version called [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy generally does not recommend the “scoped” pattern for new development
    as it relies upon mutable global state that must also be explicitly torn down
    when work within the thread or task is complete. Particularly when using asyncio,
    it’s likely a better idea to pass the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly to the awaitable functions that
    need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session"), as there’s no “thread-local” concept
    in the asyncio context, the “scopefunc” parameter must be provided to the constructor.
    The example below illustrates using the `asyncio.current_task()` function for
    this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The “scopefunc” used by [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") is invoked **an arbitrary number
    of times** within a task, once for each time the underlying [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is accessed. The function should therefore
    be **idempotent** and lightweight, and should not attempt to create or mutate
    any state, such as establishing callbacks, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Using `current_task()` for the “key” in the scope requires that the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method is called from within
    the outermost awaitable, to ensure the key is removed from the registry when the
    task is complete, otherwise the task handle as well as the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") will remain in memory, essentially creating
    a memory leak. See the following example which illustrates the correct use of
    [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove").
  prefs: []
  type: TYPE_NORMAL
- en: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    includes **proxy behavior** similar to that of [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), which means it can be treated as a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly, keeping in mind that the usual
    `await` keywords are necessary, including for the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.19.  ## Using the Inspector to inspect schema objects'
  prefs: []
  type: TYPE_NORMAL
- en: 'SQLAlchemy does not yet offer an asyncio version of the [`Inspector`](../../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") (introduced at [Fine Grained Reflection
    with Inspector](../../core/reflection.html#metadata-reflection-inspector)), however
    the existing interface may be used in an asyncio context by leveraging the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method of [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](../../core/reflection.html#metadata-reflection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Runtime Inspection API](../../core/inspection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Engine API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [async_engine_from_config](#sqlalchemy.ext.asyncio.async_engine_from_config)(configuration[,
    prefix], **kwargs) | Create a new AsyncEngine instance using a configuration dictionary.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncConnection](#sqlalchemy.ext.asyncio.AsyncConnection) | An asyncio proxy
    for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncEngine](#sqlalchemy.ext.asyncio.AsyncEngine) | An asyncio proxy for
    a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncTransaction](#sqlalchemy.ext.asyncio.AsyncTransaction) | An asyncio
    proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"). |'
  prefs: []
  type: TYPE_TB
- en: '| [create_async_engine](#sqlalchemy.ext.asyncio.create_async_engine)(url, **kw)
    | Create a new async engine instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [create_async_pool_from_url](#sqlalchemy.ext.asyncio.create_async_pool_from_url)(url,
    **kwargs) | Create a new async engine instance. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Create a new async engine instance.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments passed to [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") are mostly identical to those passed
    to the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function. The specified dialect must be an asyncio-compatible dialect such as
    [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**async_creator** –'
  prefs: []
  type: TYPE_NORMAL
- en: an async callable which returns a driver-level asyncio connection. If given,
    the function should take no arguments, and return a new asyncio connection from
    the underlying asyncio database driver; the connection will be wrapped in the
    appropriate structures to be used with the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"). Note that the parameters specified in the
    URL are not applied here, and the creator function should use its own connection
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: This parameter is the asyncio equivalent of the [`create_engine.creator`](../../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.16.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Create a new AsyncEngine instance using a configuration dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This function is analogous to the [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function in SQLAlchemy Core, except that the
    requested dialect must be an asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
    The argument signature of the function is identical to that of [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.29.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Create a new async engine instance.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments passed to [`create_async_pool_from_url()`](#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") are mostly identical to those
    passed to the [`create_pool_from_url()`](../../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") function. The specified dialect must be an
    asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio proxy for a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is acquired using the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[begin()](#sqlalchemy.ext.asyncio.AsyncEngine.begin), [clear_compiled_cache()](#sqlalchemy.ext.asyncio.AsyncEngine.clear_compiled_cache),
    [connect()](#sqlalchemy.ext.asyncio.AsyncEngine.connect), [dialect](#sqlalchemy.ext.asyncio.AsyncEngine.dialect),
    [dispose()](#sqlalchemy.ext.asyncio.AsyncEngine.dispose), [driver](#sqlalchemy.ext.asyncio.AsyncEngine.driver),
    [echo](#sqlalchemy.ext.asyncio.AsyncEngine.echo), [engine](#sqlalchemy.ext.asyncio.AsyncEngine.engine),
    [execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.execution_options),
    [get_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.get_execution_options),
    [name](#sqlalchemy.ext.asyncio.AsyncEngine.name), [pool](#sqlalchemy.ext.asyncio.AsyncEngine.pool),
    [raw_connection()](#sqlalchemy.ext.asyncio.AsyncEngine.raw_connection), [sync_engine](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine),
    [update_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.update_execution_options),
    [url](#sqlalchemy.ext.asyncio.AsyncEngine.url)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.AsyncConnectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager which when entered will deliver an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") with an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") established.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Clear the compiled cache associated with the dialect.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: This applies **only** to the built-in cache that is established via the `create_engine.query_cache_size`
    parameter. It will not impact any dictionary caches that were passed via the [`Connection.execution_options.compiled_cache`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    will procure a database connection from the underlying connection pool when it
    is entered as an async context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    may also be started outside of a context manager by invoking its [`AsyncConnection.start()`](#sqlalchemy.ext.asyncio.AsyncConnection.start
    "sqlalchemy.ext.asyncio.AsyncConnection.start") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Engine.dialect` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of the connection pool used by this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**close** –'
  prefs: []
  type: TYPE_NORMAL
- en: if left at its default of `True`, has the effect of fully closing all **currently
    checked in** database connections. Connections that are still checked out will
    **not** be closed, however they will no longer be associated with this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), so when they are closed individually, eventually
    the [`Pool`](../../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    which they are associated with will be garbage collected and they will be closed
    out fully, if not already closed on checkin.
  prefs: []
  type: TYPE_NORMAL
- en: If set to `False`, the previous connection pool is de-referenced, and otherwise
    not touched in any way.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Engine.dispose()`](../../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Driver name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: When `True`, enable log output for this element.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: This has the effect of setting the Python logging level for the namespace of
    this element’s class and object reference. A value of boolean `True` indicates
    that the loglevel `logging.INFO` will be set for the logger, whereas the string
    value `debug` will set the loglevel to `logging.DEBUG`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: Used for legacy schemes that accept [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects within the same variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    that will provide [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") objects with the given execution options.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied from [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). See that method for details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: String name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Engine.pool` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Return a “raw” DBAPI connection from the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with Driver SQL and Raw DBAPI Connections](../../core/connections.html#dbapi-connections)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") proxies requests towards.
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Update the default execution_options dictionary of this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: The given keys/values in **opt are added to the default execution options that
    will be used for all connections. The initial contents of this dictionary can
    be sent via the `execution_options` parameter to [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Engine.url` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio proxy for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    is acquired using the [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") method of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[aclose()](#sqlalchemy.ext.asyncio.AsyncConnection.aclose), [begin()](#sqlalchemy.ext.asyncio.AsyncConnection.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncConnection.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncConnection.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncConnection.closed), [commit()](#sqlalchemy.ext.asyncio.AsyncConnection.commit),
    [connection](#sqlalchemy.ext.asyncio.AsyncConnection.connection), [default_isolation_level](#sqlalchemy.ext.asyncio.AsyncConnection.default_isolation_level),
    [dialect](#sqlalchemy.ext.asyncio.AsyncConnection.dialect), [exec_driver_sql()](#sqlalchemy.ext.asyncio.AsyncConnection.exec_driver_sql),
    [execute()](#sqlalchemy.ext.asyncio.AsyncConnection.execute), [execution_options()](#sqlalchemy.ext.asyncio.AsyncConnection.execution_options),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_nested_transaction),
    [get_raw_connection()](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection),
    [get_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_transaction),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncConnection.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncConnection.invalidate), [invalidated](#sqlalchemy.ext.asyncio.AsyncConnection.invalidated),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncConnection.rollback), [run_sync()](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncConnection.scalar), [scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.scalars),
    [start()](#sqlalchemy.ext.asyncio.AsyncConnection.start), [stream()](#sqlalchemy.ext.asyncio.AsyncConnection.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars), [sync_connection](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection),
    [sync_engine](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`, `sqlalchemy.ext.asyncio.AsyncConnectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`AsyncConnection.close()`](#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncConnection.aclose()`](#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") name is specifically to support
    the Python standard library `@contextlib.aclosing` context manager function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Begin a transaction prior to autobegin occurring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Begin a nested transaction and return a transaction handle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Close this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection").
  prefs: []
  type: TYPE_NORMAL
- en: This has the effect of also rolling back the transaction if one is in place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Commit the transaction that is currently in progress.
  prefs: []
  type: TYPE_NORMAL
- en: This method commits the current transaction if one has been started. If no transaction
    was started, the method has no effect, assuming the connection is in a non-invalidated
    state.
  prefs: []
  type: TYPE_NORMAL
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Not implemented for async; call [`AsyncConnection.get_raw_connection()`](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The initial-connection time isolation level associated with the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") in use.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: This value is independent of the [`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and [`Engine.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") execution options, and is determined
    by the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    when the first connection is created, by performing a SQL query against the database
    for the current isolation level before any additional commands have been emitted.
  prefs: []
  type: TYPE_NORMAL
- en: Calling this accessor does not invoke any new SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](../../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual isolation
    level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](../../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Connection.dialect` attribute on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Executes a driver-level SQL string and return buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Executes a SQL statement construct and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The statement to be executed. This is always an object that is in both the
    [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") and [`Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchies, including:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Insert`](../../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`TextClause`](../../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`TextualSelect`](../../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DDL`](../../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    and objects which inherit from [`ExecutableDDLElement`](../../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters` – parameters which will be bound into the statement. This may
    be either a dictionary of parameter names to values, or a mutable sequence (e.g.
    a list) of dictionaries. When a list of dictionaries is passed, the underlying
    statement execution will make use of the DBAPI `cursor.executemany()` method.
    When a single dictionary is passed, the DBAPI `cursor.execute()` method will be
    used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` – optional dictionary of execution options, which will
    be associated with the statement execution. This dictionary can provide a subset
    of the options that are accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Set non-SQL options for the connection which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: This returns this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") object with the new options added.
  prefs: []
  type: TYPE_NORMAL
- en: See [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") for full details on this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current nested (savepoint) transaction, if any.
  prefs: []
  type: TYPE_NORMAL
- en: This makes use of the underlying synchronous connection’s [`Connection.get_nested_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_nested_transaction
    "sqlalchemy.engine.Connection.get_nested_transaction") method to get the current
    [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Return the pooled DBAPI-level connection in use by this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection").
  prefs: []
  type: TYPE_NORMAL
- en: This is a SQLAlchemy connection-pool proxied connection which then has the attribute
    `_ConnectionFairy.driver_connection` that refers to the actual driver connection.
    Its `_ConnectionFairy.dbapi_connection` refers instead to an [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") instance that adapts the driver connection
    to the DBAPI protocol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current transaction, if any.
  prefs: []
  type: TYPE_NORMAL
- en: This makes use of the underlying synchronous connection’s [`Connection.get_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction") method to get the current [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"), which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Return True if a transaction is in progress.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Return True if a transaction is in progress.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Connection.info`](../../core/connections.html#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info") dictionary of the underlying [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: This dictionary is freely writable for user-defined state to be associated with
    the database connection.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is only available if the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is currently connected. If the [`AsyncConnection.closed`](#sqlalchemy.ext.asyncio.AsyncConnection.closed
    "sqlalchemy.ext.asyncio.AsyncConnection.closed") attribute is `True`, then accessing
    this attribute will raise [`ResourceClosedError`](../../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Invalidate the underlying DBAPI connection associated with this [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: See the method [`Connection.invalidate()`](../../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") for full detail on this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this connection was invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: This does not indicate whether or not the connection was invalidated at the
    pool level, however
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Roll back the transaction that is currently in progress.
  prefs: []
  type: TYPE_NORMAL
- en: This method rolls back the current transaction if one has been started. If no
    transaction was started, the method has no effect. If a transaction was started
    and the connection is in an invalidated state, the transaction is cleared using
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most rudimentary use of [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") is to invoke methods such as
    [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), given an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") that needs to be provided to [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") as a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Executes a SQL statement construct and returns a scalar object.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for invoking the [`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a scalar Python value representing the first column of the first row returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Executes a SQL statement construct and returns a scalar objects.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for invoking the [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Start this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object’s context outside of using a Python `with:` block.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return an awaitable yielding a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method supports optional context
    manager use against the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: In the above pattern, the [`AsyncResult.close()`](#sqlalchemy.ext.asyncio.AsyncResult.close
    "sqlalchemy.ext.asyncio.AsyncResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0b3: added context manager support'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an awaitable object that will yield an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return an awaitable yielding a [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: This method is shorthand for invoking the `AsyncResult.scalars()` method after
    invoking the `Connection.stream()` method. Parameters are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars") method supports optional
    context manager use against the [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: In the above pattern, the [`AsyncScalarResult.close()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.close
    "sqlalchemy.ext.asyncio.AsyncScalarResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0b3: added context manager support'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an awaitable object that will yield an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the sync-style [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") proxies requests towards.
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is associated with via its underlying
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[close()](#sqlalchemy.ext.asyncio.AsyncTransaction.close), [commit()](#sqlalchemy.ext.asyncio.AsyncTransaction.commit),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncTransaction.rollback), [start()](#sqlalchemy.ext.asyncio.AsyncTransaction.start)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Close this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Start this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    object’s context outside of using a Python `with:` block.
  prefs: []
  type: TYPE_NORMAL
- en: Result Set API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object is an async-adapted version of the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. It is only returned when using the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") or [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods, which return a result object
    that is on top of an active database cursor.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncMappingResult](#sqlalchemy.ext.asyncio.AsyncMappingResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncResult](#sqlalchemy.ext.asyncio.AsyncResult) | An asyncio wrapper around
    a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncScalarResult](#sqlalchemy.ext.asyncio.AsyncScalarResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncTupleResult](#sqlalchemy.ext.asyncio.AsyncTupleResult) | A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") that’s typed as returning plain Python tuples
    instead of rows. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio wrapper around a [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    only applies to statement executions that use a server-side cursor. It is returned
    only from the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") and [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As is the case with [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"), this object is used for ORM results returned by [`AsyncSession.execute()`](#sqlalchemy.ext.asyncio.AsyncSession.execute
    "sqlalchemy.ext.asyncio.AsyncSession.execute"), which can yield instances of ORM
    mapped objects either individually or within tuple-like rows. Note that these
    result objects do not deduplicate instances or rows automatically as is the case
    with the legacy [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. For in-Python de-duplication of instances or rows, use the [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique") modifier method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncResult.first),
    [freeze()](#sqlalchemy.ext.asyncio.AsyncResult.freeze), [keys()](#sqlalchemy.ext.asyncio.AsyncResult.keys),
    [mappings()](#sqlalchemy.ext.asyncio.AsyncResult.mappings), [one()](#sqlalchemy.ext.asyncio.AsyncResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncResult.partitions),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncResult.scalar), [scalar_one()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one_or_none),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncResult.scalars), [t](#sqlalchemy.ext.asyncio.AsyncResult.t),
    [tuples()](#sqlalchemy.ext.asyncio.AsyncResult.tuples), [unique()](#sqlalchemy.ext.asyncio.AsyncResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncResult.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Return all rows in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: Close this result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Establish the columns that should be returned in each row.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [`Result.columns()`](../../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Fetch many rows.
  prefs: []
  type: TYPE_NORMAL
- en: When all rows are exhausted, returns an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch rows in groups, use the [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Fetch one row.
  prefs: []
  type: TYPE_NORMAL
- en: When all rows are exhausted, returns None.
  prefs: []
  type: TYPE_NORMAL
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch the first row of a result only, use the [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") method. To iterate through all rows,
    iterate the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object if no filters are applied, or `None` if no rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first row or `None` if no row is present.
  prefs: []
  type: TYPE_NORMAL
- en: Closes the result set and discards remaining rows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar
    "sqlalchemy.ext.asyncio.AsyncResult.scalar") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first").
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"); for a DBAPI driver that buffers results
    in memory before yielding rows, all rows will be sent to the Python process and
    all but the first row will be discarded.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Query Unified with Core Select](../../changelog/migration_20.html#migration-20-unify-select)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object, or None if no rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar "sqlalchemy.ext.asyncio.AsyncResult.scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Return a callable object that will produce copies of this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") when invoked.
  prefs: []
  type: TYPE_NORMAL
- en: The callable object returned is an instance of [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  prefs: []
  type: TYPE_NORMAL
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") is retrieved from a cache, it can be called
    any number of times where it will produce a new [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object each time against its stored set of rows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](../session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  prefs: []
  type: TYPE_NORMAL
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  prefs: []
  type: TYPE_NORMAL
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Apply a mappings filter to returned rows, returning an instance of [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  prefs: []
  type: TYPE_NORMAL
- en: When this filter is applied, fetching rows will return [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    filtering object referring to the underlying [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one row or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Raises [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound") if the result returns no rows, or [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or `None` if no row is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through sub-lists of rows of the size given.
  prefs: []
  type: TYPE_NORMAL
- en: 'An async iterator is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Refer to [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") in the synchronous SQLAlchemy API for a
    complete behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first column of the first row, and close the result set.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if there are no rows to fetch.
  prefs: []
  type: TYPE_NORMAL
- en: No validation is performed to test if additional rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](../../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a Python scalar value, or `None` if no rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one scalar result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one scalar result or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object which will return single elements rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object referring to this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Apply a “typed tuple” typing filter to returned rows.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    attribute is a synonym for calling the [`AsyncResult.tuples()`](#sqlalchemy.ext.asyncio.AsyncResult.tuples
    "sqlalchemy.ext.asyncio.AsyncResult.tuples") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Apply a “typed tuple” typing filter to returned rows.
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the same [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object at runtime, however annotates as
    returning a [`AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult "sqlalchemy.ext.asyncio.AsyncTupleResult")
    object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the `AsyncTupleResult` type at typing time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    - shorter synonym'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Row.t`](../../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    - [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Apply unique filtering to the objects returned by this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult").
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object is acquired by calling the [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") method.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncScalarResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncScalarResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncScalarResult.closed), [fetchall()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchmany), [first()](#sqlalchemy.ext.asyncio.AsyncScalarResult.first),
    [one()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one), [one_or_none()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one_or_none),
    [partitions()](#sqlalchemy.ext.asyncio.AsyncScalarResult.partitions), [unique()](#sqlalchemy.ext.asyncio.AsyncScalarResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncScalarResult.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") (`sqlalchemy.ext.asyncio.AsyncCommon`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Return all scalar values in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: Close this result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`AsyncScalarResult.all()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.all
    "sqlalchemy.ext.asyncio.AsyncScalarResult.all") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Fetch many objects.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first object or `None` if no object is present.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through sub-lists of elements of the size given.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Apply unique filtering to the objects returned by this [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult").
  prefs: []
  type: TYPE_NORMAL
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    object is acquired by calling the [`AsyncResult.mappings()`](#sqlalchemy.ext.asyncio.AsyncResult.mappings
    "sqlalchemy.ext.asyncio.AsyncResult.mappings") method.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the [`MappingResult`](../../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncMappingResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncMappingResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncMappingResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncMappingResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncMappingResult.first),
    [keys()](#sqlalchemy.ext.asyncio.AsyncMappingResult.keys), [one()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncMappingResult.partitions),
    [unique()](#sqlalchemy.ext.asyncio.AsyncMappingResult.unique), [yield_per()](#sqlalchemy.ext.asyncio.AsyncMappingResult.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Return all rows in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: Close this result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Establish the columns that should be returned in each row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`AsyncMappingResult.all()`](#sqlalchemy.ext.asyncio.AsyncMappingResult.all
    "sqlalchemy.ext.asyncio.AsyncMappingResult.all") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Fetch many rows.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Fetch one object.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.fetchone()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchone
    "sqlalchemy.ext.asyncio.AsyncResult.fetchone") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first object or `None` if no object is present.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  prefs: []
  type: TYPE_NORMAL
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  prefs: []
  type: TYPE_NORMAL
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through sub-lists of elements of the size given.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Apply unique filtering to the objects returned by this [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  prefs: []
  type: TYPE_NORMAL
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that’s typed as returning plain Python tuples instead of rows.
  prefs: []
  type: TYPE_NORMAL
- en: Since [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    acts like a tuple in every way already, this class is a typing only class, regular
    [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    is still used at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult
    "sqlalchemy.ext.asyncio.AsyncTupleResult") (`sqlalchemy.ext.asyncio.AsyncCommon`,
    `sqlalchemy.util.langhelpers.TypingOnly`)
  prefs: []
  type: TYPE_NORMAL
- en: ORM Session API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [async_object_session](#sqlalchemy.ext.asyncio.async_object_session)(instance)
    | Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| [async_scoped_session](#sqlalchemy.ext.asyncio.async_scoped_session) | Provides
    scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [async_session](#sqlalchemy.ext.asyncio.async_session)(session) | Return
    the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| [async_sessionmaker](#sqlalchemy.ext.asyncio.async_sessionmaker) | A configurable
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncAttrs](#sqlalchemy.ext.asyncio.AsyncAttrs) | Mixin class which provides
    an awaitable accessor for all attributes. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncSession](#sqlalchemy.ext.asyncio.AsyncSession) | Asyncio version of
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncSessionTransaction](#sqlalchemy.ext.asyncio.AsyncSessionTransaction)
    | A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [close_all_sessions](#sqlalchemy.ext.asyncio.close_all_sessions)() | Close
    all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This function makes use of the sync-API function [`object_session`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") to retrieve the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which refers to the given instance, and from there links
    it to the original [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    has been garbage collected, the return value is `None`.
  prefs: []
  type: TYPE_NORMAL
- en: This functionality is also available from the [`InstanceState.async_session`](../internals.html#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**instance** – an ORM mapped instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.23.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`close_all_sessions()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: A configurable [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory.
  prefs: []
  type: TYPE_NORMAL
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    factory works in the same way as the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") factory, to generate new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects when called, creating them given
    the configurational arguments established here.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    is useful so that different parts of a program can create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects with a fixed configuration established
    up front. Note that [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects may also be instantiated directly when not using [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") provides a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") class that’s dedicated to the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") object, including pep-484 typing support.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Synopsis - ORM](#asyncio-orm) - shows example use'
  prefs: []
  type: TYPE_NORMAL
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    - general overview of the'
  prefs: []
  type: TYPE_NORMAL
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '[Opening and Closing a Session](../session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__init__),
    [begin()](#sqlalchemy.ext.asyncio.async_sessionmaker.begin), [configure()](#sqlalchemy.ext.asyncio.async_sessionmaker.configure)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Produce a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object using the configuration established in this [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`AsyncSession.__init__()`](#sqlalchemy.ext.asyncio.AsyncSession.__init__
    "sqlalchemy.ext.asyncio.AsyncSession.__init__") docstring for more details on
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Produce a context manager that both provides a new `AsyncSession` as well as
    a transaction that commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: (Re)configure the arguments for this async_sessionmaker.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Provides scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Using asyncio scoped session](#asyncio-scoped-session) for
    usage details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.19.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_scoped_session.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_scoped_session.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.async_scoped_session.aclose), [add()](#sqlalchemy.ext.asyncio.async_scoped_session.add),
    [add_all()](#sqlalchemy.ext.asyncio.async_scoped_session.add_all), [autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.async_scoped_session.begin), [begin_nested()](#sqlalchemy.ext.asyncio.async_scoped_session.begin_nested),
    [bind](#sqlalchemy.ext.asyncio.async_scoped_session.bind), [close()](#sqlalchemy.ext.asyncio.async_scoped_session.close),
    [close_all()](#sqlalchemy.ext.asyncio.async_scoped_session.close_all), [commit()](#sqlalchemy.ext.asyncio.async_scoped_session.commit),
    [configure()](#sqlalchemy.ext.asyncio.async_scoped_session.configure), [connection()](#sqlalchemy.ext.asyncio.async_scoped_session.connection),
    [delete()](#sqlalchemy.ext.asyncio.async_scoped_session.delete), [deleted](#sqlalchemy.ext.asyncio.async_scoped_session.deleted),
    [dirty](#sqlalchemy.ext.asyncio.async_scoped_session.dirty), [execute()](#sqlalchemy.ext.asyncio.async_scoped_session.execute),
    [expire()](#sqlalchemy.ext.asyncio.async_scoped_session.expire), [expire_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.async_scoped_session.flush), [get()](#sqlalchemy.ext.asyncio.async_scoped_session.get),
    [get_bind()](#sqlalchemy.ext.asyncio.async_scoped_session.get_bind), [get_one()](#sqlalchemy.ext.asyncio.async_scoped_session.get_one),
    [identity_key()](#sqlalchemy.ext.asyncio.async_scoped_session.identity_key), [identity_map](#sqlalchemy.ext.asyncio.async_scoped_session.identity_map),
    [info](#sqlalchemy.ext.asyncio.async_scoped_session.info), [invalidate()](#sqlalchemy.ext.asyncio.async_scoped_session.invalidate),
    [is_active](#sqlalchemy.ext.asyncio.async_scoped_session.is_active), [is_modified()](#sqlalchemy.ext.asyncio.async_scoped_session.is_modified),
    [merge()](#sqlalchemy.ext.asyncio.async_scoped_session.merge), [new](#sqlalchemy.ext.asyncio.async_scoped_session.new),
    [no_autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.no_autoflush), [object_session()](#sqlalchemy.ext.asyncio.async_scoped_session.object_session),
    [refresh()](#sqlalchemy.ext.asyncio.async_scoped_session.refresh), [remove()](#sqlalchemy.ext.asyncio.async_scoped_session.remove),
    [reset()](#sqlalchemy.ext.asyncio.async_scoped_session.reset), [rollback()](#sqlalchemy.ext.asyncio.async_scoped_session.rollback),
    [scalar()](#sqlalchemy.ext.asyncio.async_scoped_session.scalar), [scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.scalars),
    [session_factory](#sqlalchemy.ext.asyncio.async_scoped_session.session_factory),
    [stream()](#sqlalchemy.ext.asyncio.async_scoped_session.stream), [stream_scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.stream_scalars)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Return the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession"),
    creating it using the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is not present. If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is present and keyword arguments have been
    passed, [`InvalidRequestError`](../../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session_factory` – a factory to create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instances. This is usually, but not necessarily,
    an instance of [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – function which defines the current scope. A function such as
    `asyncio.current_task` may be useful here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `AsyncSession.bind` attribute on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Commit the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: reconfigure the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: See [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: The database delete operation occurs upon `flush()`.
  prefs: []
  type: TYPE_NORMAL
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  prefs: []
  type: TYPE_NORMAL
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: '..versionadded: 2.0.22'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Close this Session, using connection invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh the attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  prefs: []
  type: TYPE_NORMAL
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), if present.
  prefs: []
  type: TYPE_NORMAL
- en: Different from scoped_session’s remove method, this method would use await to
    wait for the close method of AsyncSession.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a stream of scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Mixin class which provides an awaitable accessor for all attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin is applied to the declarative `Base`
    class where it takes effect for all subclasses. This mixin adds a single new attribute
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") to all classes, which will
    yield the value of any attribute as an awaitable. This allows attributes which
    may be subject to lazy loading or deferred / unexpiry loading to be accessed such
    that IO can still be emitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") performs a call against the
    attribute that is approximately equivalent to using the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: New in version 2.0.13.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[awaitable_attrs](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: provide a namespace of all attributes on this object wrapped as awaitables.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Asyncio version of [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is a proxy for a traditional [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in concurrent tasks.**. See [Is the Session thread-safe?
    Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: To use an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    implementations, see the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[sync_session_class](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class),
    [__init__()](#sqlalchemy.ext.asyncio.AsyncSession.__init__), [aclose()](#sqlalchemy.ext.asyncio.AsyncSession.aclose),
    [add()](#sqlalchemy.ext.asyncio.AsyncSession.add), [add_all()](#sqlalchemy.ext.asyncio.AsyncSession.add_all),
    [autoflush](#sqlalchemy.ext.asyncio.AsyncSession.autoflush), [begin()](#sqlalchemy.ext.asyncio.AsyncSession.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncSession.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncSession.close),
    [close_all()](#sqlalchemy.ext.asyncio.AsyncSession.close_all), [commit()](#sqlalchemy.ext.asyncio.AsyncSession.commit),
    [connection()](#sqlalchemy.ext.asyncio.AsyncSession.connection), [delete()](#sqlalchemy.ext.asyncio.AsyncSession.delete),
    [deleted](#sqlalchemy.ext.asyncio.AsyncSession.deleted), [dirty](#sqlalchemy.ext.asyncio.AsyncSession.dirty),
    [execute()](#sqlalchemy.ext.asyncio.AsyncSession.execute), [expire()](#sqlalchemy.ext.asyncio.AsyncSession.expire),
    [expire_all()](#sqlalchemy.ext.asyncio.AsyncSession.expire_all), [expunge()](#sqlalchemy.ext.asyncio.AsyncSession.expunge),
    [expunge_all()](#sqlalchemy.ext.asyncio.AsyncSession.expunge_all), [flush()](#sqlalchemy.ext.asyncio.AsyncSession.flush),
    [get()](#sqlalchemy.ext.asyncio.AsyncSession.get), [get_bind()](#sqlalchemy.ext.asyncio.AsyncSession.get_bind),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_nested_transaction),
    [get_one()](#sqlalchemy.ext.asyncio.AsyncSession.get_one), [get_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_transaction),
    [identity_key()](#sqlalchemy.ext.asyncio.AsyncSession.identity_key), [identity_map](#sqlalchemy.ext.asyncio.AsyncSession.identity_map),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncSession.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncSession.invalidate), [is_active](#sqlalchemy.ext.asyncio.AsyncSession.is_active),
    [is_modified()](#sqlalchemy.ext.asyncio.AsyncSession.is_modified), [merge()](#sqlalchemy.ext.asyncio.AsyncSession.merge),
    [new](#sqlalchemy.ext.asyncio.AsyncSession.new), [no_autoflush](#sqlalchemy.ext.asyncio.AsyncSession.no_autoflush),
    [object_session()](#sqlalchemy.ext.asyncio.AsyncSession.object_session), [refresh()](#sqlalchemy.ext.asyncio.AsyncSession.refresh),
    [reset()](#sqlalchemy.ext.asyncio.AsyncSession.reset), [rollback()](#sqlalchemy.ext.asyncio.AsyncSession.rollback),
    [run_sync()](#sqlalchemy.ext.asyncio.AsyncSession.run_sync), [scalar()](#sqlalchemy.ext.asyncio.AsyncSession.scalar),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncSession.scalars), [stream()](#sqlalchemy.ext.asyncio.AsyncSession.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars), [sync_session](#sqlalchemy.ext.asyncio.AsyncSession.sync_session)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: The class or callable that provides the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for a particular [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: At the class level, this attribute is the default value for the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter. Custom subclasses of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") can override this.
  prefs: []
  type: TYPE_NORMAL
- en: At the instance level, this attribute indicates the current class or callable
    that was used to provide the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instance.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: All parameters other than `sync_session_class` are passed to the `sync_session_class`
    callable directly to instantiate a new [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Refer to [`Session.__init__()`](../session_api.html#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") for parameter documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sync_session_class** –'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclass or other callable which will be used to construct the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which will be proxied. This parameter may be used to
    provide custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclasses. Defaults to the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session_class") class-level attribute.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Commit the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The database delete operation occurs upon `flush()`.
  prefs: []
  type: TYPE_NORMAL
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  prefs: []
  type: TYPE_NORMAL
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Return the current nested transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: '..versionadded: 2.0.22'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Return the current root transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: Close this Session, using connection invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh the attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  prefs: []
  type: TYPE_NORMAL
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    - a mixin for ORM mapped classes that provides a similar feature more succinctly
    on a per-attribute basis'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a stream of scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") proxies requests towards.
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: This object is provided so that a transaction-holding object for the [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") may be returned.
  prefs: []
  type: TYPE_NORMAL
- en: The object supports both explicit calls to [`AsyncSessionTransaction.commit()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit") and [`AsyncSessionTransaction.rollback()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback"), as well as use as
    an async context manager.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[commit()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit), [rollback()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '## Asyncio Platform Installation Notes (Including Apple M1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The asyncio extension requires Python 3 only. It also depends upon the [greenlet](https://pypi.org/project/greenlet/)
    library. This dependency is installed by default on common machine platforms including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: For the above platforms, `greenlet` is known to supply pre-built wheel files.
    For other platforms, **greenlet does not install by default**; the current file
    listing for greenlet can be seen at [Greenlet - Download Files](https://pypi.org/project/greenlet/#files).
    Note that **there are many architectures omitted, including Apple M1**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SQLAlchemy while ensuring the `greenlet` dependency is present regardless
    of what platform is in use, the `[asyncio]` [setuptools extra](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-setuptools-extras)
    may be installed as follows, which will include also instruct `pip` to install
    `greenlet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Note that installation of `greenlet` on platforms that do not have a pre-built
    wheel file means that `greenlet` will be built from source, which requires that
    Python’s development libraries also be present.
  prefs: []
  type: TYPE_NORMAL
- en: Synopsis - Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Core use, the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function creates an instance of
    [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    which then offers an async version of the traditional [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") API. The [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") delivers an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") via its [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") and [`AsyncEngine.begin()`](#sqlalchemy.ext.asyncio.AsyncEngine.begin
    "sqlalchemy.ext.asyncio.AsyncEngine.begin") methods which both deliver asynchronous
    context managers. The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") can then invoke statements using either
    the [`AsyncConnection.execute()`](#sqlalchemy.ext.asyncio.AsyncConnection.execute
    "sqlalchemy.ext.asyncio.AsyncConnection.execute") method to deliver a buffered
    [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result"),
    or the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method to deliver a streaming
    server-side [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Above, the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method may be used to invoke
    special DDL functions such as [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") that don’t include an awaitable hook.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s advisable to invoke the [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") method using `await` when using
    the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    object in a scope that will go out of context and be garbage collected, as illustrated
    in the `async_main` function in the above example. This ensures that any connections
    held open by the connection pool will be properly disposed within an awaitable
    context. Unlike when using blocking IO, SQLAlchemy cannot properly dispose of
    these connections within methods like `__del__` or weakref finalizers as there
    is no opportunity to invoke `await`. Failing to explicitly dispose of the engine
    when it falls out of scope may result in warnings emitted to standard out resembling
    the form `RuntimeError: Event loop is closed` within garbage collection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    also features a “streaming” API via the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method that returns an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object. This result object uses a server-side
    cursor and provides an async/await API, such as an async iterator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '## Synopsis - ORM'
  prefs: []
  type: TYPE_NORMAL
- en: Using [2.0 style](../../glossary.html#term-2.0-style) querying, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class provides full ORM functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Within the default mode of use, special care must be taken to avoid [lazy loading](../../glossary.html#term-lazy-loading)
    or other expired-attribute access involving ORM relationships and column attributes;
    the next section [Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)
    details this.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: A single instance of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in multiple, concurrent tasks**. See the sections [Using
    AsyncSession with Concurrent Tasks](#asyncio-concurrency) and [Is the Session
    thread-safe? Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates a complete example including mapper and session
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is instantiated using the optional [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") helper, which provides a factory
    for new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects with a fixed set of parameters, which here includes associating it with
    an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    against particular database URL. It is then passed to other methods where it may
    be used in a Python asynchronous context manager (i.e. `async with:` statement)
    so that it is automatically closed at the end of the block; this is equivalent
    to calling the [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") method.
  prefs: []
  type: TYPE_NORMAL
- en: '### Using AsyncSession with Concurrent Tasks'
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object is a **mutable, stateful object** which represents a **single, stateful
    database transaction in progress**. Using concurrent tasks with asyncio, with
    APIs such as `asyncio.gather()` for example, should use a **separate** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") **per individual task**.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the section [Is the Session thread-safe? Is AsyncSession safe to share
    in concurrent tasks?](../session_basics.html#session-faq-threadsafe) for a general
    description of the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with regards to how they should be used with concurrent workloads.  ### Preventing
    Implicit IO when Using AsyncSession'
  prefs: []
  type: TYPE_NORMAL
- en: Using traditional asyncio, the application needs to avoid any points at which
    IO-on-attribute access may occur. Techniques that can be used to help this are
    below, many of which are illustrated in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes that are lazy-loading relationships, deferred columns or expressions,
    or are being accessed in expiration scenarios can take advantage of the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin. This mixin, when added to a specific
    class or more generally to the Declarative `Base` superclass, provides an accessor
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") which delivers any attribute
    as an awaitable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Accessing the `A.bs` collection on newly loaded instances of `A` when eager
    loading is not in use will normally use [lazy loading](../../glossary.html#term-lazy-loading),
    which in order to succeed will usually emit IO to the database, which will fail
    under asyncio as no implicit IO is allowed. To access this attribute directly
    under asyncio without any prior loading operations, the attribute can be accessed
    as an awaitable by indicating the [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") prefix:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin provides a succinct facade over the internal approach that’s also used by
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.13.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Collections can be replaced with **write only collections** that will never
    emit IO implicitly, by using the [Write Only Relationships](../large_collections.html#write-only-relationship)
    feature in SQLAlchemy 2.0\. Using this feature, collections are never read from,
    only queried using explicit SQL calls. See the example `async_orm_writeonly.py`
    in the [Asyncio Integration](../examples.html#examples-asyncio) section for an
    example of write-only collections used with asyncio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using write only collections, the program’s behavior is simple and easy
    to predict regarding collections. However, the downside is that there is not any
    built-in system for loading many of these collections all at once, which instead
    would need to be performed manually. Therefore, many of the bullets below address
    specific techniques when using traditional lazy-loaded relationships with asyncio,
    which requires more care.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If not using [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs"),
    relationships can be declared with `lazy="raise"` so that by default they will
    not attempt to emit SQL. In order to load collections, [eager loading](../../glossary.html#term-eager-loading)
    would be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most useful eager loading strategy is the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader, which is employed in the previous
    example in order to eagerly load the `A.bs` collection within the scope of the
    `await session.execute()` call:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When constructing new objects, **collections are always assigned a default,
    empty collection**, such as a list in the above example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This allows the `.bs` collection on the above `A` object to be present and readable
    when the `A` object is flushed; otherwise, when the `A` is flushed, `.bs` would
    be unloaded and would raise an error on access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is configured using [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") set to False, so that we may access attributes on an
    object subsequent to a call to [`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit"), as in the line at the end where
    we access an attribute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Other guidelines include:'
  prefs: []
  type: TYPE_NORMAL
- en: Methods like [`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire") should be avoided in favor of [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh"); **if** expiration is absolutely
    needed. Expiration should generally **not** be needed as [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") should normally be set to `False` when using asyncio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A lazy-loaded relationship **can be loaded explicitly under asyncio** using
    [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh"),
    **if** the desired attribute name is passed explicitly to [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It’s of course preferable to use eager loading up front in order to have collections
    already set up without the need to lazy-load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0.4: Added support for [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") and the underlying [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method to force lazy-loaded relationships to
    load, if they are named explicitly in the [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") parameter. In previous versions, the relationship
    would be silently skipped even if named in the parameter.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Avoid using the `all` cascade option documented at [Cascades](../cascades.html#unitofwork-cascades)
    in favor of listing out the desired cascade features explicitly. The `all` cascade
    option implies among others the [refresh-expire](../cascades.html#cascade-refresh-expire)
    setting, which means that the [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") method will expire the attributes
    on related objects, but not necessarily refresh those related objects assuming
    eager loading is not configured within the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), leaving them in an expired state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate loader options should be employed for [`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") columns, if used at all, in addition to that of [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs as noted above. See [Limiting which
    Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)
    for background on deferred column loading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The “dynamic” relationship loader strategy described at [Dynamic Relationship
    Loaders](../large_collections.html#dynamic-relationship) is not compatible by
    default with the asyncio approach. It can be used directly only if invoked within
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method described at [Running Synchronous
    Methods and Functions under asyncio](#session-run-sync), or by using its `.statement`
    attribute to obtain a normal select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [write only](../large_collections.html#write-only-relationship) technique,
    introduced in version 2.0 of SQLAlchemy, is fully compatible with asyncio and
    should be preferred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Dynamic” relationship loaders superseded by “Write Only”](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - notes on migration to 2.0 style'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If using asyncio with a database that does not support RETURNING, such as MySQL
    8, server default values such as generated timestamps will not be available on
    newly flushed objects unless the [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") option is used. In SQLAlchemy 2.0, this behavior is applied
    automatically to backends like PostgreSQL, SQLite and MariaDB which use RETURNING
    to fetch new values when rows are INSERTed.  ### Running Synchronous Methods and
    Functions under asyncio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: This approach is essentially exposing publicly the mechanism by which SQLAlchemy
    is able to provide the asyncio interface in the first place. While there is no
    technical issue with doing so, overall the approach can probably be considered
    “controversial” as it works against some of the central philosophies of the asyncio
    programming model, which is essentially that any programming statement that can
    potentially result in IO being invoked **must** have an `await` call, lest the
    program does not make it explicitly clear every line at which IO may occur. This
    approach does not change that general idea, except that it allows a series of
    synchronous IO instructions to be exempted from this rule within the scope of
    a function call, essentially bundled up into a single awaitable.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative means of integrating traditional SQLAlchemy “lazy loading”
    within an asyncio event loop, an **optional** method known as [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") is provided which will run any
    Python function inside of a greenlet, where traditional synchronous programming
    concepts will be translated to use `await` when they reach the database driver.
    A hypothetical approach here is an asyncio-oriented application can package up
    database-related methods into functions that are invoked using [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync").
  prefs: []
  type: TYPE_NORMAL
- en: 'Altering the above example, if we didn’t use [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") for the `A.bs` collection, we could accomplish
    our treatment of these attribute accesses within a separate function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: 'The above approach of running certain functions within a “sync” runner has
    some parallels to an application that runs a SQLAlchemy application on top of
    an event-based programming library such as `gevent`. The differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: unlike when using `gevent`, we can continue to use the standard Python asyncio
    event loop, or any custom event loop, without the need to integrate into the `gevent`
    event loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no “monkeypatching” whatsoever. The above example makes use of a real
    asyncio driver and the underlying SQLAlchemy connection pool is also using the
    Python built-in `asyncio.Queue` for pooling connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program can freely switch between async/await code and contained functions
    that use sync code with virtually no performance penalty. There is no “thread
    executor” or any additional waiters or synchronization in use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The underlying network drivers are also using pure Python asyncio concepts,
    no third party networking libraries as `gevent` and `eventlet` provides are in
    use.  ### Using AsyncSession with Concurrent Tasks'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object is a **mutable, stateful object** which represents a **single, stateful
    database transaction in progress**. Using concurrent tasks with asyncio, with
    APIs such as `asyncio.gather()` for example, should use a **separate** [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") **per individual task**.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Is the Session thread-safe? Is AsyncSession safe to share in
    concurrent tasks?](../session_basics.html#session-faq-threadsafe) for a general
    description of the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with regards to how they should be used with concurrent workloads.
  prefs: []
  type: TYPE_NORMAL
- en: '### Preventing Implicit IO when Using AsyncSession'
  prefs: []
  type: TYPE_NORMAL
- en: Using traditional asyncio, the application needs to avoid any points at which
    IO-on-attribute access may occur. Techniques that can be used to help this are
    below, many of which are illustrated in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes that are lazy-loading relationships, deferred columns or expressions,
    or are being accessed in expiration scenarios can take advantage of the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin. This mixin, when added to a specific
    class or more generally to the Declarative `Base` superclass, provides an accessor
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") which delivers any attribute
    as an awaitable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Accessing the `A.bs` collection on newly loaded instances of `A` when eager
    loading is not in use will normally use [lazy loading](../../glossary.html#term-lazy-loading),
    which in order to succeed will usually emit IO to the database, which will fail
    under asyncio as no implicit IO is allowed. To access this attribute directly
    under asyncio without any prior loading operations, the attribute can be accessed
    as an awaitable by indicating the [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") prefix:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    mixin provides a succinct facade over the internal approach that’s also used by
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.13.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Collections can be replaced with **write only collections** that will never
    emit IO implicitly, by using the [Write Only Relationships](../large_collections.html#write-only-relationship)
    feature in SQLAlchemy 2.0\. Using this feature, collections are never read from,
    only queried using explicit SQL calls. See the example `async_orm_writeonly.py`
    in the [Asyncio Integration](../examples.html#examples-asyncio) section for an
    example of write-only collections used with asyncio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using write only collections, the program’s behavior is simple and easy
    to predict regarding collections. However, the downside is that there is not any
    built-in system for loading many of these collections all at once, which instead
    would need to be performed manually. Therefore, many of the bullets below address
    specific techniques when using traditional lazy-loaded relationships with asyncio,
    which requires more care.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If not using [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs"),
    relationships can be declared with `lazy="raise"` so that by default they will
    not attempt to emit SQL. In order to load collections, [eager loading](../../glossary.html#term-eager-loading)
    would be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most useful eager loading strategy is the [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader, which is employed in the previous
    example in order to eagerly load the `A.bs` collection within the scope of the
    `await session.execute()` call:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When constructing new objects, **collections are always assigned a default,
    empty collection**, such as a list in the above example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This allows the `.bs` collection on the above `A` object to be present and readable
    when the `A` object is flushed; otherwise, when the `A` is flushed, `.bs` would
    be unloaded and would raise an error on access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is configured using [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") set to False, so that we may access attributes on an
    object subsequent to a call to [`AsyncSession.commit()`](#sqlalchemy.ext.asyncio.AsyncSession.commit
    "sqlalchemy.ext.asyncio.AsyncSession.commit"), as in the line at the end where
    we access an attribute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Other guidelines include:'
  prefs: []
  type: TYPE_NORMAL
- en: Methods like [`AsyncSession.expire()`](#sqlalchemy.ext.asyncio.AsyncSession.expire
    "sqlalchemy.ext.asyncio.AsyncSession.expire") should be avoided in favor of [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh"); **if** expiration is absolutely
    needed. Expiration should generally **not** be needed as [`Session.expire_on_commit`](../session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") should normally be set to `False` when using asyncio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A lazy-loaded relationship **can be loaded explicitly under asyncio** using
    [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh "sqlalchemy.ext.asyncio.AsyncSession.refresh"),
    **if** the desired attribute name is passed explicitly to [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It’s of course preferable to use eager loading up front in order to have collections
    already set up without the need to lazy-load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0.4: Added support for [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") and the underlying [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method to force lazy-loaded relationships to
    load, if they are named explicitly in the [`Session.refresh.attribute_names`](../session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") parameter. In previous versions, the relationship
    would be silently skipped even if named in the parameter.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Avoid using the `all` cascade option documented at [Cascades](../cascades.html#unitofwork-cascades)
    in favor of listing out the desired cascade features explicitly. The `all` cascade
    option implies among others the [refresh-expire](../cascades.html#cascade-refresh-expire)
    setting, which means that the [`AsyncSession.refresh()`](#sqlalchemy.ext.asyncio.AsyncSession.refresh
    "sqlalchemy.ext.asyncio.AsyncSession.refresh") method will expire the attributes
    on related objects, but not necessarily refresh those related objects assuming
    eager loading is not configured within the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), leaving them in an expired state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate loader options should be employed for [`deferred()`](../queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") columns, if used at all, in addition to that of [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs as noted above. See [Limiting which
    Columns Load with Column Deferral](../queryguide/columns.html#orm-queryguide-column-deferral)
    for background on deferred column loading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The “dynamic” relationship loader strategy described at [Dynamic Relationship
    Loaders](../large_collections.html#dynamic-relationship) is not compatible by
    default with the asyncio approach. It can be used directly only if invoked within
    the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method described at [Running Synchronous
    Methods and Functions under asyncio](#session-run-sync), or by using its `.statement`
    attribute to obtain a normal select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [write only](../large_collections.html#write-only-relationship) technique,
    introduced in version 2.0 of SQLAlchemy, is fully compatible with asyncio and
    should be preferred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Dynamic” relationship loaders superseded by “Write Only”](../../changelog/migration_20.html#migration-20-dynamic-loaders)
    - notes on migration to 2.0 style'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If using asyncio with a database that does not support RETURNING, such as MySQL
    8, server default values such as generated timestamps will not be available on
    newly flushed objects unless the [`Mapper.eager_defaults`](../mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") option is used. In SQLAlchemy 2.0, this behavior is applied
    automatically to backends like PostgreSQL, SQLite and MariaDB which use RETURNING
    to fetch new values when rows are INSERTed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Running Synchronous Methods and Functions under asyncio'
  prefs: []
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: This approach is essentially exposing publicly the mechanism by which SQLAlchemy
    is able to provide the asyncio interface in the first place. While there is no
    technical issue with doing so, overall the approach can probably be considered
    “controversial” as it works against some of the central philosophies of the asyncio
    programming model, which is essentially that any programming statement that can
    potentially result in IO being invoked **must** have an `await` call, lest the
    program does not make it explicitly clear every line at which IO may occur. This
    approach does not change that general idea, except that it allows a series of
    synchronous IO instructions to be exempted from this rule within the scope of
    a function call, essentially bundled up into a single awaitable.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative means of integrating traditional SQLAlchemy “lazy loading”
    within an asyncio event loop, an **optional** method known as [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") is provided which will run any
    Python function inside of a greenlet, where traditional synchronous programming
    concepts will be translated to use `await` when they reach the database driver.
    A hypothetical approach here is an asyncio-oriented application can package up
    database-related methods into functions that are invoked using [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync").
  prefs: []
  type: TYPE_NORMAL
- en: 'Altering the above example, if we didn’t use [`selectinload()`](../queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") for the `A.bs` collection, we could accomplish
    our treatment of these attribute accesses within a separate function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: 'The above approach of running certain functions within a “sync” runner has
    some parallels to an application that runs a SQLAlchemy application on top of
    an event-based programming library such as `gevent`. The differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: unlike when using `gevent`, we can continue to use the standard Python asyncio
    event loop, or any custom event loop, without the need to integrate into the `gevent`
    event loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no “monkeypatching” whatsoever. The above example makes use of a real
    asyncio driver and the underlying SQLAlchemy connection pool is also using the
    Python built-in `asyncio.Queue` for pooling connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program can freely switch between async/await code and contained functions
    that use sync code with virtually no performance penalty. There is no “thread
    executor” or any additional waiters or synchronization in use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The underlying network drivers are also using pure Python asyncio concepts,
    no third party networking libraries as `gevent` and `eventlet` provides are in
    use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '## Using events with the asyncio extension'
  prefs: []
  type: TYPE_NORMAL
- en: The SQLAlchemy [event system](../../core/event.html) is not directly exposed
    by the asyncio extension, meaning there is not yet an “async” version of a SQLAlchemy
    event handler.
  prefs: []
  type: TYPE_NORMAL
- en: However, as the asyncio extension surrounds the usual synchronous SQLAlchemy
    API, regular “synchronous” style event handlers are freely available as they would
    be if asyncio were not used.
  prefs: []
  type: TYPE_NORMAL
- en: 'As detailed below, there are two current strategies to register events given
    asyncio-facing APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Events can be registered at the instance level (e.g. a specific [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance) by associating the event with
    the `sync` attribute that refers to the proxied object. For example to register
    the [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event against an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") instance, use its [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute as target. Targets
    include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_connection`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_connection")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncConnection.sync_engine`](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine
    "sqlalchemy.ext.asyncio.AsyncConnection.sync_engine")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session")'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: To register an event at the class level, targeting all instances of the same
    type (e.g. all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instances), use the corresponding sync-style class. For example to register the
    [`SessionEvents.before_commit()`](../events.html#sqlalchemy.orm.SessionEvents.before_commit
    "sqlalchemy.orm.SessionEvents.before_commit") event against the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class, use the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class as the target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To register at the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") level, combine an explicit [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") with an [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker"), and associate events with the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working within an event handler that is within an asyncio context, objects
    like the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") continue to work in their usual “synchronous”
    way without requiring `await` or `async` usage; when messages are ultimately received
    by the asyncio database adapter, the calling style is transparently adapted back
    into the asyncio calling style. For events that are passed a DBAPI level connection,
    such as [`PoolEvents.connect()`](../../core/events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect"), the object is a [pep-249](../../glossary.html#term-pep-249)
    compliant “connection” object which will adapt sync-style calls into the asyncio
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Event Listeners with Async Engines / Sessions / Sessionmakers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some examples of sync style event handlers associated with async-facing API
    constructs are illustrated below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core Events on AsyncEngine**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we access the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") as the target for [`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ORM Events on AsyncSession**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we access [`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session") as the target for [`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ORM Events on async_sessionmaker**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this use case, we make a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") as the event target, then assign it to the [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using the [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker") parameter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '### Using awaitable-only driver methods in connection pool and other events'
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in the above section, event handlers such as those oriented around
    the [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    event handlers receive a sync-style “DBAPI” connection, which is a wrapper object
    supplied by SQLAlchemy asyncio dialects to adapt the underlying asyncio “driver”
    connection into one that can be used by SQLAlchemy’s internals. A special use
    case arises when the user-defined implementation for such an event handler needs
    to make use of the ultimate “driver” connection directly, using awaitable only
    methods on that driver connection. One such example is the `.set_type_codec()`
    method supplied by the asyncpg driver.
  prefs: []
  type: TYPE_NORMAL
- en: To accommodate this use case, SQLAlchemy’s [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") class provides a method [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") that allows an awaitable function
    to be invoked within the “synchronous” context of an event handler or other SQLAlchemy
    internal. This method is directly analogous to the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method that allows a sync-style
    method to run under async.
  prefs: []
  type: TYPE_NORMAL
- en: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") should be passed a function that
    will accept the innermost “driver” connection as a single argument, and return
    an awaitable that will be invoked by the [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method. The given function itself
    does not need to be declared as `async`; it’s perfectly fine for it to be a Python
    `lambda:`, as the return awaitable value will be invoked after being returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: Above, the object passed to the `register_custom_types` event handler is an
    instance of [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection"), which provides a DBAPI-like interface
    to an underlying async-only driver-level connection object. The [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method then provides access to
    an awaitable environment where the underlying driver level connection may be acted
    upon.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.30.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Event Listeners with Async Engines / Sessions / Sessionmakers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some examples of sync style event handlers associated with async-facing API
    constructs are illustrated below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core Events on AsyncEngine**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we access the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") as the target for [`ConnectionEvents`](../../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") and [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ORM Events on AsyncSession**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we access [`AsyncSession.sync_session`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session") as the target for [`SessionEvents`](../events.html#sqlalchemy.orm.SessionEvents
    "sqlalchemy.orm.SessionEvents"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ORM Events on async_sessionmaker**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this use case, we make a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") as the event target, then assign it to the [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") using the [`async_sessionmaker.sync_session_class`](#sqlalchemy.ext.asyncio.async_sessionmaker.params.sync_session_class
    "sqlalchemy.ext.asyncio.async_sessionmaker") parameter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '### Using awaitable-only driver methods in connection pool and other events'
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in the above section, event handlers such as those oriented around
    the [`PoolEvents`](../../core/events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    event handlers receive a sync-style “DBAPI” connection, which is a wrapper object
    supplied by SQLAlchemy asyncio dialects to adapt the underlying asyncio “driver”
    connection into one that can be used by SQLAlchemy’s internals. A special use
    case arises when the user-defined implementation for such an event handler needs
    to make use of the ultimate “driver” connection directly, using awaitable only
    methods on that driver connection. One such example is the `.set_type_codec()`
    method supplied by the asyncpg driver.
  prefs: []
  type: TYPE_NORMAL
- en: To accommodate this use case, SQLAlchemy’s [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") class provides a method [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") that allows an awaitable function
    to be invoked within the “synchronous” context of an event handler or other SQLAlchemy
    internal. This method is directly analogous to the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method that allows a sync-style
    method to run under async.
  prefs: []
  type: TYPE_NORMAL
- en: '[`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") should be passed a function that
    will accept the innermost “driver” connection as a single argument, and return
    an awaitable that will be invoked by the [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method. The given function itself
    does not need to be declared as `async`; it’s perfectly fine for it to be a Python
    `lambda:`, as the return awaitable value will be invoked after being returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: Above, the object passed to the `register_custom_types` event handler is an
    instance of [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection"), which provides a DBAPI-like interface
    to an underlying async-only driver-level connection object. The [`AdaptedConnection.run_async()`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection.run_async
    "sqlalchemy.engine.AdaptedConnection.run_async") method then provides access to
    an awaitable environment where the underlying driver level connection may be acted
    upon.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.30.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple asyncio event loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An application that makes use of multiple event loops, for example in the uncommon
    case of combining asyncio with multithreading, should not share the same [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") with different event loops when using the
    default pool implementation.
  prefs: []
  type: TYPE_NORMAL
- en: If an [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is be passed from one event loop to another, the method [`AsyncEngine.dispose()`](#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") should be called before it’s re-used
    on a new event loop. Failing to do so may lead to a `RuntimeError` along the lines
    of `Task <Task pending ...> got Future attached to a different loop`
  prefs: []
  type: TYPE_NORMAL
- en: 'If the same engine must be shared between different loop, it should be configured
    to disable pooling using [`NullPool`](../../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), preventing the Engine from using any connection more
    than once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '## Using asyncio scoped session'
  prefs: []
  type: TYPE_NORMAL
- en: The “scoped session” pattern used in threaded SQLAlchemy with the [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") object is also available in asyncio, using an
    adapted version called [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy generally does not recommend the “scoped” pattern for new development
    as it relies upon mutable global state that must also be explicitly torn down
    when work within the thread or task is complete. Particularly when using asyncio,
    it’s likely a better idea to pass the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly to the awaitable functions that
    need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session"), as there’s no “thread-local” concept
    in the asyncio context, the “scopefunc” parameter must be provided to the constructor.
    The example below illustrates using the `asyncio.current_task()` function for
    this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The “scopefunc” used by [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") is invoked **an arbitrary number
    of times** within a task, once for each time the underlying [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is accessed. The function should therefore
    be **idempotent** and lightweight, and should not attempt to create or mutate
    any state, such as establishing callbacks, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Using `current_task()` for the “key” in the scope requires that the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method is called from within
    the outermost awaitable, to ensure the key is removed from the registry when the
    task is complete, otherwise the task handle as well as the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") will remain in memory, essentially creating
    a memory leak. See the following example which illustrates the correct use of
    [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove").
  prefs: []
  type: TYPE_NORMAL
- en: '[`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session "sqlalchemy.ext.asyncio.async_scoped_session")
    includes **proxy behavior** similar to that of [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session"), which means it can be treated as a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") directly, keeping in mind that the usual
    `await` keywords are necessary, including for the [`async_scoped_session.remove()`](#sqlalchemy.ext.asyncio.async_scoped_session.remove
    "sqlalchemy.ext.asyncio.async_scoped_session.remove") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.19.
  prefs: []
  type: TYPE_NORMAL
- en: '## Using the Inspector to inspect schema objects'
  prefs: []
  type: TYPE_NORMAL
- en: 'SQLAlchemy does not yet offer an asyncio version of the [`Inspector`](../../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") (introduced at [Fine Grained Reflection
    with Inspector](../../core/reflection.html#metadata-reflection-inspector)), however
    the existing interface may be used in an asyncio context by leveraging the [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") method of [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](../../core/reflection.html#metadata-reflection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Runtime Inspection API](../../core/inspection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Engine API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [async_engine_from_config](#sqlalchemy.ext.asyncio.async_engine_from_config)(configuration[,
    prefix], **kwargs) | Create a new AsyncEngine instance using a configuration dictionary.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncConnection](#sqlalchemy.ext.asyncio.AsyncConnection) | An asyncio proxy
    for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncEngine](#sqlalchemy.ext.asyncio.AsyncEngine) | An asyncio proxy for
    a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncTransaction](#sqlalchemy.ext.asyncio.AsyncTransaction) | An asyncio
    proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"). |'
  prefs: []
  type: TYPE_TB
- en: '| [create_async_engine](#sqlalchemy.ext.asyncio.create_async_engine)(url, **kw)
    | Create a new async engine instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [create_async_pool_from_url](#sqlalchemy.ext.asyncio.create_async_pool_from_url)(url,
    **kwargs) | Create a new async engine instance. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: Create a new async engine instance.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments passed to [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") are mostly identical to those passed
    to the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function. The specified dialect must be an asyncio-compatible dialect such as
    [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**async_creator** –'
  prefs: []
  type: TYPE_NORMAL
- en: an async callable which returns a driver-level asyncio connection. If given,
    the function should take no arguments, and return a new asyncio connection from
    the underlying asyncio database driver; the connection will be wrapped in the
    appropriate structures to be used with the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"). Note that the parameters specified in the
    URL are not applied here, and the creator function should use its own connection
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: This parameter is the asyncio equivalent of the [`create_engine.creator`](../../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of the [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.16.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Create a new AsyncEngine instance using a configuration dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This function is analogous to the [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function in SQLAlchemy Core, except that the
    requested dialect must be an asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
    The argument signature of the function is identical to that of [`engine_from_config()`](../../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.29.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: Create a new async engine instance.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments passed to [`create_async_pool_from_url()`](#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") are mostly identical to those
    passed to the [`create_pool_from_url()`](../../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") function. The specified dialect must be an
    asyncio-compatible dialect such as [asyncpg](../../dialects/postgresql.html#dialect-postgresql-asyncpg).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio proxy for a [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    is acquired using the [`create_async_engine()`](#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[begin()](#sqlalchemy.ext.asyncio.AsyncEngine.begin), [clear_compiled_cache()](#sqlalchemy.ext.asyncio.AsyncEngine.clear_compiled_cache),
    [connect()](#sqlalchemy.ext.asyncio.AsyncEngine.connect), [dialect](#sqlalchemy.ext.asyncio.AsyncEngine.dialect),
    [dispose()](#sqlalchemy.ext.asyncio.AsyncEngine.dispose), [driver](#sqlalchemy.ext.asyncio.AsyncEngine.driver),
    [echo](#sqlalchemy.ext.asyncio.AsyncEngine.echo), [engine](#sqlalchemy.ext.asyncio.AsyncEngine.engine),
    [execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.execution_options),
    [get_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.get_execution_options),
    [name](#sqlalchemy.ext.asyncio.AsyncEngine.name), [pool](#sqlalchemy.ext.asyncio.AsyncEngine.pool),
    [raw_connection()](#sqlalchemy.ext.asyncio.AsyncEngine.raw_connection), [sync_engine](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine),
    [update_execution_options()](#sqlalchemy.ext.asyncio.AsyncEngine.update_execution_options),
    [url](#sqlalchemy.ext.asyncio.AsyncEngine.url)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.AsyncConnectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager which when entered will deliver an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") with an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") established.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: Clear the compiled cache associated with the dialect.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: This applies **only** to the built-in cache that is established via the `create_engine.query_cache_size`
    parameter. It will not impact any dictionary caches that were passed via the [`Connection.execution_options.compiled_cache`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.compiled_cache
    "sqlalchemy.engine.Connection.execution_options") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    will procure a database connection from the underlying connection pool when it
    is entered as an async context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: The [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    may also be started outside of a context manager by invoking its [`AsyncConnection.start()`](#sqlalchemy.ext.asyncio.AsyncConnection.start
    "sqlalchemy.ext.asyncio.AsyncConnection.start") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Engine.dialect` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of the connection pool used by this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**close** –'
  prefs: []
  type: TYPE_NORMAL
- en: if left at its default of `True`, has the effect of fully closing all **currently
    checked in** database connections. Connections that are still checked out will
    **not** be closed, however they will no longer be associated with this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), so when they are closed individually, eventually
    the [`Pool`](../../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    which they are associated with will be garbage collected and they will be closed
    out fully, if not already closed on checkin.
  prefs: []
  type: TYPE_NORMAL
- en: If set to `False`, the previous connection pool is de-referenced, and otherwise
    not touched in any way.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Engine.dispose()`](../../core/connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Driver name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: When `True`, enable log output for this element.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: This has the effect of setting the Python logging level for the namespace of
    this element’s class and object reference. A value of boolean `True` indicates
    that the loglevel `logging.INFO` will be set for the logger, whereas the string
    value `debug` will set the loglevel to `logging.DEBUG`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: Returns this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: Used for legacy schemes that accept [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") / [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects within the same variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine "sqlalchemy.ext.asyncio.AsyncEngine")
    that will provide [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") objects with the given execution options.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied from [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"). See that method for details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: String name of the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect") in use by this `Engine`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Engine.pool` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: Return a “raw” DBAPI connection from the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with Driver SQL and Raw DBAPI Connections](../../core/connections.html#dbapi-connections)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") proxies requests towards.
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: Update the default execution_options dictionary of this [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: The given keys/values in **opt are added to the default execution options that
    will be used for all connections. The initial contents of this dictionary can
    be sent via the `execution_options` parameter to [`create_engine()`](../../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Engine.url` attribute on behalf of the [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio proxy for a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    is acquired using the [`AsyncEngine.connect()`](#sqlalchemy.ext.asyncio.AsyncEngine.connect
    "sqlalchemy.ext.asyncio.AsyncEngine.connect") method of [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[aclose()](#sqlalchemy.ext.asyncio.AsyncConnection.aclose), [begin()](#sqlalchemy.ext.asyncio.AsyncConnection.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncConnection.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncConnection.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncConnection.closed), [commit()](#sqlalchemy.ext.asyncio.AsyncConnection.commit),
    [connection](#sqlalchemy.ext.asyncio.AsyncConnection.connection), [default_isolation_level](#sqlalchemy.ext.asyncio.AsyncConnection.default_isolation_level),
    [dialect](#sqlalchemy.ext.asyncio.AsyncConnection.dialect), [exec_driver_sql()](#sqlalchemy.ext.asyncio.AsyncConnection.exec_driver_sql),
    [execute()](#sqlalchemy.ext.asyncio.AsyncConnection.execute), [execution_options()](#sqlalchemy.ext.asyncio.AsyncConnection.execution_options),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_nested_transaction),
    [get_raw_connection()](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection),
    [get_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.get_transaction),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncConnection.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncConnection.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncConnection.invalidate), [invalidated](#sqlalchemy.ext.asyncio.AsyncConnection.invalidated),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncConnection.rollback), [run_sync()](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncConnection.scalar), [scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.scalars),
    [start()](#sqlalchemy.ext.asyncio.AsyncConnection.start), [stream()](#sqlalchemy.ext.asyncio.AsyncConnection.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars), [sync_connection](#sqlalchemy.ext.asyncio.AsyncConnection.sync_connection),
    [sync_engine](#sqlalchemy.ext.asyncio.AsyncConnection.sync_engine)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`, `sqlalchemy.ext.asyncio.AsyncConnectable`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`AsyncConnection.close()`](#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncConnection.aclose()`](#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") name is specifically to support
    the Python standard library `@contextlib.aclosing` context manager function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: Begin a transaction prior to autobegin occurring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: Begin a nested transaction and return a transaction handle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Close this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection").
  prefs: []
  type: TYPE_NORMAL
- en: This has the effect of also rolling back the transaction if one is in place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: Commit the transaction that is currently in progress.
  prefs: []
  type: TYPE_NORMAL
- en: This method commits the current transaction if one has been started. If no transaction
    was started, the method has no effect, assuming the connection is in a non-invalidated
    state.
  prefs: []
  type: TYPE_NORMAL
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Not implemented for async; call [`AsyncConnection.get_raw_connection()`](#sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection
    "sqlalchemy.ext.asyncio.AsyncConnection.get_raw_connection").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: The initial-connection time isolation level associated with the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") in use.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: This value is independent of the [`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") and [`Engine.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") execution options, and is determined
    by the [`Dialect`](../../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    when the first connection is created, by performing a SQL query against the database
    for the current isolation level before any additional commands have been emitted.
  prefs: []
  type: TYPE_NORMAL
- en: Calling this accessor does not invoke any new SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](../../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current actual isolation
    level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](../../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Connection.dialect` attribute on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: Executes a driver-level SQL string and return buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: Executes a SQL statement construct and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The statement to be executed. This is always an object that is in both the
    [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") and [`Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchies, including:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Insert`](../../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert"),
    [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update"),
    [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`TextClause`](../../core/sqlelement.html#sqlalchemy.sql.expression.TextClause
    "sqlalchemy.sql.expression.TextClause") and [`TextualSelect`](../../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DDL`](../../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    and objects which inherit from [`ExecutableDDLElement`](../../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters` – parameters which will be bound into the statement. This may
    be either a dictionary of parameter names to values, or a mutable sequence (e.g.
    a list) of dictionaries. When a list of dictionaries is passed, the underlying
    statement execution will make use of the DBAPI `cursor.executemany()` method.
    When a single dictionary is passed, the DBAPI `cursor.execute()` method will be
    used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` – optional dictionary of execution options, which will
    be associated with the statement execution. This dictionary can provide a subset
    of the options that are accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: Set non-SQL options for the connection which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: This returns this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") object with the new options added.
  prefs: []
  type: TYPE_NORMAL
- en: See [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") for full details on this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current nested (savepoint) transaction, if any.
  prefs: []
  type: TYPE_NORMAL
- en: This makes use of the underlying synchronous connection’s [`Connection.get_nested_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_nested_transaction
    "sqlalchemy.engine.Connection.get_nested_transaction") method to get the current
    [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction"),
    which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Return the pooled DBAPI-level connection in use by this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection").
  prefs: []
  type: TYPE_NORMAL
- en: This is a SQLAlchemy connection-pool proxied connection which then has the attribute
    `_ConnectionFairy.driver_connection` that refers to the actual driver connection.
    Its `_ConnectionFairy.dbapi_connection` refers instead to an [`AdaptedConnection`](../../core/internals.html#sqlalchemy.engine.AdaptedConnection
    "sqlalchemy.engine.AdaptedConnection") instance that adapts the driver connection
    to the DBAPI protocol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    representing the current transaction, if any.
  prefs: []
  type: TYPE_NORMAL
- en: This makes use of the underlying synchronous connection’s [`Connection.get_transaction()`](../../core/connections.html#sqlalchemy.engine.Connection.get_transaction
    "sqlalchemy.engine.Connection.get_transaction") method to get the current [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction"), which is then proxied in a new [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: Return True if a transaction is in progress.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: Return True if a transaction is in progress.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Connection.info`](../../core/connections.html#sqlalchemy.engine.Connection.info
    "sqlalchemy.engine.Connection.info") dictionary of the underlying [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: This dictionary is freely writable for user-defined state to be associated with
    the database connection.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is only available if the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is currently connected. If the [`AsyncConnection.closed`](#sqlalchemy.ext.asyncio.AsyncConnection.closed
    "sqlalchemy.ext.asyncio.AsyncConnection.closed") attribute is `True`, then accessing
    this attribute will raise [`ResourceClosedError`](../../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: Invalidate the underlying DBAPI connection associated with this [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: See the method [`Connection.invalidate()`](../../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") for full detail on this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this connection was invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") class on behalf of the [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") class.
  prefs: []
  type: TYPE_NORMAL
- en: This does not indicate whether or not the connection was invalidated at the
    pool level, however
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: Roll back the transaction that is currently in progress.
  prefs: []
  type: TYPE_NORMAL
- en: This method rolls back the current transaction if one has been started. If no
    transaction was started, the method has no effect. If a transaction was started
    and the connection is in an invalidated state, the transaction is cleared using
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: A transaction is begun on a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") automatically whenever a statement is first executed,
    or when the [`Connection.begin()`](../../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most rudimentary use of [`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") is to invoke methods such as
    [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all"), given an [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") that needs to be provided to [`MetaData.create_all()`](../../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") as a [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync "sqlalchemy.ext.asyncio.AsyncSession.run_sync")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: Executes a SQL statement construct and returns a scalar object.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for invoking the [`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a scalar Python value representing the first column of the first row returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: Executes a SQL statement construct and returns a scalar objects.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for invoking the [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method after invoking the [`Connection.execute()`](../../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method. Parameters are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: Start this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object’s context outside of using a Python `with:` block.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return an awaitable yielding a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") method supports optional context
    manager use against the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: In the above pattern, the [`AsyncResult.close()`](#sqlalchemy.ext.asyncio.AsyncResult.close
    "sqlalchemy.ext.asyncio.AsyncResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0b3: added context manager support'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an awaitable object that will yield an [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return an awaitable yielding a [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: This method is shorthand for invoking the `AsyncResult.scalars()` method after
    invoking the `Connection.stream()` method. Parameters are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AsyncConnection.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncConnection.stream_scalars") method supports optional
    context manager use against the [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: In the above pattern, the [`AsyncScalarResult.close()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.close
    "sqlalchemy.ext.asyncio.AsyncScalarResult.close") method is invoked unconditionally,
    even if the iterator is interrupted by an exception throw. Context manager use
    remains optional, however, and the function may be called in either an `async
    with fn():` or `await fn()` style.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0b3: added context manager support'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an awaitable object that will yield an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the sync-style [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") proxies requests towards.
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the sync-style [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") this [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") is associated with via its underlying
    [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio proxy for a [`Transaction`](../../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[close()](#sqlalchemy.ext.asyncio.AsyncTransaction.close), [commit()](#sqlalchemy.ext.asyncio.AsyncTransaction.commit),
    [rollback()](#sqlalchemy.ext.asyncio.AsyncTransaction.rollback), [start()](#sqlalchemy.ext.asyncio.AsyncTransaction.start)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction") (`sqlalchemy.ext.asyncio.base.ProxyComparable`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Close this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: If this transaction is the base transaction in a begin/commit nesting, the transaction
    will rollback(). Otherwise, the method returns.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to cancel a Transaction without affecting the scope of an enclosing
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: Start this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction")
    object’s context outside of using a Python `with:` block.
  prefs: []
  type: TYPE_NORMAL
- en: Result Set API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object is an async-adapted version of the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object. It is only returned when using the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") or [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods, which return a result object
    that is on top of an active database cursor.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncMappingResult](#sqlalchemy.ext.asyncio.AsyncMappingResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncResult](#sqlalchemy.ext.asyncio.AsyncResult) | An asyncio wrapper around
    a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncScalarResult](#sqlalchemy.ext.asyncio.AsyncScalarResult) | A wrapper
    for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncTupleResult](#sqlalchemy.ext.asyncio.AsyncTupleResult) | A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") that’s typed as returning plain Python tuples
    instead of rows. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio wrapper around a [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    only applies to statement executions that use a server-side cursor. It is returned
    only from the [`AsyncConnection.stream()`](#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") and [`AsyncSession.stream()`](#sqlalchemy.ext.asyncio.AsyncSession.stream
    "sqlalchemy.ext.asyncio.AsyncSession.stream") methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As is the case with [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"), this object is used for ORM results returned by [`AsyncSession.execute()`](#sqlalchemy.ext.asyncio.AsyncSession.execute
    "sqlalchemy.ext.asyncio.AsyncSession.execute"), which can yield instances of ORM
    mapped objects either individually or within tuple-like rows. Note that these
    result objects do not deduplicate instances or rows automatically as is the case
    with the legacy [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. For in-Python de-duplication of instances or rows, use the [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique
    "sqlalchemy.ext.asyncio.AsyncResult.unique") modifier method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncResult.first),
    [freeze()](#sqlalchemy.ext.asyncio.AsyncResult.freeze), [keys()](#sqlalchemy.ext.asyncio.AsyncResult.keys),
    [mappings()](#sqlalchemy.ext.asyncio.AsyncResult.mappings), [one()](#sqlalchemy.ext.asyncio.AsyncResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncResult.partitions),
    [scalar()](#sqlalchemy.ext.asyncio.AsyncResult.scalar), [scalar_one()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one),
    [scalar_one_or_none()](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one_or_none),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncResult.scalars), [t](#sqlalchemy.ext.asyncio.AsyncResult.t),
    [tuples()](#sqlalchemy.ext.asyncio.AsyncResult.tuples), [unique()](#sqlalchemy.ext.asyncio.AsyncResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncResult.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: Return all rows in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Closes the result set after invocation. Subsequent invocations will return an
    empty list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: Close this result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: Establish the columns that should be returned in each row.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [`Result.columns()`](../../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: Fetch many rows.
  prefs: []
  type: TYPE_NORMAL
- en: When all rows are exhausted, returns an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch rows in groups, use the [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: Fetch one row.
  prefs: []
  type: TYPE_NORMAL
- en: When all rows are exhausted, returns None.
  prefs: []
  type: TYPE_NORMAL
- en: This method is provided for backwards compatibility with SQLAlchemy 1.x.x.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch the first row of a result only, use the [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") method. To iterate through all rows,
    iterate the [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    object directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object if no filters are applied, or `None` if no rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first row or `None` if no row is present.
  prefs: []
  type: TYPE_NORMAL
- en: Closes the result set and discards remaining rows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar
    "sqlalchemy.ext.asyncio.AsyncResult.scalar") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first").
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in contrast to the behavior of the legacy ORM [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first") method, **no limit is applied** to the SQL query
    which was invoked to produce this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"); for a DBAPI driver that buffers results
    in memory before yielding rows, all rows will be sent to the Python process and
    all but the first row will be discarded.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Query Unified with Core Select](../../changelog/migration_20.html#migration-20-unify-select)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    object, or None if no rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalar()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar "sqlalchemy.ext.asyncio.AsyncResult.scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: Return a callable object that will produce copies of this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") when invoked.
  prefs: []
  type: TYPE_NORMAL
- en: The callable object returned is an instance of [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult").
  prefs: []
  type: TYPE_NORMAL
- en: This is used for result set caching. The method must be called on the result
    when it has been unconsumed, and calling the method will consume the result fully.
    When the [`FrozenResult`](../../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") is retrieved from a cache, it can be called
    any number of times where it will produce a new [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object each time against its stored set of rows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](../session_events.html#do-orm-execute-re-executing)
    - example usage within the ORM to implement a result-set cache.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  prefs: []
  type: TYPE_NORMAL
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  prefs: []
  type: TYPE_NORMAL
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: Apply a mappings filter to returned rows, returning an instance of [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  prefs: []
  type: TYPE_NORMAL
- en: When this filter is applied, fetching rows will return [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") objects instead of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    filtering object referring to the underlying [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one row or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Raises [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound") if the result returns no rows, or [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows would be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method returns one **row**, e.g. tuple, by default. To return exactly one
    single scalar value, that is, the first column of the first row, use the [`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one") method, or combine [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound"), [`NoResultFound`](../../core/exceptions.html#sqlalchemy.exc.NoResultFound
    "sqlalchemy.exc.NoResultFound")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalar_one()`](#sqlalchemy.ext.asyncio.AsyncResult.scalar_one
    "sqlalchemy.ext.asyncio.AsyncResult.scalar_one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if the result has no rows. Raises [`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound") if multiple rows are returned.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    or `None` if no row is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultipleResultsFound`](../../core/exceptions.html#sqlalchemy.exc.MultipleResultsFound
    "sqlalchemy.exc.MultipleResultsFound")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first "sqlalchemy.ext.asyncio.AsyncResult.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through sub-lists of rows of the size given.
  prefs: []
  type: TYPE_NORMAL
- en: 'An async iterator is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: Refer to [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") in the synchronous SQLAlchemy API for a
    complete behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first column of the first row, and close the result set.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if there are no rows to fetch.
  prefs: []
  type: TYPE_NORMAL
- en: No validation is performed to test if additional rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: After calling this method, the object is fully closed, e.g. the [`CursorResult.close()`](../../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method will have been called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a Python scalar value, or `None` if no rows remain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one scalar result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one "sqlalchemy.ext.asyncio.AsyncResult.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one scalar result or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") and then [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars "sqlalchemy.ext.asyncio.AsyncResult.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object which will return single elements rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**index** – integer or row key indicating the column to be fetched from each
    row, defaults to `0` indicating the first column.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    filtering object referring to this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: Apply a “typed tuple” typing filter to returned rows.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    attribute is a synonym for calling the [`AsyncResult.tuples()`](#sqlalchemy.ext.asyncio.AsyncResult.tuples
    "sqlalchemy.ext.asyncio.AsyncResult.tuples") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: Apply a “typed tuple” typing filter to returned rows.
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the same [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object at runtime, however annotates as
    returning a [`AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult "sqlalchemy.ext.asyncio.AsyncTupleResult")
    object that will indicate to [**PEP 484**](https://peps.python.org/pep-0484/)
    typing tools that plain typed `Tuple` instances are returned rather than rows.
    This allows tuple unpacking and `__getitem__` access of [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects to by typed, for those cases where the statement
    invoked itself included typing information.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the `AsyncTupleResult` type at typing time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncResult.t`](#sqlalchemy.ext.asyncio.AsyncResult.t "sqlalchemy.ext.asyncio.AsyncResult.t")
    - shorter synonym'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Row.t`](../../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    - [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: Apply unique filtering to the objects returned by this [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult").
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") in the synchronous SQLAlchemy API for a complete
    behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns scalar values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object is acquired by calling the [`AsyncResult.scalars()`](#sqlalchemy.ext.asyncio.AsyncResult.scalars
    "sqlalchemy.ext.asyncio.AsyncResult.scalars") method.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncScalarResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncScalarResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncScalarResult.closed), [fetchall()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchall),
    [fetchmany()](#sqlalchemy.ext.asyncio.AsyncScalarResult.fetchmany), [first()](#sqlalchemy.ext.asyncio.AsyncScalarResult.first),
    [one()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one), [one_or_none()](#sqlalchemy.ext.asyncio.AsyncScalarResult.one_or_none),
    [partitions()](#sqlalchemy.ext.asyncio.AsyncScalarResult.partitions), [unique()](#sqlalchemy.ext.asyncio.AsyncScalarResult.unique),
    [yield_per()](#sqlalchemy.ext.asyncio.AsyncScalarResult.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult") (`sqlalchemy.ext.asyncio.AsyncCommon`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Return all scalar values in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: Close this result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`AsyncScalarResult.all()`](#sqlalchemy.ext.asyncio.AsyncScalarResult.all
    "sqlalchemy.ext.asyncio.AsyncScalarResult.all") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Fetch many objects.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first object or `None` if no object is present.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that scalar values, rather than
    [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through sub-lists of elements of the size given.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that scalar values, rather
    than [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: Apply unique filtering to the objects returned by this [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult").
  prefs: []
  type: TYPE_NORMAL
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for a [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that returns dictionary values rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") values.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult "sqlalchemy.ext.asyncio.AsyncMappingResult")
    object is acquired by calling the [`AsyncResult.mappings()`](#sqlalchemy.ext.asyncio.AsyncResult.mappings
    "sqlalchemy.ext.asyncio.AsyncResult.mappings") method.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the [`MappingResult`](../../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") object in the synchronous SQLAlchemy API for
    a complete behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[all()](#sqlalchemy.ext.asyncio.AsyncMappingResult.all), [close()](#sqlalchemy.ext.asyncio.AsyncMappingResult.close),
    [closed](#sqlalchemy.ext.asyncio.AsyncMappingResult.closed), [columns()](#sqlalchemy.ext.asyncio.AsyncMappingResult.columns),
    [fetchall()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchall), [fetchmany()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchmany),
    [fetchone()](#sqlalchemy.ext.asyncio.AsyncMappingResult.fetchone), [first()](#sqlalchemy.ext.asyncio.AsyncMappingResult.first),
    [keys()](#sqlalchemy.ext.asyncio.AsyncMappingResult.keys), [one()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one),
    [one_or_none()](#sqlalchemy.ext.asyncio.AsyncMappingResult.one_or_none), [partitions()](#sqlalchemy.ext.asyncio.AsyncMappingResult.partitions),
    [unique()](#sqlalchemy.ext.asyncio.AsyncMappingResult.unique), [yield_per()](#sqlalchemy.ext.asyncio.AsyncMappingResult.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") (`sqlalchemy.engine._WithKeys`, `sqlalchemy.ext.asyncio.AsyncCommon`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: Return all rows in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.all()`](#sqlalchemy.ext.asyncio.AsyncResult.all
    "sqlalchemy.ext.asyncio.AsyncResult.all") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.close()` *method of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: Close this result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `AsyncCommon.closed` *attribute of* `AsyncCommon`'
  prefs: []
  type: TYPE_NORMAL
- en: proxies the .closed attribute of the underlying result object, if any, else
    raises `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: Establish the columns that should be returned in each row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for the [`AsyncMappingResult.all()`](#sqlalchemy.ext.asyncio.AsyncMappingResult.all
    "sqlalchemy.ext.asyncio.AsyncMappingResult.all") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: Fetch many rows.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.fetchmany()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchmany
    "sqlalchemy.ext.asyncio.AsyncResult.fetchmany") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: Fetch one object.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.fetchone()`](#sqlalchemy.ext.asyncio.AsyncResult.fetchone
    "sqlalchemy.ext.asyncio.AsyncResult.fetchone") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the first object or `None` if no object is present.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.first()`](#sqlalchemy.ext.asyncio.AsyncResult.first
    "sqlalchemy.ext.asyncio.AsyncResult.first") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.engine._WithKeys.keys` *method of* `sqlalchemy.engine._WithKeys`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an iterable view which yields the string keys that would be represented
    by each [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row").
  prefs: []
  type: TYPE_NORMAL
- en: The keys can represent the labels of the columns returned by a core statement
    or the names of the orm classes returned by an orm execution.
  prefs: []
  type: TYPE_NORMAL
- en: The view also can be tested for key containment using the Python `in` operator,
    which will test both for the string keys represented in the view, as well as for
    alternate keys such as column objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: a key view object is returned rather than a plain list.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one()`](#sqlalchemy.ext.asyncio.AsyncResult.one
    "sqlalchemy.ext.asyncio.AsyncResult.one") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one object or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.one_or_none()`](#sqlalchemy.ext.asyncio.AsyncResult.one_or_none
    "sqlalchemy.ext.asyncio.AsyncResult.one_or_none") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through sub-lists of elements of the size given.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to [`AsyncResult.partitions()`](#sqlalchemy.ext.asyncio.AsyncResult.partitions
    "sqlalchemy.ext.asyncio.AsyncResult.partitions") except that [`RowMapping`](../../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") values, rather than [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: Apply unique filtering to the objects returned by this [`AsyncMappingResult`](#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult").
  prefs: []
  type: TYPE_NORMAL
- en: See [`AsyncResult.unique()`](#sqlalchemy.ext.asyncio.AsyncResult.unique "sqlalchemy.ext.asyncio.AsyncResult.unique")
    for usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") *method of* [`FilterResult`](../../core/connections.html#sqlalchemy.engine.FilterResult
    "sqlalchemy.engine.FilterResult")'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the row-fetching strategy to fetch `num` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") method is a pass through to the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method. See that method’s documentation
    for usage notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.40: - added [`FilterResult.yield_per()`](../../core/connections.html#sqlalchemy.engine.FilterResult.yield_per
    "sqlalchemy.engine.FilterResult.yield_per") so that the method is available on
    all result set implementations'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)
    - describes Core behavior for [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](../queryguide/api.html#orm-queryguide-yield-per)
    - in the [ORM Querying Guide](../queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: A [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    that’s typed as returning plain Python tuples instead of rows.
  prefs: []
  type: TYPE_NORMAL
- en: Since [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    acts like a tuple in every way already, this class is a typing only class, regular
    [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult "sqlalchemy.ext.asyncio.AsyncResult")
    is still used at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncTupleResult`](#sqlalchemy.ext.asyncio.AsyncTupleResult
    "sqlalchemy.ext.asyncio.AsyncTupleResult") (`sqlalchemy.ext.asyncio.AsyncCommon`,
    `sqlalchemy.util.langhelpers.TypingOnly`)
  prefs: []
  type: TYPE_NORMAL
- en: ORM Session API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [async_object_session](#sqlalchemy.ext.asyncio.async_object_session)(instance)
    | Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| [async_scoped_session](#sqlalchemy.ext.asyncio.async_scoped_session) | Provides
    scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [async_session](#sqlalchemy.ext.asyncio.async_session)(session) | Return
    the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| [async_sessionmaker](#sqlalchemy.ext.asyncio.async_sessionmaker) | A configurable
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncAttrs](#sqlalchemy.ext.asyncio.AsyncAttrs) | Mixin class which provides
    an awaitable accessor for all attributes. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncSession](#sqlalchemy.ext.asyncio.AsyncSession) | Asyncio version of
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncSessionTransaction](#sqlalchemy.ext.asyncio.AsyncSessionTransaction)
    | A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [close_all_sessions](#sqlalchemy.ext.asyncio.close_all_sessions)() | Close
    all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    to which the given instance belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This function makes use of the sync-API function [`object_session`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") to retrieve the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which refers to the given instance, and from there links
    it to the original [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    has been garbage collected, the return value is `None`.
  prefs: []
  type: TYPE_NORMAL
- en: This functionality is also available from the [`InstanceState.async_session`](../internals.html#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**instance** – an ORM mapped instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    which is proxying the given [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session** – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.23.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`close_all_sessions()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: A configurable [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    factory.
  prefs: []
  type: TYPE_NORMAL
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    factory works in the same way as the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") factory, to generate new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects when called, creating them given
    the configurational arguments established here.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: The [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker "sqlalchemy.ext.asyncio.async_sessionmaker")
    is useful so that different parts of a program can create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects with a fixed configuration established
    up front. Note that [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    objects may also be instantiated directly when not using [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") provides a [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") class that’s dedicated to the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") object, including pep-484 typing support.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Synopsis - ORM](#asyncio-orm) - shows example use'
  prefs: []
  type: TYPE_NORMAL
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    - general overview of the'
  prefs: []
  type: TYPE_NORMAL
- en: '[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '[Opening and Closing a Session](../session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_sessionmaker.__init__),
    [begin()](#sqlalchemy.ext.asyncio.async_sessionmaker.begin), [configure()](#sqlalchemy.ext.asyncio.async_sessionmaker.configure)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: Produce a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    object using the configuration established in this [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`AsyncSession.__init__()`](#sqlalchemy.ext.asyncio.AsyncSession.__init__
    "sqlalchemy.ext.asyncio.AsyncSession.__init__") docstring for more details on
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: Produce a context manager that both provides a new `AsyncSession` as well as
    a transaction that commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: (Re)configure the arguments for this async_sessionmaker.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: Provides scoped management of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects.
  prefs: []
  type: TYPE_NORMAL
- en: See the section [Using asyncio scoped session](#asyncio-scoped-session) for
    usage details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.19.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.ext.asyncio.async_scoped_session.__call__), [__init__()](#sqlalchemy.ext.asyncio.async_scoped_session.__init__),
    [aclose()](#sqlalchemy.ext.asyncio.async_scoped_session.aclose), [add()](#sqlalchemy.ext.asyncio.async_scoped_session.add),
    [add_all()](#sqlalchemy.ext.asyncio.async_scoped_session.add_all), [autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.autoflush),
    [begin()](#sqlalchemy.ext.asyncio.async_scoped_session.begin), [begin_nested()](#sqlalchemy.ext.asyncio.async_scoped_session.begin_nested),
    [bind](#sqlalchemy.ext.asyncio.async_scoped_session.bind), [close()](#sqlalchemy.ext.asyncio.async_scoped_session.close),
    [close_all()](#sqlalchemy.ext.asyncio.async_scoped_session.close_all), [commit()](#sqlalchemy.ext.asyncio.async_scoped_session.commit),
    [configure()](#sqlalchemy.ext.asyncio.async_scoped_session.configure), [connection()](#sqlalchemy.ext.asyncio.async_scoped_session.connection),
    [delete()](#sqlalchemy.ext.asyncio.async_scoped_session.delete), [deleted](#sqlalchemy.ext.asyncio.async_scoped_session.deleted),
    [dirty](#sqlalchemy.ext.asyncio.async_scoped_session.dirty), [execute()](#sqlalchemy.ext.asyncio.async_scoped_session.execute),
    [expire()](#sqlalchemy.ext.asyncio.async_scoped_session.expire), [expire_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expire_all),
    [expunge()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge), [expunge_all()](#sqlalchemy.ext.asyncio.async_scoped_session.expunge_all),
    [flush()](#sqlalchemy.ext.asyncio.async_scoped_session.flush), [get()](#sqlalchemy.ext.asyncio.async_scoped_session.get),
    [get_bind()](#sqlalchemy.ext.asyncio.async_scoped_session.get_bind), [get_one()](#sqlalchemy.ext.asyncio.async_scoped_session.get_one),
    [identity_key()](#sqlalchemy.ext.asyncio.async_scoped_session.identity_key), [identity_map](#sqlalchemy.ext.asyncio.async_scoped_session.identity_map),
    [info](#sqlalchemy.ext.asyncio.async_scoped_session.info), [invalidate()](#sqlalchemy.ext.asyncio.async_scoped_session.invalidate),
    [is_active](#sqlalchemy.ext.asyncio.async_scoped_session.is_active), [is_modified()](#sqlalchemy.ext.asyncio.async_scoped_session.is_modified),
    [merge()](#sqlalchemy.ext.asyncio.async_scoped_session.merge), [new](#sqlalchemy.ext.asyncio.async_scoped_session.new),
    [no_autoflush](#sqlalchemy.ext.asyncio.async_scoped_session.no_autoflush), [object_session()](#sqlalchemy.ext.asyncio.async_scoped_session.object_session),
    [refresh()](#sqlalchemy.ext.asyncio.async_scoped_session.refresh), [remove()](#sqlalchemy.ext.asyncio.async_scoped_session.remove),
    [reset()](#sqlalchemy.ext.asyncio.async_scoped_session.reset), [rollback()](#sqlalchemy.ext.asyncio.async_scoped_session.rollback),
    [scalar()](#sqlalchemy.ext.asyncio.async_scoped_session.scalar), [scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.scalars),
    [session_factory](#sqlalchemy.ext.asyncio.async_scoped_session.session_factory),
    [stream()](#sqlalchemy.ext.asyncio.async_scoped_session.stream), [stream_scalars()](#sqlalchemy.ext.asyncio.async_scoped_session.stream_scalars)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") (`typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: Return the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession"),
    creating it using the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](../contextual.html#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is not present. If the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is present and keyword arguments have been
    passed, [`InvalidRequestError`](../../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`session_factory` – a factory to create new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instances. This is usually, but not necessarily,
    an instance of [`async_sessionmaker`](#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scopefunc` – function which defines the current scope. A function such as
    `asyncio.current_task` may be useful here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `AsyncSession.bind` attribute on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: Commit the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: reconfigure the [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](../contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  prefs: []
  type: TYPE_NORMAL
- en: See [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: The database delete operation occurs upon `flush()`.
  prefs: []
  type: TYPE_NORMAL
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  prefs: []
  type: TYPE_NORMAL
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: '..versionadded: 2.0.22'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: Close this Session, using connection invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh the attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  prefs: []
  type: TYPE_NORMAL
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of the current [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), if present.
  prefs: []
  type: TYPE_NORMAL
- en: Different from scoped_session’s remove method, this method would use await to
    wait for the close method of AsyncSession.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") is needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a stream of scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class on behalf of the [`async_scoped_session`](#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.scoping.async_scoped_session") class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: Mixin class which provides an awaitable accessor for all attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, the [`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") mixin is applied to the declarative `Base`
    class where it takes effect for all subclasses. This mixin adds a single new attribute
    [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") to all classes, which will
    yield the value of any attribute as an awaitable. This allows attributes which
    may be subject to lazy loading or deferred / unexpiry loading to be accessed such
    that IO can still be emitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`AsyncAttrs.awaitable_attrs`](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs
    "sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs") performs a call against the
    attribute that is approximately equivalent to using the [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync") method, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: New in version 2.0.13.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[awaitable_attrs](#sqlalchemy.ext.asyncio.AsyncAttrs.awaitable_attrs)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Preventing Implicit IO when Using AsyncSession](#asyncio-orm-avoid-lazyloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: provide a namespace of all attributes on this object wrapped as awaitables.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: Asyncio version of [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is a proxy for a traditional [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    is **not safe for use in concurrent tasks.**. See [Is the Session thread-safe?
    Is AsyncSession safe to share in concurrent tasks?](../session_basics.html#session-faq-threadsafe)
    for background.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: To use an [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    with custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    implementations, see the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[sync_session_class](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class),
    [__init__()](#sqlalchemy.ext.asyncio.AsyncSession.__init__), [aclose()](#sqlalchemy.ext.asyncio.AsyncSession.aclose),
    [add()](#sqlalchemy.ext.asyncio.AsyncSession.add), [add_all()](#sqlalchemy.ext.asyncio.AsyncSession.add_all),
    [autoflush](#sqlalchemy.ext.asyncio.AsyncSession.autoflush), [begin()](#sqlalchemy.ext.asyncio.AsyncSession.begin),
    [begin_nested()](#sqlalchemy.ext.asyncio.AsyncSession.begin_nested), [close()](#sqlalchemy.ext.asyncio.AsyncSession.close),
    [close_all()](#sqlalchemy.ext.asyncio.AsyncSession.close_all), [commit()](#sqlalchemy.ext.asyncio.AsyncSession.commit),
    [connection()](#sqlalchemy.ext.asyncio.AsyncSession.connection), [delete()](#sqlalchemy.ext.asyncio.AsyncSession.delete),
    [deleted](#sqlalchemy.ext.asyncio.AsyncSession.deleted), [dirty](#sqlalchemy.ext.asyncio.AsyncSession.dirty),
    [execute()](#sqlalchemy.ext.asyncio.AsyncSession.execute), [expire()](#sqlalchemy.ext.asyncio.AsyncSession.expire),
    [expire_all()](#sqlalchemy.ext.asyncio.AsyncSession.expire_all), [expunge()](#sqlalchemy.ext.asyncio.AsyncSession.expunge),
    [expunge_all()](#sqlalchemy.ext.asyncio.AsyncSession.expunge_all), [flush()](#sqlalchemy.ext.asyncio.AsyncSession.flush),
    [get()](#sqlalchemy.ext.asyncio.AsyncSession.get), [get_bind()](#sqlalchemy.ext.asyncio.AsyncSession.get_bind),
    [get_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_nested_transaction),
    [get_one()](#sqlalchemy.ext.asyncio.AsyncSession.get_one), [get_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.get_transaction),
    [identity_key()](#sqlalchemy.ext.asyncio.AsyncSession.identity_key), [identity_map](#sqlalchemy.ext.asyncio.AsyncSession.identity_map),
    [in_nested_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_nested_transaction),
    [in_transaction()](#sqlalchemy.ext.asyncio.AsyncSession.in_transaction), [info](#sqlalchemy.ext.asyncio.AsyncSession.info),
    [invalidate()](#sqlalchemy.ext.asyncio.AsyncSession.invalidate), [is_active](#sqlalchemy.ext.asyncio.AsyncSession.is_active),
    [is_modified()](#sqlalchemy.ext.asyncio.AsyncSession.is_modified), [merge()](#sqlalchemy.ext.asyncio.AsyncSession.merge),
    [new](#sqlalchemy.ext.asyncio.AsyncSession.new), [no_autoflush](#sqlalchemy.ext.asyncio.AsyncSession.no_autoflush),
    [object_session()](#sqlalchemy.ext.asyncio.AsyncSession.object_session), [refresh()](#sqlalchemy.ext.asyncio.AsyncSession.refresh),
    [reset()](#sqlalchemy.ext.asyncio.AsyncSession.reset), [rollback()](#sqlalchemy.ext.asyncio.AsyncSession.rollback),
    [run_sync()](#sqlalchemy.ext.asyncio.AsyncSession.run_sync), [scalar()](#sqlalchemy.ext.asyncio.AsyncSession.scalar),
    [scalars()](#sqlalchemy.ext.asyncio.AsyncSession.scalars), [stream()](#sqlalchemy.ext.asyncio.AsyncSession.stream),
    [stream_scalars()](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars), [sync_session](#sqlalchemy.ext.asyncio.AsyncSession.sync_session)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: The class or callable that provides the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for a particular [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: At the class level, this attribute is the default value for the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession") parameter. Custom subclasses of [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") can override this.
  prefs: []
  type: TYPE_NORMAL
- en: At the instance level, this attribute indicates the current class or callable
    that was used to provide the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance for this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") instance.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: All parameters other than `sync_session_class` are passed to the `sync_session_class`
    callable directly to instantiate a new [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Refer to [`Session.__init__()`](../session_api.html#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") for parameter documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sync_session_class** –'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclass or other callable which will be used to construct the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") which will be proxied. This parameter may be used to
    provide custom [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    subclasses. Defaults to the [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession.sync_session_class") class-level attribute.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AsyncSession.aclose()`](#sqlalchemy.ext.asyncio.AsyncSession.aclose "sqlalchemy.ext.asyncio.AsyncSession.aclose")
    name is specifically to support the Python standard library `@contextlib.aclosing`
    context manager function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../../glossary.html#term-transient) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [pending](../../glossary.html#term-pending)
    state, until the next flush, at which point they will move to the [persistent](../../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../../glossary.html#term-detached) state
    when passed to the [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") method will move to the [persistent](../../glossary.html#term-persistent)
    state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](../session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](../session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](../session_basics.html#session-adding) - at
    [Basics of Using a Session](../session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will perform the “begin” action when the [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object is entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: Note that database IO will not normally occur when the session-level transaction
    is begun, as database transactions begin on an on-demand basis. However, the begin
    block is async to accommodate for a [`SessionEvents.after_transaction_create()`](../events.html#sqlalchemy.orm.SessionEvents.after_transaction_create
    "sqlalchemy.orm.SessionEvents.after_transaction_create") event hook that may perform
    IO.
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin, see [`Session.begin()`](../session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: Return an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object which will begin a “nested”
    transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior is the same as that of [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin").
  prefs: []
  type: TYPE_NORMAL
- en: For a general description of ORM begin nested, see [`Session.begin_nested()`](../session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../../dialects/sqlite.html#aiosqlite-serializable)
    - special workarounds required with the SQLite asyncio driver in order for SAVEPOINT
    to work correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](../session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - main documentation for “close”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: Close all [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`AsyncSession.close_all()`](#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") method is deprecated and will
    be removed in a future release. Please refer to [`close_all_sessions()`](#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: Commit the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.commit()`](../session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    - main documentation for “commit”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`AsyncConnection`](#sqlalchemy.ext.asyncio.AsyncConnection "sqlalchemy.ext.asyncio.AsyncConnection")
    object corresponding to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: This method may also be used to establish execution options for the database
    connection used by the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added **kw arguments which are passed through to the
    underlying [`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.connection()`](../session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") - main documentation for “connection”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The database delete operation occurs upon `flush()`.
  prefs: []
  type: TYPE_NORMAL
- en: As this operation may need to cascade along unloaded relationships, it is awaitable
    to allow for those queries to take place.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.delete()`](../session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    - main documentation for delete'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](../session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a buffered [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    - main documentation for execute'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use `Session.expire_all()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire()` only makes sense
    for the specific case that a non-ORM SQL statement was emitted in the current
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    `Session.expire()`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the `Session.rollback()`
    or `Session.commit()` methods are called, so that new state can be loaded for
    the new transaction. For this reason, calling `Session.expire_all()` is not usually
    needed, assuming the transaction is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    introductory material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](../session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](../queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.flush()`](../session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    - main documentation for flush'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - main documentation for get'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which the synchronous proxied [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, this method is currently **not** used
    by this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    in any way in order to resolve engines for requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method proxies directly to the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method, however is currently **not** useful
    as an override target, in contrast to that of the [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method. The example below illustrates how to
    implement custom [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") schemes that work with [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine").
  prefs: []
  type: TYPE_NORMAL
- en: 'The pattern introduced at [Custom Vertical Partitioning](../persistence_techniques.html#session-custom-partitioning)
    illustrates how to apply a custom bind-lookup scheme to a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") given a set of [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. To apply a corresponding [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") implementation for use with a [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") and [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") objects, continue to subclass [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and apply it to [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") using [`AsyncSession.sync_session_class`](#sqlalchemy.ext.asyncio.AsyncSession.params.sync_session_class
    "sqlalchemy.ext.asyncio.AsyncSession"). The inner method must continue to return
    [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    instances, which can be acquired from a [`AsyncEngine`](#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") using the [`AsyncEngine.sync_engine`](#sqlalchemy.ext.asyncio.AsyncEngine.sync_engine
    "sqlalchemy.ext.asyncio.AsyncEngine.sync_engine") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: The [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method is called in a non-asyncio, implicitly
    non-blocking context in the same manner as ORM event hooks and functions that
    are invoked via [`AsyncSession.run_sync()`](#sqlalchemy.ext.asyncio.AsyncSession.run_sync
    "sqlalchemy.ext.asyncio.AsyncSession.run_sync"), so routines that wish to run
    SQL commands inside of [`Session.get_bind()`](../session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") can continue to do so using blocking-style
    code, which will be translated to implicitly async calls at the point of invoking
    IO on the database drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: Return the current nested transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or raise an exception
    if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: '..versionadded: 2.0.22'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_one()`](../session_api.html#sqlalchemy.orm.Session.get_one "sqlalchemy.orm.Session.get_one")
    - main documentation for get_one'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: Return the current root transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") object, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](../mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: Proxy for the [`Session.identity_map`](../session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") constructor or factory methods. The dictionary
    here is always local to this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: Close this Session, using connection invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete description, see [`Session.invalidate()`](../session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](../session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](../session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](../session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    - main documentation for merge'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Proxied for the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession "sqlalchemy.ext.asyncio.AsyncSession")
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](../session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh the attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: A query will be issued to the database and all attributes will be refreshed
    with their current database value.
  prefs: []
  type: TYPE_NORMAL
- en: This is the async version of the [`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method. See that method for a complete description
    of all options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](../session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    - main documentation for refresh'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](../session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - main documentation for “reset”'
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](../session_basics.html#session-closing) - detail on the semantics
    of [`AsyncSession.close()`](#sqlalchemy.ext.asyncio.AsyncSession.close "sqlalchemy.ext.asyncio.AsyncSession.close")
    and [`AsyncSession.reset()`](#sqlalchemy.ext.asyncio.AsyncSession.reset "sqlalchemy.ext.asyncio.AsyncSession.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.rollback()`](../session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") - main documentation for “rollback”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: Invoke the given synchronous (i.e. not async) callable, passing a synchronous-style
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows traditional synchronous SQLAlchemy functions to run within
    the context of an asyncio application.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: This method maintains the asyncio event loop all the way through to the database
    connection by running the given callable in a specially instrumented greenlet.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The provided callable is invoked inline within the asyncio event loop, and will
    block on traditional IO calls. IO within this callable should only call into SQLAlchemy’s
    asyncio database APIs which will be properly adapted to the greenlet context.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncAttrs`](#sqlalchemy.ext.asyncio.AsyncAttrs "sqlalchemy.ext.asyncio.AsyncAttrs")
    - a mixin for ORM mapped classes that provides a similar feature more succinctly
    on a per-attribute basis'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncConnection.run_sync()`](#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Running Synchronous Methods and Functions under asyncio](#session-run-sync)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalar()`](../session_api.html#sqlalchemy.orm.Session.scalar "sqlalchemy.orm.Session.scalar")
    - main documentation for scalar'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars
    "sqlalchemy.ext.asyncio.AsyncSession.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`async_scoped_session.scalars()`](#sqlalchemy.ext.asyncio.async_scoped_session.scalars
    "sqlalchemy.ext.asyncio.async_scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.stream_scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.stream_scalars
    "sqlalchemy.ext.asyncio.AsyncSession.stream_scalars") - streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a streaming [`AsyncResult`](#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a stream of scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: an [`AsyncScalarResult`](#sqlalchemy.ext.asyncio.AsyncScalarResult "sqlalchemy.ext.asyncio.AsyncScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    - main documentation for scalars'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncSession.scalars()`](#sqlalchemy.ext.asyncio.AsyncSession.scalars "sqlalchemy.ext.asyncio.AsyncSession.scalars")
    - non streaming version'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: Reference to the underlying [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") this [`AsyncSession`](#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") proxies requests towards.
  prefs: []
  type: TYPE_NORMAL
- en: This instance can be used as an event target.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using events with the asyncio extension](#asyncio-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for the ORM [`SessionTransaction`](../session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: This object is provided so that a transaction-holding object for the [`AsyncSession.begin()`](#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") may be returned.
  prefs: []
  type: TYPE_NORMAL
- en: The object supports both explicit calls to [`AsyncSessionTransaction.commit()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit") and [`AsyncSessionTransaction.rollback()`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback"), as well as use as
    an async context manager.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[commit()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.commit), [rollback()](#sqlalchemy.ext.asyncio.AsyncSessionTransaction.rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.asyncio.AsyncSessionTransaction`](#sqlalchemy.ext.asyncio.AsyncSessionTransaction
    "sqlalchemy.ext.asyncio.AsyncSessionTransaction") (`sqlalchemy.ext.asyncio.base.ReversibleProxy`,
    `sqlalchemy.ext.asyncio.base.StartableContext`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: Commit this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: Roll back this [`AsyncTransaction`](#sqlalchemy.ext.asyncio.AsyncTransaction
    "sqlalchemy.ext.asyncio.AsyncTransaction").
  prefs: []
  type: TYPE_NORMAL
