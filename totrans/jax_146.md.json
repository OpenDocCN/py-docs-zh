["```py\njax.experimental.pjit.pjit(fun, in_shardings=UnspecifiedValue, out_shardings=UnspecifiedValue, static_argnums=None, static_argnames=None, donate_argnums=None, donate_argnames=None, keep_unused=False, device=None, backend=None, inline=False, abstracted_axes=None)\n```", "```py\n>>> import jax\n>>> import jax.numpy as jnp\n>>> import numpy as np\n>>> from jax.sharding import Mesh, PartitionSpec\n>>> from jax.experimental.pjit import pjit\n>>>\n>>> x = jnp.arange(8, dtype=jnp.float32)\n>>> f = pjit(lambda x: jax.numpy.convolve(x, jnp.asarray([0.5, 1.0, 0.5]), 'same'),\n...         in_shardings=None, out_shardings=PartitionSpec('devices'))\n>>> with Mesh(np.array(jax.devices()), ('devices',)):\n...   print(f(x))  \n[ 0.5  2\\.   4\\.   6\\.   8\\.  10\\.  12\\.  10\\. ] \n```"]