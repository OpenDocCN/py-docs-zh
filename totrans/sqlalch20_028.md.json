["```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_id = mapped_column(Integer, nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\"version_id_col\": version_id}\n```", "```py\nUPDATE  user  SET  version_id=:version_id,  name=:name\nWHERE  user.id  =  :user_id  AND  user.version_id  =  :user_version_id\n-- {\"name\": \"new name\", \"version_id\": 2, \"user_id\": 1, \"user_version_id\": 1}\n```", "```py\nimport uuid\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_uuid = mapped_column(String(32), nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\n        \"version_id_col\": version_uuid,\n        \"version_id_generator\": lambda version: uuid.uuid4().hex,\n    }\n```", "```py\nfrom sqlalchemy import FetchedValue\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    xmin = mapped_column(\"xmin\", String, system=True, server_default=FetchedValue())\n\n    __mapper_args__ = {\"version_id_col\": xmin, \"version_id_generator\": False}\n```", "```py\nINSERT  INTO  \"user\"  (name)  VALUES  (%(name)s)  RETURNING  \"user\".id,  \"user\".xmin\n-- {'name': 'ed'}\n```", "```py\nINSERT  INTO  \"user\"  (name)  VALUES  (%(name)s)\n-- {'name': 'ed'}\n\nSELECT  \"user\".version_id  AS  user_version_id  FROM  \"user\"  where\n\"user\".id  =  :param_1\n-- {\"param_1\": 1}\n```", "```py\nimport uuid\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_uuid = mapped_column(String(32), nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\"version_id_col\": version_uuid, \"version_id_generator\": False}\n\nu1 = User(name=\"u1\", version_uuid=uuid.uuid4())\n\nsession.add(u1)\n\nsession.commit()\n\nu1.name = \"u2\"\nu1.version_uuid = uuid.uuid4()\n\nsession.commit()\n```", "```py\n# will leave version_uuid unchanged\nu1.name = \"u3\"\nsession.commit()\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_id = mapped_column(Integer, nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\"version_id_col\": version_id}\n```", "```py\nUPDATE  user  SET  version_id=:version_id,  name=:name\nWHERE  user.id  =  :user_id  AND  user.version_id  =  :user_version_id\n-- {\"name\": \"new name\", \"version_id\": 2, \"user_id\": 1, \"user_version_id\": 1}\n```", "```py\nimport uuid\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_uuid = mapped_column(String(32), nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\n        \"version_id_col\": version_uuid,\n        \"version_id_generator\": lambda version: uuid.uuid4().hex,\n    }\n```", "```py\nfrom sqlalchemy import FetchedValue\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    xmin = mapped_column(\"xmin\", String, system=True, server_default=FetchedValue())\n\n    __mapper_args__ = {\"version_id_col\": xmin, \"version_id_generator\": False}\n```", "```py\nINSERT  INTO  \"user\"  (name)  VALUES  (%(name)s)  RETURNING  \"user\".id,  \"user\".xmin\n-- {'name': 'ed'}\n```", "```py\nINSERT  INTO  \"user\"  (name)  VALUES  (%(name)s)\n-- {'name': 'ed'}\n\nSELECT  \"user\".version_id  AS  user_version_id  FROM  \"user\"  where\n\"user\".id  =  :param_1\n-- {\"param_1\": 1}\n```", "```py\nimport uuid\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_uuid = mapped_column(String(32), nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\"version_id_col\": version_uuid, \"version_id_generator\": False}\n\nu1 = User(name=\"u1\", version_uuid=uuid.uuid4())\n\nsession.add(u1)\n\nsession.commit()\n\nu1.name = \"u2\"\nu1.version_uuid = uuid.uuid4()\n\nsession.commit()\n```", "```py\n# will leave version_uuid unchanged\nu1.name = \"u3\"\nsession.commit()\n```"]