["```py\nclass Story\n```", "```py\n__init__(self, html=None, user_css=None, em=12, archive=None)\n```", "```py\nplace(where)\n```", "```py\ndraw(dev, matrix=None)\n```", "```py\nelement_positions(function, args=None)\n```", "```py\nreset()\n```", "```py\nbody\n```", "```py\nwrite(writer, rectfn, positionfn=None, pagefn=None)\n```", "```py\nstatic write_stabilized(writer, contentfn, rectfn, user_css=None, em=12, positionfn=None, pagefn=None, archive=None, add_header_ids=True)\n```", "```py\nwrite_with_links(rectfn, positionfn=None, pagefn=None)\n```", "```py\nstatic write_stabilized_with_links(contentfn, rectfn, user_css=None, em=12, positionfn=None, pagefn=None, archive=None, add_header_ids=True)\n```", "```py\nclass FitResult\n```", "```py\nfit(self, fn, pmin=None, pmax=None, delta=0.001, verbose=False)\n```", "```py\nfit_scale(self, rect, scale_min=0, scale_max=None, delta=0.001, verbose=False)\n```", "```py\nfit_height(self, width, height_min=0, height_max=None, origin=(0, 0), delta=0.001, verbose=False)\n```", "```py\nfit_width(self, height, width_min=0, width_max=None, origin=(0, 0), delta=0.001, verbose=False)\n```", "```py\nHTML = \"\"\"\n<html>\n <head></head>\n <body>\n <h1>Header level 1</h1>\n <h2>Header level 2</h2>\n <p>Hello MuPDF!</p>\n </body>\n</html>\n\"\"\"\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # size of a page\nWHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches\nstory =  pymupdf.Story(html=HTML)  # make the story\nwriter = pymupdf.DocumentWriter(\"test.pdf\")  # make the writer\npno = 0 # current page number\nmore = 1  # will be set to 0 when done\nwhile more:  # loop until all story content is processed\n    dev = writer.begin_page(MEDIABOX)  # make a device to write on the page\n    more, filled = story.place(WHERE)  # compute content positions on page\n    story.element_positions(recorder, {\"page\": pno})  # provide page number in addition\n    story.draw(dev)\n    writer.end_page()\n    pno += 1  # increase page number\nwriter.close()  # close output file\n\ndef recorder(elpos):\n    pass \n```", "```py\nHTML = \"\"\"\n<html>\n <head></head>\n <body>\n <h1>Header level 1</h1>\n <h2>Header level 2</h2>\n <p>Hello MuPDF!</p>\n </body>\n</html>\n\"\"\"\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # size of a page\nWHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches\nstory =  pymupdf.Story(html=HTML)  # make the story\nwriter = pymupdf.DocumentWriter(\"test.pdf\")  # make the writer\npno = 0 # current page number\nmore = 1  # will be set to 0 when done\nwhile more:  # loop until all story content is processed\n    dev = writer.begin_page(MEDIABOX)  # make a device to write on the page\n    more, filled = story.place(WHERE)  # compute content positions on page\n    story.element_positions(recorder, {\"page\": pno})  # provide page number in addition\n    story.draw(dev)\n    writer.end_page()\n    pno += 1  # increase page number\nwriter.close()  # close output file\n\ndef recorder(elpos):\n    pass \n```"]