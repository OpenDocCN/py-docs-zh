- en: 0.8 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.8 更新日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_08.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_08.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_08.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_08.html)
- en: 0.8.7
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.7
- en: 'Released: July 22, 2014'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年7月22日
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询的急加载中的一个错误，即在与多态加载一起使用时，跨多态子类边界的长链急加载会失败，无法在链中找到子类链接，导致在[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上出现缺失属性名称的错误。
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个错误，即[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")函数会掩盖应该在映射器配置期间由于用户错误引发的AttributeErrors或KeyErrors。对于属性/键错误的捕获已经更具体，不包括配置步骤。
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: sql
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和其他[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类的错误，即直接将类型与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联会导致在发出事件（如创建事件）时Hang住[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")。
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义操作符加上[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")系统中的一个错误，在使用变体时与[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")结合使用时，当使用比较运算符时会出现MRO错误。
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了INSERT..FROM SELECT构造中的一个错误，即从UNION选择时，会将联合包装在一个匿名（例如未标记的）子查询中。
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")在应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空表达式时产生空的WHERE子句的错误。现在与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")一致。
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: postgresql
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型添加了`hashable=False`标志，这是为了允许ORM在请求混合列/实体列表中的ORM映射的HSTORE列时跳过尝试“哈希”它。补丁由Gunnlaugur
    Þór Briem提供。
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“disconnect”消息“connection has been closed unexpectedly”。这似乎与较新版本的SSL有关。感谢Antti
    Haapala的拉取请求。
- en: mysql
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL错误2014“commands out of sync”似乎是在现代MySQL-Python版本中作为ProgrammingError而不是OperationalError引发的；现在在OperationalError和ProgrammingError中都检查了所有测试“is
    disconnect”的MySQL错误代码。
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: '**[mysql] [bug]**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在索引的`mysql_length`参数上添加列名时需要具有相同引号引用才能被识别的错误。修复使引号变为可选，但也为那些使用此解决方法的人提供了旧的行为以实现向后兼容。
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对反映包含KEY_BLOCK_SIZE的索引的表的支持，使用等号。感谢Sean McGivern的拉取请求。
- en: mssql
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将语句编码添加到“SET IDENTITY_INSERT”语句中，当在IDENTITY列中插入显式INSERT时，以支持在不支持unicode语句的驱动程序（如pyodbc
    + unix + py2k）上使用非ascii表标识符。
- en: '**[mssql] [bug]**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server pyodbc方言中，修复了`description_encoding`方言参数的实现，当未明确设置时，会导致在包含其他编码名称的结果集中无法正确解析cursor.description。这个参数在未来不应该再需要。
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: misc
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [declarative]**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问`__mapper_args__`字典时，从声明性mixin或抽象类中复制，以便声明性本身对此字典所做的修改不会与其他映射冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，用本地类/表正式映射到的列替换其中的列。
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，即[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未报告`setdefault()`字典操作的更改事件。
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")未返回现有值或新值的错误（此错误未在任何0.8版本中发布）。感谢Thomas
    Hervé的拉取请求。
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: 0.8.6
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.6
- en: 'Released: March 28, 2014'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年3月28日
- en: general
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [bug]**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Adjusted `setup.py` file to support the possible future removal of the `setuptools.Feature`
    extension from setuptools. If this keyword isn’t present, the setup will still
    succeed with setuptools rather than falling back to distutils. C extension building
    can be disabled now also by setting the DISABLE_SQLALCHEMY_CEXT environment variable.
    This variable works whether or not setuptools is even available.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`setup.py`文件，以支持将来可能从setuptools中删除`setuptools.Feature`扩展。如果不存在此关键字，设置仍将成功使用setuptools而不是退回到distutils。现在还可以通过设置DISABLE_SQLALCHEMY_CEXT环境变量来禁用C扩展构建。无论setuptools是否可用，此变量都有效。
- en: 'References: [#2986](https://www.sqlalchemy.org/trac/ticket/2986)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2986](https://www.sqlalchemy.org/trac/ticket/2986)
- en: orm
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where changing the primary key of an object, then marking it for
    DELETE would fail to target the correct row for DELETE.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的错误，即更改对象的主键，然后将其标记为DELETE将无法针对DELETE定位到正确的行。
- en: 'References: [#3006](https://www.sqlalchemy.org/trac/ticket/3006)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3006](https://www.sqlalchemy.org/trac/ticket/3006)
- en: '**[orm] [bug]**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8.3 as a result of [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") wouldn’t work on a query that only had a [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") entry but no other entities.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.8.3中的回归，导致[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在只有一个[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")条目但没有其他实体的查询上无法工作的问题。
- en: 'References: [#2995](https://www.sqlalchemy.org/trac/ticket/2995)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2995](https://www.sqlalchemy.org/trac/ticket/2995)
- en: '**[orm] [bug]**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved an error message which would occur if a query() were made against a
    non-selectable, such as a [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column"), and then an attempt was made to use
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    such that the “left” side would be determined as `None` and then fail. This condition
    is now detected explicitly.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了一个错误消息，如果对非可选择的查询（例如[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")）进行查询，然后尝试使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")使“左”侧被确定为`None`，然后失败。现在明确检测到这种情况。
- en: '**[orm] [bug]**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed stale names from `sqlalchemy.orm.interfaces.__all__` and refreshed with
    current names, so that an `import *` from this module again works.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `sqlalchemy.orm.interfaces.__all__` 中删除了陈旧的名称，并使用当前名称进行刷新，以便再次从此模块进行 `import
    *`。
- en: 'References: [#2975](https://www.sqlalchemy.org/trac/ticket/2975)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2975](https://www.sqlalchemy.org/trac/ticket/2975)
- en: sql
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct where the “type” of essentially
    the first SQL expression would be applied as the “comparison type” to a compared
    tuple value; this has the effect in some cases of an inappropriate “type coercion”
    occurring, such as when a tuple that has a mix of String and Binary values improperly
    coerces target values to Binary even though that’s not what they are on the left
    side. [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    now expects heterogeneous types within its list of values.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    构造中的 bug，在这里，实质上第一个 SQL 表达式的“类型”会被应用为比较元组值的“比较类型”；在某些情况下，这会导致不适当的“类型转换”发生，例如当元组中混合了字符串和二进制值时，错误地将目标值转换为二进制，即使左侧的类型并非如此。[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 现在期望其值列表中存在异构类型。
- en: 'References: [#2977](https://www.sqlalchemy.org/trac/ticket/2977)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2977](https://www.sqlalchemy.org/trac/ticket/2977)
- en: postgresql
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Enabled “sane multi-row count” checking for the psycopg2 DBAPI, as this seems
    to be supported as of psycopg2 2.0.9.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用了对 psycopg2 DBAPI 的“合理的多行计数”检查，因为这似乎是在 psycopg2 2.0.9 中支持的。
- en: '**[postgresql] [bug]**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by release 0.8.5 / 0.9.3’s compatibility enhancements
    where index reflection on PostgreSQL versions specific to only the 8.1, 8.2 series
    again broke, surrounding the ever problematic int2vector type. While int2vector
    supports array operations as of 8.1, apparently it only supports CAST to a varchar
    as of 8.3.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于版本 0.8.5 / 0.9.3 的兼容性增强引起的回归，其中仅针对 8.1、8.2 系列的 PostgreSQL 版本的索引反射再次中断，涉及到一直问题多多的
    int2vector 类型。尽管 int2vector 从 8.1 开始支持数组操作，但显然只能从 8.3 开始支持 CAST 到 varchar。
- en: 'References: [#3000](https://www.sqlalchemy.org/trac/ticket/3000)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3000](https://www.sqlalchemy.org/trac/ticket/3000)
- en: misc
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension as well as [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") where the change event would not be
    propagated if the attribute had been reassigned to itself.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的 bug 以及 [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 中的 bug，在这里，如果属性已被重新分配给自身，则更改事件将不会传播。
- en: 'References: [#2997](https://www.sqlalchemy.org/trac/ticket/2997)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2997](https://www.sqlalchemy.org/trac/ticket/2997)
- en: 0.8.5
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.5
- en: 'Released: February 19, 2014'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014 年 2 月 19 日
- en: orm
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") would fail to consistently raise the [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") that invokes when called on a query with
    existing criterion, when the given identity is already present in the identity
    map.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    在查询已存在条件的查询时无法始终引发 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") 的错误的 bug，当给定的标识已经存在于标识映射中时。
- en: 'References: [#2951](https://www.sqlalchemy.org/trac/ticket/2951)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2951](https://www.sqlalchemy.org/trac/ticket/2951)
- en: '**[orm] [bug]**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed error message when an iterator object is passed to [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") or similar, where the error would fail to render
    on string formatting. Pullreq courtesy Kyle Stark.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当将迭代器对象传递给 [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 或类似函数时出现的错误消息，其中错误会在字符串格式化时无法呈现的 bug。来自 Kyle Stark
    的 Pullreq。
- en: '**[orm] [bug]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An adjustment to the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") strategy which ensures that the query runs after
    the loading process has begun; this is so that the subqueryload takes precedence
    over other loaders that may be hitting the same attribute due to other eager/noload
    situations at the wrong time.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")策略进行了调整，确保查询在加载过程开始后运行；这样，subqueryload优先于其他加载器运行，这可能是由于其他贪婪/无加载情况在错误的时间命中相同属性。
- en: 'References: [#2887](https://www.sqlalchemy.org/trac/ticket/2887)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2887](https://www.sqlalchemy.org/trac/ticket/2887)
- en: '**[orm] [bug]**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug when using joined table inheritance from a table to a select/alias
    on the base, where the PK columns were also not same named; the persistence system
    would fail to copy primary key values from the base table to the inherited table
    upon INSERT.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当从表继承到基表的选择/别名时使用联接表继承时，PK列也不是同名时，持久性系统将无法在INSERT时将主键值从基表复制到继承表。
- en: 'References: [#2885](https://www.sqlalchemy.org/trac/ticket/2885)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2885](https://www.sqlalchemy.org/trac/ticket/2885)
- en: '**[orm] [bug]**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    will raise an informative error message when the columns/attribute (names) passed
    don’t resolve to a Column or mapped attribute (such as an erroneous tuple); previously
    raised an unbound local.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的列/属性（名称）不解析为列或映射属性（例如错误的元组）时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")将引发一个信息性错误消息；先前引发了一个未绑定的本地错误。
- en: 'References: [#2889](https://www.sqlalchemy.org/trac/ticket/2889)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2889](https://www.sqlalchemy.org/trac/ticket/2889)
- en: engine
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug] [pool]**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed a critical regression caused by [#2880](https://www.sqlalchemy.org/trac/ticket/2880)
    where the newly concurrent ability to return connections from the pool means that
    the “first_connect” event is now no longer synchronized either, thus leading to
    dialect mis-configurations under even minimal concurrency situations.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2880](https://www.sqlalchemy.org/trac/ticket/2880)引起的关键回归问题，其中新的并发能力从池中返回连接意味着“first_connect”事件现在也不再同步，因此在即使是最小并发情况下也会导致方言配置错误。
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)，[#2964](https://www.sqlalchemy.org/trac/ticket/2964)
- en: sql
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where calling [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with an empty list or tuple would raise
    an IndexError. It now produces an empty insert construct as would be the case
    with an empty dictionary.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即使用空列表或元组调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")将引发IndexError。现在会生成一个空的插入构造，就像使用空字典的情况一样。
- en: 'References: [#2944](https://www.sqlalchemy.org/trac/ticket/2944)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2944](https://www.sqlalchemy.org/trac/ticket/2944)
- en: '**[sql] [bug]**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") would go into an endless loop
    if erroneously passed a column expression whose comparator included the `__getitem__()`
    method, such as a column that uses the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果错误地传递了包含`__getitem__()`方法的列表达式的比较器的列表达式，例如使用[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型的列，[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")将进入无限循环。
- en: 'References: [#2957](https://www.sqlalchemy.org/trac/ticket/2957)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2957](https://www.sqlalchemy.org/trac/ticket/2957)
- en: '**[sql] [bug]**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a primary key column that has a Sequence on it, yet the column
    is not the “auto increment” column, either because it has a foreign key constraint
    or `autoincrement=False` set, would attempt to fire the Sequence on INSERT for
    backends that don’t support sequences, when presented with an INSERT missing the
    primary key value. This would take place on non-sequence backends like SQLite,
    MySQL.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即具有Sequence的主键列，但该列不是“自动增量”列，要么因为它有外键约束，要么设置了`autoincrement=False`，在没有主键值的情况下尝试在不支持序列的后端上插入时，会尝试触发Sequence。这将发生在像SQLite、MySQL这样的非序列后端上。
- en: 'References: [#2896](https://www.sqlalchemy.org/trac/ticket/2896)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2896](https://www.sqlalchemy.org/trac/ticket/2896)
- en: '**[sql] [bug]**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method where the order of the
    given names would not be taken into account when generating the INSERT statement,
    thus producing a mismatch versus the column names in the given SELECT statement.
    Also noted that [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") implies that Python-side insert
    defaults cannot be used, since the statement has no VALUES clause.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")方法的错误，其中给定名称的顺序在生成INSERT语句时不会被考虑，因此与给定SELECT语句中的列名不匹配。还指出[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")暗示不能使用Python端的插入默认值，因为该语句没有VALUES子句。
- en: 'References: [#2895](https://www.sqlalchemy.org/trac/ticket/2895)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2895](https://www.sqlalchemy.org/trac/ticket/2895)
- en: '**[sql] [enhancement]**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [enhancement]**'
- en: The exception raised when a [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is present in a compiled statement
    without a value now includes the key name of the bound parameter in the error
    message.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当编译语句中存在一个未赋值的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")时引发的异常现在在错误消息中包含绑定参数的键名。
- en: postgresql
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added an additional message to psycopg2 disconnect detection, “could not send
    data to server”, which complements the existing “could not receive data from server”
    and has been observed by users.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个额外的消息到psycopg2断开检测，“无法发送数据到服务器”，这与现有的“无法从服务器接收数据”相辅相成，并已被用户观察到。
- en: 'References: [#2936](https://www.sqlalchemy.org/trac/ticket/2936)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2936](https://www.sqlalchemy.org/trac/ticket/2936)
- en: '**[postgresql] [bug]**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Support has been improved for PostgreSQL reflection behavior on very old (pre
    8.1) versions of PostgreSQL, and potentially other PG engines such as Redshift
    (assuming Redshift reports the version as < 8.1). The query for “indexes” as well
    as “primary keys” relies upon inspecting a so-called “int2vector” datatype, which
    refuses to coerce to an array prior to 8.1 causing failures regarding the “ANY()”
    operator used in the query. Extensive googling has located the very hacky, but
    recommended-by-PG-core-developer query to use when PG version < 8.1 is in use,
    so index and primary key constraint reflection now work on these versions.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于非常古老的（8.1版本之前）PostgreSQL版本以及潜在的其他PG引擎（假设Redshift将版本报告为<8.1），已改进对PostgreSQL反射行为的支持，查询“索引”和“主键”依赖于检查所谓的“int2vector”数据类型，该数据类型在8.1之前拒绝强制转换为数组，导致查询中使用的“ANY()”运算符失败。通过广泛的搜索找到了非常hacky但被PG核心开发人员推荐的查询，用于在使用PG版本<8.1时使用，因此现在在这些版本上可以正常工作索引和主键约束反射。
- en: '**[postgresql] [bug]**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised this very old issue where the PostgreSQL “get primary key” reflection
    query were updated to take into account primary key constraints that were renamed;
    the newer query fails on very old versions of PostgreSQL such as version 7, so
    the old query is restored in those cases when server_version_info < (8, 0) is
    detected.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了这个非常古老的问题，其中PostgreSQL的“获取主键”反射查询已更新以考虑已重命名的主键约束；新查询在非常古老的PostgreSQL版本（如版本7）上失败，因此在检测到server_version_info
    < (8, 0)的情况下，在这些情况下恢复旧查询。
- en: 'References: [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: mysql
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added new MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") which includes fractional seconds support;
    also added fractional seconds support to [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP"). DBAPI support is limited, though fractional
    seconds are known to be supported by MySQL Connector/Python. Patch courtesy Geert
    JM Vanderkelen.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的MySQL特定的[`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")，其中包括分数秒支持；还向[`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP")添加了分数秒支持。尽管DBAPI支持有限，但MySQL Connector/Python已知支持分数秒。补丁由Geert
    JM Vanderkelen提供。
- en: 'References: [#2941](https://www.sqlalchemy.org/trac/ticket/2941)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2941](https://www.sqlalchemy.org/trac/ticket/2941)
- en: '**[mysql] [bug]**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for the `PARTITION BY` and `PARTITIONS` MySQL table keywords,
    specified as `mysql_partition_by='value'` and `mysql_partitions='value'` to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Marcus McCurdy.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 `PARTITION BY` 和 `PARTITIONS` MySQL 表关键字的支持，指定为 `mysql_partition_by='value'`
    和 `mysql_partitions='value'` 给 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). 感谢 Marcus McCurdy 提交的 Pullreq。
- en: 'References: [#2966](https://www.sqlalchemy.org/trac/ticket/2966)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2966](https://www.sqlalchemy.org/trac/ticket/2966)
- en: '**[mysql] [bug]**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed bug which prevented MySQLdb-based dialects (e.g. pymysql) from working
    in Py3K, where a check for “connection charset” would fail due to Py3K’s more
    strict value comparison rules. The call in question wasn’t taking the database
    version into account in any case as the server version was still None at that
    point, so the method overall has been simplified to rely upon connection.character_set_name().
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止基于 MySQLdb 的方言（例如 pymysql）在 Py3K 中工作的错误，其中一个对“连接字符集”的检查会由于 Py3K 的更严格的值比较规则而失败。在这种情况下，调用并没有考虑到数据库版本，因为服务器版本在那时仍然是
    None，因此该方法总体上已经简化为依赖于 connection.character_set_name()。
- en: 'References: [#2933](https://www.sqlalchemy.org/trac/ticket/2933)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2933](https://www.sqlalchemy.org/trac/ticket/2933)
- en: '**[mysql] [bug]**'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Some missing methods added to the cymysql dialect, including _get_server_version_info()
    and _detect_charset(). Pullreq courtesy Hajime Nakagami.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 cymysql 方言中添加了一些缺失的方法，包括 _get_server_version_info() 和 _detect_charset()。感谢
    Hajime Nakagami 提交的 Pullreq。
- en: sqlite
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Restored a change that was missed in the backport of unique constraint reflection
    to 0.8, where [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") with SQLite would fail if reserved keywords
    were included in the names of columns. Pull request courtesy Roman Podolyaka.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在将唯一约束反射回到 0.8 时被遗漏的更改，其中包含 SQLite 的 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")，如果列名中包含保留关键字，则会失败。感谢 Roman Podolyaka 提交的
    Pullreq。
- en: mssql
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [firebird]**'
- en: The “asdecimal” flag used with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type will now work with Firebird as well as the mssql+pyodbc
    dialects; previously the decimal conversion was not occurring.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    类型的 “asdecimal” 标志现在将与 Firebird 以及 mssql+pyodbc 方言一起工作；以前的十进制转换未发生。
- en: '**[mssql] [bug] [pymssql]**'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [pymssql]**'
- en: Added “Net-Lib error during Connection reset by peer” message to the list of
    messages checked for “disconnect” within the pymssql dialect. Courtesy John Anderson.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 “Net-Lib error during Connection reset by peer” 消息添加到 pymssql 方言中检查的消息列表中，以检查“disconnect”。感谢
    John Anderson。
- en: misc
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [py3k]**'
- en: Fixed Py3K bug where a missing import would cause “literal binary” mode to fail
    to import “util.binary_type” when rendering a bound parameter. 0.9 handles this
    differently. Pull request courtesy Andreas Zeidler.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Py3K 中的错误，其中缺少的导入将导致在呈现绑定参数时“literal binary”模式无法导入“util.binary_type”。0.9
    处理方式不同。感谢 Andreas Zeidler 提交的 Pullreq。
- en: '**[bug] [firebird]**'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: The firebird dialect will quote identifiers which begin with an underscore.
    Courtesy Treeve Jelbert.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: firebird 方言将引用以下划线开头的标识符。感谢 Treeve Jelbert。
- en: 'References: [#2897](https://www.sqlalchemy.org/trac/ticket/2897)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2897](https://www.sqlalchemy.org/trac/ticket/2897)
- en: '**[bug] [firebird]**'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Fixed bug in Firebird index reflection where the columns within the index were
    not sorted correctly; they are now sorted in order of RDB$FIELD_POSITION.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Firebird 索引反射中的错误，其中索引中的列没有正确排序；它们现在按照 RDB$FIELD_POSITION 的顺序排序。
- en: '**[bug] [declarative]**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [declarative]**'
- en: Error message when a string arg sent to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which doesn’t resolve to a class or mapper has
    been corrected to work the same way as when a non-string arg is received, which
    indicates the name of the relationship which had the configurational error.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将无法解析为类或映射器的字符串参数发送到 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 时，错误消息已校正为与接收到非字符串参数时相同的方式，该方式指示了具有配置错误的关系的名称。
- en: 'References: [#2888](https://www.sqlalchemy.org/trac/ticket/2888)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2888](https://www.sqlalchemy.org/trac/ticket/2888)
- en: 0.8.4
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.4
- en: 'Released: December 8, 2013'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013 年 12 月 8 日
- en: orm
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a regression introduced by [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where the EXISTS query being generated would produce a “columns being replaced”
    warning for a statement with two same-named columns, as the internal SELECT wouldn’t
    have use_labels set.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#2818](https://www.sqlalchemy.org/trac/ticket/2818) 引入的回归，其中生成的 EXISTS
    查询会为具有两个同名列的语句产生“columns being replaced”警告，因为内部的 SELECT 没有设置 use_labels。
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: engine
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A DBAPI that raises an error on `connect()` which is not a subclass of dbapi.Error
    (such as `TypeError`, `NotImplementedError`, etc.) will propagate the exception
    unchanged. Previously, the error handling specific to the `connect()` routine
    would both inappropriately run the exception through the dialect’s [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") routine as well as wrap it in a [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError"). It is now propagated unchanged in the same way as
    occurs within the execute process.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `connect()` 上引发错误的 DBAPI（如 `TypeError`、`NotImplementedError` 等）如果不是 dbapi.Error
    的子类，则会以原样传播异常。先前，针对 `connect()` 例程的特定错误处理既会不适当地通过方言的 [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") 例程运行异常，也会将其包装在一个 [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError") 中。现在它会像在执行过程中一样保持不变地传播。
- en: 'References: [#2881](https://www.sqlalchemy.org/trac/ticket/2881)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2881](https://www.sqlalchemy.org/trac/ticket/2881)
- en: '**[engine] [bug] [pool]**'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    has been enhanced to not block new connection attempts when an existing connection
    attempt is blocking. Previously, the production of new connections was serialized
    within the block that monitored overflow; the overflow counter is now altered
    within its own critical section outside of the connection process itself.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    已经改进，不再在现有连接尝试阻塞时阻止新的连接尝试。先前，新连接的生成在监视溢出的块内串行化；现在，溢出计数器在连接过程本身之外的自己的临界区内进行修改。'
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)
- en: '**[engine] [bug] [pool]**'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Made a slight adjustment to the logic which waits for a pooled connection to
    be available, such that for a connection pool with no timeout specified, it will
    every half a second break out of the wait to check for the so-called “abort” flag,
    which allows the waiter to break out in case the whole connection pool was dumped;
    normally the waiter should break out due to a notify_all() but it’s possible this
    notify_all() is missed in very slim cases. This is an extension of logic first
    introduced in 0.8.0, and the issue has only been observed occasionally in stress
    tests.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对等待池化连接可用性的逻辑进行了微小调整，对于未指定超时的连接池，它将每隔半秒中断一次等待，以检查所谓的“abort”标志，这允许等待者在整个连接池被转储的情况下中断；通常情况下，等待者应该由于
    notify_all() 而中断，但在极少数情况下可能会错过这个 notify_all()。这是从 0.8.0 版本首次引入的逻辑的扩展，该问题只在压力测试中偶尔观察到。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where SQL statement would be improperly ASCII-encoded when a pre-DBAPI
    [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    were raised within [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), causing encoding errors for non-ASCII
    statements. The stringification now remains within Python unicode thus avoiding
    encoding errors.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当在 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 内引发一个预先的 DBAPI [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") 时，SQL 语句会被错误地 ASCII 编码，导致非 ASCII 语句的编码错误。现在字符串化仍然保持在
    Python unicode 中，从而避免了编码错误。
- en: 'References: [#2871](https://www.sqlalchemy.org/trac/ticket/2871)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2871](https://www.sqlalchemy.org/trac/ticket/2871)
- en: sql
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “unique constraint” reflection, via the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method. Thanks
    for Roman Podolyaka for the patch.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“唯一约束”反射的支持，通过 [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") 方法。感谢 Roman Podolyaka
    提供的补丁。
- en: 'References: [#1443](https://www.sqlalchemy.org/trac/ticket/1443)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1443](https://www.sqlalchemy.org/trac/ticket/1443)
- en: postgresql
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where index reflection would mis-interpret indkey values when using
    the pypostgresql adapter, which returns these values as lists vs. psycopg2’s return
    type of string.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当使用 pypostgresql 适配器时，索引反射会错误地解释 indkey 值，该适配器将这些值作为列表返回，而不是 psycopg2
    返回的字符串类型。
- en: 'References: [#2855](https://www.sqlalchemy.org/trac/ticket/2855)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2855](https://www.sqlalchemy.org/trac/ticket/2855)
- en: mssql
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug introduced in 0.8.0 where the `DROP INDEX` statement for an index
    in MSSQL would render incorrectly if the index were in an alternate schema; the
    schemaname/tablename would be reversed. The format has been also been revised
    to match current MSSQL documentation. Courtesy Derek Harland.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.8.0 中引入的 bug，在 MSSQL 中，如果索引在备用模式中，则 `DROP INDEX` 语句会错误地渲染; schemaname/tablename
    会被颠倒。格式也已经被修改以匹配当前的 MSSQL 文档。感谢 Derek Harland。
- en: oracle
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-02396 “maximum idle time” error code to list of “is disconnect” codes
    with cx_oracle.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ORA-02396 “最大空闲时间”错误代码添加到了 cx_oracle 的“断开连接”代码列表中。
- en: 'References: [#2864](https://www.sqlalchemy.org/trac/ticket/2864)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2864](https://www.sqlalchemy.org/trac/ticket/2864)
- en: '**[oracle] [bug]**'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle `VARCHAR` types given with no length (e.g. for a `CAST`
    or similar) would incorrectly render `None CHAR` or similar.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在 Oracle 中，给定没有长度的 `VARCHAR` 类型（例如，用于 `CAST` 或类似操作）会错误地渲染为 `None CHAR`
    或类似内容。
- en: 'References: [#2870](https://www.sqlalchemy.org/trac/ticket/2870)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2870](https://www.sqlalchemy.org/trac/ticket/2870)
- en: misc
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug which prevented the `serializer` extension from working correctly
    with table or column names that contain non-ASCII characters.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 阻止了 `serializer` 扩展在包含非 ASCII 字符的表或列名中正常工作。
- en: 'References: [#2869](https://www.sqlalchemy.org/trac/ticket/2869)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2869](https://www.sqlalchemy.org/trac/ticket/2869)
- en: 0.8.3
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.3
- en: 'Released: October 26, 2013'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013 年 10 月 26 日
- en: orm
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new option to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`. This enables the subquery
    eager loader strategy to apply a DISTINCT to the innermost SELECT subquery, to
    assist in the case where duplicate rows are generated by the innermost query which
    corresponds to this relationship (there’s not yet a general solution to the issue
    of dupe rows within subquery eager loading, however, when joins outside of the
    innermost subquery produce dupes). When the flag is set to `True`, the DISTINCT
    is rendered unconditionally, and when it is set to `None`, DISTINCT is rendered
    if the innermost relationship targets columns that do not comprise a full primary
    key. The option defaults to False in 0.8 (e.g. off by default in all cases), None
    in 0.9 (e.g. automatic by default). Thanks to Alexander Koval for help with this.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新选项到[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`。这使得子查询的贪婪加载策略对内部的 SELECT
    子查询应用 DISTINCT，在这种关系对应的内部查询生成重复行的情况下有所帮助（目前还没有一个通用的解决方案来解决子查询贪婪加载中的重复行问题，然而，当内部子查询之外的连接产生重复行时）。当标志设置为`True`时，DISTINCT
    无条件渲染，当设置为`None`时，如果内部关系的目标列不构成完整的主键，则渲染 DISTINCT。该选项在 0.8 版本中默认为 False（例如，在所有情况下默认关闭），在
    0.9 版本中为 None（例如，默认情况下自动化）。感谢 Alexander Koval 对此的帮助。
- en: See also
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
- en: 'References: [#2836](https://www.sqlalchemy.org/trac/ticket/2836)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2836](https://www.sqlalchemy.org/trac/ticket/2836)
- en: '**[orm] [bug]**'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表仪器化无法正确表示`[0:0]`的切片的错误，特别是在使用关联代理时可能会发生。由于Python集合的某些怪癖，该问题在Python 3中更有可能发生，而不是在Python
    2中。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.11
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using an annotation such as [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") or [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") before association with a parent [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") could produce issues related to the parent table not
    rendering within joins, due to the inherent copy operation performed by an annotation.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与父[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联之前使用类似[`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote")或[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")的注释在关联之前，可能会导致父表由于注释执行的固有复制操作而未在联接中呈现的问题。
- en: 'References: [#2813](https://www.sqlalchemy.org/trac/ticket/2813)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2813](https://www.sqlalchemy.org/trac/ticket/2813)
- en: '**[orm] [bug]**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") failed to work correctly without any WHERE criterion.
    Courtesy Vladimir Magamedov.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在没有任何WHERE条件的情况下无法正常工作的错误。感谢Vladimir Magamedov。
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug]**'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Backported a change from 0.9 whereby the iteration of a hierarchy of mappers
    used in polymorphic inheritance loads is sorted, which allows the SELECT statements
    generated for polymorphic queries to have deterministic rendering, which in turn
    helps with caching schemes that cache on the SQL string itself.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.9版本中借鉴了一个变化，即在多态继承加载中使用的映射层次结构的迭代是有序的，这使得为多态查询生成的SELECT语句具有确定性呈现，进而有助于缓存方案，这些方案在SQL字符串本身上进行缓存。
- en: 'References: [#2779](https://www.sqlalchemy.org/trac/ticket/2779)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2779](https://www.sqlalchemy.org/trac/ticket/2779)
- en: '**[orm] [bug]**'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a potential issue in an ordered sequence implementation used by the ORM
    to iterate mapper hierarchies; under the Jython interpreter this implementation
    wasn’t ordered, even though cPython and PyPy maintained ordering.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM用于迭代映射层次结构的有序序列实现中的潜在问题；在Jython解释器下，该实现未被排序，尽管cPython和PyPy保持了排序。
- en: 'References: [#2794](https://www.sqlalchemy.org/trac/ticket/2794)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2794](https://www.sqlalchemy.org/trac/ticket/2794)
- en: '**[orm] [bug]**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM-level event registration where the “raw” or “propagate” flags
    could potentially be mis-configured in some “unmapped base class” configurations.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM级事件注册中“原始”或“传播”标志在某些“未映射的基类”配置中可能被错误配置的潜在问题。
- en: 'References: [#2786](https://www.sqlalchemy.org/trac/ticket/2786)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2786](https://www.sqlalchemy.org/trac/ticket/2786)
- en: '**[orm] [bug]**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A performance fix related to the usage of the [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") option when loading mapped entities. The function overhead
    of applying a per-object deferred callable to an instance at load time was significantly
    higher than that of just loading the data from the row (note that `defer()` is
    meant to reduce DB/network overhead, not necessarily function call count); the
    function call overhead is now less than that of loading data from the column in
    all cases. There is also a reduction in the number of “lazy callable” objects
    created per load from N (total deferred values in the result) to 1 (total number
    of deferred cols).
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于使用[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")选项加载映射实体时的性能修复。在加载时将每个对象的延迟调用函数应用到实例的函数开销显著高于仅从行加载数据的函数开销（请注意，`defer()`旨在减少DB/network开销，而不一定是函数调用次数）；现在在所有情况下，函数调用开销都小于从列加载数据的开销。每次从N（结果中的总延迟值）加载时，还会减少创建的“懒惰可调用”对象的数量到1（延迟列的总数）。
- en: 'References: [#2778](https://www.sqlalchemy.org/trac/ticket/2778)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2778](https://www.sqlalchemy.org/trac/ticket/2778)
- en: '**[orm] [bug]**'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug whereby attribute history functions would fail when an object we moved
    from “persistent” to “pending” using the [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") function, for operations involving collection-based
    backrefs.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史函数在使用[`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient")函数将对象从“持久”移动到“挂起”时会失败的bug，特别是涉及基于集合的反向引用的操作。
- en: 'References: [#2773](https://www.sqlalchemy.org/trac/ticket/2773)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2773](https://www.sqlalchemy.org/trac/ticket/2773)
- en: orm declarative
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明式
- en: '**[orm] [declarative] [feature]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明式] [特性]**'
- en: Added a convenience class decorator [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative"), is a wrapper for [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") which allows an existing base class to be applied
    using a nifty class-decorated approach.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的类装饰器[`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative")，它是[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")的包装器，允许使用一种巧妙的类装饰器方法应用现有的基类。
- en: examples
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: Improved the examples in `examples/generic_associations`, including that `discriminator_on_association.py`
    makes use of single table inheritance do the work with the “discriminator”. Also
    added a true “generic foreign key” example, which works similarly to other popular
    frameworks in that it uses an open-ended integer to point to any other table,
    foregoing traditional referential integrity. While we don’t recommend this pattern,
    information wants to be free.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了`examples/generic_associations`中的示例，包括`discriminator_on_association.py`使用单表继承来处理“鉴别器”。还添加了一个真正的“通用外键”示例，它类似于其他流行框架，使用开放的整数指向任何其他表，放弃了传统的引用完整性。虽然我们不推荐这种模式，但信息想要自由。
- en: '**[examples] [bug]**'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Added “autoincrement=False” to the history table created in the versioning example,
    as this table shouldn’t have autoinc on it in any case, courtesy Patrick Schmid.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本控制示例中创建的历史表中添加了“autoincrement=False”，因为这个表在任何情况下都不应该具有自增属性，感谢Patrick Schmid。
- en: engine
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: '`repr()` for the [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will now conceal the password using asterisks. Courtesy Gunnlaugur Þór Briem.'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`repr()`现在会使用星号隐藏密码。感谢Gunnlaugur Þór Briem。'
- en: 'References: [#2821](https://www.sqlalchemy.org/trac/ticket/2821)'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2821](https://www.sqlalchemy.org/trac/ticket/2821)
- en: '**[engine] [bug]**'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数现在使用的正则表达式解析ipv6地址，例如用方括号括起来。'
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: '**[engine] [bug] [oracle]**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [Oracle]**'
- en: Dialect.initialize() is not called a second time if an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is recreated, due to a disconnect error. This fixes
    a particular issue in the Oracle 8 dialect, but in general the dialect.initialize()
    phase should only be once per dialect.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果重新创建[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")时，不会第二次调用Dialect.initialize()，因为出现了断开连接错误。这修复了Oracle
    8方言中的一个特定问题，但通常来说，Dialect.initialize()阶段应该只执行一次。
- en: 'References: [#2776](https://www.sqlalchemy.org/trac/ticket/2776)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2776](https://www.sqlalchemy.org/trac/ticket/2776)
- en: '**[engine] [bug] [pool]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [池]**'
- en: Fixed bug where [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") would lose the correct checked out count if an existing
    pooled connection failed to reconnect after an invalidate or recycle event.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")在现有池化连接在无效或重置事件后未能重新连接时会丢失正确的已检出计数的错误。
- en: 'References: [#2772](https://www.sqlalchemy.org/trac/ticket/2772)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2772](https://www.sqlalchemy.org/trac/ticket/2772)
- en: sql
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [feature]**'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [特性]**'
- en: Added new method to the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). Given a list of columns and a
    selectable, renders `INSERT INTO (table) (columns) SELECT ..`.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造的新方法[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")。给定列的列表和可选择项，呈现`INSERT INTO (table)
    (columns) SELECT ..`。
- en: 'References: [#722](https://www.sqlalchemy.org/trac/ticket/722)'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#722](https://www.sqlalchemy.org/trac/ticket/722)
- en: '**[sql] [feature]**'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs will now interpret ORM entities as target tables to be operated upon,
    e.g.:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")、[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")和[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造现在将解释ORM实体作为要操作的目标表，例如：'
- en: '[PRE0]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**[sql] [bug]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的回归，其中如果CTE在多个FROM子句中被引用，则其名称可能无法正确引用。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式系统中的错误，如果CTE仅用作`alias()`构造，则不会使用WITH关键字呈现。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的错误，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会传播。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: '**[sql] [bug]**'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") would not interpret ORM elements with
    a `__clause_element__()` method properly.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")无法正确解释具有`__clause_element__()`方法的ORM元素的错误。
- en: 'References: [#2849](https://www.sqlalchemy.org/trac/ticket/2849)'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2849](https://www.sqlalchemy.org/trac/ticket/2849)
- en: '**[sql] [bug]**'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    types now bypass any custom (e.g. TypeDecorator) type in use when producing the
    CHECK constraint for the “non native” type. This so that the custom type isn’t
    involved in the expression within the CHECK, since this expression is against
    the “impl” value and not the “decorated” value.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型现在在生成“非本机”类型的CHECK约束时绕过任何自定义（例如TypeDecorator）类型。这样，自定义类型不会参与CHECK中的表达式，因为此表达式针对“impl”值而不是“decorated”值。'
- en: 'References: [#2842](https://www.sqlalchemy.org/trac/ticket/2842)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2842](https://www.sqlalchemy.org/trac/ticket/2842)
- en: '**[sql] [bug]**'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The `.unique` flag on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") could be produced as `None` if it was generated from
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that didn’t specify `unique` (where it defaults to `None`). The flag will now
    always be `True` or `False`.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")上的`.unique`标志可能会在从未指定`unique`（默认为`None`）的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")生成时产生`None`。该标志现在将始终为`True`或`False`。'
- en: 'References: [#2825](https://www.sqlalchemy.org/trac/ticket/2825)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2825](https://www.sqlalchemy.org/trac/ticket/2825)
- en: '**[sql] [bug]**'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in default compiler plus those of postgresql, mysql, and mssql to
    ensure that any literal SQL expression values are rendered directly as literals,
    instead of as bound parameters, within a CREATE INDEX statement. This also changes
    the rendering scheme for other DDL such as constraints.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了默认编译器以及postgresql、mysql和mssql的bug，以确保任何字面SQL表达式值在CREATE INDEX语句中直接呈现为字面值，而不是作为绑定参数。这也改变了其他DDL的呈现方案，如约束。
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[sql] [bug]**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    that is made to refer to itself in its FROM clause, typically via in-place mutation,
    will raise an informative error message rather than causing a recursion overflow.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其FROM子句中使自身引用的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，通常通过就地突变，将引发信息性错误消息，而不会导致递归溢出。
- en: 'References: [#2815](https://www.sqlalchemy.org/trac/ticket/2815)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2815](https://www.sqlalchemy.org/trac/ticket/2815)
- en: '**[sql] [bug]**'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Non-working “schema” argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") is deprecated; raises a warning. Removed in 0.9.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")上的非工作“schema”参数已被弃用；引发警告。在0.9中移除。'
- en: 'References: [#2831](https://www.sqlalchemy.org/trac/ticket/2831)'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2831](https://www.sqlalchemy.org/trac/ticket/2831)
- en: '**[sql] [bug]**'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using the `column_reflect` event to change the `.key` of the
    incoming [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would prevent primary key constraints, indexes, and foreign key constraints from
    being correctly reflected.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`column_reflect`事件更改传入[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.key`会阻止主键约束、索引和外键约束被正确反映的bug。
- en: 'References: [#2811](https://www.sqlalchemy.org/trac/ticket/2811)'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2811](https://www.sqlalchemy.org/trac/ticket/2811)
- en: '**[sql] [bug]**'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operator added in 0.8 now
    properly produces the negation of the expression “IN” returns when used against
    an empty collection.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.8中添加的[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")运算符现在正确地生成了对空集合使用时“IN”返回的表达式的否定。
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where the expression system relied upon the `str()` form of a some
    expressions when referring to the `.c` collection on a `select()` construct, but
    the `str()` form isn’t available since the element relies on dialect-specific
    compilation constructs, notably the `__getitem__()` operator as used with a PostgreSQL
    `ARRAY` element. The fix also adds a new exception class [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") which is raised in those cases where
    a compiler is asked to compile something it doesn’t know how to.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式系统依赖于在`select()`构造上引用`.c`集合时一些表达式的`str()`形式，但由于元素依赖于特定于方言的编译构造，特别是与PostgreSQL
    `ARRAY`元素一起使用的`__getitem__()`运算符，因此`str()`形式不可用。该修复还添加了一个新的异常类[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")，在编译器被要求编译它不知道如何处理的内容时引发。
- en: 'References: [#2780](https://www.sqlalchemy.org/trac/ticket/2780)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2780](https://www.sqlalchemy.org/trac/ticket/2780)
- en: postgresql
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Removed a 128-character truncation from the reflection of the server default
    for a column; this code was original from PG system views which truncated the
    string for readability.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从列的服务器默认值反射中删除了128个字符的截断；这段代码最初来自PG系统视图，用于截断字符串以便阅读。
- en: 'References: [#2844](https://www.sqlalchemy.org/trac/ticket/2844)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2844](https://www.sqlalchemy.org/trac/ticket/2844)
- en: '**[postgresql] [bug]**'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Parenthesis will be applied to a compound SQL expression as rendered in the
    column list of a CREATE INDEX statement.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 括号将应用于在CREATE INDEX语句的列列表中呈现的复合SQL表达式。
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[postgresql] [bug]**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL version strings that had a prefix preceding the words
    “PostgreSQL” or “EnterpriseDB” would not parse. Courtesy Scott Schaefer.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即具有在“PostgreSQL”或“EnterpriseDB”之前的前缀的PostgreSQL版本字符串将无法解析。感谢Scott Schaefer。
- en: 'References: [#2819](https://www.sqlalchemy.org/trac/ticket/2819)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2819](https://www.sqlalchemy.org/trac/ticket/2819)
- en: mysql
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL版本5.5、5.6的保留字更新，感谢Hanno Schlichting。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: '**[mysql] [bug]**'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The change in [#2721](https://www.sqlalchemy.org/trac/ticket/2721), which is
    that the `deferrable` keyword of [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is silently ignored on the MySQL backend,
    will be reverted as of 0.9; this keyword will now render again, raising errors
    on MySQL as it is not understood - the same behavior will also apply to the `initially`
    keyword. In 0.8, the keywords will remain ignored but a warning is emitted. Additionally,
    the `match` keyword now raises a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") on 0.9 and emits a warning on 0.8; this keyword
    is not only silently ignored by MySQL but also breaks the ON UPDATE/ON DELETE
    options.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[#2721](https://www.sqlalchemy.org/trac/ticket/2721)中的更改是，[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的`deferrable`关键字在MySQL后端上被静默忽略，将在0.9版本中恢复；此关键字现在将再次渲染，在MySQL上引发错误，因为它不被理解
    - 相同的行为也将适用于`initially`关键字。在0.8中，这些关键字将继续被忽略，但会发出警告。此外，`match`关键字现在在0.9上引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，在0.8上发出警告；这个关键字不仅被MySQL静默忽略，还会破坏ON UPDATE/ON DELETE选项。'
- en: To use a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") that does not render or renders differently
    on MySQL, use a custom compilation option. An example of this usage has been added
    to the documentation, see [MySQL / MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys).
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用在MySQL上不渲染或以不同方式渲染的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，请使用自定义编译选项。文档中已添加了此用法示例，请参见[MySQL /
    MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys)。
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)���[#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL-connector dialect now allows options in the create_engine query string
    to override those defaults set up in the connect, including “buffered” and “raise_on_warnings”.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL-connector方言现在允许在create_engine查询字符串中覆盖在连接中设置的默认值，包括“buffered”和“raise_on_warnings”。
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: sqlite
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The newly added SQLite DATETIME arguments storage_format and regexp apparently
    were not fully implemented correctly; while the arguments were accepted, in practice
    they would have no effect; this has been fixed.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增的SQLite DATETIME参数storage_format和regexp显然没有完全正确实现；虽然参数被接受，但实际上它们没有任何效果；这个问题已经修复。
- en: 'References: [#2781](https://www.sqlalchemy.org/trac/ticket/2781)'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2781](https://www.sqlalchemy.org/trac/ticket/2781)
- en: oracle
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle table reflection using synonyms would fail if the synonym
    and the table were in different remote schemas. Patch to fix courtesy Kyle Derr.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即使用同义词进行Oracle表反射时，如果同义词和表位于不同的远程模式中，则会失败。修复补丁由Kyle Derr提供。
- en: 'References: [#2853](https://www.sqlalchemy.org/trac/ticket/2853)'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2853](https://www.sqlalchemy.org/trac/ticket/2853)
- en: misc
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature]**'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature]**'
- en: Added a new flag `system=True` to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which marks the column as a “system” column which
    is automatically made present by the database (such as PostgreSQL `oid` or `xmin`).
    The column will be omitted from the `CREATE TABLE` statement but will otherwise
    be available for querying. In addition, the [`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") construct can be applied to a custom compilation
    rule which allows skipping of columns, by producing a rule that returns `None`.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")添加了一个新标志`system=True`，将列标记为“系统”列，这些列将由数据库自动添加（例如PostgreSQL的`oid`或`xmin`）。该列将在`CREATE
    TABLE`语句中被省略，但仍可用于查询。此外，[`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn")构造可以应用于自定义编译规则，允许跳过列，通过生成返回`None`的规则。
- en: 0.8.2
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.2
- en: 'Released: July 3, 2013'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年7月3日
- en: orm
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new method `Query.select_entity_from()` which will in 0.9 replace part
    of the functionality of [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from"). In 0.8, the two methods perform the same
    function, so that code can be migrated to use the `Query.select_entity_from()`
    method as appropriate. See the 0.9 migration guide for details.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新方法`Query.select_entity_from()`，将在0.9版本中取代[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")的部分功能。在0.8版本中，这两个方法执行相同的功能，因此可以适当地将代码迁移到使用`Query.select_entity_from()`方法。详细信息请参阅0.9迁移指南。
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736)'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)
- en: '**[orm] [bug]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when trying to flush an object of an inherited class where
    the polymorphic discriminator has been assigned to a value that is invalid for
    the class.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试刷新已分配多态鉴别器为无效值的继承类对象时，会发出警告。
- en: 'References: [#2750](https://www.sqlalchemy.org/trac/ticket/2750)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2750](https://www.sqlalchemy.org/trac/ticket/2750)
- en: '**[orm] [bug]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in polymorphic SQL generation where multiple joined-inheritance entities
    against the same base class joined to each other as well would not track columns
    on the base table independently of each other if the string of joins were more
    than two entities long.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多个加入继承实体针对相同基类相互连接时，在连接字符串超过两个实体时，基表上的列不会独立跟踪的多态SQL生成中的错误。
- en: 'References: [#2759](https://www.sqlalchemy.org/trac/ticket/2759)'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2759](https://www.sqlalchemy.org/trac/ticket/2759)
- en: '**[orm] [bug]**'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where sending a composite attribute into [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") would produce a parenthesized expression not
    accepted by some databases.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将复合属性发送到[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")会产生一些数据库不接受的括号表达式的错误。
- en: 'References: [#2754](https://www.sqlalchemy.org/trac/ticket/2754)'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2754](https://www.sqlalchemy.org/trac/ticket/2754)
- en: '**[orm] [bug]**'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the interaction between composite attributes and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. Previously, composite attributes wouldn’t
    work correctly in comparison operations when aliasing was applied.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合属性与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数之间的交互。以前，在应用别名时，复合属性在比较操作中无法正常工作。
- en: 'References: [#2755](https://www.sqlalchemy.org/trac/ticket/2755)'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2755](https://www.sqlalchemy.org/trac/ticket/2755)
- en: '**[orm] [bug] [ext]**'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") didn’t report a change event when `clear()`
    was called.
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")在调用`clear()`时未报告更改事件的错误。
- en: 'References: [#2730](https://www.sqlalchemy.org/trac/ticket/2730)'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2730](https://www.sqlalchemy.org/trac/ticket/2730)
- en: '**[orm] [bug]**'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression caused by [#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    whereby the evaluation invoked by [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") would hit upon unsupported `True` and `False` symbols
    which now appear due to the usage of `IS`.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#2682](https://www.sqlalchemy.org/trac/ticket/2682) 引起的回归问题，即 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 和 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 调用的评估会触发不支持的 `True` 和 `False` 符号，因为现在使用了 `IS`。
- en: 'References: [#2737](https://www.sqlalchemy.org/trac/ticket/2737)'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2737](https://www.sqlalchemy.org/trac/ticket/2737)
- en: '**[orm] [bug]**'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.7 caused by this ticket, which made the check for
    recursion overflow in self-referential eager joining too loose, missing a particular
    circumstance where a subclass had lazy=”joined” or “subquery” configured and the
    load was a “with_polymorphic” against the base.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由此票据引起的 0.7 版本的回归问题已修复，这使得自引用的贪婪连接的递归溢出检查变得太宽松，忽略了一个特定情况，即子类配置了 lazy=”joined”
    或 “subquery”，并且加载是针对基类的“with_polymorphic”。
- en: 'References: [#2481](https://www.sqlalchemy.org/trac/ticket/2481)'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2481](https://www.sqlalchemy.org/trac/ticket/2481)
- en: '**[orm] [bug]**'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.7 where the contextmanager feature of [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") would fail to correctly roll back the transaction
    when a flush error occurred, instead raising its own exception while leaving the
    session still pending a rollback.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.7 版本中引入的回归问题，[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") 的 contextmanager 功能在发生 flush 错误时未能正确回滚事务，而是引发了自己的异常，同时保留了仍处于待回滚状态的会话。
- en: 'References: [#2718](https://www.sqlalchemy.org/trac/ticket/2718)'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2718](https://www.sqlalchemy.org/trac/ticket/2718)
- en: orm declarative
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [feature]**'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: ORM descriptors such as hybrid properties can now be referenced by name in a
    string argument used with `order_by`, `primaryjoin`, or similar in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), in addition to column-bound attributes.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在 `order_by`、`primaryjoin` 或类似情况下使用字符串参数引用 ORM 描述符，例如混合属性，以及与列绑定的属性一样在 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 中使用。
- en: 'References: [#2761](https://www.sqlalchemy.org/trac/ticket/2761)'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2761](https://www.sqlalchemy.org/trac/ticket/2761)
- en: examples
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed an issue with the “versioning” recipe whereby a many-to-one reference
    could produce a meaningless version for the target, even though it was not changed,
    when backrefs were present. Patch courtesy Matt Chisholm.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本控制”配方中的问题，其中当存在反向引用时，一个多对一引用可能会为目标生成一个无意义的版本，即使它没有被更改。由 Matt Chisholm
    提供的补丁。
- en: '**[examples] [bug]**'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a small bug in the dogpile example where the generation of SQL cache keys
    wasn’t applying deduping labels to the statement the same way [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") normally does.
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了狗堆示例中的一个小错误，即 SQL 缓存键的生成未像 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 通常所做的那样对语句应用去重标签。
- en: engine
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the `reset_on_return` argument to various [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementations would not be propagated when the pool
    was regenerated. Courtesy Eevee.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    实现中 `reset_on_return` 参数未在重新生成池时传播的错误。由 Eevee 提供。
- en: '**[engine] [bug] [sybase]**'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [sybase]**'
- en: Fixed a bug where the routine to detect the correct kwargs being sent to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") would fail in some cases, such as with the Sybase
    dialect.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些情况下无法检测到正确的 kwargs 被发送到 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的例程失败的错误，例如在 Sybase 方言中。
- en: 'References: [#2732](https://www.sqlalchemy.org/trac/ticket/2732)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2732](https://www.sqlalchemy.org/trac/ticket/2732)
- en: sql
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Provided a new attribute for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") called [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types"), to make it easier to control
    how comparisons using `==` or `!=` to `None` and boolean types goes about producing
    an `IS` expression, or a plain equality expression with a bound parameter.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")提供了一个名为[`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types")的新属性，以便更容易控制使用`==`或`!=`与`None`和布尔类型进行比较时如何生成`IS`表达式，或者带有绑定参数的普通相等表达式。
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734)，[#2744](https://www.sqlalchemy.org/trac/ticket/2744)
- en: '**[sql] [bug]**'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Multiple fixes to the correlation behavior of [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, first introduced in 0.8.0:'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多个修复针对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造的相关行为，首次引入于0.8.0版本：
- en: To satisfy the use case where FROM entries should be correlated outwards to
    a SELECT that encloses another, which then encloses this one, correlation now
    works across multiple levels when explicit correlation is established via [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate"), provided that the target select
    is somewhere along the chain contained by a WHERE/ORDER BY/columns clause, not
    just nested FROM clauses. This makes [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") act more compatibly to that of 0.7
    again while still maintaining the new “smart” correlation.
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为满足FROM条目应向外部SELECT进行相关的用例，该SELECT包含另一个SELECT，而后者又包含此SELECT，现在当通过[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")建立明确相关性时，相关性现在可以跨多个级别工作，前提是目标SELECT在由WHERE/ORDER
    BY/columns子句包含的链中的某处，而不仅仅是嵌套的FROM子句。这使得[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")再次更加兼容0.7版本，同时仍保持新的“智能”相关性。
- en: When explicit correlation is not used, the usual “implicit” correlation limits
    its behavior to just the immediate enclosing SELECT, to maximize compatibility
    with 0.7 applications, and also prevents correlation across nested FROMs in this
    case, maintaining compatibility with 0.8.0/0.8.1.
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当未使用明确相关性时，“隐式”相关性将其行为限制在仅限于直接封闭的SELECT中，以最大限度地提高与0.7应用程序的兼容性，并且在这种情况下还防止跨嵌套FROM的相关性，保持与0.8.0/0.8.1的兼容性。
- en: The [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method was not preventing
    the given FROM clauses from correlation in all cases, and also would cause FROM
    clauses to be incorrectly omitted entirely (more like what 0.7 would do), this
    has been fixed.
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")方法未在所有情况下阻止给定的FROM子句进行相关，并且还会导致FROM子句被不正确地完全省略（更像是0.7会做的），这已经修复。'
- en: Calling select.correlate_except(None) will enter all FROM clauses into correlation
    as would be expected.
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用select.correlate_except(None)将使所有FROM子句进入相关性，正如预期的那样。
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668)，[#2746](https://www.sqlalchemy.org/trac/ticket/2746)
- en: '**[sql] [bug]**'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby joining a select() of a table “A” with multiple foreign key
    paths to a table “B”, to that table “B”, would fail to produce the “ambiguous
    join condition” error that would be reported if you join table “A” directly to
    “B”; it would instead produce a join condition with multiple criteria.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即将表“A”的select()与多个外键路径连接到表“B”，连接到表“B”时，如果直接将表“A”连接到“B”会报告“模糊连接条件”错误，而不是生成具有多个条件的连接条件。
- en: 'References: [#2738](https://www.sqlalchemy.org/trac/ticket/2738)'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2738](https://www.sqlalchemy.org/trac/ticket/2738)
- en: '**[sql] [bug] [reflection]**'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [reflection]**'
- en: Fixed bug whereby using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") across a remote schema as well as a local
    schema could produce wrong results in the case where both schemas had a table
    of the same name.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在远程模式和本地模式下同时使用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 可能会在两个模式都有相同名称的表时产生错误结果的错误。
- en: 'References: [#2728](https://www.sqlalchemy.org/trac/ticket/2728)'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2728](https://www.sqlalchemy.org/trac/ticket/2728)
- en: '**[sql] [bug]**'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed the “not implemented” `__iter__()` call from the base [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") class, while this was introduced
    in 0.8.0 to prevent an endless, memory-growing loop when one also implements a
    `__getitem__()` method on a custom operator and then calls erroneously `list()`
    on that object, it had the effect of causing column elements to report that they
    were in fact iterable types which then throw an error when you try to iterate.
    There’s no real way to have both sides here so we stick with Python best practices.
    Careful with implementing `__getitem__()` on your custom operators!
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从基础[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 类中删除了“未实现”的`__iter__()`调用，虽然这是在 0.8.0
    中引入的，以防止在自定义运算符上实现`__getitem__()`方法并在该对象上错误调用`list()`时出现无限、内存增长的循环，但它导致列元素报告它们实际上是可迭代类型，然后在尝试迭代时抛出错误。在这里没有真正的方法同时拥有两边，所以我们坚持使用
    Python 最佳实践。在自定义运算符上实现`__getitem__()`时要小心！
- en: 'References: [#2726](https://www.sqlalchemy.org/trac/ticket/2726)'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2726](https://www.sqlalchemy.org/trac/ticket/2726)
- en: '**[sql] [bug] [mssql]**'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mssql]**'
- en: Regression from this ticket caused the unsupported keyword “true” to render,
    added logic to convert this to 1/0 for SQL server.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这个票据中导致的回归导致不支持的关键字“true”被呈现，添加逻辑将其转换为 SQL 服务器的 1/0。
- en: 'References: [#2682](https://www.sqlalchemy.org/trac/ticket/2682)'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
- en: postgresql
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL 9.2 range types has been added. Currently, no type translation
    is provided, so works directly with strings or psycopg2 2.5 range extension types
    at the moment. Patch courtesy Chris Withers.
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 9.2 范围类型的支持。目前，不提供类型转换，因此目前直接使用字符串或 psycopg2 2.5 范围扩展类型。补丁由
    Chris Withers 提供。
- en: '**[postgresql] [feature]**'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation when using the psycopg2 DBAPI. The
    keyword is available via the `isolation_level` execution option. Patch courtesy
    Roman Podolyaka.
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 DBAPI 时，添加了对“AUTOCOMMIT”隔离的支持。该关键字可通过`isolation_level`执行选项使用。补丁由
    Roman Podolyaka 提供。
- en: 'References: [#2072](https://www.sqlalchemy.org/trac/ticket/2072)'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2072](https://www.sqlalchemy.org/trac/ticket/2072)
- en: '**[postgresql] [bug]**'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The behavior of [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") has been simplified on the PostgreSQL dialect
    to no longer inject a hardcoded `::timestamp` or similar cast into the given expression,
    as this interfered with types such as timezone-aware datetimes, but also does
    not appear to be at all necessary with modern versions of psycopg2.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言上，[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") 的行为已经简化，不再向给定表达式注入硬编码的`::timestamp`或类似转换，因为这会干扰诸如时区感知日期时间之类的类型，但在现代版本的
    psycopg2 中似乎也不是必要的。
- en: 'References: [#2740](https://www.sqlalchemy.org/trac/ticket/2740)'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2740](https://www.sqlalchemy.org/trac/ticket/2740)
- en: '**[postgresql] [bug]**'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in HSTORE type where keys/values that contained backslashed quotes
    would not be escaped correctly when using the “non native” (i.e. non-psycopg2)
    means of translating HSTORE data. Patch courtesy Ryan Kelly.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型中包含反斜杠引号的键/值在使用“非本地”（即非-psycopg2）方式转换 HSTORE 数据时无法正确转义的错误。补丁由 Ryan
    Kelly 提供。
- en: 'References: [#2766](https://www.sqlalchemy.org/trac/ticket/2766)'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2766](https://www.sqlalchemy.org/trac/ticket/2766)
- en: '**[postgresql] [bug]**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the order of columns in a multi-column PostgreSQL index would
    be reflected in the wrong order. Courtesy Roman Podolyaka.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多列 PostgreSQL 索引中列的顺序会反映错误顺序的错误。由 Roman Podolyaka 提供。
- en: 'References: [#2767](https://www.sqlalchemy.org/trac/ticket/2767)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2767](https://www.sqlalchemy.org/trac/ticket/2767)
- en: '**[postgresql] [bug]**'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the HSTORE type to correctly encode/decode for unicode. This is always
    on, as the hstore is a textual type, and matches the behavior of psycopg2 when
    using Python 3. Courtesy Dmitry Mugtasimov.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型以正确对 unicode 进行编码/解码。这始终是开启的，因为 hstore 是一种文本类型，并且与使用 Python 3 时
    psycopg2 的行为相匹配。感谢 Dmitry Mugtasimov。
- en: 'References: [#2735](https://www.sqlalchemy.org/trac/ticket/2735)'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2735](https://www.sqlalchemy.org/trac/ticket/2735)
- en: mysql
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The `mysql_length` parameter used with [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") can now be passed as a dictionary of column names/lengths,
    for use with composite indexes. Big thanks to Roman Podolyaka for the patch.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将用于[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的`mysql_length`参数作为列名/长度的字典传递，用于复合索引。非常感谢
    Roman Podolyaka 提供的补丁。
- en: 'References: [#2704](https://www.sqlalchemy.org/trac/ticket/2704)'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2704](https://www.sqlalchemy.org/trac/ticket/2704)
- en: '**[mysql] [bug]**'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug when using multi-table UPDATE where a supplemental table is a SELECT
    with its own bound parameters, where the positioning of the bound parameters would
    be reversed versus the statement itself when using MySQL’s special syntax.
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用多表 UPDATE 时的错误，其中一个辅助表是带有自己绑定参数的 SELECT，当使用 MySQL 的特殊语法时，绑定参数的位置与语句本身相反。
- en: 'References: [#2768](https://www.sqlalchemy.org/trac/ticket/2768)'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2768](https://www.sqlalchemy.org/trac/ticket/2768)
- en: '**[mysql] [bug]**'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another conditional to the `mysql+gaerdbms` dialect to detect so-called
    “development” mode, where we should use the `rdbms_mysqldb` DBAPI. Patch courtesy
    Brett Slatkin.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`mysql+gaerdbms`方言中添加了另一个条件，以检测所谓的“开发”模式，在这种模式下，我们应该使用`rdbms_mysqldb` DBAPI。感谢
    Brett Slatkin 提供补丁。
- en: 'References: [#2715](https://www.sqlalchemy.org/trac/ticket/2715)'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2715](https://www.sqlalchemy.org/trac/ticket/2715)
- en: '**[mysql] [bug]**'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The `deferrable` keyword argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") will not render the `DEFERRABLE` keyword
    on the MySQL dialect. For a long time we left this in place because a non-deferrable
    foreign key would act very differently than a deferrable one, but some environments
    just disable FKs on MySQL, so we’ll be less opinionated here.
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")和[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")上的`deferrable`关键字参数将不会在 MySQL 方言上呈现`DEFERRABLE`关键字。长期以来，我们一直保留了这个设置，因为不可推迟的外键会与可推迟的外键表现得截然不同，但是某些环境只是在
    MySQL 上禁用了 FKs，所以我们在这里将不那么坚持己见。
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721)'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)
- en: '**[mysql] [bug]**'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated mysqlconnector dialect to check for disconnect based on the apparent
    string message sent in the exception; tested against mysqlconnector 1.0.9.
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 mysqlconnector 方言，以根据异常中发送的明显字符串消息来检查断开连接；针对 mysqlconnector 1.0.9 进行了测试。
- en: sqlite
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") to the list of type names that can be reflected by
    the SQLite dialect; courtesy Russell Stuart.
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT")添加到可以由 SQLite 方言反射的类型名称列表中；感谢 Russell Stuart。
- en: 'References: [#2764](https://www.sqlalchemy.org/trac/ticket/2764)'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2764](https://www.sqlalchemy.org/trac/ticket/2764)
- en: mssql
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: When querying the information schema on SQL Server 2000, removed a CAST call
    that was added in 0.8.1 to help with driver issues, which apparently is not compatible
    on 2000. The CAST remains in place for SQL Server 2005 and greater.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询 SQL Server 2000 上的信息模式时，删除了在 0.8.1 版中添加的 CAST 调用，以帮助解决驱动程序问题，显然这不兼容于 2000。对于
    SQL Server 2005 及更高版本，保留了 CAST。
- en: 'References: [#2747](https://www.sqlalchemy.org/trac/ticket/2747)'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2747](https://www.sqlalchemy.org/trac/ticket/2747)
- en: misc
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [firebird]**'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: Added new flag `retaining=True` to the kinterbasdb and fdb dialects. This controls
    the value of the `retaining` flag sent to the `commit()` and `rollback()` methods
    of the DBAPI connection. Due to historical concerns, this flag defaults to `True`
    in 0.8.2, however in 0.9.0b1 this flag defaults to `False`.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将新标志`retaining=True`添加到 kinterbasdb 和 fdb 方言中。这控制了发送到 DBAPI 连接的`commit()`和`rollback()`方法的`retaining`标志的值。由于历史问题，这个标志在
    0.8.2 中默认为`True`，但是在 0.9.0b1 中，这个标志默认为`False`。
- en: 'References: [#2763](https://www.sqlalchemy.org/trac/ticket/2763)'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2763](https://www.sqlalchemy.org/trac/ticket/2763)
- en: '**[bug] [firebird]**'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Type lookup when reflecting the Firebird types LONG and INT64 has been fixed
    so that LONG is treated as INTEGER, INT64 treated as BIGINT, unless the type has
    a “precision” in which case it’s treated as NUMERIC. Patch courtesy Russell Stuart.
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射Firebird类型LONG和INT64时的类型查找，现在LONG被视为INTEGER，INT64被视为BIGINT，除非类型具有“精度”，否则将被视为NUMERIC。补丁由Russell
    Stuart提供。
- en: 'References: [#2757](https://www.sqlalchemy.org/trac/ticket/2757)'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2757](https://www.sqlalchemy.org/trac/ticket/2757)
- en: '**[bug] [ext]**'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug whereby if a composite type were set up with a function instead of
    a class, the mutable extension would trip up when it tried to check that column
    for being a [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") (which it isn’t). Courtesy asldevi.
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果使用函数而不是类来设置复合类型，则当可变扩展尝试检查该列是否为[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")时，可变扩展会出错（实际上不是）。感谢asldevi。
- en: '**[requirements]**'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[requirements]**'
- en: The Python [mock](https://pypi.org/project/mock) library is now required in
    order to run the unit test suite. While part of the standard library as of Python
    3.3, previous Python installations will need to install this in order to run unit
    tests or to use the `sqlalchemy.testing` package for external dialects.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在运行单元测试套件需要Python的[mock](https://pypi.org/project/mock)库。虽然作为Python 3.3的一部分已经包含在标准库中，但之前的Python安装需要安装此库才能运行单元测试或使用`sqlalchemy.testing`包来支持外部方言。
- en: 0.8.1
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.1
- en: 'Released: April 27, 2013'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年4月27日
- en: orm
  id: totrans-459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a convenience method to Query that turns a query into an EXISTS subquery
    of the form `EXISTS (SELECT 1 FROM ... WHERE ...)`.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了一个方便的方法，将查询转换为`EXISTS (SELECT 1 FROM ... WHERE ...)`的子查询形式。
- en: 'References: [#2673](https://www.sqlalchemy.org/trac/ticket/2673)'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2673](https://www.sqlalchemy.org/trac/ticket/2673)
- en: '**[orm] [bug]**'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Fixed bug when a query of the form: `query(SubClass).options(subqueryload(Baseclass.attrname))`,
    where `SubClass` is a joined inh of `BaseClass`, would fail to apply the `JOIN`
    inside the subquery on the attribute load, producing a cartesian product. The
    populated results still tended to be correct as additional rows are just ignored,
    so this issue may be present as a performance degradation in applications that
    are otherwise working correctly.'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个查询的bug形式：`query(SubClass).options(subqueryload(Baseclass.attrname))`，其中`SubClass`是`BaseClass`的一个连接继承，将无法在属性加载时应用`JOIN`，从而产生笛卡尔积。填充的结果仍然往往是正确的，因为额外的行只是被忽略，所以这个问题可能会作为性能下降存在于其他方面正常工作的应用程序中。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.11
- en: 'References: [#2699](https://www.sqlalchemy.org/trac/ticket/2699)'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2699](https://www.sqlalchemy.org/trac/ticket/2699)
- en: '**[orm] [bug]**'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in unit of work whereby a joined-inheritance subclass could insert
    the row for the “sub” table before the parent table, if the two tables had no
    ForeignKey constraints set up between them.
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个工作单元中的bug，即如果两个表之间没有设置外键约束，那么一个继承子类可能会在父表之前插入“子”表的行。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.11
- en: 'References: [#2689](https://www.sqlalchemy.org/trac/ticket/2689)'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2689](https://www.sqlalchemy.org/trac/ticket/2689)
- en: '**[orm] [bug]**'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixes to the `sqlalchemy.ext.serializer` extension, including that the “id”
    passed from the pickler is turned into a string to prevent against bytes being
    parsed on Py3K, as well as that `relationship()` and `orm.join()` constructs are
    now properly serialized.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.serializer`扩展的问题，包括从pickler传递的“id”被转换为字符串以防止在Py3K上解析字节，以及`relationship()`和`orm.join()`构造现在正确序列化。
- en: 'References: [#2698](https://www.sqlalchemy.org/trac/ticket/2698)'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2698](https://www.sqlalchemy.org/trac/ticket/2698)
- en: '**[orm] [bug]**'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A significant improvement to the inner workings of query.join(), such that the
    decisionmaking involved on how to join has been dramatically simplified. New test
    cases now pass such as multiple joins extending from the middle of an already
    complex series of joins involving inheritance and such. Joining from deeply nested
    subquery structures is still complicated and not without caveats, but with these
    improvements the edge cases are hopefully pushed even farther out to the edges.
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.join()的内部工作机制进行了重大改进，简化了如何进行连接的决策过程。现在新的测试用例通过了，例如从已经涉及继承的复杂连接系列的中间进行多个连接。从深度嵌套的子查询结构进行连接仍然很复杂，不是没有注意事项，但通过这些改进，边缘情况希望被推到更远的边缘。
- en: 'References: [#2714](https://www.sqlalchemy.org/trac/ticket/2714)'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2714](https://www.sqlalchemy.org/trac/ticket/2714)
- en: '**[orm] [bug]**'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a conditional to the unpickling process for ORM mapped objects, such that
    if the reference to the object were lost when the object was pickled, we don’t
    erroneously try to set up _sa_instance_state - fixes a NoneType error.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ORM映射对象的反序列化过程添加了条件，以便在对象被序列化时丢失对对象的引用时，我们不会错误地尝试设置_sa_instance_state - 修复了NoneType错误。
- en: '**[orm] [bug]**'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where many-to-many relationship with uselist=False would fail to delete
    the association row and raise an error if the scalar attribute were set to None.
    This was a regression introduced by the changes for [#2229](https://www.sqlalchemy.org/trac/ticket/2229).
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当uselist=False的多对多关系尝试删除关联行并且标量属性设置为None时，会引发错误。这是由于[#2229](https://www.sqlalchemy.org/trac/ticket/2229)的更改引入的回归。
- en: 'References: [#2710](https://www.sqlalchemy.org/trac/ticket/2710)'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2710](https://www.sqlalchemy.org/trac/ticket/2710)
- en: '**[orm] [bug]**'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of instance management regarding the creation of strong
    references within the Session; an object will no longer have an internal reference
    cycle created if it’s in the transient state or moves into the detached state
    - the strong ref is created only when the object is attached to a Session and
    is removed when the object is detached. This makes it somewhat safer for an object
    to have a __del__() method, even though this is not recommended, as relationships
    with backrefs produce cycles too. A warning has been added when a class with a
    __del__() method is mapped.
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了实例管理在Session中创建强引用时的行为；如果对象处于瞬时状态或进入分离状态，将不再创建内部引用循环 - 只有当对象附加到Session时才会创建强引用，并在对象分离时删除。即使不建议这样做，这使得对象具有__del__()方法更加安全，因为具有反向引用的关系也会产生循环。当映射具有__del__()方法的类时，会添加警告。
- en: 'References: [#2708](https://www.sqlalchemy.org/trac/ticket/2708)'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2708](https://www.sqlalchemy.org/trac/ticket/2708)
- en: '**[orm] [bug]**'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby ORM would run the wrong kind of query when refreshing an inheritance-mapped
    class where the superclass was mapped to a non-Table object, like a custom join()
    or a select(), running a query that assumed a hierarchy that’s mapped to individual
    Table-per-class.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即当刷新一个继承映射类时，ORM会运行错误类型的查询，其中超类映射到非Table对象，如自定义join()或select()，运行一个假设映射到单独Table-per-class层次结构的查询。
- en: 'References: [#2697](https://www.sqlalchemy.org/trac/ticket/2697)'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2697](https://www.sqlalchemy.org/trac/ticket/2697)
- en: '**[orm] [bug]**'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed __repr__() on mapper property constructs to work before the object is
    initialized, so that Sphinx builds with recent Sphinx versions can read them.
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对象初始化之前，mapper属性构造中的__repr__()方法无法正常工作的问题，因此最近的Sphinx版本可以读取它们。
- en: orm declarative
  id: totrans-490
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed indirect regression regarding [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table"), where since it considers the current class’
    `__table__`, was sensitive to when it was called. This is 0.7’s behavior also,
    but in 0.7 things tended to “work out” within events like `__mapper_args__()`.
    [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table") now only considers superclasses, so should
    return the same answer regarding the current class no matter when it’s called
    (obviously assuming the state of the superclass).
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table")的间接回归问题，因为它考虑了当前类的`__table__`，所以在调用时敏感。这也是0.7的行为，但在0.7中，事情往往会在`__mapper_args__()`等事件中“解决”。[`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table")现在只考虑超类，因此无论何时调用它，都应该返回关于当前类的相同答案（显然假设超类的状态）。
- en: 'References: [#2656](https://www.sqlalchemy.org/trac/ticket/2656)'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2656](https://www.sqlalchemy.org/trac/ticket/2656)
- en: examples
  id: totrans-494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a long-standing bug in the caching example, where the limit/offset parameter
    values wouldn’t be taken into account when computing the cache key. The _key_from_query()
    function has been simplified to work directly from the final compiled statement
    in order to get at both the full statement as well as the fully processed parameter
    list.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了缓存示例中长期存在的一个bug，即在计算缓存键时，limit/offset参数值不会被考虑。 _key_from_query() 函数已经简化，直接从最终编译的语句中工作，以便获取完整的语句以及完全处理过的参数列表。
- en: sql
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Loosened the check on dialect-specific argument names passed to Table(); since
    we want to support external dialects and also want to support args without a certain
    dialect being installed, it only checks the format of the arg now, rather than
    looking for that dialect in sqlalchemy.dialects.
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了传递给Table()的特定于方言的参数名称的检查；由于我们希望支持外部方言，并且希望支持未安装某个特定方言的参数，因此现在只检查参数的格式，而不再在sqlalchemy.dialects中查找该方言。
- en: '**[sql] [bug] [mysql]**'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: Fully implemented the IS and IS NOT operators with regards to the True/False
    constants. An expression like `col.is_(True)` will now render `col IS true` on
    the target platform, rather than converting the True/ False constant to an integer
    bound parameter. This allows the `is_()` operator to work on MySQL when given
    True/False constants.
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全实现了IS和IS NOT运算符与True/False常量相关。例如，`col.is_(True)`表达式现在将在目标平台上呈现`col IS true`，而不是将True/False常量转换为整数绑定参数。这使得`is_()`运算符在给定True/False常量时可以在MySQL上工作。
- en: 'References: [#2682](https://www.sqlalchemy.org/trac/ticket/2682)'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
- en: '**[sql] [bug]**'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A major fix to the way in which a select() object produces labeled columns when
    apply_labels() is used; this mode produces a SELECT where each column is labeled
    as in <tablename>_<columnname>, to remove column name collisions for a multiple
    table select. The fix is that if two labels collide when combined with the table
    name, i.e. “foo.bar_id” and “foo_bar.id”, anonymous aliasing will be applied to
    one of the dupes. This allows the ORM to handle both columns independently; previously,
    0.7 would in some cases silently emit a second SELECT for the column that was
    “duped”, and in 0.8 an ambiguous column error would be emitted. The “keys” applied
    to the .c. collection of the select() will also be deduped, so that the “column
    being replaced” warning will no longer emit for any select() that specifies use_labels,
    though the dupe key will be given an anonymous label which isn’t generally user-friendly.
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用apply_labels()时select()对象生成带标签列的方式进行了重大修复；这种模式生成一个SELECT，其中每列都标记为<tablename>_<columnname>，以消除多表选择的列名冲突。修复的地方是，如果两个标签与表名组合时发生冲突，即“foo.bar_id”和“foo_bar.id”，则将对其中一个重复项应用匿名别名。这允许ORM独立处理两个列；以前，0.7在某些情况下会静默地为“重复项”发出第二个SELECT，并且在0.8中会发出模棱两可的列错误。应用于select()的.c.集合的“键”也将被去重，因此对于指定了use_labels的任何select()，将不再为“被替换的列”警告发出，尽管重复键将被赋予一个通常不友好的匿名标签。
- en: 'References: [#2702](https://www.sqlalchemy.org/trac/ticket/2702)'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2702](https://www.sqlalchemy.org/trac/ticket/2702)
- en: '**[sql] [bug]**'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where disconnect detect on error would raise an attribute error if
    the error were being raised after the Connection object had already been closed.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在连接对象已经关闭后，如果错误在断开连接时检测到，则会引发属性错误。
- en: 'References: [#2691](https://www.sqlalchemy.org/trac/ticket/2691)'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2691](https://www.sqlalchemy.org/trac/ticket/2691)
- en: '**[sql] [bug]**'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reworked internal exception raises that emit a rollback() before re-raising,
    so that the stack trace is preserved from sys.exc_info() before entering the rollback.
    This so that the traceback is preserved when using coroutine frameworks which
    may have switched contexts before the rollback function returns.
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了在重新引发之前发出rollback()的内部异常引发，以便在进入rollback之前保留sys.exc_info()的堆栈跟踪。这样，在使用可能在回滚函数返回之前切换上下文的协程框架时，堆栈跟踪将得以保留。
- en: 'References: [#2703](https://www.sqlalchemy.org/trac/ticket/2703)'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2703](https://www.sqlalchemy.org/trac/ticket/2703)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: The _Binary base type now converts values through the bytes() callable when
    run on Python 3; in particular psycopg2 2.5 with Python 3.3 seems to now be returning
    the “memoryview” type, so this is converted to bytes before return.
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当在Python 3上运行时，_Binary基本类型通过可调用的bytes()将值转换为字节;特别是，带有Python 3.3的psycopg2
    2.5现在似乎返回“memoryview”类型，因此在返回之前将其转换为字节。
- en: '**[sql] [bug]**'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improvements to Connection auto-invalidation handling. If a non-disconnect error
    occurs, but leads to a delayed disconnect error within error handling (happens
    with MySQL), the disconnect condition is detected. The Connection can now also
    be closed when in an invalid state, meaning it will raise “closed” on next usage,
    and additionally the “close with result” feature will work even if the autorollback
    in an error handling routine fails and regardless of whether the condition is
    a disconnect or not.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对Connection自动失效处理进行了改进。如果发生非断开连接错误，但在错误处理中导致延迟断开连接错误（在MySQL中发生），则会检测到断开连接条件。现在，即使处于无效状态，Connection也可以关闭，这意味着在下次使用时它将引发“closed”，此外，“close
    with result”功能也将在错误处理例程中的autorollback失败时以及无论条件是否为断开连接都会起作用。
- en: 'References: [#2695](https://www.sqlalchemy.org/trac/ticket/2695)'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2695](https://www.sqlalchemy.org/trac/ticket/2695)
- en: '**[sql] [bug]**'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby a DBAPI that can return “0” for cursor.lastrowid would not
    function correctly in conjunction with `ResultProxy.inserted_primary_key`.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即DBAPI可能会对cursor.lastrowid返回“0”，并且在与`ResultProxy.inserted_primary_key`结合使用时将无法正常工作。
- en: postgresql
  id: totrans-519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Opened up the checking for “disconnect” with psycopg2/libpq to check for all
    the various “disconnect” messages within the full exception hierarchy. Specifically
    the “closed the connection unexpectedly” message has now been seen in at least
    three different exception types. Courtesy Eli Collins.
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将对psycopg2/libpq的“断开连接”检查扩展为在完整异常层次结构中检查所有各种“断开连接”消息。具体来说，“意外关闭连接”的消息现在已经至少在三种不同的异常类型中看到。由Eli
    Collins提供。
- en: 'References: [#2712](https://www.sqlalchemy.org/trac/ticket/2712)'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2712](https://www.sqlalchemy.org/trac/ticket/2712)
- en: '**[postgresql] [bug]**'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The operators for the PostgreSQL ARRAY type supports input types of sets, generators,
    etc. even when a dimension is not specified, by turning the given iterable into
    a collection unconditionally.
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL ARRAY类型的运算符支持输入类型为集合、生成器等，即使未指定维度，也会将给定的可迭代对象无条件转换为集合。
- en: 'References: [#2681](https://www.sqlalchemy.org/trac/ticket/2681)'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2681](https://www.sqlalchemy.org/trac/ticket/2681)
- en: '**[postgresql] [bug]**'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added missing HSTORE type to postgresql type names so that the type can be reflected.
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将HSTORE类型添加到postgresql类型名称中，以便可以反射该类型。
- en: 'References: [#2680](https://www.sqlalchemy.org/trac/ticket/2680)'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2680](https://www.sqlalchemy.org/trac/ticket/2680)
- en: mysql
  id: totrans-529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixes to support the latest cymysql DBAPI, courtesy Hajime Nakagami.
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了支持最新的cymysql DBAPI所需的问题，由Hajime Nakagami提供。
- en: '**[mysql] [bug]**'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improvements to the operation of the pymysql dialect on Python 3, including
    some important decode/bytes steps. Issues remain with BLOB types due to driver
    issues. Courtesy Ben Trofatter.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对Python 3上pymysql方言的操作进行了改进，包括一些重要的解码/字节步骤。由于驱动程序问题，BLOB类型仍然存在问题。由Ben Trofatter提供。
- en: 'References: [#2663](https://www.sqlalchemy.org/trac/ticket/2663)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2663](https://www.sqlalchemy.org/trac/ticket/2663)
- en: '**[mysql] [bug]**'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated a regexp to correctly extract error code on google app engine v1.7.5
    and newer. Courtesy Dan Ring.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了一个正则表达式，以正确提取google app engine v1.7.5及更新版本的错误代码。由Dan Ring提供。
- en: mssql
  id: totrans-537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Part of a longer series of fixes needed for pyodbc+ mssql, a CAST to NVARCHAR(max)
    has been added to the bound parameter for the table name and schema name in all
    information schema queries to avoid the issue of comparing NVARCHAR to NTEXT,
    which seems to be rejected by the ODBC driver in some cases, such as FreeTDS (0.91
    only?) plus unicode bound parameters being passed. The issue seems to be specific
    to the SQL Server information schema tables and the workaround is harmless for
    those cases where the problem doesn’t exist in the first place.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为为pyodbc+ mssql所需的一系列修复的一部分，已向所有信息模式查询的绑定参数的表名和模式名添加了CAST到NVARCHAR(max)，以避免将NVARCHAR与NTEXT进行比较的问题，在某些情况下，例如FreeTDS（仅限0.91？）加上传递的unicode绑定参数。该问题似乎特定于SQL
    Server信息模式表，并且解决方法对于那些问题本来就不存在的情况是无害的。
- en: 'References: [#2355](https://www.sqlalchemy.org/trac/ticket/2355)'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2355](https://www.sqlalchemy.org/trac/ticket/2355)
- en: '**[mssql] [bug]**'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added support for additional “disconnect” messages to the pymssql dialect. Courtesy
    John Anderson.
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为pymssql方言添加了对额外“disconnect”消息的支持。感谢John Anderson。
- en: '**[mssql] [bug]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed Py3K bug regarding “binary” types and pymssql. Courtesy Marc Abramowitz.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“binary”类型和pymssql的Py3K bug。感谢Marc Abramowitz。
- en: 'References: [#2683](https://www.sqlalchemy.org/trac/ticket/2683)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2683](https://www.sqlalchemy.org/trac/ticket/2683)
- en: 0.8.0
  id: totrans-546
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.0
- en: 'Released: March 9, 2013'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年3月9日
- en: Note
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are some new behavioral changes as of 0.8.0 not present in 0.8.0b2\.
    They are present in the migration document as follows:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 0.8.0中存在一些新的行为变化，而在0.8.0b2中不存在。它们在迁移文档中如下所示：
- en: '[The consideration of a “pending” object as an “orphan” has been made more
    aggressive](migration_08.html#legacy-is-orphan-addition)'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将“pending”对象视为“孤立”对象的考虑更加激进](migration_08.html#legacy-is-orphan-addition)'
- en: '[create_all() and drop_all() will now honor an empty list as such](migration_08.html#metadata-create-drop-tables)'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[create_all()和drop_all()现在将尊重空列表](migration_08.html#metadata-create-drop-tables)'
- en: '[Correlation is now always context-specific](migration_08.html#correlation-context-specific)'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[相关性现在始终是特定于上下文的](migration_08.html#correlation-context-specific)'
- en: orm
  id: totrans-553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A meaningful [`QueryableAttribute.info`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info") attribute is added, which proxies down
    to the `.info` attribute on either the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object if directly present, or the [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") otherwise. The full behavior is documented and
    ensured by tests to remain stable.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了有意义的[`QueryableAttribute.info`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")属性，它代理到直接存在的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的`.info`属性，否则代理到[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。完整的行为已记录并通过测试确保保持稳定。
- en: 'References: [#2675](https://www.sqlalchemy.org/trac/ticket/2675)'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2675](https://www.sqlalchemy.org/trac/ticket/2675)
- en: '**[orm] [feature]**'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Can set/change the “cascade” attribute on a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct after it’s been constructed already.
    This is not a pattern for normal use but we like to change the setting for demonstration
    purposes in tutorials.
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造已经构建后，可以设置/更改“cascade”属性。这不是正常使用的模式，但我们喜欢在教程中更改设置以进行演示。
- en: '**[orm] [feature]**'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new helper function [`was_deleted()`](../orm/session_api.html#sqlalchemy.orm.util.was_deleted
    "sqlalchemy.orm.util.was_deleted"), returns True if the given object was the subject
    of a [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") operation.
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的辅助函数[`was_deleted()`](../orm/session_api.html#sqlalchemy.orm.util.was_deleted
    "sqlalchemy.orm.util.was_deleted")，如果给定对象是[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")操作的主题，则返回True。
- en: 'References: [#2658](https://www.sqlalchemy.org/trac/ticket/2658)'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2658](https://www.sqlalchemy.org/trac/ticket/2658)
- en: '**[orm] [feature]**'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Extended the [Runtime Inspection API](../core/inspection.html) system so that
    all Python descriptors associated with the ORM or its extensions can be retrieved.
    This fulfills the common request of being able to inspect all [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") descriptors in addition to extension types
    such as [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") and [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"). See [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了[运行时检查 API](../core/inspection.html)系统，以便检索与 ORM 或其扩展相关的所有 Python 描述符。 这满足了能够检查所有
    [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 描述符的常见请求，以及扩展类型，例如 [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 和 [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。 请参阅 [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")。
- en: '**[orm] [bug]**'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved checking for an existing backref name conflict during mapper configuration;
    will now test for name conflicts on superclasses and subclasses, in addition to
    the current mapper, as these conflicts break things just as much. This is new
    for 0.8, but see below for a warning that will also be triggered in 0.7.11.
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在映射器配置期间改进了对现有反向引用名称冲突的检查；现在将在超类和子类上测试名称冲突，除了当前映射器之外，因为这些冲突会造成同样的问题。 这对于 0.8
    是新的，但请参阅下面对于将在 0.7.11 中触发的警告。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message emitted when a “backref loop” is detected, that is
    when an attribute event triggers a bidirectional assignment between two other
    attributes with no end. This condition can occur not just when an object of the
    wrong type is assigned, but also when an attribute is mis-configured to backref
    into an existing backref pair. Also in 0.7.11.
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到“反向引用循环”时，会发出清晰的错误消息，即当属性事件触发两个其他属性之间的双向赋值时。 当一个对象的类型错误地被赋值时，此条件可能会发生，但是当属性被错误地配置为反向引用到现有的反向引用对时，也会发生。
    也出现在 0.7.11 中。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when a MapperProperty is assigned to a mapper that replaces
    an existing property, if the properties in question aren’t plain column-based
    properties. Replacement of relationship properties is rarely (ever?) what is intended
    and usually refers to a mapper mis-configuration. Also in 0.7.11.
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将 MapperProperty 分配给替换现有属性的映射器，则会发出警告，如果问题属性不是基于纯列的属性。 替换关系属性很少（或者说从来没有？）是预期的，通常是指映射器配置错误。
    也出现在 0.7.11 中。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A clear error message is emitted if an event handler attempts to emit SQL on
    a Session within the after_commit() handler, where there is not a viable transaction
    in progress.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件处理程序在 after_commit() 处理程序中尝试在会话中发出 SQL，而在此期间没有可行的事务，则会发出清晰的错误消息。
- en: 'References: [#2662](https://www.sqlalchemy.org/trac/ticket/2662)'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2662](https://www.sqlalchemy.org/trac/ticket/2662)
- en: '**[orm] [bug]**'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Detection of a primary key change within the process of cascading a natural
    primary key update will succeed even if the key is composite and only some of
    the attributes have changed.
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在级联自然主键更新过程中检测到主键更改将会成功，即使该键是复合键，且仅有部分属性发生了变化。
- en: 'References: [#2665](https://www.sqlalchemy.org/trac/ticket/2665)'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2665](https://www.sqlalchemy.org/trac/ticket/2665)
- en: '**[orm] [bug]**'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An object that’s deleted from a session will be de-associated with that session
    fully after the transaction is committed, that is the [`object_session()`](../orm/session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") function will return None.
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从会话中删除的对象在事务提交后将完全取消与该会话的关联，即 [`object_session()`](../orm/session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") 函数将返回 None。
- en: 'References: [#2658](https://www.sqlalchemy.org/trac/ticket/2658)'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2658](https://www.sqlalchemy.org/trac/ticket/2658)
- en: '**[orm] [bug]**'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") would set the execution options incorrectly,
    thereby breaking subsequent usage of the [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") method. Courtesy Ryan Kelly.
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") 会错误地设置执行选项，从而破坏了后续使用 [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") 方法的情况。感谢 Ryan Kelly。
- en: 'References: [#2661](https://www.sqlalchemy.org/trac/ticket/2661)'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2661](https://www.sqlalchemy.org/trac/ticket/2661)
- en: '**[orm] [bug]**'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the consideration of the `between()` operator so that it works correctly
    with the new relationship local/remote system.
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 `between()` 操作符的考虑，以便它正确地与新的关系本地/远程系统配合使用。
- en: 'References: [#1768](https://www.sqlalchemy.org/trac/ticket/1768)'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1768](https://www.sqlalchemy.org/trac/ticket/1768)
- en: '**[orm] [bug]**'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: the consideration of a pending object as an “orphan” has been modified to more
    closely match the behavior as that of persistent objects, which is that the object
    is expunged from the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as soon as it is de-associated from any of its orphan-enabled
    parents. Previously, the pending object would be expunged only if de-associated
    from all of its orphan-enabled parents. The new flag `legacy_is_orphan` is added
    to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which re-establishes the legacy behavior.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将待处理对象视为“孤立对象”的考虑已经修改，以更接近持久对象的行为，即一旦对象与其任何启用了孤立模式的父对象解除关联，该对象就会从[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中清除。之前，只有在对象从所有启用了孤立模式的父对象中解除关联时，待处理对象才会被清除。新标志 `legacy_is_orphan`
    被添加到[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")中，以恢复传统行为。
- en: See the change note and example case at [The consideration of a “pending” object
    as an “orphan” has been made more aggressive](migration_08.html#legacy-is-orphan-addition)
    for a detailed discussion of this change.
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 详细讨论此更改的变更说明和示例案例，请参阅[将“待处理”对象视为“孤立”对象的考虑变得更为激进](migration_08.html#legacy-is-orphan-addition)。
- en: 'References: [#2655](https://www.sqlalchemy.org/trac/ticket/2655)'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2655](https://www.sqlalchemy.org/trac/ticket/2655)
- en: '**[orm] [bug]**'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the (most likely never used) “@collection.link” collection method, which
    fires off each time the collection is associated or de-associated with a mapped
    object - the decorator was not tested or functional. The decorator method is now
    named `collection.linker()` though the name “link” remains for backwards compatibility.
    Courtesy Luca Wehrstedt.
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了（很可能从未被使用过的）“@collection.link”集合方法，该方法在每次将集合与映射对象关联或取消关联时触发 - 该装饰器未经测试或功能上不正常。装饰器方法现在命名为
    `collection.linker()`，尽管名称“link”仍然保留了向后兼容性。感谢 Luca Wehrstedt。
- en: 'References: [#2653](https://www.sqlalchemy.org/trac/ticket/2653)'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2653](https://www.sqlalchemy.org/trac/ticket/2653)
- en: '**[orm] [bug]**'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made some fixes to the system of producing custom instrumented collections,
    mainly that the usage of the @collection decorators will now honor the __mro__
    of the given class, applying the logic of the sub-most classes’ version of a particular
    collection method. Previously, it wasn’t predictable when subclassing an existing
    instrumented class such as `MappedCollection` whether or not custom methods would
    resolve correctly.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对生成自定义受监控集合系统进行了一些修复，主要是现在使用@collection装饰器将遵循给定类的__mro__，应用特定集合方法的子类的版本的逻辑。以前，在对现有受监控类进行子类化时，例如
    `MappedCollection`，无法预测自定义方法是否会正确解析。
- en: 'References: [#2654](https://www.sqlalchemy.org/trac/ticket/2654)'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2654](https://www.sqlalchemy.org/trac/ticket/2654)
- en: '**[orm] [bug]**'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed potential memory leak which could occur if an arbitrary number of [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") objects were created. The anonymous subclass created
    by the sessionmaker, when dereferenced, would not be garbage collected due to
    remaining class-level references from the event package. This issue also applies
    to any custom system that made use of ad-hoc subclasses in conjunction with an
    event dispatcher. Also in 0.7.10.
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可能发生的内存泄漏问题，如果创建了任意数量的[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")对象。当sessionmaker创建的匿名子类被取消引用时，由于事件包中仍然存在类级别的引用，该子类将无法被垃圾回收。此问题也适用于任何与事件调度程序一起使用临时子类的自定义系统。也适用于0.7.10版本。
- en: 'References: [#2650](https://www.sqlalchemy.org/trac/ticket/2650)'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2650](https://www.sqlalchemy.org/trac/ticket/2650)
- en: '**[orm] [bug]**'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") can now load rows from an outer join where
    an entity may be `None` without throwing an error. Also in 0.7.10.'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result")现在可以从外连接加载行，其中实体可能为`None`而不会引发错误。也��用于0.7.10版本。'
- en: 'References: [#2640](https://www.sqlalchemy.org/trac/ticket/2640)'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2640](https://www.sqlalchemy.org/trac/ticket/2640)
- en: '**[orm] [bug]**'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixes to the “dynamic” loader on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), includes that backrefs will work properly even
    when autoflush is disabled, history events are more accurate in scenarios where
    multiple add/remove of the same object occurs.
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上“动态”加载器的问题，包括在自动刷新被禁用时，反向引用将正常工作，历史事件在同一对象多次添加/移除的情况下更加准确。
- en: 'References: [#2637](https://www.sqlalchemy.org/trac/ticket/2637)'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2637](https://www.sqlalchemy.org/trac/ticket/2637)
- en: '**[orm] [removed]**'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [已移除]**'
- en: The undocumented (and hopefully unused) system of producing custom collections
    using an `__instrumentation__` datastructure associated with the collection has
    been removed, as this was a complex and untested feature which was also essentially
    redundant versus the decorator approach. Other internal simplifications to the
    orm.collections module have been made as well.
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除了使用与集合相关联的`__instrumentation__`数据结构生成自定义集合的未记录（希望未被使用）系统，因为这是一个复杂且未经测试的功能，与装饰器方法基本重复。还对orm.collections模块进行了其他内部简化。
- en: examples
  id: totrans-609
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed a regression in the examples/dogpile_caching example which was due to
    the change in [#2614](https://www.sqlalchemy.org/trac/ticket/2614).
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/dogpile_caching示例中的回归，这是由于[#2614](https://www.sqlalchemy.org/trac/ticket/2614)的更改引起的。
- en: sql
  id: totrans-612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added a new argument to [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") and its base [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") `inherit_schema`. When set to `True`, the type
    will set its `schema` attribute of that of the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which it is associated. This also occurs during
    a [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") operation; the [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") is now copied in all cases when [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") happens, and if `inherit_schema=True`, the
    type will take on the new schema name passed to the method. The `schema` is important
    when used with the PostgreSQL backend, as the type results in a `CREATE TYPE`
    statement.
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")及其基本[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")添加了一个新参数`inherit_schema`。当设置为`True`时，该类型将设置其`schema`属性为其关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的`schema`。在进行[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")操作时也会发生这种情况；当[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")发生时，无论何种情况下都会复制[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")，如果`inherit_schema=True`，则该类型将采用传递给该方法的新模式名称。在与PostgreSQL后端一起使用时，`schema`非常重要，因为该类型会导致`CREATE
    TYPE`语句。
- en: 'References: [#2657](https://www.sqlalchemy.org/trac/ticket/2657)'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2657](https://www.sqlalchemy.org/trac/ticket/2657)
- en: '**[sql] [feature]**'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    now supports arbitrary SQL expressions and/or functions, in addition to straight
    columns. Common modifiers include using `somecolumn.desc()` for a descending index
    and `func.lower(somecolumn)` for a case-insensitive index, depending on the capabilities
    of the target backend.'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    现在支持任意的SQL表达式和/或函数，除了直接列。常见的修饰符包括使用`somecolumn.desc()`来创建降序索引和`func.lower(somecolumn)`来创建不区分大小写的索引，具体取决于目标后端的功能。'
- en: 'References: [#695](https://www.sqlalchemy.org/trac/ticket/695)'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#695](https://www.sqlalchemy.org/trac/ticket/695)
- en: '**[sql] [bug]**'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of SELECT correlation has been improved such that the [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") and [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") methods, as well as their
    ORM analogues, will still retain “auto-correlation” behavior in that the FROM
    clause is modified only if the output would be legal SQL; that is, the FROM clause
    is left intact if the correlated SELECT is not used in the context of an enclosing
    SELECT inside of the WHERE, columns, or HAVING clause. The two methods now only
    specify conditions to the default “auto correlation”, rather than absolute FROM
    lists.
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了SELECT关联的行为，使得[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 和 [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法，以及它们的ORM类似方法，在FROM子句仅在输出为合法SQL时才被修改；也就是说，如果关联的SELECT未在WHERE、columns或HAVING子句的上下文中使用，则FROM子句保持不变。这两种方法现在只指定默认的“自动关联”条件，而不是绝对的FROM列表。
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668)'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668)
- en: '**[sql] [bug]**'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug regarding column annotations which in particular could impact some
    usages of the new [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") and `local()` annotation functions, where annotations
    could be lost when the column were used in a subsequent expression.
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于列注释的一个bug，特别是可能影响到新的[`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote")和`local()`注释函数的一些用法，当列在后续表达式中使用时，注释可能会丢失。
- en: 'References: [#1768](https://www.sqlalchemy.org/trac/ticket/1768), [#2660](https://www.sqlalchemy.org/trac/ticket/2660)'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1768](https://www.sqlalchemy.org/trac/ticket/1768), [#2660](https://www.sqlalchemy.org/trac/ticket/2660)
- en: '**[sql] [bug]**'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") operator will now coerce values
    of `None` to [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null").
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 操作符现在将`None`的值强制转换为[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")。'
- en: 'References: [#2496](https://www.sqlalchemy.org/trac/ticket/2496)'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2496](https://www.sqlalchemy.org/trac/ticket/2496)
- en: '**[sql] [bug]**'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would fail if a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") had both a foreign key as well as an alternate “.key”
    name for the column. Also in 0.7.10.
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")既有外键又有列的替代“.key”名称时会失败。也适用于0.7.10版本。
- en: 'References: [#2643](https://www.sqlalchemy.org/trac/ticket/2643)'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2643](https://www.sqlalchemy.org/trac/ticket/2643)
- en: '**[sql] [bug]**'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: insert().returning() raises an informative CompileError if attempted to compile
    on a dialect that doesn’t support RETURNING.
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在不支持RETURNING的方言上尝试编译insert().returning()，将引发一个信息性的CompileError。
- en: 'References: [#2629](https://www.sqlalchemy.org/trac/ticket/2629)'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2629](https://www.sqlalchemy.org/trac/ticket/2629)
- en: '**[sql] [bug]**'
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Tweaked the “REQUIRED” symbol used by the compiler to identify INSERT/UPDATE
    bound parameters that need to be passed, so that it’s more easily identifiable
    when writing custom bind-handling code.
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了编译器用于识别需要传递的INSERT/UPDATE绑定参数的“REQUIRED”符号，使得在编写自定义绑定处理代码时更���易识别。
- en: 'References: [#2648](https://www.sqlalchemy.org/trac/ticket/2648)'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2648](https://www.sqlalchemy.org/trac/ticket/2648)
- en: schema
  id: totrans-637
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") will now accommodate an empty list as an
    instruction to not create/drop any items, rather than ignoring the collection.'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 现在将接受一个空列表作为指示，不创建/删除任何项，而不是忽略该集合。'
- en: 'References: [#2664](https://www.sqlalchemy.org/trac/ticket/2664)'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2664](https://www.sqlalchemy.org/trac/ticket/2664)
- en: postgresql
  id: totrans-641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s traditional SUBSTRING function syntax, renders
    as “SUBSTRING(x FROM y FOR z)” when regular `func.substring()` is used. Courtesy
    Gunnlaugur Þór Briem.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL传统SUBSTRING函数语法的支持，当使用常规`func.substring()`时，呈现为“SUBSTRING(x FROM
    y FOR z)”。感谢Gunnlaugur Þór Briem。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2676](https://www.sqlalchemy.org/trac/ticket/2676)'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2676](https://www.sqlalchemy.org/trac/ticket/2676)
- en: '**[postgresql] [feature]**'
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added `Comparator.any()` and `Comparator.all()` methods, as well as standalone
    expression constructs. Big thanks to Audrius Kažukauskas for the terrific work
    here.
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`Comparator.any()`和`Comparator.all()`方法，以及独立的表达式构造。非常感谢Audrius Kažukauskas在这里的出色工作。
- en: '**[postgresql] [bug]**'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct whereby using it inside of an
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct would produce an error regarding a parameter issue in the `self_group()`
    method.
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")构造中的错误，其中在[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")构造中使用它会产生关于`self_group()`方法中参数问题的错误。
- en: mysql
  id: totrans-650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: New dialect for CyMySQL added, courtesy Hajime Nakagami.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了CyMySQL的新方言，感谢Hajime Nakagami。
- en: '**[mysql] [feature]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: GAE dialect now accepts username/password arguments in the URL, courtesy Owen
    Nelson.
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GAE方言现在接受URL中的用户名/密码参数，感谢Owen Nelson。
- en: '**[mysql] [bug] [gae]**'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [gae]**'
- en: Added a conditional import to the `gaerdbms` dialect which attempts to import
    rdbms_apiproxy vs. rdbms_googleapi to work on both dev and production platforms.
    Also now honors the `instance` attribute. Courtesy Sean Lynch. Also in 0.7.10.
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`gaerdbms`方言中添加了一个条件导入，尝试导入rdbms_apiproxy vs. rdbms_googleapi以在开发和生产平台上工作。现在也支持`instance`属性。感谢Sean
    Lynch。也在0.7.10中。
- en: 'References: [#2649](https://www.sqlalchemy.org/trac/ticket/2649)'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2649](https://www.sqlalchemy.org/trac/ticket/2649)
- en: '**[mysql] [bug]**'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: GAE dialect won’t fail on None match if the error code can’t be extracted from
    the exception throw; courtesy Owen Nelson.
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果无法从异常抛出中提取错误代码，GAE方言不会在无匹配时失败；感谢Owen Nelson。
- en: mssql
  id: totrans-660
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added `mssql_include` and `mssql_clustered` options to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), renders the `INCLUDE` and `CLUSTERED` keywords, respectively.
    Courtesy Derek Harland.
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`mssql_include`和`mssql_clustered`选项到[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，分别呈现`INCLUDE`和`CLUSTERED`关键字。感谢Derek Harland。
- en: '**[mssql] [feature]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: DDL for IDENTITY columns is now supported on non-primary key columns, by establishing
    a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct on any integer column. Courtesy Derek Harland.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持对非主键列的IDENTITY列的DDL，通过在任何整数列上建立一个[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")构造。感谢Derek Harland。
- en: 'References: [#2644](https://www.sqlalchemy.org/trac/ticket/2644)'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2644](https://www.sqlalchemy.org/trac/ticket/2644)
- en: '**[mssql] [bug]**'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a py3K conditional around unnecessary .decode() call in mssql information
    schema, fixes reflection in Py3K. Also in 0.7.10.
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mssql信息模式中添加了一个py3K条件，围绕不必要的.decode()调用，修复了Py3K中的反射问题。也在0.7.10中。
- en: 'References: [#2638](https://www.sqlalchemy.org/trac/ticket/2638)'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2638](https://www.sqlalchemy.org/trac/ticket/2638)
- en: '**[mssql] [bug]**'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression whereby the “collation” parameter of the character types
    CHAR, NCHAR, etc. stopped working, as “collation” is now supported by the base
    string types. The TEXT, NCHAR, CHAR, VARCHAR types within the MSSQL dialect are
    now synonyms for the base types.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了字符类型 CHAR、NCHAR 等的“collation”参数停止工作的回归，因为“collation”现在由基本字符串类型支持。MSSQL 方言中的
    TEXT、NCHAR、CHAR、VARCHAR 类型现在是基本类型的同义词。
- en: oracle
  id: totrans-671
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_oracle dialect will no longer run the bind parameter names through `encode()`,
    as this is not valid on Python 3, and prevented statements from functioning correctly
    on Python 3\. We now encode only if `supports_unicode_binds` is False, which is
    not the case for cx_oracle when at least version 5 of cx_oracle is used.
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_oracle 方言将不再通过 `encode()` 运行绑定参数名称，因为这在 Python 3 上无效，并且阻止了 Python 3 上语句的正确运行。现在只有在
    `supports_unicode_binds` 为 False 时才进行编码，而当至少使用版本 5 的 cx_oracle 时，这并不适用于 cx_oracle。
- en: tests
  id: totrans-674
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed an import of “logging” in test_execute which was not working on some linux
    platforms. Also in 0.7.11.
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些 Linux 平台上无法正常工作的 test_execute 中的“logging”导入。也在 0.7.11 中。
- en: 'References: [#2669](https://www.sqlalchemy.org/trac/ticket/2669)'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2669](https://www.sqlalchemy.org/trac/ticket/2669)
- en: 0.8.0b2
  id: totrans-678
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.0b2
- en: 'Released: December 14, 2012'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年12月14日
- en: orm
  id: totrans-680
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added `KeyedTuple._asdict()` and `KeyedTuple._fields` to the `KeyedTuple` class
    to provide some degree of compatibility with the Python standard library `collections.namedtuple()`.
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 `KeyedTuple._asdict()` 和 `KeyedTuple._fields` 到 `KeyedTuple` 类，以提供与 Python
    标准库 `collections.namedtuple()` 一定程度的兼容性。
- en: 'References: [#2601](https://www.sqlalchemy.org/trac/ticket/2601)'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2601](https://www.sqlalchemy.org/trac/ticket/2601)
- en: '**[orm] [feature]**'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Allow synonyms to be used when defining primary and secondary joins for relationships.
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许在定义关系的主要和次要连接时使用同义词。
- en: '**[orm] [bug]**'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'The [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method can now be used with a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct without it interfering with the entities being
    selected. Basically, a statement like this:'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 方法现在可以与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造一起使用，而不会干扰被选择的实体。基本上，像这样的语句：'
- en: '[PRE1]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Will maintain the columns clause of the SELECT as coming from the unaliased
    “user”, as specified; the select_from only takes place in the FROM clause:'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将保持 SELECT 的列子句来自未别名化的“user”，如指定的；select_from 只发生在 FROM 子句中：
- en: '[PRE2]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that this behavior is in contrast to the original, older use case for
    [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from"), which is that of restating the mapped entity
    in terms of a different selectable:'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这种行为与原始、较旧的 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 的用例形成对比，即在不同的可选择性方面重新陈述映射实体：
- en: '[PRE3]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Which produces:'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE4]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It was the “aliasing” behavior of the latter use case that was getting in the
    way of the former use case. The method now specifically considers a SQL expression
    like [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    or [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")
    separately from a mapped entity like a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 后一种用例的“别名”行为妨碍了前一种用例。该方法现在明确地将类似[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")的 SQL 表达式与类似[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造的映射实体分开考虑。
- en: 'References: [#2635](https://www.sqlalchemy.org/trac/ticket/2635)'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2635](https://www.sqlalchemy.org/trac/ticket/2635)
- en: '**[orm] [bug]**'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") type did not allow for the [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") method to be used, even though the
    code seemed to indicate this intent, so this now works and a brief example is
    added. As a side-effect, the mechanics of this event handler have been changed
    so that new [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") types no longer add per-type global
    event handlers. Also in 0.7.10.
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")类型不允许使用[`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce")方法，尽管代码似乎表明了这一意图，所以现在可以使用，并添加了一个简短的示例。作为副作用，此事件处理程序的机制已更改，以便新的[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")类型不再添加每种类型的全局事件处理程序。也适用于0.7.10。'
- en: 'References: [#2624](https://www.sqlalchemy.org/trac/ticket/2624)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2624](https://www.sqlalchemy.org/trac/ticket/2624)
- en: '**[orm] [bug]**'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: A second overhaul of aliasing/internal pathing mechanics now allows two subclasses
    to have different relationships of the same name, supported with subquery or joined
    eager loading on both simultaneously when a full polymorphic load is used.
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二次对别名/内部路径机制进行改进，现在允许两个子类具有相同名称的不同关系，在同时使用子查询或连接式贪婪加载时支持全多态加载。
- en: 'References: [#2614](https://www.sqlalchemy.org/trac/ticket/2614)'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2614](https://www.sqlalchemy.org/trac/ticket/2614)
- en: '**[orm] [bug]**'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug whereby a multi-hop subqueryload within a particular with_polymorphic
    load would produce a KeyError. Takes advantage of the same internal pathing overhaul
    as [#2614](https://www.sqlalchemy.org/trac/ticket/2614).
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在特定的with_polymorphic加载中进行多跳子查询加载会产生KeyError的问题。利用了与[#2614](https://www.sqlalchemy.org/trac/ticket/2614)相同的内部路径改进。
- en: 'References: [#2617](https://www.sqlalchemy.org/trac/ticket/2617)'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2617](https://www.sqlalchemy.org/trac/ticket/2617)
- en: '**[orm] [bug]**'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression where query.update() would produce an error if an object matched
    by the “fetch” synchronization strategy wasn’t locally present. Courtesy Scott
    Torborg.
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了查询.update()在“fetch”同步策略匹配的对象不在本地时会产生错误的回归。感谢Scott Torborg。
- en: 'References: [#2602](https://www.sqlalchemy.org/trac/ticket/2602)'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2602](https://www.sqlalchemy.org/trac/ticket/2602)
- en: orm extensions
  id: totrans-709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm扩展
- en: '**[orm] [extensions] [feature]**'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [扩展] [功能]**'
- en: The [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension now includes the example [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class as part of the extension.
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable")扩展现在包括示例[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")类作为扩展的一部分。'
- en: engine
  id: totrans-712
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [功能]**'
- en: 'The `Connection.connect()` and `Connection.contextual_connect()` methods now
    return a “branched” version so that the [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method can be called on the returned connection
    without affecting the original. Allows symmetry when using [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as context managers:'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Connection.connect()`和`Connection.contextual_connect()`方法现在返回一个“branched”版本，以便在返回的连接上调用[`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")方法而不影响原始连接。在使用[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象作为上下文管理器时提供对称性：'
- en: '[PRE5]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**[engine] [bug]**'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Fixed [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") to correctly use the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), if given, without opening a second connection
    from that connection’s [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法，正确使用给定的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，如果有的话，而不是从该连接的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 中打开第二个连接。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.10
- en: 'References: [#2604](https://www.sqlalchemy.org/trac/ticket/2604)'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2604](https://www.sqlalchemy.org/trac/ticket/2604)
- en: '**[engine]**'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: The “reflect=True” argument to [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is deprecated. Please use the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method.
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的“reflect=True”参数已被弃用。请使用 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法。'
- en: sql
  id: totrans-722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct now supports multi-valued inserts, that is, an INSERT that renders like
    “INSERT INTO table VALUES (…), (…), …”. Supported by PostgreSQL, SQLite, and MySQL.
    Big thanks to Idan Kamara for doing the legwork on this one.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造现在支持多值插入，即类似于“INSERT INTO table VALUES (…), (…), …” 的插入方式。支持 PostgreSQL、SQLite
    和 MySQL。特别感谢 Idan Kamara 在这方面的工作。'
- en: See also
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multiple-VALUES support for Insert](migration_08.html#feature-2623)'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Insert 的多值支持](migration_08.html#feature-2623)'
- en: 'References: [#2623](https://www.sqlalchemy.org/trac/ticket/2623)'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2623](https://www.sqlalchemy.org/trac/ticket/2623)
- en: '**[sql] [bug]**'
  id: totrans-728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using server_onupdate=<FetchedValue|DefaultClause> without passing
    the “for_update=True” flag would apply the default object to the server_default,
    blowing away whatever was there. The explicit for_update=True argument shouldn’t
    be needed with this usage (especially since the documentation shows an example
    without it being used) so it is now arranged internally using a copy of the given
    default object, if the flag isn’t set to what corresponds to that argument.
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 server_onupdate=<FetchedValue|DefaultClause> 但没有传递“for_update=True”标志时，会将默认对象应用于
    server_default，覆盖原有内容的 bug。这种用法不应该需要显式的 for_update=True 参数（特别是因为文档中显示了一个没有使用该参数的示例），因此现在在内部使用给定默认对象的副本，如果标志未设置为对应该参数的值。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.10
- en: 'References: [#2631](https://www.sqlalchemy.org/trac/ticket/2631)'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2631](https://www.sqlalchemy.org/trac/ticket/2631)
- en: '**[sql] [bug]**'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression caused by [#2410](https://www.sqlalchemy.org/trac/ticket/2410)
    whereby a [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") would apply itself back to the original table
    during a [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") operation, as it would parse the SQL expression
    for a parent table. The operation now copies the given expression to correspond
    to the new table.
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#2410](https://www.sqlalchemy.org/trac/ticket/2410) 引起的回归，即 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 在 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 操作期间会将自身应用回原始表，因为它会解析父表的 SQL 表达式。现在该操作会将给定的表达式复制以对应新表。
- en: 'References: [#2633](https://www.sqlalchemy.org/trac/ticket/2633)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2633](https://www.sqlalchemy.org/trac/ticket/2633)
- en: '**[sql] [bug]**'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby using a label_length on dialect that was smaller than the
    size of actual column identifiers would fail to render the columns correctly in
    a SELECT statement.
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在方言上使用 label_length 小于实际列标识符大小的 bug，会导致在 SELECT 语句中无法正确渲染列。
- en: 'References: [#2610](https://www.sqlalchemy.org/trac/ticket/2610)'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2610](https://www.sqlalchemy.org/trac/ticket/2610)
- en: '**[sql] [bug]**'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    type now honors the “precision” and “scale” arguments when rendering DDL.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    类型现在在渲染 DDL 时遵守“precision”和“scale”参数。'
- en: 'References: [#2618](https://www.sqlalchemy.org/trac/ticket/2618)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2618](https://www.sqlalchemy.org/trac/ticket/2618)
- en: '**[sql] [bug]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Made an adjustment to the “boolean”, (i.e. `__nonzero__`) evaluation of binary
    expressions, i.e. `x1 == x2`, such that the “auto-grouping” applied by [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") in some cases won’t get in the way
    of this comparison. Previously, an expression like:'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对二进制表达式的“布尔”（即`__nonzero__`）评估进行了调整，即`x1 == x2`，使得[`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")在某些情况下的“自动分组”不会妨碍此比较。 以前，像这样的表达式：
- en: '[PRE6]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Would evaluate as `False`, even though this is an identity comparison, because
    `mycolumn > 2` would be “grouped” before being placed into the [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"), thus changing its identity. [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") now keeps track of the “original”
    objects passed in. Additionally the `__nonzero__` method now only returns if the
    operator is `==` or `!=` - all others raise `TypeError`.
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这是一个身份比较，但会评估为`False`，因为`mycolumn > 2`会在放入[`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")之前被“分组”，从而改变其身份。 [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")现在跟踪传入的“原始”对象。 此外，`__nonzero__`方法现在仅在运算符为`==`或`!=`时返回
    - 所有其他情况都会引发`TypeError`。
- en: 'References: [#2621](https://www.sqlalchemy.org/trac/ticket/2621)'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2621](https://www.sqlalchemy.org/trac/ticket/2621)
- en: '**[sql] [bug]**'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a gotcha where inadvertently calling list() on a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would go into an endless loop, if [`ColumnOperators.__getitem__()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__getitem__
    "sqlalchemy.sql.expression.ColumnOperators.__getitem__") were implemented. A new
    NotImplementedError is emitted via `__iter__()`.
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即无意中在[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")上调用list()会进入无限循环，如果实现了[`ColumnOperators.__getitem__()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__getitem__
    "sqlalchemy.sql.expression.ColumnOperators.__getitem__")。 通过`__iter__()`发出新的NotImplementedError。
- en: '**[sql] [bug]**'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in type_coerce() whereby typing information could be lost if the statement
    were used as a subquery inside of another statement, as well as other similar
    situations. Among other things, would cause typing information to be lost when
    the Oracle/mssql dialects would apply limit/offset wrappings.
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`type_coerce()`中的一个bug，即如果语句被用作另一个语句内部的子查询，以及其他类似情况，可能会丢失类型信息。 其中之一是当Oracle/mssql方言应用limit/offset包装时，会导致类型信息丢失。
- en: 'References: [#2603](https://www.sqlalchemy.org/trac/ticket/2603)'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2603](https://www.sqlalchemy.org/trac/ticket/2603)
- en: '**[sql] [bug]**'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the “.key” of a Column wasn’t being used when producing a
    “proxy” of the column against a selectable. This probably didn’t occur in 0.7
    since 0.7 doesn’t respect the “.key” in a wider range of scenarios.
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在生成可选择的列的“代理”时，未使用列的“.key”��� 这可能在0.7中没有发生，因为0.7在更广泛的情况下不尊重“.key”。
- en: 'References: [#2597](https://www.sqlalchemy.org/trac/ticket/2597)'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2597](https://www.sqlalchemy.org/trac/ticket/2597)
- en: postgresql
  id: totrans-754
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: '[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") is now available in the PostgreSQL dialect.
    Will also use psycopg2’s extensions if available. Courtesy Audrius Kažukauskas.'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")现在在PostgreSQL方言中可用。 如果可用，还将使用psycopg2的扩展。
    感谢Audrius Kažukauskas。'
- en: 'References: [#2606](https://www.sqlalchemy.org/trac/ticket/2606)'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2606](https://www.sqlalchemy.org/trac/ticket/2606)
- en: sqlite
  id: totrans-758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: More adjustment to this SQLite related issue which was released in 0.7.9, to
    intercept legacy SQLite quoting characters when reflecting foreign keys. In addition
    to intercepting double quotes, other quoting characters such as brackets, backticks,
    and single quotes are now also intercepted.
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对此与SQLite相关的问题进行了更多调整，该问题在0.7.9中发布，以拦截反映外键时的传统SQLite引号字符。 除了拦截双引号外，现在还拦截其他引号字符，如括号、反引号和单引号。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.10
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: mssql
  id: totrans-763
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Support for reflection of the “name” of primary key constraints added, courtesy
    Dave Moore.
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持反射“主键约束”的“名称”，感谢戴夫·摩尔。
- en: 'References: [#2600](https://www.sqlalchemy.org/trac/ticket/2600)'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2600](https://www.sqlalchemy.org/trac/ticket/2600)
- en: '**[mssql] [bug]**'
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed bug whereby using “key” with Column in conjunction with “schema” for the
    owning Table would fail to locate result rows due to the MSSQL dialect’s “schema
    rendering” logic’s failure to take .key into account.
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 Column 的“key”与拥有表的“schema”结合时，由于 MSSQL 方言的“schema 渲染”逻辑未考虑 .key 而导致无法定位结果行的错误。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.10
- en: oracle
  id: totrans-770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed table reflection for Oracle when accessing a synonym that refers to a
    DBLINK remote database; while the syntax has been present in the Oracle dialect
    for some time, up until now it has never been tested. The syntax has been tested
    against a sample database linking to itself, however there’s still some uncertainty
    as to what should be used for the “owner” when querying the remote database for
    table information. Currently, the value of “username” from user_db_links is used
    to match the “owner”.
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在访问引用到 DBLINK 远程数据库的同义词时，Oracle 的表反射问题；虽然该语法在 Oracle 方言中已存在一段时间，但直到现在还未经过测试。该语法已针对链接到自身的示例数据库进行了测试，但在查询远程数据库的表信息时仍存在一些不确定性。目前，从
    user_db_links 中使用的“用户名”值用于匹配“所有者”。
- en: 'References: [#2619](https://www.sqlalchemy.org/trac/ticket/2619)'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2619](https://www.sqlalchemy.org/trac/ticket/2619)
- en: '**[oracle] [bug]**'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The Oracle LONG type, while an unbounded text type, does not appear to use the
    cx_Oracle.LOB type when result rows are returned, so the dialect has been repaired
    to exclude LONG from having cx_Oracle.LOB filtering applied. Also in 0.7.10.
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 的 LONG 类型，虽然是一个无界文本类型，但在返回结果行时似乎不使用 cx_Oracle.LOB 类型，因此方言已修复以排除 LONG
    从应用 cx_Oracle.LOB 过滤。也在 0.7.10 中。
- en: 'References: [#2620](https://www.sqlalchemy.org/trac/ticket/2620)'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2620](https://www.sqlalchemy.org/trac/ticket/2620)
- en: '**[oracle] [bug]**'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Repaired the usage of `.prepare()` in conjunction with cx_Oracle so that a return
    value of `False` will result in no call to `connection.commit()`, hence avoiding
    “no transaction” errors. Two-phase transactions have now been shown to work in
    a rudimental fashion with SQLAlchemy and cx_oracle, however are subject to caveats
    observed with the driver; check the documentation for details. Also in 0.7.10.
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与 cx_Oracle 结合使用 `.prepare()` 时，如果返回值为 `False`，则不会调用 `connection.commit()`，从而避免“无事务”错误。已经证明
    SQLAlchemy 和 cx_oracle 可以以一种基本方式工作，但受到驱动程序的注意事项的影响；请查看文档以��取详细信息。也在 0.7.10 中。
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: misc
  id: totrans-780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [sybase]**'
  id: totrans-781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [sybase]**'
- en: Reflection support has been added to the Sybase dialect. Big thanks to Ben Trofatter
    for all the work developing and testing this.
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Sybase 方言现在添加了反射支持。非常感谢本·特罗法特为开发和测试所做的所有工作。
- en: 'References: [#1753](https://www.sqlalchemy.org/trac/ticket/1753)'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1753](https://www.sqlalchemy.org/trac/ticket/1753)
- en: '**[feature] [pool]**'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: The [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    will now log all connection.close() operations equally, including closes which
    occur for invalidated connections, detached connections, and connections beyond
    the pool capacity.
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    现在将记录所有 connection.close() 操作，包括对无效连接、分离连接和超出池容量的连接的关闭。'
- en: '**[feature] [pool]**'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: The [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    now consults the [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") for functionality regarding how the connection should
    be “auto rolled back”, as well as closed. This grants more control of transaction
    scope to the dialect, so that we will be better able to implement transactional
    workarounds like those potentially needed for pysqlite and cx_oracle.
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    现在咨询 [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    关于连接应如何“自动回滚”以及关闭的功能。这使得方言对事务范围有更多控制，因此我们将更好地实现对 pysqlite 和 cx_oracle 可能需要的事务解决方法。'
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: '**[feature] [pool]**'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [池]**'
- en: Added new [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook to capture the event before a connection
    is auto-rolled back, upon return to the pool. Together with [`ConnectionEvents.rollback()`](../core/events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") this allows all rollback events
    to be intercepted.
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 钩子来捕获连接自动回滚前的事件，返回到池中。与 [`ConnectionEvents.rollback()`](../core/events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") 一起，这允许拦截所有回滚事件。
- en: '**[bug] [firebird]**'
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Added missing import for “fdb” to the experimental “firebird+fdb” dialect.
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实验性的“firebird+fdb”方言中添加了对“fdb”的丢失导入。
- en: 'References: [#2622](https://www.sqlalchemy.org/trac/ticket/2622)'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2622](https://www.sqlalchemy.org/trac/ticket/2622)
- en: '**[informix]**'
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Some cruft regarding informix transaction handling has been removed, including
    a feature that would skip calling commit()/rollback() as well as some hardcoded
    isolation level assumptions on begin().. The status of this dialect is not well
    understood as we don’t have any users working with it, nor any access to an Informix
    database. If someone with access to Informix wants to help test this dialect,
    please let us know.
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除一些关于 informix 事务处理的垃圾，包括跳过调用 commit()/rollback() 以及在 begin() 上的一些硬编码隔离级别假设的特性。对该方言的状态理解不深，因为我们没有任何与之相关的用户，也没有任何访问
    Informix 数据库的权限。如果有人有权访问 Informix 并愿意帮助测试该方言，请告诉我们。
- en: 0.8.0b1
  id: totrans-796
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.0b1
- en: 'Released: October 30, 2012'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年10月30日
- en: general
  id: totrans-798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [removed]**'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [移除]**'
- en: The “sqlalchemy.exceptions” synonym for “sqlalchemy.exc” is removed fully.
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全移除了“sqlalchemy.exceptions”作为“sqlalchemy.exc”的同义词。
- en: 'References: [#2433](https://www.sqlalchemy.org/trac/ticket/2433)'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2433](https://www.sqlalchemy.org/trac/ticket/2433)
- en: '**[general]**'
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: SQLAlchemy 0.8 now targets Python 2.5 and above. Python 2.4 is no longer supported.
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 0.8 现在针对 Python 2.5 及以上版本。不再支持 Python 2.4。
- en: orm
  id: totrans-804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Major rewrite of relationship() internals now allow join conditions which include
    columns pointing to themselves within composite foreign keys. A new API for very
    specialized primaryjoin conditions is added, allowing conditions based on SQL
    functions, CAST, etc. to be handled by placing the annotation functions remote()
    and foreign() inline within the expression when necessary. Previous recipes using
    the semi-private _local_remote_pairs approach can be upgraded to this new approach.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship() 的主要重写允许加入条件，其中包括指向自身的列在复合外键内。添加了一个新的非常专业化的 primaryjoin 条件的 API，允许在需要时在表达式内联中放置注释函数
    remote() 和 foreign() 来处理基于 SQL 函数、CAST 等的条件。之前使用半私有 _local_remote_pairs 方法的配方可以升级到这种新方法。
- en: See also
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Rewritten _orm.relationship() mechanics](migration_08.html#feature-relationship-08)'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重写的 _orm.relationship() 机制](migration_08.html#feature-relationship-08)'
- en: 'References: [#1401](https://www.sqlalchemy.org/trac/ticket/1401)'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1401](https://www.sqlalchemy.org/trac/ticket/1401)
- en: '**[orm] [feature]**'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: New standalone function with_polymorphic() provides the functionality of query.with_polymorphic()
    in a standalone form. It can be applied to any entity within a query, including
    as the target of a join in place of the “of_type()” modifier.
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的独立函数 with_polymorphic() 提供了 query.with_polymorphic() 功能的独立形式。它可以应用于查询中的任何实体，包括作为“of_type()”修改器的目标进行连接。
- en: 'References: [#2333](https://www.sqlalchemy.org/trac/ticket/2333)'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2333](https://www.sqlalchemy.org/trac/ticket/2333)
- en: '**[orm] [feature]**'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: The of_type() construct on attributes now accepts aliased() class constructs
    as well as with_polymorphic constructs, and works with query.join(), any(), has(),
    and also eager loaders subqueryload(), joinedload(), contains_eager()
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性上的 of_type() 结构现在也接受别名化的类构造以及 with_polymorphic 结构，并且可以与 query.join()、any()、has()
    以及也包括 eager loaders subqueryload()、joinedload()、contains_eager()
- en: 'References: [#1106](https://www.sqlalchemy.org/trac/ticket/1106), [#2438](https://www.sqlalchemy.org/trac/ticket/2438)'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1106](https://www.sqlalchemy.org/trac/ticket/1106)、[#2438](https://www.sqlalchemy.org/trac/ticket/2438)
- en: '**[orm] [feature]**'
  id: totrans-816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Improvements to event listening for mapped classes allows that unmapped classes
    can be specified for instance- and mapper-events. The established events will
    be automatically set up on subclasses of that class when the propagate=True flag
    is passed, and the events will be set up for that class itself if and when it
    is ultimately mapped.
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对映射类的事件监听进行改进，允许指定未映射类用于实例和映射器事件。当传递 propagate=True 标志时，建立的事件将自动设置在该类的子类上，如果最终映射了该类，则事件将为该类本身设置。
- en: 'References: [#2585](https://www.sqlalchemy.org/trac/ticket/2585)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2585](https://www.sqlalchemy.org/trac/ticket/2585)
- en: '**[orm] [feature]**'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “deferred declarative reflection” system has been moved into the declarative
    extension itself, using the new DeferredReflection class. This class is now tested
    with both single and joined table inheritance use cases.
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “延迟声明式反射”系统已经移入声明式扩展本身，使用新的 DeferredReflection 类。该类现在已经针对单表和联合表继承用例进行了测试。
- en: 'References: [#2485](https://www.sqlalchemy.org/trac/ticket/2485)'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2485](https://www.sqlalchemy.org/trac/ticket/2485)
- en: '**[orm] [feature]**'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new core function “inspect()”, which serves as a generic gateway to introspection
    into mappers, objects, others. The Mapper and InstanceState objects have been
    enhanced with a public API that allows inspection of mapped attributes, including
    filters for column-bound or relationship-bound properties, inspection of current
    object state, history of attributes, etc.
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的核心函数“inspect()”，它作为对映射器、对象等进行内省的通用入口。Mapper 和 InstanceState 对象已经增强了公共 API，允许检查映射属性，包括针对列绑定或关系绑定属性的过滤器，检查当前对象状态，属性历史记录等。
- en: 'References: [#2208](https://www.sqlalchemy.org/trac/ticket/2208)'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2208](https://www.sqlalchemy.org/trac/ticket/2208)
- en: '**[orm] [feature]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Calling rollback() within a session.begin_nested() will now only expire those
    objects that had net changes within the scope of that transaction, that is objects
    which were dirty or were modified on a flush. This allows the typical use case
    for begin_nested(), that of altering a small subset of objects, to leave in place
    the data from the larger enclosing set of objects that weren’t modified in that
    sub-transaction.
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 session.begin_nested() 中调用 rollback() 现在只会使那些在该事务范围内具有净变化的对象过期，即在 flush 时被标记为脏或被修改的对象。这允许
    begin_nested() 的典型用例，即修改一小部分对象，保留未在子事务中修改的较大对象集的数据。
- en: 'References: [#2452](https://www.sqlalchemy.org/trac/ticket/2452)'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2452](https://www.sqlalchemy.org/trac/ticket/2452)
- en: '**[orm] [feature]**'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added utility feature Session.enable_relationship_loading(), supersedes relationship.load_on_pending.
    Both features should be avoided, however.
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了实用功能 Session.enable_relationship_loading()，取代了 relationship.load_on_pending。然而，应避免使用这两个功能。
- en: 'References: [#2372](https://www.sqlalchemy.org/trac/ticket/2372)'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2372](https://www.sqlalchemy.org/trac/ticket/2372)
- en: '**[orm] [feature]**'
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added support for .info dictionary argument to column_property(), relationship(),
    composite(). All MapperProperty classes have an auto-creating .info dict available
    overall.
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 column_property()、relationship()、composite() 的 .info 字典参数支持。所有 MapperProperty
    类都具有可用的自动创建的 .info 字典。
- en: '**[orm] [feature]**'
  id: totrans-833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Adding/removing None from a mapped collection now generates attribute events.
    Previously, a None append would be ignored in some cases. Related to.
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从映射集合中添加/移除 None 现在会生成属性事件。以前，在某些情况下，None 追加会被忽略。相关内容。
- en: 'References: [#2229](https://www.sqlalchemy.org/trac/ticket/2229)'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2229](https://www.sqlalchemy.org/trac/ticket/2229)
- en: '**[orm] [feature]**'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The presence of None in a mapped collection now raises an error during flush.
    Previously, None values in collections would be silently ignored.
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射集合中存在 None 现在在 flush 期间会引发错误。以前，集合中的 None 值会被静默忽略。
- en: 'References: [#2229](https://www.sqlalchemy.org/trac/ticket/2229)'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2229](https://www.sqlalchemy.org/trac/ticket/2229)
- en: '**[orm] [feature]**'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Query.update() method is now more lenient as to the table being updated.
    Plain Table objects are better supported now, and additional a joined-inheritance
    subclass may be used with update(); the subclass table will be the target of the
    update, and if the parent table is referenced in the WHERE clause, the compiler
    will call upon UPDATE..FROM syntax as allowed by the dialect to satisfy the WHERE
    clause. MySQL’s multi-table update feature is also supported if columns are specified
    by object in the “values” dictionary. PG’s DELETE..USING is also not available
    in Core yet.
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在更宽松地支持查询的 update() 方法所更新的表。现在更好地支持普通的 Table 对象，还可以使用 joined-inheritance 子类来进行
    update(); 子类表将是更新的目标，如果在 WHERE 子句中引用了父表，则编译器将调用 UPDATE..FROM 语法（如果方言允许）来满足 WHERE
    子句。如果在“values”字典中以对象指定列，则还支持MySQL的多表更新功能。PG 的 DELETE..USING 在核心中还不可用。
- en: '**[orm] [feature]**'
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: New session events after_transaction_create and after_transaction_end allows
    tracking of new SessionTransaction objects. If the object is inspected, can be
    used to determine when a session first becomes active and when it deactivates.
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的会话事件 after_transaction_create 和 after_transaction_end 允许跟踪新的 SessionTransaction
    对象。如果检查了对象，可以确定会话何时首次处于活动状态以及何时停用。
- en: '**[orm] [feature]**'
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The Query can now load entity/scalar-mixed “tuple” rows that contain types which
    aren’t hashable, by setting the flag “hashable=False” on the corresponding TypeEngine
    object in use. Custom types that return unhashable types (typically lists) can
    set this flag to False.
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询现在可以加载包含非可哈希类型的实体/标量混合“元组”行，方法是在使用的相应 TypeEngine 对象上设置标志“hashable=False”。返回不可哈希类型（通常是列表）的自定义类型可以将此标志设置为
    False。
- en: 'References: [#2592](https://www.sqlalchemy.org/trac/ticket/2592)'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2592](https://www.sqlalchemy.org/trac/ticket/2592)
- en: '**[orm] [feature]**'
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Query now “auto correlates” by default in the same way as select() does. Previously,
    a Query used as a subquery in another would require the correlate() method be
    called explicitly in order to correlate a table on the inside to the outside.
    As always, correlate(None) disables correlation.
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询现在默认情况下“自动关联”，方式与 select() 一样。以前，在另一个查询中使用的查询作为子查询时，需要显式调用 correlate() 方法，以便将内部的表与外部关联起来。像往常一样，correlate(None)
    禁用关联。
- en: 'References: [#2179](https://www.sqlalchemy.org/trac/ticket/2179)'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2179](https://www.sqlalchemy.org/trac/ticket/2179)
- en: '**[orm] [feature]**'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The after_attach event is now emitted after the object is established in Session.new
    or Session.identity_map upon Session.add(), Session.merge(), etc., so that the
    object is represented in these collections when the event is called. Added before_attach
    event to accommodate use cases that need autoflush w pre-attached object.
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在对象在 Session.add()、Session.merge() 等中建立在 Session.new 或 Session.identity_map
    中后，会发出 after_attach 事件，以便在调用事件时这些集合中表示对象。添加了 before_attach 事件以适应需要在预附加对象中进行自动刷新的用例。
- en: 'References: [#2464](https://www.sqlalchemy.org/trac/ticket/2464)'
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2464](https://www.sqlalchemy.org/trac/ticket/2464)
- en: '**[orm] [feature]**'
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The Session will produce warnings when unsupported methods are used inside the
    “execute” portion of the flush. These are the familiar methods add(), delete(),
    etc. as well as collection and related-object manipulations, as called within
    mapper-level flush events like after_insert(), after_update(), etc. It’s been
    prominently documented for a long time that SQLAlchemy cannot guarantee results
    when the Session is manipulated within the execution of the flush plan, however
    users are still doing it, so now there’s a warning. Maybe someday the Session
    will be enhanced to support these operations inside of the flush, but for now,
    results can’t be guaranteed.
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 flush 的“execute”部分使用不支持的方法时，会产生警告。这些方法包括熟悉的 add()、delete() 等，以及在 mapper 级别的
    flush 事件中调用的集合和相关对象操作，如 after_insert()、after_update() 等。长期以来，明确记录了当在 flush 计划的执行中操纵
    Session 时，SQLAlchemy 不能保证结果，但是用户仍然在这样做，所以现在有了一个警告。也许将来 Session 将被增强以支持在 flush
    中执行这些操作，但目前不能保证结果。
- en: '**[orm] [feature]**'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: ORM entities can be passed to the core select() construct as well as to the
    select_from(), correlate(), and correlate_except() methods of select(), where
    they will be unwrapped into selectables.
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 实体可以传递到核心的 select() 构造中，以及传递到 select() 的 select_from()、correlate() 和 correlate_except()
    方法中，它们将被解包为可选择的对象。
- en: 'References: [#2245](https://www.sqlalchemy.org/trac/ticket/2245)'
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2245](https://www.sqlalchemy.org/trac/ticket/2245)
- en: '**[orm] [feature]**'
  id: totrans-857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Some support for auto-rendering of a relationship join condition based on the
    mapped attribute, with usage of core SQL constructs. E.g. select([SomeClass]).where(SomeClass.somerelationship)
    would render SELECT from “someclass” and use the primaryjoin of “somerelationship”
    as the WHERE clause. This changes the previous meaning of “SomeClass.somerelationship”
    when used in a core SQL context; previously, it would “resolve” to the parent
    selectable, which wasn’t generally useful. Also works with query.filter(). Related
    to.
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些支持根据映射属性自动渲染关系连接条件，使用核心SQL构造。例如 select([SomeClass]).where(SomeClass.somerelationship)
    将渲染 SELECT from “someclass” 并将 “somerelationship”的 primaryjoin 作为 WHERE 子句。这改变了在核心SQL上下文中使用“SomeClass.somerelationship”时的先前含义；先前，它将“解析”为父可选择的内容，这通常不是有用的。在
    query.filter() 中也起作用。相关链接。
- en: 'References: [#2245](https://www.sqlalchemy.org/trac/ticket/2245)'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2245](https://www.sqlalchemy.org/trac/ticket/2245)
- en: '**[orm] [feature]**'
  id: totrans-860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The registry of classes in declarative_base() is now a WeakValueDictionary.
    So subclasses of “Base” that are dereferenced will be garbage collected, *if they
    are not referred to by any other mappers/superclass mappers*. See the next note
    for this ticket.
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明性基础（declarative_base()）中类的注册表现在是 WeakValueDictionary。因此，“Base”的子类如果被解除引用，将会被垃圾收集，*如果它们不被任何其他映射器/超类映射器引用*。参见本票据的下一个说明。
- en: 'References: [#2526](https://www.sqlalchemy.org/trac/ticket/2526)'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2526](https://www.sqlalchemy.org/trac/ticket/2526)
- en: '**[orm] [feature]**'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Conflicts between columns on single-inheritance declarative subclasses, with
    or without using a mixin, can be resolved using a new @declared_attr usage described
    in the documentation.
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单继承声明性子类之间的列冲突，无论是否使用混合类，都可以使用文档中描述的新的@declared_attr用法来解决。
- en: 'References: [#2472](https://www.sqlalchemy.org/trac/ticket/2472)'
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2472](https://www.sqlalchemy.org/trac/ticket/2472)
- en: '**[orm] [feature]**'
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: declared_attr can now be used on non-mixin classes, even though this is generally
    only useful for single-inheritance subclass column conflict resolution.
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declared_attr 现在可以在非混合类上使用，尽管这通常仅对单继承子类列冲突解决有用。
- en: 'References: [#2472](https://www.sqlalchemy.org/trac/ticket/2472)'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2472](https://www.sqlalchemy.org/trac/ticket/2472)
- en: '**[orm] [feature]**'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: declared_attr can now be used with attributes that are not Column or MapperProperty;
    including any user-defined value as well as association proxy objects.
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declared_attr 现在可以与不是 Column 或 MapperProperty 的属性一起使用；包括任何用户定义的值以及关联代理对象。
- en: 'References: [#2517](https://www.sqlalchemy.org/trac/ticket/2517)'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2517](https://www.sqlalchemy.org/trac/ticket/2517)
- en: '**[orm] [feature]**'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: '*Very limited* support for inheriting mappers to be GC’ed when the class itself
    is deferenced. The mapper must not have its own table (i.e. single table inh only)
    without polymorphic attributes in place. This allows for the use case of creating
    a temporary subclass of a declarative mapped class, with no table or mapping directives
    of its own, to be garbage collected when dereferenced by a unit test.'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*非常有限*地支持继承映射器在类本身被解引用时被GC回收。映射器不能有自己的表（即只有单个表继承），而没有多态属性的情况。这允许了这样一种用例：创建一个声明性映射类的临时子类，在没有自己的表或映射指令的情况下，通过单元测试的解引用进行垃圾收集。'
- en: 'References: [#2526](https://www.sqlalchemy.org/trac/ticket/2526)'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2526](https://www.sqlalchemy.org/trac/ticket/2526)
- en: '**[orm] [feature]**'
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Declarative now maintains a registry of classes by string name as well as by
    full module-qualified name. Multiple classes with the same name can now be looked
    up based on a module-qualified string within relationship(). Simple class name
    lookups where more than one class shares the same name now raises an informative
    error message.
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明性现在维护一个按字符串名称和完整模块限定名称注册的类的注册表。现在可以基于关系（relationship()）中的模块限定字符串查找具有相同名称的多个类。简单类名查找，当有多个类共享相同名称时，现在会引发一个信息性的错误消息。
- en: 'References: [#2338](https://www.sqlalchemy.org/trac/ticket/2338)'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2338](https://www.sqlalchemy.org/trac/ticket/2338)
- en: '**[orm] [feature]**'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Can now provide class-bound attributes that override columns which are of any
    non-ORM type, not just descriptors.
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以提供绑定到类的属性，这些属性可以覆盖任何非ORM类型的列，而不仅仅是描述符。
- en: 'References: [#2535](https://www.sqlalchemy.org/trac/ticket/2535)'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2535](https://www.sqlalchemy.org/trac/ticket/2535)
- en: '**[orm] [feature]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added with_labels and reduce_columns keyword arguments to Query.subquery(),
    to provide two alternate strategies for producing queries with uniquely- named
    columns. .
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 with_labels 和 reduce_columns 关键字参数到 Query.subquery()，以提供两种产生具有唯一命名列的查询的替代策略。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[orm] [feature]**'
  id: totrans-884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A warning is emitted when a reference to an instrumented collection is no longer
    associated with the parent class due to expiration/attribute refresh/collection
    replacement, but an append or remove operation is received on the now-detached
    collection.
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对一个已经由于过期/属性刷新/集合替换而不再与父类关联的受监控集合进行附加或移除操作时，会发出警告。
- en: 'References: [#2476](https://www.sqlalchemy.org/trac/ticket/2476)'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2476](https://www.sqlalchemy.org/trac/ticket/2476)
- en: '**[orm] [bug]**'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM will perform extra effort to determine that an FK dependency between two
    tables is not significant during flush if the tables are related via joined inheritance
    and the FK dependency is not part of the inherit_condition, saves the user a use_alter
    directive.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果两个表通过联合继承相关，并且FK依赖关系不是继承条件的一部分，则ORM在刷新期间会进行额外的努力来确定这种FK依赖关系不重要，从而节省用户使用use_alter指令的必要性。
- en: 'References: [#2527](https://www.sqlalchemy.org/trac/ticket/2527)'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2527](https://www.sqlalchemy.org/trac/ticket/2527)
- en: '**[orm] [bug]**'
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The instrumentation events class_instrument(), class_uninstrument(), and attribute_instrument()
    will now fire off only for descendant classes of the class assigned to listen().
    Previously, an event listener would be assigned to listen for all classes in all
    cases regardless of the “target” argument passed.
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，仅对被分配为监听器的类的后代类触发instrumentation events class_instrument()、class_uninstrument()和attribute_instrument()。以前，无论传递了什么“目标”参数，事件监听器都会被分配为在所有情况下监听所有类。
- en: 'References: [#2590](https://www.sqlalchemy.org/trac/ticket/2590)'
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2590](https://www.sqlalchemy.org/trac/ticket/2590)
- en: '**[orm] [bug]**'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: with_polymorphic() produces JOINs in the correct order and with correct inheriting
    tables in the case of sending multi-level subclasses in an arbitrary order or
    with intermediary classes missing.
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在发送多级子类的任意顺序或中间类缺失的情况下，with_polymorphic()会按正确顺序生成JOIN，并且具有正确的继承表。
- en: 'References: [#1900](https://www.sqlalchemy.org/trac/ticket/1900)'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1900](https://www.sqlalchemy.org/trac/ticket/1900)
- en: '**[orm] [bug]**'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improvements to joined/subquery eager loading dealing with chains of subclass
    entities sharing a common base, with no specific “join depth” provided. Will chain
    out to each subclass mapper individually before detecting a “cycle”, rather than
    considering the base class to be the source of the “cycle”.
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了处理共享共同基类的子类实体链的joined/subquery eager loading，没有提供特定的“join depth”。在检测到“循环”之前，将单独链接到每个子类映射器，而不是考虑基类为“循环”的源。
- en: 'References: [#2481](https://www.sqlalchemy.org/trac/ticket/2481)'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2481](https://www.sqlalchemy.org/trac/ticket/2481)
- en: '**[orm] [bug]**'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “passive” flag on Session.is_modified() no longer has any effect. is_modified()
    in all cases looks only at local in-memory modified flags and will not emit any
    SQL or invoke loader callables/initializers.
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Session.is_modified()上的“passive”标志不再起作用。在所有情况下，is_modified()只查看本地内存中的修改标志，不会发出任何SQL或调用加载器可调用/初始化程序。
- en: 'References: [#2320](https://www.sqlalchemy.org/trac/ticket/2320)'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2320](https://www.sqlalchemy.org/trac/ticket/2320)
- en: '**[orm] [bug]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The warning emitted when using delete-orphan cascade with one-to-many or many-to-many
    without single-parent=True is now an error. The ORM would fail to function subsequent
    to this warning in any case.
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在没有设置single-parent=True的情况下使用delete-orphan级联时，发出的警告现在是一个错误。在任何情况下，ORM在此警告后将无法正常工作。
- en: 'References: [#2405](https://www.sqlalchemy.org/trac/ticket/2405)'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2405](https://www.sqlalchemy.org/trac/ticket/2405)
- en: '**[orm] [bug]**'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Lazy loads emitted within flush events such as before_flush(), before_update(),
    etc. will now function as they would within non-event code, regarding consideration
    of the PK/FK values used in the lazy-emitted query. Previously, special flags
    would be established that would cause lazy loads to load related items based on
    the “previous” value of the parent PK/FK values specifically when called upon
    within a flush; the signal to load in this way is now localized to where the unit
    of work actually needs to load that way. Note that the UOW does sometimes load
    these collections before the before_update() event is called, so the usage of
    “passive_updates” or not can affect whether or not a collection will represent
    the “old” or “new” data, when accessed within a flush event, based on when the
    lazy load was emitted. The change is backwards incompatible in the exceedingly
    small chance that user event code depended on the old behavior.
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在flush事件中发出的延迟加载，如before_flush()、before_update()等，现在将像在非事件代码中一样运行，考虑到在延迟加载查询中使用的PK/FK值。以前，会建立特殊标志，导致延迟加载基于在flush中调用时父PK/FK值的“先前”值加载相关项目；现在，以这种方式加载的信号局限于工作单元实际需要以这种方式加载的地方。请注意，UOW有时会在调用before_update()事件之前加载这些集合，因此“passive_updates”的使用与否可能会影响在flush事件中访问时集合是否表示“旧”或“新”数据，根据延迟加载的发出时间。这种更改在极小的情况下是不兼容的，用户事件代码依赖于旧行为。
- en: 'References: [#2350](https://www.sqlalchemy.org/trac/ticket/2350)'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2350](https://www.sqlalchemy.org/trac/ticket/2350)
- en: '**[orm] [bug]**'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Continuing regarding extra state post-flush due to event listeners; any states
    that are marked as “dirty” from an attribute perspective, usually via column-attribute
    set events within after_insert(), after_update(), etc., will get the “history”
    flag reset in all cases, instead of only those instances that were part of the
    flush. This has the effect that this “dirty” state doesn’t carry over after the
    flush and won’t result in UPDATE statements. A warning is emitted to this effect;
    the set_committed_state() method can be used to assign attributes on objects without
    producing history events.
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续关于由于事件监听器导致flush后的额外状态；从属性角度标记为“脏”的任何状态，通常通过在after_insert()、after_update()等中设置列属性事件，现在在所有情况下都将“历史”标志重置，而不仅仅是那些在flush中的实例。这样做的效果是，这种“脏”状态在flush后不会传递，并且不会导致UPDATE语句。会发出相应的警告；可以使用set_committed_state()方法在对象上分配属性而不产生历史事件。
- en: 'References: [#2566](https://www.sqlalchemy.org/trac/ticket/2566), [#2582](https://www.sqlalchemy.org/trac/ticket/2582)'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2566](https://www.sqlalchemy.org/trac/ticket/2566), [#2582](https://www.sqlalchemy.org/trac/ticket/2582)
- en: '**[orm] [bug]**'
  id: totrans-911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a disconnect that slowly evolved between a @declared_attr Column and a
    directly-defined Column on a mixin. In both cases, the Column will be applied
    to the declared class’ table, but not to that of a joined inheritance subclass.
    Previously, the directly-defined Column would be placed on both the base and the
    sub table, which isn’t typically what’s desired.
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在混合类中逐渐出现的@declared_attr列和直接定义列之间的断开连接。在这两种情况下，列将被应用于声明类的表，但不会应用于连接继承子类的表。以前，直接定义的列会被放在基表和子表上，这通常不是所期望的。
- en: 'References: [#2565](https://www.sqlalchemy.org/trac/ticket/2565)'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2565](https://www.sqlalchemy.org/trac/ticket/2565)
- en: '**[orm] [bug]**'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Declarative can now propagate a column declared on a single-table inheritance
    subclass up to the parent class’ table, when the parent class is itself mapped
    to a join() or select() statement, directly or via joined inheritance, and not
    just a Table.
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当父类本身映射到join()或select()语句时，声明可以将在单表继承子类上声明的列传播到父类的表，直接或通过连接继承，而不仅仅是一个表。
- en: 'References: [#2549](https://www.sqlalchemy.org/trac/ticket/2549)'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2549](https://www.sqlalchemy.org/trac/ticket/2549)
- en: '**[orm] [bug]**'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: An error is emitted when uselist=False is combined with a “dynamic” loader.
    This is a warning in 0.7.9.
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当uselist=False与“dynamic”加载器结合时会发出错误。这在0.7.9中是一个警告。
- en: '**[orm] [removed]**'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [已移除]**'
- en: The legacy “mutable” system of the ORM, including the MutableType class as well
    as the mutable=True flag on PickleType and postgresql.ARRAY has been removed.
    In-place mutations are detected by the ORM using the sqlalchemy.ext.mutable extension,
    introduced in 0.7\. The removal of MutableType and associated constructs removes
    a great deal of complexity from SQLAlchemy’s internals. The approach performed
    poorly as it would incur a scan of the full contents of the Session when in use.
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 的传统“可变”系统已移除，包括 MutableType 类以及 PickleType 和 postgresql.ARRAY 上的 mutable=True
    标志。ORM 使用 sqlalchemy.ext.mutable 扩展来检测原地变异，该扩展是在 0.7 版本中引入的。MutableType 和相关结构的移除从
    SQLAlchemy 的内部删除了大量复杂性。这种方法的性能表现不佳，因为在使用时会扫描 Session 的全部内容。
- en: 'References: [#2442](https://www.sqlalchemy.org/trac/ticket/2442)'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2442](https://www.sqlalchemy.org/trac/ticket/2442)
- en: '**[orm] [removed]**'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [已移除]**'
- en: 'Deprecated identifiers removed:'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用的标识符已移除：
- en: allow_null_pks mapper() argument (use allow_partial_pks)
  id: totrans-924
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: allow_null_pks mapper() 参数（使用 allow_partial_pks）
- en: _get_col_to_prop() mapper method (use get_property_by_column())
  id: totrans-925
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _get_col_to_prop() 映射方法（使用 get_property_by_column()）
- en: dont_load argument to Session.merge() (use load=True)
  id: totrans-926
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: dont_load 参数已移除至 Session.merge()（使用 load=True）
- en: sqlalchemy.orm.shard module (use sqlalchemy.ext.horizontal_shard)
  id: totrans-927
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.shard 模块（使用 sqlalchemy.ext.horizontal_shard）
- en: '**[orm] [moved]**'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [移动]**'
- en: The InstrumentationManager interface and the entire related system of alternate
    class implementation is now moved out to sqlalchemy.ext.instrumentation. This
    is a seldom used system that adds significant complexity and overhead to the mechanics
    of class instrumentation. The new architecture allows it to remain unused until
    InstrumentationManager is actually imported, at which point it is bootstrapped
    into the core.
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstrumentationManager 接口和整个相关的交替类实现系统现已移动到 sqlalchemy.ext.instrumentation。这是一个很少使用的系统，它增加了类仪器化的复杂性和开销。新的架构允许它保持未使用状态，直到实际导入
    InstrumentationManager 时，此时它将被引导到核心中。
- en: examples
  id: totrans-930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples]**'
  id: totrans-931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例]**'
- en: The Beaker caching example has been converted to use [dogpile.cache](https://dogpilecache.readthedocs.io/).
    This is a new caching library written by the same creator of Beaker’s caching
    internals, and represents a vastly improved, simplified, and modernized system
    of caching.
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 缓存示例已转换为使用 [dogpile.cache](https://dogpilecache.readthedocs.io/)。这是一个由
    Beaker 缓存内部的相同创建者编写的新缓存库，代表了一个大大改进、简化和现代化的缓存系统。
- en: See also
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dogpile Caching](../orm/examples.html#examples-caching)'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[狗窝缓存](../orm/examples.html#examples-caching)'
- en: 'References: [#2589](https://www.sqlalchemy.org/trac/ticket/2589)'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2589](https://www.sqlalchemy.org/trac/ticket/2589)
- en: engine
  id: totrans-936
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Connection event listeners can now be associated with individual Connection
    objects, not just Engine objects.
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，连接事件侦听器可以与单个 Connection 对象关联，而不仅仅是 Engine 对象。
- en: 'References: [#2511](https://www.sqlalchemy.org/trac/ticket/2511)'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2511](https://www.sqlalchemy.org/trac/ticket/2511)
- en: '**[engine] [feature]**'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: The before_cursor_execute event fires off for so-called “_cursor_execute” events,
    which are usually special-case executions of primary-key bound sequences and default-generation
    SQL phrases that invoke separately when RETURNING is not used with INSERT.
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: before_cursor_execute 事件触发所谓的“_cursor_execute”事件，这些事件通常是特殊情况下执行的主键绑定序列和不使用 RETURNING
    时调用的默认生成 SQL 短语。
- en: 'References: [#2459](https://www.sqlalchemy.org/trac/ticket/2459)'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2459](https://www.sqlalchemy.org/trac/ticket/2459)
- en: '**[engine] [feature]**'
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: The libraries used by the test suite have been moved around a bit so that they
    are part of the SQLAlchemy install again. In addition, a new suite of tests is
    present in the new sqlalchemy.testing.suite package. This is an under-development
    system that hopes to provide a universal testing suite for external dialects.
    Dialects which are maintained outside of SQLAlchemy can use the new test fixture
    as the framework for their own tests, and will get for free a “compliance” suite
    of dialect-focused tests, including an improved “requirements” system where specific
    capabilities and features can be enabled or disabled for testing.
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试套件使用的库已经稍作调整，使其再次成为 SQLAlchemy 的一部分。此外，新的测试套件现在在新的 sqlalchemy.testing.suite
    包中。这是一个正在开发中的系统，希望为外部方言提供一个通用的测试套件。在 SQLAlchemy 外部维护的方言可以使用新的测试装置作为其自己测试的框架，并且将免费获得一个“兼容性”方言测试套件，其中包括一个改进的“要求”系统，其中可以为测试启用或禁用特定功能和特性。
- en: '**[engine] [feature]**'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added a new system for registration of new dialects in-process without using
    an entrypoint. See the docs for “Registering New Dialects”.
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的在进程中注册新方言的系统，而无需使用入口点。请参阅“注册新方言”文档。
- en: 'References: [#2462](https://www.sqlalchemy.org/trac/ticket/2462)'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2462](https://www.sqlalchemy.org/trac/ticket/2462)
- en: '**[engine] [feature]**'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The “required” flag is set to True by default, if not passed explicitly, on
    bindparam() if the “value” or “callable” parameters are not passed. This will
    cause statement execution to check for the parameter being present in the final
    collection of bound parameters, rather than implicitly assigning None.
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在bindparam()中未显式传递“value”或“callable”参数，则“required”标志默认设置为True。这将导致语句执行检查参数是否存在于最终绑定参数集合中，而不是隐式分配为None。
- en: 'References: [#2556](https://www.sqlalchemy.org/trac/ticket/2556)'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2556](https://www.sqlalchemy.org/trac/ticket/2556)
- en: '**[engine] [feature]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Various API tweaks to the “dialect” API to better support highly specialized
    systems such as the Akiban database, including more hooks to allow an execution
    context to access type processors.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“dialect”API进行了各种API调整，以更好地支持高度专业化的系统，如Akiban数据库，包括更多的钩子以允许执行上下文访问类型处理器。
- en: '**[engine] [feature]**'
  id: totrans-953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Inspector.get_primary_keys() is deprecated; use Inspector.get_pk_constraint().
    Courtesy Diana Clarke.
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Inspector.get_primary_keys()已被弃用；请使用Inspector.get_pk_constraint()。感谢Diana Clarke。
- en: 'References: [#2422](https://www.sqlalchemy.org/trac/ticket/2422)'
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2422](https://www.sqlalchemy.org/trac/ticket/2422)
- en: '**[engine] [feature]**'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: New C extension module “utils” has been added for additional function speedups
    as we have time to implement.
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个名为“utils”的新C扩展模块，用于在有时间实现时提供额外的函数加速。
- en: '**[engine] [bug]**'
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The Inspector.get_table_names() order_by=”foreign_key” feature now sorts tables
    by dependee first, to be consistent with util.sort_tables and metadata.sorted_tables.
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Inspector.get_table_names()的order_by=”foreign_key”功能现在按照依赖关系表先排序，以与util.sort_tables和metadata.sorted_tables保持一致。
- en: '**[engine] [bug]**'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby if a database restart affected multiple connections, each
    connection would individually invoke a new disposal of the pool, even though only
    one disposal is needed.
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果数据库重新启动影响了多个连接，每个连接都会单独调用池的新处理，尽管只需要一个处理。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The names of the columns on the .c. attribute of a select().apply_labels() is
    now based on <tablename>_<colkey> instead of <tablename>_<colname>, for those
    columns that have a distinctly named .key.
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select().apply_labels()的.c.属性上列的名称现在基于<tablename>_<colkey>而不是<tablename>_<colname>，对于那些具有明确定义的.key的列。
- en: 'References: [#2397](https://www.sqlalchemy.org/trac/ticket/2397)'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2397](https://www.sqlalchemy.org/trac/ticket/2397)
- en: '**[engine] [bug]**'
  id: totrans-966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The autoload_replace flag on Table, when False, will cause any reflected foreign
    key constraints which refer to already-declared columns to be skipped, assuming
    that the in-Python declared column will take over the task of specifying in-Python
    ForeignKey or ForeignKeyConstraint declarations.
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Table上的autoload_replace标志为False时，将跳过任何反射的外键约束，这些约束引用已声明的列，假设在Python中声明的列将接管指定在Python中的ForeignKey或ForeignKeyConstraint声明的任务。
- en: '**[engine] [bug]**'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The ResultProxy methods inserted_primary_key, last_updated_params(), last_inserted_params(),
    postfetch_cols(), prefetch_cols() all assert that the given statement is a compiled
    construct, and is an insert() or update() statement as is appropriate, else raise
    InvalidRequestError.
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy方法inserted_primary_key、last_updated_params()、last_inserted_params()、postfetch_cols()、prefetch_cols()都断言给定的语句是一个已编译的构造，并且是一个适当的insert()或update()语句，否则会引发InvalidRequestError。
- en: 'References: [#2498](https://www.sqlalchemy.org/trac/ticket/2498)'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2498](https://www.sqlalchemy.org/trac/ticket/2498)
- en: '**[engine]**'
  id: totrans-971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: ResultProxy.last_inserted_ids is removed, replaced by inserted_primary_key.
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy.last_inserted_ids已被移除，替换为inserted_primary_key。
- en: sql
  id: totrans-973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new method [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") to [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This method works similarly to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") in that it creates a copy of
    the parent object which will refer to the new set of options. The method can be
    used to build sharding schemes where each engine shares the same underlying pool
    of connections. The method has been tested against the horizontal shard recipe
    in the ORM as well.
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")添加了一个新方法[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")。此方法的工作方式与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")类似，它创建一个指向新选项集的父对象的副本。该方法可用于构建每个引擎共享相同底层连接池的分片方案。该方法已针对ORM中的水平分片配方进行了测试。
- en: See also
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '**[sql] [feature]**'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Major rework of operator system in Core, to allow redefinition of existing operators
    as well as addition of new operators at the type level. New types can be created
    from existing ones which add or redefine operations that are exported out to column
    expressions, in a similar manner to how the ORM has allowed comparator_factory.
    The new architecture moves this capability into the Core so that it is consistently
    usable in all cases, propagating cleanly using existing type propagation behavior.
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心操作系统的重大改进，允许在类型级别重新定义现有操作符以及添加新操作符。可以从现有类型创建新类型，这些新类型添加或重新定义了导出到列表达式的操作，类似于ORM允许的比较器工厂。新的架构将此功能移至核心，以便在所有情况下都可以一致使用，并且使用现有的类型传播行为进行清晰传播。
- en: 'References: [#2547](https://www.sqlalchemy.org/trac/ticket/2547)'
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2547](https://www.sqlalchemy.org/trac/ticket/2547)
- en: '**[sql] [feature]**'
  id: totrans-981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: To complement, types can now provide “bind expressions” and “column expressions”
    which allow compile-time injection of SQL expressions into statements on a per-column
    or per-bind level. This is to suit the use case of a type which needs to augment
    bind- and result- behavior at the SQL level, as opposed to in the Python level.
    Allows for schemes like transparent encryption/ decryption, usage of PostGIS functions,
    etc.
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了补充，类型现在可以提供“绑定表达式”和“列表达式”，允许在每列或每绑定级别的语句中进行SQL表达式的编译时注入。这适用于类型需要在SQL级别而不是在Python级别增强绑定和结果行为的用例。允许透明加密/解密、使用PostGIS函数等方案。
- en: 'References: [#1534](https://www.sqlalchemy.org/trac/ticket/1534), [#2547](https://www.sqlalchemy.org/trac/ticket/2547)'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1534](https://www.sqlalchemy.org/trac/ticket/1534), [#2547](https://www.sqlalchemy.org/trac/ticket/2547)
- en: '**[sql] [feature]**'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Core operator system now includes the getitem operator, i.e. the bracket
    operator in Python. This is used at first to provide index and slice behavior
    to the PostgreSQL ARRAY type, and also provides a hook for end-user definition
    of custom __getitem__ schemes which can be applied at the type level as well as
    within ORM-level custom operator schemes. lshift (<<) and rshift (>>) are also
    supported as optional operators.
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心操作系统现在包括getitem操作符，即Python中的括号操作符。首先，这用于为PostgreSQL ARRAY类型提供索引和切片行为，并且还提供了一个钩子，用于终端用户定义自定义__getitem__方案，这些方案可以应用于类型级别以及ORM级别的自定义操作符方案。还支持lshift（<<）和rshift（>>）作为可选操作符。
- en: Note that this change has the effect that descriptor-based __getitem__ schemes
    used by the ORM in conjunction with synonym() or other “descriptor-wrapped” schemes
    will need to start using a custom comparator in order to maintain this behavior.
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改的效果是，ORM与synonym()或其他“描述符包装”方案一起使用的基于描述符的__getitem__方案将需要开始使用自定义比较器以维护此行为。
- en: '**[sql] [feature]**'
  id: totrans-987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Revised the rules used to determine the operator precedence for the user-defined
    operator, i.e. that granted using the `op()` method. Previously, the smallest
    precedence was applied in all cases, now the default precedence is zero, lower
    than all operators except “comma” (such as, used in the argument list of a `func`
    call) and “AS”, and is also customizable via the “precedence” argument on the
    `op()` method.
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了用于确定用户定义运算符的运算符优先级的规则，即使用 `op()` 方法授予的运算符。以前，在所有情况下都应用最小的优先级，现在默认优先级为零，低于所有运算符，除了“逗号”（例如，在
    `func` 调用的参数列表中使用）和“AS”，并且还可以通过 `op()` 方法上的“precedence”参数进行自定义。
- en: 'References: [#2537](https://www.sqlalchemy.org/trac/ticket/2537)'
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2537](https://www.sqlalchemy.org/trac/ticket/2537)
- en: '**[sql] [feature]**'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added “collation” parameter to all String types. When present, renders as COLLATE
    <collation>. This to support the COLLATE keyword now supported by several databases
    including MySQL, SQLite, and PostgreSQL.
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有 String 类型添加了“collation”参数。当存在时，呈现为 COLLATE <collation>。这是为了支持现在多个数据库（包括
    MySQL、SQLite 和 PostgreSQL）支持的 COLLATE 关键字。
- en: 'References: [#2276](https://www.sqlalchemy.org/trac/ticket/2276)'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2276](https://www.sqlalchemy.org/trac/ticket/2276)
- en: '**[sql] [feature]**'
  id: totrans-993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Custom unary operators can now be used by combining operators.custom_op() with
    UnaryExpression().
  id: totrans-994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以通过将 operators.custom_op() 与 UnaryExpression() 结合使用来使用自定义一元运算符。
- en: '**[sql] [feature]**'
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Enhanced GenericFunction and func.* to allow for user-defined GenericFunction
    subclasses to be available via the func.* namespace automatically by classname,
    optionally using a package name, as well as with the ability to have the rendered
    name different from the identified name in func.*.
  id: totrans-996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了 GenericFunction 和 func.*，允许通过类名自动在 func.* 命名空间中使用用户定义的 GenericFunction 子类，可选择使用包名，以及具有在
    func.* 中的标识名不同于渲染名的功能。
- en: '**[sql] [feature]**'
  id: totrans-997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The cast() and extract() constructs will now be produced via the func.* accessor
    as well, as users naturally try to access these names from func.* they might as
    well do what’s expected, even though the returned object is not a FunctionElement.
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，cast() 和 extract() 结构也将通过 func.* 访问器生成，因为用户自然会尝试从 func.* 访问这些名称，即使返回的对象不是
    FunctionElement，也应该做出预期的操作。
- en: 'References: [#2562](https://www.sqlalchemy.org/trac/ticket/2562)'
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2562](https://www.sqlalchemy.org/trac/ticket/2562)
- en: '**[sql] [feature]**'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The Inspector object can now be acquired using the new inspect() service, part
    of
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以使用新的 inspect() 服务获取 Inspector 对象的实例。
- en: 'References: [#2208](https://www.sqlalchemy.org/trac/ticket/2208)'
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2208](https://www.sqlalchemy.org/trac/ticket/2208)
- en: '**[sql] [feature]**'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The column_reflect event now accepts the Inspector object as the first argument,
    preceding “table”. Code which uses the 0.7 version of this very new event will
    need modification to add the “inspector” object as the first argument.
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 column_reflect 事件接受 Inspector 对象作为第一个参数，位于“table”之前。使用这个非常新的事件的 0.7 版���的代码将需要修改以添加“inspector”对象作为第一个参数。
- en: 'References: [#2418](https://www.sqlalchemy.org/trac/ticket/2418)'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2418](https://www.sqlalchemy.org/trac/ticket/2418)
- en: '**[sql] [feature]**'
  id: totrans-1006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The behavior of column targeting in result sets is now case sensitive by default.
    SQLAlchemy for many years would run a case-insensitive conversion on these values,
    probably to alleviate early case sensitivity issues with dialects like Oracle
    and Firebird. These issues have been more cleanly solved in more modern versions
    so the performance hit of calling lower() on identifiers is removed. The case
    insensitive comparisons can be re-enabled by setting “case_insensitive=False”
    on create_engine().
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在结果集中列的定位行为默认区分大小写。多年来，SQLAlchemy会对这些值进行不区分大小写的转换，可能是为了缓解像 Oracle 和 Firebird
    这样的方言早期大小写敏感性问题。这些问题在更现代的版本中已经更清晰地解决，因此在标识符上调用 lower() 的性能损失已被移除。可以通过在 create_engine()
    上设置“case_insensitive=False”来重新启用不区分大小写的比较。
- en: 'References: [#2423](https://www.sqlalchemy.org/trac/ticket/2423)'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2423](https://www.sqlalchemy.org/trac/ticket/2423)
- en: '**[sql] [feature]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The “unconsumed column names” warning emitted when keys are present in insert.values()
    or update.values() that aren’t in the target table is now an exception.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 insert.values() 或 update.values() 中存在不在目标表中的键时，现在“未使用的列名”警告已更改为异常。
- en: 'References: [#2415](https://www.sqlalchemy.org/trac/ticket/2415)'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2415](https://www.sqlalchemy.org/trac/ticket/2415)
- en: '**[sql] [feature]**'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added “MATCH” clause to ForeignKey, ForeignKeyConstraint, courtesy Ryan Kelly.
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 ForeignKey、ForeignKeyConstraint 添加了“MATCH”子句，感谢 Ryan Kelly。
- en: 'References: [#2502](https://www.sqlalchemy.org/trac/ticket/2502)'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2502](https://www.sqlalchemy.org/trac/ticket/2502)
- en: '**[sql] [feature]**'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for DELETE and UPDATE from an alias of a table, which would assumedly
    be related to itself elsewhere in the query, courtesy Ryan Kelly.
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对从表的别名进行的 DELETE 和 UPDATE 的支持，这些表可能在查询中的其他地方与自身关联，由 Ryan Kelly 提供。
- en: 'References: [#2507](https://www.sqlalchemy.org/trac/ticket/2507)'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2507](https://www.sqlalchemy.org/trac/ticket/2507)
- en: '**[sql] [feature]**'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: select() features a correlate_except() method, auto correlates all selectables
    except those passed.
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 现在具有 correlate_except() 方法，自动关联除传递的其他所有可选择项。
- en: '**[sql] [feature]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The prefix_with() method is now available on each of select(), insert(), update(),
    delete(), all with the same API, accepting multiple prefix calls, as well as a
    “dialect name” so that the prefix can be limited to one kind of dialect.
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix_with() 方法现在可在每个 select()、insert()、update()、delete() 上使用，具有相同的 API，接受多个前缀调用，以及“方言名称”，以便将前缀限制为一种方言。
- en: 'References: [#2431](https://www.sqlalchemy.org/trac/ticket/2431)'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2431](https://www.sqlalchemy.org/trac/ticket/2431)
- en: '**[sql] [feature]**'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added reduce_columns() method to select() construct, replaces columns inline
    using the util.reduce_columns utility function to remove equivalent columns. reduce_columns()
    also adds “with_only_synonyms” to limit the reduction just to those columns which
    have the same name. The deprecated fold_equivalents() feature is removed.
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 reduce_columns() 方法添加到 select() 构造中，使用 util.reduce_columns 实用函数内联替换列以删除等效列。reduce_columns()
    还添加了“with_only_synonyms”，以限制只减少具有相同名称的列。移除了已弃用的 fold_equivalents() 功能。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[sql] [feature]**'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Reworked the startswith(), endswith(), contains() operators to do a better job
    with negation (NOT LIKE), and also to assemble them at compilation time so that
    their rendered SQL can be altered, such as in the case for Firebird STARTING WITH
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了 startswith()、endswith()、contains() 运算符，以更好地处理否定（NOT LIKE），并在编译时将它们组装起来，以便其生成的
    SQL 可以被修改，比如在 Firebird STARTING WITH 的情况下。
- en: 'References: [#2470](https://www.sqlalchemy.org/trac/ticket/2470)'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2470](https://www.sqlalchemy.org/trac/ticket/2470)
- en: '**[sql] [feature]**'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a hook to the system of rendering CREATE TABLE that provides access to
    the render for each Column individually, by constructing a @compiles function
    against the new schema.CreateColumn construct.
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向渲染 CREATE TABLE 的系统添加了一个钩子，通过针对新的 schema.CreateColumn 构造一个 @compiles 函数，为每个列提供访问渲染的功能。
- en: 'References: [#2463](https://www.sqlalchemy.org/trac/ticket/2463)'
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2463](https://www.sqlalchemy.org/trac/ticket/2463)
- en: '**[sql] [feature]**'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: ”scalar” selects now have a WHERE method to help with generative building. Also
    slight adjustment regarding how SS “correlates” columns; the new methodology no
    longer applies meaning to the underlying Table column being selected. This improves
    some fairly esoteric situations, and the logic that was there didn’t seem to have
    any purpose.
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “标量”选择现在具有 WHERE 方法，以帮助进行生成性构建。此外，在 SS “关联”列的方法上进行了轻微调整；新方法不再将含义应用于所选择的基础表列。这改进了一些相当微妙的情况，而且原有的逻辑似乎没有任何目的。
- en: '**[sql] [feature]**'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: An explicit error is raised when a ForeignKeyConstraint() that was constructed
    to refer to multiple remote tables is first used.
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当首次使用构造为引用多个远程表的 ForeignKeyConstraint() 时，将会明确引发错误。
- en: 'References: [#2455](https://www.sqlalchemy.org/trac/ticket/2455)'
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2455](https://www.sqlalchemy.org/trac/ticket/2455)
- en: '**[sql] [feature]**'
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_"), [`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike"), [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") to [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators").
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")、[`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike")、[`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") 添加到 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 中。
- en: 'References: [#2580](https://www.sqlalchemy.org/trac/ticket/2580)'
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2580](https://www.sqlalchemy.org/trac/ticket/2580)
- en: '**[sql] [change]**'
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change]**'
- en: The Text() type renders the length given to it, if a length was specified.
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Text() 类型呈现给定的长度，如果指定了长度。
- en: '**[sql] [changed]**'
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: Most classes in expression.sql are no longer preceded with an underscore, i.e.
    Label, SelectBase, Generative, CompareMixin. _BindParamClause is also renamed
    to BindParameter. The old underscore names for these classes will remain available
    as synonyms for the foreseeable future.
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expression.sql 中的大多数类不再以下划线开头，即 Label、SelectBase、Generative、CompareMixin。_BindParamClause
    也被重命名为 BindParameter。这些类的旧下划线名称将在可预见的未来保持可用。
- en: '**[sql] [bug]**'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where keyword arguments passed to `Compiler.process()` wouldn’t get
    propagated to the column expressions present in the columns clause of a SELECT
    statement. In particular this would come up when used by custom compilation schemes
    that relied upon special flags.
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将关键字参数传递给 `Compiler.process()` 时，不会将这些参数传播到 SELECT 语句的 columns 子句中的列表达式的
    bug。特别是在使用依赖于特殊标志的自定义编译方案时，这会出现问题。
- en: 'References: [#2593](https://www.sqlalchemy.org/trac/ticket/2593)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2593](https://www.sqlalchemy.org/trac/ticket/2593)
- en: '**[sql] [bug] [orm]**'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [orm]**'
- en: The auto-correlation feature of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), and by proxy that of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), will not take effect for a SELECT statement that is being
    rendered directly in the FROM list of the enclosing SELECT. Correlation in SQL
    only applies to column expressions such as those in the WHERE, ORDER BY, columns
    clause.
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的自相关特性，以及由此导致的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    的自相关特性，对于直接在封闭的 SELECT 的 FROM 列表中呈现的 SELECT 语句不会生效。在 SQL 中，自相关仅适用于诸如 WHERE、ORDER
    BY、columns 子句中的列表达式。'
- en: 'References: [#2595](https://www.sqlalchemy.org/trac/ticket/2595)'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2595](https://www.sqlalchemy.org/trac/ticket/2595)
- en: '**[sql] [bug]**'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A tweak to column precedence which moves the “concat” and “match” operators
    to be the same as that of “is”, “like”, and others; this helps with parenthesization
    rendering when used in conjunction with “IS”.
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对列优先级进行了微调，将 “concat” 和 “match” 操作符移到了与 “is”、“like” 等操作符相同的位置；这有助于在与 “IS” 结合使用时进行括号渲染。
- en: 'References: [#2564](https://www.sqlalchemy.org/trac/ticket/2564)'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2564](https://www.sqlalchemy.org/trac/ticket/2564)
- en: '**[sql] [bug]**'
  id: totrans-1053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Applying a column expression to a select statement using a label with or without
    other modifying constructs will no longer “target” that expression to the underlying
    Column; this affects ORM operations that rely upon Column targeting in order to
    retrieve results. That is, a query like query(User.id, User.id.label(‘foo’)) will
    now track the value of each “User.id” expression separately instead of munging
    them together. It is not expected that any users will be impacted by this; however,
    a usage that uses select() in conjunction with query.from_statement() and attempts
    to load fully composed ORM entities may not function as expected if the select()
    named Column objects with arbitrary .label() names, as these will no longer target
    to the Column objects mapped by that entity.
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对使用标签将列表达式应用于选择语句的操作进行了调整，无论是否有其他修改构造，都不再将该表达式“定位”到底层 Column；这会影响依赖于 Column
    定位以检索结果的 ORM 操作。也就是说，像 query(User.id, User.id.label('foo')) 这样的查询现在将分别跟踪每个 “User.id”
    表达式的值，而不是将它们混合在一起。预计不会影响任何用户；但是，如果使用 select() 结合 query.from_statement() 并尝试加载完全组合的
    ORM 实体，则可能会出现问题，因为 select() 将不再将带有任意 .label() 名称的 Column 对象定位到该实体映射的 Column 对象。
- en: 'References: [#2591](https://www.sqlalchemy.org/trac/ticket/2591)'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2591](https://www.sqlalchemy.org/trac/ticket/2591)
- en: '**[sql] [bug]**'
  id: totrans-1056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixes to the interpretation of the Column “default” parameter as a callable
    to not pass ExecutionContext into a keyword argument parameter.
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将 Column 的 “default” 参数解释为可调用对象时不将 ExecutionContext 传递给关键字参数的问题。
- en: 'References: [#2520](https://www.sqlalchemy.org/trac/ticket/2520)'
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2520](https://www.sqlalchemy.org/trac/ticket/2520)
- en: '**[sql] [bug]**'
  id: totrans-1059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: All of UniqueConstraint, ForeignKeyConstraint, CheckConstraint, and PrimaryKeyConstraint
    will attach themselves to their parent table automatically when they refer to
    a Table-bound Column object directly (i.e. not just string column name), and refer
    to one and only one Table. Prior to 0.8 this behavior occurred for UniqueConstraint
    and PrimaryKeyConstraint, but not ForeignKeyConstraint or CheckConstraint.
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有的 UniqueConstraint、ForeignKeyConstraint、CheckConstraint 和 PrimaryKeyConstraint
    在直接引用绑定到表的 Column 对象（即不仅仅是字符串列名）并且只引用一个表时，都会自动附加到它们的父表上。在 0.8 之前，这种行为发生在 UniqueConstraint
    和 PrimaryKeyConstraint 上，但不是 ForeignKeyConstraint 或 CheckConstraint。
- en: 'References: [#2410](https://www.sqlalchemy.org/trac/ticket/2410)'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2410](https://www.sqlalchemy.org/trac/ticket/2410)
- en: '**[sql] [bug]**'
  id: totrans-1062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: TypeDecorator now includes a generic repr() that works in terms of the “impl”
    type by default. This is a behavioral change for those TypeDecorator classes that
    specify a custom __init__ method; those types will need to re-define __repr__()
    if they need __repr__() to provide a faithful constructor representation.
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator 现在默认包含一个基于 “impl” 类型的通用 repr()。对于那些指定了自定义 __init__ 方法的 TypeDecorator
    类来说，这是一个行为变化；如果这些类型需要 __repr__() 提供忠实的构造函数表示，则需要重新定义 __repr__()。
- en: 'References: [#2594](https://www.sqlalchemy.org/trac/ticket/2594)'
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2594](https://www.sqlalchemy.org/trac/ticket/2594)
- en: '**[sql] [bug]**'
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: column.label(None) now produces an anonymous label, instead of returning the
    column object itself, consistent with the behavior of label(column, None).
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`column.label(None)` 现在生成一个匿名标签，而不是返回列对象本身，与 `label(column, None)` 的行为一致。'
- en: 'References: [#2168](https://www.sqlalchemy.org/trac/ticket/2168)'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2168](https://www.sqlalchemy.org/trac/ticket/2168)
- en: '**[sql] [removed]**'
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [已移除]**'
- en: The long-deprecated and non-functional `assert_unicode` flag on [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as well as [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") is removed.
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    以及 [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    上的长期弃用且无效的 `assert_unicode` 标志已被移除。
- en: postgresql
  id: totrans-1070
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: postgresql.ARRAY features an optional “dimension” argument, will assign a specific
    number of dimensions to the array which will render in DDL as ARRAY[][]…, also
    improves performance of bind/result processing.
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql.ARRAY 现在具有可选的 “dimension” 参数，将为数组分配特定数量的维度，这将在 DDL 中呈现为 ARRAY[][]…，还改善了绑定/结果处理的性能。
- en: 'References: [#2441](https://www.sqlalchemy.org/trac/ticket/2441)'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2441](https://www.sqlalchemy.org/trac/ticket/2441)
- en: '**[postgresql] [feature]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: postgresql.ARRAY now supports indexing and slicing. The Python [] operator is
    available on all SQL expressions that are of type ARRAY; integer or simple slices
    can be passed. The slices can also be used on the assignment side in the SET clause
    of an UPDATE statement by passing them into Update.values(); see the docs for
    examples.
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql.ARRAY 现在支持索引和切片。Python 的 [] 操作符在所有类型为 ARRAY 的 SQL 表达式上都可用；可以传递整数或简单切片。这些切片也可以在
    UPDATE 语句的 SET 子句中的赋值方面使用，方法是将它们传递给 Update.values()；有关示例，请参阅文档。
- en: '**[postgresql] [feature]**'
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added new “array literal” construct postgresql.array(). Basically a “tuple”
    that renders as ARRAY[1,2,3].
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 “数组字面量” 构造 postgresql.array()。基本上是一个呈现为 ARRAY[1,2,3] 的 “元组”。
- en: '**[postgresql] [feature]**'
  id: totrans-1078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for the PostgreSQL ONLY keyword, which can appear corresponding
    to a table in a SELECT, UPDATE, or DELETE statement. The phrase is established
    using with_hint(). Courtesy Ryan Kelly
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL ONLY 关键字的支持，该关键字可以在 SELECT、UPDATE 或 DELETE 语句中对应一个表出现。该短语是使用
    with_hint() 建立的。感谢 Ryan Kelly
- en: 'References: [#2506](https://www.sqlalchemy.org/trac/ticket/2506)'
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2506](https://www.sqlalchemy.org/trac/ticket/2506)
- en: '**[postgresql] [feature]**'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: 'The “ischema_names” dictionary of the PostgreSQL dialect is “unofficially”
    customizable. Meaning, new types such as PostGIS types can be added into this
    dictionary, and the PG type reflection code should be able to handle simple types
    with variable numbers of arguments. The functionality here is “unofficial” for
    three reasons:'
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 方言的 “ischema_names” 字典是 “非官方” 可自定义的。这意味着，可以将新类型（例如 PostGIS 类型）添加到该字典中，并且
    PG 类型反射代码应该能够处理具有可变数量参数的简单类型。这里的功能性是 “非官方的” ，有三个原因：
- en: this is not an “official” API. Ideally an “official” API would allow custom
    type-handling callables at the dialect or global level in a generic way.
  id: totrans-1083
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这不是一个 “官方” API。理想情况下，一个 “官方” API 应该允许在方言或全局级别以一种通用方式添加自定义类型处理可调用对象。
- en: This is only implemented for the PG dialect, in particular because PG has broad
    support for custom types vs. other database backends. A real API would be implemented
    at the default dialect level.
  id: totrans-1084
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这仅针对PG方言实现，特别是因为PG对自定义类型有广泛支持，与其他数据库后端不同。真正的API将在默认方言级别实现。
- en: The reflection code here is only tested against simple types and probably has
    issues with more compositional types.
  id: totrans-1085
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此处的反射代码仅针对简单类型进行了测试，可能在更复杂类型上存在问题。
- en: patch courtesy Éric Lemoine.
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 补丁由Éric Lemoine提供。
- en: mysql
  id: totrans-1087
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added TIME type to mysql dialect, accepts “fst” argument which is the new “fractional
    seconds” specifier for recent MySQL versions. The datatype will interpret a microseconds
    portion received from the driver, however note that at this time most/all MySQL
    DBAPIs do not support returning this value.
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将TIME类型添加到mysql方言中，接受“fst”参数，这是最近MySQL版本的新“分数秒”指定符。数据类型将解释从驱动程序接收的微秒部分，但请注意，目前大多数/所有MySQL
    DBAPI不支持返回此值。
- en: 'References: [#2534](https://www.sqlalchemy.org/trac/ticket/2534)'
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2534](https://www.sqlalchemy.org/trac/ticket/2534)
- en: '**[mysql] [bug]**'
  id: totrans-1091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Dialect no longer emits expensive server collations query, as well as server
    casing, on first connect. These functions are still available as semi-private.
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在首次连接时不再发出昂贵的服务器排序查询，以及服务器大小写查询。这些功能仍然作为半私有功能可用。
- en: 'References: [#2404](https://www.sqlalchemy.org/trac/ticket/2404)'
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2404](https://www.sqlalchemy.org/trac/ticket/2404)
- en: sqlite
  id: totrans-1094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: the SQLite date and time types have been overhauled to support a more open ended
    format for input and output, using name based format strings and regexps. A new
    argument “microseconds” also provides the option to omit the “microseconds” portion
    of timestamps. Thanks to Nathan Wright for the work and tests on this.
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite的日期和时间类型已经进行了全面改进，以支持更开放的输入和输出格式，使用基于名称的格式字符串和正则表达式。新参数“microseconds”还提供了省略时间戳中的“微秒”部分的选项。感谢Nathan
    Wright在此方面的工作和测试。
- en: 'References: [#2363](https://www.sqlalchemy.org/trac/ticket/2363)'
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2363](https://www.sqlalchemy.org/trac/ticket/2363)
- en: '**[sqlite]**'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Added [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR"),
    [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")
    to the SQLite dialect’s list of recognized type names for reflection. SQLite returns
    the name given to a type as the name returned.
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")、[`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR")添加到SQLite方言的已识别类型名称列表中以供反射使用。SQLite返回给定类型的名称作为返回的名称。
- en: 'References: [rc3addcc9ffad](https://www.sqlalchemy.org/trac/changeset/c3addcc9ffad)'
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[rc3addcc9ffad](https://www.sqlalchemy.org/trac/changeset/c3addcc9ffad)
- en: mssql
  id: totrans-1101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: SQL Server dialect can be given database-qualified schema names, i.e. “schema=’mydatabase.dbo’”;
    reflection operations will detect this, split the schema among the “.” to get
    the owner separately, and emit a “USE mydatabase” statement before reflecting
    targets within the “dbo” owner; the existing database returned from DB_NAME()
    is then restored.
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server方言可以给出数据库限定的模式名称，即“schema='mydatabase.dbo'”；反射操作将检测到这一点，将模式分割在“.”之间以单独获取所有者，并在反射目标内部发出“USE
    mydatabase”语句；然后恢复从DB_NAME()返回的现有数据库。
- en: '**[mssql] [feature]**'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: updated support for the mxodbc driver; mxodbc 3.2.1 is recommended for full
    compatibility.
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了对mxodbc驱动程序的支持；建议使用mxodbc 3.2.1以获得完全兼容性。
- en: '**[mssql] [bug]**'
  id: totrans-1106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: removed legacy behavior whereby a column comparison to a scalar SELECT via ==
    would coerce to an IN with the SQL server dialect. This is implicit behavior which
    fails in other scenarios so is removed. Code which relies on this needs to be
    modified to use column.in_(select) explicitly.
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了旧版本行为，即通过==与标量SELECT进行列比较会强制转换为SQL服务器方言的IN。这是隐式行为，在其他情况下会失败，因此被移除。依赖此行为的代码需要修改为显式使用column.in_(select)。
- en: 'References: [#2277](https://www.sqlalchemy.org/trac/ticket/2277)'
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2277](https://www.sqlalchemy.org/trac/ticket/2277)
- en: oracle
  id: totrans-1109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-1110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The types of columns excluded from the setinputsizes() set can be customized
    by sending a list of string DBAPI type names to exclude, using the exclude_setinputsizes
    dialect parameter. This list was previously fixed. The list also now defaults
    to STRING, UNICODE, removing CLOB, NCLOB from the list.
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '可以通过将排除的字符串DBAPI类型名称列表发送到exclude_setinputsizes方���参数来自定义不包括在setinputsizes()集中的列的类型。此列表以前是固定的。该列表现在默认为STRING、UNICODE，移除了CLOB、NCLOB。 '
- en: 'References: [#2561](https://www.sqlalchemy.org/trac/ticket/2561)'
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2561](https://www.sqlalchemy.org/trac/ticket/2561)
- en: '**[oracle] [bug]**'
  id: totrans-1113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Quoting information is now passed along from a Column with quote=True when generating
    a same-named bound parameter to the bindparam() object, as is the case in generated
    INSERT and UPDATE statements, so that unknown reserved names can be fully supported.
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当生成同名绑定参数到bindparam()对象时，现在会从具有quote=True的Column中传递引用信息，就像在生成的INSERT和UPDATE语句中一样，以便完全支持未知的保留名称。
- en: 'References: [#2437](https://www.sqlalchemy.org/trac/ticket/2437)'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2437](https://www.sqlalchemy.org/trac/ticket/2437)
- en: '**[oracle] [bug]**'
  id: totrans-1116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The CreateIndex construct in Oracle will now schema-qualify the name of the
    index to be that of the parent table. Previously this name was omitted which apparently
    creates the index in the default schema, rather than that of the table.
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Oracle中，CreateIndex构造现在将索引的名称模式限定为父表的名称。以前，此名称被省略，显然会在默认模式中创建索引，而不是表的模式。
- en: misc
  id: totrans-1118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [access]**'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [access]**'
- en: the MS Access dialect has been moved to its own project on Bitbucket, taking
    advantage of the new SQLAlchemy dialect compliance suite. The dialect is still
    in very rough shape and probably not ready for general use yet, however it does
    have *extremely* rudimental functionality now. [https://bitbucket.org/zzzeek/sqlalchemy-access](https://bitbucket.org/zzzeek/sqlalchemy-access)
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MS Access方言已移至Bitbucket上的自己的项目，利用了新的SQLAlchemy方言兼容性套件。该方言仍然处于非常初步的阶段，可能还没有准备好供一般使用，但现在具有*极其*基本的功能。[https://bitbucket.org/zzzeek/sqlalchemy-access](https://bitbucket.org/zzzeek/sqlalchemy-access)
- en: '**[feature] [firebird]**'
  id: totrans-1121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: The “startswith()” operator renders as “STARTING WITH”, “~startswith()” renders
    as “NOT STARTING WITH”, using FB’s more efficient operator.
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “startswith()”运算符渲染为“STARTING WITH”，“~startswith()”渲染为“NOT STARTING WITH”，使用FB更有效的运算符。
- en: 'References: [#2470](https://www.sqlalchemy.org/trac/ticket/2470)'
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2470](https://www.sqlalchemy.org/trac/ticket/2470)
- en: '**[feature] [firebird]**'
  id: totrans-1124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: An experimental dialect for the fdb driver is added, but is untested as I cannot
    get the fdb package to build.
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个用于fdb驱动程序的实验性方言，但由于无法构建fdb软件包，因此未经测试。
- en: 'References: [#2504](https://www.sqlalchemy.org/trac/ticket/2504)'
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2504](https://www.sqlalchemy.org/trac/ticket/2504)
- en: '**[bug] [firebird]**'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: CompileError is raised when VARCHAR with no length is attempted to be emitted,
    same way as MySQL.
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试发出没有长度的VARCHAR时，会引发CompileError，与MySQL的方式相同。
- en: 'References: [#2505](https://www.sqlalchemy.org/trac/ticket/2505)'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2505](https://www.sqlalchemy.org/trac/ticket/2505)
- en: '**[bug] [firebird]**'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Firebird now uses strict “ansi bind rules” so that bound parameters don’t render
    in the columns clause of a statement - they render literally instead.
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird现在使用严格的“ansi绑定规则”，以便绑定参数不会在语句的列子句中呈现-它们会直接呈现。
- en: '**[bug] [firebird]**'
  id: totrans-1132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Support for passing datetime as date when using the DateTime type with Firebird;
    other dialects support this.
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用DateTime类型与Firebird时，支持将datetime作为date传递；其他方言也支持此功能。
- en: '**[moved] [maxdb]**'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[moved] [maxdb]**'
- en: The MaxDB dialect, which hasn’t been functional for several years, is moved
    out to a pending bitbucket project, [https://bitbucket.org/zzzeek/sqlalchemy-maxdb](https://bitbucket.org/zzzeek/sqlalchemy-maxdb).
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MaxDB方言已经多年没有功能了，现在移至一个待定的bitbucket项目中，[https://bitbucket.org/zzzeek/sqlalchemy-maxdb](https://bitbucket.org/zzzeek/sqlalchemy-maxdb)。
- en: 0.8.7
  id: totrans-1136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.7
- en: 'Released: July 22, 2014'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年7月22日
- en: orm
  id: totrans-1138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的错误，其中在多态子类边界上的长链急加载与多态加载一起会无法找到子类链接，导致在[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上出现缺少属性名称的错误。
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM bug，其中 [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 函数会掩盖应该在 mapper 配置期间由于用户错误而引发的 AttributeErrors
    或 KeyErrors。对于属性/键错误的捕获已更具体，以不包括配置步骤。
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: sql
  id: totrans-1145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    和其他 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    子类中直接将类型与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    关联时会导致在发出事件（如创建事件）时挂起的 bug。
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义操作符加法 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 系统中的一个错误，当与变体一起使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 时，使用比较运算符会导致 MRO 错误。
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 INSERT..FROM SELECT 结构中的一个 bug，其中从 UNION 中选择会将 union 包装在一个匿名的子查询中。
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用空的 [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    或 [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    或其他空白表达式时，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") 和 [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") 会产生空的 WHERE 子句的 bug。现在这与 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的行为一致了。
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: postgresql
  id: totrans-1158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `hashable=False` 标志添加到 PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型中，这是为了允许 ORM 在请求混合列/实体列表中的 ORM 映射的
    HSTORE 列时跳过尝试“散列”ORM 映射的 HSTORE 列所需的。修补程序由 Gunnlaugur Þór Briem 提供。
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-1162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“断开连接”消息“连接已意外关闭”。这似乎与较新版本的SSL有关。感谢Antti Haapala提供的拉取请求。
- en: mysql
  id: totrans-1164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL错误2014“命令不同步”似乎是在现代MySQL-Python版本中作为ProgrammingError而不是OperationalError引发的；所有经过测试的MySQL错误代码“is
    disconnect”现在都在OperationalError和ProgrammingError中进行检查。
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: '**[mysql] [bug]**'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在索引的`mysql_length`参数中添加的列名需要具有相同的引号才能被识别。修复使引号变为可选，但也为那些使用解决方法的人提供了旧的行为以实现向后兼容。
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对包含KEY_BLOCK_SIZE的索引使用等号的表进行反射的支持。感谢Sean McGivern提供的拉取请求。
- en: mssql
  id: totrans-1173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将语句编码添加到“SET IDENTITY_INSERT”语句中，当在IDENTITY列中插入显式INSERT时进行操作，以支持在不支持unicode语句的驱动程序（如pyodbc
    + unix + py2k）上使用非ascii表标识符。
- en: '**[mssql] [bug]**'
  id: totrans-1176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server pyodbc方言中，修复了`description_encoding`方言参数的实现，当未明确设置时，会导致在包含其他编码名称的结果集中无法正确解析cursor.description。今后不应该需要此参数。
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: misc
  id: totrans-1179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [declarative]**'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问`__mapper_args__`字典时，它是从声明性mixin或抽象类中复制的，以便声明性本身对该字典所做的修改不会与其他映射发生冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，用本地类/表正式映射到的列替换其中的列。
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的bug，即[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未为`setdefault()`字典操作报告更改事件。
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-1186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")未返回现有值或新值的bug（此bug未在任何0.8版本中发布）。感谢Thomas
    Hervé提供的拉取请求。
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: orm
  id: totrans-1189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询贪婪加载中的错误，在多态子类边界上长链贪婪加载与多态加载结合使用时，会无法找到链中的子类链接，会在一个[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上出错，缺少属性名称。
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 中的错误，[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")函数会掩盖应该在映射器配置期间由于用户错误而引发的 AttributeErrors 或 KeyErrors。对于属性/键错误的捕获已经更具体，不包括配置步骤。
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: sql
  id: totrans-1196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和其他[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类中的错误，在直接将类型与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联时，当在[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上触发事件（如创建事件）时会导致 hang。
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义操作符加上[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")系统中的错误，其中使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")与 variant 一起时，在使用比较运算符时会出现 MRO 错误。
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 INSERT..FROM SELECT 结构中的错误，其中从 UNION 中选择会将联合包装在一个匿名（例如未标记）子查询中。
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-1206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空白表达式时，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")会生成空的 WHERE 子句的错误。现在，这与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的行为一致。
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-1208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: postgresql
  id: totrans-1209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")类型添加了`hashable=False`标志，这是为了允许ORM在请求混合列/实体列表中的ORM映射的HSTORE列时跳过尝试“哈希”它。补丁由Gunnlaugur
    Þór Briem提供。
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-1213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的SSL有关。感谢Antti Haapala的拉取请求。
- en: mysql
  id: totrans-1215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL错误2014“commands out of sync”似乎在现代MySQL-Python版本中被提升为ProgrammingError，而不是OperationalError；现在所有被测试为“is
    disconnect”的MySQL错误代码都在OperationalError和ProgrammingError中进行检查。
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: '**[mysql] [bug]**'
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在索引的`mysql_length`参数上添加列名时，需要对带引号的名称使用相同的引号才能被识别的错误。修复使引号变为可选，但也为那些使用此解决方法的人提供了旧的行为以实现向后兼容。
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-1222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对包含KEY_BLOCK_SIZE的索引使用等号进行反射表的支持。感谢Sean McGivern的拉取请求。
- en: mssql
  id: totrans-1224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“SET IDENTITY_INSERT”语句中添加了语句编码，当在IDENTITY列中插入显式INSERT时，以支持在不支持unicode语句的驱动程序（如pyodbc
    + unix + py2k）上操作非ascii表标识符。
- en: '**[mssql] [bug]**'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server pyodbc方言中，修复了`description_encoding`方言参数的实现，当未显式设置时，会导致在包含以其他编码命名的名称的结果集中，无法正确解析cursor.description。这个参数在未来不应该需要。
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: misc
  id: totrans-1230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-1231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问`__mapper_args__`字典时，该字典是从声明性mixin或抽象类中复制的，因此声明性本身对该字典所做的修改不会与其他映射冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，用本地类/表正式映射到的列替换其中的列。
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，即[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未��告`setdefault()`字典操作的更改事件。
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")方法未返回现有值或新值的错误（此错误未在任何0.8版本中发布）。感谢Thomas
    Hervé提供的拉取请求。
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: 0.8.6
  id: totrans-1240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.6
- en: 'Released: March 28, 2014'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年3月28日
- en: general
  id: totrans-1242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [bug]**'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Adjusted `setup.py` file to support the possible future removal of the `setuptools.Feature`
    extension from setuptools. If this keyword isn’t present, the setup will still
    succeed with setuptools rather than falling back to distutils. C extension building
    can be disabled now also by setting the DISABLE_SQLALCHEMY_CEXT environment variable.
    This variable works whether or not setuptools is even available.
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`setup.py`文件，以支持可能将来从setuptools中删除`setuptools.Feature`扩展。如果不存在此关键字，设置仍将成功使用setuptools而不是退回到distutils。现在还可以通过设置DISABLE_SQLALCHEMY_CEXT环境变量来禁用C扩展构建。无论setuptools是否可用，此变量都有效。
- en: 'References: [#2986](https://www.sqlalchemy.org/trac/ticket/2986)'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2986](https://www.sqlalchemy.org/trac/ticket/2986)
- en: orm
  id: totrans-1246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where changing the primary key of an object, then marking it for
    DELETE would fail to target the correct row for DELETE.
  id: totrans-1248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的错误，即更改对象的主键，然后将其标记为DELETE会导致无法针对DELETE操作正确定位行的错误。
- en: 'References: [#3006](https://www.sqlalchemy.org/trac/ticket/3006)'
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3006](https://www.sqlalchemy.org/trac/ticket/3006)
- en: '**[orm] [bug]**'
  id: totrans-1250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8.3 as a result of [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") wouldn’t work on a query that only had a [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") entry but no other entities.
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#2818](https://www.sqlalchemy.org/trac/ticket/2818)导致0.8.3中的回归，[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在只有一个[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")条目但没有其他实体的查询上无法工作。
- en: 'References: [#2995](https://www.sqlalchemy.org/trac/ticket/2995)'
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2995](https://www.sqlalchemy.org/trac/ticket/2995)
- en: '**[orm] [bug]**'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved an error message which would occur if a query() were made against a
    non-selectable, such as a [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column"), and then an attempt was made to use
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    such that the “left” side would be determined as `None` and then fail. This condition
    is now detected explicitly.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了一个错误消息，该错误消息会在对非可选择对象（例如[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")）进行查询（`query()`）后，尝试使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时出现，使得“左”侧被确定为`None`然后失败。现在明确检测到这种情况。
- en: '**[orm] [bug]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed stale names from `sqlalchemy.orm.interfaces.__all__` and refreshed with
    current names, so that an `import *` from this module again works.
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`sqlalchemy.orm.interfaces.__all__`中删除了过时的名称，并更新为当前名称，以便再次从该模块进行`import *`操作。
- en: 'References: [#2975](https://www.sqlalchemy.org/trac/ticket/2975)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2975](https://www.sqlalchemy.org/trac/ticket/2975)
- en: sql
  id: totrans-1258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct where the “type” of essentially
    the first SQL expression would be applied as the “comparison type” to a compared
    tuple value; this has the effect in some cases of an inappropriate “type coercion”
    occurring, such as when a tuple that has a mix of String and Binary values improperly
    coerces target values to Binary even though that’s not what they are on the left
    side. [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    now expects heterogeneous types within its list of values.
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    构造中的错误，其中基本上第一个 SQL 表达式的“类型”将被应用为比较元组值的“比较类型”；在某些情况下，这会导致不合适的“类型强制转换”发生，例如当一个元组具有字符串和二进制值的混合时，错误地将目标值强制转换为二进制，即使左侧的值并非如此。[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") 现在预期其值列表中有异构类型。
- en: 'References: [#2977](https://www.sqlalchemy.org/trac/ticket/2977)'
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2977](https://www.sqlalchemy.org/trac/ticket/2977)
- en: postgresql
  id: totrans-1262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Enabled “sane multi-row count” checking for the psycopg2 DBAPI, as this seems
    to be supported as of psycopg2 2.0.9.
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用了 psycopg2 DBAPI 的“合理的多行计数”检查，因为从 psycopg2 2.0.9 开始似乎支持了这个功能。
- en: '**[postgresql] [bug]**'
  id: totrans-1265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by release 0.8.5 / 0.9.3’s compatibility enhancements
    where index reflection on PostgreSQL versions specific to only the 8.1, 8.2 series
    again broke, surrounding the ever problematic int2vector type. While int2vector
    supports array operations as of 8.1, apparently it only supports CAST to a varchar
    as of 8.3.
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于版本 0.8.5 / 0.9.3 的兼容性增强引起的固定回归，再次导致仅针对 8.1、8.2 系列的 PostgreSQL 版本的索引反射再次中断，围绕着一直存在问题的
    int2vector 类型。虽然 int2vector 支持从 8.1 开始的数组操作，但显然，从 8.3 开始只支持 CAST 到 varchar。
- en: 'References: [#3000](https://www.sqlalchemy.org/trac/ticket/3000)'
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3000](https://www.sqlalchemy.org/trac/ticket/3000)
- en: misc
  id: totrans-1268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension as well as [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") where the change event would not be
    propagated if the attribute had been reassigned to itself.
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展和 [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 中的错误，如果属性已重新分配给自身，则更改事件将不会传播。
- en: 'References: [#2997](https://www.sqlalchemy.org/trac/ticket/2997)'
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2997](https://www.sqlalchemy.org/trac/ticket/2997)
- en: general
  id: totrans-1272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [bug]**'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Adjusted `setup.py` file to support the possible future removal of the `setuptools.Feature`
    extension from setuptools. If this keyword isn’t present, the setup will still
    succeed with setuptools rather than falling back to distutils. C extension building
    can be disabled now also by setting the DISABLE_SQLALCHEMY_CEXT environment variable.
    This variable works whether or not setuptools is even available.
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 `setup.py` 文件，以支持可能将来从 setuptools 中移除 `setuptools.Feature` 扩展。如果没有这个关键字，设置仍然会成功使用
    setuptools 而不是回退到 distutils。现在也可以通过设置 DISABLE_SQLALCHEMY_CEXT 环境变量来禁用 C 扩展构建。此变量无论
    setuptools 是否可用都有效。
- en: 'References: [#2986](https://www.sqlalchemy.org/trac/ticket/2986)'
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2986](https://www.sqlalchemy.org/trac/ticket/2986)
- en: orm
  id: totrans-1276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where changing the primary key of an object, then marking it for
    DELETE would fail to target the correct row for DELETE.
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 中的错误，在更改对象的主键后，将其标记为 DELETE 将无法针对正确的行进行 DELETE。
- en: 'References: [#3006](https://www.sqlalchemy.org/trac/ticket/3006)'
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3006](https://www.sqlalchemy.org/trac/ticket/3006)
- en: '**[orm] [bug]**'
  id: totrans-1280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8.3 as a result of [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") wouldn’t work on a query that only had a [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") entry but no other entities.
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 0.8.3 的回归中修复了问题，这是由于 [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    导致的，[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") 在只有一个 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 条目但没有其他实体的查询上无法工作。
- en: 'References: [#2995](https://www.sqlalchemy.org/trac/ticket/2995)'
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2995](https://www.sqlalchemy.org/trac/ticket/2995)
- en: '**[orm] [bug]**'
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved an error message which would occur if a query() were made against a
    non-selectable, such as a [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column"), and then an attempt was made to use
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    such that the “left” side would be determined as `None` and then fail. This condition
    is now detected explicitly.
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了一个错误消息，该消息会在对非可选择对象（例如[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")）进行查询（`query()`）后，尝试使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时出现，导致“左”侧被确定为`None`然后失败。现在明确检测到这种情况。
- en: '**[orm] [bug]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed stale names from `sqlalchemy.orm.interfaces.__all__` and refreshed with
    current names, so that an `import *` from this module again works.
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`sqlalchemy.orm.interfaces.__all__`中删除了过时的名称，并使用当前名称进行刷新，以便再次从该模块进行`import
    *`操作。
- en: 'References: [#2975](https://www.sqlalchemy.org/trac/ticket/2975)'
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2975](https://www.sqlalchemy.org/trac/ticket/2975)
- en: sql
  id: totrans-1288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct where the “type” of essentially
    the first SQL expression would be applied as the “comparison type” to a compared
    tuple value; this has the effect in some cases of an inappropriate “type coercion”
    occurring, such as when a tuple that has a mix of String and Binary values improperly
    coerces target values to Binary even though that’s not what they are on the left
    side. [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    now expects heterogeneous types within its list of values.
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")构造中的bug，其中基本上第一个SQL表达式的“类型”将被应用为与比较的元组值的“比较类型”；在某些情况下，这会导致不适当的“类型强制转换”发生，例如当一个元组具有混合的String和Binary值时，错误��将目标值强制转换为Binary，即使左侧并不是这样。[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")现在期望其值列表中存在异构类型。
- en: 'References: [#2977](https://www.sqlalchemy.org/trac/ticket/2977)'
  id: totrans-1291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2977](https://www.sqlalchemy.org/trac/ticket/2977)
- en: postgresql
  id: totrans-1292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Enabled “sane multi-row count” checking for the psycopg2 DBAPI, as this seems
    to be supported as of psycopg2 2.0.9.
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为psycopg2 DBAPI启用了“合理的多行计数”检查，因为似乎从psycopg2 2.0.9开始支持这一功能。
- en: '**[postgresql] [bug]**'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by release 0.8.5 / 0.9.3’s compatibility enhancements
    where index reflection on PostgreSQL versions specific to only the 8.1, 8.2 series
    again broke, surrounding the ever problematic int2vector type. While int2vector
    supports array operations as of 8.1, apparently it only supports CAST to a varchar
    as of 8.3.
  id: totrans-1296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由版本0.8.5 / 0.9.3的兼容性增强引起的回归，其中针对仅适用于8.1、8.2系列的PostgreSQL版本的索引反射再次中断，围绕着一直存在问题的int2vector类型。虽然int2vector从8.1开始支持数组操作，但显然只有从8.3开始才支持将其转换为varchar。
- en: 'References: [#3000](https://www.sqlalchemy.org/trac/ticket/3000)'
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3000](https://www.sqlalchemy.org/trac/ticket/3000)
- en: misc
  id: totrans-1298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension as well as [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") where the change event would not be
    propagated if the attribute had been reassigned to itself.
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误以及[`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified")中的bug，如果属性已重新分配给自身，则更改事件将不会传播。
- en: 'References: [#2997](https://www.sqlalchemy.org/trac/ticket/2997)'
  id: totrans-1301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2997](https://www.sqlalchemy.org/trac/ticket/2997)
- en: 0.8.5
  id: totrans-1302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.5
- en: 'Released: February 19, 2014'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年2月19日
- en: orm
  id: totrans-1304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") would fail to consistently raise the [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") that invokes when called on a query with
    existing criterion, when the given identity is already present in the identity
    map.
  id: totrans-1306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")中的bug，当在具有现有条件的查询上调用时，给定的标识已经存在于标识映射中时，它将无法一致地引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: 'References: [#2951](https://www.sqlalchemy.org/trac/ticket/2951)'
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2951](https://www.sqlalchemy.org/trac/ticket/2951)
- en: '**[orm] [bug]**'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed error message when an iterator object is passed to [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") or similar, where the error would fail to render
    on string formatting. Pullreq courtesy Kyle Stark.
  id: totrans-1309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当向[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")或类似函数传递迭代器对象时，错误消息无法正确呈现的错误。Kyle Stark 提供的 Pullreq。
- en: '**[orm] [bug]**'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An adjustment to the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") strategy which ensures that the query runs after
    the loading process has begun; this is so that the subqueryload takes precedence
    over other loaders that may be hitting the same attribute due to other eager/noload
    situations at the wrong time.
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")策略的调整，确保查询在加载过程开始后运行；这样子查询加载就优先于其他可能在错误的时间由于其他急切/不加载情况而命中同一属性的加载器。
- en: 'References: [#2887](https://www.sqlalchemy.org/trac/ticket/2887)'
  id: totrans-1312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2887](https://www.sqlalchemy.org/trac/ticket/2887)
- en: '**[orm] [bug]**'
  id: totrans-1313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug when using joined table inheritance from a table to a select/alias
    on the base, where the PK columns were also not same named; the persistence system
    would fail to copy primary key values from the base table to the inherited table
    upon INSERT.
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当从基表继承到一个选择/别名的联接表继承时，PK列也不具有相同名称时的错误，此时持久化系统会在插入时失败，无法将主键值从基表复制到继承表。
- en: 'References: [#2885](https://www.sqlalchemy.org/trac/ticket/2885)'
  id: totrans-1315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2885](https://www.sqlalchemy.org/trac/ticket/2885)
- en: '**[orm] [bug]**'
  id: totrans-1316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    will raise an informative error message when the columns/attribute (names) passed
    don’t resolve to a Column or mapped attribute (such as an erroneous tuple); previously
    raised an unbound local.'
  id: totrans-1317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的列/属性（名称）不能解析为列或映射属性（例如错误的元组）时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")将引发一个信息性错误消息；以前会引发一个未绑定的本地错误。
- en: 'References: [#2889](https://www.sqlalchemy.org/trac/ticket/2889)'
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2889](https://www.sqlalchemy.org/trac/ticket/2889)
- en: engine
  id: totrans-1319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [pool]**'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed a critical regression caused by [#2880](https://www.sqlalchemy.org/trac/ticket/2880)
    where the newly concurrent ability to return connections from the pool means that
    the “first_connect” event is now no longer synchronized either, thus leading to
    dialect mis-configurations under even minimal concurrency situations.
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2880](https://www.sqlalchemy.org/trac/ticket/2880)引起的关键性回归，其中新的并发能力从池中返回连接意味着“first_connect”事件现在也不再同步，因此在即使是最小并发情况下也会导致方言配置错误。
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)'
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)
- en: sql
  id: totrans-1323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where calling [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with an empty list or tuple would raise
    an IndexError. It now produces an empty insert construct as would be the case
    with an empty dictionary.
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用空列表或元组调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")会引发 IndexError 的错误。现在它会产生一个空的插入构造，就像空字典的情况一样。
- en: 'References: [#2944](https://www.sqlalchemy.org/trac/ticket/2944)'
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2944](https://www.sqlalchemy.org/trac/ticket/2944)
- en: '**[sql] [bug]**'
  id: totrans-1327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") would go into an endless loop
    if erroneously passed a column expression whose comparator included the `__getitem__()`
    method, such as a column that uses the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type.
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")被错误地传递包含`__getitem__()`方法的列表达式时进入无限循环的错误，例如使用[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型的列。
- en: 'References: [#2957](https://www.sqlalchemy.org/trac/ticket/2957)'
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2957](https://www.sqlalchemy.org/trac/ticket/2957)
- en: '**[sql] [bug]**'
  id: totrans-1330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a primary key column that has a Sequence on it, yet the column
    is not the “auto increment” column, either because it has a foreign key constraint
    or `autoincrement=False` set, would attempt to fire the Sequence on INSERT for
    backends that don’t support sequences, when presented with an INSERT missing the
    primary key value. This would take place on non-sequence backends like SQLite,
    MySQL.
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即具有 Sequence 的主键列，但该列不是“自动增量”列，要么因为有外键约束，要么设置了 `autoincrement=False`，在没有主键值的
    INSERT 中尝试触发 Sequence，对于不支持序列的后端（如 SQLite、MySQL）会发生这种情况。
- en: 'References: [#2896](https://www.sqlalchemy.org/trac/ticket/2896)'
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2896](https://www.sqlalchemy.org/trac/ticket/2896)
- en: '**[sql] [bug]**'
  id: totrans-1333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method where the order of the
    given names would not be taken into account when generating the INSERT statement,
    thus producing a mismatch versus the column names in the given SELECT statement.
    Also noted that [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") implies that Python-side insert
    defaults cannot be used, since the statement has no VALUES clause.
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 方法的 bug，其中给定名称的顺序在生成 INSERT 语句时不会被考虑，因此与给定
    SELECT 语句中的列名不匹配。还注意到 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 暗示不能使用 Python 端的插入默认值，因为语句没有 VALUES
    子句。
- en: 'References: [#2895](https://www.sqlalchemy.org/trac/ticket/2895)'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2895](https://www.sqlalchemy.org/trac/ticket/2895)
- en: '**[sql] [enhancement]**'
  id: totrans-1336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [enhancement]**'
- en: The exception raised when a [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is present in a compiled statement
    without a value now includes the key name of the bound parameter in the error
    message.
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当编译语句中存在一个未设置值的 [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 时，引发的异常现在在错误消息中包含绑定参数的键名。
- en: postgresql
  id: totrans-1338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added an additional message to psycopg2 disconnect detection, “could not send
    data to server”, which complements the existing “could not receive data from server”
    and has been observed by users.
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 psycopg2 断开连接检测添加了额外的消息，“无法向服务器发送数据”，这与现有的“无法从服务器接收数据”相辅相成，并已被用户观察到。
- en: 'References: [#2936](https://www.sqlalchemy.org/trac/ticket/2936)'
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2936](https://www.sqlalchemy.org/trac/ticket/2936)
- en: '**[postgresql] [bug]**'
  id: totrans-1342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Support has been improved for PostgreSQL reflection behavior on very old (pre
    8.1) versions of PostgreSQL, and potentially other PG engines such as Redshift
    (assuming Redshift reports the version as < 8.1). The query for “indexes” as well
    as “primary keys” relies upon inspecting a so-called “int2vector” datatype, which
    refuses to coerce to an array prior to 8.1 causing failures regarding the “ANY()”
    operator used in the query. Extensive googling has located the very hacky, but
    recommended-by-PG-core-developer query to use when PG version < 8.1 is in use,
    so index and primary key constraint reflection now work on these versions.
  id: totrans-1343
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 改进了对非常古老（8.1 之前）版本的 PostgreSQL 反射行为的支持，以及潜在的其他 PG 引擎，如 Redshift（假设 Redshift
    报告版本为 < 8.1）。用于“索引”和“主键”的查询依赖于检查所谓的“int2vector”数据类型，该数据类型在 8.1 之前拒绝强制转换为数组，导致查询中使用的“ANY()”运算符失败。通过广泛的搜索，找到了非常巧妙但被
    PG 核心开发人员推荐使用的查询，用于在使用 PG 版本 < 8.1 时，现在索引和主键约束反射可以在这些版本上工作。
- en: '**[postgresql] [bug]**'
  id: totrans-1344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised this very old issue where the PostgreSQL “get primary key” reflection
    query were updated to take into account primary key constraints that were renamed;
    the newer query fails on very old versions of PostgreSQL such as version 7, so
    the old query is restored in those cases when server_version_info < (8, 0) is
    detected.
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个非常古老的问题，即 PostgreSQL 的“获取主键”反射查询已更新以考虑已重命名的主键约束；新的查询在 PostgreSQL 的非常古老版本（如版本
    7）上失败，因此在检测到 server_version_info < (8, 0) 的情况下，在这些情况下恢复了旧查询。
- en: 'References: [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: mysql
  id: totrans-1347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added new MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") which includes fractional seconds support;
    also added fractional seconds support to [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP"). DBAPI support is limited, though fractional
    seconds are known to be supported by MySQL Connector/Python. Patch courtesy Geert
    JM Vanderkelen.
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的MySQL特定[`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")，其中包括小数秒支持；还向[`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP")添加了小数秒支持。DBAPI支持有限，尽管MySQL Connector/Python已知支持小数秒。Patch由Geert
    JM Vanderkelen提供。
- en: 'References: [#2941](https://www.sqlalchemy.org/trac/ticket/2941)'
  id: totrans-1350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2941](https://www.sqlalchemy.org/trac/ticket/2941)
- en: '**[mysql] [bug]**'
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for the `PARTITION BY` and `PARTITIONS` MySQL table keywords,
    specified as `mysql_partition_by='value'` and `mysql_partitions='value'` to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Marcus McCurdy.
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`PARTITION BY`和`PARTITIONS` MySQL表关键字的支持，指定为`mysql_partition_by='value'`和`mysql_partitions='value'`以用于[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。拉取请求由Marcus McCurdy提供。
- en: 'References: [#2966](https://www.sqlalchemy.org/trac/ticket/2966)'
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2966](https://www.sqlalchemy.org/trac/ticket/2966)
- en: '**[mysql] [bug]**'
  id: totrans-1354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug which prevented MySQLdb-based dialects (e.g. pymysql) from working
    in Py3K, where a check for “connection charset” would fail due to Py3K’s more
    strict value comparison rules. The call in question wasn’t taking the database
    version into account in any case as the server version was still None at that
    point, so the method overall has been simplified to rely upon connection.character_set_name().
  id: totrans-1355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止基于MySQLdb的方言（例如pymysql）在Py3K中工作的错误，其中对“connection charset”的检查会由于Py3K的更严格的值比较规则而失败。在任何情况下，该调用都没有考虑数据库版本，因为在那时服务器版本仍然为None，因此该方法总体上已简化为依赖于connection.character_set_name()。
- en: 'References: [#2933](https://www.sqlalchemy.org/trac/ticket/2933)'
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2933](https://www.sqlalchemy.org/trac/ticket/2933)
- en: '**[mysql] [bug]**'
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Some missing methods added to the cymysql dialect, including _get_server_version_info()
    and _detect_charset(). Pullreq courtesy Hajime Nakagami.
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些缺失的方法已添加到cymysql方言中，包括_get_server_version_info()和_detect_charset()。拉取请求由Hajime
    Nakagami提供。
- en: sqlite
  id: totrans-1359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Restored a change that was missed in the backport of unique constraint reflection
    to 0.8, where [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") with SQLite would fail if reserved keywords
    were included in the names of columns. Pull request courtesy Roman Podolyaka.
  id: totrans-1361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在将唯一约束反射回0.8时遗漏的更改，其中包含SQLite列名称中的保留关键字将导致失败。拉取请求由Roman Podolyaka提供。
- en: mssql
  id: totrans-1362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-1363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird]**'
- en: The “asdecimal” flag used with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type will now work with Firebird as well as the mssql+pyodbc
    dialects; previously the decimal conversion was not occurring.
  id: totrans-1364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")类型一起使用的“asdecimal”标志现在在Firebird和mssql+pyodbc方言中也可以工作；以前的十进制转换未发生。
- en: '**[mssql] [bug] [pymssql]**'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pymssql]**'
- en: Added “Net-Lib error during Connection reset by peer” message to the list of
    messages checked for “disconnect” within the pymssql dialect. Courtesy John Anderson.
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“Net-Lib error during Connection reset by peer”消息添加到检查“pymssql”方言中的“disconnect”消息列表中。由John
    Anderson提供。
- en: misc
  id: totrans-1367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Py3K bug where a missing import would cause “literal binary” mode to fail
    to import “util.binary_type” when rendering a bound parameter. 0.9 handles this
    differently. Pull request courtesy Andreas Zeidler.
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Py3K错误，其中缺少导入会导致在呈现绑定参数时无法导入“util.binary_type”的“literal binary”模式失败。0.9处理方式不同。拉取请求由Andreas
    Zeidler提供。
- en: '**[bug] [firebird]**'
  id: totrans-1370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: The firebird dialect will quote identifiers which begin with an underscore.
    Courtesy Treeve Jelbert.
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: firebird方言将引用以下划线开头的标识符。由Treeve Jelbert提供。
- en: 'References: [#2897](https://www.sqlalchemy.org/trac/ticket/2897)'
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2897](https://www.sqlalchemy.org/trac/ticket/2897)
- en: '**[bug] [firebird]**'
  id: totrans-1373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug in Firebird index reflection where the columns within the index were
    not sorted correctly; they are now sorted in order of RDB$FIELD_POSITION.
  id: totrans-1374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Firebird索引反射中的错误，其中索引中的列未正确排序；它们现在按照RDB$FIELD_POSITION的顺序排序。
- en: '**[bug] [declarative]**'
  id: totrans-1375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Error message when a string arg sent to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which doesn’t resolve to a class or mapper has
    been corrected to work the same way as when a non-string arg is received, which
    indicates the name of the relationship which had the configurational error.
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将字符串参数发送给[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时，如果无法解析为类或映射器，则错误消息已更正为与接收非字符串参数时相同的方式，该方式指示了配置错误的关系名称。
- en: 'References: [#2888](https://www.sqlalchemy.org/trac/ticket/2888)'
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2888](https://www.sqlalchemy.org/trac/ticket/2888)
- en: orm
  id: totrans-1378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") would fail to consistently raise the [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") that invokes when called on a query with
    existing criterion, when the given identity is already present in the identity
    map.
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")在查询中存在条件时无法一致引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")的 bug，��给定的标识已经存在于标识映射中时。
- en: 'References: [#2951](https://www.sqlalchemy.org/trac/ticket/2951)'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2951](https://www.sqlalchemy.org/trac/ticket/2951)
- en: '**[orm] [bug]**'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed error message when an iterator object is passed to [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") or similar, where the error would fail to render
    on string formatting. Pullreq courtesy Kyle Stark.
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将迭代器对象传递给[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")或类似方法时，修复了错误消息无法在字符串格式化时呈现的问题。感谢 Kyle Stark 提交的
    Pullreq。
- en: '**[orm] [bug]**'
  id: totrans-1384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An adjustment to the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") strategy which ensures that the query runs after
    the loading process has begun; this is so that the subqueryload takes precedence
    over other loaders that may be hitting the same attribute due to other eager/noload
    situations at the wrong time.
  id: totrans-1385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")策略进行了调整，确保查询在加载过程开始后运行；这样，subqueryload 优先于其他加载器运行，这些加载器可能由于其他错误的时机导致了错误的贪婪加载。
- en: 'References: [#2887](https://www.sqlalchemy.org/trac/ticket/2887)'
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2887](https://www.sqlalchemy.org/trac/ticket/2887)
- en: '**[orm] [bug]**'
  id: totrans-1387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug when using joined table inheritance from a table to a select/alias
    on the base, where the PK columns were also not same named; the persistence system
    would fail to copy primary key values from the base table to the inherited table
    upon INSERT.
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从表继承到基表的连接表继承时的 bug，其中主键列也不具有相同名称；持久性系统在插入时无法将主键值从基表复制到继承表中。
- en: 'References: [#2885](https://www.sqlalchemy.org/trac/ticket/2885)'
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2885](https://www.sqlalchemy.org/trac/ticket/2885)
- en: '**[orm] [bug]**'
  id: totrans-1390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    will raise an informative error message when the columns/attribute (names) passed
    don’t resolve to a Column or mapped attribute (such as an erroneous tuple); previously
    raised an unbound local.'
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的列/属性（名称）无法解析为列或映射属性（例如错误的元组）时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")将引发一个信息性错误消息；之前会引发未绑定的本地错误。
- en: 'References: [#2889](https://www.sqlalchemy.org/trac/ticket/2889)'
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2889](https://www.sqlalchemy.org/trac/ticket/2889)
- en: engine
  id: totrans-1393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [pool]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed a critical regression caused by [#2880](https://www.sqlalchemy.org/trac/ticket/2880)
    where the newly concurrent ability to return connections from the pool means that
    the “first_connect” event is now no longer synchronized either, thus leading to
    dialect mis-configurations under even minimal concurrency situations.
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2880](https://www.sqlalchemy.org/trac/ticket/2880)引起的关键回归，其中新的并发能力从池中返回连接意味着“first_connect”事件现在也不再同步，从而导致在即使是最小并发情况下也会出现方言配置错误。
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)'
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)，[#2964](https://www.sqlalchemy.org/trac/ticket/2964)
- en: sql
  id: totrans-1397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where calling [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with an empty list or tuple would raise
    an IndexError. It now produces an empty insert construct as would be the case
    with an empty dictionary.
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用带有空列表或元组的[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")会引发IndexError的bug。现在它会产生一个空的插入构造，就像使用空字典一样。
- en: 'References: [#2944](https://www.sqlalchemy.org/trac/ticket/2944)'
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2944](https://www.sqlalchemy.org/trac/ticket/2944)
- en: '**[sql] [bug]**'
  id: totrans-1401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") would go into an endless loop
    if erroneously passed a column expression whose comparator included the `__getitem__()`
    method, such as a column that uses the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type.
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")会进入无限循环的bug，如果错误地传递了一个包含`__getitem__()`方法的列表达式的比较器，比如使用[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型的列。
- en: 'References: [#2957](https://www.sqlalchemy.org/trac/ticket/2957)'
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2957](https://www.sqlalchemy.org/trac/ticket/2957)
- en: '**[sql] [bug]**'
  id: totrans-1404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a primary key column that has a Sequence on it, yet the column
    is not the “auto increment” column, either because it has a foreign key constraint
    or `autoincrement=False` set, would attempt to fire the Sequence on INSERT for
    backends that don’t support sequences, when presented with an INSERT missing the
    primary key value. This would take place on non-sequence backends like SQLite,
    MySQL.
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即主键列上有一个Sequence，但该列不是“自动增量”列，可能是因为它有外键约束或设置了`autoincrement=False`，在不支持序列的后端上，当出现一个缺少主键值的INSERT时，会尝试触发Sequence。这将发生在像SQLite、MySQL这样的非序列后端上。
- en: 'References: [#2896](https://www.sqlalchemy.org/trac/ticket/2896)'
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2896](https://www.sqlalchemy.org/trac/ticket/2896)
- en: '**[sql] [bug]**'
  id: totrans-1407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method where the order of the
    given names would not be taken into account when generating the INSERT statement,
    thus producing a mismatch versus the column names in the given SELECT statement.
    Also noted that [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") implies that Python-side insert
    defaults cannot be used, since the statement has no VALUES clause.
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")方法的bug，其中给定名称的顺序在生成INSERT语句时不会被考虑，因此与给定SELECT语句中的列名不匹配。还指出[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")暗示不能使用Python端的插入默认值，因为该语句没有VALUES子句。
- en: 'References: [#2895](https://www.sqlalchemy.org/trac/ticket/2895)'
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2895](https://www.sqlalchemy.org/trac/ticket/2895)
- en: '**[sql] [enhancement]**'
  id: totrans-1410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [enhancement]**'
- en: The exception raised when a [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is present in a compiled statement
    without a value now includes the key name of the bound parameter in the error
    message.
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当编译语句中存在一个未赋值的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")时，引发的异常现在在错误消息中包含绑定参数的键名。
- en: postgresql
  id: totrans-1412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added an additional message to psycopg2 disconnect detection, “could not send
    data to server”, which complements the existing “could not receive data from server”
    and has been observed by users.
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个额外的消息到psycopg2的断开连接检测中，“无法发送数据到服务器”，这与现有的“无法从服务器接收数据”相辅相成，并已被用户观察到。
- en: 'References: [#2936](https://www.sqlalchemy.org/trac/ticket/2936)'
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2936](https://www.sqlalchemy.org/trac/ticket/2936)
- en: '**[postgresql] [bug]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Support has been improved for PostgreSQL reflection behavior on very old (pre
    8.1) versions of PostgreSQL, and potentially other PG engines such as Redshift
    (assuming Redshift reports the version as < 8.1). The query for “indexes” as well
    as “primary keys” relies upon inspecting a so-called “int2vector” datatype, which
    refuses to coerce to an array prior to 8.1 causing failures regarding the “ANY()”
    operator used in the query. Extensive googling has located the very hacky, but
    recommended-by-PG-core-developer query to use when PG version < 8.1 is in use,
    so index and primary key constraint reflection now work on these versions.
  id: totrans-1417
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 改进了对非常古老（8.1之前）版本的PostgreSQL以及其他可能的PG引擎（如Redshift，假设Redshift将版本报告为<8.1）的PostgreSQL反射行为的支持。关于“索引”和“主键”的查询依赖于检查所谓的“int2vector”数据类型，该数据类型在8.1之前拒绝强制转换为数组，导致查询中使用的“ANY()”运算符失败。通过广泛的搜索，找到了非常hacky但由PG核心开发人员推荐使用的查询，用于在使用PG版本<8.1时使用，因此现在在这些版本上可以正常工作索引和主键约束反射。
- en: '**[postgresql] [bug]**'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Revised this very old issue where the PostgreSQL “get primary key” reflection
    query were updated to take into account primary key constraints that were renamed;
    the newer query fails on very old versions of PostgreSQL such as version 7, so
    the old query is restored in those cases when server_version_info < (8, 0) is
    detected.
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了这个非常古老的问题，其中PostgreSQL的“获取主键”反射查询已更新以考虑已重命名的主键约束；新的查询在非常古老的PostgreSQL版本（如版本7）上失败，因此在检测到server_version_info
    < (8, 0)的情况下，在这些情况下恢复旧查询。
- en: 'References: [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: mysql
  id: totrans-1421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added new MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") which includes fractional seconds support;
    also added fractional seconds support to [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP"). DBAPI support is limited, though fractional
    seconds are known to be supported by MySQL Connector/Python. Patch courtesy Geert
    JM Vanderkelen.
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的MySQL特定的[`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")，其中包括分数秒支持；还向[`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP")添加了分数秒支持。DBAPI支持有限，尽管MySQL Connector/Python已知支持分数秒。Patch由Geert
    JM Vanderkelen提供。
- en: 'References: [#2941](https://www.sqlalchemy.org/trac/ticket/2941)'
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2941](https://www.sqlalchemy.org/trac/ticket/2941)
- en: '**[mysql] [bug]**'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Added support for the `PARTITION BY` and `PARTITIONS` MySQL table keywords,
    specified as `mysql_partition_by='value'` and `mysql_partitions='value'` to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Marcus McCurdy.
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`PARTITION BY`和`PARTITIONS` MySQL表关键字的支持，指定为`mysql_partition_by='value'`和`mysql_partitions='value'`到[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。感谢Marcus McCurdy的Pull请求。
- en: 'References: [#2966](https://www.sqlalchemy.org/trac/ticket/2966)'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2966](https://www.sqlalchemy.org/trac/ticket/2966)
- en: '**[mysql] [bug]**'
  id: totrans-1428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed bug which prevented MySQLdb-based dialects (e.g. pymysql) from working
    in Py3K, where a check for “connection charset” would fail due to Py3K’s more
    strict value comparison rules. The call in question wasn’t taking the database
    version into account in any case as the server version was still None at that
    point, so the method overall has been simplified to rely upon connection.character_set_name().
  id: totrans-1429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止基于MySQLdb的方言（例如pymysql）在Py3K中工作的错误，其中“连接字符集”检查将由于Py3K更严格的值比较规则而失败。在任何情况下，该调用都没有考虑数据库���本，因为服务器版本在那时仍然为None，因此该方法已简化为依赖于connection.character_set_name()。
- en: 'References: [#2933](https://www.sqlalchemy.org/trac/ticket/2933)'
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2933](https://www.sqlalchemy.org/trac/ticket/2933)
- en: '**[mysql] [bug]**'
  id: totrans-1431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Some missing methods added to the cymysql dialect, including _get_server_version_info()
    and _detect_charset(). Pullreq courtesy Hajime Nakagami.
  id: totrans-1432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在cymysql方言中添加了一些缺失的方法，包括_get_server_version_info()和_detect_charset()。感谢Hajime
    Nakagami的Pullreq。
- en: sqlite
  id: totrans-1433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Restored a change that was missed in the backport of unique constraint reflection
    to 0.8, where [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") with SQLite would fail if reserved keywords
    were included in the names of columns. Pull request courtesy Roman Podolyaka.
  id: totrans-1435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在将唯一约束反射回0.8时遗漏的更改，其中在列名称中包含保留关键字的情况下，使用SQLite的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")将失败。感谢Roman Podolyaka的Pull请求。
- en: mssql
  id: totrans-1436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-1437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird]**'
- en: The “asdecimal” flag used with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type will now work with Firebird as well as the mssql+pyodbc
    dialects; previously the decimal conversion was not occurring.
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")类型一起使用的“asdecimal”标志现在也适用于Firebird以及mssql+pyodbc方言；以前未进行十进制转换。
- en: '**[mssql] [bug] [pymssql]**'
  id: totrans-1439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pymssql]**'
- en: Added “Net-Lib error during Connection reset by peer” message to the list of
    messages checked for “disconnect” within the pymssql dialect. Courtesy John Anderson.
  id: totrans-1440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“Net-Lib error during Connection reset by peer”消息添加到在pymssql方言中检查“disconnect”消息列表中。感谢John
    Anderson。
- en: misc
  id: totrans-1441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [py3k]**'
  id: totrans-1442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [py3k]**'
- en: Fixed Py3K bug where a missing import would cause “literal binary” mode to fail
    to import “util.binary_type” when rendering a bound parameter. 0.9 handles this
    differently. Pull request courtesy Andreas Zeidler.
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Py3K中的错误，其中缺少导入将导致在呈现绑定参数时“literal binary”模式无法导入“util.binary_type”。0.9处理方式不同。感谢Andreas
    Zeidler的拉取请求。
- en: '**[bug] [firebird]**'
  id: totrans-1444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: The firebird dialect will quote identifiers which begin with an underscore.
    Courtesy Treeve Jelbert.
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 火鸟方言将引用以下划线开头的标识符。感谢Treeve Jelbert。
- en: 'References: [#2897](https://www.sqlalchemy.org/trac/ticket/2897)'
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2897](https://www.sqlalchemy.org/trac/ticket/2897)
- en: '**[bug] [firebird]**'
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug in Firebird index reflection where the columns within the index were
    not sorted correctly; they are now sorted in order of RDB$FIELD_POSITION.
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Firebird索引反射中列未正确排序的错误；现在它们按照RDB$FIELD_POSITION的顺序排序。
- en: '**[bug] [declarative]**'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Error message when a string arg sent to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which doesn’t resolve to a class or mapper has
    been corrected to work the same way as when a non-string arg is received, which
    indicates the name of the relationship which had the configurational error.
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当发送给[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的字符串参数无法解析为类或映射器时，错误消息已更正，与接收非字符串参数时的工作方式相同，指示配置错误的关系名称。
- en: 'References: [#2888](https://www.sqlalchemy.org/trac/ticket/2888)'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2888](https://www.sqlalchemy.org/trac/ticket/2888)
- en: 0.8.4
  id: totrans-1452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.4
- en: 'Released: December 8, 2013'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年12月8日
- en: orm
  id: totrans-1454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression introduced by [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where the EXISTS query being generated would produce a “columns being replaced”
    warning for a statement with two same-named columns, as the internal SELECT wouldn’t
    have use_labels set.
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2818](https://www.sqlalchemy.org/trac/ticket/2818)引入的回归，生成的EXISTS查询会为具有两个同名列的语句产生“正在替换列”警告，因为内部SELECT没有设置use_labels。
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: engine
  id: totrans-1458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A DBAPI that raises an error on `connect()` which is not a subclass of dbapi.Error
    (such as `TypeError`, `NotImplementedError`, etc.) will propagate the exception
    unchanged. Previously, the error handling specific to the `connect()` routine
    would both inappropriately run the exception through the dialect’s [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") routine as well as wrap it in a [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError"). It is now propagated unchanged in the same way as
    occurs within the execute process.
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`connect()`上引发错误的DBAPI不是dbapi.Error的子类（例如`TypeError`，`NotImplementedError`等）将不会经过dialect的[`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect")例程特定的错误处理，也不会将其包装在[`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")中。现在将以与执行过程中发生的方式传播未更改的异常。
- en: 'References: [#2881](https://www.sqlalchemy.org/trac/ticket/2881)'
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2881](https://www.sqlalchemy.org/trac/ticket/2881)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    has been enhanced to not block new connection attempts when an existing connection
    attempt is blocking. Previously, the production of new connections was serialized
    within the block that monitored overflow; the overflow counter is now altered
    within its own critical section outside of the connection process itself.
  id: totrans-1463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")已经改进，不会在现有连接尝试阻塞时阻止新的连接尝试。以前，新连接的生成在监视溢出的块内被串行化；现在，溢出计数器在连接过程本身之外的自己的关键部分中被改变。 '
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880)'
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Made a slight adjustment to the logic which waits for a pooled connection to
    be available, such that for a connection pool with no timeout specified, it will
    every half a second break out of the wait to check for the so-called “abort” flag,
    which allows the waiter to break out in case the whole connection pool was dumped;
    normally the waiter should break out due to a notify_all() but it’s possible this
    notify_all() is missed in very slim cases. This is an extension of logic first
    introduced in 0.8.0, and the issue has only been observed occasionally in stress
    tests.
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对等待池化连接可用的逻辑进行了轻微调整，对于未指定超时的连接池，每隔半秒就会中断等待，以检查所谓的“中止”标志，这允许等待者在整个连接池被释放时中断；通常情况下，等待者应该由于notify_all()而中断，但在极少数情况下可能会错过这个notify_all()。这是在0.8.0中首次引入的逻辑的扩展，该问题只在压力测试中偶尔观察到。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where SQL statement would be improperly ASCII-encoded when a pre-DBAPI
    [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    were raised within [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), causing encoding errors for non-ASCII
    statements. The stringification now remains within Python unicode thus avoiding
    encoding errors.
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当在[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")中引发预-DBAPI [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")时，SQL语句会被错误地ASCII编码的错误，导致非ASCII语句的编码错误。现在字符串化保持在Python
    unicode中，从而避免编码错误。
- en: 'References: [#2871](https://www.sqlalchemy.org/trac/ticket/2871)'
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2871](https://www.sqlalchemy.org/trac/ticket/2871)
- en: sql
  id: totrans-1471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added support for “unique constraint” reflection, via the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method. Thanks
    for Roman Podolyaka for the patch.
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")方法，增加了对“唯一约束”反射的支持。感谢Roman
    Podolyaka的补丁。
- en: 'References: [#1443](https://www.sqlalchemy.org/trac/ticket/1443)'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1443](https://www.sqlalchemy.org/trac/ticket/1443)
- en: postgresql
  id: totrans-1475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where index reflection would mis-interpret indkey values when using
    the pypostgresql adapter, which returns these values as lists vs. psycopg2’s return
    type of string.
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用pypostgresql适配器时，索引反射会错误解释indkey值的bug，该适配器将这些值作为列表返回，而不是psycopg2返回的字符串类型。
- en: 'References: [#2855](https://www.sqlalchemy.org/trac/ticket/2855)'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2855](https://www.sqlalchemy.org/trac/ticket/2855)
- en: mssql
  id: totrans-1479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug introduced in 0.8.0 where the `DROP INDEX` statement for an index
    in MSSQL would render incorrectly if the index were in an alternate schema; the
    schemaname/tablename would be reversed. The format has been also been revised
    to match current MSSQL documentation. Courtesy Derek Harland.
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.8.0版本中引入的错误，即在MSSQL中，如果索引位于替代模式中，则`DROP INDEX`语句会显示错误；模式名/表名会被颠倒。格式也已经修订，以匹配当前的MSSQL文档。感谢
    Derek Harland。
- en: oracle
  id: totrans-1482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-02396 “maximum idle time” error code to list of “is disconnect” codes
    with cx_oracle.
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“最大空闲时间”错误代码ORA-02396添加到了与cx_oracle一起的“断开连接”代码列表中。
- en: 'References: [#2864](https://www.sqlalchemy.org/trac/ticket/2864)'
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2864](https://www.sqlalchemy.org/trac/ticket/2864)
- en: '**[oracle] [bug]**'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle `VARCHAR` types given with no length (e.g. for a `CAST`
    or similar) would incorrectly render `None CHAR` or similar.
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中Oracle `VARCHAR`类型在没有长度的情况下（例如用于`CAST`或类似情况）会错误地呈现`None CHAR`或类似情况。
- en: 'References: [#2870](https://www.sqlalchemy.org/trac/ticket/2870)'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2870](https://www.sqlalchemy.org/trac/ticket/2870)
- en: misc
  id: totrans-1489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug which prevented the `serializer` extension from working correctly
    with table or column names that contain non-ASCII characters.
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug导致`serializer`扩展无法正确处理包含非ASCII字符的表或列名。
- en: 'References: [#2869](https://www.sqlalchemy.org/trac/ticket/2869)'
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2869](https://www.sqlalchemy.org/trac/ticket/2869)
- en: orm
  id: totrans-1493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression introduced by [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where the EXISTS query being generated would produce a “columns being replaced”
    warning for a statement with two same-named columns, as the internal SELECT wouldn’t
    have use_labels set.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2818](https://www.sqlalchemy.org/trac/ticket/2818)引入的回归，生成的EXISTS查询会为具有两个同名列的语句产生“正在替换列”警告，因为内部SELECT不会设置use_labels。
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: engine
  id: totrans-1497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A DBAPI that raises an error on `connect()` which is not a subclass of dbapi.Error
    (such as `TypeError`, `NotImplementedError`, etc.) will propagate the exception
    unchanged. Previously, the error handling specific to the `connect()` routine
    would both inappropriately run the exception through the dialect’s [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") routine as well as wrap it in a [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError"). It is now propagated unchanged in the same way as
    occurs within the execute process.
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个在`connect()`上引发错误的DBAPI，如果不是`dbapi.Error`的子类（例如`TypeError`，`NotImplementedError`等），将不会改变异常。以前，`connect()`例程特定的错误处理既不恰当地通过方言的[`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect")例程运行异常，也会将其包装在[`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")中。现在，它将以与执行过程中发生的方式相同的方式传播。
- en: 'References: [#2881](https://www.sqlalchemy.org/trac/ticket/2881)'
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2881](https://www.sqlalchemy.org/trac/ticket/2881)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    has been enhanced to not block new connection attempts when an existing connection
    attempt is blocking. Previously, the production of new connections was serialized
    within the block that monitored overflow; the overflow counter is now altered
    within its own critical section outside of the connection process itself.
  id: totrans-1502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")已经改进，当现有连接尝试阻塞时，不会阻止新的连接尝试。以前，新连接的生成在监视溢出的块内串行化；现在，溢出计数器在连接过程本身之外的自己的关键部分中进行了修改。'
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880)'
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Made a slight adjustment to the logic which waits for a pooled connection to
    be available, such that for a connection pool with no timeout specified, it will
    every half a second break out of the wait to check for the so-called “abort” flag,
    which allows the waiter to break out in case the whole connection pool was dumped;
    normally the waiter should break out due to a notify_all() but it’s possible this
    notify_all() is missed in very slim cases. This is an extension of logic first
    introduced in 0.8.0, and the issue has only been observed occasionally in stress
    tests.
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对等待可用连接的逻辑进行了轻微调整，对于未指定超时的连接池，每隔半秒就会中断等待以检查所谓的“中止”标志，这允许等待者在整个连接池被丢弃的情况下中断；通常，等待者应该由于notify_all()而中断，但在极少数情况下可能会错过这个notify_all()。这是在0.8.0中首次引入的逻辑的扩展，该问题只在压力测试中偶尔观察到。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where SQL statement would be improperly ASCII-encoded when a pre-DBAPI
    [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    were raised within [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), causing encoding errors for non-ASCII
    statements. The stringification now remains within Python unicode thus avoiding
    encoding errors.
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在`Connection.execute()`中引发预先DBAPI [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")时，SQL语句会被错误地ASCII编码，导致非ASCII语句的编码错误。现在字符串化保持在Python
    unicode中，从而避免编码错误。
- en: 'References: [#2871](https://www.sqlalchemy.org/trac/ticket/2871)'
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2871](https://www.sqlalchemy.org/trac/ticket/2871)
- en: sql
  id: totrans-1510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [feature]**'
  id: totrans-1511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “unique constraint” reflection, via the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method. Thanks
    for Roman Podolyaka for the patch.
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")方法，增加了对“唯一约束”反射的支持。感谢Roman
    Podolyaka的补丁。
- en: 'References: [#1443](https://www.sqlalchemy.org/trac/ticket/1443)'
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1443](https://www.sqlalchemy.org/trac/ticket/1443)
- en: postgresql
  id: totrans-1514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**[postgresql] [bug]**'
  id: totrans-1515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where index reflection would mis-interpret indkey values when using
    the pypostgresql adapter, which returns these values as lists vs. psycopg2’s return
    type of string.
  id: totrans-1516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中在使用pypostgresql适配器时，索引反射会错误地解释indkey值，该适配器将这些值作为列表返回，而不是psycopg2的字符串返回类型。
- en: 'References: [#2855](https://www.sqlalchemy.org/trac/ticket/2855)'
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2855](https://www.sqlalchemy.org/trac/ticket/2855)
- en: mssql
  id: totrans-1518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql] [bug]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug introduced in 0.8.0 where the `DROP INDEX` statement for an index
    in MSSQL would render incorrectly if the index were in an alternate schema; the
    schemaname/tablename would be reversed. The format has been also been revised
    to match current MSSQL documentation. Courtesy Derek Harland.
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.8.0中引入的bug，其中MSSQL中索引的`DROP INDEX`语句会在索引位于备用模式时错误呈现；模式名/表名会被颠倒。格式也已经修订，以匹配当前的MSSQL文档。感谢Derek
    Harland。
- en: oracle
  id: totrans-1521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle] [bug]**'
  id: totrans-1522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-02396 “maximum idle time” error code to list of “is disconnect” codes
    with cx_oracle.
  id: totrans-1523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-02396“最大空闲时间”错误代码添加到与cx_oracle一起的“断开连接”代码列表中。
- en: 'References: [#2864](https://www.sqlalchemy.org/trac/ticket/2864)'
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2864](https://www.sqlalchemy.org/trac/ticket/2864)
- en: '**[oracle] [bug]**'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle `VARCHAR` types given with no length (e.g. for a `CAST`
    or similar) would incorrectly render `None CHAR` or similar.
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中没有长度的Oracle `VARCHAR`类型（例如用于`CAST`或类似操作）会错误地呈现为`None CHAR`或类似情况。
- en: 'References: [#2870](https://www.sqlalchemy.org/trac/ticket/2870)'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2870](https://www.sqlalchemy.org/trac/ticket/2870)
- en: misc
  id: totrans-1528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug which prevented the `serializer` extension from working correctly
    with table or column names that contain non-ASCII characters.
  id: totrans-1530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug导致`serializer`扩展无法正确处理包含非ASCII字符的表格或列名。
- en: 'References: [#2869](https://www.sqlalchemy.org/trac/ticket/2869)'
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2869](https://www.sqlalchemy.org/trac/ticket/2869)
- en: 0.8.3
  id: totrans-1532
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.3
- en: 'Released: October 26, 2013'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年10月26日
- en: orm
  id: totrans-1534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-1535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new option to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`. This enables the subquery
    eager loader strategy to apply a DISTINCT to the innermost SELECT subquery, to
    assist in the case where duplicate rows are generated by the innermost query which
    corresponds to this relationship (there’s not yet a general solution to the issue
    of dupe rows within subquery eager loading, however, when joins outside of the
    innermost subquery produce dupes). When the flag is set to `True`, the DISTINCT
    is rendered unconditionally, and when it is set to `None`, DISTINCT is rendered
    if the innermost relationship targets columns that do not comprise a full primary
    key. The option defaults to False in 0.8 (e.g. off by default in all cases), None
    in 0.9 (e.g. automatic by default). Thanks to Alexander Koval for help with this.
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新选项[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`。这使得子查询急加载策略可以对最内部的SELECT子查询应用DISTINCT，以帮助解决由最内部查询生成重复行的情况（尚无关于子查询急加载中重复行问题的通用解决方案，但是当最内部子查询之外的连接产生重复行时）。当标志设置为`True`时，DISTINCT被无条件渲染，当设置为`None`时，如果最内部关系目标列不包括完整主键，则渲染DISTINCT。该选项在0.8中默认为False（例如，在所有情况下默认关闭），在0.9中为None（例如，默认情况下自动）。感谢Alexander
    Koval对此的帮助。
- en: See also
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询急加载将对某些查询的最内部SELECT应用DISTINCT](migration_09.html#change-2836)'
- en: 'References: [#2836](https://www.sqlalchemy.org/trac/ticket/2836)'
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2836](https://www.sqlalchemy.org/trac/ticket/2836)
- en: '**[orm] [bug]**'
  id: totrans-1540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作未能正确表示`[0:0]`的切片设置，特别是在使用`insert(0, item)`与关联代理时可能发生。由于Python集合中的一些怪癖，这个问题在Python
    3中比在Python 2中更有可能发生。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using an annotation such as [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") or [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") before association with a parent [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") could produce issues related to the parent table not
    rendering within joins, due to the inherent copy operation performed by an annotation.
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用类似[`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote "sqlalchemy.orm.remote")或[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")在与父[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联之前的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上可能会产生与父表在连接中未呈现相关的问题的注释时可能会产生的问题，这是由于注释执行的固有复制操作。
- en: 'References: [#2813](https://www.sqlalchemy.org/trac/ticket/2813)'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2813](https://www.sqlalchemy.org/trac/ticket/2813)
- en: '**[orm] [bug]**'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") failed to work correctly without any WHERE criterion.
    Courtesy Vladimir Magamedov.
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在没有任何WHERE条件的情况下无法正常工作的错误。感谢Vladimir Magamedov。
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-1549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug]**'
  id: totrans-1550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Backported a change from 0.9 whereby the iteration of a hierarchy of mappers
    used in polymorphic inheritance loads is sorted, which allows the SELECT statements
    generated for polymorphic queries to have deterministic rendering, which in turn
    helps with caching schemes that cache on the SQL string itself.
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.9中回溯了一个更改，其中用于多态继承加载的映射器层次结构的迭代被排序，这允许为多态查询生成的SELECT语句具有确定性渲染，从而有助于缓存方案，该方案基于SQL字符串本身进行缓存。
- en: 'References: [#2779](https://www.sqlalchemy.org/trac/ticket/2779)'
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2779](https://www.sqlalchemy.org/trac/ticket/2779)
- en: '**[orm] [bug]**'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a potential issue in an ordered sequence implementation used by the ORM
    to iterate mapper hierarchies; under the Jython interpreter this implementation
    wasn’t ordered, even though cPython and PyPy maintained ordering.
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM用于迭代映射器层次结构的有序序列实现中的潜在问题；在Jython解释器下，这个实现没有排序，尽管cPython和PyPy保持了顺序。
- en: 'References: [#2794](https://www.sqlalchemy.org/trac/ticket/2794)'
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2794](https://www.sqlalchemy.org/trac/ticket/2794)
- en: '**[orm] [bug]**'
  id: totrans-1556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM-level event registration where the “raw” or “propagate” flags
    could potentially be mis-configured in some “unmapped base class” configurations.
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM级别事件注册中的bug，其中“原始”或“传播”标志在某些“未映射基类”配置中可能被错误配置。
- en: 'References: [#2786](https://www.sqlalchemy.org/trac/ticket/2786)'
  id: totrans-1558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2786](https://www.sqlalchemy.org/trac/ticket/2786)
- en: '**[orm] [bug]**'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A performance fix related to the usage of the [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") option when loading mapped entities. The function overhead
    of applying a per-object deferred callable to an instance at load time was significantly
    higher than that of just loading the data from the row (note that `defer()` is
    meant to reduce DB/network overhead, not necessarily function call count); the
    function call overhead is now less than that of loading data from the column in
    all cases. There is also a reduction in the number of “lazy callable” objects
    created per load from N (total deferred values in the result) to 1 (total number
    of deferred cols).
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与加载映射实体时使用[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")选项相关的性能修复。在加载时将每个对象的延迟可调用应用于实例的函数开销明显高于仅从行加载数据的开销（请注意，`defer()`旨在减少DB/网络开销，而不一定是函数调用次数）；在所有情况下，函数调用开销现在小于从列加载数据的开销。每次加载从N（结果中的总延迟值）到1（延迟列的总数）的“延迟可调用”对象数量也减少了。
- en: 'References: [#2778](https://www.sqlalchemy.org/trac/ticket/2778)'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2778](https://www.sqlalchemy.org/trac/ticket/2778)
- en: '**[orm] [bug]**'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby attribute history functions would fail when an object we moved
    from “persistent” to “pending” using the [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") function, for operations involving collection-based
    backrefs.
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用[`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient")函数将对象从“持久”移动到“挂起”时，属性历史函数会失败，用于涉及基于集合的反向引用的操作。
- en: 'References: [#2773](https://www.sqlalchemy.org/trac/ticket/2773)'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2773](https://www.sqlalchemy.org/trac/ticket/2773)
- en: orm declarative
  id: totrans-1565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [feature]**'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [功能]**'
- en: Added a convenience class decorator [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative"), is a wrapper for [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") which allows an existing base class to be applied
    using a nifty class-decorated approach.
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的类装饰器[`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative")，是[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")的包装器，允许使用一种巧妙的类装饰器方法应用现有的基类。
- en: examples
  id: totrans-1568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [feature]**'
  id: totrans-1569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [功能]**'
- en: Improved the examples in `examples/generic_associations`, including that `discriminator_on_association.py`
    makes use of single table inheritance do the work with the “discriminator”. Also
    added a true “generic foreign key” example, which works similarly to other popular
    frameworks in that it uses an open-ended integer to point to any other table,
    foregoing traditional referential integrity. While we don’t recommend this pattern,
    information wants to be free.
  id: totrans-1570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了`examples/generic_associations`中的例子，包括`discriminator_on_association.py`利用单表继承来处理“鉴别器”的工作。还添加了一个真正的“通用外键”示例，它与其他流行框架类似，使用开放式整数指向任何其他表，放弃了传统的引用完整性。虽然我们不推荐这种模式，但信息想要自由。
- en: '**[examples] [bug]**'
  id: totrans-1571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [bug]**'
- en: Added “autoincrement=False” to the history table created in the versioning example,
    as this table shouldn’t have autoinc on it in any case, courtesy Patrick Schmid.
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本示例中创建的历史表中添加了“autoincrement=False”，因为这个表在任何情况下都不应该有自增，感谢Patrick Schmid。
- en: engine
  id: totrans-1573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: '`repr()` for the [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will now conceal the password using asterisks. Courtesy Gunnlaugur Þór Briem.'
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`repr()`现在将使用星号隐藏密码。感谢Gunnlaugur Þór Briem。
- en: 'References: [#2821](https://www.sqlalchemy.org/trac/ticket/2821)'
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2821](https://www.sqlalchemy.org/trac/ticket/2821)
- en: '**[engine] [bug]**'
  id: totrans-1577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数使用的正则表达式现在解析ipv6地址，例如用方括号括起来。'
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.11
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-1580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: '**[engine] [bug] [oracle]**'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [oracle]**'
- en: Dialect.initialize() is not called a second time if an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is recreated, due to a disconnect error. This fixes
    a particular issue in the Oracle 8 dialect, but in general the dialect.initialize()
    phase should only be once per dialect.
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果重新创建[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，则不会第二次调用Dialect.initialize()，因为出现了断开连接错误。这修复了Oracle
    8方言中的一个特定问题，但通常情况下，dialect.initialize()阶段应该只执行一次。
- en: 'References: [#2776](https://www.sqlalchemy.org/trac/ticket/2776)'
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2776](https://www.sqlalchemy.org/trac/ticket/2776)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed bug where [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") would lose the correct checked out count if an existing
    pooled connection failed to reconnect after an invalidate or recycle event.
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")在现有池化连接在无效或重新生成事件后未能重新连接时会丢失正确的已检出计数的bug。
- en: 'References: [#2772](https://www.sqlalchemy.org/trac/ticket/2772)'
  id: totrans-1586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2772](https://www.sqlalchemy.org/trac/ticket/2772)
- en: sql
  id: totrans-1587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new method to the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). Given a list of columns and a
    selectable, renders `INSERT INTO (table) (columns) SELECT ..`.
  id: totrans-1589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造中添加了新方法[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")。给定列的列表和可选择的内容，渲染`INSERT INTO (table)
    (columns) SELECT ..`。
- en: 'References: [#722](https://www.sqlalchemy.org/trac/ticket/722)'
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#722](https://www.sqlalchemy.org/trac/ticket/722)
- en: '**[sql] [feature]**'
  id: totrans-1591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs will now interpret ORM entities as target tables to be operated upon,
    e.g.:'
  id: totrans-1592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")、[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")和[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造现在将解释ORM实体作为要操作的目标表，例如：'
- en: '[PRE7]'
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**[sql] [bug]**'
  id: totrans-1594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-1595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的回归，即如果在多个FROM子句中引用CTE，则可能无法正确引用CTE的名称。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.11
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-1598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式系统中的一个bug，如果CTE仅用作`alias()`构造，则不会使用WITH关键字进行渲染。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.11
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-1602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的一个bug，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会被传播。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.7.11
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: '**[sql] [bug]**'
  id: totrans-1606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") would not interpret ORM elements with
    a `__clause_element__()` method properly.
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")无法正确解释具有`__clause_element__()`方法的ORM元素的bug。
- en: 'References: [#2849](https://www.sqlalchemy.org/trac/ticket/2849)'
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2849](https://www.sqlalchemy.org/trac/ticket/2849)
- en: '**[sql] [bug]**'
  id: totrans-1609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    types now bypass any custom (e.g. TypeDecorator) type in use when producing the
    CHECK constraint for the “non native” type. This so that the custom type isn’t
    involved in the expression within the CHECK, since this expression is against
    the “impl” value and not the “decorated” value.
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当生成“非本地”类型的CHECK约束时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型现在会绕过任何自定义（例如TypeDecorator）类型的使用。这样，自定义类型不会参与CHECK中的表达式，因为这个表达式是针对“impl”值而不是“decorated”值的。
- en: 'References: [#2842](https://www.sqlalchemy.org/trac/ticket/2842)'
  id: totrans-1611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2842](https://www.sqlalchemy.org/trac/ticket/2842)
- en: '**[sql] [bug]**'
  id: totrans-1612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The `.unique` flag on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") could be produced as `None` if it was generated from
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that didn’t specify `unique` (where it defaults to `None`). The flag will now
    always be `True` or `False`.
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")上的`.unique`标志可能会产生`None`，如果它是从未指定`unique`（默认为`None`）的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")生成的。该标志现在将始终是`True`或`False`。
- en: 'References: [#2825](https://www.sqlalchemy.org/trac/ticket/2825)'
  id: totrans-1614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2825](https://www.sqlalchemy.org/trac/ticket/2825)
- en: '**[sql] [bug]**'
  id: totrans-1615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in default compiler plus those of postgresql, mysql, and mssql to
    ensure that any literal SQL expression values are rendered directly as literals,
    instead of as bound parameters, within a CREATE INDEX statement. This also changes
    the rendering scheme for other DDL such as constraints.
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了默认编译器以及postgresql、mysql和mssql的bug，以确保任何字面SQL表达式值在CREATE INDEX语句中直接呈现为字面值，而不是作为绑定参数。这也改变了其他DDL的呈现方案，如约束。
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[sql] [bug]**'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    that is made to refer to itself in its FROM clause, typically via in-place mutation,
    will raise an informative error message rather than causing a recursion overflow.
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")在其FROM子句中引用自身时，通常通过就地突变，将引发一个信息性错误消息，而不是导致递归溢出。
- en: 'References: [#2815](https://www.sqlalchemy.org/trac/ticket/2815)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2815](https://www.sqlalchemy.org/trac/ticket/2815)
- en: '**[sql] [bug]**'
  id: totrans-1621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Non-working “schema” argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") is deprecated; raises a warning. Removed in 0.9.
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不起作用的“schema”参数在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")上已被弃用；会发出警告。在0.9中移除。
- en: 'References: [#2831](https://www.sqlalchemy.org/trac/ticket/2831)'
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2831](https://www.sqlalchemy.org/trac/ticket/2831)
- en: '**[sql] [bug]**'
  id: totrans-1624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using the `column_reflect` event to change the `.key` of the
    incoming [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would prevent primary key constraints, indexes, and foreign key constraints from
    being correctly reflected.
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`column_reflect`事件来更改传入[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.key`会阻止正确反映主键约束、索引和外键约束的bug。
- en: 'References: [#2811](https://www.sqlalchemy.org/trac/ticket/2811)'
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2811](https://www.sqlalchemy.org/trac/ticket/2811)
- en: '**[sql] [bug]**'
  id: totrans-1627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operator added in 0.8 now
    properly produces the negation of the expression “IN” returns when used against
    an empty collection.
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") 运算符在0.8版本中添加，现在正确地生成了针对空集合使用时“IN”表达式的否定结果。'
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where the expression system relied upon the `str()` form of a some
    expressions when referring to the `.c` collection on a `select()` construct, but
    the `str()` form isn’t available since the element relies on dialect-specific
    compilation constructs, notably the `__getitem__()` operator as used with a PostgreSQL
    `ARRAY` element. The fix also adds a new exception class [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") which is raised in those cases where
    a compiler is asked to compile something it doesn’t know how to.
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式系统依赖于`select()`构造中的`.c`集合上的一些表达式的`str()`形式的错误，但由于元素依赖于特定于方言的编译构造，特别是与
    PostgreSQL `ARRAY` 元素一起使用的 `__getitem__()` 运算符，因此`str()`形式不可用。 修复还添加了一个新的异常类[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")，在编译器被要求编译它不知道如何处理的内容时引发该异常。
- en: 'References: [#2780](https://www.sqlalchemy.org/trac/ticket/2780)'
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2780](https://www.sqlalchemy.org/trac/ticket/2780)
- en: postgresql
  id: totrans-1632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Removed a 128-character truncation from the reflection of the server default
    for a column; this code was original from PG system views which truncated the
    string for readability.
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对列的服务器默认值反射的128字符截断；这段代码最初来自 PG 系统视图，用于截断字符串以便阅读。
- en: 'References: [#2844](https://www.sqlalchemy.org/trac/ticket/2844)'
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2844](https://www.sqlalchemy.org/trac/ticket/2844)
- en: '**[postgresql] [bug]**'
  id: totrans-1636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Parenthesis will be applied to a compound SQL expression as rendered in the
    column list of a CREATE INDEX statement.
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 括号将应用于在 CREATE INDEX 语句的列列表中呈现的复合 SQL 表达式。
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[postgresql] [bug]**'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL version strings that had a prefix preceding the words
    “PostgreSQL” or “EnterpriseDB” would not parse. Courtesy Scott Schaefer.
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 版本字符串中在“PostgreSQL”或“EnterpriseDB”之前有前缀的情况无法解析的错误。感谢 Scott Schaefer。
- en: 'References: [#2819](https://www.sqlalchemy.org/trac/ticket/2819)'
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2819](https://www.sqlalchemy.org/trac/ticket/2819)
- en: mysql
  id: totrans-1642
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 MySQL 5.5、5.6 版本的保留字，感谢 Hanno Schlichting。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.11
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: '**[mysql] [bug]**'
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The change in [#2721](https://www.sqlalchemy.org/trac/ticket/2721), which is
    that the `deferrable` keyword of [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is silently ignored on the MySQL backend,
    will be reverted as of 0.9; this keyword will now render again, raising errors
    on MySQL as it is not understood - the same behavior will also apply to the `initially`
    keyword. In 0.8, the keywords will remain ignored but a warning is emitted. Additionally,
    the `match` keyword now raises a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") on 0.9 and emits a warning on 0.8; this keyword
    is not only silently ignored by MySQL but also breaks the ON UPDATE/ON DELETE
    options.
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[#2721](https://www.sqlalchemy.org/trac/ticket/2721)中的更改，即 MySQL 后端对 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的 `deferrable` 关键字被静默忽略，将在0.9版本中被撤销；这个关键字现在将再次呈现，在
    MySQL 上引发错误，因为它不被理解 - 相同的行为也将适用于 `initially` 关键字。 在0.8版本中，这些关键字将继续被忽略，但会发出警告。此外，`match`
    关键字现在在0.9上引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，在0.8上发出警告；这个关键字不仅被 MySQL 静默忽略，还会破坏 ON UPDATE/ON
    DELETE 选项。
- en: To use a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") that does not render or renders differently
    on MySQL, use a custom compilation option. An example of this usage has been added
    to the documentation, see [MySQL / MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys).
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用不在 MySQL 上呈现或在 MySQL 上呈现不同的 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，请使用自定义编译选项。已将此用法示例添加到文档中，请参阅[MySQL /
    MariaDB 外键](../dialects/mysql.html#mysql-foreign-keys)。
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-1651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL-connector dialect now allows options in the create_engine query string
    to override those defaults set up in the connect, including “buffered” and “raise_on_warnings”.
  id: totrans-1652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL-connector 方言现在允许在 create_engine 查询字符串中使用选项来覆盖在连接中设置的默认值，包括“buffered”和“raise_on_warnings”。
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: sqlite
  id: totrans-1654
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The newly added SQLite DATETIME arguments storage_format and regexp apparently
    were not fully implemented correctly; while the arguments were accepted, in practice
    they would have no effect; this has been fixed.
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新添加的 SQLite DATETIME 参数 storage_format 和 regexp 显然没有完全正确实现；虽然接受了参数，但实际上它们没有任何效果；这个问题已经修复。
- en: 'References: [#2781](https://www.sqlalchemy.org/trac/ticket/2781)'
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2781](https://www.sqlalchemy.org/trac/ticket/2781)
- en: oracle
  id: totrans-1658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle table reflection using synonyms would fail if the synonym
    and the table were in different remote schemas. Patch to fix courtesy Kyle Derr.
  id: totrans-1660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用同义词进行 Oracle 表反射时，如果同义词和表位于不同的远程模式中，则会失败的 bug。修复补丁由 Kyle Derr 提供。
- en: 'References: [#2853](https://www.sqlalchemy.org/trac/ticket/2853)'
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2853](https://www.sqlalchemy.org/trac/ticket/2853)
- en: misc
  id: totrans-1662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature]**'
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature]**'
- en: Added a new flag `system=True` to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which marks the column as a “system” column which
    is automatically made present by the database (such as PostgreSQL `oid` or `xmin`).
    The column will be omitted from the `CREATE TABLE` statement but will otherwise
    be available for querying. In addition, the [`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") construct can be applied to a custom compilation
    rule which allows skipping of columns, by producing a rule that returns `None`.
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")添加了一个新标志`system=True`，将列标记为“系统”列，该列将自动由数据库（如
    PostgreSQL 的 `oid` 或 `xmin`）生成。 该列将在`CREATE TABLE`语句中被省略，但仍可用于查询。此外，[`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn")构造可以应用于自定义编译规则，允许跳过列，通过生成返回`None`的规则。
- en: orm
  id: totrans-1665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new option to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`. This enables the subquery
    eager loader strategy to apply a DISTINCT to the innermost SELECT subquery, to
    assist in the case where duplicate rows are generated by the innermost query which
    corresponds to this relationship (there’s not yet a general solution to the issue
    of dupe rows within subquery eager loading, however, when joins outside of the
    innermost subquery produce dupes). When the flag is set to `True`, the DISTINCT
    is rendered unconditionally, and when it is set to `None`, DISTINCT is rendered
    if the innermost relationship targets columns that do not comprise a full primary
    key. The option defaults to False in 0.8 (e.g. off by default in all cases), None
    in 0.9 (e.g. automatic by default). Thanks to Alexander Koval for help with this.
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")添加了新选项 `distinct_target_key`。这使得子查询预加载策略可以对最内部的
    SELECT 子查询应用 DISTINCT，以帮助解决由该关系对应的最内部查询生成重复行的情况（目前还没有解决子查询预加载中重复行的一般解决方案，但是当最内部子查询之外的连接产生重复行时）。当标志设置为`True`时，DISTINCT
    无条件呈现，当设置为`None`时，如果最内部关系目标列不包括完整主键，则呈现 DISTINCT。该选项在 0.8 版本中默认为 False（例如，在所有情况下默认关闭），在
    0.9 版本中默认为 None（例如，默认情��下自动）。感谢 Alexander Koval 对此的帮助。
- en: See also
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询预加载将对某些查询的最内部 SELECT 应用 DISTINCT](migration_09.html#change-2836)'
- en: 'References: [#2836](https://www.sqlalchemy.org/trac/ticket/2836)'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2836](https://www.sqlalchemy.org/trac/ticket/2836)
- en: '**[orm] [bug]**'
  id: totrans-1671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作`insert(0, item)`在使用关联代理时可能出现的`[0:0]`切片表示错误的bug。由于Python集合中的一些怪癖，这个问题在Python
    3中比在Python 2中更容易出现。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改动也被**回溯**到了：0.7.11
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-1675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using an annotation such as [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") or [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") before association with a parent [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") could produce issues related to the parent table not
    rendering within joins, due to the inherent copy operation performed by an annotation.
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")之前对父级[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")进行关联时，使用[`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote")或[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")等注释可能导致父表在连接中未渲染的bug，这是由于注释执行的固有复制操作所致。
- en: 'References: [#2813](https://www.sqlalchemy.org/trac/ticket/2813)'
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2813](https://www.sqlalchemy.org/trac/ticket/2813)
- en: '**[orm] [bug]**'
  id: totrans-1678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") failed to work correctly without any WHERE criterion.
    Courtesy Vladimir Magamedov.
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在没有任何WHERE条件的情况下无法正常工作的bug。感谢Vladimir Magamedov。
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Backported a change from 0.9 whereby the iteration of a hierarchy of mappers
    used in polymorphic inheritance loads is sorted, which allows the SELECT statements
    generated for polymorphic queries to have deterministic rendering, which in turn
    helps with caching schemes that cache on the SQL string itself.
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从0.9版本中回溯了一个改动，该改动使得在多态继承加载中使用的映射器层次结构的迭代是有序的，这允许为多态查询生成的SELECT语句具有确定性渲染，从而有助于缓存方案在SQL字符串本身上进行缓存。
- en: 'References: [#2779](https://www.sqlalchemy.org/trac/ticket/2779)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2779](https://www.sqlalchemy.org/trac/ticket/2779)
- en: '**[orm] [bug]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a potential issue in an ordered sequence implementation used by the ORM
    to iterate mapper hierarchies; under the Jython interpreter this implementation
    wasn’t ordered, even though cPython and PyPy maintained ordering.
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM用于迭代映射器层次结构的有序序列实现中可能存在的问题；在Jython解释器下，这个实现没有保持顺序，尽管cPython和PyPy保持了顺序。
- en: 'References: [#2794](https://www.sqlalchemy.org/trac/ticket/2794)'
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2794](https://www.sqlalchemy.org/trac/ticket/2794)
- en: '**[orm] [bug]**'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM-level event registration where the “raw” or “propagate” flags
    could potentially be mis-configured in some “unmapped base class” configurations.
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM级别事件注册中“raw”或“propagate”标志在一些“未映射基类”配置中可能被错误配置的bug。
- en: 'References: [#2786](https://www.sqlalchemy.org/trac/ticket/2786)'
  id: totrans-1689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2786](https://www.sqlalchemy.org/trac/ticket/2786)
- en: '**[orm] [bug]**'
  id: totrans-1690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A performance fix related to the usage of the [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") option when loading mapped entities. The function overhead
    of applying a per-object deferred callable to an instance at load time was significantly
    higher than that of just loading the data from the row (note that `defer()` is
    meant to reduce DB/network overhead, not necessarily function call count); the
    function call overhead is now less than that of loading data from the column in
    all cases. There is also a reduction in the number of “lazy callable” objects
    created per load from N (total deferred values in the result) to 1 (total number
    of deferred cols).
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与加载映射实体时使用[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")选项相关的性能修复。在加载时将每个对象的延迟可调用应用于实例的函数开销明显高于仅从行加载数据的开销（请注意，`defer()`旨在减少DB/网络开销，而不一定是函数调用次数）；在所有情况下，函数调用开销现在都小于从列加载数据的开销。每次加载从N（结果中的总延迟值）到1（延迟列的总数）的“延迟可调用”对象数量也减少了。
- en: 'References: [#2778](https://www.sqlalchemy.org/trac/ticket/2778)'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2778](https://www.sqlalchemy.org/trac/ticket/2778)
- en: '**[orm] [bug]**'
  id: totrans-1693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug whereby attribute history functions would fail when an object we moved
    from “persistent” to “pending” using the [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") function, for operations involving collection-based
    backrefs.
  id: totrans-1694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用[`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient")函数将对象从“持久”移动到“挂起”时，涉及基于集合的反向引用的操作会导致属性历史函数失败。
- en: 'References: [#2773](https://www.sqlalchemy.org/trac/ticket/2773)'
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2773](https://www.sqlalchemy.org/trac/ticket/2773)
- en: orm declarative
  id: totrans-1696
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [feature]**'
  id: totrans-1697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [特性]**'
- en: Added a convenience class decorator [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative"), is a wrapper for [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") which allows an existing base class to be applied
    using a nifty class-decorated approach.
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的类装饰器[`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative")，它是[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")的包装器，允许使用一种巧妙的类装饰器方法应用现有的基类。
- en: examples
  id: totrans-1699
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-1700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: Improved the examples in `examples/generic_associations`, including that `discriminator_on_association.py`
    makes use of single table inheritance do the work with the “discriminator”. Also
    added a true “generic foreign key” example, which works similarly to other popular
    frameworks in that it uses an open-ended integer to point to any other table,
    foregoing traditional referential integrity. While we don’t recommend this pattern,
    information wants to be free.
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了`examples/generic_associations`中的示例，包括`discriminator_on_association.py`使用单表继承来处理“鉴别器”。还添加了一个真正的“通用外键”示例，它类似于其他流行框架，使用开放的整数指向任何其他表，放弃传统的引用完整性。虽然我们不推荐这种模式，但信息想要自由。
- en: '**[examples] [bug]**'
  id: totrans-1702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Added “autoincrement=False” to the history table created in the versioning example,
    as this table shouldn’t have autoinc on it in any case, courtesy Patrick Schmid.
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本控制示例中创建的历史表中添加了“autoincrement=False”，因为这个表在任何情况下都不应该具有自增属性，感谢Patrick Schmid。
- en: engine
  id: totrans-1704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: '`repr()` for the [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will now conceal the password using asterisks. Courtesy Gunnlaugur Þór Briem.'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`repr()`现在将使用星号隐藏密码。感谢Gunnlaugur Þór Briem。
- en: 'References: [#2821](https://www.sqlalchemy.org/trac/ticket/2821)'
  id: totrans-1707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2821](https://www.sqlalchemy.org/trac/ticket/2821)
- en: '**[engine] [bug]**'
  id: totrans-1708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数现在使用的正则表达式可以解析ipv6地址，例如用方括号括起来。'
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-1711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: '**[engine] [bug] [oracle]**'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [oracle]**'
- en: Dialect.initialize() is not called a second time if an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is recreated, due to a disconnect error. This fixes
    a particular issue in the Oracle 8 dialect, but in general the dialect.initialize()
    phase should only be once per dialect.
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果重新创建了一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，则不会再次调用
    Dialect.initialize()，这是因为出现了断开连接的错误。这修复了 Oracle 8 方言中的一个特定问题，但通常情况下，dialect.initialize()
    阶段应该只执行一次。
- en: 'References: [#2776](https://www.sqlalchemy.org/trac/ticket/2776)'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2776](https://www.sqlalchemy.org/trac/ticket/2776)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed bug where [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") would lose the correct checked out count if an existing
    pooled connection failed to reconnect after an invalidate or recycle event.
  id: totrans-1716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果现有的池化连接在失效或重新生成事件后无法重新连接，则[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 会丢失正确的检出计数的错误。
- en: 'References: [#2772](https://www.sqlalchemy.org/trac/ticket/2772)'
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2772](https://www.sqlalchemy.org/trac/ticket/2772)
- en: sql
  id: totrans-1718
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new method to the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). Given a list of columns and a
    selectable, renders `INSERT INTO (table) (columns) SELECT ..`.
  id: totrans-1720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新方法到 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    构造中，[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")。给定一个列列表和一个可选择项，渲染 `INSERT INTO
    (table) (columns) SELECT ..`。
- en: 'References: [#722](https://www.sqlalchemy.org/trac/ticket/722)'
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#722](https://www.sqlalchemy.org/trac/ticket/722)
- en: '**[sql] [feature]**'
  id: totrans-1722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs will now interpret ORM entities as target tables to be operated upon,
    e.g.:'
  id: totrans-1723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")、[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 和 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造现在会将 ORM 实体解释为要操作的目标表，例如：'
- en: '[PRE8]'
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**[sql] [bug]**'
  id: totrans-1725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归问题，自 0.7.9 以来，如果 CTE 在多个 FROM 子句中被引用，则可能无法正确引用其名称。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：0.7.11
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-1728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-1729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-1730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式系统中的 bug，如果 CTE 仅用作 `alias()` 构造，则不会使用 WITH 关键字进行呈现。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：0.7.11
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-1733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-1734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL 中的 bug，在这个 bug 中，来自 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的 “quote” 标志不会传播。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：0.7.11
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: '**[sql] [bug]**'
  id: totrans-1737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") would not interpret ORM elements with
    a `__clause_element__()` method properly.
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") 无法正确解释具有 `__clause_element__()` 方法的 ORM
    元素的 bug。
- en: 'References: [#2849](https://www.sqlalchemy.org/trac/ticket/2849)'
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2849](https://www.sqlalchemy.org/trac/ticket/2849)
- en: '**[sql] [bug]**'
  id: totrans-1740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    types now bypass any custom (e.g. TypeDecorator) type in use when producing the
    CHECK constraint for the “non native” type. This so that the custom type isn’t
    involved in the expression within the CHECK, since this expression is against
    the “impl” value and not the “decorated” value.
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为“非本地”类型生成 CHECK 约束时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 和 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 类型现在会跳过任何自定义（例如 TypeDecorator）类型。这样，自定义类型不会参与 CHECK
    中的表达式，因为此表达式针对的是“impl”值而不是“decorated”值。
- en: 'References: [#2842](https://www.sqlalchemy.org/trac/ticket/2842)'
  id: totrans-1742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2842](https://www.sqlalchemy.org/trac/ticket/2842)
- en: '**[sql] [bug]**'
  id: totrans-1743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The `.unique` flag on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") could be produced as `None` if it was generated from
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that didn’t specify `unique` (where it defaults to `None`). The flag will now
    always be `True` or `False`.
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果来自未指定 `unique` 的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") （其中默认为 `None`）生成了 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的 `.unique` 标志可能会产生 `None`。现在该标志将始终为 `True` 或 `False`。
- en: 'References: [#2825](https://www.sqlalchemy.org/trac/ticket/2825)'
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2825](https://www.sqlalchemy.org/trac/ticket/2825)
- en: '**[sql] [bug]**'
  id: totrans-1746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in default compiler plus those of postgresql, mysql, and mssql to
    ensure that any literal SQL expression values are rendered directly as literals,
    instead of as bound parameters, within a CREATE INDEX statement. This also changes
    the rendering scheme for other DDL such as constraints.
  id: totrans-1747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在默认编译器中的 bug，以及 postgresql、mysql 和 mssql 的 bug，以确保在 CREATE INDEX 语句中直接将任何文本
    SQL 表达式值呈现为文字，而不是绑定参数。这也改变了其他 DDL 的呈现方案，如约束。
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[sql] [bug]**'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    that is made to refer to itself in its FROM clause, typically via in-place mutation,
    will raise an informative error message rather than causing a recursion overflow.
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其 FROM 子句中引用自身的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，通常通过原地修改，现在会引发一个信息性错误消息，而不会导致递归溢出。
- en: 'References: [#2815](https://www.sqlalchemy.org/trac/ticket/2815)'
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2815](https://www.sqlalchemy.org/trac/ticket/2815)
- en: '**[sql] [bug]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Non-working “schema” argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") is deprecated; raises a warning. Removed in 0.9.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    上使用的不起作用的“schema”参数已被弃用；会引发警告。在0.9中已移除。
- en: 'References: [#2831](https://www.sqlalchemy.org/trac/ticket/2831)'
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2831](https://www.sqlalchemy.org/trac/ticket/2831)
- en: '**[sql] [bug]**'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using the `column_reflect` event to change the `.key` of the
    incoming [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would prevent primary key constraints, indexes, and foreign key constraints from
    being correctly reflected.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 `column_reflect` 事件来更改传入 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的 `.key` 会阻止正确反映主键约束、索引和外键约束的 bug。
- en: 'References: [#2811](https://www.sqlalchemy.org/trac/ticket/2811)'
  id: totrans-1757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2811](https://www.sqlalchemy.org/trac/ticket/2811)
- en: '**[sql] [bug]**'
  id: totrans-1758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operator added in 0.8 now
    properly produces the negation of the expression “IN” returns when used against
    an empty collection.
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") 操作符在0.8中添加，现在正确地生成了空集合时“IN”返回的表达式的否定。'
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where the expression system relied upon the `str()` form of a some
    expressions when referring to the `.c` collection on a `select()` construct, but
    the `str()` form isn’t available since the element relies on dialect-specific
    compilation constructs, notably the `__getitem__()` operator as used with a PostgreSQL
    `ARRAY` element. The fix also adds a new exception class [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") which is raised in those cases where
    a compiler is asked to compile something it doesn’t know how to.
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，表达式系统在引用`select()`构造中的`.c`集合时依赖于一些表达式的`str()`形式，但是由于元素依赖于特定于方言的编译构造，特别是与PostgreSQL
    `ARRAY`元素一起使用的`__getitem__()`运算符，因此`str()`形式不可用。修复还添加了一个新的异常类[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")，在编译器被要求编译它不知道如何处理的内容时引发该异常。
- en: 'References: [#2780](https://www.sqlalchemy.org/trac/ticket/2780)'
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2780](https://www.sqlalchemy.org/trac/ticket/2780)
- en: postgresql
  id: totrans-1763
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Removed a 128-character truncation from the reflection of the server default
    for a column; this code was original from PG system views which truncated the
    string for readability.
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了对列的服务器默认值反射的128字符截断；此代码最初来自PG系统视图，用于为可读性截断字符串。
- en: 'References: [#2844](https://www.sqlalchemy.org/trac/ticket/2844)'
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2844](https://www.sqlalchemy.org/trac/ticket/2844)
- en: '**[postgresql] [bug]**'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Parenthesis will be applied to a compound SQL expression as rendered in the
    column list of a CREATE INDEX statement.
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 括号将被应用于在CREATE INDEX语句的列列表中呈现的复合SQL表达式。
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[postgresql] [bug]**'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL version strings that had a prefix preceding the words
    “PostgreSQL” or “EnterpriseDB” would not parse. Courtesy Scott Schaefer.
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，其中具有在“PostgreSQL”或“EnterpriseDB”之前的前缀的PostgreSQL版本字符串无法解析。感谢Scott Schaefer。
- en: 'References: [#2819](https://www.sqlalchemy.org/trac/ticket/2819)'
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2819](https://www.sqlalchemy.org/trac/ticket/2819)
- en: mysql
  id: totrans-1773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了MySQL保留字的版本5.5、5.6，感谢Hanno Schlichting。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-1777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: '**[mysql] [bug]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The change in [#2721](https://www.sqlalchemy.org/trac/ticket/2721), which is
    that the `deferrable` keyword of [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is silently ignored on the MySQL backend,
    will be reverted as of 0.9; this keyword will now render again, raising errors
    on MySQL as it is not understood - the same behavior will also apply to the `initially`
    keyword. In 0.8, the keywords will remain ignored but a warning is emitted. Additionally,
    the `match` keyword now raises a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") on 0.9 and emits a warning on 0.8; this keyword
    is not only silently ignored by MySQL but also breaks the ON UPDATE/ON DELETE
    options.
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.9版本中，将撤销[#2721](https://www.sqlalchemy.org/trac/ticket/2721)中的更改，即在MySQL后端上`ForeignKeyConstraint`的`deferrable`关键字将被静默忽略，现在将再次呈现此关键字，在MySQL上引发错误，因为它不被理解
    - 相同的行为也将适用于`initially`关键字。在0.8版本中，这些关键字将继续被忽略，但会发出警告。此外，在0.9版本中，`match`关键字现在会引发一个[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，在0.8版本中会发出警告；这个关键字不仅被MySQL静默忽略，而且会破坏ON UPDATE/ON
    DELETE选项。
- en: To use a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") that does not render or renders differently
    on MySQL, use a custom compilation option. An example of this usage has been added
    to the documentation, see [MySQL / MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys).
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用一个不在MySQL上呈现或呈现方式不同的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，请使用自定义编译选项。文档中已添加了此用法示例，请参见[MySQL /
    MariaDB 外键](../dialects/mysql.html#mysql-foreign-keys)。
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-1781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)，[#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-1782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL-connector dialect now allows options in the create_engine query string
    to override those defaults set up in the connect, including “buffered” and “raise_on_warnings”.
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL-connector 方言现在允许在 create_engine 查询字符串中使用选项来覆盖连接中设置的默认值，包括“buffered”和“raise_on_warnings”。
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-1784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: sqlite
  id: totrans-1785
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The newly added SQLite DATETIME arguments storage_format and regexp apparently
    were not fully implemented correctly; while the arguments were accepted, in practice
    they would have no effect; this has been fixed.
  id: totrans-1787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增的 SQLite DATETIME 参数 storage_format 和 regexp 显然没有完全正确实现；虽然参数被接受了，但实际上它们没有任何效果；这个问题已经修复。
- en: 'References: [#2781](https://www.sqlalchemy.org/trac/ticket/2781)'
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2781](https://www.sqlalchemy.org/trac/ticket/2781)
- en: oracle
  id: totrans-1789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle table reflection using synonyms would fail if the synonym
    and the table were in different remote schemas. Patch to fix courtesy Kyle Derr.
  id: totrans-1791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，Oracle 表反射使用同义词会失败，如果同义词和表位于不同的远程模式中。修复补丁由 Kyle Derr 提供。
- en: 'References: [#2853](https://www.sqlalchemy.org/trac/ticket/2853)'
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2853](https://www.sqlalchemy.org/trac/ticket/2853)
- en: misc
  id: totrans-1793
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature]**'
  id: totrans-1794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature]**'
- en: Added a new flag `system=True` to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which marks the column as a “system” column which
    is automatically made present by the database (such as PostgreSQL `oid` or `xmin`).
    The column will be omitted from the `CREATE TABLE` statement but will otherwise
    be available for querying. In addition, the [`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") construct can be applied to a custom compilation
    rule which allows skipping of columns, by producing a rule that returns `None`.
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的标志 `system=True` 到 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 中，将列标记为“系统”列，该列将由数据库自动添加（例如 PostgreSQL 的 `oid` 或 `xmin`）。该列将从
    `CREATE TABLE` 语句中省略，但在其他情况下可供查询使用。此外，[`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") 构造可以应用于自定义编译规则，允许跳过列，通过生成返回 `None` 的规则。
- en: 0.8.2
  id: totrans-1796
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.2
- en: 'Released: July 3, 2013'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013 年 7 月 3 日
- en: orm
  id: totrans-1798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new method `Query.select_entity_from()` which will in 0.9 replace part
    of the functionality of [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from"). In 0.8, the two methods perform the same
    function, so that code can be migrated to use the `Query.select_entity_from()`
    method as appropriate. See the 0.9 migration guide for details.
  id: totrans-1800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的方法 `Query.select_entity_from()`，将在 0.9 版本中部分取代 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 的功能。在 0.8 版本中，这两个方法执行相同的功能，因此代码可以相应地迁移到使用
    `Query.select_entity_from()` 方法。详细信息请参阅 0.9 迁移指南。
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736)'
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)
- en: '**[orm] [bug]**'
  id: totrans-1802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when trying to flush an object of an inherited class where
    the polymorphic discriminator has been assigned to a value that is invalid for
    the class.
  id: totrans-1803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试刷新一个继承类的对象时，如果多态鉴别器已经被分配了对于该类无效的值，则会发出警告。
- en: 'References: [#2750](https://www.sqlalchemy.org/trac/ticket/2750)'
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2750](https://www.sqlalchemy.org/trac/ticket/2750)
- en: '**[orm] [bug]**'
  id: totrans-1805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in polymorphic SQL generation where multiple joined-inheritance entities
    against the same base class joined to each other as well would not track columns
    on the base table independently of each other if the string of joins were more
    than two entities long.
  id: totrans-1806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态 SQL 生成中的 bug，在多个针对同一基类的连接继承实体之间连接到彼此时，如果连接字符串长度超过两个实体，则不会独立跟踪基表上的列。
- en: 'References: [#2759](https://www.sqlalchemy.org/trac/ticket/2759)'
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2759](https://www.sqlalchemy.org/trac/ticket/2759)
- en: '**[orm] [bug]**'
  id: totrans-1808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where sending a composite attribute into [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") would produce a parenthesized expression not
    accepted by some databases.
  id: totrans-1809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在将复合属性发送到 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 中时，会产生一种括号表达式，某些数据库不接受。
- en: 'References: [#2754](https://www.sqlalchemy.org/trac/ticket/2754)'
  id: totrans-1810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2754](https://www.sqlalchemy.org/trac/ticket/2754)
- en: '**[orm] [bug]**'
  id: totrans-1811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the interaction between composite attributes and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. Previously, composite attributes wouldn’t
    work correctly in comparison operations when aliasing was applied.
  id: totrans-1812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合属性与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数之间的交互。以前，在应用别名时，复合属性在比较操作中不会正确工作。
- en: 'References: [#2755](https://www.sqlalchemy.org/trac/ticket/2755)'
  id: totrans-1813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2755](https://www.sqlalchemy.org/trac/ticket/2755)
- en: '**[orm] [bug] [ext]**'
  id: totrans-1814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") didn’t report a change event when `clear()`
    was called.
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")在调用`clear()`时未报告更改事件的错误。
- en: 'References: [#2730](https://www.sqlalchemy.org/trac/ticket/2730)'
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2730](https://www.sqlalchemy.org/trac/ticket/2730)
- en: '**[orm] [bug]**'
  id: totrans-1817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression caused by [#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    whereby the evaluation invoked by [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") would hit upon unsupported `True` and `False` symbols
    which now appear due to the usage of `IS`.
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2682](https://www.sqlalchemy.org/trac/ticket/2682)引起的回归，即由于使用`IS`而出现的不受支持的`True`和`False`符号导致[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")调用的评估失败。
- en: 'References: [#2737](https://www.sqlalchemy.org/trac/ticket/2737)'
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2737](https://www.sqlalchemy.org/trac/ticket/2737)
- en: '**[orm] [bug]**'
  id: totrans-1820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.7 caused by this ticket, which made the check for
    recursion overflow in self-referential eager joining too loose, missing a particular
    circumstance where a subclass had lazy=”joined” or “subquery” configured and the
    load was a “with_polymorphic” against the base.
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由此票引起的0.7版本的回归，使得在自引用的急切连接中检查递归溢出的过程过于宽松，错过了一个特定情况，即子类配置了lazy=”joined”或“subquery”，并且加载是针对基类的“with_polymorphic”。
- en: 'References: [#2481](https://www.sqlalchemy.org/trac/ticket/2481)'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2481](https://www.sqlalchemy.org/trac/ticket/2481)
- en: '**[orm] [bug]**'
  id: totrans-1823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.7 where the contextmanager feature of [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") would fail to correctly roll back the transaction
    when a flush error occurred, instead raising its own exception while leaving the
    session still pending a rollback.
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.7版本引起的回归，即[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")的上下文管理器功能在发生刷新错误时未能正确回滚事务，而是引发自己的异常，同时使会话仍处于待回滚状态。
- en: 'References: [#2718](https://www.sqlalchemy.org/trac/ticket/2718)'
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2718](https://www.sqlalchemy.org/trac/ticket/2718)
- en: orm declarative
  id: totrans-1826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [feature]**'
  id: totrans-1827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: ORM descriptors such as hybrid properties can now be referenced by name in a
    string argument used with `order_by`, `primaryjoin`, or similar in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), in addition to column-bound attributes.
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以通过名称引用ORM描述符，如混合属性，在与`order_by`、`primaryjoin`或类似的字符串参数一起在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中使用，除了列绑定属性。
- en: 'References: [#2761](https://www.sqlalchemy.org/trac/ticket/2761)'
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2761](https://www.sqlalchemy.org/trac/ticket/2761)
- en: examples
  id: totrans-1830
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed an issue with the “versioning” recipe whereby a many-to-one reference
    could produce a meaningless version for the target, even though it was not changed,
    when backrefs were present. Patch courtesy Matt Chisholm.
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本控制”配方中的一个问题，即当存在反向引用时，一个多对一引用可能会为目标产生一个无意义的版本，即使它没有更改。修补程序由Matt Chisholm提供。
- en: '**[examples] [bug]**'
  id: totrans-1833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a small bug in the dogpile example where the generation of SQL cache keys
    wasn’t applying deduping labels to the statement the same way [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") normally does.
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了狗窝示例中的一个小错误，即生成SQL缓存键时未像[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")通常做的那样对语句应用去重标签。
- en: engine
  id: totrans-1835
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the `reset_on_return` argument to various [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementations would not be propagated when the pool
    was regenerated. Courtesy Eevee.
  id: totrans-1837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即各种[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    实现的`reset_on_return`参数在重新生成池时不会传播。感谢Eevee。
- en: '**[engine] [bug] [sybase]**'
  id: totrans-1838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [sybase]**'
- en: Fixed a bug where the routine to detect the correct kwargs being sent to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") would fail in some cases, such as with the Sybase
    dialect.
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即检测正确的kwargs被发送到[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的例程在某些情况下会失败，比如在Sybase方言中。
- en: 'References: [#2732](https://www.sqlalchemy.org/trac/ticket/2732)'
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2732](https://www.sqlalchemy.org/trac/ticket/2732)
- en: sql
  id: totrans-1841
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Provided a new attribute for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") called [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types"), to make it easier to control
    how comparisons using `==` or `!=` to `None` and boolean types goes about producing
    an `IS` expression, or a plain equality expression with a bound parameter.
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")提供了一个名为[`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types")的新属性，以便更容易控制使用`==`或`!=`与`None`和布尔类型进行比较时如何产生`IS`表达式，或者带有绑定参数的普通相等���达式。
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)'
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)
- en: '**[sql] [bug]**'
  id: totrans-1845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Multiple fixes to the correlation behavior of [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, first introduced in 0.8.0:'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造中引入的相关联行为进行了多次修复，这是从0.8.0版本开始的：
- en: To satisfy the use case where FROM entries should be correlated outwards to
    a SELECT that encloses another, which then encloses this one, correlation now
    works across multiple levels when explicit correlation is established via [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate"), provided that the target select
    is somewhere along the chain contained by a WHERE/ORDER BY/columns clause, not
    just nested FROM clauses. This makes [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") act more compatibly to that of 0.7
    again while still maintaining the new “smart” correlation.
  id: totrans-1847
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了满足FROM条目应该向外部相关联到包含另一个SELECT的SELECT，然后再包含这个SELECT的用例，当通过[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")建立明确的相关联时，现在在多个级别上进行相关联，只要目标SELECT在链中的某处被包含在一个WHERE/ORDER
    BY/columns子句中，而不仅仅是嵌套的FROM子句。这使得[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")的行为再次更加兼容0.7，同时仍然保持新的“智能”相关联。
- en: When explicit correlation is not used, the usual “implicit” correlation limits
    its behavior to just the immediate enclosing SELECT, to maximize compatibility
    with 0.7 applications, and also prevents correlation across nested FROMs in this
    case, maintaining compatibility with 0.8.0/0.8.1.
  id: totrans-1848
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当未使用明确的相关联时，“隐式”相关联将其行为限制在仅仅是直接包含的SELECT中，以最大程度地提高与0.7应用程序的兼容性，并且在这种情况下还防止了跨嵌套FROM的相关联，保持了与0.8.0/0.8.1的兼容性。
- en: The [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method was not preventing
    the given FROM clauses from correlation in all cases, and also would cause FROM
    clauses to be incorrectly omitted entirely (more like what 0.7 would do), this
    has been fixed.
  id: totrans-1849
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法在所有情况下都未能阻止给定的FROM子句进行相关联，并且还会导致FROM子句被错误地完全省略（更像是0.7版本的行为），这个问题已经修复。'
- en: Calling select.correlate_except(None) will enter all FROM clauses into correlation
    as would be expected.
  id: totrans-1850
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用select.correlate_except(None)将使所有FROM子句进入相关联，正如预期的那样。
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)'
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)
- en: '**[sql] [bug]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby joining a select() of a table “A” with multiple foreign key
    paths to a table “B”, to that table “B”, would fail to produce the “ambiguous
    join condition” error that would be reported if you join table “A” directly to
    “B”; it would instead produce a join condition with multiple criteria.
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即将一个表“A”的 select() 与多个外键路径连接到表“B”，到表“B”，如果直接将表“A”连接到“B”会报告“模糊的连接条件”错误，但连接条件会包含多个条件。
- en: 'References: [#2738](https://www.sqlalchemy.org/trac/ticket/2738)'
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2738](https://www.sqlalchemy.org/trac/ticket/2738)
- en: '**[sql] [bug] [reflection]**'
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [reflection]**'
- en: Fixed bug whereby using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") across a remote schema as well as a local
    schema could produce wrong results in the case where both schemas had a table
    of the same name.
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在远程模式下使用 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 跨越一个本地模式和一个远程模式的模式时，如果两个模式都有相同名称的表，则可能产生错误的结果。
- en: 'References: [#2728](https://www.sqlalchemy.org/trac/ticket/2728)'
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2728](https://www.sqlalchemy.org/trac/ticket/2728)
- en: '**[sql] [bug]**'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed the “not implemented” `__iter__()` call from the base [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") class, while this was introduced
    in 0.8.0 to prevent an endless, memory-growing loop when one also implements a
    `__getitem__()` method on a custom operator and then calls erroneously `list()`
    on that object, it had the effect of causing column elements to report that they
    were in fact iterable types which then throw an error when you try to iterate.
    There’s no real way to have both sides here so we stick with Python best practices.
    Careful with implementing `__getitem__()` on your custom operators!
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从基础 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 类中移除了“未实现”的`__iter__()`调用，虽然这是在 0.8.0
    中引入的，以防止在自定义运算符上实现`__getitem__()`方法并在该对象上错误调用`list()`时出现无限、内存增长的循环，但这会导致列元素报告它们实际上是可迭代类型，然后在尝试迭代时抛出错误。在这里没有真正的办法同时拥有两边，所以我们坚持使用
    Python 的最佳实践。在自定义运算符上实现`__getitem__()`时要小心！
- en: 'References: [#2726](https://www.sqlalchemy.org/trac/ticket/2726)'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2726](https://www.sqlalchemy.org/trac/ticket/2726)
- en: '**[sql] [bug] [mssql]**'
  id: totrans-1861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mssql]**'
- en: Regression from this ticket caused the unsupported keyword “true” to render,
    added logic to convert this to 1/0 for SQL server.
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这个问题导致不支持的关键字“true”被呈现，添加逻辑将其转换为 SQL Server 的 1/0。
- en: 'References: [#2682](https://www.sqlalchemy.org/trac/ticket/2682)'
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
- en: postgresql
  id: totrans-1864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL 9.2 range types has been added. Currently, no type translation
    is provided, so works directly with strings or psycopg2 2.5 range extension types
    at the moment. Patch courtesy Chris Withers.
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 9.2 范围类型的支持。目前，不提供类型转换，因此目前直接使用字符串或 psycopg2 2.5 范围扩展类型。补丁由
    Chris Withers 提供。
- en: '**[postgresql] [feature]**'
  id: totrans-1867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation when using the psycopg2 DBAPI. The
    keyword is available via the `isolation_level` execution option. Patch courtesy
    Roman Podolyaka.
  id: totrans-1868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 DBAPI 时，添加了对“AUTOCOMMIT”隔离的支持。该关键字可通过`isolation_level`执行选项使用。补丁由
    Roman Podolyaka 提供。
- en: 'References: [#2072](https://www.sqlalchemy.org/trac/ticket/2072)'
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2072](https://www.sqlalchemy.org/trac/ticket/2072)
- en: '**[postgresql] [bug]**'
  id: totrans-1870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The behavior of [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") has been simplified on the PostgreSQL dialect
    to no longer inject a hardcoded `::timestamp` or similar cast into the given expression,
    as this interfered with types such as timezone-aware datetimes, but also does
    not appear to be at all necessary with modern versions of psycopg2.
  id: totrans-1871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言上，[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") 的行为已简化，不再向给定表达式注入硬编码的`::timestamp`或类似转换，因为这会干扰诸如时区感知日期时间之类的类型，但在现代版本的
    psycopg2 中似乎也不是必要的。
- en: 'References: [#2740](https://www.sqlalchemy.org/trac/ticket/2740)'
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2740](https://www.sqlalchemy.org/trac/ticket/2740)
- en: '**[postgresql] [bug]**'
  id: totrans-1873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in HSTORE type where keys/values that contained backslashed quotes
    would not be escaped correctly when using the “non native” (i.e. non-psycopg2)
    means of translating HSTORE data. Patch courtesy Ryan Kelly.
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型中包含反斜杠引号的键/值在使用“非本机”（即非-psycopg2）手段翻译 HSTORE 数据时无法正确转义的错误。感谢 Ryan
    Kelly 提供的补丁。
- en: 'References: [#2766](https://www.sqlalchemy.org/trac/ticket/2766)'
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2766](https://www.sqlalchemy.org/trac/ticket/2766)
- en: '**[postgresql] [bug]**'
  id: totrans-1876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the order of columns in a multi-column PostgreSQL index would
    be reflected in the wrong order. Courtesy Roman Podolyaka.
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多列 PostgreSQL 索引中列的顺序反映错误的 bug。感谢 Roman Podolyaka。
- en: 'References: [#2767](https://www.sqlalchemy.org/trac/ticket/2767)'
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2767](https://www.sqlalchemy.org/trac/ticket/2767)
- en: '**[postgresql] [bug]**'
  id: totrans-1879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the HSTORE type to correctly encode/decode for unicode. This is always
    on, as the hstore is a textual type, and matches the behavior of psycopg2 when
    using Python 3. Courtesy Dmitry Mugtasimov.
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型以正确编码/解码 Unicode。这始终开启，因为 hstore 是一种文本类型，并且在使用 Python 3 时与 psycopg2
    的行为匹配。感谢 Dmitry Mugtasimov。
- en: 'References: [#2735](https://www.sqlalchemy.org/trac/ticket/2735)'
  id: totrans-1881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2735](https://www.sqlalchemy.org/trac/ticket/2735)
- en: mysql
  id: totrans-1882
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: The `mysql_length` parameter used with [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") can now be passed as a dictionary of column names/lengths,
    for use with composite indexes. Big thanks to Roman Podolyaka for the patch.
  id: totrans-1884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    的 `mysql_length` 参数现在可以作为列名/长度字典传递，用于复合索引。非常感�� Roman Podolyaka 提供的补丁。
- en: 'References: [#2704](https://www.sqlalchemy.org/trac/ticket/2704)'
  id: totrans-1885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2704](https://www.sqlalchemy.org/trac/ticket/2704)
- en: '**[mysql] [bug]**'
  id: totrans-1886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug when using multi-table UPDATE where a supplemental table is a SELECT
    with its own bound parameters, where the positioning of the bound parameters would
    be reversed versus the statement itself when using MySQL’s special syntax.
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用多表 UPDATE 时出现的 bug，其中一个补充表是带有自己绑定参数的 SELECT，当使用 MySQL 的特殊语法时，绑定参数的位置与语句本身相反。
- en: 'References: [#2768](https://www.sqlalchemy.org/trac/ticket/2768)'
  id: totrans-1888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2768](https://www.sqlalchemy.org/trac/ticket/2768)
- en: '**[mysql] [bug]**'
  id: totrans-1889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another conditional to the `mysql+gaerdbms` dialect to detect so-called
    “development” mode, where we should use the `rdbms_mysqldb` DBAPI. Patch courtesy
    Brett Slatkin.
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了另一个条件到 `mysql+gaerdbms` 方言中，以检测所谓的“开发”模式，在这种模式下，我们应该使用 `rdbms_mysqldb` DBAPI。感谢
    Brett Slatkin 提供的补丁。
- en: 'References: [#2715](https://www.sqlalchemy.org/trac/ticket/2715)'
  id: totrans-1891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2715](https://www.sqlalchemy.org/trac/ticket/2715)
- en: '**[mysql] [bug]**'
  id: totrans-1892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The `deferrable` keyword argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") will not render the `DEFERRABLE` keyword
    on the MySQL dialect. For a long time we left this in place because a non-deferrable
    foreign key would act very differently than a deferrable one, but some environments
    just disable FKs on MySQL, so we’ll be less opinionated here.
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    和 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 上的 `deferrable` 关键字参数不会在 MySQL 方言上呈现
    `DEFERRABLE` 关键字。很长一段时间以来，我们一直保留这个设置，因为非延迟外键与延迟外键的行为非常不同，但某些环境只是在 MySQL 上禁用 FKs，所以我们在这里会少些主观意见。
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721)'
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)
- en: '**[mysql] [bug]**'
  id: totrans-1895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated mysqlconnector dialect to check for disconnect based on the apparent
    string message sent in the exception; tested against mysqlconnector 1.0.9.
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 mysqlconnector 方言以根据异常中发送的明显字符串消息检查断开连接；已针对 mysqlconnector 1.0.9 进行测试。
- en: sqlite
  id: totrans-1897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") to the list of type names that can be reflected by
    the SQLite dialect; courtesy Russell Stuart.
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") 添加到可以由 SQLite 方言反射的类型名称列表中；感谢 Russell Stuart。
- en: 'References: [#2764](https://www.sqlalchemy.org/trac/ticket/2764)'
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2764](https://www.sqlalchemy.org/trac/ticket/2764)
- en: mssql
  id: totrans-1901
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: When querying the information schema on SQL Server 2000, removed a CAST call
    that was added in 0.8.1 to help with driver issues, which apparently is not compatible
    on 2000. The CAST remains in place for SQL Server 2005 and greater.
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询 SQL Server 2000 上的信息模式时，移除了在 0.8.1 版本中添加的 CAST 调用，以帮助处理驱动程序问题，显然在 2000 年不兼容。CAST
    仍然适用于 SQL Server 2005 及更高版本。
- en: 'References: [#2747](https://www.sqlalchemy.org/trac/ticket/2747)'
  id: totrans-1904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2747](https://www.sqlalchemy.org/trac/ticket/2747)
- en: misc
  id: totrans-1905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [firebird]**'
  id: totrans-1906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: Added new flag `retaining=True` to the kinterbasdb and fdb dialects. This controls
    the value of the `retaining` flag sent to the `commit()` and `rollback()` methods
    of the DBAPI connection. Due to historical concerns, this flag defaults to `True`
    in 0.8.2, however in 0.9.0b1 this flag defaults to `False`.
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 kinterbasdb 和 fdb 方言添加了新标志 `retaining=True`。这控制发送到 DBAPI 连接的 `commit()` 和
    `rollback()` 方法的 `retaining` 标志的值。由于历史原因，在 0.8.2 版本中，此标志默认为 `True`，但在 0.9.0b1
    版本中，此标志默认为 `False`。
- en: 'References: [#2763](https://www.sqlalchemy.org/trac/ticket/2763)'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2763](https://www.sqlalchemy.org/trac/ticket/2763)
- en: '**[bug] [firebird]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Type lookup when reflecting the Firebird types LONG and INT64 has been fixed
    so that LONG is treated as INTEGER, INT64 treated as BIGINT, unless the type has
    a “precision” in which case it’s treated as NUMERIC. Patch courtesy Russell Stuart.
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射 Firebird 类型 LONG 和 INT64 时，类型查找已修复，使得 LONG 被视为 INTEGER，INT64 被视为 BIGINT，除非该类型具有“精度”，在这种情况下，它将被视为
    NUMERIC。补丁由 Russell Stuart 提供。
- en: 'References: [#2757](https://www.sqlalchemy.org/trac/ticket/2757)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2757](https://www.sqlalchemy.org/trac/ticket/2757)
- en: '**[bug] [ext]**'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug whereby if a composite type were set up with a function instead of
    a class, the mutable extension would trip up when it tried to check that column
    for being a [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") (which it isn’t). Courtesy asldevi.
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果使用函数而不是类设置复合类型，则当尝试检查该列是否为 [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 时，可变扩展会出错（它不是）。感谢 asldevi。
- en: '**[requirements]**'
  id: totrans-1914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[requirements]**'
- en: The Python [mock](https://pypi.org/project/mock) library is now required in
    order to run the unit test suite. While part of the standard library as of Python
    3.3, previous Python installations will need to install this in order to run unit
    tests or to use the `sqlalchemy.testing` package for external dialects.
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在运行单元测试套件需要 Python 的 [mock](https://pypi.org/project/mock) 库。虽然作为 Python 3.3
    的一部分，但之前的 Python 安装需要安装此库才能运行单元测试或使用 `sqlalchemy.testing` 包进行外部方言。
- en: orm
  id: totrans-1916
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new method `Query.select_entity_from()` which will in 0.9 replace part
    of the functionality of [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from"). In 0.8, the two methods perform the same
    function, so that code can be migrated to use the `Query.select_entity_from()`
    method as appropriate. See the 0.9 migration guide for details.
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新方法 `Query.select_entity_from()`，将在 0.9 版本中取代 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 的部分功能。在 0.8 版本中，这两个方法执行相同的功能，因此可以将代码迁移到适当使用
    `Query.select_entity_from()` 方法。详细信息请参阅 0.9 迁移指南。
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736)'
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)
- en: '**[orm] [bug]**'
  id: totrans-1920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when trying to flush an object of an inherited class where
    the polymorphic discriminator has been assigned to a value that is invalid for
    the class.
  id: totrans-1921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试刷新一个继承类的对象时，如果多态鉴别器被分配给了该类无效的值，将会发出警告。
- en: 'References: [#2750](https://www.sqlalchemy.org/trac/ticket/2750)'
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2750](https://www.sqlalchemy.org/trac/ticket/2750)
- en: '**[orm] [bug]**'
  id: totrans-1923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in polymorphic SQL generation where multiple joined-inheritance entities
    against the same base class joined to each other as well would not track columns
    on the base table independently of each other if the string of joins were more
    than two entities long.
  id: totrans-1924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态 SQL 生成中的错误，如果多个继承实体针对同一基类相互连接，且连接字符串超过两个实体，则基表上的列将无法独立跟踪彼此。
- en: 'References: [#2759](https://www.sqlalchemy.org/trac/ticket/2759)'
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2759](https://www.sqlalchemy.org/trac/ticket/2759)
- en: '**[orm] [bug]**'
  id: totrans-1926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where sending a composite attribute into [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") would produce a parenthesized expression not
    accepted by some databases.
  id: totrans-1927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将复合属性发送到[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")会产生一种某些数据库不接受的带括号的表达式的错误。
- en: 'References: [#2754](https://www.sqlalchemy.org/trac/ticket/2754)'
  id: totrans-1928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2754](https://www.sqlalchemy.org/trac/ticket/2754)
- en: '**[orm] [bug]**'
  id: totrans-1929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed the interaction between composite attributes and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. Previously, composite attributes wouldn’t
    work correctly in comparison operations when aliasing was applied.
  id: totrans-1930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合属性与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数之间的交互。
    以前，在应用别名时，复合属性在比较操作中无法正常工作。
- en: 'References: [#2755](https://www.sqlalchemy.org/trac/ticket/2755)'
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2755](https://www.sqlalchemy.org/trac/ticket/2755)
- en: '**[orm] [bug] [ext]**'
  id: totrans-1932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [扩展]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") didn’t report a change event when `clear()`
    was called.
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当调用`clear()`时[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未报告更改事件的错误。
- en: 'References: [#2730](https://www.sqlalchemy.org/trac/ticket/2730)'
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2730](https://www.sqlalchemy.org/trac/ticket/2730)
- en: '**[orm] [bug]**'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a regression caused by [#2682](https://www.sqlalchemy.org/trac/ticket/2682)
    whereby the evaluation invoked by [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") and [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") would hit upon unsupported `True` and `False` symbols
    which now appear due to the usage of `IS`.
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2682](https://www.sqlalchemy.org/trac/ticket/2682)引起的回归，即[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")和[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")调用的评估会遇到由于使用`IS`而出现的不支持的`True`和`False`符号。
- en: 'References: [#2737](https://www.sqlalchemy.org/trac/ticket/2737)'
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2737](https://www.sqlalchemy.org/trac/ticket/2737)
- en: '**[orm] [bug]**'
  id: totrans-1938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a regression from 0.7 caused by this ticket, which made the check for
    recursion overflow in self-referential eager joining too loose, missing a particular
    circumstance where a subclass had lazy=”joined” or “subquery” configured and the
    load was a “with_polymorphic” against the base.
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由此票引起的从0.7版本中的一个回归，该回归使得在自引用的急切连接中递归溢出检查过于宽松，错过了一个特定情况，即子类配置了lazy=”joined”或“subquery”，并且加载是针对基类的“with_polymorphic”。
- en: 'References: [#2481](https://www.sqlalchemy.org/trac/ticket/2481)'
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2481](https://www.sqlalchemy.org/trac/ticket/2481)
- en: '**[orm] [bug]**'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]** '
- en: Fixed a regression from 0.7 where the contextmanager feature of [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") would fail to correctly roll back the transaction
    when a flush error occurred, instead raising its own exception while leaving the
    session still pending a rollback.
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.7版本中的一个回归，即[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")的上下文管理器功能在发生刷新错误时无法正确回滚事务，而是引发自己的异常，同时保留会话仍在等待回滚。
- en: 'References: [#2718](https://www.sqlalchemy.org/trac/ticket/2718)'
  id: totrans-1943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2718](https://www.sqlalchemy.org/trac/ticket/2718)
- en: orm declarative
  id: totrans-1944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [feature]**'
  id: totrans-1945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明] [功能]**'
- en: ORM descriptors such as hybrid properties can now be referenced by name in a
    string argument used with `order_by`, `primaryjoin`, or similar in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), in addition to column-bound attributes.
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以通过名称引用ORM描述符，例如混合属性，在与`relationship()`中使用的字符串参数中，用于`order_by`，`primaryjoin`或类似操作，除了列绑定属性。
- en: 'References: [#2761](https://www.sqlalchemy.org/trac/ticket/2761)'
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2761](https://www.sqlalchemy.org/trac/ticket/2761)
- en: examples
  id: totrans-1948
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed an issue with the “versioning” recipe whereby a many-to-one reference
    could produce a meaningless version for the target, even though it was not changed,
    when backrefs were present. Patch courtesy Matt Chisholm.
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本控制”配方中的一个问题，即当存在反向引用时，一个多对一引用可能会为目标产生一个无意义的版本，即使它没有被更改。 补丁由Matt Chisholm提供。
- en: '**[examples] [bug]**'
  id: totrans-1951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed a small bug in the dogpile example where the generation of SQL cache keys
    wasn’t applying deduping labels to the statement the same way [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") normally does.
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了狗窝示例中的一个小 bug，在生成 SQL 缓存键时，没有像 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 通常做的那样将去重标签应用到语句上的问题。
- en: engine
  id: totrans-1953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the `reset_on_return` argument to various [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementations would not be propagated when the pool
    was regenerated. Courtesy Eevee.
  id: totrans-1955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在重新生成池时，各种 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    实现中的 `reset_on_return` 参数不会传播的问题。感谢 Eevee。
- en: '**[engine] [bug] [sybase]**'
  id: totrans-1956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [sybase]**'
- en: Fixed a bug where the routine to detect the correct kwargs being sent to [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") would fail in some cases, such as with the Sybase
    dialect.
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在某些情况下（例如 Sybase 方言），用于检测传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的正确 kwargs 的例程会失败的问题。
- en: 'References: [#2732](https://www.sqlalchemy.org/trac/ticket/2732)'
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2732](https://www.sqlalchemy.org/trac/ticket/2732)
- en: sql
  id: totrans-1959
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Provided a new attribute for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") called [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types"), to make it easier to control
    how comparisons using `==` or `!=` to `None` and boolean types goes about producing
    an `IS` expression, or a plain equality expression with a bound parameter.
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 提供了一个新属性，名为 [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types")，使得更容易控制使用 `==` 或 `!=` 与 `None`
    和布尔类型进行比较时产生 `IS` 表达式或带有绑定参数的普通等式表达式的方式。
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)'
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)
- en: '**[sql] [bug]**'
  id: totrans-1963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Multiple fixes to the correlation behavior of [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, first introduced in 0.8.0:'
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造的相关行为进行了多次修复，这些修复首次出现在 0.8.0 中：
- en: To satisfy the use case where FROM entries should be correlated outwards to
    a SELECT that encloses another, which then encloses this one, correlation now
    works across multiple levels when explicit correlation is established via [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate"), provided that the target select
    is somewhere along the chain contained by a WHERE/ORDER BY/columns clause, not
    just nested FROM clauses. This makes [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") act more compatibly to that of 0.7
    again while still maintaining the new “smart” correlation.
  id: totrans-1965
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了满足应该将 FROM 条目向外相关到封装另一个 SELECT 的 SELECT，然后再封装此 SELECT 的用例，现在当通过 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 建立了显式相关性时，相关性会在多个级别上进行操作，前提是目标选择在由
    WHERE/ORDER BY/columns 子句包含的链中的某个位置，而不仅仅是嵌套 FROM 子句。这使得 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 再次表现得更加与 0.7 兼容，同时仍保持新的“智能”相关性。
- en: When explicit correlation is not used, the usual “implicit” correlation limits
    its behavior to just the immediate enclosing SELECT, to maximize compatibility
    with 0.7 applications, and also prevents correlation across nested FROMs in this
    case, maintaining compatibility with 0.8.0/0.8.1.
  id: totrans-1966
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当未使用显式相关性时，通常的“隐式”相关性限制其行为仅限于直接封闭的 SELECT，以最大限度地提高与 0.7 应用的兼容性，并且在这种情况下还防止了跨嵌套
    FROM 的相关性，从而保持了与 0.8.0/0.8.1 的兼容性。
- en: The [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method was not preventing
    the given FROM clauses from correlation in all cases, and also would cause FROM
    clauses to be incorrectly omitted entirely (more like what 0.7 would do), this
    has been fixed.
  id: totrans-1967
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")方法未在所有情况下阻止给定的FROM子句进行关联，并且还会导致FROM子句被错误地完全省略（更像是0.7的行为），这已经修复。'
- en: Calling select.correlate_except(None) will enter all FROM clauses into correlation
    as would be expected.
  id: totrans-1968
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用select.correlate_except(None)将使所有FROM子句进入关联，这是预期的行为。
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)
- en: '**[sql] [bug]**'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby joining a select() of a table “A” with multiple foreign key
    paths to a table “B”, to that table “B”, would fail to produce the “ambiguous
    join condition” error that would be reported if you join table “A” directly to
    “B”; it would instead produce a join condition with multiple criteria.
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即将一个表“A”的select()与到表“B”的多个外键路径连接时，连接到表“B”会失败，而不会产生“模糊的连接条件”错误，如果直接将表“A”连接到“B”会报告错误；相反，它会产生具有多个条件的连接条件。
- en: 'References: [#2738](https://www.sqlalchemy.org/trac/ticket/2738)'
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2738](https://www.sqlalchemy.org/trac/ticket/2738)
- en: '**[sql] [bug] [reflection]**'
  id: totrans-1973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [reflection]**'
- en: Fixed bug whereby using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") across a remote schema as well as a local
    schema could produce wrong results in the case where both schemas had a table
    of the same name.
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在远程模式下使用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")跨越一个本地模式和一个远程模式时，如果两个模式都有相同名称的表，则可能产生错误的结果。
- en: 'References: [#2728](https://www.sqlalchemy.org/trac/ticket/2728)'
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2728](https://www.sqlalchemy.org/trac/ticket/2728)
- en: '**[sql] [bug]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed the “not implemented” `__iter__()` call from the base [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") class, while this was introduced
    in 0.8.0 to prevent an endless, memory-growing loop when one also implements a
    `__getitem__()` method on a custom operator and then calls erroneously `list()`
    on that object, it had the effect of causing column elements to report that they
    were in fact iterable types which then throw an error when you try to iterate.
    There’s no real way to have both sides here so we stick with Python best practices.
    Careful with implementing `__getitem__()` on your custom operators!
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从基础[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")类中删除了“未实现”的`__iter__()`调用，尽管这在0.8.0中引入是为了防止在自定义运算符上实现`__getitem__()`方法并在该对象上错误调用`list()`时出现无限、内存增长的循环，但这导致列元素报告它们实际上是可迭代类型，然后在尝试迭代时抛出错误。在这里没有真正的办法同时实现两者，因此我们坚持使用Python最佳实践。在自定义运算符上实现`__getitem__()`时要小心！
- en: 'References: [#2726](https://www.sqlalchemy.org/trac/ticket/2726)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2726](https://www.sqlalchemy.org/trac/ticket/2726)
- en: '**[sql] [bug] [mssql]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mssql]**'
- en: Regression from this ticket caused the unsupported keyword “true” to render,
    added logic to convert this to 1/0 for SQL server.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这个票据中导致不支持的关键字“true”被呈现，添加逻辑将其转换为SQL服务器的1/0。
- en: 'References: [#2682](https://www.sqlalchemy.org/trac/ticket/2682)'
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
- en: postgresql
  id: totrans-1982
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL 9.2 range types has been added. Currently, no type translation
    is provided, so works directly with strings or psycopg2 2.5 range extension types
    at the moment. Patch courtesy Chris Withers.
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL 9.2范围类型的支持。目前，不提供类型转换，因此目前直接使用字符串或psycopg2 2.5范围扩展类型。补丁由Chris
    Withers提供。
- en: '**[postgresql] [feature]**'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation when using the psycopg2 DBAPI. The
    keyword is available via the `isolation_level` execution option. Patch courtesy
    Roman Podolyaka.
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用psycopg2 DBAPI时，添加了对“AUTOCOMMIT”隔离的支持。该关键字可通过`isolation_level`执行选项使用。补丁由Roman
    Podolyaka提供。
- en: 'References: [#2072](https://www.sqlalchemy.org/trac/ticket/2072)'
  id: totrans-1987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2072](https://www.sqlalchemy.org/trac/ticket/2072)
- en: '**[postgresql] [bug]**'
  id: totrans-1988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The behavior of [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") has been simplified on the PostgreSQL dialect
    to no longer inject a hardcoded `::timestamp` or similar cast into the given expression,
    as this interfered with types such as timezone-aware datetimes, but also does
    not appear to be at all necessary with modern versions of psycopg2.
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PostgreSQL方言上，[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") 的行为已经简化，不再将硬编码的 `::timestamp` 或类似的转换注入到给定的表达式中，因为这会干扰到像时区感知的日期时间这样的类型，但是对于现代版本的psycopg2来说，这似乎完全不必要。
- en: 'References: [#2740](https://www.sqlalchemy.org/trac/ticket/2740)'
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2740](https://www.sqlalchemy.org/trac/ticket/2740)
- en: '**[postgresql] [bug]**'
  id: totrans-1991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in HSTORE type where keys/values that contained backslashed quotes
    would not be escaped correctly when using the “non native” (i.e. non-psycopg2)
    means of translating HSTORE data. Patch courtesy Ryan Kelly.
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了HSTORE类型中的一个错误，即包含反斜杠引号的键/值在使用“非本地”（即非-psycopg2）方式转换HSTORE数据时无法正确转义。补丁由Ryan
    Kelly提供。
- en: 'References: [#2766](https://www.sqlalchemy.org/trac/ticket/2766)'
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2766](https://www.sqlalchemy.org/trac/ticket/2766)
- en: '**[postgresql] [bug]**'
  id: totrans-1994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the order of columns in a multi-column PostgreSQL index would
    be reflected in the wrong order. Courtesy Roman Podolyaka.
  id: totrans-1995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多列PostgreSQL索引中列的顺序反映错误顺序的错误。感谢Roman Podolyaka。
- en: 'References: [#2767](https://www.sqlalchemy.org/trac/ticket/2767)'
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2767](https://www.sqlalchemy.org/trac/ticket/2767)
- en: '**[postgresql] [bug]**'
  id: totrans-1997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed the HSTORE type to correctly encode/decode for unicode. This is always
    on, as the hstore is a textual type, and matches the behavior of psycopg2 when
    using Python 3. Courtesy Dmitry Mugtasimov.
  id: totrans-1998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了HSTORE类型以正确地对Unicode进行编码/解码。这总是开启的，因为hstore是一种文本类型，并且与使用Python 3时psycopg2的行为匹配。感谢Dmitry
    Mugtasimov。
- en: 'References: [#2735](https://www.sqlalchemy.org/trac/ticket/2735)'
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2735](https://www.sqlalchemy.org/trac/ticket/2735)
- en: mysql
  id: totrans-2000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The `mysql_length` parameter used with [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") can now be passed as a dictionary of column names/lengths,
    for use with composite indexes. Big thanks to Roman Podolyaka for the patch.
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    中使用的 `mysql_length` 参数现在可以作为列名/长度的字典传递，用于复合索引。非常感谢Roman Podolyaka提供的补丁。
- en: 'References: [#2704](https://www.sqlalchemy.org/trac/ticket/2704)'
  id: totrans-2003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2704](https://www.sqlalchemy.org/trac/ticket/2704)
- en: '**[mysql] [bug]**'
  id: totrans-2004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug when using multi-table UPDATE where a supplemental table is a SELECT
    with its own bound parameters, where the positioning of the bound parameters would
    be reversed versus the statement itself when using MySQL’s special syntax.
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用多表UPDATE时出现的一个错误，其中一个辅助表是带有自己绑定参数的SELECT，当使用MySQL的特殊语法时，绑定参数的位置与语句本身相反。
- en: 'References: [#2768](https://www.sqlalchemy.org/trac/ticket/2768)'
  id: totrans-2006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2768](https://www.sqlalchemy.org/trac/ticket/2768)
- en: '**[mysql] [bug]**'
  id: totrans-2007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another conditional to the `mysql+gaerdbms` dialect to detect so-called
    “development” mode, where we should use the `rdbms_mysqldb` DBAPI. Patch courtesy
    Brett Slatkin.
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `mysql+gaerdbms` 方言中添加了另一个条件来检测所谓的“开发”模式，在这种情况下，我们应该使用 `rdbms_mysqldb` DBAPI。补丁由Brett
    Slatkin提供。
- en: 'References: [#2715](https://www.sqlalchemy.org/trac/ticket/2715)'
  id: totrans-2009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2715](https://www.sqlalchemy.org/trac/ticket/2715)
- en: '**[mysql] [bug]**'
  id: totrans-2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The `deferrable` keyword argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") will not render the `DEFERRABLE` keyword
    on the MySQL dialect. For a long time we left this in place because a non-deferrable
    foreign key would act very differently than a deferrable one, but some environments
    just disable FKs on MySQL, so we’ll be less opinionated here.
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL方言上，[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 上的 `deferrable` 关键字参数将不会渲染 `DEFERRABLE`
    关键字。很长一段时间以来，我们一直保留这个功能，因为非延迟外键的行为与延迟外键的行为有很大不同，但是一些环境只是在MySQL上禁用了FK，所以我们在这里的态度会更加开放。
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721)'
  id: totrans-2012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)
- en: '**[mysql] [bug]**'
  id: totrans-2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated mysqlconnector dialect to check for disconnect based on the apparent
    string message sent in the exception; tested against mysqlconnector 1.0.9.
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了mysqlconnector方言，根据异常中发送的明显字符串消息检查断开连接；已针对mysqlconnector 1.0.9进行了测试。
- en: sqlite
  id: totrans-2015
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") to the list of type names that can be reflected by
    the SQLite dialect; courtesy Russell Stuart.
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT")添加到可以由SQLite方言反射的类型名称列表中；感谢Russell Stuart。
- en: 'References: [#2764](https://www.sqlalchemy.org/trac/ticket/2764)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2764](https://www.sqlalchemy.org/trac/ticket/2764)
- en: mssql
  id: totrans-2019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: When querying the information schema on SQL Server 2000, removed a CAST call
    that was added in 0.8.1 to help with driver issues, which apparently is not compatible
    on 2000. The CAST remains in place for SQL Server 2005 and greater.
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server 2000上查询信息模式时，删除了在0.8.1中添加的CAST调用，以帮助处理驱动程序问题，显然在2000上不兼容。CAST保留在SQL
    Server 2005及更高版本中。
- en: 'References: [#2747](https://www.sqlalchemy.org/trac/ticket/2747)'
  id: totrans-2022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2747](https://www.sqlalchemy.org/trac/ticket/2747)
- en: misc
  id: totrans-2023
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [firebird]**'
  id: totrans-2024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: Added new flag `retaining=True` to the kinterbasdb and fdb dialects. This controls
    the value of the `retaining` flag sent to the `commit()` and `rollback()` methods
    of the DBAPI connection. Due to historical concerns, this flag defaults to `True`
    in 0.8.2, however in 0.9.0b1 this flag defaults to `False`.
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向kinterbasdb和fdb方言添加了新标志`retaining=True`。这控制了发送到DBAPI连接的`commit()`和`rollback()`方法的`retaining`标志的值。由于历史原因，此标志在0.8.2中默认为`True`，但在0.9.0b1中此标志默认为`False`。
- en: 'References: [#2763](https://www.sqlalchemy.org/trac/ticket/2763)'
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2763](https://www.sqlalchemy.org/trac/ticket/2763)
- en: '**[bug] [firebird]**'
  id: totrans-2027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Type lookup when reflecting the Firebird types LONG and INT64 has been fixed
    so that LONG is treated as INTEGER, INT64 treated as BIGINT, unless the type has
    a “precision” in which case it’s treated as NUMERIC. Patch courtesy Russell Stuart.
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在反射Firebird类型LONG和INT64时的类型查找，使得LONG被视为INTEGER，INT64被视为BIGINT，���非类型具有“精度”，在这种情况下，它被视为NUMERIC。补丁感谢Russell
    Stuart。
- en: 'References: [#2757](https://www.sqlalchemy.org/trac/ticket/2757)'
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2757](https://www.sqlalchemy.org/trac/ticket/2757)
- en: '**[bug] [ext]**'
  id: totrans-2030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug whereby if a composite type were set up with a function instead of
    a class, the mutable extension would trip up when it tried to check that column
    for being a [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") (which it isn’t). Courtesy asldevi.
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用函数而不是类设置复合类型时，当尝试检查该列是否为[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")时，可变扩展会出错（它不是）。感谢asldevi。
- en: '**[requirements]**'
  id: totrans-2032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[requirements]**'
- en: The Python [mock](https://pypi.org/project/mock) library is now required in
    order to run the unit test suite. While part of the standard library as of Python
    3.3, previous Python installations will need to install this in order to run unit
    tests or to use the `sqlalchemy.testing` package for external dialects.
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在需要Python的[mock](https://pypi.org/project/mock)库才能运行单元测试套件。虽然作为Python 3.3的一部分已包含在标准库中，但以前的Python安装需要安装此库才能运行单元测试或使用`sqlalchemy.testing`包进行外部方言。
- en: 0.8.1
  id: totrans-2034
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.1
- en: 'Released: April 27, 2013'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年4月27日
- en: orm
  id: totrans-2036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a convenience method to Query that turns a query into an EXISTS subquery
    of the form `EXISTS (SELECT 1 FROM ... WHERE ...)`.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的方法到Query，将查询转换为形式为`EXISTS (SELECT 1 FROM ... WHERE ...)`的EXISTS子查询。
- en: 'References: [#2673](https://www.sqlalchemy.org/trac/ticket/2673)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2673](https://www.sqlalchemy.org/trac/ticket/2673)
- en: '**[orm] [bug]**'
  id: totrans-2040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Fixed bug when a query of the form: `query(SubClass).options(subqueryload(Baseclass.attrname))`,
    where `SubClass` is a joined inh of `BaseClass`, would fail to apply the `JOIN`
    inside the subquery on the attribute load, producing a cartesian product. The
    populated results still tended to be correct as additional rows are just ignored,
    so this issue may be present as a performance degradation in applications that
    are otherwise working correctly.'
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当查询形式为：`query(SubClass).options(subqueryload(Baseclass.attrname))`，其中`SubClass`是`BaseClass`的联接继承时，会导致在属性加载时未能应用子查询中的`JOIN`，从而产生笛卡尔积。填充的结果仍然倾向于是正确的，因为额外的行只是被忽略，所以这个问题可能会在其他方面正常工作的应用程序中表现为性能下降。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.7.11
- en: 'References: [#2699](https://www.sqlalchemy.org/trac/ticket/2699)'
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2699](https://www.sqlalchemy.org/trac/ticket/2699)
- en: '**[orm] [bug]**'
  id: totrans-2044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in unit of work whereby a joined-inheritance subclass could insert
    the row for the “sub” table before the parent table, if the two tables had no
    ForeignKey constraints set up between them.
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了工作单元中的一个bug，即如果两个表之间没有设置ForeignKey约束，一个joined-inheritance子类可能会在父表之前插入“sub”表的行。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.11
- en: 'References: [#2689](https://www.sqlalchemy.org/trac/ticket/2689)'
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2689](https://www.sqlalchemy.org/trac/ticket/2689)
- en: '**[orm] [bug]**'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixes to the `sqlalchemy.ext.serializer` extension, including that the “id”
    passed from the pickler is turned into a string to prevent against bytes being
    parsed on Py3K, as well as that `relationship()` and `orm.join()` constructs are
    now properly serialized.
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`sqlalchemy.ext.serializer`扩展的问题，包括从pickler传递的“id”被转换为字符串以防止在Py3K上解析字节，以及`relationship()`和`orm.join()`构造现在被正确序列化。
- en: 'References: [#2698](https://www.sqlalchemy.org/trac/ticket/2698)'
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2698](https://www.sqlalchemy.org/trac/ticket/2698)
- en: '**[orm] [bug]**'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A significant improvement to the inner workings of query.join(), such that the
    decisionmaking involved on how to join has been dramatically simplified. New test
    cases now pass such as multiple joins extending from the middle of an already
    complex series of joins involving inheritance and such. Joining from deeply nested
    subquery structures is still complicated and not without caveats, but with these
    improvements the edge cases are hopefully pushed even farther out to the edges.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对query.join()的内部工作方式进行了显著改进，使得如何进行连接的决策变得极为简化。现在新的测试用例通过了，例如从已经复杂的涉及继承的连接系列的中间延伸多个连接。从深度嵌套的子查询结构进行连接仍然很复杂且不是没有注意事项的，但通过这些改进，边缘情况希望被推到更远的边缘。
- en: 'References: [#2714](https://www.sqlalchemy.org/trac/ticket/2714)'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2714](https://www.sqlalchemy.org/trac/ticket/2714)
- en: '**[orm] [bug]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a conditional to the unpickling process for ORM mapped objects, such that
    if the reference to the object were lost when the object was pickled, we don’t
    erroneously try to set up _sa_instance_state - fixes a NoneType error.
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个条件到ORM映射对象的反序列化过程中，这样如果对象被pickled时丢失了对对象的引用，我们就不会错误地尝试设置_sa_instance_state
    - 修复了一个NoneType错误。
- en: '**[orm] [bug]**'
  id: totrans-2056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where many-to-many relationship with uselist=False would fail to delete
    the association row and raise an error if the scalar attribute were set to None.
    This was a regression introduced by the changes for [#2229](https://www.sqlalchemy.org/trac/ticket/2229).
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了uselist=False的多对多关系无法删除关联行并在标量属性设置为None时引发错误的bug。这是由于为[#2229](https://www.sqlalchemy.org/trac/ticket/2229)引入的变更导致的回归。
- en: 'References: [#2710](https://www.sqlalchemy.org/trac/ticket/2710)'
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2710](https://www.sqlalchemy.org/trac/ticket/2710)
- en: '**[orm] [bug]**'
  id: totrans-2059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of instance management regarding the creation of strong
    references within the Session; an object will no longer have an internal reference
    cycle created if it’s in the transient state or moves into the detached state
    - the strong ref is created only when the object is attached to a Session and
    is removed when the object is detached. This makes it somewhat safer for an object
    to have a __del__() method, even though this is not recommended, as relationships
    with backrefs produce cycles too. A warning has been added when a class with a
    __del__() method is mapped.
  id: totrans-2060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了实例管理关于在Session中创建强引用的行为；如果对象处于瞬态状态或进入分离状态，对象将不再创建内部引用循环 - 只有当对象附加到Session时才创建强引用，并在对象分离时删除。这使得对象具有__del__()方法更安全，尽管这并不被推荐，因为具有反向引用的关系也会产生循环。当映射了一个具有__del__()方法的类时，会添加一个警告。
- en: 'References: [#2708](https://www.sqlalchemy.org/trac/ticket/2708)'
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2708](https://www.sqlalchemy.org/trac/ticket/2708)
- en: '**[orm] [bug]**'
  id: totrans-2062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby ORM would run the wrong kind of query when refreshing an inheritance-mapped
    class where the superclass was mapped to a non-Table object, like a custom join()
    or a select(), running a query that assumed a hierarchy that’s mapped to individual
    Table-per-class.
  id: totrans-2063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当刷新一个继承映射类时，ORM会运行错误类型的查询，其中超类被映射到非Table对象，比如自定义join()或select()，运行一个假设映射到单独Table-per-class的层次结构的查询。
- en: 'References: [#2697](https://www.sqlalchemy.org/trac/ticket/2697)'
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2697](https://www.sqlalchemy.org/trac/ticket/2697)
- en: '**[orm] [bug]**'
  id: totrans-2065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed __repr__() on mapper property constructs to work before the object is
    initialized, so that Sphinx builds with recent Sphinx versions can read them.
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对象初始化之前就能正常工作的mapper属性构造函数的__repr__()，以便最近的Sphinx版本可以读取它们。
- en: orm declarative
  id: totrans-2067
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed indirect regression regarding [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table"), where since it considers the current class’
    `__table__`, was sensitive to when it was called. This is 0.7’s behavior also,
    but in 0.7 things tended to “work out” within events like `__mapper_args__()`.
    [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table") now only considers superclasses, so should
    return the same answer regarding the current class no matter when it’s called
    (obviously assuming the state of the superclass).
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了间接回归有关[`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table")的问题，因为它考虑了当前类的`__table__`，所以对调用时敏感。这也是0.7的行为，但在0.7中，事情往往会在`__mapper_args__()`等事件中“解决”。[`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table")现在只考虑超类，因此无论何时调用它，都应返回关于当前类的相同答案（显然假设超类的状态）。
- en: 'References: [#2656](https://www.sqlalchemy.org/trac/ticket/2656)'
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2656](https://www.sqlalchemy.org/trac/ticket/2656)
- en: examples
  id: totrans-2071
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a long-standing bug in the caching example, where the limit/offset parameter
    values wouldn’t be taken into account when computing the cache key. The _key_from_query()
    function has been simplified to work directly from the final compiled statement
    in order to get at both the full statement as well as the fully processed parameter
    list.
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了缓存示例中长期存在的一个bug，其中在计算缓存键时不会考虑limit/offset参数值。_key_from_query()函数已简化，直接从最终编译的语句中工作，以便获取完整的语句以及完全处理的参数列表。
- en: sql
  id: totrans-2074
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Loosened the check on dialect-specific argument names passed to Table(); since
    we want to support external dialects and also want to support args without a certain
    dialect being installed, it only checks the format of the arg now, rather than
    looking for that dialect in sqlalchemy.dialects.
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了传递给Table()的特定于方言的参数名称的检查；因为我们希望支持外部方言，也希望支持未安装某个特定方言的参数，所以现在只检查参数的格式，而不再在sqlalchemy.dialects中查找该方言。
- en: '**[sql] [bug] [mysql]**'
  id: totrans-2077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: Fully implemented the IS and IS NOT operators with regards to the True/False
    constants. An expression like `col.is_(True)` will now render `col IS true` on
    the target platform, rather than converting the True/ False constant to an integer
    bound parameter. This allows the `is_()` operator to work on MySQL when given
    True/False constants.
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全实现了IS和IS NOT运算符与True/False常量相关。像`col.is_(True)`这样的表达式现在将在目标平台上呈现`col IS true`，而不是将True/False常量转换为整数绑定参数。这允许`is_()`运算符在给定True/False常量时在MySQL上工作。
- en: 'References: [#2682](https://www.sqlalchemy.org/trac/ticket/2682)'
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
- en: '**[sql] [bug]**'
  id: totrans-2080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A major fix to the way in which a select() object produces labeled columns when
    apply_labels() is used; this mode produces a SELECT where each column is labeled
    as in <tablename>_<columnname>, to remove column name collisions for a multiple
    table select. The fix is that if two labels collide when combined with the table
    name, i.e. “foo.bar_id” and “foo_bar.id”, anonymous aliasing will be applied to
    one of the dupes. This allows the ORM to handle both columns independently; previously,
    0.7 would in some cases silently emit a second SELECT for the column that was
    “duped”, and in 0.8 an ambiguous column error would be emitted. The “keys” applied
    to the .c. collection of the select() will also be deduped, so that the “column
    being replaced” warning will no longer emit for any select() that specifies use_labels,
    though the dupe key will be given an anonymous label which isn’t generally user-friendly.
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对select()对象在使用apply_labels()时生成带标签列的方式进行了重大修复；这种模式生成一个SELECT，其中每列都标记为<tablename>_<columnname>，以消除多个表选择的列名冲突。修复的是，如果两个标签与表名组合时发生冲突，即“foo.bar_id”和“foo_bar.id”，则将对其中一个重复项应用匿名别名。这允许ORM独立处理两个列；以前，0.7在某些情况下会默默地为“重复项”发出第二个SELECT，并且在0.8中会发出模棱两可的列错误。应用于select()的.c.集合的“键”也将被去重，因此对于指定了use_labels的任何select()，将不再为“被替换的列”警告发出，尽管重复键将被赋予一个通常不友好的匿名标签。
- en: 'References: [#2702](https://www.sqlalchemy.org/trac/ticket/2702)'
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2702](https://www.sqlalchemy.org/trac/ticket/2702)
- en: '**[sql] [bug]**'
  id: totrans-2083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where disconnect detect on error would raise an attribute error if
    the error were being raised after the Connection object had already been closed.
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在连接对象已经关闭后，如果错误在断开连接检测时被引发，会引发属性错误。
- en: 'References: [#2691](https://www.sqlalchemy.org/trac/ticket/2691)'
  id: totrans-2085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2691](https://www.sqlalchemy.org/trac/ticket/2691)
- en: '**[sql] [bug]**'
  id: totrans-2086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reworked internal exception raises that emit a rollback() before re-raising,
    so that the stack trace is preserved from sys.exc_info() before entering the rollback.
    This so that the traceback is preserved when using coroutine frameworks which
    may have switched contexts before the rollback function returns.
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了在重新引发之前发出rollback()的内部异常引发，以便在进入rollback之前保留来自sys.exc_info()的堆栈跟踪。这样，在使用协程框架时，即使在rollback函数返回之前切换上下文，也能保留堆栈跟踪。
- en: 'References: [#2703](https://www.sqlalchemy.org/trac/ticket/2703)'
  id: totrans-2088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2703](https://www.sqlalchemy.org/trac/ticket/2703)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: The _Binary base type now converts values through the bytes() callable when
    run on Python 3; in particular psycopg2 2.5 with Python 3.3 seems to now be returning
    the “memoryview” type, so this is converted to bytes before return.
  id: totrans-2090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Binary基本类型现在在Python 3上通过bytes()可调用函数转换值；特别是psycopg2 2.5与Python 3.3似乎现在返回“memoryview”类型，因此在返回之前将其转换为bytes。
- en: '**[sql] [bug]**'
  id: totrans-2091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improvements to Connection auto-invalidation handling. If a non-disconnect error
    occurs, but leads to a delayed disconnect error within error handling (happens
    with MySQL), the disconnect condition is detected. The Connection can now also
    be closed when in an invalid state, meaning it will raise “closed” on next usage,
    and additionally the “close with result” feature will work even if the autorollback
    in an error handling routine fails and regardless of whether the condition is
    a disconnect or not.
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了Connection自动失效处理。如果发生非断开连接错误，但在错误处理中导致延迟断开连接错误（在MySQL中发生），则会检测到断开连接条件。Connection现在也可以在无效状态下关闭，这意味着在下一次使用时会引发“closed”，此外，“close
    with result”功能将在错误处理例程中的自动回滚失败时工作，无论条件是断开连接还是其他情况。
- en: 'References: [#2695](https://www.sqlalchemy.org/trac/ticket/2695)'
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2695](https://www.sqlalchemy.org/trac/ticket/2695)
- en: '**[sql] [bug]**'
  id: totrans-2094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby a DBAPI that can return “0” for cursor.lastrowid would not
    function correctly in conjunction with `ResultProxy.inserted_primary_key`.
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即DBAPI可能会返回“0”作为cursor.lastrowid，但与`ResultProxy.inserted_primary_key`结合使用时无法正常工作。
- en: postgresql
  id: totrans-2096
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Opened up the checking for “disconnect” with psycopg2/libpq to check for all
    the various “disconnect” messages within the full exception hierarchy. Specifically
    the “closed the connection unexpectedly” message has now been seen in at least
    three different exception types. Courtesy Eli Collins.
  id: totrans-2098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开了使用psycopg2/libpq检查“断开连接”的检查，以检查完整异常层次结构中的所有各种“断开连接”消息。具体来说，“意外关闭连接”消息现在至少在三种不同的异常类型中被看到。感谢Eli
    Collins。
- en: 'References: [#2712](https://www.sqlalchemy.org/trac/ticket/2712)'
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2712](https://www.sqlalchemy.org/trac/ticket/2712)
- en: '**[postgresql] [bug]**'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The operators for the PostgreSQL ARRAY type supports input types of sets, generators,
    etc. even when a dimension is not specified, by turning the given iterable into
    a collection unconditionally.
  id: totrans-2101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL ARRAY类型的运算符支持输入类型为集合、生成器等，即使未指定维度，也会将给定的可迭代对象无条件地转换为集合。
- en: 'References: [#2681](https://www.sqlalchemy.org/trac/ticket/2681)'
  id: totrans-2102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2681](https://www.sqlalchemy.org/trac/ticket/2681)
- en: '**[postgresql] [bug]**'
  id: totrans-2103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added missing HSTORE type to postgresql type names so that the type can be reflected.
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的HSTORE类型到postgresql类型名称中，���便可以反射该类型。
- en: 'References: [#2680](https://www.sqlalchemy.org/trac/ticket/2680)'
  id: totrans-2105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2680](https://www.sqlalchemy.org/trac/ticket/2680)
- en: mysql
  id: totrans-2106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixes to support the latest cymysql DBAPI, courtesy Hajime Nakagami.
  id: totrans-2108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复以支持最新的cymysql DBAPI，感谢Hajime Nakagami。
- en: '**[mysql] [bug]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improvements to the operation of the pymysql dialect on Python 3, including
    some important decode/bytes steps. Issues remain with BLOB types due to driver
    issues. Courtesy Ben Trofatter.
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了Python 3上pymysql方言的操作，包括一些重要的解码/字节步骤。由于驱动程序问题，BLOB类型仍然存在问题。感谢Ben Trofatter。
- en: 'References: [#2663](https://www.sqlalchemy.org/trac/ticket/2663)'
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2663](https://www.sqlalchemy.org/trac/ticket/2663)
- en: '**[mysql] [bug]**'
  id: totrans-2112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated a regexp to correctly extract error code on google app engine v1.7.5
    and newer. Courtesy Dan Ring.
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了一个正则表达式以正确提取 Google App Engine v1.7.5 及更新版本的错误代码。感谢丹·林格。
- en: mssql
  id: totrans-2114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Part of a longer series of fixes needed for pyodbc+ mssql, a CAST to NVARCHAR(max)
    has been added to the bound parameter for the table name and schema name in all
    information schema queries to avoid the issue of comparing NVARCHAR to NTEXT,
    which seems to be rejected by the ODBC driver in some cases, such as FreeTDS (0.91
    only?) plus unicode bound parameters being passed. The issue seems to be specific
    to the SQL Server information schema tables and the workaround is harmless for
    those cases where the problem doesn’t exist in the first place.
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为解决 pyodbc + mssql 所需的一系列修复的一部分，现在在所有信息模式查询的绑定参数中为表名和模式名添加了 CAST 到 NVARCHAR(max)，以避免
    NVARCHAR 与 NTEXT 的比较问题，这似乎在某些情况下被 ODBC 驱动程序拒绝，例如 FreeTDS (0.91 only?) 加上传递的 Unicode
    绑定参数。这个问题似乎特定于 SQL Server 信息模式表，并且这个解决方法对于那些首次不存在问题的情况是无害的。
- en: 'References: [#2355](https://www.sqlalchemy.org/trac/ticket/2355)'
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2355](https://www.sqlalchemy.org/trac/ticket/2355)
- en: '**[mssql] [bug]**'
  id: totrans-2118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added support for additional “disconnect” messages to the pymssql dialect. Courtesy
    John Anderson.
  id: totrans-2119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对于 pymssql 方言的额外“断开连接”消息的支持。感谢约翰·安德森。
- en: '**[mssql] [bug]**'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed Py3K bug regarding “binary” types and pymssql. Courtesy Marc Abramowitz.
  id: totrans-2121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“二进制”类型和 pymssql 的 Py3K bug。感谢马克·阿布拉莫维茨。
- en: 'References: [#2683](https://www.sqlalchemy.org/trac/ticket/2683)'
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2683](https://www.sqlalchemy.org/trac/ticket/2683)
- en: orm
  id: totrans-2123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a convenience method to Query that turns a query into an EXISTS subquery
    of the form `EXISTS (SELECT 1 FROM ... WHERE ...)`.
  id: totrans-2125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的方法到 Query，将查询转换为 EXISTS 子查询，形式为 `EXISTS (SELECT 1 FROM ... WHERE ...)`。
- en: 'References: [#2673](https://www.sqlalchemy.org/trac/ticket/2673)'
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2673](https://www.sqlalchemy.org/trac/ticket/2673)
- en: '**[orm] [bug]**'
  id: totrans-2127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'Fixed bug when a query of the form: `query(SubClass).options(subqueryload(Baseclass.attrname))`,
    where `SubClass` is a joined inh of `BaseClass`, would fail to apply the `JOIN`
    inside the subquery on the attribute load, producing a cartesian product. The
    populated results still tended to be correct as additional rows are just ignored,
    so this issue may be present as a performance degradation in applications that
    are otherwise working correctly.'
  id: totrans-2128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当查询形式为：`query(SubClass).options(subqueryload(Baseclass.attrname))`，其中
    `SubClass` 是 `BaseClass` 的 joined inh 时，会导致属性加载中的子查询内部未能应用 `JOIN`，从而产生笛卡尔积。生成的结果仍然倾向于是正确的，因为额外的行被忽略掉了，所以这个问题可能存在于其他方面正常工作的应用程序中的性能下降。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也 **回溯** 到：0.7.11
- en: 'References: [#2699](https://www.sqlalchemy.org/trac/ticket/2699)'
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2699](https://www.sqlalchemy.org/trac/ticket/2699)
- en: '**[orm] [bug]**'
  id: totrans-2131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in unit of work whereby a joined-inheritance subclass could insert
    the row for the “sub” table before the parent table, if the two tables had no
    ForeignKey constraints set up between them.
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个单元操作中的 bug，即当一个 joined-inheritance 子类可以在父表之前插入“子”表的行时，如果两个表之间没有设置外键约束。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也 **回溯** 到：0.7.11
- en: 'References: [#2689](https://www.sqlalchemy.org/trac/ticket/2689)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2689](https://www.sqlalchemy.org/trac/ticket/2689)
- en: '**[orm] [bug]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixes to the `sqlalchemy.ext.serializer` extension, including that the “id”
    passed from the pickler is turned into a string to prevent against bytes being
    parsed on Py3K, as well as that `relationship()` and `orm.join()` constructs are
    now properly serialized.
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `sqlalchemy.ext.serializer` 扩展进行了修复，包括将来自 pickler 的“id”转换为字符串，以防止在 Py3K 上解析字节，以及现在正确地序列化
    `relationship()` 和 `orm.join()` 结构。
- en: 'References: [#2698](https://www.sqlalchemy.org/trac/ticket/2698)'
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2698](https://www.sqlalchemy.org/trac/ticket/2698)
- en: '**[orm] [bug]**'
  id: totrans-2138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A significant improvement to the inner workings of query.join(), such that the
    decisionmaking involved on how to join has been dramatically simplified. New test
    cases now pass such as multiple joins extending from the middle of an already
    complex series of joins involving inheritance and such. Joining from deeply nested
    subquery structures is still complicated and not without caveats, but with these
    improvements the edge cases are hopefully pushed even farther out to the edges.
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 query.join() 的内部工作进行了显著改进，决定如何连接的过程已经大大简化。新的测试案例现在通过了，例如从已经复杂的继承关系和多个连接扩展的中间部分进行连接。从深度嵌套的子查询结构进行连接仍然很复杂，并且不是没有注意事项，但是通过这些改进，边缘情况希望能够进一步推迟。
- en: 'References: [#2714](https://www.sqlalchemy.org/trac/ticket/2714)'
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2714](https://www.sqlalchemy.org/trac/ticket/2714)
- en: '**[orm] [bug]**'
  id: totrans-2141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a conditional to the unpickling process for ORM mapped objects, such that
    if the reference to the object were lost when the object was pickled, we don’t
    erroneously try to set up _sa_instance_state - fixes a NoneType error.
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 映射对象的反序列化过程中添加了一个条件，这样如果对象在序列化时丢失引用，我们就不会错误地尝试设置 _sa_instance_state——修复了
    NoneType 错误。
- en: '**[orm] [bug]**'
  id: totrans-2143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where many-to-many relationship with uselist=False would fail to delete
    the association row and raise an error if the scalar attribute were set to None.
    This was a regression introduced by the changes for [#2229](https://www.sqlalchemy.org/trac/ticket/2229).
  id: totrans-2144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当多对多关系中 uselist=False 时删除关联行失败的 bug，如果标量属性设置为 None，则会引发错误。这是由于对 [#2229](https://www.sqlalchemy.org/trac/ticket/2229)
    的更改引入的退化。
- en: 'References: [#2710](https://www.sqlalchemy.org/trac/ticket/2710)'
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2710](https://www.sqlalchemy.org/trac/ticket/2710)
- en: '**[orm] [bug]**'
  id: totrans-2146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the behavior of instance management regarding the creation of strong
    references within the Session; an object will no longer have an internal reference
    cycle created if it’s in the transient state or moves into the detached state
    - the strong ref is created only when the object is attached to a Session and
    is removed when the object is detached. This makes it somewhat safer for an object
    to have a __del__() method, even though this is not recommended, as relationships
    with backrefs produce cycles too. A warning has been added when a class with a
    __del__() method is mapped.
  id: totrans-2147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了关于 Session 中强引用创建的实例管理行为；如果对象处于临时状态或进入脱离状态，则不再创建内部引用循环——只有在对象附加到会话时才创建强引用，并在对象脱离时移除。即使不推荐这样做，这样做会使得对象拥有
    __del__() 方法更安全，因为具有反向引用的关系也会产生循环。当映射了具有 __del__() 方法的类时，添加了警告。
- en: 'References: [#2708](https://www.sqlalchemy.org/trac/ticket/2708)'
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2708](https://www.sqlalchemy.org/trac/ticket/2708)
- en: '**[orm] [bug]**'
  id: totrans-2149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby ORM would run the wrong kind of query when refreshing an inheritance-mapped
    class where the superclass was mapped to a non-Table object, like a custom join()
    or a select(), running a query that assumed a hierarchy that’s mapped to individual
    Table-per-class.
  id: totrans-2150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在刷新继承映射类时 ORM 会运行错误类型的查询，其中超类映射到非 Table 对象，如自定义 join() 或 select()，运行一个假设映射到单独
    Table-per-class 的层次结构的查询。
- en: 'References: [#2697](https://www.sqlalchemy.org/trac/ticket/2697)'
  id: totrans-2151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2697](https://www.sqlalchemy.org/trac/ticket/2697)
- en: '**[orm] [bug]**'
  id: totrans-2152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed __repr__() on mapper property constructs to work before the object is
    initialized, so that Sphinx builds with recent Sphinx versions can read them.
  id: totrans-2153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对映射器属性构造函数的 __repr__() 方法，在对象初始化之前就可以工作，这样最近的 Sphinx 版本就可以读取它们了。
- en: orm declarative
  id: totrans-2154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed indirect regression regarding [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table"), where since it considers the current class’
    `__table__`, was sensitive to when it was called. This is 0.7’s behavior also,
    but in 0.7 things tended to “work out” within events like `__mapper_args__()`.
    [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table") now only considers superclasses, so should
    return the same answer regarding the current class no matter when it’s called
    (obviously assuming the state of the superclass).
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于 [`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table") 的间接退化，因为它考虑当前类的 `__table__`，所以对其调用时敏感。这也是
    0.7 版本的行为，但在 0.7 版本中，事情往往会在 `__mapper_args__()` 等事件中“解决”。[`has_inherited_table()`](../orm/mapping_api.html#sqlalchemy.orm.has_inherited_table
    "sqlalchemy.orm.has_inherited_table") 现在只考虑超类，因此无论何时调用它，都应该返回相同的关于当前类的答案（显然假设超类的状态相同）。
- en: 'References: [#2656](https://www.sqlalchemy.org/trac/ticket/2656)'
  id: totrans-2157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2656](https://www.sqlalchemy.org/trac/ticket/2656)
- en: examples
  id: totrans-2158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a long-standing bug in the caching example, where the limit/offset parameter
    values wouldn’t be taken into account when computing the cache key. The _key_from_query()
    function has been simplified to work directly from the final compiled statement
    in order to get at both the full statement as well as the fully processed parameter
    list.
  id: totrans-2160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了缓存示例中的一个长期存在的 bug，其中 limit/offset 参数值在计算缓存键时不会被考虑。_key_from_query() 函数已简化为直接从最终编译的语句中工作，以便获取完整的语句以及完全处理过的参数列表。
- en: sql
  id: totrans-2161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Loosened the check on dialect-specific argument names passed to Table(); since
    we want to support external dialects and also want to support args without a certain
    dialect being installed, it only checks the format of the arg now, rather than
    looking for that dialect in sqlalchemy.dialects.
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放宽了传递给 Table() 的特定于方言的参数名称的检查；由于我们希望支持外部方言，并且还希望支持未安装某个特定方言的参数，因此现在仅检查参数的格式，而不是在
    sqlalchemy.dialects 中查找该方言。
- en: '**[sql] [bug] [mysql]**'
  id: totrans-2164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [mysql]**'
- en: Fully implemented the IS and IS NOT operators with regards to the True/False
    constants. An expression like `col.is_(True)` will now render `col IS true` on
    the target platform, rather than converting the True/ False constant to an integer
    bound parameter. This allows the `is_()` operator to work on MySQL when given
    True/False constants.
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全实现了对 True/False 常量的 IS 和 IS NOT 运算符。现在像 `col.is_(True)` 这样的表达式将在目标平台上呈现为 `col
    IS true`，而不是将 True/False 常量转换为整数绑定参数。这使得 `is_()` 运算符在给定 True/False 常量时能够在 MySQL
    上工作。
- en: 'References: [#2682](https://www.sqlalchemy.org/trac/ticket/2682)'
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2682](https://www.sqlalchemy.org/trac/ticket/2682)
- en: '**[sql] [bug]**'
  id: totrans-2167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A major fix to the way in which a select() object produces labeled columns when
    apply_labels() is used; this mode produces a SELECT where each column is labeled
    as in <tablename>_<columnname>, to remove column name collisions for a multiple
    table select. The fix is that if two labels collide when combined with the table
    name, i.e. “foo.bar_id” and “foo_bar.id”, anonymous aliasing will be applied to
    one of the dupes. This allows the ORM to handle both columns independently; previously,
    0.7 would in some cases silently emit a second SELECT for the column that was
    “duped”, and in 0.8 an ambiguous column error would be emitted. The “keys” applied
    to the .c. collection of the select() will also be deduped, so that the “column
    being replaced” warning will no longer emit for any select() that specifies use_labels,
    though the dupe key will be given an anonymous label which isn’t generally user-friendly.
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 apply_labels() 被使用时，修复了 select() 对象生成标记列的方式；此模式生成一个 SELECT，其中每个列都被标记为 <tablename>_<columnname>，以消除多表选择中的列名冲突。修复的问题是，如果两个标签与表名组合时发生冲突，即“foo.bar_id”
    和 “foo_bar.id”，则将对其中一个 dupes 应用匿名别名。这允许 ORM 独立处理两个列；在此之前，0.7 在某些情况下会静默地为“duped”列发出第二个
    SELECT，并且在 0.8 中会发出一个模糊的列错误。对 select() 的 .c. 集合应用的 “keys” 也将被去重，因此对于指定了 use_labels
    的任何 select()，将不再发出“正在替换的列”警告，尽管 dupes 键将被赋予一个不通常用户友好的匿名标签。
- en: 'References: [#2702](https://www.sqlalchemy.org/trac/ticket/2702)'
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2702](https://www.sqlalchemy.org/trac/ticket/2702)
- en: '**[sql] [bug]**'
  id: totrans-2170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where disconnect detect on error would raise an attribute error if
    the error were being raised after the Connection object had already been closed.
  id: totrans-2171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在错误断开连接时，如果错误是在 Connection 对象已经关闭之后引发的，会引发属性错误的错误。
- en: 'References: [#2691](https://www.sqlalchemy.org/trac/ticket/2691)'
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2691](https://www.sqlalchemy.org/trac/ticket/2691)
- en: '**[sql] [bug]**'
  id: totrans-2173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Reworked internal exception raises that emit a rollback() before re-raising,
    so that the stack trace is preserved from sys.exc_info() before entering the rollback.
    This so that the traceback is preserved when using coroutine frameworks which
    may have switched contexts before the rollback function returns.
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了在重新引发之前发出回滚() 的内部异常引发，以便从 sys.exc_info() 中保留堆栈跟踪，然后进入回滚。这样，当使用可能在回滚函数返回之前切换上下文的协程框架时，将保留堆栈跟踪。
- en: 'References: [#2703](https://www.sqlalchemy.org/trac/ticket/2703)'
  id: totrans-2175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2703](https://www.sqlalchemy.org/trac/ticket/2703)
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-2176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: The _Binary base type now converts values through the bytes() callable when
    run on Python 3; in particular psycopg2 2.5 with Python 3.3 seems to now be returning
    the “memoryview” type, so this is converted to bytes before return.
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 Python 3 上运行时，_Binary 基础类型现在通过 bytes() 可调用进行值转换；特别是 psycopg2 2.5 与 Python
    3.3 似乎现在返回“memoryview”类型，因此在返回之前将其转换为字节。
- en: '**[sql] [bug]**'
  id: totrans-2178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improvements to Connection auto-invalidation handling. If a non-disconnect error
    occurs, but leads to a delayed disconnect error within error handling (happens
    with MySQL), the disconnect condition is detected. The Connection can now also
    be closed when in an invalid state, meaning it will raise “closed” on next usage,
    and additionally the “close with result” feature will work even if the autorollback
    in an error handling routine fails and regardless of whether the condition is
    a disconnect or not.
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 Connection 自动失效处理。如果发生非断开连接错误，但在错误处理中导致延迟断开连接错误（在 MySQL 中发生），则会检测到断开连接条件。Connection
    现在也可以在无效状态下关闭，这意味着在下一次使用时会引发“closed”，此外，“close with result”功能将在错误处理例程中的自动回滚失败时工作，无论条件是断开连接还是其他情况。
- en: 'References: [#2695](https://www.sqlalchemy.org/trac/ticket/2695)'
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2695](https://www.sqlalchemy.org/trac/ticket/2695)
- en: '**[sql] [bug]**'
  id: totrans-2181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby a DBAPI that can return “0” for cursor.lastrowid would not
    function correctly in conjunction with `ResultProxy.inserted_primary_key`.
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即一个可以为 cursor.lastrowid 返回“0”的 DBAPI 与 `ResultProxy.inserted_primary_key`
    结合使用时将无法正确运行。
- en: postgresql
  id: totrans-2183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Opened up the checking for “disconnect” with psycopg2/libpq to check for all
    the various “disconnect” messages within the full exception hierarchy. Specifically
    the “closed the connection unexpectedly” message has now been seen in at least
    three different exception types. Courtesy Eli Collins.
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开了对 psycopg2/libpq 中“断开连接”检查的检查，以检查完整异常层次结构中的所有不同“断开连接”消息。具体来说，“意外关闭连接”消息现在至少在三种不同的异常类型中被看到。由
    Eli Collins 提供。
- en: 'References: [#2712](https://www.sqlalchemy.org/trac/ticket/2712)'
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2712](https://www.sqlalchemy.org/trac/ticket/2712)
- en: '**[postgresql] [bug]**'
  id: totrans-2187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The operators for the PostgreSQL ARRAY type supports input types of sets, generators,
    etc. even when a dimension is not specified, by turning the given iterable into
    a collection unconditionally.
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL ARRAY 类型的操作符支持集合、生成器等输入类型，即使未指定维度，也会无条件地将给定的可迭代对象转换为集合。
- en: 'References: [#2681](https://www.sqlalchemy.org/trac/ticket/2681)'
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2681](https://www.sqlalchemy.org/trac/ticket/2681)
- en: '**[postgresql] [bug]**'
  id: totrans-2190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added missing HSTORE type to postgresql type names so that the type can be reflected.
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的 HSTORE 类型到 postgresql 类型名称中，以便可以反射该类型。
- en: 'References: [#2680](https://www.sqlalchemy.org/trac/ticket/2680)'
  id: totrans-2192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2680](https://www.sqlalchemy.org/trac/ticket/2680)
- en: mysql
  id: totrans-2193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixes to support the latest cymysql DBAPI, courtesy Hajime Nakagami.
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复以支持最新的 cymysql DBAPI，由 Hajime Nakagami 提供。
- en: '**[mysql] [bug]**'
  id: totrans-2196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improvements to the operation of the pymysql dialect on Python 3, including
    some important decode/bytes steps. Issues remain with BLOB types due to driver
    issues. Courtesy Ben Trofatter.
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 Python 3 上 pymysql 方言的操作进行了改进，包括一些重要的解码/字节步骤。由 Ben Trofatter 提供。问题仍然存在于 BLOB
    类型，由于驱动程序问题。
- en: 'References: [#2663](https://www.sqlalchemy.org/trac/ticket/2663)'
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2663](https://www.sqlalchemy.org/trac/ticket/2663)
- en: '**[mysql] [bug]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updated a regexp to correctly extract error code on google app engine v1.7.5
    and newer. Courtesy Dan Ring.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了一个正则表达式，以正确提取谷歌应用引擎 v1.7.5 及更新版本的错误代码。感谢 Dan Ring。
- en: mssql
  id: totrans-2201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Part of a longer series of fixes needed for pyodbc+ mssql, a CAST to NVARCHAR(max)
    has been added to the bound parameter for the table name and schema name in all
    information schema queries to avoid the issue of comparing NVARCHAR to NTEXT,
    which seems to be rejected by the ODBC driver in some cases, such as FreeTDS (0.91
    only?) plus unicode bound parameters being passed. The issue seems to be specific
    to the SQL Server information schema tables and the workaround is harmless for
    those cases where the problem doesn’t exist in the first place.
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为一系列修复的一部分，需要为 pyodbc+ mssql 添加 CAST 到 NVARCHAR(max)，以避免在所有信息模式查询的表名和模式名的绑定参数中出现将
    NVARCHAR 与 NTEXT 进行比较的问题，这似乎在某些情况下被 ODBC 驱动程序拒绝，例如 FreeTDS（仅限 0.91？）加上传递的 Unicode
    绑定参数。该问题似乎特定于 SQL Server 信息模式表，并且解决方法对于那些问题本来就不存在的情况是无害的。
- en: 'References: [#2355](https://www.sqlalchemy.org/trac/ticket/2355)'
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2355](https://www.sqlalchemy.org/trac/ticket/2355)
- en: '**[mssql] [bug]**'
  id: totrans-2205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added support for additional “disconnect” messages to the pymssql dialect. Courtesy
    John Anderson.
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 pymssql 方言添加了对额外“断开连接”消息的支持��由 John Anderson 提供。
- en: '**[mssql] [bug]**'
  id: totrans-2207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed Py3K bug regarding “binary” types and pymssql. Courtesy Marc Abramowitz.
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于“binary”类型和 pymssql 的 Py3K bug。由 Marc Abramowitz 提供。
- en: 'References: [#2683](https://www.sqlalchemy.org/trac/ticket/2683)'
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2683](https://www.sqlalchemy.org/trac/ticket/2683)
- en: 0.8.0
  id: totrans-2210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.0
- en: 'Released: March 9, 2013'
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年3月9日
- en: Note
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are some new behavioral changes as of 0.8.0 not present in 0.8.0b2\.
    They are present in the migration document as follows:'
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: 0.8.0 中存在一些新的行为变化，而在 0.8.0b2 中不存在。它们在迁移文档中如下所示：
- en: '[The consideration of a “pending” object as an “orphan” has been made more
    aggressive](migration_08.html#legacy-is-orphan-addition)'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将“待定”对象视为“孤立”对象的考虑更加积极](migration_08.html#legacy-is-orphan-addition)'
- en: '[create_all() and drop_all() will now honor an empty list as such](migration_08.html#metadata-create-drop-tables)'
  id: totrans-2215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[create_all() 和 drop_all() 现在将尊重空列表](migration_08.html#metadata-create-drop-tables)'
- en: '[Correlation is now always context-specific](migration_08.html#correlation-context-specific)'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[相关性现在始终是上下文特定的](migration_08.html#correlation-context-specific)'
- en: orm
  id: totrans-2217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A meaningful [`QueryableAttribute.info`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info") attribute is added, which proxies down
    to the `.info` attribute on either the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object if directly present, or the [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") otherwise. The full behavior is documented and
    ensured by tests to remain stable.
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了有意义的[`QueryableAttribute.info`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")属性，它代理到直接存在的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的`.info`属性，否则代理到[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。完整的行为已记录并通过测试确保稳定。
- en: 'References: [#2675](https://www.sqlalchemy.org/trac/ticket/2675)'
  id: totrans-2220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2675](https://www.sqlalchemy.org/trac/ticket/2675)
- en: '**[orm] [feature]**'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Can set/change the “cascade” attribute on a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct after it’s been constructed already.
    This is not a pattern for normal use but we like to change the setting for demonstration
    purposes in tutorials.
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造已经创建后设置/更改“cascade”属性。这不是正常使用的模式，但我们喜欢在教程中为了演示目的更改设置。
- en: '**[orm] [feature]**'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new helper function [`was_deleted()`](../orm/session_api.html#sqlalchemy.orm.util.was_deleted
    "sqlalchemy.orm.util.was_deleted"), returns True if the given object was the subject
    of a [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") operation.
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的辅助函数[`was_deleted()`](../orm/session_api.html#sqlalchemy.orm.util.was_deleted
    "sqlalchemy.orm.util.was_deleted")，如果给定对象是[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")操作的主题，则返回True。
- en: 'References: [#2658](https://www.sqlalchemy.org/trac/ticket/2658)'
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2658](https://www.sqlalchemy.org/trac/ticket/2658)
- en: '**[orm] [feature]**'
  id: totrans-2226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Extended the [Runtime Inspection API](../core/inspection.html) system so that
    all Python descriptors associated with the ORM or its extensions can be retrieved.
    This fulfills the common request of being able to inspect all [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") descriptors in addition to extension types
    such as [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") and [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"). See [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了[运行时检查 API](../core/inspection.html)系统，以便检索与 ORM 或其扩展相关的所有 Python 描述符。这满足了能够检查所有[`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")描述符的常见请求，以及扩展类型，如[`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")和[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。请参阅[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")。
- en: '**[orm] [bug]**'
  id: totrans-2228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved checking for an existing backref name conflict during mapper configuration;
    will now test for name conflicts on superclasses and subclasses, in addition to
    the current mapper, as these conflicts break things just as much. This is new
    for 0.8, but see below for a warning that will also be triggered in 0.7.11.
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在映射器配置期间改进了对现有反向引用名称冲突的检查；现在将在超类和子类上测试名称冲突，除了当前映射器之外，因为这些冲突同样会导致问题。这是0.8的新功能，但请参见下面关于0.7.11中也会触发的警告。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-2231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message emitted when a “backref loop” is detected, that is
    when an attribute event triggers a bidirectional assignment between two other
    attributes with no end. This condition can occur not just when an object of the
    wrong type is assigned, but also when an attribute is mis-configured to backref
    into an existing backref pair. Also in 0.7.11.
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在检测到“反向引用循环”时发出的错误消息，即当属性事件触发两个其他属性之间的双向赋值时，没有结束。这种情况不仅发生在分配错误类型的对象时，还发生在属性被错误配置为反向引用到现有反向引用对时。也适用于0.7.11。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-2234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when a MapperProperty is assigned to a mapper that replaces
    an existing property, if the properties in question aren’t plain column-based
    properties. Replacement of relationship properties is rarely (ever?) what is intended
    and usually refers to a mapper mis-configuration. Also in 0.7.11.
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将MapperProperty分配给替换现有属性的映射器时，如果涉及的属性不是简单的基于列的属性，则会发出警告。替换关系属性很少（甚至从未？）是预期的，通常指的是映射器配置错误。也适用于0.7.11。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-2237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A clear error message is emitted if an event handler attempts to emit SQL on
    a Session within the after_commit() handler, where there is not a viable transaction
    in progress.
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件处理程序在after_commit()处理程序中尝试在没有进行中的有效事务的情况下在会话中发出SQL，则会发出清晰的错误消息。
- en: 'References: [#2662](https://www.sqlalchemy.org/trac/ticket/2662)'
  id: totrans-2239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2662](https://www.sqlalchemy.org/trac/ticket/2662)
- en: '**[orm] [bug]**'
  id: totrans-2240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Detection of a primary key change within the process of cascading a natural
    primary key update will succeed even if the key is composite and only some of
    the attributes have changed.
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在级联自然主键更新过程中检测到主键更改将成功，即使该键是复合键，只有部分属性发生更改。
- en: 'References: [#2665](https://www.sqlalchemy.org/trac/ticket/2665)'
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2665](https://www.sqlalchemy.org/trac/ticket/2665)
- en: '**[orm] [bug]**'
  id: totrans-2243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An object that’s deleted from a session will be de-associated with that session
    fully after the transaction is committed, that is the [`object_session()`](../orm/session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") function will return None.
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从会话中删除的对象在事务提交后将完全与该会话解除关联，也就是[`object_session()`](../orm/session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session")函数将返回None。
- en: 'References: [#2658](https://www.sqlalchemy.org/trac/ticket/2658)'
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2658](https://www.sqlalchemy.org/trac/ticket/2658)
- en: '**[orm] [bug]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") would set the execution options incorrectly,
    thereby breaking subsequent usage of the [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") method. Courtesy Ryan Kelly.
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")错误设置执行选项的错误，从而破坏了后续使用[`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")方法。感谢Ryan Kelly。
- en: 'References: [#2661](https://www.sqlalchemy.org/trac/ticket/2661)'
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2661](https://www.sqlalchemy.org/trac/ticket/2661)
- en: '**[orm] [bug]**'
  id: totrans-2249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the consideration of the `between()` operator so that it works correctly
    with the new relationship local/remote system.
  id: totrans-2250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`between()`运算符的考虑，使其与新的关系本地/远程系统正确工作。
- en: 'References: [#1768](https://www.sqlalchemy.org/trac/ticket/1768)'
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1768](https://www.sqlalchemy.org/trac/ticket/1768)
- en: '**[orm] [bug]**'
  id: totrans-2252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: the consideration of a pending object as an “orphan” has been modified to more
    closely match the behavior as that of persistent objects, which is that the object
    is expunged from the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as soon as it is de-associated from any of its orphan-enabled
    parents. Previously, the pending object would be expunged only if de-associated
    from all of its orphan-enabled parents. The new flag `legacy_is_orphan` is added
    to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which re-establishes the legacy behavior.
  id: totrans-2253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将待定对象视为“孤立”对象的考虑已经修改，以更接近持久对象的行为，即一旦与任何启用孤立的父对象解除关联，该对象就会从[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中清除。以前，只有在从所有启用孤立的父对象中解除关联时，待定对象才会被清除。新增了`legacy_is_orphan`标志到[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，它重新建立了传统行为。
- en: See the change note and example case at [The consideration of a “pending” object
    as an “orphan” has been made more aggressive](migration_08.html#legacy-is-orphan-addition)
    for a detailed discussion of this change.
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 详细讨论此更改的变更说明和示例案例，请参阅[将“待定”对象视为“孤立”对象的考虑更加激进](migration_08.html#legacy-is-orphan-addition)。
- en: 'References: [#2655](https://www.sqlalchemy.org/trac/ticket/2655)'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2655](https://www.sqlalchemy.org/trac/ticket/2655)
- en: '**[orm] [bug]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the (most likely never used) “@collection.link” collection method, which
    fires off each time the collection is associated or de-associated with a mapped
    object - the decorator was not tested or functional. The decorator method is now
    named `collection.linker()` though the name “link” remains for backwards compatibility.
    Courtesy Luca Wehrstedt.
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了（很可能从未使用过的）“@collection.link”集合方法，每次将集合与映射对象关联或解除关联时都会触发-装饰器未经测试或功能性。装饰器方法现在命名为`collection.linker()`，尽管名称“link”仍保留以确保向后兼容性。感谢Luca
    Wehrstedt。
- en: 'References: [#2653](https://www.sqlalchemy.org/trac/ticket/2653)'
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2653](https://www.sqlalchemy.org/trac/ticket/2653)
- en: '**[orm] [bug]**'
  id: totrans-2259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made some fixes to the system of producing custom instrumented collections,
    mainly that the usage of the @collection decorators will now honor the __mro__
    of the given class, applying the logic of the sub-most classes’ version of a particular
    collection method. Previously, it wasn’t predictable when subclassing an existing
    instrumented class such as `MappedCollection` whether or not custom methods would
    resolve correctly.
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对生成自定义受控集合系统进行了一些修复，主要是现在@collection装饰器的使用将遵循给定类的__mro__，应用特定集合方法的子类最底层类的逻辑。以前，在对现有受控类进行子类化时，例如`MappedCollection`，无法预测自定义方法是否会正确解析。
- en: 'References: [#2654](https://www.sqlalchemy.org/trac/ticket/2654)'
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2654](https://www.sqlalchemy.org/trac/ticket/2654)
- en: '**[orm] [bug]**'
  id: totrans-2262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed potential memory leak which could occur if an arbitrary number of [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") objects were created. The anonymous subclass created
    by the sessionmaker, when dereferenced, would not be garbage collected due to
    remaining class-level references from the event package. This issue also applies
    to any custom system that made use of ad-hoc subclasses in conjunction with an
    event dispatcher. Also in 0.7.10.
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了潜在的内存泄漏问题，可能会在创建任意数量的[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")对象时发生。当sessionmaker创建的匿名子类被解除引用时，由于事件包中仍存在类级别的引用，该子类不会被垃圾回收。这个问题也适用于任何自定义系统，该系统与事件调度程序一起使用临时子类。也适用于0.7.10版本。
- en: 'References: [#2650](https://www.sqlalchemy.org/trac/ticket/2650)'
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2650](https://www.sqlalchemy.org/trac/ticket/2650)
- en: '**[orm] [bug]**'
  id: totrans-2265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") can now load rows from an outer join where
    an entity may be `None` without throwing an error. Also in 0.7.10.'
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result")现在可以从外连接中加载可能为`None`的实体行而不会抛出错误。也适用于0.7.10版本。'
- en: 'References: [#2640](https://www.sqlalchemy.org/trac/ticket/2640)'
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2640](https://www.sqlalchemy.org/trac/ticket/2640)
- en: '**[orm] [bug]**'
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixes to the “dynamic” loader on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), includes that backrefs will work properly even
    when autoflush is disabled, history events are more accurate in scenarios where
    multiple add/remove of the same object occurs.
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的“dynamic”加载器进行修复，包括当禁用自动刷新时，反向引用将正常工作，历史事件在多次添加/删除相同对象的情况下更加准确。
- en: 'References: [#2637](https://www.sqlalchemy.org/trac/ticket/2637)'
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2637](https://www.sqlalchemy.org/trac/ticket/2637)
- en: '**[orm] [removed]**'
  id: totrans-2271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [removed]**'
- en: The undocumented (and hopefully unused) system of producing custom collections
    using an `__instrumentation__` datastructure associated with the collection has
    been removed, as this was a complex and untested feature which was also essentially
    redundant versus the decorator approach. Other internal simplifications to the
    orm.collections module have been made as well.
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除了使用与集合关联的`__instrumentation__`数据结构来生成自定义集合的未记录（希望未使用）系统，因为这是一个复杂且未经测试的功能，与装饰器方法基本重复。还对
    orm.collections 模块进行了其他内部简化。
- en: examples
  id: totrans-2273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-2274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a regression in the examples/dogpile_caching example which was due to
    the change in [#2614](https://www.sqlalchemy.org/trac/ticket/2614).
  id: totrans-2275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/dogpile_caching示例中的回归问题，这是由于[#2614](https://www.sqlalchemy.org/trac/ticket/2614)中的更改引起的。
- en: sql
  id: totrans-2276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new argument to [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") and its base [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") `inherit_schema`. When set to `True`, the type
    will set its `schema` attribute of that of the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which it is associated. This also occurs during
    a [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") operation; the [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") is now copied in all cases when [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") happens, and if `inherit_schema=True`, the
    type will take on the new schema name passed to the method. The `schema` is important
    when used with the PostgreSQL backend, as the type results in a `CREATE TYPE`
    statement.
  id: totrans-2278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")及其基本[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")添加了一个新参数`inherit_schema`。当设置为`True`时，该类型将把其`schema`属性设置为其关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的模式。这也会在进行[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")操作时发生；在所有情况下，当[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")发生时，[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")现在都会被复制，如果`inherit_schema=True`，则该类型将采用传递给该方法的新模式名称。在与
    PostgreSQL 后端一起使用时，`schema`非常重要，因为该类型会导致`CREATE TYPE`语句。
- en: 'References: [#2657](https://www.sqlalchemy.org/trac/ticket/2657)'
  id: totrans-2279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2657](https://www.sqlalchemy.org/trac/ticket/2657)
- en: '**[sql] [feature]**'
  id: totrans-2280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    now supports arbitrary SQL expressions and/or functions, in addition to straight
    columns. Common modifiers include using `somecolumn.desc()` for a descending index
    and `func.lower(somecolumn)` for a case-insensitive index, depending on the capabilities
    of the target backend.'
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    现在支持任意的 SQL 表达式和/或函数，除了直接列。常见的修饰符包括使用 `somecolumn.desc()` 来创建降序索引，以及 `func.lower(somecolumn)`
    来创建不区分大小写的索引，具体取决于目标后端的功能。'
- en: 'References: [#695](https://www.sqlalchemy.org/trac/ticket/695)'
  id: totrans-2282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#695](https://www.sqlalchemy.org/trac/ticket/695)
- en: '**[sql] [bug]**'
  id: totrans-2283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of SELECT correlation has been improved such that the [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") and [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") methods, as well as their
    ORM analogues, will still retain “auto-correlation” behavior in that the FROM
    clause is modified only if the output would be legal SQL; that is, the FROM clause
    is left intact if the correlated SELECT is not used in the context of an enclosing
    SELECT inside of the WHERE, columns, or HAVING clause. The two methods now only
    specify conditions to the default “auto correlation”, rather than absolute FROM
    lists.
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 SELECT 关联的行为，使得 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 和 [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法，以及它们的 ORM 类似方法，在 FROM
    子句仅在输出为合法 SQL 时才被修改；也就是说，如果关联的 SELECT 在 WHERE、columns 或 HAVING 子句的上下文中未被用于封闭的
    SELECT 中，FROM 子句将保持不变。这两种方法现在只指定默认“自动关联”的条件，而不是绝对的 FROM 列表。
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668)'
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668)
- en: '**[sql] [bug]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug regarding column annotations which in particular could impact some
    usages of the new [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") and `local()` annotation functions, where annotations
    could be lost when the column were used in a subsequent expression.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于列注释的 bug，特别是可能影响到新的 [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") 和 `local()` 注释函数的某些用法，当列在后续表达式中使用时，注释可能会丢失。
- en: 'References: [#1768](https://www.sqlalchemy.org/trac/ticket/1768), [#2660](https://www.sqlalchemy.org/trac/ticket/2660)'
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1768](https://www.sqlalchemy.org/trac/ticket/1768), [#2660](https://www.sqlalchemy.org/trac/ticket/2660)
- en: '**[sql] [bug]**'
  id: totrans-2289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") operator will now coerce values
    of `None` to [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null").
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 操作符现在会将`None`值强制转换为[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")。'
- en: 'References: [#2496](https://www.sqlalchemy.org/trac/ticket/2496)'
  id: totrans-2291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2496](https://www.sqlalchemy.org/trac/ticket/2496)
- en: '**[sql] [bug]**'
  id: totrans-2292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would fail if a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") had both a foreign key as well as an alternate “.key”
    name for the column. Also in 0.7.10.
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当一个 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    同时具有外键和列的替代“.key”名称时，[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 会失败。也适用于 0.7.10 版本。
- en: 'References: [#2643](https://www.sqlalchemy.org/trac/ticket/2643)'
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2643](https://www.sqlalchemy.org/trac/ticket/2643)
- en: '**[sql] [bug]**'
  id: totrans-2295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: insert().returning() raises an informative CompileError if attempted to compile
    on a dialect that doesn’t support RETURNING.
  id: totrans-2296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在不支持 RETURNING 的方言上尝试编译时，insert().returning() 会引发一个信息性的 CompileError。
- en: 'References: [#2629](https://www.sqlalchemy.org/trac/ticket/2629)'
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2629](https://www.sqlalchemy.org/trac/ticket/2629)
- en: '**[sql] [bug]**'
  id: totrans-2298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Tweaked the “REQUIRED” symbol used by the compiler to identify INSERT/UPDATE
    bound parameters that need to be passed, so that it’s more easily identifiable
    when writing custom bind-handling code.
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了编译器用于识别需要传递的 INSERT/UPDATE 绑定参数的“REQUIRED”符号，以便在编写自定义绑定处理代码时更容易识别。
- en: 'References: [#2648](https://www.sqlalchemy.org/trac/ticket/2648)'
  id: totrans-2300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2648](https://www.sqlalchemy.org/trac/ticket/2648)
- en: schema
  id: totrans-2301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-2302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") will now accommodate an empty list as an
    instruction to not create/drop any items, rather than ignoring the collection.'
  id: totrans-2303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 现在将接受一个空列表作为不创建/删除任何项的指令，而不是忽略该集合。'
- en: 'References: [#2664](https://www.sqlalchemy.org/trac/ticket/2664)'
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2664](https://www.sqlalchemy.org/trac/ticket/2664)
- en: postgresql
  id: totrans-2305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL’s traditional SUBSTRING function syntax, renders
    as “SUBSTRING(x FROM y FOR z)” when regular `func.substring()` is used. Courtesy
    Gunnlaugur Þór Briem.
  id: totrans-2307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 传统 SUBSTRING 函数语法的支持，当使用常规的 `func.substring()` 时，呈现为“SUBSTRING(x
    FROM y FOR z)”。感谢 Gunnlaugur Þór Briem。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.7.11
- en: 'References: [#2676](https://www.sqlalchemy.org/trac/ticket/2676)'
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2676](https://www.sqlalchemy.org/trac/ticket/2676)
- en: '**[postgresql] [feature]**'
  id: totrans-2310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added `Comparator.any()` and `Comparator.all()` methods, as well as standalone
    expression constructs. Big thanks to Audrius Kažukauskas for the terrific work
    here.
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 `Comparator.any()` 和 `Comparator.all()` 方法，以及独立的表达式构造。非常感谢 Audrius Kažukauskas
    在这里的出色工作。
- en: '**[postgresql] [bug]**'
  id: totrans-2312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct whereby using it inside of an
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct would produce an error regarding a parameter issue in the `self_group()`
    method.
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`array()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造中的 bug，当在 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 构造中使用它时，会产生关于 `self_group()` 方法中参数问题的错误。
- en: mysql
  id: totrans-2314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: New dialect for CyMySQL added, courtesy Hajime Nakagami.
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 CyMySQL 的新方言，感谢 Hajime Nakagami。
- en: '**[mysql] [feature]**'
  id: totrans-2317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: GAE dialect now accepts username/password arguments in the URL, courtesy Owen
    Nelson.
  id: totrans-2318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GAE 方言现在接受 URL 中的用户名/密码参数，感谢 Owen Nelson。
- en: '**[mysql] [bug] [gae]**'
  id: totrans-2319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [gae]**'
- en: Added a conditional import to the `gaerdbms` dialect which attempts to import
    rdbms_apiproxy vs. rdbms_googleapi to work on both dev and production platforms.
    Also now honors the `instance` attribute. Courtesy Sean Lynch. Also in 0.7.10.
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `gaerdbms` 方言中添加了一个条件导入，尝试导入 rdbms_apiproxy 和 rdbms_googleapi 以在开发和生产平台上工作。现在也支持
    `instance` 属性。感谢 Sean Lynch。也在 0.7.10 版本中。
- en: 'References: [#2649](https://www.sqlalchemy.org/trac/ticket/2649)'
  id: totrans-2321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2649](https://www.sqlalchemy.org/trac/ticket/2649)
- en: '**[mysql] [bug]**'
  id: totrans-2322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: GAE dialect won’t fail on None match if the error code can’t be extracted from
    the exception throw; courtesy Owen Nelson.
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果无法从异常中提取错误代码，GAE 方言将不会在无匹配时失败；感谢 Owen Nelson。
- en: mssql
  id: totrans-2324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added `mssql_include` and `mssql_clustered` options to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), renders the `INCLUDE` and `CLUSTERED` keywords, respectively.
    Courtesy Derek Harland.
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    中添加了 `mssql_include` 和 `mssql_clustered` 选项，分别呈现 `INCLUDE` 和 `CLUSTERED` 关键字。感谢
    Derek Harland。
- en: '**[mssql] [feature]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: DDL for IDENTITY columns is now supported on non-primary key columns, by establishing
    a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct on any integer column. Courtesy Derek Harland.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持在非主键列上建立 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    构造来支持 IDENTITY 列的 DDL。感谢 Derek Harland。
- en: 'References: [#2644](https://www.sqlalchemy.org/trac/ticket/2644)'
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2644](https://www.sqlalchemy.org/trac/ticket/2644)
- en: '**[mssql] [bug]**'
  id: totrans-2330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added a py3K conditional around unnecessary .decode() call in mssql information
    schema, fixes reflection in Py3K. Also in 0.7.10.
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mssql 信息模式中添加了一个 py3K 条件，解决了 Py3K 中反射的问题。也在 0.7.10 版本中。
- en: 'References: [#2638](https://www.sqlalchemy.org/trac/ticket/2638)'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2638](https://www.sqlalchemy.org/trac/ticket/2638)
- en: '**[mssql] [bug]**'
  id: totrans-2333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression whereby the “collation” parameter of the character types
    CHAR, NCHAR, etc. stopped working, as “collation” is now supported by the base
    string types. The TEXT, NCHAR, CHAR, VARCHAR types within the MSSQL dialect are
    now synonyms for the base types.
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即字符类型 CHAR、NCHAR 等的“collation”参数停止工作，因为“collation”现在受到基本字符串类型的支持。MSSQL
    方言中的 TEXT、NCHAR、CHAR、VARCHAR 类型现在是基本类型的同义词。
- en: oracle
  id: totrans-2335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The cx_oracle dialect will no longer run the bind parameter names through `encode()`,
    as this is not valid on Python 3, and prevented statements from functioning correctly
    on Python 3\. We now encode only if `supports_unicode_binds` is False, which is
    not the case for cx_oracle when at least version 5 of cx_oracle is used.
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_oracle方言将不再通过`encode()`运行绑定参数名称，因为这在Python 3上无效，并且阻止了Python 3上语句的正确功能。现在只有在`supports_unicode_binds`为False时才进行编码，当至少使用cx_oracle的版本5时，这不是cx_oracle的情况。
- en: tests
  id: totrans-2338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed an import of “logging” in test_execute which was not working on some linux
    platforms. Also in 0.7.11.
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些Linux平台上无法在test_execute中工作的“logging”导入。也在0.7.11中。
- en: 'References: [#2669](https://www.sqlalchemy.org/trac/ticket/2669)'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2669](https://www.sqlalchemy.org/trac/ticket/2669)
- en: orm
  id: totrans-2342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A meaningful [`QueryableAttribute.info`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info") attribute is added, which proxies down
    to the `.info` attribute on either the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object if directly present, or the [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") otherwise. The full behavior is documented and
    ensured by tests to remain stable.
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了有意义的[`QueryableAttribute.info`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")属性，它代理到直接存在的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的`.info`属性，否则代理到[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。完整的行为已记录并通过测试确保保持稳定。
- en: 'References: [#2675](https://www.sqlalchemy.org/trac/ticket/2675)'
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2675](https://www.sqlalchemy.org/trac/ticket/2675)
- en: '**[orm] [feature]**'
  id: totrans-2346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Can set/change the “cascade” attribute on a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct after it’s been constructed already.
    This is not a pattern for normal use but we like to change the setting for demonstration
    purposes in tutorials.
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在已经构建的[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造函数上设置/更改“cascade”属性。这不是正常使用的模式，但我们喜欢在教程中更改设置以进行演示。
- en: '**[orm] [feature]**'
  id: totrans-2348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new helper function [`was_deleted()`](../orm/session_api.html#sqlalchemy.orm.util.was_deleted
    "sqlalchemy.orm.util.was_deleted"), returns True if the given object was the subject
    of a [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") operation.
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的辅助函数[`was_deleted()`](../orm/session_api.html#sqlalchemy.orm.util.was_deleted
    "sqlalchemy.orm.util.was_deleted")，如果给定对象是[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")操作的主题，则返回True。
- en: 'References: [#2658](https://www.sqlalchemy.org/trac/ticket/2658)'
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2658](https://www.sqlalchemy.org/trac/ticket/2658)
- en: '**[orm] [feature]**'
  id: totrans-2351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Extended the [Runtime Inspection API](../core/inspection.html) system so that
    all Python descriptors associated with the ORM or its extensions can be retrieved.
    This fulfills the common request of being able to inspect all [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") descriptors in addition to extension types
    such as [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") and [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"). See [`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors").
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了[运行时检查API](../core/inspection.html)系统，以便检索与ORM或其扩展相关的所有Python描述符。这满足了能够检查所有[`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")描述符的常见请求，以及扩展类型，如[`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")和[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。请参阅[`Mapper.all_orm_descriptors`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")。
- en: '**[orm] [bug]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Improved checking for an existing backref name conflict during mapper configuration;
    will now test for name conflicts on superclasses and subclasses, in addition to
    the current mapper, as these conflicts break things just as much. This is new
    for 0.8, but see below for a warning that will also be triggered in 0.7.11.
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在映射器配置期间检查现有反向引用名称冲突的方法；现在将在超类和子类上测试名称冲突，除了当前映射器外，因为这些冲突会造成同样的问题。这是0.8版本的新功能，但请参见下面关于0.7.11版本也会触发的警告。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message emitted when a “backref loop” is detected, that is
    when an attribute event triggers a bidirectional assignment between two other
    attributes with no end. This condition can occur not just when an object of the
    wrong type is assigned, but also when an attribute is mis-configured to backref
    into an existing backref pair. Also in 0.7.11.
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到“反向引用循环”时，改进了发出的错误消息，即当属性事件触发两个其他属性之间的双向赋值而没有结束时。这种情况不仅会在分配错误类型的对象时发生，还会在属性被错误配置为反向引用到现有反向引用对时发生。也适用于0.7.11版本。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-2359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when a MapperProperty is assigned to a mapper that replaces
    an existing property, if the properties in question aren’t plain column-based
    properties. Replacement of relationship properties is rarely (ever?) what is intended
    and usually refers to a mapper mis-configuration. Also in 0.7.11.
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将MapperProperty分配给替换现有属性的映射器时，如果涉及的属性不是简单的基于列的属性，则会发出警告。替换关系属性很少（甚至从未？）是预期的，通常指的是映射器错误配置。也适用于0.7.11版本。
- en: 'References: [#2674](https://www.sqlalchemy.org/trac/ticket/2674)'
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2674](https://www.sqlalchemy.org/trac/ticket/2674)
- en: '**[orm] [bug]**'
  id: totrans-2362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A clear error message is emitted if an event handler attempts to emit SQL on
    a Session within the after_commit() handler, where there is not a viable transaction
    in progress.
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件处理程序尝试在没有进行中的有效事务的情况下在`after_commit()`处理程序中发出SQL，则会发出清晰的错误消息。
- en: 'References: [#2662](https://www.sqlalchemy.org/trac/ticket/2662)'
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2662](https://www.sqlalchemy.org/trac/ticket/2662)
- en: '**[orm] [bug]**'
  id: totrans-2365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Detection of a primary key change within the process of cascading a natural
    primary key update will succeed even if the key is composite and only some of
    the attributes have changed.
  id: totrans-2366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在级联自然主键更新过程中检测主键更改将成功，即使该主键是复合的，只有一些属性发生了变化。
- en: 'References: [#2665](https://www.sqlalchemy.org/trac/ticket/2665)'
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2665](https://www.sqlalchemy.org/trac/ticket/2665)
- en: '**[orm] [bug]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An object that’s deleted from a session will be de-associated with that session
    fully after the transaction is committed, that is the [`object_session()`](../orm/session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session") function will return None.
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从会话中删除的对象在事务提交后将完全与该会话解除关联，即[`object_session()`](../orm/session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session")函数将返回None。
- en: 'References: [#2658](https://www.sqlalchemy.org/trac/ticket/2658)'
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2658](https://www.sqlalchemy.org/trac/ticket/2658)
- en: '**[orm] [bug]**'
  id: totrans-2371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") would set the execution options incorrectly,
    thereby breaking subsequent usage of the [`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") method. Courtesy Ryan Kelly.
  id: totrans-2372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")设置执行选项不正确的错误，从而破坏了后续使用[`Query.execution_options()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")方法的情况。感谢Ryan Kelly。
- en: 'References: [#2661](https://www.sqlalchemy.org/trac/ticket/2661)'
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2661](https://www.sqlalchemy.org/trac/ticket/2661)
- en: '**[orm] [bug]**'
  id: totrans-2374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the consideration of the `between()` operator so that it works correctly
    with the new relationship local/remote system.
  id: totrans-2375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`between()`运算符的考虑，使其与新的关系本地/远程系统正确工作。
- en: 'References: [#1768](https://www.sqlalchemy.org/trac/ticket/1768)'
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1768](https://www.sqlalchemy.org/trac/ticket/1768)
- en: '**[orm] [bug]**'
  id: totrans-2377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: the consideration of a pending object as an “orphan” has been modified to more
    closely match the behavior as that of persistent objects, which is that the object
    is expunged from the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as soon as it is de-associated from any of its orphan-enabled
    parents. Previously, the pending object would be expunged only if de-associated
    from all of its orphan-enabled parents. The new flag `legacy_is_orphan` is added
    to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    which re-establishes the legacy behavior.
  id: totrans-2378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将待处理对象视为“孤儿”的考虑已修改，以更接近持久对象的行为，即一旦它从任何启用孤儿的父级对象中取消关联，该对象就会从[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中删除。以前，只有当待处理对象从所有启用孤儿的父级对象中取消关联时，才会将其删除。在 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")中添加了新标志`legacy_is_orphan`，它重新建立了旧版本的行为。
- en: See the change note and example case at [The consideration of a “pending” object
    as an “orphan” has been made more aggressive](migration_08.html#legacy-is-orphan-addition)
    for a detailed discussion of this change.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关此更改的详细讨论，请参阅[将“待处理”对象视为“孤儿”的考虑变得更加激进](migration_08.html#legacy-is-orphan-addition)的更改说明和示例情况。
- en: 'References: [#2655](https://www.sqlalchemy.org/trac/ticket/2655)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2655](https://www.sqlalchemy.org/trac/ticket/2655)
- en: '**[orm] [bug]**'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the (most likely never used) “@collection.link” collection method, which
    fires off each time the collection is associated or de-associated with a mapped
    object - the decorator was not tested or functional. The decorator method is now
    named `collection.linker()` though the name “link” remains for backwards compatibility.
    Courtesy Luca Wehrstedt.
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了（很可能从未使用过的）“@collection.link”集合方法，该方法在每次将集合与映射对象关联或取消关联时触发 - 未测试或功能性不强。装饰器方法现在命名为`collection.linker()`，尽管名称“link”仍保留以保持向后兼容性。感谢
    Luca Wehrstedt。
- en: 'References: [#2653](https://www.sqlalchemy.org/trac/ticket/2653)'
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2653](https://www.sqlalchemy.org/trac/ticket/2653)
- en: '**[orm] [bug]**'
  id: totrans-2384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made some fixes to the system of producing custom instrumented collections,
    mainly that the usage of the @collection decorators will now honor the __mro__
    of the given class, applying the logic of the sub-most classes’ version of a particular
    collection method. Previously, it wasn’t predictable when subclassing an existing
    instrumented class such as `MappedCollection` whether or not custom methods would
    resolve correctly.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对生成自定义检测集合系统进行了一些修复，主要是现在使用 @collection 装饰器将遵循给定类的 __mro__，应用于特定集合方法的子类版本的逻辑。以前，在对现有的检测类进行子类化时，例如`MappedCollection`，无法预测自定义方法是否会正确解析。
- en: 'References: [#2654](https://www.sqlalchemy.org/trac/ticket/2654)'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2654](https://www.sqlalchemy.org/trac/ticket/2654)
- en: '**[orm] [bug]**'
  id: totrans-2387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed potential memory leak which could occur if an arbitrary number of [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") objects were created. The anonymous subclass created
    by the sessionmaker, when dereferenced, would not be garbage collected due to
    remaining class-level references from the event package. This issue also applies
    to any custom system that made use of ad-hoc subclasses in conjunction with an
    event dispatcher. Also in 0.7.10.
  id: totrans-2388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可能会发生的内存泄漏问题，如果创建了任意数量的 [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")对象，则会发生。由于事件包中保留了来自类级别的引用，当取消引用 sessionmaker 创建的匿名子类时，它不会被垃圾收集。此问题还适用于与事件调度程序结合使用临时子类的任何自定义系统。也适用于
    0.7.10 版本。
- en: 'References: [#2650](https://www.sqlalchemy.org/trac/ticket/2650)'
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2650](https://www.sqlalchemy.org/trac/ticket/2650)
- en: '**[orm] [bug]**'
  id: totrans-2390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") can now load rows from an outer join where
    an entity may be `None` without throwing an error. Also in 0.7.10.'
  id: totrans-2391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.merge_result()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") 现在可以从外连接加载行，其中实体可能为`None`而不会抛出错误。也适用于 0.7.10
    版本。'
- en: 'References: [#2640](https://www.sqlalchemy.org/trac/ticket/2640)'
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2640](https://www.sqlalchemy.org/trac/ticket/2640)
- en: '**[orm] [bug]**'
  id: totrans-2393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixes to the “dynamic” loader on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), includes that backrefs will work properly even
    when autoflush is disabled, history events are more accurate in scenarios where
    multiple add/remove of the same object occurs.
  id: totrans-2394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的“dynamic”加载器进行修复，包括当禁用自动刷新时，反向引用将正常工作，历史事件在同一对象多次添加/删除的情况下更加准确。
- en: 'References: [#2637](https://www.sqlalchemy.org/trac/ticket/2637)'
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2637](https://www.sqlalchemy.org/trac/ticket/2637)
- en: '**[orm] [removed]**'
  id: totrans-2396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [removed]**'
- en: The undocumented (and hopefully unused) system of producing custom collections
    using an `__instrumentation__` datastructure associated with the collection has
    been removed, as this was a complex and untested feature which was also essentially
    redundant versus the decorator approach. Other internal simplifications to the
    orm.collections module have been made as well.
  id: totrans-2397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除了使用与集合关联的`__instrumentation__`数据结构来生成自定义集合的未记录（希望未使用）系统，因为这是一个复杂且未经测试的功能，与装饰器方法基本重复。还对orm.collections模块进行了其他内部简化。
- en: examples
  id: totrans-2398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a regression in the examples/dogpile_caching example which was due to
    the change in [#2614](https://www.sqlalchemy.org/trac/ticket/2614).
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/dogpile_caching示例中的回归，这是由于[#2614](https://www.sqlalchemy.org/trac/ticket/2614)的更改引起的。
- en: sql
  id: totrans-2401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new argument to [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") and its base [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") `inherit_schema`. When set to `True`, the type
    will set its `schema` attribute of that of the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which it is associated. This also occurs during
    a [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") operation; the [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") is now copied in all cases when [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") happens, and if `inherit_schema=True`, the
    type will take on the new schema name passed to the method. The `schema` is important
    when used with the PostgreSQL backend, as the type results in a `CREATE TYPE`
    statement.
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")及其基类[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")添加了一个新参数`inherit_schema`。当设置为`True`时，该类型将设置其与之关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的`schema`属性。这也会在进行[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")操作时发生；在[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")发生时，[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")现在在所有情况下都会被复制，并且如果`inherit_schema=True`，该类型将采用传递给该方法的新模式名称。在与PostgreSQL后端一起使用时，`schema`非常重要，因为该类型会导致`CREATE
    TYPE`语句。
- en: 'References: [#2657](https://www.sqlalchemy.org/trac/ticket/2657)'
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2657](https://www.sqlalchemy.org/trac/ticket/2657)
- en: '**[sql] [feature]**'
  id: totrans-2405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    now supports arbitrary SQL expressions and/or functions, in addition to straight
    columns. Common modifiers include using `somecolumn.desc()` for a descending index
    and `func.lower(somecolumn)` for a case-insensitive index, depending on the capabilities
    of the target backend.'
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")现在支持任意的SQL表达式和/或函数，除了直接列。常见的修饰符包括使用`somecolumn.desc()`来创建降序索引和`func.lower(somecolumn)`来创建不区分大小写的索引，具体取决于目标后端的功能。'
- en: 'References: [#695](https://www.sqlalchemy.org/trac/ticket/695)'
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#695](https://www.sqlalchemy.org/trac/ticket/695)
- en: '**[sql] [bug]**'
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of SELECT correlation has been improved such that the [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") and [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") methods, as well as their
    ORM analogues, will still retain “auto-correlation” behavior in that the FROM
    clause is modified only if the output would be legal SQL; that is, the FROM clause
    is left intact if the correlated SELECT is not used in the context of an enclosing
    SELECT inside of the WHERE, columns, or HAVING clause. The two methods now only
    specify conditions to the default “auto correlation”, rather than absolute FROM
    lists.
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 SELECT 关联的行为，使得 [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") 和 [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法，以及它们的 ORM 类似方法，在上下文中仍将保留“自动关联”的行为，即仅在输出合法的
    SQL 时修改 FROM 子句；也就是说，如果关联的 SELECT 在 WHERE、columns 或 HAVING 子句的上下文中未被用于封闭的 SELECT
    中，FROM 子句将保持不变。这两种方法现在只指定默认“自动关联”的条件，而不是绝对的 FROM 列表。
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668)
- en: '**[sql] [bug]**'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug regarding column annotations which in particular could impact some
    usages of the new [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") and `local()` annotation functions, where annotations
    could be lost when the column were used in a subsequent expression.
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于列注释的 bug，特别是可能影响新的 [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") 和 `local()` 注释函数的某些用法，其中在列在后续表达式中使用时可能会丢失注释。
- en: 'References: [#1768](https://www.sqlalchemy.org/trac/ticket/1768), [#2660](https://www.sqlalchemy.org/trac/ticket/2660)'
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1768](https://www.sqlalchemy.org/trac/ticket/1768), [#2660](https://www.sqlalchemy.org/trac/ticket/2660)
- en: '**[sql] [bug]**'
  id: totrans-2414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") operator will now coerce values
    of `None` to [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null").
  id: totrans-2415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 运算符现在会将 `None` 的值强制转换为 [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null")。'
- en: 'References: [#2496](https://www.sqlalchemy.org/trac/ticket/2496)'
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2496](https://www.sqlalchemy.org/trac/ticket/2496)
- en: '**[sql] [bug]**'
  id: totrans-2417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") would fail if a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") had both a foreign key as well as an alternate “.key”
    name for the column. Also in 0.7.10.
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，关于 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 如果一个 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 同时具有外键和列的替代“.key”名称，将会失败。也适用于 0.7.10 版本。
- en: 'References: [#2643](https://www.sqlalchemy.org/trac/ticket/2643)'
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2643](https://www.sqlalchemy.org/trac/ticket/2643)
- en: '**[sql] [bug]**'
  id: totrans-2420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: insert().returning() raises an informative CompileError if attempted to compile
    on a dialect that doesn’t support RETURNING.
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`insert().returning()` 在不支持 RETURNING 的方言上尝试编译时会引发一个信息丰富的 CompileError。'
- en: 'References: [#2629](https://www.sqlalchemy.org/trac/ticket/2629)'
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2629](https://www.sqlalchemy.org/trac/ticket/2629)
- en: '**[sql] [bug]**'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Tweaked the “REQUIRED” symbol used by the compiler to identify INSERT/UPDATE
    bound parameters that need to be passed, so that it’s more easily identifiable
    when writing custom bind-handling code.
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了编译器用于识别需要传递的 INSERT/UPDATE 绑定参数的“REQUIRED”符号，使其在编写自定义绑定处理代码时更容易识别。
- en: 'References: [#2648](https://www.sqlalchemy.org/trac/ticket/2648)'
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2648](https://www.sqlalchemy.org/trac/ticket/2648)
- en: schema
  id: totrans-2426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") will now accommodate an empty list as an
    instruction to not create/drop any items, rather than ignoring the collection.'
  id: totrans-2428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 现在将空列表作为不创建/删除任何项的指令，而不是忽略该集合。'
- en: 'References: [#2664](https://www.sqlalchemy.org/trac/ticket/2664)'
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2664](https://www.sqlalchemy.org/trac/ticket/2664)
- en: postgresql
  id: totrans-2430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for PostgreSQL’s traditional SUBSTRING function syntax, renders
    as “SUBSTRING(x FROM y FOR z)” when regular `func.substring()` is used. Courtesy
    Gunnlaugur Þór Briem.
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 传统 SUBSTRING 函数语法的支持，当使用常规的 `func.substring()` 时，会呈现为“SUBSTRING(x
    FROM y FOR z)”。感谢 Gunnlaugur Þór Briem。
- en: 'This change is also **backported** to: 0.7.11'
  id: totrans-2433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.7.11
- en: 'References: [#2676](https://www.sqlalchemy.org/trac/ticket/2676)'
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2676](https://www.sqlalchemy.org/trac/ticket/2676)
- en: '**[postgresql] [feature]**'
  id: totrans-2435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added `Comparator.any()` and `Comparator.all()` methods, as well as standalone
    expression constructs. Big thanks to Audrius Kažukauskas for the terrific work
    here.
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 `Comparator.any()` 和 `Comparator.all()` 方法，以及独立的表达式构造。非常感谢 Audrius Kažukauskas
    在这里的出色工作。
- en: '**[postgresql] [bug]**'
  id: totrans-2437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug in [`array()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") construct whereby using it inside of an
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    construct would produce an error regarding a parameter issue in the `self_group()`
    method.
  id: totrans-2438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`array()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 构造中的 bug，该 bug 在 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 构造中使用时会产生关于 `self_group()` 方法中参数问题的错误。
- en: mysql
  id: totrans-2439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: New dialect for CyMySQL added, courtesy Hajime Nakagami.
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了 CyMySQL 的方言，感谢 Hajime Nakagami。
- en: '**[mysql] [feature]**'
  id: totrans-2442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: GAE dialect now accepts username/password arguments in the URL, courtesy Owen
    Nelson.
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GAE 方言现在接受 URL 中的用户名/密码参数，感谢 Owen Nelson。
- en: '**[mysql] [bug] [gae]**'
  id: totrans-2444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [gae]**'
- en: Added a conditional import to the `gaerdbms` dialect which attempts to import
    rdbms_apiproxy vs. rdbms_googleapi to work on both dev and production platforms.
    Also now honors the `instance` attribute. Courtesy Sean Lynch. Also in 0.7.10.
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `gaerdbms` 方言中添加了一个条件导入，尝试导入 rdbms_apiproxy 而不是 rdbms_googleapi 以在开发和生产平台上工作。现在也支持
    `instance` 属性。感谢 Sean Lynch。也在 0.7.10 版本中。
- en: 'References: [#2649](https://www.sqlalchemy.org/trac/ticket/2649)'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2649](https://www.sqlalchemy.org/trac/ticket/2649)
- en: '**[mysql] [bug]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: GAE dialect won’t fail on None match if the error code can’t be extracted from
    the exception throw; courtesy Owen Nelson.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 GAE 方言无法从异常抛出中提取错误代码，则不会因为 None 匹配而失败；感谢 Owen Nelson。
- en: mssql
  id: totrans-2449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Added `mssql_include` and `mssql_clustered` options to [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), renders the `INCLUDE` and `CLUSTERED` keywords, respectively.
    Courtesy Derek Harland.
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")中添加了
    `mssql_include` 和 `mssql_clustered` 选项，分别呈现 `INCLUDE` 和 `CLUSTERED` 关键字。感谢 Derek
    Harland。
- en: '**[mssql] [feature]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: DDL for IDENTITY columns is now supported on non-primary key columns, by establishing
    a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct on any integer column. Courtesy Derek Harland.
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持在非主键列上为自增列设置DDL，方法是在任何整数列上建立一个[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")构造。感谢 Derek Harland。
- en: 'References: [#2644](https://www.sqlalchemy.org/trac/ticket/2644)'
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2644](https://www.sqlalchemy.org/trac/ticket/2644)
- en: '**[mssql] [bug]**'
  id: totrans-2455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added a py3K conditional around unnecessary .decode() call in mssql information
    schema, fixes reflection in Py3K. Also in 0.7.10.
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mssql 信息模式中添加了一个 py3K 条件，修复了 Py3K 中的反射问题。也在 0.7.10 版本中。
- en: 'References: [#2638](https://www.sqlalchemy.org/trac/ticket/2638)'
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2638](https://www.sqlalchemy.org/trac/ticket/2638)
- en: '**[mssql] [bug]**'
  id: totrans-2458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed a regression whereby the “collation” parameter of the character types
    CHAR, NCHAR, etc. stopped working, as “collation” is now supported by the base
    string types. The TEXT, NCHAR, CHAR, VARCHAR types within the MSSQL dialect are
    now synonyms for the base types.
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了字符类型 CHAR、NCHAR 等的“collation”参数停止工作的回归问题，因为“collation”现在由基本字符串类型支持��MSSQL
    方言中的 TEXT、NCHAR、CHAR、VARCHAR 类型现在是基本类型的同义词。
- en: oracle
  id: totrans-2460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The cx_oracle dialect will no longer run the bind parameter names through `encode()`,
    as this is not valid on Python 3, and prevented statements from functioning correctly
    on Python 3\. We now encode only if `supports_unicode_binds` is False, which is
    not the case for cx_oracle when at least version 5 of cx_oracle is used.
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_oracle方言将不再通过`encode()`运行绑定参数名称，因为这在Python 3上是无效的，并且阻止了Python 3上语句的正确功能。现在只有在`supports_unicode_binds`为False时才进行编码，当至少使用cx_oracle的版本5时，这种情况并不适用于cx_oracle。
- en: tests
  id: totrans-2463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed an import of “logging” in test_execute which was not working on some linux
    platforms. Also in 0.7.11.
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些Linux平台上无法在test_execute中工作的“logging”导入。也在0.7.11中。
- en: 'References: [#2669](https://www.sqlalchemy.org/trac/ticket/2669)'
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2669](https://www.sqlalchemy.org/trac/ticket/2669)
- en: 0.8.0b2
  id: totrans-2467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.0b2
- en: 'Released: December 14, 2012'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年12月14日
- en: orm
  id: totrans-2469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added `KeyedTuple._asdict()` and `KeyedTuple._fields` to the `KeyedTuple` class
    to provide some degree of compatibility with the Python standard library `collections.namedtuple()`.
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`KeyedTuple._asdict()`和`KeyedTuple._fields`到`KeyedTuple`类，以提供与Python标准库`collections.namedtuple()`一定程度的兼容性。
- en: 'References: [#2601](https://www.sqlalchemy.org/trac/ticket/2601)'
  id: totrans-2472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2601](https://www.sqlalchemy.org/trac/ticket/2601)
- en: '**[orm] [feature]**'
  id: totrans-2473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Allow synonyms to be used when defining primary and secondary joins for relationships.
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许在定义关系的主要和次要连接时使用同义词。
- en: '**[orm] [bug]**'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: 'The [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method can now be used with a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct without it interfering with the entities being
    selected. Basically, a statement like this:'
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法现在可以与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造一起使用，而不会干扰被选择的实体。基本上，像这样的语句：'
- en: '[PRE9]'
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Will maintain the columns clause of the SELECT as coming from the unaliased
    “user”, as specified; the select_from only takes place in the FROM clause:'
  id: totrans-2478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将保持SELECT中的列子句作为未命名的“user”指定；select_from仅在FROM子句中发生：
- en: '[PRE10]'
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that this behavior is in contrast to the original, older use case for
    [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from"), which is that of restating the mapped entity
    in terms of a different selectable:'
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这种行为与原始、较旧的[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")用例形成对比，即在不同的可选择性方面重新表述映射实体：
- en: '[PRE11]'
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Which produces:'
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE12]'
  id: totrans-2483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It was the “aliasing” behavior of the latter use case that was getting in the
    way of the former use case. The method now specifically considers a SQL expression
    like [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    or [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")
    separately from a mapped entity like a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正是后一种用例的“别名”行为妨碍了前一种用例。该方法现在明确将SQL表达式（如[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")）与映射实体（如[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造）分开考虑。
- en: 'References: [#2635](https://www.sqlalchemy.org/trac/ticket/2635)'
  id: totrans-2485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2635](https://www.sqlalchemy.org/trac/ticket/2635)
- en: '**[orm] [bug]**'
  id: totrans-2486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: The [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") type did not allow for the [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") method to be used, even though the
    code seemed to indicate this intent, so this now works and a brief example is
    added. As a side-effect, the mechanics of this event handler have been changed
    so that new [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") types no longer add per-type global
    event handlers. Also in 0.7.10.
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不允许使用 [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") 方法，即使代码似乎表明了这个意图，所以现在可以使用，并添加了一个简要示例。作为副作用，此事件处理程序的机制已更改，以使新的
    [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不再添加每类型的全局事件处理程序。还在 0.7.10 版本中。'
- en: 'References: [#2624](https://www.sqlalchemy.org/trac/ticket/2624)'
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2624](https://www.sqlalchemy.org/trac/ticket/2624)
- en: '**[orm] [bug]**'
  id: totrans-2489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A second overhaul of aliasing/internal pathing mechanics now allows two subclasses
    to have different relationships of the same name, supported with subquery or joined
    eager loading on both simultaneously when a full polymorphic load is used.
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对别名/内部路径机制的第二次彻底改进现在允许两个子类具有相同名称的不同关系，当使用完整的多态加载时同时支持子查询或联接的快速加载。
- en: 'References: [#2614](https://www.sqlalchemy.org/trac/ticket/2614)'
  id: totrans-2491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2614](https://www.sqlalchemy.org/trac/ticket/2614)
- en: '**[orm] [bug]**'
  id: totrans-2492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a multi-hop subqueryload within a particular with_polymorphic
    load would produce a KeyError. Takes advantage of the same internal pathing overhaul
    as [#2614](https://www.sqlalchemy.org/trac/ticket/2614).
  id: totrans-2493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，其中特定的 with_polymorphic 加载中的多跳子查询加载会产生 KeyError。利用了与 [#2614](https://www.sqlalchemy.org/trac/ticket/2614)
    相同的内部路径改进。
- en: 'References: [#2617](https://www.sqlalchemy.org/trac/ticket/2617)'
  id: totrans-2494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2617](https://www.sqlalchemy.org/trac/ticket/2617)
- en: '**[orm] [bug]**'
  id: totrans-2495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where query.update() would produce an error if an object matched
    by the “fetch” synchronization strategy wasn’t locally present. Courtesy Scott
    Torborg.
  id: totrans-2496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，当对象通过“fetch”同步策略匹配但本地不存在时，查询.update() 会产生错误。由 Scott Torborg 提供。
- en: 'References: [#2602](https://www.sqlalchemy.org/trac/ticket/2602)'
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2602](https://www.sqlalchemy.org/trac/ticket/2602)
- en: orm extensions
  id: totrans-2498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 扩展
- en: '**[orm] [extensions] [feature]**'
  id: totrans-2499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [extensions] [feature]**'
- en: The [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension now includes the example [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class as part of the extension.
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展现在包括作为扩展的一部分的示例 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 类。'
- en: engine
  id: totrans-2501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'The `Connection.connect()` and `Connection.contextual_connect()` methods now
    return a “branched” version so that the [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method can be called on the returned connection
    without affecting the original. Allows symmetry when using [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as context managers:'
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Connection.connect()` 和 `Connection.contextual_connect()` 方法现在返回一个“branched”版本，以便在返回的连接上调用
    [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") 方法而不影响原始连接。在使用 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象作为上下文管理器时允许对称性：'
- en: '[PRE13]'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**[engine] [bug]**'
  id: totrans-2505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") to correctly use the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), if given, without opening a second connection
    from that connection’s [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法，正确使用给定的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，如果给定的话，而不是从该连接的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 中打开第二个连接。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.10
- en: 'References: [#2604](https://www.sqlalchemy.org/trac/ticket/2604)'
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2604](https://www.sqlalchemy.org/trac/ticket/2604)
- en: '**[engine]**'
  id: totrans-2509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The “reflect=True” argument to [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is deprecated. Please use the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method.
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    的“reflect=True”参数已被弃用。请使用 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") ��法。'
- en: sql
  id: totrans-2511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct now supports multi-valued inserts, that is, an INSERT that renders like
    “INSERT INTO table VALUES (…), (…), …”. Supported by PostgreSQL, SQLite, and MySQL.
    Big thanks to Idan Kamara for doing the legwork on this one.
  id: totrans-2513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造现在支持多值插入，即类似于“INSERT INTO table VALUES (…), (…), …”。受 PostgreSQL、SQLite 和 MySQL
    支持。特别感谢 Idan Kamara 在这方面的工作。'
- en: See also
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Multiple-VALUES support for Insert](migration_08.html#feature-2623)'
  id: totrans-2515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Insert 的多值支持](migration_08.html#feature-2623)'
- en: 'References: [#2623](https://www.sqlalchemy.org/trac/ticket/2623)'
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2623](https://www.sqlalchemy.org/trac/ticket/2623)
- en: '**[sql] [bug]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using server_onupdate=<FetchedValue|DefaultClause> without passing
    the “for_update=True” flag would apply the default object to the server_default,
    blowing away whatever was there. The explicit for_update=True argument shouldn’t
    be needed with this usage (especially since the documentation shows an example
    without it being used) so it is now arranged internally using a copy of the given
    default object, if the flag isn’t set to what corresponds to that argument.
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在不传递“for_update=True”标志的情况下使用 server_onupdate=<FetchedValue|DefaultClause>
    会将默认对象应用于 server_default，覆盖原有内容。这种用法不应该需要显式的 for_update=True 参数（尤其是因为文档中显示了一个没有使用该参数的示例），因此现在在内部使用给定默认对象的副本来安排，如果标志没有设置为对应该参数的值。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.10
- en: 'References: [#2631](https://www.sqlalchemy.org/trac/ticket/2631)'
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2631](https://www.sqlalchemy.org/trac/ticket/2631)
- en: '**[sql] [bug]**'
  id: totrans-2521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression caused by [#2410](https://www.sqlalchemy.org/trac/ticket/2410)
    whereby a [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") would apply itself back to the original table
    during a [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") operation, as it would parse the SQL expression
    for a parent table. The operation now copies the given expression to correspond
    to the new table.
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#2410](https://www.sqlalchemy.org/trac/ticket/2410) 引起的回归，即在 [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 操作期间，[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 会将自身应用回原始表，因为它会解析父表的 SQL 表达式。现在该操作会将给定表达式复制以对应新表。
- en: 'References: [#2633](https://www.sqlalchemy.org/trac/ticket/2633)'
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2633](https://www.sqlalchemy.org/trac/ticket/2633)
- en: '**[sql] [bug]**'
  id: totrans-2524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby using a label_length on dialect that was smaller than the
    size of actual column identifiers would fail to render the columns correctly in
    a SELECT statement.
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在方言上使用的 label_length 小于实际列标识符大小时，在 SELECT 语句中无法正确渲染列的 bug。
- en: 'References: [#2610](https://www.sqlalchemy.org/trac/ticket/2610)'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2610](https://www.sqlalchemy.org/trac/ticket/2610)
- en: '**[sql] [bug]**'
  id: totrans-2527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    type now honors the “precision” and “scale” arguments when rendering DDL.
  id: totrans-2528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    类型现在在渲染 DDL 时遵守“precision”和“scale”参数。'
- en: 'References: [#2618](https://www.sqlalchemy.org/trac/ticket/2618)'
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2618](https://www.sqlalchemy.org/trac/ticket/2618)
- en: '**[sql] [bug]**'
  id: totrans-2530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Made an adjustment to the “boolean”, (i.e. `__nonzero__`) evaluation of binary
    expressions, i.e. `x1 == x2`, such that the “auto-grouping” applied by [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") in some cases won’t get in the way
    of this comparison. Previously, an expression like:'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对二进制表达式的“boolean”（即`__nonzero__`）评估进行了调整，例如`x1 == x2`，以确保[`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")在某些情况下的“自动分组”不会妨碍此比较。之前，像下面这样的表达式：
- en: '[PRE14]'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Would evaluate as `False`, even though this is an identity comparison, because
    `mycolumn > 2` would be “grouped” before being placed into the [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"), thus changing its identity. [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") now keeps track of the “original”
    objects passed in. Additionally the `__nonzero__` method now only returns if the
    operator is `==` or `!=` - all others raise `TypeError`.
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使这是一个身份比较，也会评估为`False`，因为`mycolumn > 2`将在被放入[`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")之前被“分组”，从而改变其身份。[`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression")现在跟踪传递的“原始”对象。此外，`__nonzero__`方法现在仅在运算符为`==`或`!=`时返回
    - 其他所有情况均引发`TypeError`。
- en: 'References: [#2621](https://www.sqlalchemy.org/trac/ticket/2621)'
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2621](https://www.sqlalchemy.org/trac/ticket/2621)
- en: '**[sql] [bug]**'
  id: totrans-2535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a gotcha where inadvertently calling list() on a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would go into an endless loop, if [`ColumnOperators.__getitem__()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__getitem__
    "sqlalchemy.sql.expression.ColumnOperators.__getitem__") were implemented. A new
    NotImplementedError is emitted via `__iter__()`.
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个陷阱，即无意中对[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")调用`list()`会陷入无限循环，如果实现了[`ColumnOperators.__getitem__()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__getitem__
    "sqlalchemy.sql.expression.ColumnOperators.__getitem__")。现在通过`__iter__()`发出新的NotImplementedError。
- en: '**[sql] [bug]**'
  id: totrans-2537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in type_coerce() whereby typing information could be lost if the statement
    were used as a subquery inside of another statement, as well as other similar
    situations. Among other things, would cause typing information to be lost when
    the Oracle/mssql dialects would apply limit/offset wrappings.
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了type_coerce()中的错误，即如果语句被用作另一语句中的子查询，以及其他类似情况，可能会丢失类型信息。在其他情况下，当Oracle/mssql方言应用限制/偏移包装时，会导致类型信息丢失。
- en: 'References: [#2603](https://www.sqlalchemy.org/trac/ticket/2603)'
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2603](https://www.sqlalchemy.org/trac/ticket/2603)
- en: '**[sql] [bug]**'
  id: totrans-2540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the “.key” of a Column wasn’t being used when producing a
    “proxy” of the column against a selectable. This probably didn’t occur in 0.7
    since 0.7 doesn’t respect the “.key” in a wider range of scenarios.
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在生成可选择的列的“代理”时未使用Column的“.key”。在0.7版本中可能不会发生这种情况，因为0.7版本在更广泛的情况下不会尊重“.key”。
- en: 'References: [#2597](https://www.sqlalchemy.org/trac/ticket/2597)'
  id: totrans-2542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2597](https://www.sqlalchemy.org/trac/ticket/2597)
- en: postgresql
  id: totrans-2543
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: '[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") is now available in the PostgreSQL dialect.
    Will also use psycopg2’s extensions if available. Courtesy Audrius Kažukauskas.'
  id: totrans-2545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")现在在PostgreSQL方言中可用。如果可用，还将使用psycopg2的扩展。感谢Audrius
    Kažukauskas。'
- en: 'References: [#2606](https://www.sqlalchemy.org/trac/ticket/2606)'
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2606](https://www.sqlalchemy.org/trac/ticket/2606)
- en: sqlite
  id: totrans-2547
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: More adjustment to this SQLite related issue which was released in 0.7.9, to
    intercept legacy SQLite quoting characters when reflecting foreign keys. In addition
    to intercepting double quotes, other quoting characters such as brackets, backticks,
    and single quotes are now also intercepted.
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对此与SQLite相关的问题进行了更多调整，该问题在0.7.9中发布，以拦截反射外键时的遗留SQLite引号字符。除了拦截双引号之外，还拦截其他引号字符，例如方括号、反引号和单引号。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**至：0.7.10
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: mssql
  id: totrans-2552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Support for reflection of the “name” of primary key constraints added, courtesy
    Dave Moore.
  id: totrans-2554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对主键约束“name”的反射支持，感谢Dave Moore。
- en: 'References: [#2600](https://www.sqlalchemy.org/trac/ticket/2600)'
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2600](https://www.sqlalchemy.org/trac/ticket/2600)
- en: '**[mssql] [bug]**'
  id: totrans-2556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed bug whereby using “key” with Column in conjunction with “schema” for the
    owning Table would fail to locate result rows due to the MSSQL dialect’s “schema
    rendering” logic’s failure to take .key into account.
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用Column的“key”与拥有表的“schema”结合使用时，由于MSSQL方言的“schema渲染”逻辑未考虑.key而导致无法定位结果行的错误。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.7.10
- en: oracle
  id: totrans-2559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed table reflection for Oracle when accessing a synonym that refers to a
    DBLINK remote database; while the syntax has been present in the Oracle dialect
    for some time, up until now it has never been tested. The syntax has been tested
    against a sample database linking to itself, however there’s still some uncertainty
    as to what should be used for the “owner” when querying the remote database for
    table information. Currently, the value of “username” from user_db_links is used
    to match the “owner”.
  id: totrans-2561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在访问引用到DBLINK远程数据库的同义词时，Oracle的表反射问题；虽然Oracle方言中的语法已经存在一段时间，但直到现在才进行了测试。该语法已经针对链接到自身的示例数据库进行了测试，但在查询远程数据库的表信息时，仍存在一些不确定性。目前，从user_db_links中使用的“username”值用于匹配“owner”。
- en: 'References: [#2619](https://www.sqlalchemy.org/trac/ticket/2619)'
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2619](https://www.sqlalchemy.org/trac/ticket/2619)
- en: '**[oracle] [bug]**'
  id: totrans-2563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The Oracle LONG type, while an unbounded text type, does not appear to use the
    cx_Oracle.LOB type when result rows are returned, so the dialect has been repaired
    to exclude LONG from having cx_Oracle.LOB filtering applied. Also in 0.7.10.
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle的LONG类型，虽然是一个无界文本类型，但在返回结果行时似乎不使用cx_Oracle.LOB类型，因此方言已被修复，排除了对LONG应用cx_Oracle.LOB过滤。同样适用于0.7.10。
- en: 'References: [#2620](https://www.sqlalchemy.org/trac/ticket/2620)'
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2620](https://www.sqlalchemy.org/trac/ticket/2620)
- en: '**[oracle] [bug]**'
  id: totrans-2566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Repaired the usage of `.prepare()` in conjunction with cx_Oracle so that a return
    value of `False` will result in no call to `connection.commit()`, hence avoiding
    “no transaction” errors. Two-phase transactions have now been shown to work in
    a rudimental fashion with SQLAlchemy and cx_oracle, however are subject to caveats
    observed with the driver; check the documentation for details. Also in 0.7.10.
  id: totrans-2567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与cx_Oracle一起使用`.prepare()`时，如果返回值为`False`，则不会调用`connection.commit()`，从而避免“无事务”错误。已经展示了在SQLAlchemy和cx_oracle中以基本方式工作的两阶段事务，但受到驱动程序观察到的注意事项的影响；请查看文档获取详细信息。同样适用于0.7.10。
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: misc
  id: totrans-2569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [sybase]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [sybase]**'
- en: Reflection support has been added to the Sybase dialect. Big thanks to Ben Trofatter
    for all the work developing and testing this.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已为Sybase方言添加了反射支持。非常感谢Ben Trofatter为开发和测试所做的所有工作。
- en: 'References: [#1753](https://www.sqlalchemy.org/trac/ticket/1753)'
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1753](https://www.sqlalchemy.org/trac/ticket/1753)
- en: '**[feature] [pool]**'
  id: totrans-2573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: The [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    will now log all connection.close() operations equally, including closes which
    occur for invalidated connections, detached connections, and connections beyond
    the pool capacity.
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")现在将记录所有connection.close()操作，包括对无效连接、分离连接和超出池容量的连接的关闭。'
- en: '**[feature] [pool]**'
  id: totrans-2575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: The [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    now consults the [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") for functionality regarding how the connection should
    be “auto rolled back”, as well as closed. This grants more control of transaction
    scope to the dialect, so that we will be better able to implement transactional
    workarounds like those potentially needed for pysqlite and cx_oracle.
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")现在咨询[`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")有关连接应如何“自动回滚”以及关闭的功能。这使得方言对事务范围有更多控制，因此我们将能够更好地实现对pysqlite和cx_oracle可能需要的事务处理的绕过。'
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: '**[feature] [pool]**'
  id: totrans-2578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [pool]**'
- en: Added new [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook to capture the event before a connection
    is auto-rolled back, upon return to the pool. Together with [`ConnectionEvents.rollback()`](../core/events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") this allows all rollback events
    to be intercepted.
  id: totrans-2579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")钩子，以在连接自动回滚之前捕获事件，返回到池中。与[`ConnectionEvents.rollback()`](../core/events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")一起，这允许拦截所有回滚事件。
- en: '**[bug] [firebird]**'
  id: totrans-2580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Added missing import for “fdb” to the experimental “firebird+fdb” dialect.
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为实验性的“firebird+fdb”方言添加了“fdb”的缺失导入。
- en: 'References: [#2622](https://www.sqlalchemy.org/trac/ticket/2622)'
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2622](https://www.sqlalchemy.org/trac/ticket/2622)
- en: '**[informix]**'
  id: totrans-2583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Some cruft regarding informix transaction handling has been removed, including
    a feature that would skip calling commit()/rollback() as well as some hardcoded
    isolation level assumptions on begin().. The status of this dialect is not well
    understood as we don’t have any users working with it, nor any access to an Informix
    database. If someone with access to Informix wants to help test this dialect,
    please let us know.
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了有关Informix事务处理的一些杂项，包括一个会跳过调用commit()/rollback()的功能，以及在begin()中的一些硬编码隔离级别假设。由于我们没有任何用户使用它，也没有访问Informix数据库的权限，因此对这个方言的状态了解不多。如果有人能够访问Informix并愿意帮助测试这个方言，请告诉我们。
- en: orm
  id: totrans-2585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added `KeyedTuple._asdict()` and `KeyedTuple._fields` to the `KeyedTuple` class
    to provide some degree of compatibility with the Python standard library `collections.namedtuple()`.
  id: totrans-2587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`KeyedTuple._asdict()`和`KeyedTuple._fields`到`KeyedTuple`类，以提供与Python标准库`collections.namedtuple()`一定程度的兼容性。
- en: 'References: [#2601](https://www.sqlalchemy.org/trac/ticket/2601)'
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2601](https://www.sqlalchemy.org/trac/ticket/2601)
- en: '**[orm] [feature]**'
  id: totrans-2589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Allow synonyms to be used when defining primary and secondary joins for relationships.
  id: totrans-2590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许在定义关系的主要和次要连接时使用同义词。
- en: '**[orm] [bug]**'
  id: totrans-2591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: 'The [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method can now be used with a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct without it interfering with the entities being
    selected. Basically, a statement like this:'
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造来与[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法一起使用，而不会干扰被选择的实体。基本上，像这样的语句：
- en: '[PRE15]'
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Will maintain the columns clause of the SELECT as coming from the unaliased
    “user”, as specified; the select_from only takes place in the FROM clause:'
  id: totrans-2594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将保留SELECT的列子句作为来自未别名化的“user”，如指定的；select_from仅在FROM子句中发生：
- en: '[PRE16]'
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that this behavior is in contrast to the original, older use case for
    [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from"), which is that of restating the mapped entity
    in terms of a different selectable:'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这种行为与[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")的原始、较旧的用例形成对比，即在不同的可选择性方面重新表述映射实体：
- en: '[PRE17]'
  id: totrans-2597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Which produces:'
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生：
- en: '[PRE18]'
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It was the “aliasing” behavior of the latter use case that was getting in the
    way of the former use case. The method now specifically considers a SQL expression
    like [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    or [`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias "sqlalchemy.sql.expression.alias")
    separately from a mapped entity like a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 后一种用例的“别名”行为妨碍了前一种用例。该方法现在明确将类似[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")或[`alias()`](../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")的SQL表达式与像[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造一样的映射实体分开考虑。
- en: 'References: [#2635](https://www.sqlalchemy.org/trac/ticket/2635)'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2635](https://www.sqlalchemy.org/trac/ticket/2635)
- en: '**[orm] [bug]**'
  id: totrans-2602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") type did not allow for the [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") method to be used, even though the
    code seemed to indicate this intent, so this now works and a brief example is
    added. As a side-effect, the mechanics of this event handler have been changed
    so that new [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") types no longer add per-type global
    event handlers. Also in 0.7.10.
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不允许使用 [`MutableBase.coerce()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableBase.coerce
    "sqlalchemy.ext.mutable.MutableBase.coerce") 方法，尽管代码似乎表明了这一意图，所以现在可以使用，并添加了一个简短示例。作为副作用，此事件处理程序的机制已更改，以便新的
    [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 类型不再添加每种类型的全局事件处理程序。也在 0.7.10 版本中。'
- en: 'References: [#2624](https://www.sqlalchemy.org/trac/ticket/2624)'
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2624](https://www.sqlalchemy.org/trac/ticket/2624)
- en: '**[orm] [bug]**'
  id: totrans-2605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A second overhaul of aliasing/internal pathing mechanics now allows two subclasses
    to have different relationships of the same name, supported with subquery or joined
    eager loading on both simultaneously when a full polymorphic load is used.
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二次对别名/内部路径机制进行改进，现在允许两个子类具有相同名称的不同关系，在同时使用子查询或连接式加载时支持全多态加载时。当使用全多态加载时，同时在两个子类上使用子查询或连接式加载时支持全多态加载。
- en: 'References: [#2614](https://www.sqlalchemy.org/trac/ticket/2614)'
  id: totrans-2607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2614](https://www.sqlalchemy.org/trac/ticket/2614)
- en: '**[orm] [bug]**'
  id: totrans-2608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby a multi-hop subqueryload within a particular with_polymorphic
    load would produce a KeyError. Takes advantage of the same internal pathing overhaul
    as [#2614](https://www.sqlalchemy.org/trac/ticket/2614).
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在特定的 with_polymorphic 加载中多跳子查询加载会产生 KeyError 的错误。利用了与 [#2614](https://www.sqlalchemy.org/trac/ticket/2614)
    相同的内部路径改进。
- en: 'References: [#2617](https://www.sqlalchemy.org/trac/ticket/2617)'
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2617](https://www.sqlalchemy.org/trac/ticket/2617)
- en: '**[orm] [bug]**'
  id: totrans-2611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where query.update() would produce an error if an object matched
    by the “fetch” synchronization strategy wasn’t locally present. Courtesy Scott
    Torborg.
  id: totrans-2612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了查询.update()在“fetch”同步策略匹配的对象不在本地时会产生错误的回归。感谢 Scott Torborg。
- en: 'References: [#2602](https://www.sqlalchemy.org/trac/ticket/2602)'
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2602](https://www.sqlalchemy.org/trac/ticket/2602)
- en: orm extensions
  id: totrans-2614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 扩展
- en: '**[orm] [extensions] [feature]**'
  id: totrans-2615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [extensions] [feature]**'
- en: The [`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") extension now includes the example [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") class as part of the extension.
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.mutable`](../orm/extensions/mutable.html#module-sqlalchemy.ext.mutable
    "sqlalchemy.ext.mutable") 扩展现在包括示例 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 类作为扩展的一部分。'
- en: engine
  id: totrans-2617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'The `Connection.connect()` and `Connection.contextual_connect()` methods now
    return a “branched” version so that the [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method can be called on the returned connection
    without affecting the original. Allows symmetry when using [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as context managers:'
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Connection.connect()` 和 `Connection.contextual_connect()` 方法现在返回一个“分支”版本，以便可以在返回的连接上调用
    [`Connection.close()`](../core/connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") 方法而不影响原始连接。在使用[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象作为上下文管理器时提供对称性：'
- en: '[PRE19]'
  id: totrans-2620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**[engine] [bug]**'
  id: totrans-2621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") to correctly use the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), if given, without opening a second connection
    from that connection’s [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")以正确使用给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，如果给定的话，而不是从该连接的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")中打开第二个连接。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.10
- en: 'References: [#2604](https://www.sqlalchemy.org/trac/ticket/2604)'
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2604](https://www.sqlalchemy.org/trac/ticket/2604)
- en: '**[engine]**'
  id: totrans-2625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: The “reflect=True” argument to [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is deprecated. Please use the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method.
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")的“reflect=True”参数已被弃用。请使用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")方法。
- en: sql
  id: totrans-2627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct now supports multi-valued inserts, that is, an INSERT that renders like
    “INSERT INTO table VALUES (…), (…), …”. Supported by PostgreSQL, SQLite, and MySQL.
    Big thanks to Idan Kamara for doing the legwork on this one.
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造现在支持多值插入，即，一个类似“INSERT
    INTO table VALUES (…), (…), …”的INSERT。由PostgreSQL、SQLite和MySQL支持。非常感谢Idan Kamara在这方面的工作。'
- en: See also
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Multiple-VALUES support for Insert](migration_08.html#feature-2623)'
  id: totrans-2631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[插入的多值支持](migration_08.html#feature-2623)'
- en: 'References: [#2623](https://www.sqlalchemy.org/trac/ticket/2623)'
  id: totrans-2632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2623](https://www.sqlalchemy.org/trac/ticket/2623)
- en: '**[sql] [bug]**'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using server_onupdate=<FetchedValue|DefaultClause> without passing
    the “for_update=True” flag would apply the default object to the server_default,
    blowing away whatever was there. The explicit for_update=True argument shouldn’t
    be needed with this usage (especially since the documentation shows an example
    without it being used) so it is now arranged internally using a copy of the given
    default object, if the flag isn’t set to what corresponds to that argument.
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用server_onupdate=<FetchedValue|DefaultClause>而没有传递“for_update=True”标志的bug，会将默认对象应用于server_default，覆盖原有内容。明确的for_update=True参数在这种用法中不应该是必需的（特别是因为文档显示了一个没有使用它的示例），因此现在在内部使用给定默认对象的副本，如果标志未设置为对应该参数的内容。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.7.10
- en: 'References: [#2631](https://www.sqlalchemy.org/trac/ticket/2631)'
  id: totrans-2636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2631](https://www.sqlalchemy.org/trac/ticket/2631)
- en: '**[sql] [bug]**'
  id: totrans-2637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a regression caused by [#2410](https://www.sqlalchemy.org/trac/ticket/2410)
    whereby a [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") would apply itself back to the original table
    during a [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") operation, as it would parse the SQL expression
    for a parent table. The operation now copies the given expression to correspond
    to the new table.
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2410](https://www.sqlalchemy.org/trac/ticket/2410)引起的回归，其中[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")在[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")操作期间会将自身应用回原始表，因为它会解析父表的SQL表达式。该操作现在将给定的表达式复制以对应新表。
- en: 'References: [#2633](https://www.sqlalchemy.org/trac/ticket/2633)'
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2633](https://www.sqlalchemy.org/trac/ticket/2633)
- en: '**[sql] [bug]**'
  id: totrans-2640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby using a label_length on dialect that was smaller than the
    size of actual column identifiers would fail to render the columns correctly in
    a SELECT statement.
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在dialect上使用label_length小于实际列标识符大小的bug，会导致在SELECT语句中无法正确渲染列。
- en: 'References: [#2610](https://www.sqlalchemy.org/trac/ticket/2610)'
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2610](https://www.sqlalchemy.org/trac/ticket/2610)
- en: '**[sql] [bug]**'
  id: totrans-2643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")
    type now honors the “precision” and “scale” arguments when rendering DDL.
  id: totrans-2644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当渲染DDL时，[`DECIMAL`](../core/type_basics.html#sqlalchemy.types.DECIMAL "sqlalchemy.types.DECIMAL")类型现在遵守“precision”和“scale”参数。
- en: 'References: [#2618](https://www.sqlalchemy.org/trac/ticket/2618)'
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2618](https://www.sqlalchemy.org/trac/ticket/2618)
- en: '**[sql] [bug]**'
  id: totrans-2646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Made an adjustment to the “boolean”, (i.e. `__nonzero__`) evaluation of binary
    expressions, i.e. `x1 == x2`, such that the “auto-grouping” applied by [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") in some cases won’t get in the way
    of this comparison. Previously, an expression like:'
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对二进制表达式（即 `__nonzero__`）的“布尔”评估进行了调整，即 `x1 == x2`，以确保 [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") 在某些情况下的“自动分组”不会干扰此比较。先前，像这样的表达式：
- en: '[PRE20]'
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Would evaluate as `False`, even though this is an identity comparison, because
    `mycolumn > 2` would be “grouped” before being placed into the [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression"), thus changing its identity. [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") now keeps track of the “original”
    objects passed in. Additionally the `__nonzero__` method now only returns if the
    operator is `==` or `!=` - all others raise `TypeError`.
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将被评估为 `False`，即使这是一个恒等比较，因为在被放入 [`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") 之前，`mycolumn > 2` 将被“分组”，从而改变其标识。[`BinaryExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.BinaryExpression
    "sqlalchemy.sql.expression.BinaryExpression") 现在跟踪传入的“原始”对象。此外，`__nonzero__` 方法现在仅在操作符为
    `==` 或 `!=` 时返回 - 所有其他操作符都会引发 `TypeError`。
- en: 'References: [#2621](https://www.sqlalchemy.org/trac/ticket/2621)'
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2621](https://www.sqlalchemy.org/trac/ticket/2621)
- en: '**[sql] [bug]**'
  id: totrans-2651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a gotcha where inadvertently calling list() on a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would go into an endless loop, if [`ColumnOperators.__getitem__()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__getitem__
    "sqlalchemy.sql.expression.ColumnOperators.__getitem__") were implemented. A new
    NotImplementedError is emitted via `__iter__()`.
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即无意中对 [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 调用 list() 会进入无限循环，如果实现了 [`ColumnOperators.__getitem__()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.__getitem__
    "sqlalchemy.sql.expression.ColumnOperators.__getitem__")。现在通过 `__iter__()` 发出一个新的
    NotImplementedError。
- en: '**[sql] [bug]**'
  id: totrans-2653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in type_coerce() whereby typing information could be lost if the statement
    were used as a subquery inside of another statement, as well as other similar
    situations. Among other things, would cause typing information to be lost when
    the Oracle/mssql dialects would apply limit/offset wrappings.
  id: totrans-2654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 type_coerce() 中的错误，其中如果语句被用作另一个语句内部的子查询，以及其他类似情况，则可能会丢失类型信息。在 Oracle/mssql
    方言应用 limit/offset 包装时，会导致类型信息丢失，这是其中之一。
- en: 'References: [#2603](https://www.sqlalchemy.org/trac/ticket/2603)'
  id: totrans-2655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2603](https://www.sqlalchemy.org/trac/ticket/2603)
- en: '**[sql] [bug]**'
  id: totrans-2656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby the “.key” of a Column wasn’t being used when producing a
    “proxy” of the column against a selectable. This probably didn’t occur in 0.7
    since 0.7 doesn’t respect the “.key” in a wider range of scenarios.
  id: totrans-2657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在生成可选择的列的“代理”时，未使用列的“.key”。这可能在 0.7 中没有发生，因为在更广泛的范围内 0.7 不尊重“.key”。
- en: 'References: [#2597](https://www.sqlalchemy.org/trac/ticket/2597)'
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2597](https://www.sqlalchemy.org/trac/ticket/2597)
- en: postgresql
  id: totrans-2659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: '[`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") is now available in the PostgreSQL dialect.
    Will also use psycopg2’s extensions if available. Courtesy Audrius Kažukauskas.'
  id: totrans-2661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言中现在可以使用 [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")。如果可用，还将使用 psycopg2 的扩展。感谢 Audrius Kažukauskas。
- en: 'References: [#2606](https://www.sqlalchemy.org/trac/ticket/2606)'
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2606](https://www.sqlalchemy.org/trac/ticket/2606)
- en: sqlite
  id: totrans-2663
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: More adjustment to this SQLite related issue which was released in 0.7.9, to
    intercept legacy SQLite quoting characters when reflecting foreign keys. In addition
    to intercepting double quotes, other quoting characters such as brackets, backticks,
    and single quotes are now also intercepted.
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这个与 SQLite 相关的问题进行了更多调整，该问题在 0.7.9 中发布，以拦截反射外键时的传统 SQLite 引号字符。除了拦截双引号外，现在还拦截其他引号字符，如方括号、反引号和单引号。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.7.10
- en: 'References: [#2568](https://www.sqlalchemy.org/trac/ticket/2568)'
  id: totrans-2667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2568](https://www.sqlalchemy.org/trac/ticket/2568)
- en: mssql
  id: totrans-2668
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Support for reflection of the “name” of primary key constraints added, courtesy
    Dave Moore.
  id: totrans-2670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对主键约束“name”的反射支持，感谢 Dave Moore。
- en: 'References: [#2600](https://www.sqlalchemy.org/trac/ticket/2600)'
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2600](https://www.sqlalchemy.org/trac/ticket/2600)
- en: '**[mssql] [bug]**'
  id: totrans-2672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed bug whereby using “key” with Column in conjunction with “schema” for the
    owning Table would fail to locate result rows due to the MSSQL dialect’s “schema
    rendering” logic’s failure to take .key into account.
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将“key”与 Column 结合使用时与拥有表的“schema”失败的 bug，原因是 MSSQL 方言的“schema 渲染”逻辑未考虑 .key。
- en: 'This change is also **backported** to: 0.7.10'
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.7.10
- en: oracle
  id: totrans-2675
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed table reflection for Oracle when accessing a synonym that refers to a
    DBLINK remote database; while the syntax has been present in the Oracle dialect
    for some time, up until now it has never been tested. The syntax has been tested
    against a sample database linking to itself, however there’s still some uncertainty
    as to what should be used for the “owner” when querying the remote database for
    table information. Currently, the value of “username” from user_db_links is used
    to match the “owner”.
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在访问引用到 DBLINK 远程数据库的同义词时的 Oracle 表反射问题；虽然该语法在 Oracle 方言中已经存在一段时间，但直到现在还没有进行过测试。该语法已针对连接到自身的样本数据库进行了测试，但是仍然存在一些不确定因素，即在查询远程数据库以获取表信息时应使用什么作为“owner”的值。当前，来自
    user_db_links 的“username” 值用于匹配“owner”。
- en: 'References: [#2619](https://www.sqlalchemy.org/trac/ticket/2619)'
  id: totrans-2678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2619](https://www.sqlalchemy.org/trac/ticket/2619)
- en: '**[oracle] [bug]**'
  id: totrans-2679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The Oracle LONG type, while an unbounded text type, does not appear to use the
    cx_Oracle.LOB type when result rows are returned, so the dialect has been repaired
    to exclude LONG from having cx_Oracle.LOB filtering applied. Also in 0.7.10.
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle LONG 类型，虽然是无界文本类型，但在返回结果行时似乎没有使用 cx_Oracle.LOB 类型，因此修复了该方言以排除 LONG 从应用
    cx_Oracle.LOB 过滤。同样适用于 0.7.10。
- en: 'References: [#2620](https://www.sqlalchemy.org/trac/ticket/2620)'
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2620](https://www.sqlalchemy.org/trac/ticket/2620)
- en: '**[oracle] [bug]**'
  id: totrans-2682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Repaired the usage of `.prepare()` in conjunction with cx_Oracle so that a return
    value of `False` will result in no call to `connection.commit()`, hence avoiding
    “no transaction” errors. Two-phase transactions have now been shown to work in
    a rudimental fashion with SQLAlchemy and cx_oracle, however are subject to caveats
    observed with the driver; check the documentation for details. Also in 0.7.10.
  id: totrans-2683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 cx_Oracle 结合使用 `.prepare()` 的用法，因此返回值为 `False` 将导致不调用 `connection.commit()`，从而避免“无事务”错误。已经证明
    SQLAlchemy 和 cx_oracle 可以以一种基本方式使用两阶段事务，但是受到驱动程序观察到的警告的影响；有关详细信息，请参阅文档。同样适用于 0.7.10。
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: misc
  id: totrans-2685
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [sybase]**'
  id: totrans-2686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [sybase]**'
- en: Reflection support has been added to the Sybase dialect. Big thanks to Ben Trofatter
    for all the work developing and testing this.
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已向 Sybase 方言添加了反射支持。非常感谢 Ben Trofatter 在开发和测试中所做的所有工作。
- en: 'References: [#1753](https://www.sqlalchemy.org/trac/ticket/1753)'
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1753](https://www.sqlalchemy.org/trac/ticket/1753)
- en: '**[feature] [pool]**'
  id: totrans-2689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: The [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    will now log all connection.close() operations equally, including closes which
    occur for invalidated connections, detached connections, and connections beyond
    the pool capacity.
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    现在将平等记录所有连接关闭（`connection.close()`）操作，包括对失效连接、脱离连接和超出池容量的连接的关闭。'
- en: '**[feature] [pool]**'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: The [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    now consults the [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") for functionality regarding how the connection should
    be “auto rolled back”, as well as closed. This grants more control of transaction
    scope to the dialect, so that we will be better able to implement transactional
    workarounds like those potentially needed for pysqlite and cx_oracle.
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    现在会咨询 [`Dialect`](../core/internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    关于连接应该如何“自动回滚”以及关闭的功能。这使得方言更加掌控事务范围，因此我们将更好地能够实现对 pysqlite 和 cx_oracle 等可能需要的事务性回避的控制。'
- en: 'References: [#2611](https://www.sqlalchemy.org/trac/ticket/2611)'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2611](https://www.sqlalchemy.org/trac/ticket/2611)
- en: '**[feature] [pool]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: Added new [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook to capture the event before a connection
    is auto-rolled back, upon return to the pool. Together with [`ConnectionEvents.rollback()`](../core/events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback") this allows all rollback events
    to be intercepted.
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")钩子，用于在连接自动回滚之前捕获事件，返回到池中。与[`ConnectionEvents.rollback()`](../core/events.html#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")一起，这允许拦截所有回滚事件。
- en: '**[bug] [firebird]**'
  id: totrans-2696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Added missing import for “fdb” to the experimental “firebird+fdb” dialect.
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为实验性的“firebird+fdb”方言添加了“fdb”的缺失导入。
- en: 'References: [#2622](https://www.sqlalchemy.org/trac/ticket/2622)'
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2622](https://www.sqlalchemy.org/trac/ticket/2622)
- en: '**[informix]**'
  id: totrans-2699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: Some cruft regarding informix transaction handling has been removed, including
    a feature that would skip calling commit()/rollback() as well as some hardcoded
    isolation level assumptions on begin().. The status of this dialect is not well
    understood as we don’t have any users working with it, nor any access to an Informix
    database. If someone with access to Informix wants to help test this dialect,
    please let us know.
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除有关informix事务处理的一些不必要内容，包括一个跳过调用commit()/rollback()以及在begin()上的一些硬编码隔离级别假设的功能。由于我们没有任何用户使用它，也没有访问Informix数据库的权限，因此对这种方言的状态了解不多。如果有人有权访问Informix并愿意帮助测试这种方言，请告诉我们。
- en: 0.8.0b1
  id: totrans-2701
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.8.0b1
- en: 'Released: October 30, 2012'
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2012年10月30日
- en: general
  id: totrans-2703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [removed]**'
  id: totrans-2704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [已移除]**'
- en: The “sqlalchemy.exceptions” synonym for “sqlalchemy.exc” is removed fully.
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “sqlalchemy.exceptions”作为“sqlalchemy.exc”的同义词已完全移除。
- en: 'References: [#2433](https://www.sqlalchemy.org/trac/ticket/2433)'
  id: totrans-2706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2433](https://www.sqlalchemy.org/trac/ticket/2433)
- en: '**[general]**'
  id: totrans-2707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: SQLAlchemy 0.8 now targets Python 2.5 and above. Python 2.4 is no longer supported.
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 0.8现在支持Python 2.5及以上版本。不再支持Python 2.4。
- en: orm
  id: totrans-2709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Major rewrite of relationship() internals now allow join conditions which include
    columns pointing to themselves within composite foreign keys. A new API for very
    specialized primaryjoin conditions is added, allowing conditions based on SQL
    functions, CAST, etc. to be handled by placing the annotation functions remote()
    and foreign() inline within the expression when necessary. Previous recipes using
    the semi-private _local_remote_pairs approach can be upgraded to this new approach.
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: relationship()内部的重大重写现在允许包含指向自身的列在复合外键中的连接条件。添加了一个新的API，用于非常专业的primaryjoin条件，允许基于SQL函数、CAST等的条件通过在表达式中必要时内联放置注释函数remote()和foreign()来处理。以前使用半私有的_local_remote_pairs方法的配方可以升级到这种新方法。
- en: See also
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Rewritten _orm.relationship() mechanics](migration_08.html#feature-relationship-08)'
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重写的_orm.relationship()机制](migration_08.html#feature-relationship-08)'
- en: 'References: [#1401](https://www.sqlalchemy.org/trac/ticket/1401)'
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1401](https://www.sqlalchemy.org/trac/ticket/1401)
- en: '**[orm] [feature]**'
  id: totrans-2715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: New standalone function with_polymorphic() provides the functionality of query.with_polymorphic()
    in a standalone form. It can be applied to any entity within a query, including
    as the target of a join in place of the “of_type()” modifier.
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的独立函数with_polymorphic()提供了query.with_polymorphic()的功能，以独立形式提供。它可以应用于查询中的任何实体，包括作为“of_type()”修饰符的连接目标。
- en: 'References: [#2333](https://www.sqlalchemy.org/trac/ticket/2333)'
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2333](https://www.sqlalchemy.org/trac/ticket/2333)
- en: '**[orm] [feature]**'
  id: totrans-2718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The of_type() construct on attributes now accepts aliased() class constructs
    as well as with_polymorphic constructs, and works with query.join(), any(), has(),
    and also eager loaders subqueryload(), joinedload(), contains_eager()
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在属性上的of_type()构造接受别名为aliased()的类构造以及with_polymorphic构造，并且与query.join()、any()、has()以及eager
    loaders subqueryload()、joinedload()、contains_eager()一起工作。
- en: 'References: [#1106](https://www.sqlalchemy.org/trac/ticket/1106), [#2438](https://www.sqlalchemy.org/trac/ticket/2438)'
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1106](https://www.sqlalchemy.org/trac/ticket/1106)，[#2438](https://www.sqlalchemy.org/trac/ticket/2438)
- en: '**[orm] [feature]**'
  id: totrans-2721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Improvements to event listening for mapped classes allows that unmapped classes
    can be specified for instance- and mapper-events. The established events will
    be automatically set up on subclasses of that class when the propagate=True flag
    is passed, and the events will be set up for that class itself if and when it
    is ultimately mapped.
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对映射类的事件监听进行了改进，允许指定未映射类用于实例和映射器事件。当传递propagate=True标志时，已建立的事件将自动设置在该类的子类上，并且在最终映射时将为该类本身设置事件。
- en: 'References: [#2585](https://www.sqlalchemy.org/trac/ticket/2585)'
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2585](https://www.sqlalchemy.org/trac/ticket/2585)
- en: '**[orm] [feature]**'
  id: totrans-2724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “deferred declarative reflection” system has been moved into the declarative
    extension itself, using the new DeferredReflection class. This class is now tested
    with both single and joined table inheritance use cases.
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “延迟声明反射”系统已经移入声明式扩展本身，使用新的DeferredReflection类。该类现在已经针对单表和联合表继承用例进行了测试。
- en: 'References: [#2485](https://www.sqlalchemy.org/trac/ticket/2485)'
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2485](https://www.sqlalchemy.org/trac/ticket/2485)
- en: '**[orm] [feature]**'
  id: totrans-2727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new core function “inspect()”, which serves as a generic gateway to introspection
    into mappers, objects, others. The Mapper and InstanceState objects have been
    enhanced with a public API that allows inspection of mapped attributes, including
    filters for column-bound or relationship-bound properties, inspection of current
    object state, history of attributes, etc.
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的核心功能“inspect()”，它作为对映射器、对象等进行内省的通用入口。映射器和InstanceState对象已经增强了公共API，允许检查映射属性，包括针对列绑定或关系绑定属性的过滤器，检查当前对象状态，属性历史记录等。
- en: 'References: [#2208](https://www.sqlalchemy.org/trac/ticket/2208)'
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2208](https://www.sqlalchemy.org/trac/ticket/2208)
- en: '**[orm] [feature]**'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Calling rollback() within a session.begin_nested() will now only expire those
    objects that had net changes within the scope of that transaction, that is objects
    which were dirty or were modified on a flush. This allows the typical use case
    for begin_nested(), that of altering a small subset of objects, to leave in place
    the data from the larger enclosing set of objects that weren’t modified in that
    sub-transaction.
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在session.begin_nested()中调用rollback()现在只会使那些在该事务范围内具有净变化的对象过期，即在刷新时被修改或被修改的对象。这允许begin_nested()的典型用例，即修改一小部分对象，保留未在子事务中修改的更大范围对象的数据。
- en: 'References: [#2452](https://www.sqlalchemy.org/trac/ticket/2452)'
  id: totrans-2732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2452](https://www.sqlalchemy.org/trac/ticket/2452)
- en: '**[orm] [feature]**'
  id: totrans-2733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added utility feature Session.enable_relationship_loading(), supersedes relationship.load_on_pending.
    Both features should be avoided, however.
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了实用功能Session.enable_relationship_loading()，取代了relationship.load_on_pending。然而，应该避免使用这两个功能。
- en: 'References: [#2372](https://www.sqlalchemy.org/trac/ticket/2372)'
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2372](https://www.sqlalchemy.org/trac/ticket/2372)
- en: '**[orm] [feature]**'
  id: totrans-2736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added support for .info dictionary argument to column_property(), relationship(),
    composite(). All MapperProperty classes have an auto-creating .info dict available
    overall.
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对.column_property()、relationship()、composite()的.info字典参数的支持。所有MapperProperty类都具有可用的自动创建的.info字典。
- en: '**[orm] [feature]**'
  id: totrans-2738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Adding/removing None from a mapped collection now generates attribute events.
    Previously, a None append would be ignored in some cases. Related to.
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从映射集合中添加/移除None现在会生成属性事件。以前，在某些情况下，会忽略None的追加。相关。
- en: 'References: [#2229](https://www.sqlalchemy.org/trac/ticket/2229)'
  id: totrans-2740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2229](https://www.sqlalchemy.org/trac/ticket/2229)
- en: '**[orm] [feature]**'
  id: totrans-2741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The presence of None in a mapped collection now raises an error during flush.
    Previously, None values in collections would be silently ignored.
  id: totrans-2742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射集合中存在None现在在刷新时会引发错误。以前，集合中的None值会被静默忽略。
- en: 'References: [#2229](https://www.sqlalchemy.org/trac/ticket/2229)'
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2229](https://www.sqlalchemy.org/trac/ticket/2229)
- en: '**[orm] [feature]**'
  id: totrans-2744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Query.update() method is now more lenient as to the table being updated.
    Plain Table objects are better supported now, and additional a joined-inheritance
    subclass may be used with update(); the subclass table will be the target of the
    update, and if the parent table is referenced in the WHERE clause, the compiler
    will call upon UPDATE..FROM syntax as allowed by the dialect to satisfy the WHERE
    clause. MySQL’s multi-table update feature is also supported if columns are specified
    by object in the “values” dictionary. PG’s DELETE..USING is also not available
    in Core yet.
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.update()方法现在对被更新的表更加宽松。现在更好地支持普通的Table对象，并且可以使用附加的继承子类进行update(); 子类表将成为更新的目标，如果父表在WHERE子句中被引用，编译器将调用UPDATE..FROM语法，以满足WHERE子句。如果在“values”字典中通过对象指定列，还支持MySQL的多表更新功能。PG的DELETE..USING在Core中还不可用。
- en: '**[orm] [feature]**'
  id: totrans-2746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: New session events after_transaction_create and after_transaction_end allows
    tracking of new SessionTransaction objects. If the object is inspected, can be
    used to determine when a session first becomes active and when it deactivates.
  id: totrans-2747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的session事件after_transaction_create和after_transaction_end允许跟踪新的SessionTransaction对象。如果检查了对象，可以用于确定会话何时首次激活和何时停用。
- en: '**[orm] [feature]**'
  id: totrans-2748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Query can now load entity/scalar-mixed “tuple” rows that contain types which
    aren’t hashable, by setting the flag “hashable=False” on the corresponding TypeEngine
    object in use. Custom types that return unhashable types (typically lists) can
    set this flag to False.
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query现在可以加载包含不可哈希类型的实体/标量混合“元组”行，方法是在使用的相应TypeEngine对象上设置“hashable=False”标志。返回不可哈希类型（通常是列表）的自定义类型可以将此标志设置为False。
- en: 'References: [#2592](https://www.sqlalchemy.org/trac/ticket/2592)'
  id: totrans-2750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2592](https://www.sqlalchemy.org/trac/ticket/2592)
- en: '**[orm] [feature]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Query now “auto correlates” by default in the same way as select() does. Previously,
    a Query used as a subquery in another would require the correlate() method be
    called explicitly in order to correlate a table on the inside to the outside.
    As always, correlate(None) disables correlation.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Query默认情况下会“自动关联”，与select()相同。以前，在另一个查询中使用的Query需要显式调用correlate()方法，以便将内部的表与外部关联起来。如常，correlate(None)会禁用关联。
- en: 'References: [#2179](https://www.sqlalchemy.org/trac/ticket/2179)'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2179](https://www.sqlalchemy.org/trac/ticket/2179)
- en: '**[orm] [feature]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The after_attach event is now emitted after the object is established in Session.new
    or Session.identity_map upon Session.add(), Session.merge(), etc., so that the
    object is represented in these collections when the event is called. Added before_attach
    event to accommodate use cases that need autoflush w pre-attached object.
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Session.add()、Session.merge()等操作后，现在会触发after_attach事件，以确保对象在Session.new或Session.identity_map中建立后，当调用事件时，对象会在这些集合中表示。添加了before_attach事件以适应需要使用预附加对象的用例。
- en: 'References: [#2464](https://www.sqlalchemy.org/trac/ticket/2464)'
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2464](https://www.sqlalchemy.org/trac/ticket/2464)
- en: '**[orm] [feature]**'
  id: totrans-2757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Session will produce warnings when unsupported methods are used inside the
    “execute” portion of the flush. These are the familiar methods add(), delete(),
    etc. as well as collection and related-object manipulations, as called within
    mapper-level flush events like after_insert(), after_update(), etc. It’s been
    prominently documented for a long time that SQLAlchemy cannot guarantee results
    when the Session is manipulated within the execution of the flush plan, however
    users are still doing it, so now there’s a warning. Maybe someday the Session
    will be enhanced to support these operations inside of the flush, but for now,
    results can’t be guaranteed.
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在flush的“execute”部分中使用不受支持的方法时，Session将产生警告。这些熟悉的方法包括add()、delete()等，以及在mapper级别flush事件中调用的集合和相关对象操作，如after_insert()、after_update()等。长期以来，明确记录了当Session在执行flush计划时被操纵时，SQLAlchemy无法保证结果，但用户仍在这样做，所以现在有了警告。也许将来Session会增强以支持在flush内部执行这些操作，但目前无法保证结果。
- en: '**[orm] [feature]**'
  id: totrans-2759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: ORM entities can be passed to the core select() construct as well as to the
    select_from(), correlate(), and correlate_except() methods of select(), where
    they will be unwrapped into selectables.
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM实体可以传递给核心select()构造，以及传递给select()的select_from()、correlate()和correlate_except()方法，它们将被解包为可选择的。
- en: 'References: [#2245](https://www.sqlalchemy.org/trac/ticket/2245)'
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2245](https://www.sqlalchemy.org/trac/ticket/2245)
- en: '**[orm] [feature]**'
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Some support for auto-rendering of a relationship join condition based on the
    mapped attribute, with usage of core SQL constructs. E.g. select([SomeClass]).where(SomeClass.somerelationship)
    would render SELECT from “someclass” and use the primaryjoin of “somerelationship”
    as the WHERE clause. This changes the previous meaning of “SomeClass.somerelationship”
    when used in a core SQL context; previously, it would “resolve” to the parent
    selectable, which wasn’t generally useful. Also works with query.filter(). Related
    to.
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为基于映射属性的关系连接条件提供自动渲染支持，使用核心 SQL 构造。例如，select([SomeClass]).where(SomeClass.somerelationship)
    将渲染出从“someclass”选择，并使用“somerelationship”的主连接作为 WHERE 子句。这改变了在核心 SQL 上下文中使用“SomeClass.somerelationship”的先前含义；以前，它会“解析”为父可选择项，这通常不太有用。也适用于
    query.filter()。相关内容。
- en: 'References: [#2245](https://www.sqlalchemy.org/trac/ticket/2245)'
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2245](https://www.sqlalchemy.org/trac/ticket/2245)
- en: '**[orm] [feature]**'
  id: totrans-2765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The registry of classes in declarative_base() is now a WeakValueDictionary.
    So subclasses of “Base” that are dereferenced will be garbage collected, *if they
    are not referred to by any other mappers/superclass mappers*. See the next note
    for this ticket.
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 declarative_base() 中的类注册现在是 WeakValueDictionary。因此，“Base”的子类如果没有被任何其他映射器/超类映射器引用，将被垃圾回收。请查看此票证的下一个注释。
- en: 'References: [#2526](https://www.sqlalchemy.org/trac/ticket/2526)'
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2526](https://www.sqlalchemy.org/trac/ticket/2526)
- en: '**[orm] [feature]**'
  id: totrans-2768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Conflicts between columns on single-inheritance declarative subclasses, with
    or without using a mixin, can be resolved using a new @declared_attr usage described
    in the documentation.
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用文档中描述的新的 @declared_attr 用法解决单继承声明子类之间的列冲突，无论是否使用混合类。
- en: 'References: [#2472](https://www.sqlalchemy.org/trac/ticket/2472)'
  id: totrans-2770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2472](https://www.sqlalchemy.org/trac/ticket/2472)
- en: '**[orm] [feature]**'
  id: totrans-2771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: declared_attr can now be used on non-mixin classes, even though this is generally
    only useful for single-inheritance subclass column conflict resolution.
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declared_attr 现在可以用于非混合类，尽管这通常只对单继承子类列冲突解决有用。
- en: 'References: [#2472](https://www.sqlalchemy.org/trac/ticket/2472)'
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2472](https://www.sqlalchemy.org/trac/ticket/2472)
- en: '**[orm] [feature]**'
  id: totrans-2774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: declared_attr can now be used with attributes that are not Column or MapperProperty;
    including any user-defined value as well as association proxy objects.
  id: totrans-2775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declared_attr 现在可以用于不是 Column 或 MapperProperty 的属性；包括任何用户定义的值以及关联代理对象。
- en: 'References: [#2517](https://www.sqlalchemy.org/trac/ticket/2517)'
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2517](https://www.sqlalchemy.org/trac/ticket/2517)
- en: '**[orm] [feature]**'
  id: totrans-2777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: '*Very limited* support for inheriting mappers to be GC’ed when the class itself
    is deferenced. The mapper must not have its own table (i.e. single table inh only)
    without polymorphic attributes in place. This allows for the use case of creating
    a temporary subclass of a declarative mapped class, with no table or mapping directives
    of its own, to be garbage collected when dereferenced by a unit test.'
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*非常有限*的支持，当类本身被解除引用时，继承映射器可以被垃圾回收。映射器不能有自己的表（即仅支持单表继承），没有放置多态属性。这允许用例创建一个临时的声明映射类的子类，在被单元测试解除引用时可以被垃圾回收。'
- en: 'References: [#2526](https://www.sqlalchemy.org/trac/ticket/2526)'
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2526](https://www.sqlalchemy.org/trac/ticket/2526)
- en: '**[orm] [feature]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Declarative now maintains a registry of classes by string name as well as by
    full module-qualified name. Multiple classes with the same name can now be looked
    up based on a module-qualified string within relationship(). Simple class name
    lookups where more than one class shares the same name now raises an informative
    error message.
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 现在通过字符串名称和完整模块限定名称维护类的注册表。现在可以基于关系() 中的模块限定字符串查找具有相同名称的多个类。当多个类共享相同名称时，简单类名查找现在会引发信息性错误消息。
- en: 'References: [#2338](https://www.sqlalchemy.org/trac/ticket/2338)'
  id: totrans-2782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2338](https://www.sqlalchemy.org/trac/ticket/2338)
- en: '**[orm] [feature]**'
  id: totrans-2783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Can now provide class-bound attributes that override columns which are of any
    non-ORM type, not just descriptors.
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以提供类绑定属性，覆盖任何非 ORM 类型的列，而不仅仅是描述符。
- en: 'References: [#2535](https://www.sqlalchemy.org/trac/ticket/2535)'
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2535](https://www.sqlalchemy.org/trac/ticket/2535)
- en: '**[orm] [feature]**'
  id: totrans-2786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added with_labels and reduce_columns keyword arguments to Query.subquery(),
    to provide two alternate strategies for producing queries with uniquely- named
    columns. .
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Query.subquery() 中添加了 with_labels 和 reduce_columns 关键字参数，提供两种生成具有唯一命名列的查询的替代策略。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-2788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[orm] [feature]**'
  id: totrans-2789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A warning is emitted when a reference to an instrumented collection is no longer
    associated with the parent class due to expiration/attribute refresh/collection
    replacement, but an append or remove operation is received on the now-detached
    collection.
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对一个仪器化集合的引用由于过期/属性刷新/集合替换而不再与父类关联，但现在分离的集合接收到附加或移除操作时，会发出警告。
- en: 'References: [#2476](https://www.sqlalchemy.org/trac/ticket/2476)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2476](https://www.sqlalchemy.org/trac/ticket/2476)
- en: '**[orm] [bug]**'
  id: totrans-2792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM will perform extra effort to determine that an FK dependency between two
    tables is not significant during flush if the tables are related via joined inheritance
    and the FK dependency is not part of the inherit_condition, saves the user a use_alter
    directive.
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在刷新时，如果两个表之间存在外键依赖关系，并且这些表通过连接继承相关联，并且外键依赖关系不是 inherit_condition 的一部分，则 ORM
    将进行额外的努力来确定这种依赖关系不重要，从而为用户节省了 use_alter 指令。
- en: 'References: [#2527](https://www.sqlalchemy.org/trac/ticket/2527)'
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2527](https://www.sqlalchemy.org/trac/ticket/2527)
- en: '**[orm] [bug]**'
  id: totrans-2795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The instrumentation events class_instrument(), class_uninstrument(), and attribute_instrument()
    will now fire off only for descendant classes of the class assigned to listen().
    Previously, an event listener would be assigned to listen for all classes in all
    cases regardless of the “target” argument passed.
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，仅对 listen() 分配的类的后代类触发 instrumentation 事件 class_instrument()、class_uninstrument()
    和 attribute_instrument()。以前，无论传递了什么“目标”参数，事件侦听器都会被分配为在所有情况下监听所有类。
- en: 'References: [#2590](https://www.sqlalchemy.org/trac/ticket/2590)'
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2590](https://www.sqlalchemy.org/trac/ticket/2590)
- en: '**[orm] [bug]**'
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: with_polymorphic() produces JOINs in the correct order and with correct inheriting
    tables in the case of sending multi-level subclasses in an arbitrary order or
    with intermediary classes missing.
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将多级子类以任意顺序或中间类缺失的情况下发送给 with_polymorphic() 时，会按正确顺序生成 JOIN，并在正确的继承表中生成 JOIN。
- en: 'References: [#1900](https://www.sqlalchemy.org/trac/ticket/1900)'
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1900](https://www.sqlalchemy.org/trac/ticket/1900)
- en: '**[orm] [bug]**'
  id: totrans-2801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improvements to joined/subquery eager loading dealing with chains of subclass
    entities sharing a common base, with no specific “join depth” provided. Will chain
    out to each subclass mapper individually before detecting a “cycle”, rather than
    considering the base class to be the source of the “cycle”.
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对共享共同基类的子类实体链进行了改进，处理连接/子查询的急切加载，没有提供特定的“连接深度”。在检测到“循环”之前，将单独链出每个子类映射器，而不是将基类视为“循环”的源。
- en: 'References: [#2481](https://www.sqlalchemy.org/trac/ticket/2481)'
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2481](https://www.sqlalchemy.org/trac/ticket/2481)
- en: '**[orm] [bug]**'
  id: totrans-2804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “passive” flag on Session.is_modified() no longer has any effect. is_modified()
    in all cases looks only at local in-memory modified flags and will not emit any
    SQL or invoke loader callables/initializers.
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “被动”标志在 Session.is_modified() 上不再起作用。在所有情况下，is_modified() 只查看本地内存中修改的标志，不会发出任何
    SQL 或调用加载器可调用/初始化程序。
- en: 'References: [#2320](https://www.sqlalchemy.org/trac/ticket/2320)'
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2320](https://www.sqlalchemy.org/trac/ticket/2320)
- en: '**[orm] [bug]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The warning emitted when using delete-orphan cascade with one-to-many or many-to-many
    without single-parent=True is now an error. The ORM would fail to function subsequent
    to this warning in any case.
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 delete-orphan 级联时，如果 one-to-many 或 many-to-many 没有设置 single-parent=True，则发出的警告现在是一个错误。在任何情况下，ORM
    在此警告后将无法正常运行。
- en: 'References: [#2405](https://www.sqlalchemy.org/trac/ticket/2405)'
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2405](https://www.sqlalchemy.org/trac/ticket/2405)
- en: '**[orm] [bug]**'
  id: totrans-2810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Lazy loads emitted within flush events such as before_flush(), before_update(),
    etc. will now function as they would within non-event code, regarding consideration
    of the PK/FK values used in the lazy-emitted query. Previously, special flags
    would be established that would cause lazy loads to load related items based on
    the “previous” value of the parent PK/FK values specifically when called upon
    within a flush; the signal to load in this way is now localized to where the unit
    of work actually needs to load that way. Note that the UOW does sometimes load
    these collections before the before_update() event is called, so the usage of
    “passive_updates” or not can affect whether or not a collection will represent
    the “old” or “new” data, when accessed within a flush event, based on when the
    lazy load was emitted. The change is backwards incompatible in the exceedingly
    small chance that user event code depended on the old behavior.
  id: totrans-2811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在flush事件中发出的延迟加载，如before_flush()、before_update()等，现在将像在非事件代码中一样运行，关于在延迟发出的查询中使用的PK/FK值的考虑。以前，会建立特殊标志，导致延迟加载基于在刷新时调用时父PK/FK值的“先前”值加载相关项目；现在，以这种方式加载的信号现在局限于工作单元实际需要以这种方式加载的地方。请注意，UOW有时会在调用before_update()事件之前加载这些集合，因此“passive_updates”的使用与否可能会影响在刷新事件中访问时集合是否表示“旧”或“新”数据，根据延迟加载何时发出。这种变化在极小的机会上是不兼容的，用户事件代码依赖于旧行为。
- en: 'References: [#2350](https://www.sqlalchemy.org/trac/ticket/2350)'
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2350](https://www.sqlalchemy.org/trac/ticket/2350)
- en: '**[orm] [bug]**'
  id: totrans-2813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Continuing regarding extra state post-flush due to event listeners; any states
    that are marked as “dirty” from an attribute perspective, usually via column-attribute
    set events within after_insert(), after_update(), etc., will get the “history”
    flag reset in all cases, instead of only those instances that were part of the
    flush. This has the effect that this “dirty” state doesn’t carry over after the
    flush and won’t result in UPDATE statements. A warning is emitted to this effect;
    the set_committed_state() method can be used to assign attributes on objects without
    producing history events.
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续关于由于事件监听器导致刷新后的额外状态；任何从属性角度标记为“脏”的状态，通常通过after_insert()、after_update()等中的列属性设置事件，将在所有情况下重置“历史”标志，而不仅仅是那些参与刷新的实例。这样做的效果是，这种“脏”状态在刷新后不会传递，并且不会导致UPDATE语句。会发出一个警告；可以使用set_committed_state()方法在对象上分配属性而不产生历史事件。
- en: 'References: [#2566](https://www.sqlalchemy.org/trac/ticket/2566), [#2582](https://www.sqlalchemy.org/trac/ticket/2582)'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2566](https://www.sqlalchemy.org/trac/ticket/2566), [#2582](https://www.sqlalchemy.org/trac/ticket/2582)
- en: '**[orm] [bug]**'
  id: totrans-2816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a disconnect that slowly evolved between a @declared_attr Column and a
    directly-defined Column on a mixin. In both cases, the Column will be applied
    to the declared class’ table, but not to that of a joined inheritance subclass.
    Previously, the directly-defined Column would be placed on both the base and the
    sub table, which isn’t typically what’s desired.
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在@declared_attr Column和直接定义的Column之间逐渐演变的断开。在这两种情况下，Column将被应用于声明类的表，但不会应用于联合继承子类的表。以前，直接定义的Column会被放置在基表和子表上，这通常不是所期望的。
- en: 'References: [#2565](https://www.sqlalchemy.org/trac/ticket/2565)'
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2565](https://www.sqlalchemy.org/trac/ticket/2565)
- en: '**[orm] [bug]**'
  id: totrans-2819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Declarative can now propagate a column declared on a single-table inheritance
    subclass up to the parent class’ table, when the parent class is itself mapped
    to a join() or select() statement, directly or via joined inheritance, and not
    just a Table.
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，声明式可以将在单表继承子类上声明的列传播到父类的表，当父类本身被映射到一个join()或select()语句时，直接或通过联合继承，而不仅仅是一个Table。
- en: 'References: [#2549](https://www.sqlalchemy.org/trac/ticket/2549)'
  id: totrans-2821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2549](https://www.sqlalchemy.org/trac/ticket/2549)
- en: '**[orm] [bug]**'
  id: totrans-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An error is emitted when uselist=False is combined with a “dynamic” loader.
    This is a warning in 0.7.9.
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当uselist=False与“dynamic”加载器结合时会发出错误。这在0.7.9中是一个警告。
- en: '**[orm] [removed]**'
  id: totrans-2824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [removed]**'
- en: The legacy “mutable” system of the ORM, including the MutableType class as well
    as the mutable=True flag on PickleType and postgresql.ARRAY has been removed.
    In-place mutations are detected by the ORM using the sqlalchemy.ext.mutable extension,
    introduced in 0.7\. The removal of MutableType and associated constructs removes
    a great deal of complexity from SQLAlchemy’s internals. The approach performed
    poorly as it would incur a scan of the full contents of the Session when in use.
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 的传统“可变”系统，包括 MutableType 类以及 PickleType 和 postgresql.ARRAY 上的 mutable=True
    标志已被移除。ORM 使用在 0.7 版本中引入的 sqlalchemy.ext.mutable 扩展来检测原地变异。移除 MutableType 和相关结构从
    SQLAlchemy 的内部移除了大量复杂性。这种方法的性能表现不佳，因为在使用时会导致对 Session 的全部内容进行扫描。
- en: 'References: [#2442](https://www.sqlalchemy.org/trac/ticket/2442)'
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2442](https://www.sqlalchemy.org/trac/ticket/2442)
- en: '**[orm] [removed]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [removed]**'
- en: 'Deprecated identifiers removed:'
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除的弃用标识符：
- en: allow_null_pks mapper() argument (use allow_partial_pks)
  id: totrans-2829
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: allow_null_pks mapper() 参数���使用 allow_partial_pks）
- en: _get_col_to_prop() mapper method (use get_property_by_column())
  id: totrans-2830
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _get_col_to_prop() 映射器方法（使用 get_property_by_column()）
- en: dont_load argument to Session.merge() (use load=True)
  id: totrans-2831
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Session.merge() 的 dont_load 参数（使用 load=True）
- en: sqlalchemy.orm.shard module (use sqlalchemy.ext.horizontal_shard)
  id: totrans-2832
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.shard 模块（使用 sqlalchemy.ext.horizontal_shard）
- en: '**[orm] [moved]**'
  id: totrans-2833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [moved]**'
- en: The InstrumentationManager interface and the entire related system of alternate
    class implementation is now moved out to sqlalchemy.ext.instrumentation. This
    is a seldom used system that adds significant complexity and overhead to the mechanics
    of class instrumentation. The new architecture allows it to remain unused until
    InstrumentationManager is actually imported, at which point it is bootstrapped
    into the core.
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstrumentationManager 接口和整个相关的替代类实现系统现在已经移动到 sqlalchemy.ext.instrumentation。这是一个很少使用的系统，会给类的仪器化机制增加显著的复杂性和开销。新的架构允许它保持未使用状态，直到实际导入
    InstrumentationManager 时，它才会被引导到核心部分。
- en: examples
  id: totrans-2835
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples]**'
  id: totrans-2836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples]**'
- en: The Beaker caching example has been converted to use [dogpile.cache](https://dogpilecache.readthedocs.io/).
    This is a new caching library written by the same creator of Beaker’s caching
    internals, and represents a vastly improved, simplified, and modernized system
    of caching.
  id: totrans-2837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 缓存示例已转换为使用 [dogpile.cache](https://dogpilecache.readthedocs.io/)。这是一个由
    Beaker 缓存内部的相同创建者编写的新缓存库，代表了一个大幅改进、简化和现代化的缓存系统。
- en: See also
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dogpile Caching](../orm/examples.html#examples-caching)'
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Dogpile Caching](../orm/examples.html#examples-caching)'
- en: 'References: [#2589](https://www.sqlalchemy.org/trac/ticket/2589)'
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2589](https://www.sqlalchemy.org/trac/ticket/2589)
- en: engine
  id: totrans-2841
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Connection event listeners can now be associated with individual Connection
    objects, not just Engine objects.
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在连接事件监听器可以与单独的 Connection 对象关联，而不仅仅是 Engine 对象。
- en: 'References: [#2511](https://www.sqlalchemy.org/trac/ticket/2511)'
  id: totrans-2844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2511](https://www.sqlalchemy.org/trac/ticket/2511)
- en: '**[engine] [feature]**'
  id: totrans-2845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The before_cursor_execute event fires off for so-called “_cursor_execute” events,
    which are usually special-case executions of primary-key bound sequences and default-generation
    SQL phrases that invoke separately when RETURNING is not used with INSERT.
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: before_cursor_execute 事件会触发所谓的“_cursor_execute”事件，这些事件通常是主键绑定序列和在 INSERT 时未使用
    RETURNING 时调用的默认生成 SQL 短语的特殊执行。
- en: 'References: [#2459](https://www.sqlalchemy.org/trac/ticket/2459)'
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2459](https://www.sqlalchemy.org/trac/ticket/2459)
- en: '**[engine] [feature]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The libraries used by the test suite have been moved around a bit so that they
    are part of the SQLAlchemy install again. In addition, a new suite of tests is
    present in the new sqlalchemy.testing.suite package. This is an under-development
    system that hopes to provide a universal testing suite for external dialects.
    Dialects which are maintained outside of SQLAlchemy can use the new test fixture
    as the framework for their own tests, and will get for free a “compliance” suite
    of dialect-focused tests, including an improved “requirements” system where specific
    capabilities and features can be enabled or disabled for testing.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试套件使用的库已经稍微移动了一下，以便它们再次成为 SQLAlchemy 安装的一部分。此外，新的测试套件现在位于新的 sqlalchemy.testing.suite
    包中。这是一个正在开发中的系统，希望为外部方言提供一个通用的测试套件。在 SQLAlchemy 之外维护的方言可以使用新的测试装置作为其自己测试的框架，并将免费获得一个“兼容性”方言专注的测试套件，包括一个改进的“要求”系统，其中可以为测试启用或禁用特定功能和特性。
- en: '**[engine] [feature]**'
  id: totrans-2850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added a new system for registration of new dialects in-process without using
    an entrypoint. See the docs for “Registering New Dialects”.
  id: totrans-2851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的系统，可以在不使用入口点的情况下在进程中注册新的方言。请参阅“注册新方言”的文档。
- en: 'References: [#2462](https://www.sqlalchemy.org/trac/ticket/2462)'
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2462](https://www.sqlalchemy.org/trac/ticket/2462)
- en: '**[engine] [feature]**'
  id: totrans-2853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The “required” flag is set to True by default, if not passed explicitly, on
    bindparam() if the “value” or “callable” parameters are not passed. This will
    cause statement execution to check for the parameter being present in the final
    collection of bound parameters, rather than implicitly assigning None.
  id: totrans-2854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有明确传递“value”或“callable”参数，则默认将“required”标志设置为 True，在 bindparam() 上。这将导致语句执行检查参数是否存在于最终的绑定参数集合中，而不是隐式地赋值为
    None。
- en: 'References: [#2556](https://www.sqlalchemy.org/trac/ticket/2556)'
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2556](https://www.sqlalchemy.org/trac/ticket/2556)
- en: '**[engine] [feature]**'
  id: totrans-2856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Various API tweaks to the “dialect” API to better support highly specialized
    systems such as the Akiban database, including more hooks to allow an execution
    context to access type processors.
  id: totrans-2857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“方言” API 进行了各种 API 调整，以更好地支持高度专业化的系统，如 Akiban 数据库，包括更多的钩子，允许执行上下文访问类型处理器。
- en: '**[engine] [feature]**'
  id: totrans-2858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Inspector.get_primary_keys() is deprecated; use Inspector.get_pk_constraint().
    Courtesy Diana Clarke.
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Inspector.get_primary_keys() 已弃用；使用 Inspector.get_pk_constraint()。谢谢 Diana Clarke。
- en: 'References: [#2422](https://www.sqlalchemy.org/trac/ticket/2422)'
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2422](https://www.sqlalchemy.org/trac/ticket/2422)
- en: '**[engine] [feature]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: New C extension module “utils” has been added for additional function speedups
    as we have time to implement.
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 C 扩展模块“utils”，用于在有时间实现时进行额外的函数加速。
- en: '**[engine] [bug]**'
  id: totrans-2863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The Inspector.get_table_names() order_by=”foreign_key” feature now sorts tables
    by dependee first, to be consistent with util.sort_tables and metadata.sorted_tables.
  id: totrans-2864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Inspector.get_table_names() 的 order_by=”foreign_key” 功能现在将表按照依赖者优先排序，以与 util.sort_tables
    和 metadata.sorted_tables 保持一致。
- en: '**[engine] [bug]**'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby if a database restart affected multiple connections, each
    connection would individually invoke a new disposal of the pool, even though only
    one disposal is needed.
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即如果数据库重新启动影响了多个连接，则每个连接都会单独调用池的新释放，即使只需要一个释放。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-2868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The names of the columns on the .c. attribute of a select().apply_labels() is
    now based on <tablename>_<colkey> instead of <tablename>_<colname>, for those
    columns that have a distinctly named .key.
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select().apply_labels() 上的 .c. 属性的列名称现在基于 <tablename>_<colkey> 而不是 <tablename>_<colname>，对于具有明确定义的
    .key 的列。
- en: 'References: [#2397](https://www.sqlalchemy.org/trac/ticket/2397)'
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2397](https://www.sqlalchemy.org/trac/ticket/2397)
- en: '**[engine] [bug]**'
  id: totrans-2871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The autoload_replace flag on Table, when False, will cause any reflected foreign
    key constraints which refer to already-declared columns to be skipped, assuming
    that the in-Python declared column will take over the task of specifying in-Python
    ForeignKey or ForeignKeyConstraint declarations.
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: autoload_replace 标志在 Table 上，当为 False 时，将导致引用已声明列的反射外键约束被跳过，假设 Python 中声明的列将接管指定
    Python 中的 ForeignKey 或 ForeignKeyConstraint 声明的任务。
- en: '**[engine] [bug]**'
  id: totrans-2873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The ResultProxy methods inserted_primary_key, last_updated_params(), last_inserted_params(),
    postfetch_cols(), prefetch_cols() all assert that the given statement is a compiled
    construct, and is an insert() or update() statement as is appropriate, else raise
    InvalidRequestError.
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy 方法 inserted_primary_key、last_updated_params()、last_inserted_params()、postfetch_cols()、prefetch_cols()
    都会断言给定的语句是一个已编译的构造，并且是一个适当的 insert() 或 update() 语句，否则会引发 InvalidRequestError。
- en: 'References: [#2498](https://www.sqlalchemy.org/trac/ticket/2498)'
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2498](https://www.sqlalchemy.org/trac/ticket/2498)
- en: '**[engine]**'
  id: totrans-2876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: ResultProxy.last_inserted_ids is removed, replaced by inserted_primary_key.
  id: totrans-2877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy.last_inserted_ids 被移除，替换为 inserted_primary_key。
- en: sql
  id: totrans-2878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new method [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") to [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This method works similarly to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") in that it creates a copy of
    the parent object which will refer to the new set of options. The method can be
    used to build sharding schemes where each engine shares the same underlying pool
    of connections. The method has been tested against the horizontal shard recipe
    in the ORM as well.
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的方法[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")到[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。这个方法的工作方式类似于[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")，因为它创建了一个引用新选项集的父对象的副本。该方法可用于构建每个引擎共享相同基础连接池的分片方案。该方法已在ORM中针对水平分片配方进行了测试。
- en: See also
  id: totrans-2881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-2882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '**[sql] [feature]**'
  id: totrans-2883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Major rework of operator system in Core, to allow redefinition of existing operators
    as well as addition of new operators at the type level. New types can be created
    from existing ones which add or redefine operations that are exported out to column
    expressions, in a similar manner to how the ORM has allowed comparator_factory.
    The new architecture moves this capability into the Core so that it is consistently
    usable in all cases, propagating cleanly using existing type propagation behavior.
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心中的运算符系统进行了重大改组，允许重新定义现有运算符以及在类型级别添加新运算符。新类型可以从现有类型创建，这些类型增加或重新定义了导出到列表达式的操作，类似于ORM允许comparator_factory。新的架构将此功能移入核心，以便在所有情况下一致可用，并使用现有类型传播行为进行干净传播。
- en: 'References: [#2547](https://www.sqlalchemy.org/trac/ticket/2547)'
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2547](https://www.sqlalchemy.org/trac/ticket/2547)
- en: '**[sql] [feature]**'
  id: totrans-2886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: To complement, types can now provide “bind expressions” and “column expressions”
    which allow compile-time injection of SQL expressions into statements on a per-column
    or per-bind level. This is to suit the use case of a type which needs to augment
    bind- and result- behavior at the SQL level, as opposed to in the Python level.
    Allows for schemes like transparent encryption/ decryption, usage of PostGIS functions,
    etc.
  id: totrans-2887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了补充，类型现在可以提供“绑定表达式”和“列表达式”，允许在列或绑定级别上将SQL表达式注入到语句中。这适用于类型需要在SQL级别增强绑定和结果行为的用例，而不是在Python级别。允许类似透明加密/解密、使用PostGIS函数等方案。
- en: 'References: [#1534](https://www.sqlalchemy.org/trac/ticket/1534), [#2547](https://www.sqlalchemy.org/trac/ticket/2547)'
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1534](https://www.sqlalchemy.org/trac/ticket/1534), [#2547](https://www.sqlalchemy.org/trac/ticket/2547)
- en: '**[sql] [feature]**'
  id: totrans-2889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Core operator system now includes the getitem operator, i.e. the bracket
    operator in Python. This is used at first to provide index and slice behavior
    to the PostgreSQL ARRAY type, and also provides a hook for end-user definition
    of custom __getitem__ schemes which can be applied at the type level as well as
    within ORM-level custom operator schemes. lshift (<<) and rshift (>>) are also
    supported as optional operators.
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心运算符系统现在包括getitem运算符，即Python中的括号运算符。首先用于为PostgreSQL ARRAY类型提供索引和切片行为，并且还提供了一个用于端用户定义自定义__getitem__方案的钩子，这些方案可以应用于类型级别以及ORM级别的自定义操作符方案中。lshift（<<）和rshift（>>）也支持作为可选运算符。
- en: Note that this change has the effect that descriptor-based __getitem__ schemes
    used by the ORM in conjunction with synonym() or other “descriptor-wrapped” schemes
    will need to start using a custom comparator in order to maintain this behavior.
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这个变化的效果是，ORM与synonym()或其他“装饰器封装”方案一起使用的基于描述符的__getitem__方案将需要开始使用自定义比较器以保持这种行为。
- en: '**[sql] [feature]**'
  id: totrans-2892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Revised the rules used to determine the operator precedence for the user-defined
    operator, i.e. that granted using the `op()` method. Previously, the smallest
    precedence was applied in all cases, now the default precedence is zero, lower
    than all operators except “comma” (such as, used in the argument list of a `func`
    call) and “AS”, and is also customizable via the “precedence” argument on the
    `op()` method.
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了用于确定用户定义运算符的运算符优先级的规则，即使用`op()`方法授予的运算符。以前，在所有情况下都应用最小的优先级，现在默认优先级为零，低于所有运算符，除了“逗号”（例如，在`func`调用的参数列表中使用）和“AS”，并且还可以通过`op()`方法��的“precedence”参数进行自定义。
- en: 'References: [#2537](https://www.sqlalchemy.org/trac/ticket/2537)'
  id: totrans-2894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2537](https://www.sqlalchemy.org/trac/ticket/2537)
- en: '**[sql] [feature]**'
  id: totrans-2895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “collation” parameter to all String types. When present, renders as COLLATE
    <collation>. This to support the COLLATE keyword now supported by several databases
    including MySQL, SQLite, and PostgreSQL.
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有String类型添加了“collation”参数。当存在时，呈现为COLLATE <collation>。这是为了支持现在多个数据库（包括MySQL、SQLite和PostgreSQL）支持的COLLATE关键字。
- en: 'References: [#2276](https://www.sqlalchemy.org/trac/ticket/2276)'
  id: totrans-2897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2276](https://www.sqlalchemy.org/trac/ticket/2276)
- en: '**[sql] [feature]**'
  id: totrans-2898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Custom unary operators can now be used by combining operators.custom_op() with
    UnaryExpression().
  id: totrans-2899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以通过将operators.custom_op()与UnaryExpression()结合来使用自定义的一元运算符。
- en: '**[sql] [feature]**'
  id: totrans-2900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Enhanced GenericFunction and func.* to allow for user-defined GenericFunction
    subclasses to be available via the func.* namespace automatically by classname,
    optionally using a package name, as well as with the ability to have the rendered
    name different from the identified name in func.*.
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强了GenericFunction和func.*，允许通过类名自动在func.*命名空间中使用用户定义的GenericFunction子类，可选地使用包名，以及具有与func.*中标识名称不同的渲染名称的功能。
- en: '**[sql] [feature]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The cast() and extract() constructs will now be produced via the func.* accessor
    as well, as users naturally try to access these names from func.* they might as
    well do what’s expected, even though the returned object is not a FunctionElement.
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在cast()和extract()构造也将通过func.*访问器生成，因为用户自然会尝试从func.*访问这些名称，即使返回的对象不是FunctionElement也应该符合预期。
- en: 'References: [#2562](https://www.sqlalchemy.org/trac/ticket/2562)'
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2562](https://www.sqlalchemy.org/trac/ticket/2562)
- en: '**[sql] [feature]**'
  id: totrans-2905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Inspector object can now be acquired using the new inspect() service, part
    of
  id: totrans-2906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以使用新的inspect()服务获取Inspector对象的实例。
- en: 'References: [#2208](https://www.sqlalchemy.org/trac/ticket/2208)'
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2208](https://www.sqlalchemy.org/trac/ticket/2208)
- en: '**[sql] [feature]**'
  id: totrans-2908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The column_reflect event now accepts the Inspector object as the first argument,
    preceding “table”. Code which uses the 0.7 version of this very new event will
    need modification to add the “inspector” object as the first argument.
  id: totrans-2909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column_reflect事件现在接受Inspector对象作为第一个参数，位于“table”之前。使用这个非常新的事件的0.7版本的代码将需要修改，以添加“inspector”对象作为第一个参数。
- en: 'References: [#2418](https://www.sqlalchemy.org/trac/ticket/2418)'
  id: totrans-2910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2418](https://www.sqlalchemy.org/trac/ticket/2418)
- en: '**[sql] [feature]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The behavior of column targeting in result sets is now case sensitive by default.
    SQLAlchemy for many years would run a case-insensitive conversion on these values,
    probably to alleviate early case sensitivity issues with dialects like Oracle
    and Firebird. These issues have been more cleanly solved in more modern versions
    so the performance hit of calling lower() on identifiers is removed. The case
    insensitive comparisons can be re-enabled by setting “case_insensitive=False”
    on create_engine().
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在结果集中列的定位行为默认区分大小写。SQLAlchemy多年来会对这些值进行不区分大小写的转换，可能是为了缓解像Oracle和Firebird这样的方言早期大小写敏感性问题。这些问题在更现代的版本中已经更清晰地解决，因此在标识符上调用lower()的性能损失已经消除。可以通过在create_engine()上设置“case_insensitive=False”来重新启用不区分大小写的比较。
- en: 'References: [#2423](https://www.sqlalchemy.org/trac/ticket/2423)'
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2423](https://www.sqlalchemy.org/trac/ticket/2423)
- en: '**[sql] [feature]**'
  id: totrans-2914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The “unconsumed column names” warning emitted when keys are present in insert.values()
    or update.values() that aren’t in the target table is now an exception.
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在insert.values()或update.values()中存在不在目标表中的键时，发出的“未使用的列名”警告现在是一个异常。
- en: 'References: [#2415](https://www.sqlalchemy.org/trac/ticket/2415)'
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2415](https://www.sqlalchemy.org/trac/ticket/2415)
- en: '**[sql] [feature]**'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “MATCH” clause to ForeignKey, ForeignKeyConstraint, courtesy Ryan Kelly.
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向ForeignKey、ForeignKeyConstraint添加了“MATCH”子句，感谢Ryan Kelly。
- en: 'References: [#2502](https://www.sqlalchemy.org/trac/ticket/2502)'
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2502](https://www.sqlalchemy.org/trac/ticket/2502)
- en: '**[sql] [feature]**'
  id: totrans-2920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for DELETE and UPDATE from an alias of a table, which would assumedly
    be related to itself elsewhere in the query, courtesy Ryan Kelly.
  id: totrans-2921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对从表的别名进行DELETE和UPDATE的支持，这在查询中可能与其他地方的自身相关联，由Ryan Kelly提供。
- en: 'References: [#2507](https://www.sqlalchemy.org/trac/ticket/2507)'
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��考：[#2507](https://www.sqlalchemy.org/trac/ticket/2507)
- en: '**[sql] [feature]**'
  id: totrans-2923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: select() features a correlate_except() method, auto correlates all selectables
    except those passed.
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()具有correlate_except()方法，自动关联除传递的所有selectables之外的所有selectables。
- en: '**[sql] [feature]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The prefix_with() method is now available on each of select(), insert(), update(),
    delete(), all with the same API, accepting multiple prefix calls, as well as a
    “dialect name” so that the prefix can be limited to one kind of dialect.
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix_with()方法现在在每个select()、insert()、update()、delete()上都可用，具有相同的API，接受多个前缀调用，以及“方言名称”，以便将前缀限制为一种方言。
- en: 'References: [#2431](https://www.sqlalchemy.org/trac/ticket/2431)'
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2431](https://www.sqlalchemy.org/trac/ticket/2431)
- en: '**[sql] [feature]**'
  id: totrans-2928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added reduce_columns() method to select() construct, replaces columns inline
    using the util.reduce_columns utility function to remove equivalent columns. reduce_columns()
    also adds “with_only_synonyms” to limit the reduction just to those columns which
    have the same name. The deprecated fold_equivalents() feature is removed.
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()构造中添加了reduce_columns()方法，使用util.reduce_columns实用程序函数内联替换列以删除等效列。reduce_columns()还添加了“with_only_synonyms”以限制仅对具有相同名称的列进行减少。已删除不推荐使用的fold_equivalents()功能。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[sql] [feature]**'
  id: totrans-2931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Reworked the startswith(), endswith(), contains() operators to do a better job
    with negation (NOT LIKE), and also to assemble them at compilation time so that
    their rendered SQL can be altered, such as in the case for Firebird STARTING WITH
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了startswith()、endswith()、contains()运算符，以更好地处理否定（NOT LIKE），并且在编译时组装它们，以便它们的渲染SQL可以被修改，例如在Firebird
    STARTING WITH的情况下。
- en: 'References: [#2470](https://www.sqlalchemy.org/trac/ticket/2470)'
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2470](https://www.sqlalchemy.org/trac/ticket/2470)
- en: '**[sql] [feature]**'
  id: totrans-2934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a hook to the system of rendering CREATE TABLE that provides access to
    the render for each Column individually, by constructing a @compiles function
    against the new schema.CreateColumn construct.
  id: totrans-2935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个钩子到渲染CREATE TABLE系统，通过针对新的schema.CreateColumn构造函数构造@compiles函数，为每个列提供访问渲染的系统。
- en: 'References: [#2463](https://www.sqlalchemy.org/trac/ticket/2463)'
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2463](https://www.sqlalchemy.org/trac/ticket/2463)
- en: '**[sql] [feature]**'
  id: totrans-2937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: ”scalar” selects now have a WHERE method to help with generative building. Also
    slight adjustment regarding how SS “correlates” columns; the new methodology no
    longer applies meaning to the underlying Table column being selected. This improves
    some fairly esoteric situations, and the logic that was there didn’t seem to have
    any purpose.
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “标量”选择现在具有WHERE方法以帮助生成构建。此外，关于SS“关联”列的方式略有调整；新方法不再将意义应用于所选的基础Table列。这改进了一些相当晦涩的情况，而且似乎之前的逻辑没有任何目的。
- en: '**[sql] [feature]**'
  id: totrans-2939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: An explicit error is raised when a ForeignKeyConstraint() that was constructed
    to refer to multiple remote tables is first used.
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当首次使用构造为引用多个远程表的ForeignKeyConstraint()时，将引发显式错误。
- en: 'References: [#2455](https://www.sqlalchemy.org/trac/ticket/2455)'
  id: totrans-2941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2455](https://www.sqlalchemy.org/trac/ticket/2455)
- en: '**[sql] [feature]**'
  id: totrans-2942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_"), [`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike"), [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") to [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators").
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")、[`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike")、[`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike")添加了[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。
- en: 'References: [#2580](https://www.sqlalchemy.org/trac/ticket/2580)'
  id: totrans-2944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2580](https://www.sqlalchemy.org/trac/ticket/2580)
- en: '**[sql] [change]**'
  id: totrans-2945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change]**'
- en: The Text() type renders the length given to it, if a length was specified.
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果指定了长度，Text()类型将呈现给定的长度。
- en: '**[sql] [changed]**'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: Most classes in expression.sql are no longer preceded with an underscore, i.e.
    Label, SelectBase, Generative, CompareMixin. _BindParamClause is also renamed
    to BindParameter. The old underscore names for these classes will remain available
    as synonyms for the foreseeable future.
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expression.sql中的大多数类不再以下划线开头，即Label、SelectBase、Generative、CompareMixin。_BindParamClause也更名为BindParameter。这些类的旧下划线名称将在可预见的未来保持可用作为同义词。
- en: '**[sql] [bug]**'
  id: totrans-2949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where keyword arguments passed to `Compiler.process()` wouldn’t get
    propagated to the column expressions present in the columns clause of a SELECT
    statement. In particular this would come up when used by custom compilation schemes
    that relied upon special flags.
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了传递给`Compiler.process()`的关键字参数不会传播到SELECT语句的列子句中存在的列表达式的bug。特别是当自定义编译方案依赖于特殊标志时，这种情况会出现。
- en: 'References: [#2593](https://www.sqlalchemy.org/trac/ticket/2593)'
  id: totrans-2951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2593](https://www.sqlalchemy.org/trac/ticket/2593)
- en: '**[sql] [bug] [orm]**'
  id: totrans-2952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [orm]**'
- en: The auto-correlation feature of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), and by proxy that of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), will not take effect for a SELECT statement that is being
    rendered directly in the FROM list of the enclosing SELECT. Correlation in SQL
    only applies to column expressions such as those in the WHERE, ORDER BY, columns
    clause.
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")的自动相关特性，以及由此引发的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的特性，不会对直接在包含SELECT的FROM列表中呈现的SELECT语句产生影响。 SQL中的相关性仅适用于诸如WHERE、ORDER
    BY、列子句中的列表达式。'
- en: 'References: [#2595](https://www.sqlalchemy.org/trac/ticket/2595)'
  id: totrans-2954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2595](https://www.sqlalchemy.org/trac/ticket/2595)
- en: '**[sql] [bug]**'
  id: totrans-2955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A tweak to column precedence which moves the “concat” and “match” operators
    to be the same as that of “is”, “like”, and others; this helps with parenthesization
    rendering when used in conjunction with “IS”.
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '调整了列优先级，将“concat”和“match”运算符移动到与“is”、“like”等运算符相同的位置；这有助于在与“IS”结合使用时进行括号渲染。 '
- en: 'References: [#2564](https://www.sqlalchemy.org/trac/ticket/2564)'
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2564](https://www.sqlalchemy.org/trac/ticket/2564)
- en: '**[sql] [bug]**'
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Applying a column expression to a select statement using a label with or without
    other modifying constructs will no longer “target” that expression to the underlying
    Column; this affects ORM operations that rely upon Column targeting in order to
    retrieve results. That is, a query like query(User.id, User.id.label(‘foo’)) will
    now track the value of each “User.id” expression separately instead of munging
    them together. It is not expected that any users will be impacted by this; however,
    a usage that uses select() in conjunction with query.from_statement() and attempts
    to load fully composed ORM entities may not function as expected if the select()
    named Column objects with arbitrary .label() names, as these will no longer target
    to the Column objects mapped by that entity.
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将列表达式应用于带有标签的选择语句，无论是否有其他修改构造，都不再将该表达式“定位”到底层列；这会影响依赖于列定位以检索结果的ORM操作。也就是说，像query(User.id,
    User.id.label(‘foo’))这样的查询现在将分别跟踪每个“User.id”表达式的值，而不是将它们混合在一起。预计不会影响任何用户；但是，如果使用select()与query.from_statement()结合使用并尝试加载完全组合的ORM实体的用法可能不会按预期运行，如果select()命名的列对象具有任意的.label()名称，因为这些将不再定位到由该实体映射的列对象。
- en: 'References: [#2591](https://www.sqlalchemy.org/trac/ticket/2591)'
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2591](https://www.sqlalchemy.org/trac/ticket/2591)
- en: '**[sql] [bug]**'
  id: totrans-2961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixes to the interpretation of the Column “default” parameter as a callable
    to not pass ExecutionContext into a keyword argument parameter.
  id: totrans-2962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将列“default”参数解释为可调用项，以便不将ExecutionContext传递给关键字参数的问题。
- en: 'References: [#2520](https://www.sqlalchemy.org/trac/ticket/2520)'
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2520](https://www.sqlalchemy.org/trac/ticket/2520)
- en: '**[sql] [bug]**'
  id: totrans-2964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: All of UniqueConstraint, ForeignKeyConstraint, CheckConstraint, and PrimaryKeyConstraint
    will attach themselves to their parent table automatically when they refer to
    a Table-bound Column object directly (i.e. not just string column name), and refer
    to one and only one Table. Prior to 0.8 this behavior occurred for UniqueConstraint
    and PrimaryKeyConstraint, but not ForeignKeyConstraint or CheckConstraint.
  id: totrans-2965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有的UniqueConstraint、ForeignKeyConstraint、CheckConstraint和PrimaryKeyConstraint在直接引用绑定到表的Column对象时（即不仅仅是字符串列名），并且只引用一个Table时，将自动附加到它们的父表上。在0.8之前，这种行为仅适用于UniqueConstraint和PrimaryKeyConstraint，而不适用于ForeignKeyConstraint或CheckConstraint。
- en: 'References: [#2410](https://www.sqlalchemy.org/trac/ticket/2410)'
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2410](https://www.sqlalchemy.org/trac/ticket/2410)
- en: '**[sql] [bug]**'
  id: totrans-2967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: TypeDecorator now includes a generic repr() that works in terms of the “impl”
    type by default. This is a behavioral change for those TypeDecorator classes that
    specify a custom __init__ method; those types will need to re-define __repr__()
    if they need __repr__() to provide a faithful constructor representation.
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在包括一个通用的repr()，默认情况下以“impl”类型为基础工作。对于那些指定了自定义__init__方法的TypeDecorator类来说，这是一个行为变化；那些类型如果需要__repr__()提供一个忠实的构造函数表示，就需要重新定义__repr__()。
- en: 'References: [#2594](https://www.sqlalchemy.org/trac/ticket/2594)'
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2594](https://www.sqlalchemy.org/trac/ticket/2594)
- en: '**[sql] [bug]**'
  id: totrans-2970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: column.label(None) now produces an anonymous label, instead of returning the
    column object itself, consistent with the behavior of label(column, None).
  id: totrans-2971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.label(None)现在生成一个匿名标签，而不是返回列对象本身，与label(column, None)的行为一致。
- en: 'References: [#2168](https://www.sqlalchemy.org/trac/ticket/2168)'
  id: totrans-2972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2168](https://www.sqlalchemy.org/trac/ticket/2168)
- en: '**[sql] [removed]**'
  id: totrans-2973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [已移除]**'
- en: The long-deprecated and non-functional `assert_unicode` flag on [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as well as [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") is removed.
  id: totrans-2974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")以及[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")上长期弃用且无效的`assert_unicode`标志已被移除。
- en: postgresql
  id: totrans-2975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: postgresql.ARRAY features an optional “dimension” argument, will assign a specific
    number of dimensions to the array which will render in DDL as ARRAY[][]…, also
    improves performance of bind/result processing.
  id: totrans-2977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql.ARRAY具有可选的“维度”参数，将为数组分配特定数量的维度，这将在DDL中呈现为ARRAY[][]…，还提高了绑定/结果处理的性能。
- en: 'References: [#2441](https://www.sqlalchemy.org/trac/ticket/2441)'
  id: totrans-2978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2441](https://www.sqlalchemy.org/trac/ticket/2441)
- en: '**[postgresql] [feature]**'
  id: totrans-2979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: postgresql.ARRAY now supports indexing and slicing. The Python [] operator is
    available on all SQL expressions that are of type ARRAY; integer or simple slices
    can be passed. The slices can also be used on the assignment side in the SET clause
    of an UPDATE statement by passing them into Update.values(); see the docs for
    examples.
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql.ARRAY现在支持索引和切片。Python []运算符可用于所有类型为ARRAY的SQL表达式；可以传递整数或简单切片。这些切片也可以在UPDATE语句的SET子句的赋值侧使用，通过将它们传递给Update.values()；查看文档以获取示例。
- en: '**[postgresql] [feature]**'
  id: totrans-2981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added new “array literal” construct postgresql.array(). Basically a “tuple”
    that renders as ARRAY[1,2,3].
  id: totrans-2982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的“数组字面量”构造函数postgresql.array()。基本上是一个以ARRAY[1,2,3]形式呈现的“元组”。
- en: '**[postgresql] [feature]**'
  id: totrans-2983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for the PostgreSQL ONLY keyword, which can appear corresponding
    to a table in a SELECT, UPDATE, or DELETE statement. The phrase is established
    using with_hint(). Courtesy Ryan Kelly
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL ONLY关键字的支持，该关键字可以出现在SELECT、UPDATE或DELETE语句中对应的表中。该短语是使用with_hint()建立的。感谢Ryan
    Kelly
- en: 'References: [#2506](https://www.sqlalchemy.org/trac/ticket/2506)'
  id: totrans-2985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2506](https://www.sqlalchemy.org/trac/ticket/2506)
- en: '**[postgresql] [feature]**'
  id: totrans-2986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: 'The “ischema_names” dictionary of the PostgreSQL dialect is “unofficially”
    customizable. Meaning, new types such as PostGIS types can be added into this
    dictionary, and the PG type reflection code should be able to handle simple types
    with variable numbers of arguments. The functionality here is “unofficial” for
    three reasons:'
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL方言的“ischema_names”字典是“非官方”可定制的。意思是，新类型如PostGIS类型可以添加到这个字典中，PG类型反射代码应该能够处理带有可变参数数量的简单类型。这里的功能之所以“非官方”，有三个原因：
- en: this is not an “official” API. Ideally an “official” API would allow custom
    type-handling callables at the dialect or global level in a generic way.
  id: totrans-2988
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这不是一个“官方”API。理想情况下，“官方”API应该允许在方言或全局级别以一种通用方式调用自定义类型处理可调用对象。
- en: This is only implemented for the PG dialect, in particular because PG has broad
    support for custom types vs. other database backends. A real API would be implemented
    at the default dialect level.
  id: totrans-2989
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这仅针对PG方言实现，特别是因为PG对自定义类型有广泛支持，而其他数据库后端不是这样。真正的API将在默认方言级别实现。
- en: The reflection code here is only tested against simple types and probably has
    issues with more compositional types.
  id: totrans-2990
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里的反射代码仅针对简单类型进行了测试，可能在更复杂类型上存在问题。
- en: patch courtesy Éric Lemoine.
  id: totrans-2991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 补丁由Éric Lemoine提供。
- en: mysql
  id: totrans-2992
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added TIME type to mysql dialect, accepts “fst” argument which is the new “fractional
    seconds” specifier for recent MySQL versions. The datatype will interpret a microseconds
    portion received from the driver, however note that at this time most/all MySQL
    DBAPIs do not support returning this value.
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将TIME类型添加到mysql方言，接受“fst”参数，这是最近MySQL版本的新“分数秒”指定符。数据类型将解释从驱动程序接收的微秒部分，但请注意，目前大多数/所有MySQL
    DBAPI都不支持返回此值。
- en: 'References: [#2534](https://www.sqlalchemy.org/trac/ticket/2534)'
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2534](https://www.sqlalchemy.org/trac/ticket/2534)
- en: '**[mysql] [bug]**'
  id: totrans-2996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Dialect no longer emits expensive server collations query, as well as server
    casing, on first connect. These functions are still available as semi-private.
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言在第一次连接时不再发出昂贵的服务器排序查询，以及服务器大小写。这些功能仍然作为半私有功能可用。
- en: 'References: [#2404](https://www.sqlalchemy.org/trac/ticket/2404)'
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2404](https://www.sqlalchemy.org/trac/ticket/2404)
- en: sqlite
  id: totrans-2999
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-3000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: the SQLite date and time types have been overhauled to support a more open ended
    format for input and output, using name based format strings and regexps. A new
    argument “microseconds” also provides the option to omit the “microseconds” portion
    of timestamps. Thanks to Nathan Wright for the work and tests on this.
  id: totrans-3001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite的日期和时间类型已经进行了改进，以支持更开放的输入和输出格式，使用基于名称的格式字符串和正则表达式。新的参数“microseconds”还提供了省略时间戳“微秒”部分的选项。感谢Nathan
    Wright对此工作和测试的贡献。
- en: 'References: [#2363](https://www.sqlalchemy.org/trac/ticket/2363)'
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2363](https://www.sqlalchemy.org/trac/ticket/2363)
- en: '**[sqlite]**'
  id: totrans-3003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Added [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR"),
    [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")
    to the SQLite dialect’s list of recognized type names for reflection. SQLite returns
    the name given to a type as the name returned.
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")、[`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR")添加到SQLite方言的已识别类型名称列表以供反射使用。SQLite返回给定类型的名称作为返回的名称。
- en: 'References: [rc3addcc9ffad](https://www.sqlalchemy.org/trac/changeset/c3addcc9ffad)'
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[rc3addcc9ffad](https://www.sqlalchemy.org/trac/changeset/c3addcc9ffad)
- en: mssql
  id: totrans-3006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: SQL Server dialect can be given database-qualified schema names, i.e. “schema=’mydatabase.dbo’”;
    reflection operations will detect this, split the schema among the “.” to get
    the owner separately, and emit a “USE mydatabase” statement before reflecting
    targets within the “dbo” owner; the existing database returned from DB_NAME()
    is then restored.
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server方言可以给出数据库限定的模式名称，即“schema='mydatabase.dbo'”；反射操作将检测到这一点，将模式分割在“.”之间以单独获取所有者，并在反映“dbo”所有者内的目标之前发出“USE
    mydatabase”语句；然后恢复从DB_NAME()返回的现有数据库。
- en: '**[mssql] [feature]**'
  id: totrans-3009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: updated support for the mxodbc driver; mxodbc 3.2.1 is recommended for full
    compatibility.
  id: totrans-3010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了对mxodbc驱动程序的支持；建议使用mxodbc 3.2.1以获得完全兼容性。
- en: '**[mssql] [bug]**'
  id: totrans-3011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: removed legacy behavior whereby a column comparison to a scalar SELECT via ==
    would coerce to an IN with the SQL server dialect. This is implicit behavior which
    fails in other scenarios so is removed. Code which relies on this needs to be
    modified to use column.in_(select) explicitly.
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了旧行为，即通过==将列与标量SELECT进行比较会强制转换为SQL服务器方言的IN。这是隐式行为，在其他情况下会失败，因此被移除。依赖于此行为的代码需要修改为显式使用column.in_(select)。
- en: 'References: [#2277](https://www.sqlalchemy.org/trac/ticket/2277)'
  id: totrans-3013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2277](https://www.sqlalchemy.org/trac/ticket/2277)
- en: oracle
  id: totrans-3014
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-3015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: The types of columns excluded from the setinputsizes() set can be customized
    by sending a list of string DBAPI type names to exclude, using the exclude_setinputsizes
    dialect parameter. This list was previously fixed. The list also now defaults
    to STRING, UNICODE, removing CLOB, NCLOB from the list.
  id: totrans-3016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从setinputsizes()集中排除的列的类型可以通过将字符串DBAPI类型名称列表发送到exclude_setinputsizes方言参数来自定义，该列表以前是固定的。该列表现在默认为STRING、UNICODE，移除了CLOB、NCLOB。
- en: 'References: [#2561](https://www.sqlalchemy.org/trac/ticket/2561)'
  id: totrans-3017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2561](https://www.sqlalchemy.org/trac/ticket/2561)
- en: '**[oracle] [bug]**'
  id: totrans-3018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Quoting information is now passed along from a Column with quote=True when generating
    a same-named bound parameter to the bindparam() object, as is the case in generated
    INSERT and UPDATE statements, so that unknown reserved names can be fully supported.
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 quote=True 的 Column 生成同名的绑定参数时，将引用信息传递给 bindparam() 对象，就像在生成的 INSERT 和 UPDATE
    语句中一样，以便完全支持未知的保留名称。
- en: 'References: [#2437](https://www.sqlalchemy.org/trac/ticket/2437)'
  id: totrans-3020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2437](https://www.sqlalchemy.org/trac/ticket/2437)
- en: '**[oracle] [bug]**'
  id: totrans-3021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: The CreateIndex construct in Oracle will now schema-qualify the name of the
    index to be that of the parent table. Previously this name was omitted which apparently
    creates the index in the default schema, rather than that of the table.
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 中的 CreateIndex 结构现在将索引的名称模式限定为父表的名称。以前，此名称被省略，导致索引在默认模式中创建，而不是表的模式。
- en: misc
  id: totrans-3023
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[feature] [access]**'
  id: totrans-3024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [access]**'
- en: the MS Access dialect has been moved to its own project on Bitbucket, taking
    advantage of the new SQLAlchemy dialect compliance suite. The dialect is still
    in very rough shape and probably not ready for general use yet, however it does
    have *extremely* rudimental functionality now. [https://bitbucket.org/zzzeek/sqlalchemy-access](https://bitbucket.org/zzzeek/sqlalchemy-access)
  id: totrans-3025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MS Access 方言已移至 Bitbucket 上的自己的项目中，利用了新的 SQLAlchemy 方言兼容性套件。该方言仍处于非常粗糙的状态，可能尚未准备好供一般使用，但现在已经具有极其基础的功能。[https://bitbucket.org/zzzeek/sqlalchemy-access](https://bitbucket.org/zzzeek/sqlalchemy-access)
- en: '**[feature] [firebird]**'
  id: totrans-3026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: The “startswith()” operator renders as “STARTING WITH”, “~startswith()” renders
    as “NOT STARTING WITH”, using FB’s more efficient operator.
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “startswith()” 运算符显示为 “STARTING WITH”，“~startswith()” 显示为 “NOT STARTING WITH”，使用
    FB 的更有效的运算符。
- en: 'References: [#2470](https://www.sqlalchemy.org/trac/ticket/2470)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2470](https://www.sqlalchemy.org/trac/ticket/2470)
- en: '**[feature] [firebird]**'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[feature] [firebird]**'
- en: An experimental dialect for the fdb driver is added, but is untested as I cannot
    get the fdb package to build.
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 fdb 驱动程序添加了一个实验性方言，但由于无法构建 fdb 包，因此尚未经过测试。
- en: 'References: [#2504](https://www.sqlalchemy.org/trac/ticket/2504)'
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2504](https://www.sqlalchemy.org/trac/ticket/2504)
- en: '**[bug] [firebird]**'
  id: totrans-3032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: CompileError is raised when VARCHAR with no length is attempted to be emitted,
    same way as MySQL.
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试发出没有长度的 VARCHAR 时，引发 CompileError，与 MySQL 相同。
- en: 'References: [#2505](https://www.sqlalchemy.org/trac/ticket/2505)'
  id: totrans-3034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2505](https://www.sqlalchemy.org/trac/ticket/2505)
- en: '**[bug] [firebird]**'
  id: totrans-3035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Firebird now uses strict “ansi bind rules” so that bound parameters don’t render
    in the columns clause of a statement - they render literally instead.
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 现在使用严格的“ansi 绑定规则”，以便绑定参数不会在语句的列子句中显示 - 它们会按照字面意思显示。
- en: '**[bug] [firebird]**'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Support for passing datetime as date when using the DateTime type with Firebird;
    other dialects support this.
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 DateTime 类型与 Firebird 时，支持将 datetime 作为 date 传递；其他方言也支持此功能。
- en: '**[moved] [maxdb]**'
  id: totrans-3039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[moved] [maxdb]**'
- en: The MaxDB dialect, which hasn’t been functional for several years, is moved
    out to a pending bitbucket project, [https://bitbucket.org/zzzeek/sqlalchemy-maxdb](https://bitbucket.org/zzzeek/sqlalchemy-maxdb).
  id: totrans-3040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MaxDB 方言，多年来一直无法使用，已移到待定的 Bitbucket 项目中，[https://bitbucket.org/zzzeek/sqlalchemy-maxdb](https://bitbucket.org/zzzeek/sqlalchemy-maxdb)。
- en: general
  id: totrans-3041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general] [removed]**'
  id: totrans-3042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [removed]**'
- en: The “sqlalchemy.exceptions” synonym for “sqlalchemy.exc” is removed fully.
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “sqlalchemy.exceptions” 作为 “sqlalchemy.exc” 的同义词已完全移除。
- en: 'References: [#2433](https://www.sqlalchemy.org/trac/ticket/2433)'
  id: totrans-3044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2433](https://www.sqlalchemy.org/trac/ticket/2433)
- en: '**[general]**'
  id: totrans-3045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: SQLAlchemy 0.8 now targets Python 2.5 and above. Python 2.4 is no longer supported.
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 0.8 现在面向 Python 2.5 及以上版本。不再支持 Python 2.4。
- en: orm
  id: totrans-3047
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Major rewrite of relationship() internals now allow join conditions which include
    columns pointing to themselves within composite foreign keys. A new API for very
    specialized primaryjoin conditions is added, allowing conditions based on SQL
    functions, CAST, etc. to be handled by placing the annotation functions remote()
    and foreign() inline within the expression when necessary. Previous recipes using
    the semi-private _local_remote_pairs approach can be upgraded to this new approach.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关系（relationship()）内部进行了重大重写，现在允许包含指向自身的列在复合外键内的连接条件。添加了一个用于非常专业化的 primaryjoin
    条件的新 API，允许根据需要在表达式内联中放置注释函数 remote() 和 foreign() 处理基于 SQL 函数、CAST 等的条件。以前使用半私有的
    _local_remote_pairs 方法的方案可以升级到这种新方法。
- en: See also
  id: totrans-3050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Rewritten _orm.relationship() mechanics](migration_08.html#feature-relationship-08)'
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重写 _orm.relationship() 机制](migration_08.html#feature-relationship-08)'
- en: 'References: [#1401](https://www.sqlalchemy.org/trac/ticket/1401)'
  id: totrans-3052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1401](https://www.sqlalchemy.org/trac/ticket/1401)
- en: '**[orm] [feature]**'
  id: totrans-3053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: New standalone function with_polymorphic() provides the functionality of query.with_polymorphic()
    in a standalone form. It can be applied to any entity within a query, including
    as the target of a join in place of the “of_type()” modifier.
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的独立函数 with_polymorphic() 提供了 query.with_polymorphic() 的功能，以独立形式提供。它可以应用于查询中的任何实体，包括作为联接的目标，在其中取代
    “of_type()” 修改器。
- en: 'References: [#2333](https://www.sqlalchemy.org/trac/ticket/2333)'
  id: totrans-3055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2333](https://www.sqlalchemy.org/trac/ticket/2333)
- en: '**[orm] [feature]**'
  id: totrans-3056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The of_type() construct on attributes now accepts aliased() class constructs
    as well as with_polymorphic constructs, and works with query.join(), any(), has(),
    and also eager loaders subqueryload(), joinedload(), contains_eager()
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在属性上的 of_type() 结构现在接受别名化（aliased()）类构造以及多态（with_polymorphic）构造，并且与 query.join()、any()、has()
    以及同时也适用于 eager loaders 子查询加载（subqueryload()）、连接加载（joinedload()）、包含加载（contains_eager()）。
- en: 'References: [#1106](https://www.sqlalchemy.org/trac/ticket/1106), [#2438](https://www.sqlalchemy.org/trac/ticket/2438)'
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1106](https://www.sqlalchemy.org/trac/ticket/1106)，[#2438](https://www.sqlalchemy.org/trac/ticket/2438)
- en: '**[orm] [feature]**'
  id: totrans-3059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Improvements to event listening for mapped classes allows that unmapped classes
    can be specified for instance- and mapper-events. The established events will
    be automatically set up on subclasses of that class when the propagate=True flag
    is passed, and the events will be set up for that class itself if and when it
    is ultimately mapped.
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于映射类的事件监听的改进允许指定未映射的类用于实例和映射器事件。当传递 propagate=True 标志时，建立的事件将自动设置在该类的子类上，当最终映射时，事件将为该类本身设置。
- en: 'References: [#2585](https://www.sqlalchemy.org/trac/ticket/2585)'
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2585](https://www.sqlalchemy.org/trac/ticket/2585)
- en: '**[orm] [feature]**'
  id: totrans-3062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “deferred declarative reflection” system has been moved into the declarative
    extension itself, using the new DeferredReflection class. This class is now tested
    with both single and joined table inheritance use cases.
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “延迟声明式反射”系统已经移动到声明式扩展本身中，使用新的 DeferredReflection 类。此类现在已经针对单表和联合表继承用例进行了测试。
- en: 'References: [#2485](https://www.sqlalchemy.org/trac/ticket/2485)'
  id: totrans-3064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2485](https://www.sqlalchemy.org/trac/ticket/2485)
- en: '**[orm] [feature]**'
  id: totrans-3065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new core function “inspect()”, which serves as a generic gateway to introspection
    into mappers, objects, others. The Mapper and InstanceState objects have been
    enhanced with a public API that allows inspection of mapped attributes, including
    filters for column-bound or relationship-bound properties, inspection of current
    object state, history of attributes, etc.
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的核心函数“inspect()”，它作为对映射器、对象、其他内容进行内省的通用网关。Mapper 和 InstanceState 对象已经增强，提供了公共
    API，允许检查映射的属性，包括针对列绑定或关系绑定属性的过滤器，检查当前对象状态，属性历史记录等。
- en: 'References: [#2208](https://www.sqlalchemy.org/trac/ticket/2208)'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2208](https://www.sqlalchemy.org/trac/ticket/2208)
- en: '**[orm] [feature]**'
  id: totrans-3068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Calling rollback() within a session.begin_nested() will now only expire those
    objects that had net changes within the scope of that transaction, that is objects
    which were dirty or were modified on a flush. This allows the typical use case
    for begin_nested(), that of altering a small subset of objects, to leave in place
    the data from the larger enclosing set of objects that weren’t modified in that
    sub-transaction.
  id: totrans-3069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 session.begin_nested() 中调用 rollback() 现在只会使那些在该事务范围内具有净更改的对象失效，即在刷新时脏对象或修改的对象。这允许
    begin_nested() 的典型用例，即修改一小部分对象，保留不在子事务中修改的较大对象集合中的数据。
- en: 'References: [#2452](https://www.sqlalchemy.org/trac/ticket/2452)'
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2452](https://www.sqlalchemy.org/trac/ticket/2452)
- en: '**[orm] [feature]**'
  id: totrans-3071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added utility feature Session.enable_relationship_loading(), supersedes relationship.load_on_pending.
    Both features should be avoided, however.
  id: totrans-3072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了实用功能 Session.enable_relationship_loading()，取代了 relationship.load_on_pending。然而，应该避免使用这两个功能。
- en: 'References: [#2372](https://www.sqlalchemy.org/trac/ticket/2372)'
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2372](https://www.sqlalchemy.org/trac/ticket/2372)
- en: '**[orm] [feature]**'
  id: totrans-3074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added support for .info dictionary argument to column_property(), relationship(),
    composite(). All MapperProperty classes have an auto-creating .info dict available
    overall.
  id: totrans-3075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 column_property()、relationship()、composite() 的 .info 字典参数的支持。所有 MapperProperty
    类都可以在整体上使用自动创建的 .info 字典。
- en: '**[orm] [feature]**'
  id: totrans-3076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Adding/removing None from a mapped collection now generates attribute events.
    Previously, a None append would be ignored in some cases. Related to.
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向/从映射集合中添加/移除 None 现在会生成属性事件。以前，在某些情况下，None 追加会被忽略。相关内容。
- en: 'References: [#2229](https://www.sqlalchemy.org/trac/ticket/2229)'
  id: totrans-3078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2229](https://www.sqlalchemy.org/trac/ticket/2229)
- en: '**[orm] [feature]**'
  id: totrans-3079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The presence of None in a mapped collection now raises an error during flush.
    Previously, None values in collections would be silently ignored.
  id: totrans-3080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射集合中存在 None 现在在刷新时会引发错误。以前，集合中的 None 值会被静默忽略。
- en: 'References: [#2229](https://www.sqlalchemy.org/trac/ticket/2229)'
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2229](https://www.sqlalchemy.org/trac/ticket/2229)
- en: '**[orm] [feature]**'
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Query.update() method is now more lenient as to the table being updated.
    Plain Table objects are better supported now, and additional a joined-inheritance
    subclass may be used with update(); the subclass table will be the target of the
    update, and if the parent table is referenced in the WHERE clause, the compiler
    will call upon UPDATE..FROM syntax as allowed by the dialect to satisfy the WHERE
    clause. MySQL’s multi-table update feature is also supported if columns are specified
    by object in the “values” dictionary. PG’s DELETE..USING is also not available
    in Core yet.
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query.update() 方法现在对更新的表更加宽松。现在更好地支持普通的 Table 对象，并且可以使用一个加入继承的子类与 update() 一起使用；子类表将成为更新的目标，如果父表在
    WHERE 子句中被引用，编译器将调用 UPDATE..FROM 语法来满足 WHERE 子句。如果在“values”字典中通过对象指定列，还支持 MySQL
    的多表更新功能。PG 的 DELETE..USING 在 Core 中还不可用。
- en: '**[orm] [feature]**'
  id: totrans-3084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: New session events after_transaction_create and after_transaction_end allows
    tracking of new SessionTransaction objects. If the object is inspected, can be
    used to determine when a session first becomes active and when it deactivates.
  id: totrans-3085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的 session 事件 after_transaction_create 和 after_transaction_end 允许跟踪新的 SessionTransaction
    对象。如果检查对象，则可以确定会话何时首次激活以及何时停用。
- en: '**[orm] [feature]**'
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Query can now load entity/scalar-mixed “tuple” rows that contain types which
    aren’t hashable, by setting the flag “hashable=False” on the corresponding TypeEngine
    object in use. Custom types that return unhashable types (typically lists) can
    set this flag to False.
  id: totrans-3087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 Query 可以通过在使用的相应 TypeEngine 对象上设置标志“hashable=False”来加载包含不可哈希类型的实体/标量混合“元组”行。返回不可哈希类型（通常是列表）的自定义类型可以将此标志设置为
    False。
- en: 'References: [#2592](https://www.sqlalchemy.org/trac/ticket/2592)'
  id: totrans-3088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2592](https://www.sqlalchemy.org/trac/ticket/2592)
- en: '**[orm] [feature]**'
  id: totrans-3089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Query now “auto correlates” by default in the same way as select() does. Previously,
    a Query used as a subquery in another would require the correlate() method be
    called explicitly in order to correlate a table on the inside to the outside.
    As always, correlate(None) disables correlation.
  id: totrans-3090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 Query 默认会像 select() 一样“自动关联”。以前，在另一个查询中使用的 Query 需要显式调用 correlate() 方法才能将内部的表与外部关联起来。如常，correlate(None)
    可以禁用关联。
- en: 'References: [#2179](https://www.sqlalchemy.org/trac/ticket/2179)'
  id: totrans-3091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2179](https://www.sqlalchemy.org/trac/ticket/2179)
- en: '**[orm] [feature]**'
  id: totrans-3092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The after_attach event is now emitted after the object is established in Session.new
    or Session.identity_map upon Session.add(), Session.merge(), etc., so that the
    object is represented in these collections when the event is called. Added before_attach
    event to accommodate use cases that need autoflush w pre-attached object.
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在对象在 Session.add()、Session.merge() 等方法中建立在 Session.new 或 Session.identity_map
    中后，会发出 after_attach 事件，以便在调用事件时这些集合中表示对象。添加了 before_attach 事件以适应需要在预附加对象时进行自动刷新的用例。
- en: 'References: [#2464](https://www.sqlalchemy.org/trac/ticket/2464)'
  id: totrans-3094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2464](https://www.sqlalchemy.org/trac/ticket/2464)
- en: '**[orm] [feature]**'
  id: totrans-3095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The Session will produce warnings when unsupported methods are used inside the
    “execute” portion of the flush. These are the familiar methods add(), delete(),
    etc. as well as collection and related-object manipulations, as called within
    mapper-level flush events like after_insert(), after_update(), etc. It’s been
    prominently documented for a long time that SQLAlchemy cannot guarantee results
    when the Session is manipulated within the execution of the flush plan, however
    users are still doing it, so now there’s a warning. Maybe someday the Session
    will be enhanced to support these operations inside of the flush, but for now,
    results can’t be guaranteed.
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 flush 的“execute”部分中使用不受支持的方法时，会产生警告。这些是熟悉的方法 add()、delete() 等，以及在 mapper
    级别 flush 事件中调用的集合和相关对象操作，如 after_insert()、after_update() 等。长期以来，已经明确记录了当 Session
    在执行 flush 计划时被操作时，SQLAlchemy 无法保证结果，但用户仍在这样做，所以现在有了警告。也许将来 Session 将被增强以支持在 flush
    中执行这些操作，但目前无法保证结果。
- en: '**[orm] [feature]**'
  id: totrans-3097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: ORM entities can be passed to the core select() construct as well as to the
    select_from(), correlate(), and correlate_except() methods of select(), where
    they will be unwrapped into selectables.
  id: totrans-3098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 实体可以传递给核心 select() 构造，以及传递给 select() 的 select_from()、correlate() 和 correlate_except()
    方法，它们将被解包为可选择项。
- en: 'References: [#2245](https://www.sqlalchemy.org/trac/ticket/2245)'
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2245](https://www.sqlalchemy.org/trac/ticket/2245)
- en: '**[orm] [feature]**'
  id: totrans-3100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Some support for auto-rendering of a relationship join condition based on the
    mapped attribute, with usage of core SQL constructs. E.g. select([SomeClass]).where(SomeClass.somerelationship)
    would render SELECT from “someclass” and use the primaryjoin of “somerelationship”
    as the WHERE clause. This changes the previous meaning of “SomeClass.somerelationship”
    when used in a core SQL context; previously, it would “resolve” to the parent
    selectable, which wasn’t generally useful. Also works with query.filter(). Related
    to.
  id: totrans-3101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些支持根据映射属性自动渲染关系连接条件的功能，使用核心 SQL 构造。例如，select([SomeClass]).where(SomeClass.somerelationship)
    将从“someclass”中选择，并使用“somerelationship”的主连接作为 WHERE 子句。这改变了在核心 SQL 上下文中使用“SomeClass.somerelationship”之前的含义；以前，它会“解析”为父可选择项，这通常不太有用。也适用于
    query.filter()。相关链接。
- en: 'References: [#2245](https://www.sqlalchemy.org/trac/ticket/2245)'
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2245](https://www.sqlalchemy.org/trac/ticket/2245)
- en: '**[orm] [feature]**'
  id: totrans-3103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The registry of classes in declarative_base() is now a WeakValueDictionary.
    So subclasses of “Base” that are dereferenced will be garbage collected, *if they
    are not referred to by any other mappers/superclass mappers*. See the next note
    for this ticket.
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 declarative_base() 中的类注册表现在是 WeakValueDictionary。因此，“Base”的子类如果没有被其他映射器/超类映射器引用，将被垃圾回收。查看此票证的下一个注释。
- en: 'References: [#2526](https://www.sqlalchemy.org/trac/ticket/2526)'
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2526](https://www.sqlalchemy.org/trac/ticket/2526)
- en: '**[orm] [feature]**'
  id: totrans-3106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Conflicts between columns on single-inheritance declarative subclasses, with
    or without using a mixin, can be resolved using a new @declared_attr usage described
    in the documentation.
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单继承声明子类之间的列冲突，无论是否使用混合类，都可以使用文档中描述的新的 @declared_attr 用法解决。
- en: 'References: [#2472](https://www.sqlalchemy.org/trac/ticket/2472)'
  id: totrans-3108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2472](https://www.sqlalchemy.org/trac/ticket/2472)
- en: '**[orm] [feature]**'
  id: totrans-3109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: declared_attr can now be used on non-mixin classes, even though this is generally
    only useful for single-inheritance subclass column conflict resolution.
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declared_attr 现在可以用于非混合类，尽管这通常只对单继承子类列冲突解决有用。
- en: 'References: [#2472](https://www.sqlalchemy.org/trac/ticket/2472)'
  id: totrans-3111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2472](https://www.sqlalchemy.org/trac/ticket/2472)
- en: '**[orm] [feature]**'
  id: totrans-3112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: declared_attr can now be used with attributes that are not Column or MapperProperty;
    including any user-defined value as well as association proxy objects.
  id: totrans-3113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: declared_attr 现在可以与不是 Column 或 MapperProperty 的属性一起使用；包括任何用户定义的值以及关联代理对象。
- en: 'References: [#2517](https://www.sqlalchemy.org/trac/ticket/2517)'
  id: totrans-3114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2517](https://www.sqlalchemy.org/trac/ticket/2517)
- en: '**[orm] [feature]**'
  id: totrans-3115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: '*Very limited* support for inheriting mappers to be GC’ed when the class itself
    is deferenced. The mapper must not have its own table (i.e. single table inh only)
    without polymorphic attributes in place. This allows for the use case of creating
    a temporary subclass of a declarative mapped class, with no table or mapping directives
    of its own, to be garbage collected when dereferenced by a unit test.'
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*非常有限*的支持，用于继承映射器在类本身被解除引用时进行垃圾回收。映射器不能拥有自己的表（即只有单个表继承），没有多态属性。这允许创建声明性映射类的临时子类的用例，在被单元测试解除引用时进行垃圾回收。'
- en: 'References: [#2526](https://www.sqlalchemy.org/trac/ticket/2526)'
  id: totrans-3117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2526](https://www.sqlalchemy.org/trac/ticket/2526)
- en: '**[orm] [feature]**'
  id: totrans-3118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Declarative now maintains a registry of classes by string name as well as by
    full module-qualified name. Multiple classes with the same name can now be looked
    up based on a module-qualified string within relationship(). Simple class name
    lookups where more than one class shares the same name now raises an informative
    error message.
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 现在通过字符串名称以及完整的模块限定名称维护类的注册表。现在可以根据模块限定的字符串在 relationship() 中查找具有相同名称的多个类。当多个类共享相同名称时，简单的类名称查找现在会引发一条信息性错误消息。
- en: 'References: [#2338](https://www.sqlalchemy.org/trac/ticket/2338)'
  id: totrans-3120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2338](https://www.sqlalchemy.org/trac/ticket/2338)
- en: '**[orm] [feature]**'
  id: totrans-3121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Can now provide class-bound attributes that override columns which are of any
    non-ORM type, not just descriptors.
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以提供类绑定属性，这些属性会覆盖任何非 ORM 类型的列，而不仅仅是描述符。
- en: 'References: [#2535](https://www.sqlalchemy.org/trac/ticket/2535)'
  id: totrans-3123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2535](https://www.sqlalchemy.org/trac/ticket/2535)
- en: '**[orm] [feature]**'
  id: totrans-3124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added with_labels and reduce_columns keyword arguments to Query.subquery(),
    to provide two alternate strategies for producing queries with uniquely- named
    columns. .
  id: totrans-3125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Query.subquery() 添加了 with_labels 和 reduce_columns 关键字参数，以提供两种用于生成具有唯一命名列的查询的替代策略。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-3126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[orm] [feature]**'
  id: totrans-3127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A warning is emitted when a reference to an instrumented collection is no longer
    associated with the parent class due to expiration/attribute refresh/collection
    replacement, but an append or remove operation is received on the now-detached
    collection.
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对一个工具化集合的引用不再与父类相关联（因为到期/属性刷新/集合替换），但是接收到现在已分离的集合上的 append 或 remove 操作时，会发出警告。
- en: 'References: [#2476](https://www.sqlalchemy.org/trac/ticket/2476)'
  id: totrans-3129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2476](https://www.sqlalchemy.org/trac/ticket/2476)
- en: '**[orm] [bug]**'
  id: totrans-3130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM will perform extra effort to determine that an FK dependency between two
    tables is not significant during flush if the tables are related via joined inheritance
    and the FK dependency is not part of the inherit_condition, saves the user a use_alter
    directive.
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果两个表通过连接继承相关，并且 FK 依赖关系不是 inherit_condition 的一部分，则 ORM 在 flush 期间将执行额外的工作来确定
    FK 依赖关系不重要，这样用户就不需要使用 use_alter 指令。
- en: 'References: [#2527](https://www.sqlalchemy.org/trac/ticket/2527)'
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2527](https://www.sqlalchemy.org/trac/ticket/2527)
- en: '**[orm] [bug]**'
  id: totrans-3133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The instrumentation events class_instrument(), class_uninstrument(), and attribute_instrument()
    will now fire off only for descendant classes of the class assigned to listen().
    Previously, an event listener would be assigned to listen for all classes in all
    cases regardless of the “target” argument passed.
  id: totrans-3134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，instrumentation 事件 class_instrument()、class_uninstrument() 和 attribute_instrument()
    仅对分配给 listen() 的类的后代类触发。以前，无论传递了什么“target”参数，事件监听器都会被分配为在所有情况下监听所有类。
- en: 'References: [#2590](https://www.sqlalchemy.org/trac/ticket/2590)'
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2590](https://www.sqlalchemy.org/trac/ticket/2590)
- en: '**[orm] [bug]**'
  id: totrans-3136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: with_polymorphic() produces JOINs in the correct order and with correct inheriting
    tables in the case of sending multi-level subclasses in an arbitrary order or
    with intermediary classes missing.
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 with_polymorphic() 中，如果以任意顺序发送多级子类或者中间类缺失，则会正确按顺序生成 JOIN 并正确生成继承表。
- en: 'References: [#1900](https://www.sqlalchemy.org/trac/ticket/1900)'
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1900](https://www.sqlalchemy.org/trac/ticket/1900)
- en: '**[orm] [bug]**'
  id: totrans-3139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improvements to joined/subquery eager loading dealing with chains of subclass
    entities sharing a common base, with no specific “join depth” provided. Will chain
    out to each subclass mapper individually before detecting a “cycle”, rather than
    considering the base class to be the source of the “cycle”.
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在处理共享共同基类的子类实体链的 joined/subquery eager loading 中进行了改进，没有提供特定的“连接深度”。在检测到“循环”之前，会逐个链到每个子类映射器，而不是将基类视为“循环”的源。 '
- en: 'References: [#2481](https://www.sqlalchemy.org/trac/ticket/2481)'
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2481](https://www.sqlalchemy.org/trac/ticket/2481)
- en: '**[orm] [bug]**'
  id: totrans-3142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “passive” flag on Session.is_modified() no longer has any effect. is_modified()
    in all cases looks only at local in-memory modified flags and will not emit any
    SQL or invoke loader callables/initializers.
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，Session.is_modified() 上的“passive”标志不再起作用。在所有情况下，is_modified() 只查看本地内存中的修改标志，并且不会发出任何
    SQL 或调用加载器可调用/初始化器。
- en: 'References: [#2320](https://www.sqlalchemy.org/trac/ticket/2320)'
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2320](https://www.sqlalchemy.org/trac/ticket/2320)
- en: '**[orm] [bug]**'
  id: totrans-3145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The warning emitted when using delete-orphan cascade with one-to-many or many-to-many
    without single-parent=True is now an error. The ORM would fail to function subsequent
    to this warning in any case.
  id: totrans-3146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 delete-orphan 级联与 one-to-many 或 many-to-many 且没有设置 single-parent=True 时发出的警告现在是一个错误。在任何情况下，ORM
    在此警告后将无法正常运行。
- en: 'References: [#2405](https://www.sqlalchemy.org/trac/ticket/2405)'
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2405](https://www.sqlalchemy.org/trac/ticket/2405)
- en: '**[orm] [bug]**'
  id: totrans-3148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Lazy loads emitted within flush events such as before_flush(), before_update(),
    etc. will now function as they would within non-event code, regarding consideration
    of the PK/FK values used in the lazy-emitted query. Previously, special flags
    would be established that would cause lazy loads to load related items based on
    the “previous” value of the parent PK/FK values specifically when called upon
    within a flush; the signal to load in this way is now localized to where the unit
    of work actually needs to load that way. Note that the UOW does sometimes load
    these collections before the before_update() event is called, so the usage of
    “passive_updates” or not can affect whether or not a collection will represent
    the “old” or “new” data, when accessed within a flush event, based on when the
    lazy load was emitted. The change is backwards incompatible in the exceedingly
    small chance that user event code depended on the old behavior.
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 flush 事件中发出的惰性加载（如 before_flush()、before_update() 等）现在将按照非事件代码中的方式运行，考虑到在惰性发出的查询中使用的主键/外键值。之前，特殊标志将被建立，这些标志将导致惰性加载基于父主键/外键值的“先前”值，特别是在
    flush 中调用时；现在，以这种方式加载的信号现在被局限于工作单元实际需要以这种方式加载的位置。请注意，工作单元有时会在调用 before_update()
    事件之前加载这些集合，因此“passive_updates”的使用与否可能会影响在 flush 事件中访问时集合是否表示“旧”或“新”数据，具体取决于惰性加载的时间。该更改在极小的可能性下与旧行为相关的用户事件代码依赖不兼容。
- en: 'References: [#2350](https://www.sqlalchemy.org/trac/ticket/2350)'
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2350](https://www.sqlalchemy.org/trac/ticket/2350)
- en: '**[orm] [bug]**'
  id: totrans-3151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Continuing regarding extra state post-flush due to event listeners; any states
    that are marked as “dirty” from an attribute perspective, usually via column-attribute
    set events within after_insert(), after_update(), etc., will get the “history”
    flag reset in all cases, instead of only those instances that were part of the
    flush. This has the effect that this “dirty” state doesn’t carry over after the
    flush and won’t result in UPDATE statements. A warning is emitted to this effect;
    the set_committed_state() method can be used to assign attributes on objects without
    producing history events.
  id: totrans-3152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 flush 后额外状态的持续讨论，由于事件侦听器，任何从属性角度标记为“脏”的状态，通常是通过在 after_insert()、after_update()
    等中设置列属性事件来完成的，现在在所有情况下都将重置“历史”标志，而不仅仅是那些在 flush 中的实例。这样做的效果是，在 flush 后，这种“脏”状态不会继续存在，并且不会产生
    UPDATE 语句。发出了相应的警告；set_committed_state() 方法可用于在不产生历史事件的情况下分配对象上的属性。
- en: 'References: [#2566](https://www.sqlalchemy.org/trac/ticket/2566), [#2582](https://www.sqlalchemy.org/trac/ticket/2582)'
  id: totrans-3153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2566](https://www.sqlalchemy.org/trac/ticket/2566)，[#2582](https://www.sqlalchemy.org/trac/ticket/2582)
- en: '**[orm] [bug]**'
  id: totrans-3154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a disconnect that slowly evolved between a @declared_attr Column and a
    directly-defined Column on a mixin. In both cases, the Column will be applied
    to the declared class’ table, but not to that of a joined inheritance subclass.
    Previously, the directly-defined Column would be placed on both the base and the
    sub table, which isn’t typically what’s desired.
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 @declared_attr Column 和直接定义的 Column 之间逐渐发展的断开连接。在这两种情况下，Column 将应用于声明类的表，但不适用于联合继承子类的表。之前，直接定义的
    Column 将被放置在基表和子表上，这通常不是所期望的。
- en: 'References: [#2565](https://www.sqlalchemy.org/trac/ticket/2565)'
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2565](https://www.sqlalchemy.org/trac/ticket/2565)
- en: '**[orm] [bug]**'
  id: totrans-3157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Declarative can now propagate a column declared on a single-table inheritance
    subclass up to the parent class’ table, when the parent class is itself mapped
    to a join() or select() statement, directly or via joined inheritance, and not
    just a Table.
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当父类本身被映射到 join() 或 select() 语句时，Declarative 现在可以将在单表继承子类上声明的列传播到父类的表上，而不仅仅是通过连接继承直接或间接映射到表上。
- en: 'References: [#2549](https://www.sqlalchemy.org/trac/ticket/2549)'
  id: totrans-3159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2549](https://www.sqlalchemy.org/trac/ticket/2549)
- en: '**[orm] [bug]**'
  id: totrans-3160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An error is emitted when uselist=False is combined with a “dynamic” loader.
    This is a warning in 0.7.9.
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 uselist=False 与“dynamic”加载器结合时会发出错误。这在 0.7.9 中是一个警告。
- en: '**[orm] [removed]**'
  id: totrans-3162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [removed]**'
- en: The legacy “mutable” system of the ORM, including the MutableType class as well
    as the mutable=True flag on PickleType and postgresql.ARRAY has been removed.
    In-place mutations are detected by the ORM using the sqlalchemy.ext.mutable extension,
    introduced in 0.7\. The removal of MutableType and associated constructs removes
    a great deal of complexity from SQLAlchemy’s internals. The approach performed
    poorly as it would incur a scan of the full contents of the Session when in use.
  id: totrans-3163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 的遗留“可变”系统，包括 MutableType 类以及 PickleType 和 postgresql.ARRAY 上的 mutable=True
    标志已被移除。ORM 使用 sqlalchemy.ext.mutable 扩展检测原地突变，该扩展在 0.7 中引入。移除 MutableType 和相关构造从
    SQLAlchemy 的内部删除了大量复杂性。由于在使用时会扫描 Session 的全部内容，这种方法性能较差。
- en: 'References: [#2442](https://www.sqlalchemy.org/trac/ticket/2442)'
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2442](https://www.sqlalchemy.org/trac/ticket/2442)
- en: '**[orm] [removed]**'
  id: totrans-3165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [removed]**'
- en: 'Deprecated identifiers removed:'
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除的已弃用标识符：
- en: allow_null_pks mapper() argument (use allow_partial_pks)
  id: totrans-3167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: allow_null_pks mapper() 参数（使用 allow_partial_pks）
- en: _get_col_to_prop() mapper method (use get_property_by_column())
  id: totrans-3168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _get_col_to_prop() mapper 方法（使用 get_property_by_column()）
- en: dont_load argument to Session.merge() (use load=True)
  id: totrans-3169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Session.merge() 的 dont_load 参数（使用 load=True）
- en: sqlalchemy.orm.shard module (use sqlalchemy.ext.horizontal_shard)
  id: totrans-3170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlalchemy.orm.shard 模块（使用 sqlalchemy.ext.horizontal_shard）
- en: '**[orm] [moved]**'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [moved]**'
- en: The InstrumentationManager interface and the entire related system of alternate
    class implementation is now moved out to sqlalchemy.ext.instrumentation. This
    is a seldom used system that adds significant complexity and overhead to the mechanics
    of class instrumentation. The new architecture allows it to remain unused until
    InstrumentationManager is actually imported, at which point it is bootstrapped
    into the core.
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InstrumentationManager 接口及整个相关的替代类实现系统现已移动到 sqlalchemy.ext.instrumentation。这是一个很少使用的系统，它给类的实现机制增加了显著的复杂性和开销。新的架构允许直到实际导入
    InstrumentationManager 时才使用它，此时它被引导到核心中。
- en: examples
  id: totrans-3173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples]**'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子]**'
- en: The Beaker caching example has been converted to use [dogpile.cache](https://dogpilecache.readthedocs.io/).
    This is a new caching library written by the same creator of Beaker’s caching
    internals, and represents a vastly improved, simplified, and modernized system
    of caching.
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Beaker 缓存示例已转换为使用 [dogpile.cache](https://dogpilecache.readthedocs.io/)。这是一个由
    Beaker 的缓存内部创建者编写的新的缓存库，代表了一个大大改进的、简化的、现代化的缓存系统。
- en: See also
  id: totrans-3176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Dogpile Caching](../orm/examples.html#examples-caching)'
  id: totrans-3177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Dogpile 缓存](../orm/examples.html#examples-caching)'
- en: 'References: [#2589](https://www.sqlalchemy.org/trac/ticket/2589)'
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2589](https://www.sqlalchemy.org/trac/ticket/2589)
- en: engine
  id: totrans-3179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Connection event listeners can now be associated with individual Connection
    objects, not just Engine objects.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将连接事件监听器与单个连接对象关联，而不仅仅是与 Engine 对象关联。
- en: 'References: [#2511](https://www.sqlalchemy.org/trac/ticket/2511)'
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2511](https://www.sqlalchemy.org/trac/ticket/2511)
- en: '**[engine] [feature]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The before_cursor_execute event fires off for so-called “_cursor_execute” events,
    which are usually special-case executions of primary-key bound sequences and default-generation
    SQL phrases that invoke separately when RETURNING is not used with INSERT.
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: before_cursor_execute 事件会触发所谓的“_cursor_execute”事件，这些事件通常是主键绑定序列和默认生成的 SQL 语句的特殊执行情况，当使用
    INSERT 时未使用 RETURNING 时单独调用。
- en: 'References: [#2459](https://www.sqlalchemy.org/trac/ticket/2459)'
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2459](https://www.sqlalchemy.org/trac/ticket/2459)
- en: '**[engine] [feature]**'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The libraries used by the test suite have been moved around a bit so that they
    are part of the SQLAlchemy install again. In addition, a new suite of tests is
    present in the new sqlalchemy.testing.suite package. This is an under-development
    system that hopes to provide a universal testing suite for external dialects.
    Dialects which are maintained outside of SQLAlchemy can use the new test fixture
    as the framework for their own tests, and will get for free a “compliance” suite
    of dialect-focused tests, including an improved “requirements” system where specific
    capabilities and features can be enabled or disabled for testing.
  id: totrans-3187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试套件使用的库已经重新安排，以便它们再次成为SQLAlchemy安装的一部分。此外，新的测试套件现在位于新的sqlalchemy.testing.suite包中。这是一个正在开发中的系统，希望为外部方言提供一个通用的测试套件。在SQLAlchemy之外维护的方言可以使用新的测试装置作为其自己测试的框架，并将免费获得一个针对方言的“兼容性”测试套件，包括一个改进的“要求”系统，其中可以为测试启用或禁用特定功能和功能。
- en: '**[engine] [feature]**'
  id: totrans-3188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added a new system for registration of new dialects in-process without using
    an entrypoint. See the docs for “Registering New Dialects”.
  id: totrans-3189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种新的在进程中注册新方言而不使用入口点的系统。请参阅“注册新方言”文档。
- en: 'References: [#2462](https://www.sqlalchemy.org/trac/ticket/2462)'
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2462](https://www.sqlalchemy.org/trac/ticket/2462)
- en: '**[engine] [feature]**'
  id: totrans-3191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The “required” flag is set to True by default, if not passed explicitly, on
    bindparam() if the “value” or “callable” parameters are not passed. This will
    cause statement execution to check for the parameter being present in the final
    collection of bound parameters, rather than implicitly assigning None.
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，“required”标志在bindparam()上设置为True，如果“value”或“callable”参数未显式传递，则会导致语句执行检查参数是否存在于最终绑定参数集合中，而不是隐式分配None。
- en: 'References: [#2556](https://www.sqlalchemy.org/trac/ticket/2556)'
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2556](https://www.sqlalchemy.org/trac/ticket/2556)
- en: '**[engine] [feature]**'
  id: totrans-3194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Various API tweaks to the “dialect” API to better support highly specialized
    systems such as the Akiban database, including more hooks to allow an execution
    context to access type processors.
  id: totrans-3195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“dialect” API进行了各种API调整，以更好地支持高度专业化的系统，如Akiban数据库，包括更多的钩子以允许执行上下文访问类型处理器。
- en: '**[engine] [feature]**'
  id: totrans-3196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Inspector.get_primary_keys() is deprecated; use Inspector.get_pk_constraint().
    Courtesy Diana Clarke.
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Inspector.get_primary_keys()已弃用；请使用Inspector.get_pk_constraint()。感谢Diana Clarke。
- en: 'References: [#2422](https://www.sqlalchemy.org/trac/ticket/2422)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2422](https://www.sqlalchemy.org/trac/ticket/2422)
- en: '**[engine] [feature]**'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: New C extension module “utils” has been added for additional function speedups
    as we have time to implement.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的C扩展模块“utils”，用于在有时间实现时提供额外的功能加速。
- en: '**[engine] [bug]**'
  id: totrans-3201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The Inspector.get_table_names() order_by=”foreign_key” feature now sorts tables
    by dependee first, to be consistent with util.sort_tables and metadata.sorted_tables.
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Inspector.get_table_names()的order_by=”foreign_key”功能现在首先按dependee排序表，以与util.sort_tables和metadata.sorted_tables保持一致。
- en: '**[engine] [bug]**'
  id: totrans-3203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug whereby if a database restart affected multiple connections, each
    connection would individually invoke a new disposal of the pool, even though only
    one disposal is needed.
  id: totrans-3204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果数据库重新启动影响多个连接，则每个连接将单独调用池的新处理，即使只需要一个处理。
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-3206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The names of the columns on the .c. attribute of a select().apply_labels() is
    now based on <tablename>_<colkey> instead of <tablename>_<colname>, for those
    columns that have a distinctly named .key.
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select().apply_labels()上的.c.属性的列名称现在基于<tablename>_<colkey>而不是<tablename>_<colname>，对于那些具有明确定义的.key的列。
- en: 'References: [#2397](https://www.sqlalchemy.org/trac/ticket/2397)'
  id: totrans-3208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2397](https://www.sqlalchemy.org/trac/ticket/2397)
- en: '**[engine] [bug]**'
  id: totrans-3209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The autoload_replace flag on Table, when False, will cause any reflected foreign
    key constraints which refer to already-declared columns to be skipped, assuming
    that the in-Python declared column will take over the task of specifying in-Python
    ForeignKey or ForeignKeyConstraint declarations.
  id: totrans-3210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Table上的autoload_replace标志为False时，将跳过引用已声明列的反射外键约束，假设在Python中声明的列将接管指定Python
    ForeignKey或ForeignKeyConstraint声明的任务。
- en: '**[engine] [bug]**'
  id: totrans-3211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The ResultProxy methods inserted_primary_key, last_updated_params(), last_inserted_params(),
    postfetch_cols(), prefetch_cols() all assert that the given statement is a compiled
    construct, and is an insert() or update() statement as is appropriate, else raise
    InvalidRequestError.
  id: totrans-3212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy方法inserted_primary_key，last_updated_params()，last_inserted_params()，postfetch_cols()，prefetch_cols()都断言给定的语句是一个已编译的构造，并且是一个适当的insert()或update()语句，否则引发InvalidRequestError。
- en: 'References: [#2498](https://www.sqlalchemy.org/trac/ticket/2498)'
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2498](https://www.sqlalchemy.org/trac/ticket/2498)
- en: '**[engine]**'
  id: totrans-3214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: ResultProxy.last_inserted_ids is removed, replaced by inserted_primary_key.
  id: totrans-3215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy.last_inserted_ids已被移除，替换为inserted_primary_key。
- en: sql
  id: totrans-3216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new method [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") to [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). This method works similarly to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") in that it creates a copy of
    the parent object which will refer to the new set of options. The method can be
    used to build sharding schemes where each engine shares the same underlying pool
    of connections. The method has been tested against the horizontal shard recipe
    in the ORM as well.
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新方法[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")到[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。该方法类似于[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")，它创建一个指向新选项集的父对象的副本。该方法可用于构建分片方案，其中每个引擎共享相同的底层连接池。该方法已针对ORM中的水平分片配方进行了测试。
- en: See also
  id: totrans-3219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")'
- en: '**[sql] [feature]**'
  id: totrans-3221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Major rework of operator system in Core, to allow redefinition of existing operators
    as well as addition of new operators at the type level. New types can be created
    from existing ones which add or redefine operations that are exported out to column
    expressions, in a similar manner to how the ORM has allowed comparator_factory.
    The new architecture moves this capability into the Core so that it is consistently
    usable in all cases, propagating cleanly using existing type propagation behavior.
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Core中对操作符系统进行了重大改组，允许在类型级别重新定义现有操作符以及添加新操作符。可以从现有类型创建新类型，这些新类型添加或重新定义导出到列表达式的操作，类似于ORM如何允许comparator_factory。新架构将此功能移入Core，以便在所有情况下一致可用，并且使用现有类型传播行为进行干净传播。
- en: 'References: [#2547](https://www.sqlalchemy.org/trac/ticket/2547)'
  id: totrans-3223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2547](https://www.sqlalchemy.org/trac/ticket/2547)
- en: '**[sql] [feature]**'
  id: totrans-3224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: To complement, types can now provide “bind expressions” and “column expressions”
    which allow compile-time injection of SQL expressions into statements on a per-column
    or per-bind level. This is to suit the use case of a type which needs to augment
    bind- and result- behavior at the SQL level, as opposed to in the Python level.
    Allows for schemes like transparent encryption/ decryption, usage of PostGIS functions,
    etc.
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了补充，现在类型可以提供“绑定表达式”和“列表达式”，允许在每列或每绑定级别的语句中在编译时注入SQL表达式。这适用于需要在SQL级别增强绑定和结果行为的类型的用例，而不是在Python级别。允许方案如透明加密/解密，使用PostGIS函数等。
- en: 'References: [#1534](https://www.sqlalchemy.org/trac/ticket/1534), [#2547](https://www.sqlalchemy.org/trac/ticket/2547)'
  id: totrans-3226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1534](https://www.sqlalchemy.org/trac/ticket/1534), [#2547](https://www.sqlalchemy.org/trac/ticket/2547)
- en: '**[sql] [feature]**'
  id: totrans-3227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Core operator system now includes the getitem operator, i.e. the bracket
    operator in Python. This is used at first to provide index and slice behavior
    to the PostgreSQL ARRAY type, and also provides a hook for end-user definition
    of custom __getitem__ schemes which can be applied at the type level as well as
    within ORM-level custom operator schemes. lshift (<<) and rshift (>>) are also
    supported as optional operators.
  id: totrans-3228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心操作符系统现在包括getitem操作符，即Python中的方括号操作符。首先用于为PostgreSQL ARRAY类型提供索引和切片行为，并且还提供了一个钩子，用于最终用户定义自定义__getitem__方案，这些方案可以应用于类型级别以及ORM级别的自定义操作符方案。lshift
    (<<)和rshift (>>)也作为可选操作符受支持。
- en: Note that this change has the effect that descriptor-based __getitem__ schemes
    used by the ORM in conjunction with synonym() or other “descriptor-wrapped” schemes
    will need to start using a custom comparator in order to maintain this behavior.
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，此更改会导致ORM与synonym()或其他“包装描述符”的方案结合使用的基于描述符的__getitem__方案需要开始使用自定义比较器以保持此行为。
- en: '**[sql] [feature]**'
  id: totrans-3230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Revised the rules used to determine the operator precedence for the user-defined
    operator, i.e. that granted using the `op()` method. Previously, the smallest
    precedence was applied in all cases, now the default precedence is zero, lower
    than all operators except “comma” (such as, used in the argument list of a `func`
    call) and “AS”, and is also customizable via the “precedence” argument on the
    `op()` method.
  id: totrans-3231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了用于确定用户定义运算符（即使用`op()`方法授予的运算符）的运算符优先级的规则。以前，在所有情况下都应用最小优先级，现在默认优先级为零，低于所有运算符，除了“逗号”（例如，在`func`调用的参数列表中使用）和“AS”，还可以通过`op()`方法上的“precedence”参数进行自定义。
- en: 'References: [#2537](https://www.sqlalchemy.org/trac/ticket/2537)'
  id: totrans-3232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2537](https://www.sqlalchemy.org/trac/ticket/2537)
- en: '**[sql] [feature]**'
  id: totrans-3233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “collation” parameter to all String types. When present, renders as COLLATE
    <collation>. This to support the COLLATE keyword now supported by several databases
    including MySQL, SQLite, and PostgreSQL.
  id: totrans-3234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向所有String类型添加了“collation”参数。当存在时，呈现为COLLATE <collation>。这是为了支持现在多个数据库支持的COLLATE关键字，包括MySQL、SQLite和PostgreSQL。
- en: 'References: [#2276](https://www.sqlalchemy.org/trac/ticket/2276)'
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2276](https://www.sqlalchemy.org/trac/ticket/2276)
- en: '**[sql] [feature]**'
  id: totrans-3236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Custom unary operators can now be used by combining operators.custom_op() with
    UnaryExpression().
  id: totrans-3237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以通过将operators.custom_op()与UnaryExpression()结合使用来使用自定义一元运算符。
- en: '**[sql] [feature]**'
  id: totrans-3238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Enhanced GenericFunction and func.* to allow for user-defined GenericFunction
    subclasses to be available via the func.* namespace automatically by classname,
    optionally using a package name, as well as with the ability to have the rendered
    name different from the identified name in func.*.
  id: totrans-3239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加强了GenericFunction和func.*，允许用户定义的GenericFunction子类通过类名自动在func.*命名空间中可用，可选择使用包名，以及具有在func.*中渲染名称与标识名称不同的功能。
- en: '**[sql] [feature]**'
  id: totrans-3240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The cast() and extract() constructs will now be produced via the func.* accessor
    as well, as users naturally try to access these names from func.* they might as
    well do what’s expected, even though the returned object is not a FunctionElement.
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在cast()和extract()构造也将通过func.*访问器生成，因为用户自然会尝试从func.*访问这些名称，他们可能会按照预期的方式执行，即使返回的对象不是FunctionElement。
- en: 'References: [#2562](https://www.sqlalchemy.org/trac/ticket/2562)'
  id: totrans-3242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2562](https://www.sqlalchemy.org/trac/ticket/2562)
- en: '**[sql] [feature]**'
  id: totrans-3243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The Inspector object can now be acquired using the new inspect() service, part
    of
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现��可以使用新的inspect()服务获取Inspector对象的实例，作为
- en: 'References: [#2208](https://www.sqlalchemy.org/trac/ticket/2208)'
  id: totrans-3245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2208](https://www.sqlalchemy.org/trac/ticket/2208)
- en: '**[sql] [feature]**'
  id: totrans-3246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The column_reflect event now accepts the Inspector object as the first argument,
    preceding “table”. Code which uses the 0.7 version of this very new event will
    need modification to add the “inspector” object as the first argument.
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在column_reflect事件接受Inspector对象作为第一个参数，位于“table”之前。使用这个非常新的事件的0.7版本的代码将需要修改以添加“inspector”对象作为第一个参数。
- en: 'References: [#2418](https://www.sqlalchemy.org/trac/ticket/2418)'
  id: totrans-3248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2418](https://www.sqlalchemy.org/trac/ticket/2418)
- en: '**[sql] [feature]**'
  id: totrans-3249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The behavior of column targeting in result sets is now case sensitive by default.
    SQLAlchemy for many years would run a case-insensitive conversion on these values,
    probably to alleviate early case sensitivity issues with dialects like Oracle
    and Firebird. These issues have been more cleanly solved in more modern versions
    so the performance hit of calling lower() on identifiers is removed. The case
    insensitive comparisons can be re-enabled by setting “case_insensitive=False”
    on create_engine().
  id: totrans-3250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在结果集中的列定位行为默认区分大小写。多年来，SQLAlchemy会对这些值进行不区分大小写的转换，可能是为了缓解像Oracle和Firebird这样的方言早期大小写敏感性问题。这些问题在更现代的版本中已经更清晰地解决，因此在标识符上调用lower()的性能损失已经消除。可以通过在create_engine()上设置“case_insensitive=False”来重新启用不区分大小写的比较。
- en: 'References: [#2423](https://www.sqlalchemy.org/trac/ticket/2423)'
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2423](https://www.sqlalchemy.org/trac/ticket/2423)
- en: '**[sql] [feature]**'
  id: totrans-3252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The “unconsumed column names” warning emitted when keys are present in insert.values()
    or update.values() that aren’t in the target table is now an exception.
  id: totrans-3253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在insert.values()或update.values()中存在键不在目标表中时，现在发出的“未使用的列名”警告已经变成异常。
- en: 'References: [#2415](https://www.sqlalchemy.org/trac/ticket/2415)'
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2415](https://www.sqlalchemy.org/trac/ticket/2415)
- en: '**[sql] [feature]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added “MATCH” clause to ForeignKey, ForeignKeyConstraint, courtesy Ryan Kelly.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ForeignKey、ForeignKeyConstraint中添加了“MATCH”子句，感谢Ryan Kelly。
- en: 'References: [#2502](https://www.sqlalchemy.org/trac/ticket/2502)'
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2502](https://www.sqlalchemy.org/trac/ticket/2502)
- en: '**[sql] [feature]**'
  id: totrans-3258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for DELETE and UPDATE from an alias of a table, which would assumedly
    be related to itself elsewhere in the query, courtesy Ryan Kelly.
  id: totrans-3259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对从表的别名进行DELETE和UPDATE的支持，这在查询中可能与其他地方的表相关联，感谢Ryan Kelly。
- en: 'References: [#2507](https://www.sqlalchemy.org/trac/ticket/2507)'
  id: totrans-3260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2507](https://www.sqlalchemy.org/trac/ticket/2507)
- en: '**[sql] [feature]**'
  id: totrans-3261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: select() features a correlate_except() method, auto correlates all selectables
    except those passed.
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select()现在具有correlate_except()方法，自动关联除传递的所有可选择项之外的所有可选择项。
- en: '**[sql] [feature]**'
  id: totrans-3263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The prefix_with() method is now available on each of select(), insert(), update(),
    delete(), all with the same API, accepting multiple prefix calls, as well as a
    “dialect name” so that the prefix can be limited to one kind of dialect.
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix_with()方法现在在select()、insert()、update()、delete()的每个上都可用，具有相同的API，接受多个前缀调用，以及“方言名称”，以便前缀可以限制为一种方言。
- en: 'References: [#2431](https://www.sqlalchemy.org/trac/ticket/2431)'
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2431](https://www.sqlalchemy.org/trac/ticket/2431)
- en: '**[sql] [feature]**'
  id: totrans-3266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added reduce_columns() method to select() construct, replaces columns inline
    using the util.reduce_columns utility function to remove equivalent columns. reduce_columns()
    also adds “with_only_synonyms” to limit the reduction just to those columns which
    have the same name. The deprecated fold_equivalents() feature is removed.
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()构造中添加了reduce_columns()方法，使用util.reduce_columns实用程序函数替换内联列以删除等效列。reduce_columns()还添加了“with_only_synonyms”以限制仅对具有相同名称的列进行减少。已弃用的fold_equivalents()功能已被移除。
- en: 'References: [#1729](https://www.sqlalchemy.org/trac/ticket/1729)'
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1729](https://www.sqlalchemy.org/trac/ticket/1729)
- en: '**[sql] [feature]**'
  id: totrans-3269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Reworked the startswith(), endswith(), contains() operators to do a better job
    with negation (NOT LIKE), and also to assemble them at compilation time so that
    their rendered SQL can be altered, such as in the case for Firebird STARTING WITH
  id: totrans-3270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了startswith()、endswith()、contains()运算符，以更好地处理否定（NOT LIKE），并在编译时组装它们，以便它们的渲染SQL可以被修改，例如在Firebird
    STARTING WITH的情况下。
- en: 'References: [#2470](https://www.sqlalchemy.org/trac/ticket/2470)'
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2470](https://www.sqlalchemy.org/trac/ticket/2470)
- en: '**[sql] [feature]**'
  id: totrans-3272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a hook to the system of rendering CREATE TABLE that provides access to
    the render for each Column individually, by constructing a @compiles function
    against the new schema.CreateColumn construct.
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个钩子到渲染CREATE TABLE的系统中，通过针对新的schema.CreateColumn构造一个@compiles函数，为每个列提供单独的渲染访问。
- en: 'References: [#2463](https://www.sqlalchemy.org/trac/ticket/2463)'
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2463](https://www.sqlalchemy.org/trac/ticket/2463)
- en: '**[sql] [feature]**'
  id: totrans-3275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: ”scalar” selects now have a WHERE method to help with generative building. Also
    slight adjustment regarding how SS “correlates” columns; the new methodology no
    longer applies meaning to the underlying Table column being selected. This improves
    some fairly esoteric situations, and the logic that was there didn’t seem to have
    any purpose.
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “标量”选择现在具有WHERE方法，以帮助生成构建。此外，关于如何SS“关联”列的轻微调整；新方法不再将所选的基础表列赋予任何含义。这改进了一些相当奇特的情况，而那里的逻辑似乎没有任何目的。
- en: '**[sql] [feature]**'
  id: totrans-3277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: An explicit error is raised when a ForeignKeyConstraint() that was constructed
    to refer to multiple remote tables is first used.
  id: totrans-3278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当首次使用构造为引用多个远程表的ForeignKeyConstraint()时，将引发显式错误。
- en: 'References: [#2455](https://www.sqlalchemy.org/trac/ticket/2455)'
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2455](https://www.sqlalchemy.org/trac/ticket/2455)
- en: '**[sql] [feature]**'
  id: totrans-3280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_"), [`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike"), [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") to [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators").
  id: totrans-3281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")，[`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike")，[`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") 到 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators").
- en: 'References: [#2580](https://www.sqlalchemy.org/trac/ticket/2580)'
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2580](https://www.sqlalchemy.org/trac/ticket/2580)
- en: '**[sql] [change]**'
  id: totrans-3283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [change]**'
- en: The Text() type renders the length given to it, if a length was specified.
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果指定了长度，Text() 类型会呈现给定的长度。
- en: '**[sql] [changed]**'
  id: totrans-3285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [changed]**'
- en: Most classes in expression.sql are no longer preceded with an underscore, i.e.
    Label, SelectBase, Generative, CompareMixin. _BindParamClause is also renamed
    to BindParameter. The old underscore names for these classes will remain available
    as synonyms for the foreseeable future.
  id: totrans-3286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: expression.sql 中的大多数类不再以下划线开头，即 Label、SelectBase、Generative、CompareMixin。_BindParamClause
    也被重命名为 BindParameter。这些类的旧下划线名称将在可预见的未来保持可用作为同义词。
- en: '**[sql] [bug]**'
  id: totrans-3287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where keyword arguments passed to `Compiler.process()` wouldn’t get
    propagated to the column expressions present in the columns clause of a SELECT
    statement. In particular this would come up when used by custom compilation schemes
    that relied upon special flags.
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了传递给 `Compiler.process()` 的关键字参数不会传播到 SELECT 语句的 columns 子句中的列表达式的 bug。特别是当由依赖于特殊标志的自定义编译方案使用时，会出现这种情况。
- en: 'References: [#2593](https://www.sqlalchemy.org/trac/ticket/2593)'
  id: totrans-3289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2593](https://www.sqlalchemy.org/trac/ticket/2593)
- en: '**[sql] [bug] [orm]**'
  id: totrans-3290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [orm]**'
- en: The auto-correlation feature of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), and by proxy that of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), will not take effect for a SELECT statement that is being
    rendered directly in the FROM list of the enclosing SELECT. Correlation in SQL
    only applies to column expressions such as those in the WHERE, ORDER BY, columns
    clause.
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的自动相关特性，以及由此引发的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    的特性，将不会对直接在包含 SELECT 的 FROM 列表中呈现的 SELECT 语句产生影响。 SQL 中的相关性仅适用于诸如 WHERE、ORDER
    BY、columns 子句中的列表达式。'
- en: 'References: [#2595](https://www.sqlalchemy.org/trac/ticket/2595)'
  id: totrans-3292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2595](https://www.sqlalchemy.org/trac/ticket/2595)
- en: '**[sql] [bug]**'
  id: totrans-3293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A tweak to column precedence which moves the “concat” and “match” operators
    to be the same as that of “is”, “like”, and others; this helps with parenthesization
    rendering when used in conjunction with “IS”.
  id: totrans-3294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了列优先级，将“concat”和“match”运算符移动到与“is”、“like”等运算符相同的位置；当与“IS”一起使用时，这有助于括号渲染。
- en: 'References: [#2564](https://www.sqlalchemy.org/trac/ticket/2564)'
  id: totrans-3295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2564](https://www.sqlalchemy.org/trac/ticket/2564)
- en: '**[sql] [bug]**'
  id: totrans-3296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Applying a column expression to a select statement using a label with or without
    other modifying constructs will no longer “target” that expression to the underlying
    Column; this affects ORM operations that rely upon Column targeting in order to
    retrieve results. That is, a query like query(User.id, User.id.label(‘foo’)) will
    now track the value of each “User.id” expression separately instead of munging
    them together. It is not expected that any users will be impacted by this; however,
    a usage that uses select() in conjunction with query.from_statement() and attempts
    to load fully composed ORM entities may not function as expected if the select()
    named Column objects with arbitrary .label() names, as these will no longer target
    to the Column objects mapped by that entity.
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将列表达式应用于带有或不带有其他修改构造的标签的select语句，将不再将该表达式“定位”到底层列；这会影响依赖于列定位以检索结果的ORM操作。也就是说，像query(User.id,
    User.id.label(‘foo’))这样的查询现在将分别跟踪每个“User.id”表达式的值，而不是将它们合并在一起。不过，不希望任何用户受到影响；但是，如果select()与query.from_statement()结合使用，并尝试加载完全组合的ORM实体，而select()命名了具有任意.label()名称的Column对象，那么可能无法按预期方式运行，因为这些对象将不再定位到该实体映射的Column对象。
- en: 'References: [#2591](https://www.sqlalchemy.org/trac/ticket/2591)'
  id: totrans-3298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2591](https://www.sqlalchemy.org/trac/ticket/2591)
- en: '**[sql] [bug]**'
  id: totrans-3299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixes to the interpretation of the Column “default” parameter as a callable
    to not pass ExecutionContext into a keyword argument parameter.
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将“default”参数解释为可调用项时，不将ExecutionContext传递给关键字参数的问题。
- en: 'References: [#2520](https://www.sqlalchemy.org/trac/ticket/2520)'
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2520](https://www.sqlalchemy.org/trac/ticket/2520)
- en: '**[sql] [bug]**'
  id: totrans-3302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: All of UniqueConstraint, ForeignKeyConstraint, CheckConstraint, and PrimaryKeyConstraint
    will attach themselves to their parent table automatically when they refer to
    a Table-bound Column object directly (i.e. not just string column name), and refer
    to one and only one Table. Prior to 0.8 this behavior occurred for UniqueConstraint
    and PrimaryKeyConstraint, but not ForeignKeyConstraint or CheckConstraint.
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当它们直接引用绑定到Table的列对象（即不仅是字符串列名）并且引用一个且仅一个Table时，UniqueConstraint、ForeignKeyConstraint、CheckConstraint和PrimaryKeyConstraint现在会自动附加到它们的父表上。在0.8之前，此行为仅适用于UniqueConstraint和PrimaryKeyConstraint，而不适用于ForeignKeyConstraint或CheckConstraint。
- en: 'References: [#2410](https://www.sqlalchemy.org/trac/ticket/2410)'
  id: totrans-3304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2410](https://www.sqlalchemy.org/trac/ticket/2410)
- en: '**[sql] [bug]**'
  id: totrans-3305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: TypeDecorator now includes a generic repr() that works in terms of the “impl”
    type by default. This is a behavioral change for those TypeDecorator classes that
    specify a custom __init__ method; those types will need to re-define __repr__()
    if they need __repr__() to provide a faithful constructor representation.
  id: totrans-3306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeDecorator现在默认包含一个基于“impl”类型的通用repr()。对于指定了自定义__init__方法的那些TypeDecorator类，这是一种行为变更；这些类型将需要重新定义__repr__()，如果需要__repr__()提供一个忠实的构造函数表示。
- en: 'References: [#2594](https://www.sqlalchemy.org/trac/ticket/2594)'
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2594](https://www.sqlalchemy.org/trac/ticket/2594)
- en: '**[sql] [bug]**'
  id: totrans-3308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: column.label(None) now produces an anonymous label, instead of returning the
    column object itself, consistent with the behavior of label(column, None).
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: column.label(None)现在生成一个匿名标签，而不是返回列对象本身，这与label(column, None)的行为一致。
- en: 'References: [#2168](https://www.sqlalchemy.org/trac/ticket/2168)'
  id: totrans-3310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2168](https://www.sqlalchemy.org/trac/ticket/2168)
- en: '**[sql] [removed]**'
  id: totrans-3311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [removed]**'
- en: The long-deprecated and non-functional `assert_unicode` flag on [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as well as [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") is removed.
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已删除了长期弃用且不起作用的[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")和[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")上的`assert_unicode`标志。
- en: postgresql
  id: totrans-3313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: postgresql.ARRAY features an optional “dimension” argument, will assign a specific
    number of dimensions to the array which will render in DDL as ARRAY[][]…, also
    improves performance of bind/result processing.
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql.ARRAY具有一个可选的“dimension”参数，将为数组分配一个特定数量的维度，这将以DDL形式渲染为ARRAY[][]…，还提高了绑定/结果处理的性能。
- en: 'References: [#2441](https://www.sqlalchemy.org/trac/ticket/2441)'
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2441](https://www.sqlalchemy.org/trac/ticket/2441)
- en: '**[postgresql] [feature]**'
  id: totrans-3317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: postgresql.ARRAY now supports indexing and slicing. The Python [] operator is
    available on all SQL expressions that are of type ARRAY; integer or simple slices
    can be passed. The slices can also be used on the assignment side in the SET clause
    of an UPDATE statement by passing them into Update.values(); see the docs for
    examples.
  id: totrans-3318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgresql.ARRAY 现在支持索引和切片。Python [] 运算符可用于所有类型为 ARRAY 的 SQL 表达式；可以传递整数或简单切片。这些切片也可以在
    UPDATE 语句的 SET 子句中的赋值方面使用，通过将它们传递给 Update.values()；请参阅文档以获取示例。
- en: '**[postgresql] [feature]**'
  id: totrans-3319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new “array literal” construct postgresql.array(). Basically a “tuple”
    that renders as ARRAY[1,2,3].
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了新的“数组文字”构造 postgresql.array()。基本上是一个渲染为 ARRAY[1,2,3] 的“元组”。
- en: '**[postgresql] [feature]**'
  id: totrans-3321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the PostgreSQL ONLY keyword, which can appear corresponding
    to a table in a SELECT, UPDATE, or DELETE statement. The phrase is established
    using with_hint(). Courtesy Ryan Kelly
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL ONLY 关键字的支持，该关键字可以在 SELECT、UPDATE 或 DELETE 语句中对应于表。该短语是使用 with_hint()
    建立的。感谢 Ryan Kelly
- en: 'References: [#2506](https://www.sqlalchemy.org/trac/ticket/2506)'
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2506](https://www.sqlalchemy.org/trac/ticket/2506)
- en: '**[postgresql] [feature]**'
  id: totrans-3324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: 'The “ischema_names” dictionary of the PostgreSQL dialect is “unofficially”
    customizable. Meaning, new types such as PostGIS types can be added into this
    dictionary, and the PG type reflection code should be able to handle simple types
    with variable numbers of arguments. The functionality here is “unofficial” for
    three reasons:'
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 方言的 “ischema_names” 字典是“非官方”可定制的。这意味着，诸如 PostGIS 类型之类的新类型可以添加到此字典中，并且
    PG 类型反射代码应该能够处理具有不同数量参数的简单类型。这里的功能性是“非官方”的，原因有三：
- en: this is not an “official” API. Ideally an “official” API would allow custom
    type-handling callables at the dialect or global level in a generic way.
  id: totrans-3326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这不是一个“官方”API。理想情况下，“官方”API 应该以一种通用的方式允许在方言或全局级别调用自定义类型处理可调用函数。
- en: This is only implemented for the PG dialect, in particular because PG has broad
    support for custom types vs. other database backends. A real API would be implemented
    at the default dialect level.
  id: totrans-3327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这仅在 PG 方言中实现，特别是因为 PG 对自定义类型有广泛支持，而其他数据库后端则不然。一个真正的 API 应该在默认方言级别实现。
- en: The reflection code here is only tested against simple types and probably has
    issues with more compositional types.
  id: totrans-3328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里的反射代码仅针对简单类型进行了测试，可能存在与更复杂类型相关的问题。
- en: patch courtesy Éric Lemoine.
  id: totrans-3329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 补丁由 Éric Lemoine 提供。
- en: mysql
  id: totrans-3330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-3331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added TIME type to mysql dialect, accepts “fst” argument which is the new “fractional
    seconds” specifier for recent MySQL versions. The datatype will interpret a microseconds
    portion received from the driver, however note that at this time most/all MySQL
    DBAPIs do not support returning this value.
  id: totrans-3332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mysql 方言中添加了 TIME 类型，接受“fst”参数，这是最近 MySQL 版本的新“分秒”指定符。数据类型将解释从驱动程序接收的微秒部分，但请注意，目前大多数/所有
    MySQL DBAPI 不支持返回此值。
- en: 'References: [#2534](https://www.sqlalchemy.org/trac/ticket/2534)'
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2534](https://www.sqlalchemy.org/trac/ticket/2534)
- en: '**[mysql] [bug]**'
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Dialect no longer emits expensive server collations query, as well as server
    casing, on first connect. These functions are still available as semi-private.
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方言不再在首次连接时发出昂贵的服务器排序查询，以及服务器大小写查询。这些函数仍然作为半私有函数可用。
- en: 'References: [#2404](https://www.sqlalchemy.org/trac/ticket/2404)'
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2404](https://www.sqlalchemy.org/trac/ticket/2404)
- en: sqlite
  id: totrans-3337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-3338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: the SQLite date and time types have been overhauled to support a more open ended
    format for input and output, using name based format strings and regexps. A new
    argument “microseconds” also provides the option to omit the “microseconds” portion
    of timestamps. Thanks to Nathan Wright for the work and tests on this.
  id: totrans-3339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 的日期和时间类型已经进行了改进，以支持更开放的输入和输出格式，使用基于名称的格式字符串和正则表达式。一个新的参数“microseconds”还提供了省略时间戳的“微秒”部分的选项。感谢
    Nathan Wright 在这方面的工作和测试。
- en: 'References: [#2363](https://www.sqlalchemy.org/trac/ticket/2363)'
  id: totrans-3340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2363](https://www.sqlalchemy.org/trac/ticket/2363)
- en: '**[sqlite]**'
  id: totrans-3341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: Added [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR"),
    [`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR "sqlalchemy.types.NVARCHAR")
    to the SQLite dialect’s list of recognized type names for reflection. SQLite returns
    the name given to a type as the name returned.
  id: totrans-3342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`NCHAR`](../core/type_basics.html#sqlalchemy.types.NCHAR "sqlalchemy.types.NCHAR")、[`NVARCHAR`](../core/type_basics.html#sqlalchemy.types.NVARCHAR
    "sqlalchemy.types.NVARCHAR") 添加到 SQLite 方言识别的类型名称列表中以供反射使用。SQLite 返回给定类型的名称作为返回的名称。
- en: 'References: [rc3addcc9ffad](https://www.sqlalchemy.org/trac/changeset/c3addcc9ffad)'
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[rc3addcc9ffad](https://www.sqlalchemy.org/trac/changeset/c3addcc9ffad)
- en: mssql
  id: totrans-3344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: SQL Server dialect can be given database-qualified schema names, i.e. “schema=’mydatabase.dbo’”;
    reflection operations will detect this, split the schema among the “.” to get
    the owner separately, and emit a “USE mydatabase” statement before reflecting
    targets within the “dbo” owner; the existing database returned from DB_NAME()
    is then restored.
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL Server方言可以给出数据库限定的模式名称，即“schema='mydatabase.dbo'”；反射操作将检测到这一点，将模式分割在“.”之间以单独获取所有者，并在反射目标内部发出“USE
    mydatabase”语句；然后恢复从DB_NAME()返回的现有数据库。
- en: '**[mssql] [feature]**'
  id: totrans-3347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: updated support for the mxodbc driver; mxodbc 3.2.1 is recommended for full
    compatibility.
  id: totrans-3348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了对mxodbc驱动程序的支持；建议使用mxodbc 3.2.1以实现完全兼容。
- en: '**[mssql] [bug]**'
  id: totrans-3349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: removed legacy behavior whereby a column comparison to a scalar SELECT via ==
    would coerce to an IN with the SQL server dialect. This is implicit behavior which
    fails in other scenarios so is removed. Code which relies on this needs to be
    modified to use column.in_(select) explicitly.
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了旧行为，即通过==将列与标量SELECT进行比较时，会将其强制转换为SQL服务器方言中的IN。这是隐式行为，在其他情况下会失败，因此已删除。依赖于此行为的代码需要修改为显式使用column.in_(select)。
- en: 'References: [#2277](https://www.sqlalchemy.org/trac/ticket/2277)'
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2277](https://www.sqlalchemy.org/trac/ticket/2277)
- en: oracle
  id: totrans-3352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-3353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能]**'
- en: The types of columns excluded from the setinputsizes() set can be customized
    by sending a list of string DBAPI type names to exclude, using the exclude_setinputsizes
    dialect parameter. This list was previously fixed. The list also now defaults
    to STRING, UNICODE, removing CLOB, NCLOB from the list.
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过将字符串DBAPI类型名称列表发送到exclude_setinputsizes方言参数来自定义从setinputsizes()集中排除的列的类型。此列表以前是固定的。该列表现在默认为STRING，UNICODE，从列表中删除了CLOB，NCLOB。
- en: 'References: [#2561](https://www.sqlalchemy.org/trac/ticket/2561)'
  id: totrans-3355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2561](https://www.sqlalchemy.org/trac/ticket/2561)
- en: '**[oracle] [bug]**'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Quoting information is now passed along from a Column with quote=True when generating
    a same-named bound parameter to the bindparam() object, as is the case in generated
    INSERT and UPDATE statements, so that unknown reserved names can be fully supported.
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当生成与Column具有quote=True的同名绑定参数时，现在会将引用信息传递给bindparam()对象，就像在生成的INSERT和UPDATE语句中一样，以便完全支持未知的保留名称。
- en: 'References: [#2437](https://www.sqlalchemy.org/trac/ticket/2437)'
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2437](https://www.sqlalchemy.org/trac/ticket/2437)
- en: '**[oracle] [bug]**'
  id: totrans-3359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: The CreateIndex construct in Oracle will now schema-qualify the name of the
    index to be that of the parent table. Previously this name was omitted which apparently
    creates the index in the default schema, rather than that of the table.
  id: totrans-3360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle中的CreateIndex构造现在将索引的名称模式限定为父表的名称。以前，此名称被省略，显然会在默认模式中创建索引，而不是表的模式。
- en: misc
  id: totrans-3361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature] [access]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [access]**'
- en: the MS Access dialect has been moved to its own project on Bitbucket, taking
    advantage of the new SQLAlchemy dialect compliance suite. The dialect is still
    in very rough shape and probably not ready for general use yet, however it does
    have *extremely* rudimental functionality now. [https://bitbucket.org/zzzeek/sqlalchemy-access](https://bitbucket.org/zzzeek/sqlalchemy-access)
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MS Access方言已移至Bitbucket上的自己的项目，利用了新的SQLAlchemy方言兼容性套件。该方言仍处于非常初步的形式，可能尚未准备好供一般使用，但现在具有*极其*基本的功能。[https://bitbucket.org/zzzeek/sqlalchemy-access](https://bitbucket.org/zzzeek/sqlalchemy-access)
- en: '**[feature] [firebird]**'
  id: totrans-3364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [firebird]**'
- en: The “startswith()” operator renders as “STARTING WITH”, “~startswith()” renders
    as “NOT STARTING WITH”, using FB’s more efficient operator.
  id: totrans-3365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “startswith()”运算符呈现为“STARTING WITH”，“~startswith()”呈现为“NOT STARTING WITH”，使用了FB更高效的运算符。
- en: 'References: [#2470](https://www.sqlalchemy.org/trac/ticket/2470)'
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2470](https://www.sqlalchemy.org/trac/ticket/2470)
- en: '**[feature] [firebird]**'
  id: totrans-3367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [firebird]**'
- en: An experimental dialect for the fdb driver is added, but is untested as I cannot
    get the fdb package to build.
  id: totrans-3368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个用于fdb驱动程序的实验性方言，但由于无法构建fdb包，因此未经测试。
- en: 'References: [#2504](https://www.sqlalchemy.org/trac/ticket/2504)'
  id: totrans-3369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2504](https://www.sqlalchemy.org/trac/ticket/2504)
- en: '**[bug] [firebird]**'
  id: totrans-3370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: CompileError is raised when VARCHAR with no length is attempted to be emitted,
    same way as MySQL.
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试发出没有长度的VARCHAR时，会引发CompileError，与MySQL相同。
- en: 'References: [#2505](https://www.sqlalchemy.org/trac/ticket/2505)'
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2505](https://www.sqlalchemy.org/trac/ticket/2505)
- en: '**[bug] [firebird]**'
  id: totrans-3373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Firebird now uses strict “ansi bind rules” so that bound parameters don’t render
    in the columns clause of a statement - they render literally instead.
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 现在使用严格的“ansi 绑定规则”，这样绑定的参数不会在语句的列子句中呈现 - 它们会被字面呈现。
- en: '**[bug] [firebird]**'
  id: totrans-3375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Support for passing datetime as date when using the DateTime type with Firebird;
    other dialects support this.
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 DateTime 类型与 Firebird 时，支持将 datetime 作为 date 传递；其他方言也支持这一点。
- en: '**[moved] [maxdb]**'
  id: totrans-3377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[移动] [maxdb]**'
- en: The MaxDB dialect, which hasn’t been functional for several years, is moved
    out to a pending bitbucket project, [https://bitbucket.org/zzzeek/sqlalchemy-maxdb](https://bitbucket.org/zzzeek/sqlalchemy-maxdb).
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MaxDB 方言，已经多年没有功能了，被移出到一个待定的 bitbucket 项目，[https://bitbucket.org/zzzeek/sqlalchemy-maxdb](https://bitbucket.org/zzzeek/sqlalchemy-maxdb)。
