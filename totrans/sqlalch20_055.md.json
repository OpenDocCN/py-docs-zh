["```py\n>>> from sqlalchemy.orm import scoped_session\n>>> from sqlalchemy.orm import sessionmaker\n\n>>> session_factory = sessionmaker(bind=some_engine)\n>>> Session = scoped_session(session_factory)\n```", "```py\n>>> some_session = Session()\n```", "```py\n>>> some_other_session = Session()\n>>> some_session is some_other_session\nTrue\n```", "```py\n>>> Session.remove()\n```", "```py\n>>> new_session = Session()\n>>> new_session is some_session\nFalse\n```", "```py\nSession = scoped_session(some_factory)\n\n# equivalent to:\n#\n# session = Session()\n# print(session.scalars(select(MyClass)).all())\n#\nprint(Session.scalars(select(MyClass)).all())\n```", "```py\nWeb Server          Web Framework        SQLAlchemy ORM Code\n--------------      --------------       ------------------------------\nstartup        ->   Web framework        # Session registry is established\n                    initializes          Session = scoped_session(sessionmaker())\n\nincoming\nweb request    ->   web request     ->   # The registry is *optionally*\n                    starts               # called upon explicitly to create\n                                         # a Session local to the thread and/or request\n                                         Session()\n\n                                         # the Session registry can otherwise\n                                         # be used at any time, creating the\n                                         # request-local Session() if not present,\n                                         # or returning the existing one\n                                         Session.execute(select(MyClass)) # ...\n\n                                         Session.add(some_object) # ...\n\n                                         # if data was modified, commit the\n                                         # transaction\n                                         Session.commit()\n\n                    web request ends  -> # the registry is instructed to\n                                         # remove the Session\n                                         Session.remove()\n\n                    sends output      <-\noutgoing web    <-\nresponse\n```", "```py\nfrom my_web_framework import get_current_request, on_request_end\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nSession = scoped_session(sessionmaker(bind=some_engine), scopefunc=get_current_request)\n\n@on_request_end\ndef remove_session(req):\n    Session.remove()\n```", "```py\nclass sqlalchemy.orm.scoped_session\n```", "```py\nmethod __call__(**kw: Any) \u2192 _S\n```", "```py\nmethod __init__(session_factory: sessionmaker[_S], scopefunc: Callable[[], Any] | None = None)\n```", "```py\nmethod add(instance: object, _warn: bool = True) \u2192 None\n```", "```py\nmethod add_all(instances: Iterable[object]) \u2192 None\n```", "```py\nattribute autoflush\n```", "```py\nmethod begin(nested: bool = False) \u2192 SessionTransaction\n```", "```py\nmethod begin_nested() \u2192 SessionTransaction\n```", "```py\nattribute bind\n```", "```py\nmethod bulk_insert_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = False, render_nulls: bool = False) \u2192 None\n```", "```py\nmethod bulk_save_objects(objects: Iterable[object], return_defaults: bool = False, update_changed_only: bool = True, preserve_order: bool = True) \u2192 None\n```", "```py\nmethod bulk_update_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]]) \u2192 None\n```", "```py\nmethod close() \u2192 None\n```", "```py\nclassmethod close_all() \u2192 None\n```", "```py\nmethod commit() \u2192 None\n```", "```py\nmethod configure(**kwargs: Any) \u2192 None\n```", "```py\nmethod connection(bind_arguments: _BindArguments | None = None, execution_options: CoreExecuteOptionsParameter | None = None) \u2192 Connection\n```", "```py\nmethod delete(instance: object) \u2192 None\n```", "```py\nattribute deleted\n```", "```py\nattribute dirty\n```", "```py\nsome_mapped_object in session.dirty\n```", "```py\nmethod execute(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, _parent_execute_state: Any | None = None, _add_event: Any | None = None) \u2192 Result[Any]\n```", "```py\nfrom sqlalchemy import select\nresult = session.execute(\n    select(User).where(User.id == 5)\n)\n```", "```py\nmethod expire(instance: object, attribute_names: Iterable[str] | None = None) \u2192 None\n```", "```py\nmethod expire_all() \u2192 None\n```", "```py\nmethod expunge(instance: object) \u2192 None\n```", "```py\nmethod expunge_all() \u2192 None\n```", "```py\nmethod flush(objects: Sequence[Any] | None = None) \u2192 None\n```", "```py\nmethod get(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O | None\n```", "```py\nmy_user = session.get(User, 5)\n\nsome_object = session.get(VersionedFoo, (5, 10))\n\nsome_object = session.get(\n    VersionedFoo,\n    {\"id\": 5, \"version_id\": 10}\n)\n```", "```py\n    my_object = session.get(SomeClass, 5)\n    ```", "```py\n    my_object = session.get(SomeClass, (5, 10))\n    ```", "```py\n    my_object = session.get(SomeClass, {\"id\": 5, \"version_id\": 10})\n    ```", "```py\nmethod get_bind(mapper: _EntityBindKey[_O] | None = None, *, clause: ClauseElement | None = None, bind: _SessionBind | None = None, _sa_skip_events: bool | None = None, _sa_skip_for_implicit_returning: bool = False, **kw: Any) \u2192 Engine | Connection\n```", "```py\nmethod get_one(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O\n```", "```py\nclassmethod identity_key(class_: Type[Any] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: Any | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[Any]\n```", "```py\nattribute identity_map\n```", "```py\nattribute info\n```", "```py\nattribute is_active\n```", "```py\nmethod is_modified(instance: object, include_collections: bool = True) \u2192 bool\n```", "```py\nreturn session.is_modified(someobject)\n```", "```py\nmethod merge(instance: _O, *, load: bool = True, options: Sequence[ORMOption] | None = None) \u2192 _O\n```", "```py\nattribute new\n```", "```py\nattribute no_autoflush\n```", "```py\nwith session.no_autoflush:\n\n    some_object = SomeClass()\n    session.add(some_object)\n    # won't autoflush\n    some_object.related_thing = session.query(SomeRelated).first()\n```", "```py\nclassmethod object_session(instance: object) \u2192 Session | None\n```", "```py\nmethod query(*entities: _ColumnsClauseArgument[Any], **kwargs: Any) \u2192 Query[Any]\n```", "```py\nmethod query_property(query_cls: Type[Query[_T]] | None = None) \u2192 QueryPropertyDescriptor\n```", "```py\nfrom sqlalchemy.orm import QueryPropertyDescriptor\nfrom sqlalchemy.orm import scoped_session\nfrom sqlalchemy.orm import sessionmaker\n\nSession = scoped_session(sessionmaker())\n\nclass MyClass:\n    query: QueryPropertyDescriptor = Session.query_property()\n\n# after mappers are defined\nresult = MyClass.query.filter(MyClass.name=='foo').all()\n```", "```py\nmethod refresh(instance: object, attribute_names: Iterable[str] | None = None, with_for_update: ForUpdateParameter = None) \u2192 None\n```", "```py\nmethod remove() \u2192 None\n```", "```py\nmethod reset() \u2192 None\n```", "```py\nmethod rollback() \u2192 None\n```", "```py\nmethod scalar(statement: Executable, params: _CoreSingleExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 Any\n```", "```py\nmethod scalars(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 ScalarResult[Any]\n```", "```py\nattribute session_factory: sessionmaker[_S]\n```", "```py\nclass sqlalchemy.util.ScopedRegistry\n```", "```py\nmethod __init__(createfunc: Callable[[], _T], scopefunc: Callable[[], Any])\n```", "```py\nmethod clear() \u2192 None\n```", "```py\nmethod has() \u2192 bool\n```", "```py\nmethod set(obj: _T) \u2192 None\n```", "```py\nclass sqlalchemy.util.ThreadLocalRegistry\n```", "```py\nclass sqlalchemy.orm.QueryPropertyDescriptor\n```", "```py\nSession = scoped_session(some_factory)\n\n# equivalent to:\n#\n# session = Session()\n# print(session.scalars(select(MyClass)).all())\n#\nprint(Session.scalars(select(MyClass)).all())\n```", "```py\nWeb Server          Web Framework        SQLAlchemy ORM Code\n--------------      --------------       ------------------------------\nstartup        ->   Web framework        # Session registry is established\n                    initializes          Session = scoped_session(sessionmaker())\n\nincoming\nweb request    ->   web request     ->   # The registry is *optionally*\n                    starts               # called upon explicitly to create\n                                         # a Session local to the thread and/or request\n                                         Session()\n\n                                         # the Session registry can otherwise\n                                         # be used at any time, creating the\n                                         # request-local Session() if not present,\n                                         # or returning the existing one\n                                         Session.execute(select(MyClass)) # ...\n\n                                         Session.add(some_object) # ...\n\n                                         # if data was modified, commit the\n                                         # transaction\n                                         Session.commit()\n\n                    web request ends  -> # the registry is instructed to\n                                         # remove the Session\n                                         Session.remove()\n\n                    sends output      <-\noutgoing web    <-\nresponse\n```", "```py\nfrom my_web_framework import get_current_request, on_request_end\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nSession = scoped_session(sessionmaker(bind=some_engine), scopefunc=get_current_request)\n\n@on_request_end\ndef remove_session(req):\n    Session.remove()\n```", "```py\nclass sqlalchemy.orm.scoped_session\n```", "```py\nmethod __call__(**kw: Any) \u2192 _S\n```", "```py\nmethod __init__(session_factory: sessionmaker[_S], scopefunc: Callable[[], Any] | None = None)\n```", "```py\nmethod add(instance: object, _warn: bool = True) \u2192 None\n```", "```py\nmethod add_all(instances: Iterable[object]) \u2192 None\n```", "```py\nattribute autoflush\n```", "```py\nmethod begin(nested: bool = False) \u2192 SessionTransaction\n```", "```py\nmethod begin_nested() \u2192 SessionTransaction\n```", "```py\nattribute bind\n```", "```py\nmethod bulk_insert_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = False, render_nulls: bool = False) \u2192 None\n```", "```py\nmethod bulk_save_objects(objects: Iterable[object], return_defaults: bool = False, update_changed_only: bool = True, preserve_order: bool = True) \u2192 None\n```", "```py\nmethod bulk_update_mappings(mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]]) \u2192 None\n```", "```py\nmethod close() \u2192 None\n```", "```py\nclassmethod close_all() \u2192 None\n```", "```py\nmethod commit() \u2192 None\n```", "```py\nmethod configure(**kwargs: Any) \u2192 None\n```", "```py\nmethod connection(bind_arguments: _BindArguments | None = None, execution_options: CoreExecuteOptionsParameter | None = None) \u2192 Connection\n```", "```py\nmethod delete(instance: object) \u2192 None\n```", "```py\nattribute deleted\n```", "```py\nattribute dirty\n```", "```py\nsome_mapped_object in session.dirty\n```", "```py\nmethod execute(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, _parent_execute_state: Any | None = None, _add_event: Any | None = None) \u2192 Result[Any]\n```", "```py\nfrom sqlalchemy import select\nresult = session.execute(\n    select(User).where(User.id == 5)\n)\n```", "```py\nmethod expire(instance: object, attribute_names: Iterable[str] | None = None) \u2192 None\n```", "```py\nmethod expire_all() \u2192 None\n```", "```py\nmethod expunge(instance: object) \u2192 None\n```", "```py\nmethod expunge_all() \u2192 None\n```", "```py\nmethod flush(objects: Sequence[Any] | None = None) \u2192 None\n```", "```py\nmethod get(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O | None\n```", "```py\nmy_user = session.get(User, 5)\n\nsome_object = session.get(VersionedFoo, (5, 10))\n\nsome_object = session.get(\n    VersionedFoo,\n    {\"id\": 5, \"version_id\": 10}\n)\n```", "```py\n    my_object = session.get(SomeClass, 5)\n    ```", "```py\n    my_object = session.get(SomeClass, (5, 10))\n    ```", "```py\n    my_object = session.get(SomeClass, {\"id\": 5, \"version_id\": 10})\n    ```", "```py\nmethod get_bind(mapper: _EntityBindKey[_O] | None = None, *, clause: ClauseElement | None = None, bind: _SessionBind | None = None, _sa_skip_events: bool | None = None, _sa_skip_for_implicit_returning: bool = False, **kw: Any) \u2192 Engine | Connection\n```", "```py\nmethod get_one(entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Sequence[ORMOption] | None = None, populate_existing: bool = False, with_for_update: ForUpdateParameter = None, identity_token: Any | None = None, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None) \u2192 _O\n```", "```py\nclassmethod identity_key(class_: Type[Any] | None = None, ident: Any | Tuple[Any, ...] = None, *, instance: Any | None = None, row: Row[Any] | RowMapping | None = None, identity_token: Any | None = None) \u2192 _IdentityKeyType[Any]\n```", "```py\nattribute identity_map\n```", "```py\nattribute info\n```", "```py\nattribute is_active\n```", "```py\nmethod is_modified(instance: object, include_collections: bool = True) \u2192 bool\n```", "```py\nreturn session.is_modified(someobject)\n```", "```py\nmethod merge(instance: _O, *, load: bool = True, options: Sequence[ORMOption] | None = None) \u2192 _O\n```", "```py\nattribute new\n```", "```py\nattribute no_autoflush\n```", "```py\nwith session.no_autoflush:\n\n    some_object = SomeClass()\n    session.add(some_object)\n    # won't autoflush\n    some_object.related_thing = session.query(SomeRelated).first()\n```", "```py\nclassmethod object_session(instance: object) \u2192 Session | None\n```", "```py\nmethod query(*entities: _ColumnsClauseArgument[Any], **kwargs: Any) \u2192 Query[Any]\n```", "```py\nmethod query_property(query_cls: Type[Query[_T]] | None = None) \u2192 QueryPropertyDescriptor\n```", "```py\nfrom sqlalchemy.orm import QueryPropertyDescriptor\nfrom sqlalchemy.orm import scoped_session\nfrom sqlalchemy.orm import sessionmaker\n\nSession = scoped_session(sessionmaker())\n\nclass MyClass:\n    query: QueryPropertyDescriptor = Session.query_property()\n\n# after mappers are defined\nresult = MyClass.query.filter(MyClass.name=='foo').all()\n```", "```py\nmethod refresh(instance: object, attribute_names: Iterable[str] | None = None, with_for_update: ForUpdateParameter = None) \u2192 None\n```", "```py\nmethod remove() \u2192 None\n```", "```py\nmethod reset() \u2192 None\n```", "```py\nmethod rollback() \u2192 None\n```", "```py\nmethod scalar(statement: Executable, params: _CoreSingleExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 Any\n```", "```py\nmethod scalars(statement: Executable, params: _CoreAnyExecuteParams | None = None, *, execution_options: OrmExecuteOptionsParameter = {}, bind_arguments: _BindArguments | None = None, **kw: Any) \u2192 ScalarResult[Any]\n```", "```py\nattribute session_factory: sessionmaker[_S]\n```", "```py\nclass sqlalchemy.util.ScopedRegistry\n```", "```py\nmethod __init__(createfunc: Callable[[], _T], scopefunc: Callable[[], Any])\n```", "```py\nmethod clear() \u2192 None\n```", "```py\nmethod has() \u2192 bool\n```", "```py\nmethod set(obj: _T) \u2192 None\n```", "```py\nclass sqlalchemy.util.ThreadLocalRegistry\n```", "```py\nclass sqlalchemy.orm.QueryPropertyDescriptor\n```"]