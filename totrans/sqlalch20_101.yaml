- en: Core Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心事件
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/events.html](https://docs.sqlalchemy.org/en/20/core/events.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/events.html](https://docs.sqlalchemy.org/en/20/core/events.html)
- en: This section describes the event interfaces provided in SQLAlchemy Core. For
    an introduction to the event listening API, see [Events](event.html). ORM events
    are described in [ORM Events](../orm/events.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了SQLAlchemy Core中提供的事件接口。有关事件监听API的介绍，请参阅[Events](event.html)。ORM事件在[ORM
    Events](../orm/events.html)中描述。
- en: '| Object Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Events](#sqlalchemy.event.base.Events) | Define event listening functions
    for a particular target type. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [Events](#sqlalchemy.event.base.Events) | 为特定目标类型定义事件监听函数。 |'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define event listening functions for a particular target type.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定目标类型定义事件监听函数。
- en: '**Members**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispatch](#sqlalchemy.event.base.Events.dispatch)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispatch](#sqlalchemy.event.base.Events.dispatch)'
- en: '**Class signature**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.event.Events` (`sqlalchemy.event._HasEventsDispatch`)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.event.Events` (`sqlalchemy.event._HasEventsDispatch`)
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: reference back to the _Dispatch class.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[_Dispatch class](#Dispatch_class)。
- en: Bidirectional against _Dispatch._events
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对抗_Dispatch._events
- en: Connection Pool Events
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池事件
- en: '| Object Name | Description |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [PoolEvents](#sqlalchemy.events.PoolEvents) | Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"). |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [PoolEvents](#sqlalchemy.events.PoolEvents) | [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")的可用事件。 |'
- en: '| [PoolResetState](#sqlalchemy.events.PoolResetState) | describes the state
    of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [PoolResetState](#sqlalchemy.events.PoolResetState) | 描述传递给[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")连接池事件的DBAPI连接的状态。 |'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")的可用事件。'
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的方法定义了事件的名称以及传递给监听器函数的成员的名称。
- en: 'e.g.:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '例如:'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In addition to accepting the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instances,
    [`PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents") also
    accepts [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects and the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    class as targets, which will be resolved to the `.pool` attribute of the given
    engine or the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了接受[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")类和[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实例外，[`PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")还接受[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类作为目标，这将被解析为给定引擎的`.pool`属性或[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")类：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Members**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[checkin()](#sqlalchemy.events.PoolEvents.checkin), [checkout()](#sqlalchemy.events.PoolEvents.checkout),
    [close()](#sqlalchemy.events.PoolEvents.close), [close_detached()](#sqlalchemy.events.PoolEvents.close_detached),
    [connect()](#sqlalchemy.events.PoolEvents.connect), [detach()](#sqlalchemy.events.PoolEvents.detach),
    [dispatch](#sqlalchemy.events.PoolEvents.dispatch), [first_connect()](#sqlalchemy.events.PoolEvents.first_connect),
    [invalidate()](#sqlalchemy.events.PoolEvents.invalidate), [reset()](#sqlalchemy.events.PoolEvents.reset),
    [soft_invalidate()](#sqlalchemy.events.PoolEvents.soft_invalidate)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[checkin()](#sqlalchemy.events.PoolEvents.checkin), [checkout()](#sqlalchemy.events.PoolEvents.checkout),
    [close()](#sqlalchemy.events.PoolEvents.close), [close_detached()](#sqlalchemy.events.PoolEvents.close_detached),
    [connect()](#sqlalchemy.events.PoolEvents.connect), [detach()](#sqlalchemy.events.PoolEvents.detach),
    [dispatch](#sqlalchemy.events.PoolEvents.dispatch), [first_connect()](#sqlalchemy.events.PoolEvents.first_connect),
    [invalidate()](#sqlalchemy.events.PoolEvents.invalidate), [reset()](#sqlalchemy.events.PoolEvents.reset),
    [soft_invalidate()](#sqlalchemy.events.PoolEvents.soft_invalidate)'
- en: '**Class signature**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Called when a connection returns to the pool.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接返回到池时调用。
- en: 'Example argument forms:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '示例参数形式:'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the connection may be closed, and may be None if the connection has
    been invalidated. `checkin` will not be called for detached connections. (They
    do not return to the pool.)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，连接可能已关闭，并且如果连接已失效，则可能为None。对于分离连接，不会调用`checkin`（它们不会返回到池中）。
- en: 'Parameters:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Called when a connection is retrieved from the Pool.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当从连接池中检索到连接时调用。
- en: 'Example argument forms:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Parameters:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`connection_proxy` – the [`PoolProxiedConnection`](pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") object which will proxy the public interface
    of the DBAPI connection for the lifespan of the checkout.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_proxy` – [`PoolProxiedConnection`](pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")对象，将代理DBAPI连接的公共接口，直到检出结束。'
- en: If you raise a [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"), the current connection will be disposed
    and a fresh connection retrieved. Processing of all checkout listeners will abort
    and restart using the new connection.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果引发[`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")，当前连接将被处理并检索到一个新的连接。所有检出监听器的处理将中止，并使用新连接重新启动。
- en: See also
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") - a similar event which occurs
    upon creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") - 一个类似的事件，发生在创建新的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")时。'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Called when a DBAPI connection is closed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当关闭DBAPI连接时调用。
- en: 'Example argument forms:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The event is emitted before the close occurs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 事件在关闭发生之前发出。
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 连接关闭可能会失败；通常是因为连接已经关闭。如果关闭操作失败，连接将被丢弃。
- en: The [`close()`](#sqlalchemy.events.PoolEvents.close "sqlalchemy.events.PoolEvents.close")
    event corresponds to a connection that’s still associated with the pool. To intercept
    close events for detached connections use [`close_detached()`](#sqlalchemy.events.PoolEvents.close_detached
    "sqlalchemy.events.PoolEvents.close_detached").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`close()`](#sqlalchemy.events.PoolEvents.close "sqlalchemy.events.PoolEvents.close")事件对应于仍与池相关联的连接。要拦截分离连接的关闭事件，请使用[`close_detached()`](#sqlalchemy.events.PoolEvents.close_detached
    "sqlalchemy.events.PoolEvents.close_detached")。'
- en: 'Parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Called when a detached DBAPI connection is closed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当分离的DBAPI连接关闭时调用。
- en: 'Example argument forms:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The event is emitted before the close occurs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭发生之前发出事件。
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的关闭可能失败；通常是因为连接已关闭。如果关闭操作失败，则连接将被丢弃。
- en: 'Parameters:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Called at the moment a particular DBAPI connection is first created for a given
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 中首次创建特定DBAPI连接时调用。
- en: 'Example argument forms:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This event allows one to capture the point directly after which the DBAPI module-level
    `.connect()` method has been used in order to produce a new DBAPI connection.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件允许捕获在使用DBAPI模块级别的 `.connect()` 方法产生新的DBAPI连接之后的直接点。
- en: 'Parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Called when a DBAPI connection is “detached” from a pool.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个DBAPI连接从池中“分离”时调用。
- en: 'Example argument forms:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This event is emitted after the detach occurs. The connection is no longer associated
    with the given connection record.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在分离发生后发出。连接不再与给定的连接记录关联。
- en: 'Parameters:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: reference back to the _Dispatch class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 _Dispatch 类的引用。
- en: Bidirectional against _Dispatch._events
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 双向针对 _Dispatch._events
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Called exactly once for the first time a DBAPI connection is checked out from
    a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次从特定的 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    中检出DBAPI连接时调用一次。
- en: 'Example argument forms:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The rationale for [`PoolEvents.first_connect()`](#sqlalchemy.events.PoolEvents.first_connect
    "sqlalchemy.events.PoolEvents.first_connect") is to determine information about
    a particular series of database connections based on the settings used for all
    connections. Since a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    refers to a single “creator” function (which in terms of a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") refers to the URL and connection options used), it
    is typically valid to make observations about a single connection that can be
    safely assumed to be valid about all subsequent connections, such as the database
    version, the server and client encoding settings, collation settings, and many
    others.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.first_connect()`](#sqlalchemy.events.PoolEvents.first_connect
    "sqlalchemy.events.PoolEvents.first_connect") 的理由是根据所有连接使用的设置确定有关特定系列数据库连接的信息。由于特定的
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 引用单个“创建者”函数（在
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    中引用URL和连接选项使用），通常可以假定关于单个连接的观察结果对所有后续连接都是有效的，例如数据库版本，服务器和客户端编码设置，排序规则设置等等。'
- en: 'Parameters:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Called when a DBAPI connection is to be “invalidated”.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在要“失效”DBAPI连接时调用。
- en: 'Example argument forms:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked, either from
    API usage or via “auto-invalidation”, without the `soft` flag.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用[`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate")方法时，无论是通过API使用还是通过“自动失效”，都会触发此事件，而且没有`soft`标志。
- en: The event occurs before a final attempt to call `.close()` on the connection
    occurs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 事件发生在对连接调用`.close()`的最终尝试之前。
- en: 'Parameters:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exception` – 对应于此失效原因的异常对象，如果有的话。可能为`None`。'
- en: See also
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](pooling.html#pool-connection-invalidation)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效的信息](pooling.html#pool-connection-invalidation)'
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Called before the “reset” action occurs for a pooled connection.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在池化连接发生“重置”操作之前调用。
- en: 'Example argument forms:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Changed in version 2.0: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event now accepts the arguments [`PoolEvents.reset.dbapi_connection`](#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.connection_record`](#sqlalchemy.events.PoolEvents.reset.params.connection_record
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.reset_state`](#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset"). Support for listener functions which accept
    the previous argument signature(s) listed above as “deprecated” will be removed
    in a future release.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")事件现在接受参数[`PoolEvents.reset.dbapi_connection`](#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.connection_record`](#sqlalchemy.events.PoolEvents.reset.params.connection_record
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.reset_state`](#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset")。支持接受先前参数签名的监听器函数将在将来的版本中删除。
- en: This event represents when the `rollback()` method is called on the DBAPI connection
    before it is returned to the pool or discarded. A custom “reset” strategy may
    be implemented using this event hook, which may also be combined with disabling
    the default “reset” behavior using the [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件表示在将DBAPI连接返回到池中或丢弃之前调用`rollback()`方法时发生。可以使用此事件钩子实现自定义“重置”策略，也可以结合使用[`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数禁用默认的“重置”行为。
- en: The primary difference between the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") and [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") events are that [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") is called not just for pooled connections
    that are being returned to the pool, but also for connections that were detached
    using the [`Connection.detach()`](connections.html#sqlalchemy.engine.Connection.detach
    "sqlalchemy.engine.Connection.detach") method as well as asyncio connections that
    are being discarded due to garbage collection taking place on connections before
    the connection was checked in.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    和 [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin "sqlalchemy.events.PoolEvents.checkin")
    事件的主要区别在于 [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    不仅适用于将返回池的池化连接，还适用于使用 [`Connection.detach()`](connections.html#sqlalchemy.engine.Connection.detach
    "sqlalchemy.engine.Connection.detach") 方法分离的连接以及由于连接在被检入之前发生垃圾回收而被丢弃的 asyncio
    连接。'
- en: Note that the event **is not** invoked for connections that were invalidated
    using [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate"). These events may be intercepted using
    the [`PoolEvents.soft_invalidate()`](#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") and [`PoolEvents.invalidate()`](#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event hooks, and all “connection close”
    events may be intercepted using [`PoolEvents.close()`](#sqlalchemy.events.PoolEvents.close
    "sqlalchemy.events.PoolEvents.close").
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**不会**为使用 [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 使无效的连接调用此事件。这些事件可以通过 [`PoolEvents.soft_invalidate()`](#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") 和 [`PoolEvents.invalidate()`](#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") 事件钩子拦截，并且所有“连接关闭”事件可以通过 [`PoolEvents.close()`](#sqlalchemy.events.PoolEvents.close
    "sqlalchemy.events.PoolEvents.close") 拦截。
- en: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    event is usually followed by the [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event, except in those cases where the
    connection is discarded immediately after reset.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    事件通常紧跟着 [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin "sqlalchemy.events.PoolEvents.checkin")
    事件，在连接在重置后立即被丢弃的情况下除外。'
- en: 'Parameters:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的 [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`reset_state` –'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset_state` –'
- en: '[`PoolResetState`](#sqlalchemy.events.PoolResetState "sqlalchemy.events.PoolResetState")
    instance which provides information about the circumstances under which the connection
    is being reset.'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolResetState`](#sqlalchemy.events.PoolResetState "sqlalchemy.events.PoolResetState")
    实例，提供有关正在重置连接的情况的信息。'
- en: New in version 2.0.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始新增。
- en: See also
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Reset On Return](pooling.html#pool-reset-on-return)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回时重置](pooling.html#pool-reset-on-return)'
- en: '[`ConnectionEvents.rollback()`](#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.rollback()`](#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")'
- en: '[`ConnectionEvents.commit()`](#sqlalchemy.events.ConnectionEvents.commit "sqlalchemy.events.ConnectionEvents.commit")'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.commit()`](#sqlalchemy.events.ConnectionEvents.commit "sqlalchemy.events.ConnectionEvents.commit")'
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Called when a DBAPI connection is to be “soft invalidated”.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当要“软使无效” DBAPI 连接时调用此事件。
- en: 'Example argument forms:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked with the `soft`
    flag.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每当使用 `soft` 标志调用 [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") 方法时，都会调用此事件。
- en: Soft invalidation refers to when the connection record that tracks this connection
    will force a reconnect after the current connection is checked in. It does not
    actively close the dbapi_connection at the point at which it is called.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 软失效是指跟踪此连接的连接记录将在当前连接签入后强制重新连接。它不会在调用它的点主动关闭 dbapi_connection。
- en: 'Parameters:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exception` – 无效原因对应的异常对象，如果没有则可能是 `None`。'
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: describes the state of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 DBAPI 连接在传递给[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")连接池事件时的状态。
- en: '**Members**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[asyncio_safe](#sqlalchemy.events.PoolResetState.asyncio_safe), [terminate_only](#sqlalchemy.events.PoolResetState.terminate_only),
    [transaction_was_reset](#sqlalchemy.events.PoolResetState.transaction_was_reset)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[asyncio_safe](#sqlalchemy.events.PoolResetState.asyncio_safe), [terminate_only](#sqlalchemy.events.PoolResetState.terminate_only),
    [transaction_was_reset](#sqlalchemy.events.PoolResetState.transaction_was_reset)'
- en: New in version 2.0.0b3.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.0b3 中新增。
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Indicates if the reset operation is occurring within a scope where an enclosing
    event loop is expected to be present for asyncio applications.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 指示重置操作是否发生在期望在 asyncio 应用程序中存在的封闭事件循环范围内。
- en: Will be False in the case that the connection is being garbage collected.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接正在被垃圾回收，则为 False。
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: indicates if the connection is to be immediately terminated and not checked
    in to the pool.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 指示连接是否立即终止并且不被签入到池中。
- en: This occurs for connections that were invalidated, as well as asyncio connections
    that were not cleanly handled by the calling code that are instead being garbage
    collected. In the latter case, operations can’t be safely run on asyncio connections
    within garbage collection as there is not necessarily an event loop present.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这发生在失效的连接以及未被调用代码清理地处理的 asyncio 连接，而是被垃圾回收时。在后一种情况下，不能在垃圾回收中安全地运行 asyncio 连接上的操作，因为不一定存在事件循环。
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Indicates if the transaction on the DBAPI connection was already essentially
    “reset” back by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 DBAPI 连接上的事务是否已经由[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象实质上“重置”。
- en: This boolean is True if the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had transactional state present upon it, which
    was then not closed using the [`Connection.rollback()`](connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") or [`Connection.commit()`](connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") method; instead, the transaction was closed
    inline within the [`Connection.close()`](connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method so is guaranteed to remain non-present
    when this event is reached.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")上有事务状态，并且然后没有使用[`Connection.rollback()`](connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")或[`Connection.commit()`](connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")方法关闭事务；相反，事务在[`Connection.close()`](connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")方法内联关闭，因此在到达此事件时保证保持不存在。
- en: '## SQL Execution and Connection Events'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '## SQL 执行和连接事件'
- en: '| Object Name | Description |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ConnectionEvents](#sqlalchemy.events.ConnectionEvents) | Available events
    for [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [ConnectionEvents](#sqlalchemy.events.ConnectionEvents) | [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的可用事件。 |'
- en: '| [DialectEvents](#sqlalchemy.events.DialectEvents) | event interface for execution-replacement
    functions. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [方言事件](#sqlalchemy.events.DialectEvents) | 用于执行替换函数的事件接口。 |'
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Available events for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的可用事件。'
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的方法定义了事件的名称以及传递给监听器函数的成员的名称。
- en: 'An event listener can be associated with any [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance, such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), e.g.:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 事件监听器可以与任何[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类或实例相关联，例如一个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，例如：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'or with a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '或者使用特定的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"):'
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the methods are called with a statement parameter, such as in [`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") or [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"), the statement is
    the exact SQL string that was prepared for transmission to the DBAPI `cursor`
    in the connection’s [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect").
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '当方法使用语句参数调用时，例如在[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")或[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")中，语句是准备发送到连接的DBAPI
    `cursor`的确切SQL字符串[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。 '
- en: 'The [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events can also be
    established with the `retval=True` flag, which allows modification of the statement
    and parameters to be sent to the database. The [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event is particularly
    useful here to add ad-hoc string transformations, such as comments, to all executions:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")和[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件也可以使用`retval=True`标志来建立，这允许修改发送到数据库的语句和参数。[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件在这里特别有用，可以添加临时字符串转换，例如注释，以适用于所有执行：'
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    can be established on any combination of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), as well as instances of each of those classes.
    Events across all four scopes will fire off for a given instance of [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). However, for performance reasons, the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object determines at instantiation time whether
    or not its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    has event listeners established. Event listeners added to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or to an instance of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") *after* the instantiation of a dependent [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instance will usually *not* be available on that
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    instance. The newly added listeners will instead take effect for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created subsequent to those event listeners
    being established on the parent [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    可以建立在任何组合的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")、[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，以及这些类的实例上。对于给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 实例，所有四个范围的事件都会触发。但是，出于性能原因，[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象在实例化时确定其父 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 是否已经建立了事件侦听器。在依赖的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 实例实例化后，向 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 类或 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 实例添加的事件侦听器通常不会对该 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 实例可用。而是，新添加的侦听器将对在父 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 类或实例上建立这些事件侦听器之后创建的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 实例产生影响。'
- en: 'Parameters:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**retval=False** – Applies to the [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events only. When
    True, the user-defined event function must have a return value, which is a tuple
    of parameters that replace the given statement and parameters. See those methods
    for a description of specific return arguments.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**retval=False** – 仅适用于 [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") 和 [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") 事件。当为 True 时，用户定义的事件函数必须有一个返回值，即替换给定语句和参数的参数元组。有关特定返回参数的描述，请参见这些方法。'
- en: '**Members**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_cursor_execute()](#sqlalchemy.events.ConnectionEvents.after_cursor_execute),
    [after_execute()](#sqlalchemy.events.ConnectionEvents.after_execute), [before_cursor_execute()](#sqlalchemy.events.ConnectionEvents.before_cursor_execute),
    [before_execute()](#sqlalchemy.events.ConnectionEvents.before_execute), [begin()](#sqlalchemy.events.ConnectionEvents.begin),
    [begin_twophase()](#sqlalchemy.events.ConnectionEvents.begin_twophase), [commit()](#sqlalchemy.events.ConnectionEvents.commit),
    [commit_twophase()](#sqlalchemy.events.ConnectionEvents.commit_twophase), [dispatch](#sqlalchemy.events.ConnectionEvents.dispatch),
    [engine_connect()](#sqlalchemy.events.ConnectionEvents.engine_connect), [engine_disposed()](#sqlalchemy.events.ConnectionEvents.engine_disposed),
    [prepare_twophase()](#sqlalchemy.events.ConnectionEvents.prepare_twophase), [release_savepoint()](#sqlalchemy.events.ConnectionEvents.release_savepoint),
    [rollback()](#sqlalchemy.events.ConnectionEvents.rollback), [rollback_savepoint()](#sqlalchemy.events.ConnectionEvents.rollback_savepoint),
    [rollback_twophase()](#sqlalchemy.events.ConnectionEvents.rollback_twophase),
    [savepoint()](#sqlalchemy.events.ConnectionEvents.savepoint), [set_connection_execution_options()](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_cursor_execute()](#sqlalchemy.events.ConnectionEvents.after_cursor_execute),
    [after_execute()](#sqlalchemy.events.ConnectionEvents.after_execute), [before_cursor_execute()](#sqlalchemy.events.ConnectionEvents.before_cursor_execute),
    [before_execute()](#sqlalchemy.events.ConnectionEvents.before_execute), [begin()](#sqlalchemy.events.ConnectionEvents.begin),
    [begin_twophase()](#sqlalchemy.events.ConnectionEvents.begin_twophase), [commit()](#sqlalchemy.events.ConnectionEvents.commit),
    [commit_twophase()](#sqlalchemy.events.ConnectionEvents.commit_twophase), [dispatch](#sqlalchemy.events.ConnectionEvents.dispatch),
    [engine_connect()](#sqlalchemy.events.ConnectionEvents.engine_connect), [engine_disposed()](#sqlalchemy.events.ConnectionEvents.engine_disposed),
    [prepare_twophase()](#sqlalchemy.events.ConnectionEvents.prepare_twophase), [release_savepoint()](#sqlalchemy.events.ConnectionEvents.release_savepoint),
    [rollback()](#sqlalchemy.events.ConnectionEvents.rollback), [rollback_savepoint()](#sqlalchemy.events.ConnectionEvents.rollback_savepoint),
    [rollback_twophase()](#sqlalchemy.events.ConnectionEvents.rollback_twophase),
    [savepoint()](#sqlalchemy.events.ConnectionEvents.savepoint), [set_connection_execution_options()](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options)'
- en: '**Class signature**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") (`sqlalchemy.event.Events`)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") (`sqlalchemy.event.Events`)
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Intercept low-level cursor execute() events after execution.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行后拦截低级游标 execute() 事件。
- en: 'Example argument forms:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Parameters:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`cursor` – DBAPI cursor object. Will have results pending if the statement
    was a SELECT, but these should not be consumed as they will be needed by the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor` – DBAPI 游标对象。如果语句是一个 SELECT，将会有待处理的结果，但不应该消耗这些结果，因为它们会被[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")需要。'
- en: '`statement` – string SQL statement, as passed to the DBAPI'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 字符串 SQL 语句，就像传递给 DBAPI 的一样'
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 字典、元组或传递给 DBAPI 游标的`execute()`或`executemany()`方法的参数列表。在某些情况下可能为`None`。'
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 使用的 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") 对象。可能为 `None`。'
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany` – 布尔值，如果为 `True`，则这是一个 `executemany()` 调用，如果为 `False`，则这是一个 `execute()`
    调用。'
- en: '[PRE36]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Intercept high level execute() events after execute.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行后拦截高级 execute() 事件。
- en: 'Example argument forms:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE37]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Changed in version 1.4: The [`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") event now accepts the arguments
    [`ConnectionEvents.after_execute.conn`](#sqlalchemy.events.ConnectionEvents.after_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.after_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.after_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.params`](#sqlalchemy.events.ConnectionEvents.after_execute.params.params
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.after_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.result`](#sqlalchemy.events.ConnectionEvents.after_execute.params.result
    "sqlalchemy.events.ConnectionEvents.after_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本变更：[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") 事件现在接受参数 [`ConnectionEvents.after_execute.conn`](#sqlalchemy.events.ConnectionEvents.after_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.after_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.after_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.params`](#sqlalchemy.events.ConnectionEvents.after_execute.params.params
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.after_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.result`](#sqlalchemy.events.ConnectionEvents.after_execute.params.result
    "sqlalchemy.events.ConnectionEvents.after_execute")。将来版本将删除对接受前述“已弃用”参数签名的监听器函数的支持。
- en: 'Parameters:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clauseelement` – SQL 表达式构造，[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 实例或传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的字符串语句。'
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiparams` – 多个参数集，一个字典列表。'
- en: '`params` – Single parameter set, a single dictionary.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 单个参数集，一个字典。'
- en: '`execution_options` –'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给语句的执行选项字典，如果有的话。这是将要使用的所有选项的合并，包括语句的选项、连接的选项以及传递给方法本身的用于执行 2.0 风格的选项。
- en: '`result` – [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") generated by the execution.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result` – 执行生成的 [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。'
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Intercept low-level cursor execute() events before execution, receiving the
    string SQL statement and DBAPI-specific parameter list to be invoked against a
    cursor.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行之前拦截低级别游标 execute() 事件，接收要针对游标调用的字符串 SQL 语句和特定于 DBAPI 的参数列表。
- en: 'Example argument forms:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This event is a good choice for logging as well as late modifications to the
    SQL string. It’s less ideal for parameter modifications except for those which
    are specific to a target backend.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件既可用于记录，也可用于对 SQL 字符串进行后期修改。对于除了特定于目标后端的参数修改之外的参数修改，它不太理想。
- en: 'This event can be optionally established with the `retval=True` flag. The `statement`
    and `parameters` arguments should be returned as a two-tuple in this case:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 可以选择使用 `retval=True` 标志建立此事件。在这种情况下，应返回 `statement` 和 `parameters` 参数作为两个元组：
- en: '[PRE40]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: See the example at [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents").
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    中的示例。
- en: 'Parameters:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`cursor` – DBAPI cursor object'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor` – DBAPI 游标对象'
- en: '`statement` – string SQL statement, as to be passed to the DBAPI'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 字符串 SQL 语句，如传递给 DBAPI'
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 字典、元组或传递给 DBAPI `cursor` 的 `execute()` 或 `executemany()` 方法的参数列表。在某些情况下可能为
    `None`。'
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 正在使用的 [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") 对象。可能为 `None`。'
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany` – 布尔值，如果为 `True`，则为 `executemany()` 调用，如果为 `False`，则为 `execute()`
    调用。'
- en: See also
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")'
- en: '[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
- en: '[PRE41]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Intercept high level execute() events, receiving uncompiled SQL constructs and
    other objects prior to rendering into SQL.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截高级别的 `execute()` 事件，在渲染为 SQL 之前接收未编译的 SQL 构造和其他对象。
- en: 'Example argument forms:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE42]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Changed in version 1.4: The [`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") event now accepts the arguments
    [`ConnectionEvents.before_execute.conn`](#sqlalchemy.events.ConnectionEvents.before_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.before_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.before_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.params`](#sqlalchemy.events.ConnectionEvents.before_execute.params.params
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") 事件现在接受参数 [`ConnectionEvents.before_execute.conn`](#sqlalchemy.events.ConnectionEvents.before_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.before_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.before_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.params`](#sqlalchemy.events.ConnectionEvents.before_execute.params.params
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute") 的支持。在未来版本中，将删除接受前述“已弃用”参数签名的侦听器函数的支持。
- en: This event is good for debugging SQL compilation issues as well as early manipulation
    of the parameters being sent to the database, as the parameter lists will be in
    a consistent format here.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件对于调试 SQL 编译问题以及数据库发送的参数的早期操作非常有用，因为此处的参数列表将以一致的格式呈现。
- en: 'This event can be optionally established with the `retval=True` flag. The `clauseelement`,
    `multiparams`, and `params` arguments should be returned as a three-tuple in this
    case:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件可以选择使用 `retval=True` 标志来建立。在这种情况下，应将 `clauseelement`、`multiparams` 和 `params`
    参数作为三元组返回：
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Parameters:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clauseelement` – SQL 表达式构造，[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 实例，或传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的字符串语句。'
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiparams` – 多个参数集，字典列表。'
- en: '`params` – Single parameter set, a single dictionary.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 单个参数集，一个字典。'
- en: '`execution_options` –'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行选项字典，与语句一起传递，如果有的话。这是将要使用的所有选项的合并，包括语句的选项、连接的选项以及传递给方法本身的选项，用于 2.0 风格的执行。
- en: See also
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 也请参阅
- en: '[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
- en: '[PRE44]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Intercept begin() events.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `begin()` 事件。
- en: 'Example argument forms:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE45]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Parameters:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '[PRE46]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Intercept begin_twophase() events.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `begin_twophase()` 事件。
- en: 'Example argument forms:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE47]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Parameters:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Intercept commit() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截由 [`Transaction`](connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    发起的提交事件。
- en: 'Example argument forms:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE49]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    may also “auto-commit” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to the value `'commit'`. To intercept this commit, use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果 `reset_on_return` 标志设置为 `'commit'`，则 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 也可能在归还时 “自动提交” DBAPI 连接。要拦截此提交，请使用 [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 钩子。
- en: 'Parameters:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '[PRE50]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Intercept commit_twophase() events.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `commit_twophase()` 事件。
- en: 'Example argument forms:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE51]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Parameters:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 布尔值，指示是否调用了 [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: reference back to the _Dispatch class.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 双向 _Dispatch._events
- en: '[PRE53]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Intercept the creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截新建 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: 'Example argument forms:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE54]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Changed in version 2.0: The [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event now accepts the arguments
    [`ConnectionEvents.engine_connect.conn`](#sqlalchemy.events.ConnectionEvents.engine_connect.params.conn
    "sqlalchemy.events.ConnectionEvents.engine_connect"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") 事件现在接受参数 [`ConnectionEvents.engine_connect.conn`](#sqlalchemy.events.ConnectionEvents.engine_connect.params.conn
    "sqlalchemy.events.ConnectionEvents.engine_connect")。将来的版本中将删除对接受上述“弃用”之前参数签名的侦听器函数的支持。
- en: This event is called typically as the direct result of calling the [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") method.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，此事件是直接调用 [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") 方法的直接结果。
- en: It differs from the [`PoolEvents.connect()`](#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") method, which refers to the actual connection
    to a database at the DBAPI level; a DBAPI connection may be pooled and reused
    for many operations. In contrast, this event refers only to the production of
    a higher level [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    wrapper around such a DBAPI connection.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 [`PoolEvents.connect()`](#sqlalchemy.events.PoolEvents.connect "sqlalchemy.events.PoolEvents.connect")
    方法不同，后者是指在 DBAPI 级别对数据库的实际连接；DBAPI 连接可能会被池化并重复使用多次。相比之下，此事件仅与在此类 DBAPI 连接周围生成更高级别的
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    包装器有关。
- en: It also differs from the [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") event in that it is specific to the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, not the DBAPI connection that [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") deals with, although this DBAPI connection
    is available here via the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute. But note there can in fact
    be multiple [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    events within the lifespan of a single [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, if that [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is invalidated and re-established.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 它还与 [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    事件不同，后者特定于 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，而不是 [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    处理的 DBAPI 连接，尽管该 DBAPI 连接可以通过 [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") 属性在此处获得。但请注意，如果 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 无效并重新建立，则单个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象的生命周期中实际上可以有多个 [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") 事件。
- en: 'Parameters:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象。'
- en: See also
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    the lower-level pool checkout event for an individual DBAPI connection'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    单个 DBAPI 连接的低级别池检出事件'
- en: '[PRE55]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Intercept when the [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")
    方法被调用的情况。
- en: 'Example argument forms:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE56]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")
    method instructs the engine to “dispose” of it’s connection pool (e.g. [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")), and replaces it with a new one. Disposing of the old
    pool has the effect that existing checked-in connections are closed. The new pool
    does not establish any new connections until it is first used.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")
    方法指示引擎“处理”它的连接池（例如 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")），并用新的连接池替换它。处理旧连接池的效果是关闭现有的已检入连接。新连接池在首次使用之前不会建立任何新连接。'
- en: This event can be used to indicate that resources related to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should also be cleaned up, keeping in mind that the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    can still be used for new requests in which case it re-acquires connection resources.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件可用于指示应该清理与 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    相关的资源，但要注意，[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    仍然可以用于新请求，此时它将重新获取连接资源。
- en: '[PRE57]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Intercept prepare_twophase() events.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `prepare_twophase()` 事件。
- en: 'Example argument forms:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE58]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Parameters:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '[PRE59]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Intercept release_savepoint() events.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `release_savepoint()` 事件。
- en: 'Example argument forms:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE60]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Parameters:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`name` – specified name used for the savepoint.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于保存点的指定名称。'
- en: '`context` – not used'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 未使用'
- en: '[PRE61]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Intercept rollback() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截由 [`Transaction`](connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")
    启动的 `rollback()` 事件。
- en: 'Example argument forms:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE62]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    also “auto-rolls back” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to its default value of `'rollback'`. To intercept this rollback,
    use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    hook.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果 `reset_on_return` 标志设置为其默认值 `'rollback'`，[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 在归还时也会“自动回滚” DBAPI 连接。要拦截此回滚，请使用 [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 钩子。
- en: 'Parameters:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: See also
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
- en: '[PRE63]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Intercept rollback_savepoint() events.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `rollback_savepoint()` 事件。
- en: 'Example argument forms:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE64]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Parameters:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`name` – specified name used for the savepoint.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于保存点的指定名称。'
- en: '`context` – not used'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 未使用'
- en: '[PRE65]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Intercept rollback_twophase() events.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `rollback_twophase()` 事件。
- en: 'Example argument forms:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE66]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Parameters:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 布尔值，指示是否调用了 [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '[PRE67]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Intercept savepoint() events.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 `savepoint()` 事件。
- en: 'Example argument forms:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE68]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Parameters:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`name` – specified name used for the savepoint.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于保存点的指定名称。'
- en: '[PRE69]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Intercept when the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is called.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法调用时。
- en: 'Example argument forms:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE70]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This method is called after the new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has been produced, with the newly updated execution
    options collection, but before the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") has acted upon any of those new options.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在新的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    生成后调用，具有新更新的执行选项集，但在 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    对这些新选项之前。
- en: Note that this method is not called when a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is produced which is inheriting execution options
    from its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine");
    to intercept this condition, use the [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当从其父[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")继承执行选项的新[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")被生成时，不会调用此方法；要拦截此条件，请使用[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")事件。
- en: 'Parameters:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – The newly copied [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – 新复制的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象'
- en: '`opts` –'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opts` –'
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法的选项字典。此字典可以就地修改，以影响最终生效的选项。
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容：`opts`字典可以就地修改。
- en: See also
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.set_engine_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") - event which
    is called when [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") is called.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_engine_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") - 当调用[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")时调用的事件。'
- en: '[PRE71]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Intercept when the [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method is called.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法时拦截。
- en: 'Example argument forms:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE72]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method produces a shallow copy of
    the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which stores the new options. That new [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is passed here. A particular application of this method
    is to add a [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event handler to the given
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which will perform some per- [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") task specific to these execution options.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法生成[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的浅拷贝，其中存储了新的选项。这个新的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")被传递到这里。此方法的一个特定应用是将[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")事件处理程序添加到给定的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")上，该处理程序将执行一些针对这些执行选项的特定于每个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的任务。'
- en: 'Parameters:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – The newly copied [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – 新复制的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象'
- en: '`opts` –'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opts` –'
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法的选项字典。此字典可以就地修改，以影响最终生效的选项。
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容：`opts`字典可以就地修改。
- en: See also
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.set_connection_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") - event
    which is called when [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") is called.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") - 当调用[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")时调用的事件。'
- en: '[PRE73]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: event interface for execution-replacement functions.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 用于执行替换函数的事件接口。
- en: These events allow direct instrumentation and replacement of key dialect functions
    which interact with the DBAPI.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件允许直接检测和替换与DBAPI交互的关键方言函数。
- en: Note
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    hooks should be considered **semi-public** and experimental. These hooks are not
    for general use and are only for those situations where intricate re-statement
    of DBAPI mechanics must be injected onto an existing dialect. For general-use
    statement-interception events, please use the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") interface.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    钩子应被视为**半公开**和实验性质的。这些钩子不适用于一般情况，并且仅适用于那些需要将复杂的DBAPI机制重新注入到现有方言中的情况。对于一般用途的语句拦截事件，请使用[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") 接口。'
- en: See also
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
- en: '[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")'
- en: '[`ConnectionEvents.after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
- en: '[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")'
- en: '**Members**'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispatch](#sqlalchemy.events.DialectEvents.dispatch), [do_connect()](#sqlalchemy.events.DialectEvents.do_connect),
    [do_execute()](#sqlalchemy.events.DialectEvents.do_execute), [do_execute_no_params()](#sqlalchemy.events.DialectEvents.do_execute_no_params),
    [do_executemany()](#sqlalchemy.events.DialectEvents.do_executemany), [do_setinputsizes()](#sqlalchemy.events.DialectEvents.do_setinputsizes),
    [handle_error()](#sqlalchemy.events.DialectEvents.handle_error)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispatch](#sqlalchemy.events.DialectEvents.dispatch), [do_connect()](#sqlalchemy.events.DialectEvents.do_connect),
    [do_execute()](#sqlalchemy.events.DialectEvents.do_execute), [do_execute_no_params()](#sqlalchemy.events.DialectEvents.do_execute_no_params),
    [do_executemany()](#sqlalchemy.events.DialectEvents.do_executemany), [do_setinputsizes()](#sqlalchemy.events.DialectEvents.do_setinputsizes),
    [handle_error()](#sqlalchemy.events.DialectEvents.handle_error)'
- en: '**Class signature**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '类[`sqlalchemy.events.DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    (`sqlalchemy.event.Events`) '
- en: '[PRE74]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: reference back to the _Dispatch class.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 参考_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 双向对_Dispatch._events
- en: '[PRE75]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Receive connection arguments before a connection is made.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立连接之前接收连接参数。
- en: 'Example argument forms:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE76]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This event is useful in that it allows the handler to manipulate the cargs
    and/or cparams collections that control how the DBAPI `connect()` function will
    be called. `cargs` will always be a Python list that can be mutated in-place,
    and `cparams` a Python dictionary that may also be mutated:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件很有用，因为它允许处理程序操纵控制DBAPI `connect()` 函数将如何调用的 `cargs` 和/或 `cparams` 集合。`cargs`将始终是一个可以原位变异的Python列表，而`cparams`是一个也可以变异的Python字典：
- en: '[PRE77]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The event hook may also be used to override the call to `connect()` entirely,
    by returning a non-`None` DBAPI connection object:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 事件钩子也可用于完全覆盖`connect()`的调用，方法是返回一个非`None`的DBAPI连接对象：
- en: '[PRE78]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: See also
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '[自定义DBAPI connect() 参数 / 在连接时运行的程序](engines.html#custom-dbapi-args)'
- en: '[PRE79]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Receive a cursor to have execute() called.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个游标以调用 execute()。
- en: 'Example argument forms:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE80]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True 值以阻止进一步调用事件，并指示游标执行已在事件处理程序中发生。
- en: '[PRE81]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Receive a cursor to have execute() with no parameters called.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个游标以调用没有参数的 execute()。
- en: 'Example argument forms:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE82]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True 值以阻止进一步调用事件，并指示游标执行已在事件处理程序中发生。
- en: '[PRE83]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Receive a cursor to have executemany() called.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个游标以调用 executemany()。
- en: 'Example argument forms:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE84]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True 值以阻止进一步调用事件，并指示游标执行已在事件处理程序中发生。
- en: '[PRE85]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Receive the setinputsizes dictionary for possible modification.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 接收可供修改的 setinputsizes 字典。
- en: 'Example argument forms:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE86]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: This event is emitted in the case where the dialect makes use of the DBAPI `cursor.setinputsizes()`
    method which passes information about parameter binding for a particular statement.
    The given `inputsizes` dictionary will contain [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects as keys, linked to DBAPI-specific
    type objects as values; for parameters that are not bound, they are added to the
    dictionary with `None` as the value, which means the parameter will not be included
    in the ultimate setinputsizes call. The event may be used to inspect and/or log
    the datatypes that are being bound, as well as to modify the dictionary in place.
    Parameters can be added, modified, or removed from this dictionary. Callers will
    typically want to inspect the `BindParameter.type` attribute of the given bind
    objects in order to make decisions about the DBAPI object.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当方言使用 DBAPI `cursor.setinputsizes()` 方法传递关于特定语句参数绑定的信息时，会触发此事件。给定的 `inputsizes`
    字典将包含[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象作为键，链接到特定于 DBAPI 的类型对象作为值；对于未绑定的参数，它们将以
    `None` 作为值添加到字典中，这意味着该参数将不会包含在最终的 setinputsizes 调用中。该事件可用于检查和/或记录被绑定的数据类型，并直接修改字典。可以向该字典中添加、修改或删除参数。调用者通常希望检查给定绑定对象的
    `BindParameter.type` 属性，以便对 DBAPI 对象做出决策。
- en: After the event, the `inputsizes` dictionary is converted into an appropriate
    datastructure to be passed to `cursor.setinputsizes`; either a list for a positional
    bound parameter execution style, or a dictionary of string parameter keys to DBAPI
    type objects for a named bound parameter execution style.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 事件之后，`inputsizes` 字典将转换为适当的数据结构以传递给 `cursor.setinputsizes`；对于位置绑定参数执行样式，转换为列表；对于命名绑定参数执行样式，转换为字符串参数键到
    DBAPI 类型对象的字典。
- en: The setinputsizes hook overall is only used for dialects which include the flag
    `use_setinputsizes=True`. Dialects which use this include cx_Oracle, pg8000, asyncpg,
    and pyodbc dialects.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: setinputsizes 钩子整体上仅用于包含标志 `use_setinputsizes=True` 的方言。使用此标志的方言包括 cx_Oracle、pg8000、asyncpg
    和 pyodbc 方言。
- en: Note
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For use with pyodbc, the `use_setinputsizes` flag must be passed to the dialect,
    e.g.:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 与 pyodbc 一起使用时，必须向方言传递 `use_setinputsizes` 标志，例如：
- en: '[PRE87]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: See also
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setinputsizes Support](../dialects/mssql.html#mssql-pyodbc-setinputsizes)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[Setinputsizes 支持](../dialects/mssql.html#mssql-pyodbc-setinputsizes)'
- en: New in version 1.2.9.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2.9 中新增。
- en: See also
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 setinputsizes 对 cx_Oracle 数据绑定性能进行细粒度控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: '[PRE88]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Intercept all exceptions processed by the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), typically but not limited to those emitted within
    the scope of a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截[`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    典型但不限于在 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    范围内发出的异常。
- en: 'Example argument forms:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE89]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Changed in version 2.0: the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is moved to the [`DialectEvents`](#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") class, moved from the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") class, so that it may also participate in
    the “pre ping” operation configured with the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter. The event remains registered by using the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    as the event target, however note that using the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as an event target for [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") is no longer supported.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")事件已移至[`DialectEvents`](#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents")类中，从[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")类中移除，以便它还可以参与使用[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")参数配置的“预连接”操作。该事件仍通过使用[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")作为事件目标来注册，但请注意，不再支持将[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")用作[`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")的事件目标。
- en: This includes all exceptions emitted by the DBAPI as well as within SQLAlchemy’s
    statement invocation process, including encoding errors and other statement validation
    errors. Other areas in which the event is invoked include transaction begin and
    end, result row fetching, cursor creation.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括由DBAPI发出的所有异常，以及SQLAlchemy语句调用过程中的其他区域，包括编码错误和其他语句验证错误。调用事件的其他区域包括事务开始和结束、结果行获取、游标创建。
- en: Note that [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error "sqlalchemy.events.DialectEvents.handle_error")
    may support new kinds of exceptions and new calling scenarios at *any time*. Code
    which uses this event must expect new calling patterns to be present in minor
    releases.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error "sqlalchemy.events.DialectEvents.handle_error")可能随时支持新类型的异常和新的调用场景。使用此事件的代码必须预期在次要版本中存在新的调用模式。
- en: To support the wide variety of members that correspond to an exception, as well
    as to allow extensibility of the event without backwards incompatibility, the
    sole argument received is an instance of [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). This object contains data members representing
    detail about the exception.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持对应于异常的广泛成员的各种情况，并允许在不向后兼容的情况下扩展事件，所接收的唯一参数是一个[`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext")的实例。此对象包含表示异常详细信息的数据成员。
- en: 'Use cases supported by this hook include:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 此钩子支持的用例包括：
- en: read-only, low-level exception handling for logging and debugging purposes
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅用于日志记录和调试目的的只读低级别异常处理
- en: Establishing whether a DBAPI connection error message indicates that the database
    connection needs to be reconnected, including for the “pre_ping” handler used
    by `some` dialects
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立DBAPI连接错误消息是否指示需要重新连接数据库连接，包括某些方言使用的“pre_ping”处理程序
- en: Establishing or disabling whether a connection or the owning connection pool
    is invalidated or expired in response to a specific exception
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在响应特定异常时建立或禁用连接或拥有连接池是否无效或过期
- en: exception re-writing
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常重写
- en: The hook is called while the cursor from the failed operation (if any) is still
    open and accessible. Special cleanup operations can be called on this cursor;
    SQLAlchemy will attempt to close this cursor subsequent to this hook being invoked.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在失败的操作的游标（如果有）仍处于打开和可访问状态时调用该钩子。可以在此游标上调用特殊的清理操作；SQLAlchemy将尝试在调用此钩子后关闭此游标。
- en: As of SQLAlchemy 2.0, the “pre_ping” handler enabled using the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter will also participate in the [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") process, **for those dialects
    that rely upon disconnect codes to detect database liveness**. Note that some
    dialects such as psycopg, psycopg2, and most MySQL dialects make use of a native
    `ping()` method supplied by the DBAPI which does not make use of disconnect codes.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQLAlchemy 2.0 开始，使用 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数启用的“pre_ping”处理程序也将参与 [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 过程，对于那些依赖断开连接代码来检测数据库活动性的方言。请注意，一些方言，如
    psycopg、psycopg2 和大多数 MySQL 方言，使用由 DBAPI 提供的本地 `ping()` 方法，该方法不使用断开连接代码。
- en: 'Changed in version 2.0.0: The [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook participates in connection
    pool “pre-ping” operations. Within this usage, the [`ExceptionContext.engine`](connections.html#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") attribute will be `None`, however
    the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in use is always available via the [`ExceptionContext.dialect`](connections.html#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") attribute.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.0 中进行了更改：[`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子参与连接池“预先ping”操作。在此使用中，[`ExceptionContext.engine`](connections.html#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") 属性将为 `None`，但是正在使用的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 可通过 [`ExceptionContext.dialect`](connections.html#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") 属性始终可用。
- en: 'Changed in version 2.0.5: Added [`ExceptionContext.is_pre_ping`](connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") attribute which will be set
    to `True` when the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook is triggered within
    a connection pool pre-ping operation.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.5 中进行了更改：添加了 [`ExceptionContext.is_pre_ping`](connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") 属性，当在连接池的“预先ping”操作中触发 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子时，该属性将设置为 `True`。
- en: 'Changed in version 2.0.5: An issue was repaired that allows for the PostgreSQL
    `psycopg` and `psycopg2` drivers, as well as all MySQL drivers, to properly participate
    in the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook during connection pool
    “pre-ping” operations; previously, the implementation was non-working for these
    drivers.'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.5 中进行了更改：修复了一个问题，允许 PostgreSQL `psycopg` 和 `psycopg2` 驱动程序以及所有 MySQL
    驱动程序在连接池“预先ping”操作期间正确参与 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子；此前，这些驱动程序的实现对这些驱动程序而言是无效的。
- en: 'A handler function has two options for replacing the SQLAlchemy-constructed
    exception into one that is user defined. It can either raise this new exception
    directly, in which case all further event listeners are bypassed and the exception
    will be raised, after appropriate cleanup as taken place:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序函数有两个选项来将 SQLAlchemy 构造的异常替换为用户定义的异常。它可以直接引发此新异常，此时所有后续事件监听器都将被绕过，并且异常将在适当的清理完成后被引发：
- en: '[PRE90]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Warning
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Because the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event specifically provides for
    exceptions to be re-thrown as the ultimate exception raised by the failed statement,
    **stack traces will be misleading** if the user-defined event handler itself fails
    and throws an unexpected exception; the stack trace may not illustrate the actual
    code line that failed! It is advised to code carefully here and use logging and/or
    inline debugging if unexpected exceptions are occurring.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件专门提供了将异常重新抛出为失败语句引发的最终异常的方法，如果用户定义的事件处理程序本身失败并引发意外异常，则堆栈跟踪将会误导！建议在这里小心编码，并在发生意外异常时使用日志记录和/或内联调试。
- en: 'Alternatively, a “chained” style of event handling can be used, by configuring
    the handler with the `retval=True` modifier and returning the new exception instance
    from the function. In this case, event handling will continue onto the next handler.
    The “chained” exception is available using [`ExceptionContext.chained_exception`](connections.html#sqlalchemy.engine.ExceptionContext.chained_exception
    "sqlalchemy.engine.ExceptionContext.chained_exception"):'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用“链接”样式的事件处理，通过使用`retval=True`修饰符配置处理程序，并从函数返回新的异常实例来使用。在这种情况下，事件处理将继续到下一个处理程序。可以使用[`ExceptionContext.chained_exception`](connections.html#sqlalchemy.engine.ExceptionContext.chained_exception
    "sqlalchemy.engine.ExceptionContext.chained_exception")获取“链接”异常：
- en: '[PRE91]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Handlers that return `None` may be used within the chain; when a handler returns
    `None`, the previous exception instance, if any, is maintained as the current
    exception that is passed onto the next handler.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`None`的处理程序可以在链中使用；当处理程序返回`None`时，如果有的话，前一个异常实例将保持为传递给下一个处理程序的当前异常。
- en: When a custom exception is raised or returned, SQLAlchemy raises this new exception
    as-is, it is not wrapped by any SQLAlchemy object. If the exception is not a subclass
    of [`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError"), certain features may not be available; currently
    this includes the ORM’s feature of adding a detail hint about “autoflush” to exceptions
    raised within the autoflush process.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 当引发或返回自定义异常时，SQLAlchemy将直接引发此新异常，不会被任何SQLAlchemy对象包装。如果异常不是[`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")的子类，某些功能可能不可用；目前包括ORM在自动刷新过程中引发异常时添加有关“自动刷新”的详细提示的功能。
- en: 'Parameters:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**context** – an [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") object. See this class for details on all
    available members.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '**context** – 一个[`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext")对象。有关所有可用成员的详细信息，请参阅此类。'
- en: See also
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Supporting new database error codes for disconnect scenarios](pooling.html#pool-new-disconnect-codes)'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[支持断开场景下的新数据库错误代码](pooling.html#pool-new-disconnect-codes)'
- en: Schema Events
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式事件
- en: '| Object Name | Description |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [DDLEvents](#sqlalchemy.events.DDLEvents) | Define event listeners for schema
    objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget "sqlalchemy.events.SchemaEventTarget")
    subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| [DDLEvents](#sqlalchemy.events.DDLEvents) | 为模式对象定义事件监听器，即[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")和其他[`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")子类，包括[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")等。
    |'
- en: '| [SchemaEventTarget](#sqlalchemy.events.SchemaEventTarget) | Base class for
    elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    events. |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaEventTarget](#sqlalchemy.events.SchemaEventTarget) | 用于[`DDLEvents`](#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents")事件的目标元素的基类。 |'
- en: '[PRE92]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Define event listeners for schema objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 为模式对象定义事件监听器，即[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")和其他[`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")子类，包括[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")等。
- en: '**Create / Drop Events**'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建/删除事件**'
- en: Events emitted when CREATE and DROP commands are emitted to the database. The
    event hooks in this category include [`DDLEvents.before_create()`](#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop").
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 当CREATE和DROP命令发送到数据库时发出的事件。此类别中的事件挂钩包括[`DDLEvents.before_create()`](#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")，[`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")，[`DDLEvents.before_drop()`](#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop")和[`DDLEvents.after_drop()`](#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop")。
- en: These events are emitted when using schema-level methods such as [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). Per-object create/drop methods such as
    [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create"),
    [`Table.drop()`](metadata.html#sqlalchemy.schema.Table.drop "sqlalchemy.schema.Table.drop"),
    [`Index.create()`](constraints.html#sqlalchemy.schema.Index.create "sqlalchemy.schema.Index.create")
    are also included, as well as dialect-specific methods such as [`ENUM.create()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create").
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用模式级方法（例如[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")和[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")）时，会发出这些事件。还包括每个对象的create/drop方法，如[`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")，[`Table.drop()`](metadata.html#sqlalchemy.schema.Table.drop
    "sqlalchemy.schema.Table.drop")，[`Index.create()`](constraints.html#sqlalchemy.schema.Index.create
    "sqlalchemy.schema.Index.create")，以及特定于方言的方法，如[`ENUM.create()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create")。
- en: 'New in version 2.0: [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    event hooks now take place for non-table objects including constraints, indexes,
    and dialect-specific schema types.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能2.0版中：[`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")事件挂钩现在适用于非表对象，包括约束、索引和特定于方言的模式类型。
- en: Event hooks may be attached directly to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object or to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, as well as to any [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") class or object that can be individually created
    and dropped using a distinct SQL command. Such classes include [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and dialect-specific classes such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 事件挂钩可以直接附加到[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象或[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合，以及任何可通过单独的SQL命令创建和删除的[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")类或对象。此类包括[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")以及特定于方言的类，例如[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: 'Example using the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event, where a custom event hook will
    emit an `ALTER TABLE` command on the current connection, after `CREATE TABLE`
    is emitted:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create "sqlalchemy.events.DDLEvents.after_create")事件的示例，其中自定义事件挂钩将在发送`CREATE
    TABLE`后在当前连接上发出`ALTER TABLE`命令：
- en: '[PRE93]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Constraint objects such as [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") may also be subscribed to these events, however
    they will **not** normally produce events as these objects are usually rendered
    inline within an enclosing `CREATE TABLE` statement and implicitly dropped from
    a `DROP TABLE` statement.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 约束对象，如[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")，也可以订阅这些事件，但通常不会产生事件，因为这些对象通常是内联渲染在一个包含的`CREATE
    TABLE`语句中，并且在`DROP TABLE`语句中隐式地被删除。
- en: For the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct, the event hook will be emitted for `CREATE INDEX`, however SQLAlchemy
    does not normally emit `DROP INDEX` when dropping tables as this is again implicit
    within the `DROP TABLE` statement.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")构造，事件钩子将被触发为`CREATE
    INDEX`，但是当删除表时，SQLAlchemy通常不会发出`DROP INDEX`，因为这再次隐含在`DROP TABLE`语句中。
- en: 'New in version 2.0: Support for [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects for create/drop events was expanded from
    its previous support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") and [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to also include [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") and all subclasses, [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and some type-related constructs such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中：支持[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的创建/删除事件从其先前对[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")和[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的支持扩展到还包括[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")和所有子类、[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")以及一些与类型相关的构造，比如[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: Note
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These event hooks are only emitted within the scope of SQLAlchemy’s create/drop
    methods; they are not necessarily supported by tools such as [alembic](https://alembic.sqlalchemy.org).
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件钩子仅在SQLAlchemy的创建/删除方法范围内触发；它们不一定受到诸如[alembic](https://alembic.sqlalchemy.org)之类的工具的支持。
- en: '**Attachment Events**'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加事件**'
- en: Attachment events are provided to customize behavior whenever a child schema
    element is associated with a parent, such as when a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with its [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), when a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is associated with a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), etc. These events include [`DDLEvents.before_parent_attach()`](#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") and [`DDLEvents.after_parent_attach()`](#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach").
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 附加事件提供了自定义行为的机会，每当一个子模式元素与父元素相关联时，比如当一个[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")与其[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")相关联时，当一个[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")与一个[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联时等。这些事件包括[`DDLEvents.before_parent_attach()`](#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach")和[`DDLEvents.after_parent_attach()`](#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach")。
- en: '**Reflection Events**'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '**反射事件**'
- en: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event is used to intercept and modify
    the in-Python definition of database columns when [reflection](../glossary.html#term-reflection)
    of database tables proceeds.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")事件用于拦截和修改数据库表反射进行时的数据库列的 Python 中定义。'
- en: '**Use with Generic DDL**'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '**与通用 DDL 一起使用**'
- en: 'DDL events integrate closely with the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") class and the [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") hierarchy of DDL clause constructs,
    which are themselves appropriate as listener callables:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 事件与[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")类和 DDL
    子句结构的[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")层次密切集成，它们本身适合作为侦听器可调用：
- en: '[PRE94]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '**Event Propagation to MetaData Copies**'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件传播到 MetaData 复制**'
- en: 'For all `DDLEvent` events, the `propagate=True` keyword argument will ensure
    that a given event handler is propagated to copies of the object, which are made
    when using the [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") method:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有`DDLEvent`事件，`propagate=True`关键字参数将确保给定的事件处理程序传播到对象的副本中，当使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")方法时会生成这些副本：
- en: '[PRE95]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The above [`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") object
    will be associated with the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event for both the `some_table` and
    the `new_table` [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")对象将与`some_table`和`new_table`[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的[`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")事件相关联。
- en: See also
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Events](event.html)'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '[事件](event.html)'
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")'
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
- en: '[Controlling DDL Sequences](ddl.html#schema-ddl-sequences)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制 DDL 序列](ddl.html#schema-ddl-sequences)'
- en: '**Members**'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_create()](#sqlalchemy.events.DDLEvents.after_create), [after_drop()](#sqlalchemy.events.DDLEvents.after_drop),
    [after_parent_attach()](#sqlalchemy.events.DDLEvents.after_parent_attach), [before_create()](#sqlalchemy.events.DDLEvents.before_create),
    [before_drop()](#sqlalchemy.events.DDLEvents.before_drop), [before_parent_attach()](#sqlalchemy.events.DDLEvents.before_parent_attach),
    [column_reflect()](#sqlalchemy.events.DDLEvents.column_reflect), [dispatch](#sqlalchemy.events.DDLEvents.dispatch)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_create()](#sqlalchemy.events.DDLEvents.after_create)、[after_drop()](#sqlalchemy.events.DDLEvents.after_drop)、[after_parent_attach()](#sqlalchemy.events.DDLEvents.after_parent_attach)、[before_create()](#sqlalchemy.events.DDLEvents.before_create)、[before_drop()](#sqlalchemy.events.DDLEvents.before_drop)、[before_parent_attach()](#sqlalchemy.events.DDLEvents.before_parent_attach)、[column_reflect()](#sqlalchemy.events.DDLEvents.column_reflect)、[dispatch](#sqlalchemy.events.DDLEvents.dispatch)'
- en: '**Class signature**'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")（`sqlalchemy.event.Events`）
- en: '[PRE96]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Called after CREATE statements are emitted.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出 CREATE 语句后调用。
- en: 'Example argument forms:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE97]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Parameters:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件目标，如[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，但也包括所有创建/删除对象，如[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")等。
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 新增：添加对所有[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的支持。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements have
    been emitted.'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 发出 CREATE 语句或语句的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的附加关键字参数。此字典的内容可能会在不同版本之间变化，并包括在元数据级事件中生成的表列表、checkfirst 标志以及内部事件使用的其他元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    还接受`propagate=True`修饰符，用于此事件；当为 True 时，监听器函数将为目标对象的任何副本建立，即在使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成的那些副本。'
- en: '[PRE98]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Called after DROP statements are emitted.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出 DROP 语句后调用。
- en: 'Example argument forms:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE99]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Parameters:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件目标的`SchemaObject`，例如[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，但也包括所有 create/drop 对象，如[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 等对象。
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中添加了对所有[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的支持。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements have been
    emitted.'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 发出 DROP 语句或语句的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的附加关键字参数。此字典的内容可能会在不同版本之间变化，并包括在元数据级事件中生成的表列表、checkfirst 标志以及内部事件使用的其他元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    还接受`propagate=True`修饰符，用于此事件；当为 True 时，监听器函数将为目标对象的任何副本建立，即在使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成的那些副本。'
- en: '[PRE100]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Called after a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")与父[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")关联之后调用。
- en: 'Example argument forms:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE101]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Parameters:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the target object'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 目标对象'
- en: '`parent` – the parent to which the target is being attached.'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent` – 将目标附加到的父级。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")还接受`propagate=True`修饰符用于此事件；当为True时，监听函数将为目标对象的任何副本建立，即在使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")时生成的那些副本。'
- en: '[PRE102]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Called before CREATE statements are emitted.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成CREATE语句之前调用。
- en: 'Example argument forms:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE103]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Parameters:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SchemaObject`，比如[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，还包括所有的创建/删除对象，比如[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")等，这些对象是事件的目标。'
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版新增：对所有[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的支持已添加。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements will
    be emitted.'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 将发出CREATE语句或语句的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的其他关键字参数。此字典的内容可能会在不同版本之间变化，并包括元数据级事件生成的表列表、checkfirst标志和内部事件使用的其他元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")接受`propagate=True`修饰符用于此事件；当为True时，监听函数将为目标对象的任何副本建立，即在使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")时生成的那些副本。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `insert=True` modifier for this event; when True, the listener function
    will be prepended to the internal list of events upon discovery, and execute before
    registered listener functions that do not pass this argument.'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")接受`insert=True`修饰符用于此事件；当为True时，监听函数将被添加到内部事件列表的开头，并在未传递此参数的已注册监听函数之前执行。'
- en: '[PRE104]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Called before DROP statements are emitted.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成DROP语句之前调用。
- en: 'Example argument forms:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE105]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Parameters:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SchemaObject`，比如[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，还包括所有的创建/删除对象，比如[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")等，这些对象是事件的目标。'
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版新增：对所有[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的支持已添加。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements will be
    emitted.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 发出DROP语句的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的附加关键字参数。此字典的内容可能因发布而异，包括用于元数据级事件生成表的表列表，checkfirst标志和内部事件使用的其他元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")也接受`propagate=True`修饰符用于此事件；当为True时，监听器函数将为目标对象的任何副本建立，即在使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")生成的那些副本。'
- en: '[PRE106]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Called before a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 在将[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")与父[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")关联之前调用。
- en: 'Example argument forms:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE107]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Parameters:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the target object'
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 目标对象'
- en: '`parent` – the parent to which the target is being attached.'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent` – 将目标附加到的父对象。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")也接受`propagate=True`修饰符用于此事件；当为True时，监听器函数将为目标对象的任何副本建立，即在使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")生成的那些副本。'
- en: '[PRE108]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Called for each unit of ‘column info’ retrieved when a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is being reflected.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在对反射的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")检索每个‘列信息’单元时调用。
- en: 'Example argument forms:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE109]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'This event is most easily used by applying it to a specific [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance, where it will take effect for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects within that [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") that undergo reflection:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件最容易通过将其应用于特定的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")实例来使用，在该实例中，它将对该[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中的所有[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象产生影响，这些对象在反射时进行。
- en: '[PRE110]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'New in version 1.4.0b2: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") hook may now be applied to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object as well as the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") class itself where it will take place for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects associated with the targeted [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2中：[`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")钩子现在也可以应用于[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象，以及它将对与目标[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的所有[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象产生影响的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")类本身。
- en: 'It may also be applied to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") class across the board:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以应用于整个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")类：
- en: '[PRE111]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'It can also be applied to a specific [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at the point that one is being reflected using the
    [`Table.listeners`](metadata.html#sqlalchemy.schema.Table.params.listeners "sqlalchemy.schema.Table")
    parameter:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以应用到正在使用[`Table.listeners`](metadata.html#sqlalchemy.schema.Table.params.listeners
    "sqlalchemy.schema.Table")参数反射的特定[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上：
- en: '[PRE112]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The dictionary of column information as returned by the dialect is passed,
    and can be modified. The dictionary is that returned in each element of the list
    returned by [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"):'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 由方言返回的列信息字典会被传递，并且可以被修改。该字典是由[`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")返回的列表中的每个元素返回的：
- en: '`name` - the column’s name, is applied to the [`Column.name`](metadata.html#sqlalchemy.schema.Column.params.name
    "sqlalchemy.schema.Column") parameter'
  id: totrans-552
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 列的名称，应用于[`Column.name`](metadata.html#sqlalchemy.schema.Column.params.name
    "sqlalchemy.schema.Column")参数'
- en: ''
  id: totrans-553
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-554
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` - the type of this column, which should be an instance of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"), is applied to the [`Column.type`](metadata.html#sqlalchemy.schema.Column.params.type
    "sqlalchemy.schema.Column") parameter'
  id: totrans-555
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` - 该列的类型，应该是[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")的一个实例，应用于[`Column.type`](metadata.html#sqlalchemy.schema.Column.params.type
    "sqlalchemy.schema.Column")参数'
- en: ''
  id: totrans-556
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-557
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nullable` - boolean flag if the column is NULL or NOT NULL, is applied to
    the [`Column.nullable`](metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") parameter'
  id: totrans-558
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nullable` - 如果列是 NULL 或 NOT NULL 的布尔标志，应用于[`Column.nullable`](metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")参数'
- en: ''
  id: totrans-559
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-560
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default` - the column’s server default value. This is normally specified as
    a plain string SQL expression, however the event can pass a [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") object as well. Is applied to the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter'
  id: totrans-561
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` - 列的服务器默认值。通常将其指定为纯字符串 SQL 表达式，但事件也可以传递一个[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")、[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause")或[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")对象。应用于[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数'
- en: 'The event is called before any action is taken against this dictionary, and
    the contents can be modified; the following additional keys may be added to the
    dictionary to further modify how the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is constructed:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 在对该字典执行任何操作之前调用事件，并且内容可以被修改；以下其他键可以被添加到字典中以进一步修改如何构造[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")：
- en: '`key` - the string key that will be used to access this [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in the `.c` collection; will be applied to the [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") parameter. Is also used for ORM mapping. See the section
    [Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    for an example.'
  id: totrans-563
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` - 将用于在`.c`集合中访问此[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的字符串键；将应用于[`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column")参数。也用于 ORM 映射。参见[从反射表自动命名列方案](../orm/declarative_tables.html#mapper-automated-reflection-schemes)一节的示例。'
- en: ''
  id: totrans-564
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-565
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote` - force or un-force quoting on the column name; is applied to the [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column") parameter.'
  id: totrans-566
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` - 强制或取消强制对列名称进行引用；应用于[`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column")参数。'
- en: ''
  id: totrans-567
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-568
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` - a dictionary of arbitrary data to follow along with the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), is applied to the [`Column.info`](metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter.'
  id: totrans-569
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` - 一个包含任意数据的字典，用于跟踪[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，应用于[`Column.info`](metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column")参数。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")还接受`propagate=True`修改器用于此事件；当为True时，监听器函数将为目标对象的任何副本建立，即使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")生成的那些副本。'
- en: See also
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    - in the ORM mapping documentation'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[从反射表自动命名方案](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    - 在ORM映射文档中'
- en: '[Intercepting Column Definitions](../orm/extensions/automap.html#automap-intercepting-columns)
    - in the [Automap](../orm/extensions/automap.html) documentation'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '[拦截列定义](../orm/extensions/automap.html#automap-intercepting-columns) - 在[Automap](../orm/extensions/automap.html)文档中'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - in the [Reflecting Database Objects](reflection.html) documentation'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[反映与数据库无关的类型](reflection.html#metadata-reflection-dbagnostic-types) - 在[反射数据库对象](reflection.html)文档中'
- en: '[PRE113]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: reference back to the _Dispatch class.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 回引到_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 双向与_Dispatch._events相对
- en: '[PRE114]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Base class for elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") events.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 作为[`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")事件目标的元素的基类。
- en: This includes [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    as well as [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType").
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")以及[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")。
- en: '**Class signature**'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") (`sqlalchemy.event.registry.EventTarget`)
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")（`sqlalchemy.event.registry.EventTarget`）
- en: Connection Pool Events
  id: totrans-583
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池事件
- en: '| Object Name | Description |'
  id: totrans-584
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-585
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [PoolEvents](#sqlalchemy.events.PoolEvents) | Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"). |'
  id: totrans-586
  prefs: []
  type: TYPE_TB
  zh: '| [PoolEvents](#sqlalchemy.events.PoolEvents) | [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")的可用事件。 |'
- en: '| [PoolResetState](#sqlalchemy.events.PoolResetState) | describes the state
    of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event. |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| [PoolResetState](#sqlalchemy.events.PoolResetState) | 描述了一个DBAPI连接在传递给[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")连接池事件时的状态。 |'
- en: '[PRE115]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")的可用事件。'
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的方法定义了一个事件的名称以及传递给监听器函数的成员的名称。
- en: 'e.g.:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE116]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'In addition to accepting the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instances,
    [`PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents") also
    accepts [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects and the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    class as targets, which will be resolved to the `.pool` attribute of the given
    engine or the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 除了接受 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 类和 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 实例外，[`PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    还接受 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象和 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类作为目标，这将解析为给定引擎的 `.pool` 属性或 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    类：
- en: '[PRE117]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '**Members**'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[checkin()](#sqlalchemy.events.PoolEvents.checkin), [checkout()](#sqlalchemy.events.PoolEvents.checkout),
    [close()](#sqlalchemy.events.PoolEvents.close), [close_detached()](#sqlalchemy.events.PoolEvents.close_detached),
    [connect()](#sqlalchemy.events.PoolEvents.connect), [detach()](#sqlalchemy.events.PoolEvents.detach),
    [dispatch](#sqlalchemy.events.PoolEvents.dispatch), [first_connect()](#sqlalchemy.events.PoolEvents.first_connect),
    [invalidate()](#sqlalchemy.events.PoolEvents.invalidate), [reset()](#sqlalchemy.events.PoolEvents.reset),
    [soft_invalidate()](#sqlalchemy.events.PoolEvents.soft_invalidate)'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[checkin()](#sqlalchemy.events.PoolEvents.checkin), [checkout()](#sqlalchemy.events.PoolEvents.checkout),
    [close()](#sqlalchemy.events.PoolEvents.close), [close_detached()](#sqlalchemy.events.PoolEvents.close_detached),
    [connect()](#sqlalchemy.events.PoolEvents.connect), [detach()](#sqlalchemy.events.PoolEvents.detach),
    [dispatch](#sqlalchemy.events.PoolEvents.dispatch), [first_connect()](#sqlalchemy.events.PoolEvents.first_connect),
    [invalidate()](#sqlalchemy.events.PoolEvents.invalidate), [reset()](#sqlalchemy.events.PoolEvents.reset),
    [soft_invalidate()](#sqlalchemy.events.PoolEvents.soft_invalidate)'
- en: '**Class signature**'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.events.PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE118]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Called when a connection returns to the pool.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接返回到池中时调用。
- en: 'Example argument forms:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE119]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Note that the connection may be closed, and may be None if the connection has
    been invalidated. `checkin` will not be called for detached connections. (They
    do not return to the pool.)
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 注意连接可能会关闭，并且如果连接已失效，则可能为 None。对于已分离的连接，不会调用 `checkin`。（它们不会返回到池中。）
- en: 'Parameters:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的 [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE120]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Called when a connection is retrieved from the Pool.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 当从池中检索到连接时调用。
- en: 'Example argument forms:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE121]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Parameters:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的 [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`connection_proxy` – the [`PoolProxiedConnection`](pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") object which will proxy the public interface
    of the DBAPI connection for the lifespan of the checkout.'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_proxy` – [`PoolProxiedConnection`](pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") 对象，它将在检出的生命周期内代理 DBAPI 连接的公共接口。'
- en: If you raise a [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"), the current connection will be disposed
    and a fresh connection retrieved. Processing of all checkout listeners will abort
    and restart using the new connection.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 如果引发[`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")，当前连接将被释放并重新获取新连接。所有检出监听器的处理将中止，并使用新连接重新启动。
- en: See also
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") - a similar event which occurs
    upon creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") - 在创建新的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")时发生的类似事件。'
- en: '[PRE122]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Called when a DBAPI connection is closed.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 当 DBAPI 连接关闭时调用。
- en: 'Example argument forms:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE123]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: The event is emitted before the close occurs.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 事件在关闭发生之前发出。
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 连接关闭可能会失败；通常是因为连接已经关闭。如果关闭操作失败，则连接将被丢弃。
- en: The [`close()`](#sqlalchemy.events.PoolEvents.close "sqlalchemy.events.PoolEvents.close")
    event corresponds to a connection that’s still associated with the pool. To intercept
    close events for detached connections use [`close_detached()`](#sqlalchemy.events.PoolEvents.close_detached
    "sqlalchemy.events.PoolEvents.close_detached").
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '[`close()`](#sqlalchemy.events.PoolEvents.close "sqlalchemy.events.PoolEvents.close")
    事件对应于仍与池相关联的连接。要拦截分离连接的关闭事件，请使用[`close_detached()`](#sqlalchemy.events.PoolEvents.close_detached
    "sqlalchemy.events.PoolEvents.close_detached")。'
- en: 'Parameters:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE124]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Called when a detached DBAPI connection is closed.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 当分离的 DBAPI 连接关闭时调用。
- en: 'Example argument forms:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE125]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The event is emitted before the close occurs.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 事件在关闭发生之前发出。
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 连接关闭可能会失败；通常是因为连接已经关闭。如果关闭操作失败，则连接将被丢弃。
- en: 'Parameters:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '[PRE126]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Called at the moment a particular DBAPI connection is first created for a given
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 在为给定的[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")首次创建特定的
    DBAPI 连接时调用。
- en: 'Example argument forms:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE127]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: This event allows one to capture the point directly after which the DBAPI module-level
    `.connect()` method has been used in order to produce a new DBAPI connection.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件允许捕获直接在使用 DBAPI 模块级别的`.connect()`方法以产生新的 DBAPI 连接之后的点。
- en: 'Parameters:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE128]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Called when a DBAPI connection is “detached” from a pool.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 当 DBAPI 连接与池“分离”时调用。
- en: 'Example argument forms:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE129]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: This event is emitted after the detach occurs. The connection is no longer associated
    with the given connection record.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在分离后发生。连接不再与给定的连接记录关联。
- en: 'Parameters:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE130]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: reference back to the _Dispatch class.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 与 _Dispatch._events 双向对应
- en: '[PRE131]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Called exactly once for the first time a DBAPI connection is checked out from
    a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次从特定[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")检出 DBAPI
    连接时仅调用一次此事件。
- en: 'Example argument forms:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE132]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The rationale for [`PoolEvents.first_connect()`](#sqlalchemy.events.PoolEvents.first_connect
    "sqlalchemy.events.PoolEvents.first_connect") is to determine information about
    a particular series of database connections based on the settings used for all
    connections. Since a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    refers to a single “creator” function (which in terms of a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") refers to the URL and connection options used), it
    is typically valid to make observations about a single connection that can be
    safely assumed to be valid about all subsequent connections, such as the database
    version, the server and client encoding settings, collation settings, and many
    others.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.first_connect()`](#sqlalchemy.events.PoolEvents.first_connect
    "sqlalchemy.events.PoolEvents.first_connect") 的原因是基于所有连接使用的设置来确定关于特定一系列数据库连接的信息。由于特定
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 指的是单个“创建者”函数（在
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    方面指的是使用的 URL 和连接选项），因此通常可以对单个连接进行观察，可以安全地假定关于所有后续连接都有效，例如数据库版本、服务器和客户端编码设置、排序设置等。'
- en: 'Parameters:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '[PRE133]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Called when a DBAPI connection is to be “invalidated”.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 当 DBAPI 连接被“失效”时调用。
- en: 'Example argument forms:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE134]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked, either from
    API usage or via “auto-invalidation”, without the `soft` flag.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用 [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") 方法时都会触发此事件，无论是通过 API 使用还是通过“自动失效”触发，不带
    `soft` 标志。
- en: The event occurs before a final attempt to call `.close()` on the connection
    occurs.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终尝试调用连接的`.close()`之前发生此事件。
- en: 'Parameters:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个 DBAPI 连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") 属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理 DBAPI 连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exception` – 这次失效的原因对应的异常对象，如果有的话。可能为 `None`。'
- en: See also
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](pooling.html#pool-connection-invalidation)'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效的信息](pooling.html#pool-connection-invalidation)'
- en: '[PRE135]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Called before the “reset” action occurs for a pooled connection.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 在池化连接发生“重置”操作之前调用。
- en: 'Example argument forms:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE136]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Changed in version 2.0: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event now accepts the arguments [`PoolEvents.reset.dbapi_connection`](#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.connection_record`](#sqlalchemy.events.PoolEvents.reset.params.connection_record
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.reset_state`](#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset"). Support for listener functions which accept
    the previous argument signature(s) listed above as “deprecated” will be removed
    in a future release.'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始更改：[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    事件现在接受参数 [`PoolEvents.reset.dbapi_connection`](#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset")、[`PoolEvents.reset.connection_record`](#sqlalchemy.events.PoolEvents.reset.params.connection_record
    "sqlalchemy.events.PoolEvents.reset")、[`PoolEvents.reset.reset_state`](#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset")。将在将来的版本中删除接受上述“已弃用”先前参数签名的侦听器函数的支持。
- en: This event represents when the `rollback()` method is called on the DBAPI connection
    before it is returned to the pool or discarded. A custom “reset” strategy may
    be implemented using this event hook, which may also be combined with disabling
    the default “reset” behavior using the [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件表示在 DBAPI 连接上调用 `rollback()` 方法之前返回到池中或丢弃时发生。可以使用此事件钩子实现自定义“重置”策略，也可以通过使用
    [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") 参数禁用默认的“重置”行为。
- en: The primary difference between the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") and [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") events are that [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") is called not just for pooled connections
    that are being returned to the pool, but also for connections that were detached
    using the [`Connection.detach()`](connections.html#sqlalchemy.engine.Connection.detach
    "sqlalchemy.engine.Connection.detach") method as well as asyncio connections that
    are being discarded due to garbage collection taking place on connections before
    the connection was checked in.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    和 [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin "sqlalchemy.events.PoolEvents.checkin")
    事件的主要区别在于 [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    不仅适用于被返回到池中的池化连接，还适用于使用 [`Connection.detach()`](connections.html#sqlalchemy.engine.Connection.detach
    "sqlalchemy.engine.Connection.detach") 方法分离的连接以及由于在连接被检入之前进行垃圾回收而被丢弃的 asyncio
    连接。'
- en: Note that the event **is not** invoked for connections that were invalidated
    using [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate"). These events may be intercepted using
    the [`PoolEvents.soft_invalidate()`](#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") and [`PoolEvents.invalidate()`](#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event hooks, and all “connection close”
    events may be intercepted using [`PoolEvents.close()`](#sqlalchemy.events.PoolEvents.close
    "sqlalchemy.events.PoolEvents.close").
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，并非所有使用 [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 使连接无效的事件都会被触发。这些事件可以通过 [`PoolEvents.soft_invalidate()`](#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") 和 [`PoolEvents.invalidate()`](#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") 事件钩子拦截，所有的“连接关闭”事件都可以通过 [`PoolEvents.close()`](#sqlalchemy.events.PoolEvents.close
    "sqlalchemy.events.PoolEvents.close") 拦截。
- en: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    event is usually followed by the [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event, except in those cases where the
    connection is discarded immediately after reset.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    事件通常在 [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin "sqlalchemy.events.PoolEvents.checkin")
    事件之后发生，除了那些在重置后立即丢弃连接的情况。'
- en: 'Parameters:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`reset_state` –'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset_state` –'
- en: '[`PoolResetState`](#sqlalchemy.events.PoolResetState "sqlalchemy.events.PoolResetState")
    instance which provides information about the circumstances under which the connection
    is being reset.'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolResetState`](#sqlalchemy.events.PoolResetState "sqlalchemy.events.PoolResetState")实例，提供关于正在重置连接的情况的信息。'
- en: New in version 2.0.
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本为2.0。
- en: See also
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](pooling.html#pool-reset-on-return)'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回时重置](pooling.html#pool-reset-on-return)'
- en: '[`ConnectionEvents.rollback()`](#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.rollback()`](#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")'
- en: '[`ConnectionEvents.commit()`](#sqlalchemy.events.ConnectionEvents.commit "sqlalchemy.events.ConnectionEvents.commit")'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.commit()`](#sqlalchemy.events.ConnectionEvents.commit "sqlalchemy.events.ConnectionEvents.commit")'
- en: '[PRE137]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Called when a DBAPI connection is to be “soft invalidated”.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 当DBAPI连接要“软无效化”时调用。
- en: 'Example argument forms:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE138]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked with the `soft`
    flag.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用[`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate")方法时，都会发生此事件，带有`soft`标志。
- en: Soft invalidation refers to when the connection record that tracks this connection
    will force a reconnect after the current connection is checked in. It does not
    actively close the dbapi_connection at the point at which it is called.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 软无效化指的是在当前连接被检入后，跟踪此连接的连接记录将强制重新连接。在调用时，它不会主动关闭dbapi_connection。
- en: 'Parameters:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbapi_connection` – 一个DBAPI连接。[`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection")属性。'
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection_record` – 管理DBAPI连接的[`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。'
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exception` – 如果有原因导致无效化，则对应此无效化的异常对象。可能为`None`。'
- en: '[PRE139]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: describes the state of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了DBAPI连接在传递给[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")连接池事件时的状态。
- en: '**Members**'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[asyncio_safe](#sqlalchemy.events.PoolResetState.asyncio_safe), [terminate_only](#sqlalchemy.events.PoolResetState.terminate_only),
    [transaction_was_reset](#sqlalchemy.events.PoolResetState.transaction_was_reset)'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '[asyncio_safe](#sqlalchemy.events.PoolResetState.asyncio_safe)，[terminate_only](#sqlalchemy.events.PoolResetState.terminate_only)，[transaction_was_reset](#sqlalchemy.events.PoolResetState.transaction_was_reset)'
- en: New in version 2.0.0b3.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为2.0.0b3。
- en: '[PRE140]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Indicates if the reset operation is occurring within a scope where an enclosing
    event loop is expected to be present for asyncio applications.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 指示重置操作是否发生在期望存在封闭事件循环的范围内的情况下，用于asyncio应用程序。
- en: Will be False in the case that the connection is being garbage collected.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接被垃圾收集时，将为False。
- en: '[PRE141]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: indicates if the connection is to be immediately terminated and not checked
    in to the pool.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 指示连接是否立即终止并且不被检入到池中。
- en: This occurs for connections that were invalidated, as well as asyncio connections
    that were not cleanly handled by the calling code that are instead being garbage
    collected. In the latter case, operations can’t be safely run on asyncio connections
    within garbage collection as there is not necessarily an event loop present.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 这发生在无效的连接上，以及未被调用代码清理处理而被垃圾收集的asyncio连接上。在后一种情况下，在垃圾收集中无法安全地运行asyncio连接操作，因为不一定存在事件循环。
- en: '[PRE142]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Indicates if the transaction on the DBAPI connection was already essentially
    “reset” back by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 表示如果DBAPI连接上的事务已经被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象“重置”。
- en: This boolean is True if the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had transactional state present upon it, which
    was then not closed using the [`Connection.rollback()`](connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") or [`Connection.commit()`](connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") method; instead, the transaction was closed
    inline within the [`Connection.close()`](connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method so is guaranteed to remain non-present
    when this event is reached.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")具有事务状态，并且该状态未使用[`Connection.rollback()`](connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")或[`Connection.commit()`](connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")方法关闭；相反，事务在[`Connection.close()`](connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close")方法中内联关闭，因此在达到此事件时保证不会存在。
- en: '## SQL Execution and Connection Events'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: '## SQL执行和连接事件'
- en: '| Object Name | Description |'
  id: totrans-719
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-720
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ConnectionEvents](#sqlalchemy.events.ConnectionEvents) | Available events
    for [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  id: totrans-721
  prefs: []
  type: TYPE_TB
  zh: '| [ConnectionEvents](#sqlalchemy.events.ConnectionEvents) | 对于[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")可用的事件。 |'
- en: '| [DialectEvents](#sqlalchemy.events.DialectEvents) | event interface for execution-replacement
    functions. |'
  id: totrans-722
  prefs: []
  type: TYPE_TB
  zh: '| [DialectEvents](#sqlalchemy.events.DialectEvents) | 用于执行替换函数的事件接口。 |'
- en: '[PRE143]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Available events for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")可用的事件。
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的方法定义了事件的名称以及传递给监听器函数的成员的名称。
- en: 'An event listener can be associated with any [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance, such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), e.g.:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 事件监听器可以与任何[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类或实例相关联，例如一个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")，例如：
- en: '[PRE144]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'or with a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用特定的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")：
- en: '[PRE145]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: When the methods are called with a statement parameter, such as in [`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") or [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"), the statement is
    the exact SQL string that was prepared for transmission to the DBAPI `cursor`
    in the connection’s [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect").
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法被带有语句参数调用时，例如在[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")或[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")中，语句是传输到连接的DBAPI`cursor`中准备的确切SQL字符串，该连接的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")。
- en: 'The [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events can also be
    established with the `retval=True` flag, which allows modification of the statement
    and parameters to be sent to the database. The [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event is particularly
    useful here to add ad-hoc string transformations, such as comments, to all executions:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")和[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件也可以使用`retval=True`标志来建立，这允许修改要发送到数据库的语句和参数。
    [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件在此处特别有用，以添加特定的字符串转换，如注释，到所有执行中：'
- en: '[PRE146]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Note
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    can be established on any combination of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), as well as instances of each of those classes.
    Events across all four scopes will fire off for a given instance of [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). However, for performance reasons, the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object determines at instantiation time whether
    or not its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    has event listeners established. Event listeners added to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or to an instance of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") *after* the instantiation of a dependent [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instance will usually *not* be available on that
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    instance. The newly added listeners will instead take effect for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created subsequent to those event listeners
    being established on the parent [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance.'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")可以建立在任何组合的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")、[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，以及这些类的实例上。 对于给定的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例，所有四个作用域的事件都将触发。 但是，出于性能原因，[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象在实例化时确定其父[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")是否已建立事件侦听器。 在依赖的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例实例化之后，添加到[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")实例的事件侦听器通常不会在该[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例上可用。 新添加的侦听器将取代对父[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类或实例建立事件侦听器后创建的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例。'
- en: 'Parameters:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**retval=False** – Applies to the [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events only. When
    True, the user-defined event function must have a return value, which is a tuple
    of parameters that replace the given statement and parameters. See those methods
    for a description of specific return arguments.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '**retval=False** – 仅适用于[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")和[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")事件。 当值为True时，用户定义的事件函数必须有一个返回值，即替换给定语句和参数的参数元组。
    查看这些方法以获取特定返回参数的描述。'
- en: '**Members**'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_cursor_execute()](#sqlalchemy.events.ConnectionEvents.after_cursor_execute),
    [after_execute()](#sqlalchemy.events.ConnectionEvents.after_execute), [before_cursor_execute()](#sqlalchemy.events.ConnectionEvents.before_cursor_execute),
    [before_execute()](#sqlalchemy.events.ConnectionEvents.before_execute), [begin()](#sqlalchemy.events.ConnectionEvents.begin),
    [begin_twophase()](#sqlalchemy.events.ConnectionEvents.begin_twophase), [commit()](#sqlalchemy.events.ConnectionEvents.commit),
    [commit_twophase()](#sqlalchemy.events.ConnectionEvents.commit_twophase), [dispatch](#sqlalchemy.events.ConnectionEvents.dispatch),
    [engine_connect()](#sqlalchemy.events.ConnectionEvents.engine_connect), [engine_disposed()](#sqlalchemy.events.ConnectionEvents.engine_disposed),
    [prepare_twophase()](#sqlalchemy.events.ConnectionEvents.prepare_twophase), [release_savepoint()](#sqlalchemy.events.ConnectionEvents.release_savepoint),
    [rollback()](#sqlalchemy.events.ConnectionEvents.rollback), [rollback_savepoint()](#sqlalchemy.events.ConnectionEvents.rollback_savepoint),
    [rollback_twophase()](#sqlalchemy.events.ConnectionEvents.rollback_twophase),
    [savepoint()](#sqlalchemy.events.ConnectionEvents.savepoint), [set_connection_execution_options()](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options)'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_cursor_execute()](#sqlalchemy.events.ConnectionEvents.after_cursor_execute),
    [after_execute()](#sqlalchemy.events.ConnectionEvents.after_execute), [before_cursor_execute()](#sqlalchemy.events.ConnectionEvents.before_cursor_execute),
    [before_execute()](#sqlalchemy.events.ConnectionEvents.before_execute), [begin()](#sqlalchemy.events.ConnectionEvents.begin),
    [begin_twophase()](#sqlalchemy.events.ConnectionEvents.begin_twophase), [commit()](#sqlalchemy.events.ConnectionEvents.commit),
    [commit_twophase()](#sqlalchemy.events.ConnectionEvents.commit_twophase), [dispatch](#sqlalchemy.events.ConnectionEvents.dispatch),
    [engine_connect()](#sqlalchemy.events.ConnectionEvents.engine_connect), [engine_disposed()](#sqlalchemy.events.ConnectionEvents.engine_disposed),
    [prepare_twophase()](#sqlalchemy.events.ConnectionEvents.prepare_twophase), [release_savepoint()](#sqlalchemy.events.ConnectionEvents.release_savepoint),
    [rollback()](#sqlalchemy.events.ConnectionEvents.rollback), [rollback_savepoint()](#sqlalchemy.events.ConnectionEvents.rollback_savepoint),
    [rollback_twophase()](#sqlalchemy.events.ConnectionEvents.rollback_twophase),
    [savepoint()](#sqlalchemy.events.ConnectionEvents.savepoint), [set_connection_execution_options()](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options)'
- en: '**Class signature**'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") (`sqlalchemy.event.Events`)
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") (`sqlalchemy.event.Events`)
- en: '[PRE147]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Intercept low-level cursor execute() events after execution.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行后拦截低级游标`execute()`事件。
- en: 'Example argument forms:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE148]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Parameters:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象'
- en: '`cursor` – DBAPI cursor object. Will have results pending if the statement
    was a SELECT, but these should not be consumed as they will be needed by the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor` – DBAPI游标对象。如果语句是SELECT，则将有待处理的结果，但不应消耗这些结果，因为它们将被[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")所需。'
- en: '`statement` – string SQL statement, as passed to the DBAPI'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 字符串SQL语句，如传递给DBAPI'
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 字典、元组或传递给DBAPI `cursor`的`execute()`或`executemany()`方法的参数列表。在某些情况下可能为`None`。'
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 正在使用的[`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext")对象。可能为`None`。'
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany` – 布尔值，如果为`True`，则这是一个`executemany()`调用，如果为`False`，则这是一个`execute()`调用。'
- en: '[PRE149]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Intercept high level execute() events after execute.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行后拦截高级`execute()`事件。
- en: 'Example argument forms:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE150]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Changed in version 1.4: The [`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") event now accepts the arguments
    [`ConnectionEvents.after_execute.conn`](#sqlalchemy.events.ConnectionEvents.after_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.after_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.after_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.params`](#sqlalchemy.events.ConnectionEvents.after_execute.params.params
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.after_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.result`](#sqlalchemy.events.ConnectionEvents.after_execute.params.result
    "sqlalchemy.events.ConnectionEvents.after_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本1.4开始更改: [`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") 事件现在接受参数 [`ConnectionEvents.after_execute.conn`](#sqlalchemy.events.ConnectionEvents.after_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.after_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.after_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.params`](#sqlalchemy.events.ConnectionEvents.after_execute.params.params
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.after_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.result`](#sqlalchemy.events.ConnectionEvents.after_execute.params.result
    "sqlalchemy.events.ConnectionEvents.after_execute")。支持接受先前参数签名的监听器函数将在未来的版本中删除。'
- en: 'Parameters:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clauseelement` – SQL表达式构造，[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 实例，或传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的字符串语句。'
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiparams` – 多个参数集，一个字典列表。'
- en: '`params` – Single parameter set, a single dictionary.'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 单个参数集，一个字典。'
- en: '`execution_options` –'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给语句的执行选项字典，如果有的话。这是将要使用的所有选项的合并，包括语句、连接和传递给方法本身的那些选项，用于执行2.0风格。
- en: '`result` – [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") generated by the execution.'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result` – 执行生成的 [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")。'
- en: '[PRE151]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Intercept low-level cursor execute() events before execution, receiving the
    string SQL statement and DBAPI-specific parameter list to be invoked against a
    cursor.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行之前拦截低级别的游标 execute() 事件，接收要针对游标调用的字符串SQL语句和DBAPI特定参数列表。
- en: 'Example argument forms:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '示��参数形式:'
- en: '[PRE152]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: This event is a good choice for logging as well as late modifications to the
    SQL string. It’s less ideal for parameter modifications except for those which
    are specific to a target backend.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件非常适合用于日志记录以及对SQL字符串的后期修改。对于那些特定于目标后端的参数修改来说，它不太理想。
- en: 'This event can be optionally established with the `retval=True` flag. The `statement`
    and `parameters` arguments should be returned as a two-tuple in this case:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '这个事件可以选择使用 `retval=True` 标志来建立。在这种情况下，`statement` 和 `parameters` 参数应该作为一个二元组返回:'
- en: '[PRE153]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: See the example at [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents").
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    中的示例。
- en: 'Parameters:'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`cursor` – DBAPI cursor object'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor` – DBAPI 游标对象'
- en: '`statement` – string SQL statement, as to be passed to the DBAPI'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 要传递给 DBAPI 的字符串 SQL 语句'
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameters` – 正在传递给 DBAPI `cursor` 的 `execute()` 或 `executemany()` 方法的参数的字典、元组或列表。在某些情况下可能为
    `None`。'
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") 对象正在使用。可能为 `None`。'
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executemany` – 布尔值，如果为 `True`，则这是一个 `executemany()` 调用，如果为 `False`，则这是一个 `execute()`
    调用。'
- en: See also
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")'
- en: '[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
- en: '[PRE154]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Intercept high level execute() events, receiving uncompiled SQL constructs and
    other objects prior to rendering into SQL.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截高级 execute() 事件，接收未编译的 SQL 构造和其他对象，在渲染成 SQL 之前。
- en: 'Example argument forms:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE155]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Changed in version 1.4: The [`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") event now accepts the arguments
    [`ConnectionEvents.before_execute.conn`](#sqlalchemy.events.ConnectionEvents.before_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.before_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.before_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.params`](#sqlalchemy.events.ConnectionEvents.before_execute.params.params
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版更改：[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") 事件现在接受参数 [`ConnectionEvents.before_execute.conn`](#sqlalchemy.events.ConnectionEvents.before_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.before_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.before_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.params`](#sqlalchemy.events.ConnectionEvents.before_execute.params.params
    "sqlalchemy.events.ConnectionEvents.before_execute")、[`ConnectionEvents.before_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute")。对于接受上述先前参数签名的监听函数，将在将来的版本中移除。
- en: This event is good for debugging SQL compilation issues as well as early manipulation
    of the parameters being sent to the database, as the parameter lists will be in
    a consistent format here.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件非常适用于调试 SQL 编译问题以及对发送到数据库的参数进行早期处理，因为此处的参数列表将保持一致的格式。
- en: 'This event can be optionally established with the `retval=True` flag. The `clauseelement`,
    `multiparams`, and `params` arguments should be returned as a three-tuple in this
    case:'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件可以选择使用 `retval=True` 标志来建立。在这种情况下，`clauseelement`、`multiparams` 和 `params`
    参数应作为三元组返回：
- en: '[PRE156]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Parameters:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  id: totrans-793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clauseelement` – SQL 表达式构造，[`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") 实例，或传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的字符串语句。'
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiparams` – 多参数集合，一个字典列表。'
- en: '`params` – Single parameter set, a single dictionary.'
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 单参数集合，一个字典。'
- en: '`execution_options` –'
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行选项字典随语句一起传递，如果有的话。这是将被使用的所有选项的合并，包括语句、连接和传递给方法本身的 2.0 执行风格的选项。
- en: See also
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
- en: '[PRE157]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Intercept begin() events.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截`begin()`事件。
- en: 'Example argument forms:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE158]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Parameters:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '[PRE159]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Intercept begin_twophase() events.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截`begin_twophase()`事件。
- en: 'Example argument forms:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE160]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Parameters:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '[PRE161]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Intercept commit() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截由[`Transaction`](connections.html#sqlalchemy.engine.Transaction "sqlalchemy.engine.Transaction")发起的`commit()`事件。
- en: 'Example argument forms:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE162]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    may also “auto-commit” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to the value `'commit'`. To intercept this commit, use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果`reset_on_return`标志设置为值`'commit'`，[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")也可能在检入时“自动提交”DBAPI连接。要拦截此提交，请使用[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")钩子。
- en: 'Parameters:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '[PRE163]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Intercept commit_twophase() events.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截`commit_twophase()`事件。
- en: 'Example argument forms:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE164]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Parameters:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 布尔值，指示是否调用了[`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '[PRE165]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: reference back to the _Dispatch class.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 引用回_Dispatch类。
- en: Bidirectional against _Dispatch._events
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 双向针对_Dispatch._events
- en: '[PRE166]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Intercept the creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截创建新的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: 'Example argument forms:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE167]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Changed in version 2.0: The [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event now accepts the arguments
    [`ConnectionEvents.engine_connect.conn`](#sqlalchemy.events.ConnectionEvents.engine_connect.params.conn
    "sqlalchemy.events.ConnectionEvents.engine_connect"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的变化：[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")事件现在接受参数[`ConnectionEvents.engine_connect.conn`](#sqlalchemy.events.ConnectionEvents.engine_connect.params.conn
    "sqlalchemy.events.ConnectionEvents.engine_connect")。支持接受上面列出的“已弃用”的先前参数签名的监听器函数将在将来的版本中移除。
- en: This event is called typically as the direct result of calling the [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") method.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 该事件通常作为调用[`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect")方法的直接结果。
- en: It differs from the [`PoolEvents.connect()`](#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") method, which refers to the actual connection
    to a database at the DBAPI level; a DBAPI connection may be pooled and reused
    for many operations. In contrast, this event refers only to the production of
    a higher level [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    wrapper around such a DBAPI connection.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 它与[`PoolEvents.connect()`](#sqlalchemy.events.PoolEvents.connect "sqlalchemy.events.PoolEvents.connect")方法不同，后者指的是在DBAPI级别实际连接到数据库；DBAPI连接可能会被池化并重复使用于许多操作。相比之下，此事件仅指生产一个围绕此类DBAPI连接的更高级别[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")包装器。
- en: It also differs from the [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") event in that it is specific to the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, not the DBAPI connection that [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") deals with, although this DBAPI connection
    is available here via the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute. But note there can in fact
    be multiple [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    events within the lifespan of a single [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, if that [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is invalidated and re-established.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 它还与[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")事件不同，后者特定于[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象，而不是[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")处理的DBAPI连接，尽管此DBAPI连接可通过[`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection")属性在此处获取。但请注意，在单个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的生命周期内，实际上可以有多个[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")事件，如果该[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")被使无效并重新建立。
- en: 'Parameters:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象。'
- en: See also
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    the lower-level pool checkout event for an individual DBAPI connection'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    是针对单个DBAPI连接的低级别池检出事件。'
- en: '[PRE168]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Intercept when the [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截[`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")方法调用时。
- en: 'Example argument forms:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE169]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: The [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")
    method instructs the engine to “dispose” of it’s connection pool (e.g. [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")), and replaces it with a new one. Disposing of the old
    pool has the effect that existing checked-in connections are closed. The new pool
    does not establish any new connections until it is first used.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")方法指示引擎“处理”其连接池（例如[`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"))，并用新的替换它。处理旧池的效果是关闭现有的已检入连接。新池在首次使用之前不会建立任何新连接。'
- en: This event can be used to indicate that resources related to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should also be cleaned up, keeping in mind that the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    can still be used for new requests in which case it re-acquires connection resources.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用此事件指示应清理与[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")相关的资源，需要注意的是[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")仍然可以用于新请求，此时会重新获取连接资源。
- en: '[PRE170]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Intercept prepare_twophase() events.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 prepare_twophase() 事件。
- en: 'Example argument forms:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE171]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Parameters:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '[PRE172]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Intercept release_savepoint() events.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 release_savepoint() 事件。
- en: 'Example argument forms:'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE173]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Parameters:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`name` – specified name used for the savepoint.'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于保存点的指定名称。'
- en: '`context` – not used'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 未使用'
- en: '[PRE174]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Intercept rollback() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 rollback() 事件，由 [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") 发起。
- en: 'Example argument forms:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE175]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    also “auto-rolls back” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to its default value of `'rollback'`. To intercept this rollback,
    use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    hook.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果 `reset_on_return` 标志设置为其默认值 `'rollback'`，则 [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 也会在归还时“自动回滚” DBAPI 连接。要拦截此回滚，请使用 [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 钩子。
- en: 'Parameters:'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: See also
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
- en: '[PRE176]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Intercept rollback_savepoint() events.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 rollback_savepoint() 事件。
- en: 'Example argument forms:'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE177]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Parameters:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`name` – specified name used for the savepoint.'
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于保存点的指定名称。'
- en: '`context` – not used'
  id: totrans-880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` – 未使用'
- en: '[PRE178]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Intercept rollback_twophase() events.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 rollback_twophase() 事件。
- en: 'Example argument forms:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE179]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Parameters:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`xid` – two-phase XID identifier'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – 两阶段 XID 标识符'
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 布尔值，指示是否调用了 [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '[PRE180]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Intercept savepoint() events.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 savepoint() 事件。
- en: 'Example argument forms:'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE181]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'Parameters:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象'
- en: '`name` – specified name used for the savepoint.'
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于保存点的指定名称。'
- en: '[PRE182]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Intercept when the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is called.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 方法调用时。
- en: 'Example argument forms:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE183]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: This method is called after the new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has been produced, with the newly updated execution
    options collection, but before the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") has acted upon any of those new options.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在新的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    生成后被调用，带有新更新的执行选项集合，但在 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    对这些新选项采取任何操作之前。
- en: Note that this method is not called when a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is produced which is inheriting execution options
    from its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine");
    to intercept this condition, use the [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当从其父[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")继承执行选项的新[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")生成时，不会调用此方法；要拦截此条件，请使用[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")事件。
- en: 'Parameters:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – The newly copied [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – 新复制的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象'
- en: '`opts` –'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opts` –'
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法的选项字典。此字典可以就地修改以影响最终生效的选项。
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版中的新功能：`opts`字典可以就地修改。
- en: See also
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.set_engine_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") - event which
    is called when [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") is called.'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_engine_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") - 当调用[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")时触发的事件。'
- en: '[PRE184]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Intercept when the [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method is called.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法时拦截。
- en: 'Example argument forms:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE185]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: The [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method produces a shallow copy of
    the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which stores the new options. That new [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is passed here. A particular application of this method
    is to add a [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event handler to the given
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which will perform some per- [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") task specific to these execution options.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法会生成一个存储新选项的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的浅拷贝。这个新的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")会传递到这里。这个方法的一个特定应用是向给定的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")添加一个[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")事件处理程序，该处理程序将执行一些特定于这些执行选项的每个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")任务。'
- en: 'Parameters:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`conn` – The newly copied [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn` – 新复制的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象'
- en: '`opts` –'
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opts` –'
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给[`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")方法的选项字典。此字典可以就地修改以影响最终生效的选项。
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版中的新功能：`opts`字典可以就地修改。
- en: See also
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.set_connection_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") - event
    which is called when [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") is called.'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") - 当调用 [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 时调用的事件。'
- en: '[PRE186]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: event interface for execution-replacement functions.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 执行替换函数的事件接口。
- en: These events allow direct instrumentation and replacement of key dialect functions
    which interact with the DBAPI.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件允许直接对与 DBAPI 交互的关键方言函数进行检测和替换。
- en: Note
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    hooks should be considered **semi-public** and experimental. These hooks are not
    for general use and are only for those situations where intricate re-statement
    of DBAPI mechanics must be injected onto an existing dialect. For general-use
    statement-interception events, please use the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") interface.'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    钩子应被视为**半公开**和实验性质。这些钩子不适用于一般用途，仅适用于需要将复杂的 DBAPI 机制重新注入现有方言的情况。对于一般用途的语句拦截事件，请使用
    [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    接口。'
- en: See also
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionEvents.before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
- en: '[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")'
- en: '[`ConnectionEvents.after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
- en: '[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")'
- en: '**Members**'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispatch](#sqlalchemy.events.DialectEvents.dispatch), [do_connect()](#sqlalchemy.events.DialectEvents.do_connect),
    [do_execute()](#sqlalchemy.events.DialectEvents.do_execute), [do_execute_no_params()](#sqlalchemy.events.DialectEvents.do_execute_no_params),
    [do_executemany()](#sqlalchemy.events.DialectEvents.do_executemany), [do_setinputsizes()](#sqlalchemy.events.DialectEvents.do_setinputsizes),
    [handle_error()](#sqlalchemy.events.DialectEvents.handle_error)'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispatch](#sqlalchemy.events.DialectEvents.dispatch), [do_connect()](#sqlalchemy.events.DialectEvents.do_connect),
    [do_execute()](#sqlalchemy.events.DialectEvents.do_execute), [do_execute_no_params()](#sqlalchemy.events.DialectEvents.do_execute_no_params),
    [do_executemany()](#sqlalchemy.events.DialectEvents.do_executemany), [do_setinputsizes()](#sqlalchemy.events.DialectEvents.do_setinputsizes),
    [handle_error()](#sqlalchemy.events.DialectEvents.handle_error)'
- en: '**Class signature**'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.events.DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    (`sqlalchemy.event.Events`)
- en: '[PRE187]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: reference back to the _Dispatch class.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 参考回到 _Dispatch 类。
- en: Bidirectional against _Dispatch._events
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 双向对抗 _Dispatch._events
- en: '[PRE188]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Receive connection arguments before a connection is made.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立连接之前接收连接参数。
- en: 'Example argument forms:'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE189]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'This event is useful in that it allows the handler to manipulate the cargs
    and/or cparams collections that control how the DBAPI `connect()` function will
    be called. `cargs` will always be a Python list that can be mutated in-place,
    and `cparams` a Python dictionary that may also be mutated:'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件非常有用，因为它允许处理程序操作控制如何调用 DBAPI `connect()` 函数的 `cargs` 和/或 `cparams` 集合。`cargs`
    将始终是一个可以原地变异的 Python 列表，`cparams` 是一个也可以被变异的 Python 字典：
- en: '[PRE190]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'The event hook may also be used to override the call to `connect()` entirely,
    by returning a non-`None` DBAPI connection object:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 事件钩子也可以完全覆盖对 `connect()` 的调用，通过返回一个非 `None` 的 DBAPI 连接对象：
- en: '[PRE191]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: See also
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '[自定义 DBAPI connect() 参数 / on-connect routines](engines.html#custom-dbapi-args)'
- en: '[PRE192]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Receive a cursor to have execute() called.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个游标以调用 `execute()`。
- en: 'Example argument forms:'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE193]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True 以阻止进一步调用事件，并指示光标执行已经在事件处理程序中发生。
- en: '[PRE194]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Receive a cursor to have execute() with no parameters called.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个游标以调用没有参数的 `execute()`。
- en: 'Example argument forms:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE195]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True 以阻止进一步调用事件，并指示光标执行已经在事件处理程序中发生。
- en: '[PRE196]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Receive a cursor to have executemany() called.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个游标以调用 `executemany()`。
- en: 'Example argument forms:'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE197]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True 以阻止进一步调用事件，并指示光标执行已经在事件处理程序中发生。
- en: '[PRE198]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Receive the setinputsizes dictionary for possible modification.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 接收 setinputsizes 字典以进行可能的修改。
- en: 'Example argument forms:'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE199]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: This event is emitted in the case where the dialect makes use of the DBAPI `cursor.setinputsizes()`
    method which passes information about parameter binding for a particular statement.
    The given `inputsizes` dictionary will contain [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects as keys, linked to DBAPI-specific
    type objects as values; for parameters that are not bound, they are added to the
    dictionary with `None` as the value, which means the parameter will not be included
    in the ultimate setinputsizes call. The event may be used to inspect and/or log
    the datatypes that are being bound, as well as to modify the dictionary in place.
    Parameters can be added, modified, or removed from this dictionary. Callers will
    typically want to inspect the `BindParameter.type` attribute of the given bind
    objects in order to make decisions about the DBAPI object.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 在方言使用 DBAPI `cursor.setinputsizes()` 方法传递有关特定语句的参数绑定的情况下，将发出此事件。给定的 `inputsizes`
    字典将包含 [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象作为键，链接到 DBAPI 特定类型对象作为值；对于未绑定的参数，将使用
    `None` 作为值将其添加到字典中，这意味着该参数不会包含在最终的 setinputsizes 调用中。可以使用此事件来检查和/或记录正在绑定的数据类型，以及直接修改字典。可以向此字典添加、修改或删除参数。调用者通常会想要检查给定绑定对象的
    `BindParameter.type` 属性，以便对 DBAPI 对象做出决策。
- en: After the event, the `inputsizes` dictionary is converted into an appropriate
    datastructure to be passed to `cursor.setinputsizes`; either a list for a positional
    bound parameter execution style, or a dictionary of string parameter keys to DBAPI
    type objects for a named bound parameter execution style.
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件之后，`inputsizes` 字典将转换为适当的数据结构，以传递给 `cursor.setinputsizes`；对于位置绑定参数执行样式，将转换为列表，对于命名绑定参数执行样式，将转换为字符串参数键到
    DBAPI 类型对象的字典。
- en: The setinputsizes hook overall is only used for dialects which include the flag
    `use_setinputsizes=True`. Dialects which use this include cx_Oracle, pg8000, asyncpg,
    and pyodbc dialects.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '`setinputsizes` 钩子通常仅在包括标志 `use_setinputsizes=True` 的方言中使用。使用此功能的方言包括 cx_Oracle、pg8000、asyncpg
    和 pyodbc 方言。'
- en: Note
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For use with pyodbc, the `use_setinputsizes` flag must be passed to the dialect,
    e.g.:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 pyodbc，必须将 `use_setinputsizes` 标志传递给方言，例如：
- en: '[PRE200]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: See also
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setinputsizes Support](../dialects/mssql.html#mssql-pyodbc-setinputsizes)'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '[setinputsizes 支持](../dialects/mssql.html#mssql-pyodbc-setinputsizes)'
- en: New in version 1.2.9.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2.9 中的新功能。
- en: See also
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '[通过 setinputsizes 对 cx_Oracle 数据绑定性能进行细粒度控制](../dialects/oracle.html#cx-oracle-setinputsizes)'
- en: '[PRE201]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Intercept all exceptions processed by the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), typically but not limited to those emitted within
    the scope of a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截由 [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    处理的所有异常，通常但不限于在 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    范围内发出的异常。
- en: 'Example argument forms:'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE202]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Changed in version 2.0: the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is moved to the [`DialectEvents`](#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") class, moved from the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") class, so that it may also participate in
    the “pre ping” operation configured with the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter. The event remains registered by using the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    as the event target, however note that using the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as an event target for [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") is no longer supported.'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 起更改：[`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件已移至 [`DialectEvents`](#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") 类，从 [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") 类移动，以便它还可以参与由 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数配置的“pre ping”操作。该事件仍通过使用 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 作为事件目标进行注册，但请注意，不再支持将 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 用作 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 的事件目标。
- en: This includes all exceptions emitted by the DBAPI as well as within SQLAlchemy’s
    statement invocation process, including encoding errors and other statement validation
    errors. Other areas in which the event is invoked include transaction begin and
    end, result row fetching, cursor creation.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括由 DBAPI 发出的所有异常以及 SQLAlchemy 的语句调用过程中，包括编码错误和其他语句验证错误。调用事件的其他区域包括事务开始和结束，结果行获取，游标创建。
- en: Note that [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error "sqlalchemy.events.DialectEvents.handle_error")
    may support new kinds of exceptions and new calling scenarios at *any time*. Code
    which uses this event must expect new calling patterns to be present in minor
    releases.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error "sqlalchemy.events.DialectEvents.handle_error")
    可能在 *任何时候* 支持新类型的异常和新的调用场景。使用此事件的代码必须预期在次要版本中存在新的调用模式。
- en: To support the wide variety of members that correspond to an exception, as well
    as to allow extensibility of the event without backwards incompatibility, the
    sole argument received is an instance of [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). This object contains data members representing
    detail about the exception.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持对应于异常的各种成员，并且允许事件的可扩展性而不会导致向后不兼容，唯一接收的参数是[`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext")的实例。此对象包含表示异常详细信息的数据成员。
- en: 'Use cases supported by this hook include:'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 此钩子支持的用例包括：
- en: read-only, low-level exception handling for logging and debugging purposes
  id: totrans-987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于记录和调试目的的只读低级异常处理
- en: Establishing whether a DBAPI connection error message indicates that the database
    connection needs to be reconnected, including for the “pre_ping” handler used
    by `some` dialects
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定 DBAPI 连接错误消息是否表明需要重新连接数据库，包括一些方言中使用的“pre_ping”处理程序
- en: Establishing or disabling whether a connection or the owning connection pool
    is invalidated or expired in response to a specific exception
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定或禁用特定异常响应中连接或拥有的连接池是否无效或过期
- en: exception re-writing
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常重写
- en: The hook is called while the cursor from the failed operation (if any) is still
    open and accessible. Special cleanup operations can be called on this cursor;
    SQLAlchemy will attempt to close this cursor subsequent to this hook being invoked.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 在失败操作的游标（如果有）仍然打开且可访问时调用该钩子。可以在此游标上调用特殊的清理操作；SQLAlchemy 将在调用此钩子后尝试关闭此游标。
- en: As of SQLAlchemy 2.0, the “pre_ping” handler enabled using the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter will also participate in the [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") process, **for those dialects
    that rely upon disconnect codes to detect database liveness**. Note that some
    dialects such as psycopg, psycopg2, and most MySQL dialects make use of a native
    `ping()` method supplied by the DBAPI which does not make use of disconnect codes.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 自 SQLAlchemy 2.0 起，使用 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数启用的“pre_ping”处理程序也将参与 [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 过程，**对于依赖于断开连接代码来检测数据库存活性的那些方言**。请注意，某些方言，如
    psycopg、psycopg2 和大多数 MySQL 方言，使用由 DBAPI 提供的本机 `ping()` 方法，该方法不使用断开连接代码。
- en: 'Changed in version 2.0.0: The [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook participates in connection
    pool “pre-ping” operations. Within this usage, the [`ExceptionContext.engine`](connections.html#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") attribute will be `None`, however
    the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in use is always available via the [`ExceptionContext.dialect`](connections.html#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") attribute.'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.0 版本中进行了更改：[`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子参与连接池“预检”操作。在此用法中，[`ExceptionContext.engine`](connections.html#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") 属性将为 `None`，但是正在使用的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") 始终可通过 [`ExceptionContext.dialect`](connections.html#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") 属性获得。
- en: 'Changed in version 2.0.5: Added [`ExceptionContext.is_pre_ping`](connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") attribute which will be set
    to `True` when the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook is triggered within
    a connection pool pre-ping operation.'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.5 版本中进行了更改：添加了 [`ExceptionContext.is_pre_ping`](connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") 属性，当在连接池预检操作中触发 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子时，该属性将设置为 `True`。
- en: 'Changed in version 2.0.5: An issue was repaired that allows for the PostgreSQL
    `psycopg` and `psycopg2` drivers, as well as all MySQL drivers, to properly participate
    in the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook during connection pool
    “pre-ping” operations; previously, the implementation was non-working for these
    drivers.'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.5 版本中进行了更改：修复了一个问题，允许 PostgreSQL `psycopg` 和 `psycopg2` 驱动程序，以及所有 MySQL
    驱动程序，在连接池“预检”操作期间正确参与 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子；先前，这些驱动程序的实现是不工作的。
- en: 'A handler function has two options for replacing the SQLAlchemy-constructed
    exception into one that is user defined. It can either raise this new exception
    directly, in which case all further event listeners are bypassed and the exception
    will be raised, after appropriate cleanup as taken place:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序函数有两个选项，可以将 SQLAlchemy 构造的异常替换为用户定义的异常。它可以直接引发这个新异常，这样所有后续的事件监听器都会被绕过，并且在适当的清理后引发异常：
- en: '[PRE203]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Warning
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Because the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event specifically provides for
    exceptions to be re-thrown as the ultimate exception raised by the failed statement,
    **stack traces will be misleading** if the user-defined event handler itself fails
    and throws an unexpected exception; the stack trace may not illustrate the actual
    code line that failed! It is advised to code carefully here and use logging and/or
    inline debugging if unexpected exceptions are occurring.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件特别提供了将异常重新抛出为失败语句引发的最终异常，如果用户定义的事件处理程序本身失败并抛出意外异常，则**堆栈跟踪将是误导性的**；堆栈跟踪可能不会显示实际失败的代码行！建议在此处小心编码，并在发生意外异常时使用日志记录和/或内联调试。
- en: 'Alternatively, a “chained” style of event handling can be used, by configuring
    the handler with the `retval=True` modifier and returning the new exception instance
    from the function. In this case, event handling will continue onto the next handler.
    The “chained” exception is available using [`ExceptionContext.chained_exception`](connections.html#sqlalchemy.engine.ExceptionContext.chained_exception
    "sqlalchemy.engine.ExceptionContext.chained_exception"):'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用“链接”风格的事件处理，通过使用`retval=True`修饰符配置处理程序，并从函数返回新的异常实例。在这种情况下，事件处理将继续到下一个处理程序。可使用[`ExceptionContext.chained_exception`](connections.html#sqlalchemy.engine.ExceptionContext.chained_exception
    "sqlalchemy.engine.ExceptionContext.chained_exception")获取“链接”异常：
- en: '[PRE204]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Handlers that return `None` may be used within the chain; when a handler returns
    `None`, the previous exception instance, if any, is maintained as the current
    exception that is passed onto the next handler.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`None`的处理程序可以在链中使用；当处理程序返回`None`时，如果有的话，前一个异常实例将保持为传递给下一个处理程序的当前异常。
- en: When a custom exception is raised or returned, SQLAlchemy raises this new exception
    as-is, it is not wrapped by any SQLAlchemy object. If the exception is not a subclass
    of [`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError"), certain features may not be available; currently
    this includes the ORM’s feature of adding a detail hint about “autoflush” to exceptions
    raised within the autoflush process.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 当引发或返回自定义异常时，SQLAlchemy将原样引发此新异常，不会被任何SQLAlchemy对象包装。如果异常不是[`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")的子类，则某些功能可能不可用；目前包括ORM在自动刷新过程中引发异常时添加有关“自动刷新”的详细提示的功能。
- en: 'Parameters:'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**context** – an [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") object. See this class for details on all
    available members.'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: '**context** – 一个[`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext")对象。有关所有可用成员的详细信息，请参阅此类。'
- en: See also
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Supporting new database error codes for disconnect scenarios](pooling.html#pool-new-disconnect-codes)'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '[支持断开连接场景的新数据库错误代码](pooling.html#pool-new-disconnect-codes)'
- en: Schema Events
  id: totrans-1008
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式事件
- en: '| Object Name | Description |'
  id: totrans-1009
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1010
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [DDLEvents](#sqlalchemy.events.DDLEvents) | Define event listeners for schema
    objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget "sqlalchemy.events.SchemaEventTarget")
    subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. |'
  id: totrans-1011
  prefs: []
  type: TYPE_TB
  zh: '| [DDL事件](https://wiki.example.org/sqlalchemy.events.DDLEvents) | 为模式对象定义事件监听器，即[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")和其他[`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")子类，包括[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")等。
    |'
- en: '| [SchemaEventTarget](#sqlalchemy.events.SchemaEventTarget) | Base class for
    elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    events. |'
  id: totrans-1012
  prefs: []
  type: TYPE_TB
  zh: '| [SchemaEventTarget](#sqlalchemy.events.SchemaEventTarget) | 用于[`DDL事件`](#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents")事件目标的元素的基类。 |'
- en: '[PRE205]'
  id: totrans-1013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Define event listeners for schema objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 为模式对象定义事件监听器，即[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")和其他[`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget")子类，包括[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")、[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")等。
- en: '**Create / Drop Events**'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建/删除事件**'
- en: Events emitted when CREATE and DROP commands are emitted to the database. The
    event hooks in this category include [`DDLEvents.before_create()`](#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop").
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 在将CREATE和DROP命令发送到数据库时发出的事件。此类别中的事件钩子包括[`DDLEvents.before_create()`](#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")、[`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")、[`DDLEvents.before_drop()`](#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop")和[`DDLEvents.after_drop()`](#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop")。
- en: These events are emitted when using schema-level methods such as [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). Per-object create/drop methods such as
    [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create"),
    [`Table.drop()`](metadata.html#sqlalchemy.schema.Table.drop "sqlalchemy.schema.Table.drop"),
    [`Index.create()`](constraints.html#sqlalchemy.schema.Index.create "sqlalchemy.schema.Index.create")
    are also included, as well as dialect-specific methods such as [`ENUM.create()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create").
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用架构级别方法时，例如[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")和[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all")时会发出这些事件。还包括每个对象的创建/删除方法，例如[`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")、[`Table.drop()`](metadata.html#sqlalchemy.schema.Table.drop
    "sqlalchemy.schema.Table.drop")、[`Index.create()`](constraints.html#sqlalchemy.schema.Index.create
    "sqlalchemy.schema.Index.create")，以及方言特定的方法，例如[`ENUM.create()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create")。
- en: 'New in version 2.0: [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    event hooks now take place for non-table objects including constraints, indexes,
    and dialect-specific schema types.'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能：[`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")事件钩子现在适用于非表对象，包括约束、索引和方言特定的架构类型。
- en: Event hooks may be attached directly to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object or to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, as well as to any [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") class or object that can be individually created
    and dropped using a distinct SQL command. Such classes include [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and dialect-specific classes such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 事件钩子可以直接附加到[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象或[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")集合，以及任何可以使用独立的SQL命令单独创建和删除的[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")类或对象。这样的类包括[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")以及方言特定的类，例如[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: 'Example using the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event, where a custom event hook will
    emit an `ALTER TABLE` command on the current connection, after `CREATE TABLE`
    is emitted:'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create "sqlalchemy.events.DDLEvents.after_create")事件的示例，在当前连接上自定义事件钩子将在发出`CREATE
    TABLE`后发出`ALTER TABLE`命令：
- en: '[PRE206]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Constraint objects such as [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") may also be subscribed to these events, however
    they will **not** normally produce events as these objects are usually rendered
    inline within an enclosing `CREATE TABLE` statement and implicitly dropped from
    a `DROP TABLE` statement.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")等约束对象也可以订阅这些事件，但是它们通常不会产生事件，因为这些对象通常被嵌入在包含的`CREATE
    TABLE`语句中，并且隐含地从`DROP TABLE`语句中删除。
- en: For the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct, the event hook will be emitted for `CREATE INDEX`, however SQLAlchemy
    does not normally emit `DROP INDEX` when dropping tables as this is again implicit
    within the `DROP TABLE` statement.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")构造，当执行`CREATE
    INDEX`时会触发事件钩子，但是当删除表时SQLAlchemy通常不会触发`DROP INDEX`，因为这在`DROP TABLE`语句中是隐含的。
- en: 'New in version 2.0: Support for [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects for create/drop events was expanded from
    its previous support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") and [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to also include [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") and all subclasses, [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and some type-related constructs such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始：对于[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的支持已经从其之前对[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")和[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的支持扩展到还包括[`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")及其所有子类、[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")以及一些与类型相关的构造，例如[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: Note
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These event hooks are only emitted within the scope of SQLAlchemy’s create/drop
    methods; they are not necessarily supported by tools such as [alembic](https://alembic.sqlalchemy.org).
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件钩子只在SQLAlchemy的create/drop方法范围内触发；并不一定被诸如[alembic](https://alembic.sqlalchemy.org)等工具支持。
- en: '**Attachment Events**'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加事件**'
- en: Attachment events are provided to customize behavior whenever a child schema
    element is associated with a parent, such as when a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with its [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), when a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is associated with a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), etc. These events include [`DDLEvents.before_parent_attach()`](#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") and [`DDLEvents.after_parent_attach()`](#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach").
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 附加事件用于在子模式元素与父元素关联时自定义行为，例如当[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")与其[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联，当[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")与[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联等。这些事件包括[`DDLEvents.before_parent_attach()`](#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach")和[`DDLEvents.after_parent_attach()`](#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach")。
- en: '**Reflection Events**'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: '**反射事件**'
- en: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event is used to intercept and modify
    the in-Python definition of database columns when [reflection](../glossary.html#term-reflection)
    of database tables proceeds.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") 事件用于拦截和修改数据库表反射进行时的数据库列的 Python
    定义。'
- en: '**Use with Generic DDL**'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '**与通用 DDL 一起使用**'
- en: 'DDL events integrate closely with the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") class and the [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") hierarchy of DDL clause constructs,
    which are themselves appropriate as listener callables:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 事件与[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")类和DDL
    子句构造的[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")层次结构密切集成，它们本身适用于监听器可调用：
- en: '[PRE207]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '**Event Propagation to MetaData Copies**'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件传播到 MetaData 副本**'
- en: 'For all `DDLEvent` events, the `propagate=True` keyword argument will ensure
    that a given event handler is propagated to copies of the object, which are made
    when using the [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") method:'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有`DDLEvent`事件，`propagate=True`关键字参数将确保给定事件处理程序传播到对象的副本，当使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")方法时会创建这些副本：
- en: '[PRE208]'
  id: totrans-1036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The above [`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") object
    will be associated with the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event for both the `some_table` and
    the `new_table` [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")对象将与`some_table`和`new_table`[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的[`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")事件相关联。
- en: See also
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Events](event.html)'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '[事件](event.html)'
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")'
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
- en: '[Controlling DDL Sequences](ddl.html#schema-ddl-sequences)'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制 DDL 序列](ddl.html#schema-ddl-sequences)'
- en: '**Members**'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[after_create()](#sqlalchemy.events.DDLEvents.after_create), [after_drop()](#sqlalchemy.events.DDLEvents.after_drop),
    [after_parent_attach()](#sqlalchemy.events.DDLEvents.after_parent_attach), [before_create()](#sqlalchemy.events.DDLEvents.before_create),
    [before_drop()](#sqlalchemy.events.DDLEvents.before_drop), [before_parent_attach()](#sqlalchemy.events.DDLEvents.before_parent_attach),
    [column_reflect()](#sqlalchemy.events.DDLEvents.column_reflect), [dispatch](#sqlalchemy.events.DDLEvents.dispatch)'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '[after_create()](#sqlalchemy.events.DDLEvents.after_create), [after_drop()](#sqlalchemy.events.DDLEvents.after_drop),
    [after_parent_attach()](#sqlalchemy.events.DDLEvents.after_parent_attach), [before_create()](#sqlalchemy.events.DDLEvents.before_create),
    [before_drop()](#sqlalchemy.events.DDLEvents.before_drop), [before_parent_attach()](#sqlalchemy.events.DDLEvents.before_parent_attach),
    [column_reflect()](#sqlalchemy.events.DDLEvents.column_reflect), [dispatch](#sqlalchemy.events.DDLEvents.dispatch)'
- en: '**Class signature**'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    (`sqlalchemy.event.Events`)
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")（`sqlalchemy.event.Events`）
- en: '[PRE209]'
  id: totrans-1047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Called after CREATE statements are emitted.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出 CREATE 语句后调用。
- en: 'Example argument forms:'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE210]'
  id: totrans-1050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Parameters:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-1052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SchemaObject`，比如[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")或[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，但也包括所有创建/删除对象，如[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")等，这些对象是事件的目标。'
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：添加了对所有[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")对象的支持。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements have
    been emitted.'
  id: totrans-1055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，在其中发出了 CREATE 语句或语句。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-1056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的额外关键字参数。此字典的内容可能在不同版本之间变化，并包括在元数据级事件中生成的表列表、checkfirst 标志和其他内部事件使用的元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    也接受 `propagate=True` 修饰符用于此事件；当为 True 时，监听器函数将被建立为目标对象的任何副本，即在使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成的那些副本。'
- en: '[PRE211]'
  id: totrans-1058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Called after DROP statements are emitted.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出 DROP 语句后调用。
- en: 'Example argument forms:'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE212]'
  id: totrans-1061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Parameters:'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SchemaObject`，如 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    或 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，但也包括所有创建/删除对象，如
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 等，是事件的目标对象。'
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：添加了对所有 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    对象的支持。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements have been
    emitted.'
  id: totrans-1066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，在其中发出了 DROP 语句或语句。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的额外关键字参数。此字典的内容可能在不同版本之间变化，并包括在元数据级事件中生成的表列表、checkfirst 标志和其他内部事件使用的元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    也接受 `propagate=True` 修饰符用于此事件；当为 True 时，监听器函数将被建立为目标对象的任何副本，即在使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成的那些副本。'
- en: '[PRE213]'
  id: totrans-1069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Called after a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    与父 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    关联后调用。
- en: 'Example argument forms:'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE214]'
  id: totrans-1072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Parameters:'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the target object'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 目标对象'
- en: '`parent` – the parent to which the target is being attached.'
  id: totrans-1075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent` – 要将目标附加到的父级。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    还接受 `propagate=True` 修改器用于此事件；当为 True 时，监听器函数将为目标对象的任何副本建立，即当使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成这些副本时。'
- en: '[PRE215]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Called before CREATE statements are emitted.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出 CREATE 语句之前调用。
- en: 'Example argument forms:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE216]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Parameters:'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SchemaObject`，如 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    或 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，但也包括所有创建/删除对象，如
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 等，是事件目标的对象。'
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 新增支持所有 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    对象。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements will
    be emitted.'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 将发出 CREATE 语句的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的额外关键字参数。该字典的内容可能因版本而异，包括生成元数据级事件的表列表、checkfirst 标志和其他内部事件使用的元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    接受 `propagate=True` 修改器用于此事件；当为 True 时，监听器函数将为目标对象的任何副本建立，即当使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成这些副本时。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `insert=True` modifier for this event; when True, the listener function
    will be prepended to the internal list of events upon discovery, and execute before
    registered listener functions that do not pass this argument.'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    接受 `insert=True` 修改器用于此事件；当为 True 时，监听器函数将在发现时被添加到内部事件列表之前，并在不传递此参数的已注册监听器函数之前执行。'
- en: '[PRE217]'
  id: totrans-1089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Called before DROP statements are emitted.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出 DROP 语句之前调用。
- en: 'Example argument forms:'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE218]'
  id: totrans-1092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Parameters:'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` –'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` –'
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SchemaObject`，如 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    或 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，但也包括所有创建/删除对象，如
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")、[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 等，是事件目标的对象。'
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0 新增支持所有 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    对象。
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements will be
    emitted.'
  id: totrans-1097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 将发出DROP语句或语句的[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 与事件相关的其他关键字参数。此字典的内容可能在不同版本中有所变化，包括为元数据级事件生成的表列表、checkfirst标志以及内部事件使用的其他元素。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")也接受`propagate=True`修饰符用于此事件；当为True时，监听函数将为目标对象的任何副本建立，即当使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")生成副本时。'
- en: '[PRE219]'
  id: totrans-1100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Called before a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 在将[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")与父[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")关联之前调用。
- en: 'Example argument forms:'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE220]'
  id: totrans-1103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Parameters:'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target` – the target object'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target` – 目标对象'
- en: '`parent` – the parent to which the target is being attached.'
  id: totrans-1106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent` – 要将目标附加到的父级。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")也接受`propagate=True`修饰符用于此事件；当为True时，监听函数将为目标对象的任何副本建立，即当使用[`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")生成副本时。'
- en: '[PRE221]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: Called for each unit of ‘column info’ retrieved when a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is being reflected.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 在反射[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")时检索每个‘column
    info’单元时调用。
- en: 'Example argument forms:'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 示例参数形式：
- en: '[PRE222]'
  id: totrans-1111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'This event is most easily used by applying it to a specific [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance, where it will take effect for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects within that [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") that undergo reflection:'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件最容易通过将其应用于特定的[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")实例来使用，在那里它将对该[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中的所有[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象产生影响：
- en: '[PRE223]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'New in version 1.4.0b2: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") hook may now be applied to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object as well as the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") class itself where it will take place for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects associated with the targeted [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中：[`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect")钩子现在也可以应用于[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象以及[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")类本身，它将对与目标[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的所有[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象进行操作。
- en: 'It may also be applied to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") class across the board:'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以应用于整个[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")类：
- en: '[PRE224]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'It can also be applied to a specific [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at the point that one is being reflected using the
    [`Table.listeners`](metadata.html#sqlalchemy.schema.Table.params.listeners "sqlalchemy.schema.Table")
    parameter:'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以应用到使用[`Table.listeners`](metadata.html#sqlalchemy.schema.Table.params.listeners
    "sqlalchemy.schema.Table")参数反射的特定[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上：
- en: '[PRE225]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'The dictionary of column information as returned by the dialect is passed,
    and can be modified. The dictionary is that returned in each element of the list
    returned by [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"):'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过方言返回的列信息字典被传递，并且可以被修改。字典是由[`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")返回的列表中的每个元素返回的：
- en: '`name` - the column’s name, is applied to the [`Column.name`](metadata.html#sqlalchemy.schema.Column.params.name
    "sqlalchemy.schema.Column") parameter'
  id: totrans-1120
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 列的名称，应用于[`Column.name`](metadata.html#sqlalchemy.schema.Column.params.name
    "sqlalchemy.schema.Column")参数。'
- en: ''
  id: totrans-1121
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1122
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` - the type of this column, which should be an instance of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"), is applied to the [`Column.type`](metadata.html#sqlalchemy.schema.Column.params.type
    "sqlalchemy.schema.Column") parameter'
  id: totrans-1123
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` - 此列的类型，应该是[`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")的实例，应用于[`Column.type`](metadata.html#sqlalchemy.schema.Column.params.type
    "sqlalchemy.schema.Column")参数。'
- en: ''
  id: totrans-1124
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1125
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nullable` - boolean flag if the column is NULL or NOT NULL, is applied to
    the [`Column.nullable`](metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") parameter'
  id: totrans-1126
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nullable` - 如果列为NULL或NOT NULL的布尔标志，应用于[`Column.nullable`](metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")参数。'
- en: ''
  id: totrans-1127
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1128
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default` - the column’s server default value. This is normally specified as
    a plain string SQL expression, however the event can pass a [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") object as well. Is applied to the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter'
  id: totrans-1129
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` - 列的服务器默认值。通常指定为简单的字符串SQL表达式，但事件也可以传递一个[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue")、[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause")或[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")对象。应用于[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")参数。'
- en: 'The event is called before any action is taken against this dictionary, and
    the contents can be modified; the following additional keys may be added to the
    dictionary to further modify how the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is constructed:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 在对此字典执行任何操作之前调用事件，并且内容可以被修改；以下附加键可以添加到字典中以进一步修改如何构造[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")：
- en: '`key` - the string key that will be used to access this [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in the `.c` collection; will be applied to the [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") parameter. Is also used for ORM mapping. See the section
    [Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    for an example.'
  id: totrans-1131
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` - 将用于在`.c`集合中访问此[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的字符串键；将应用于[`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column")参数。也用于ORM映射。请参阅[从反射表自动命名列方案](../orm/declarative_tables.html#mapper-automated-reflection-schemes)章节的示例。'
- en: ''
  id: totrans-1132
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1133
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote` - force or un-force quoting on the column name; is applied to the [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column") parameter.'
  id: totrans-1134
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote` - 强制或取消对列名进行引用；应用于[`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column")参数。'
- en: ''
  id: totrans-1135
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1136
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` - a dictionary of arbitrary data to follow along with the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), is applied to the [`Column.info`](metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter.'
  id: totrans-1137
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` - 一个任意数据的字典，用于跟踪 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")，应用于
    [`Column.info`](metadata.html#sqlalchemy.schema.Column.params.info "sqlalchemy.schema.Column")
    参数。'
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    也接受 `propagate=True` 修改器以用于此事件；当为True时，监听器函数将被建立为目标对象的任何副本，即在使用 [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 生成的副本。'
- en: See also
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    - in the ORM mapping documentation'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '[从反射表自动命名方案](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    - 在ORM映射文档中'
- en: '[Intercepting Column Definitions](../orm/extensions/automap.html#automap-intercepting-columns)
    - in the [Automap](../orm/extensions/automap.html) documentation'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: '[拦截列定义](../orm/extensions/automap.html#automap-intercepting-columns) - 在[Automap](../orm/extensions/automap.html)文档中'
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - in the [Reflecting Database Objects](reflection.html) documentation'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用数据库无关类型反射](reflection.html#metadata-reflection-dbagnostic-types) - 在[反射数据库对象](reflection.html)文档中'
- en: '[PRE226]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: reference back to the _Dispatch class.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 _Dispatch 类的引用。
- en: Bidirectional against _Dispatch._events
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 双向的反对 _Dispatch._events
- en: '[PRE227]'
  id: totrans-1146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Base class for elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") events.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 是[`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")事件目标元素的基类。
- en: This includes [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    as well as [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType").
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    以及 [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")。
- en: '**Class signature**'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.events.SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") (`sqlalchemy.event.registry.EventTarget`)
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.events.SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") (`sqlalchemy.event.registry.EventTarget`)
