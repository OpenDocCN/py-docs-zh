- en: Core Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/events.html](https://docs.sqlalchemy.org/en/20/core/events.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section describes the event interfaces provided in SQLAlchemy Core. For
    an introduction to the event listening API, see [Events](event.html). ORM events
    are described in [ORM Events](../orm/events.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Events](#sqlalchemy.event.base.Events) | Define event listening functions
    for a particular target type. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Define event listening functions for a particular target type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispatch](#sqlalchemy.event.base.Events.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.event.Events` (`sqlalchemy.event._HasEventsDispatch`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: Connection Pool Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [PoolEvents](#sqlalchemy.events.PoolEvents) | Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"). |'
  prefs: []
  type: TYPE_TB
- en: '| [PoolResetState](#sqlalchemy.events.PoolResetState) | describes the state
    of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  prefs: []
  type: TYPE_NORMAL
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to accepting the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instances,
    [`PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents") also
    accepts [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects and the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    class as targets, which will be resolved to the `.pool` attribute of the given
    engine or the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[checkin()](#sqlalchemy.events.PoolEvents.checkin), [checkout()](#sqlalchemy.events.PoolEvents.checkout),
    [close()](#sqlalchemy.events.PoolEvents.close), [close_detached()](#sqlalchemy.events.PoolEvents.close_detached),
    [connect()](#sqlalchemy.events.PoolEvents.connect), [detach()](#sqlalchemy.events.PoolEvents.detach),
    [dispatch](#sqlalchemy.events.PoolEvents.dispatch), [first_connect()](#sqlalchemy.events.PoolEvents.first_connect),
    [invalidate()](#sqlalchemy.events.PoolEvents.invalidate), [reset()](#sqlalchemy.events.PoolEvents.reset),
    [soft_invalidate()](#sqlalchemy.events.PoolEvents.soft_invalidate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Called when a connection returns to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the connection may be closed, and may be None if the connection has
    been invalidated. `checkin` will not be called for detached connections. (They
    do not return to the pool.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Called when a connection is retrieved from the Pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_proxy` – the [`PoolProxiedConnection`](pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") object which will proxy the public interface
    of the DBAPI connection for the lifespan of the checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you raise a [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"), the current connection will be disposed
    and a fresh connection retrieved. Processing of all checkout listeners will abort
    and restart using the new connection.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") - a similar event which occurs
    upon creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The event is emitted before the close occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: The [`close()`](#sqlalchemy.events.PoolEvents.close "sqlalchemy.events.PoolEvents.close")
    event corresponds to a connection that’s still associated with the pool. To intercept
    close events for detached connections use [`close_detached()`](#sqlalchemy.events.PoolEvents.close_detached
    "sqlalchemy.events.PoolEvents.close_detached").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Called when a detached DBAPI connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The event is emitted before the close occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Called at the moment a particular DBAPI connection is first created for a given
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This event allows one to capture the point directly after which the DBAPI module-level
    `.connect()` method has been used in order to produce a new DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is “detached” from a pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This event is emitted after the detach occurs. The connection is no longer associated
    with the given connection record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Called exactly once for the first time a DBAPI connection is checked out from
    a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The rationale for [`PoolEvents.first_connect()`](#sqlalchemy.events.PoolEvents.first_connect
    "sqlalchemy.events.PoolEvents.first_connect") is to determine information about
    a particular series of database connections based on the settings used for all
    connections. Since a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    refers to a single “creator” function (which in terms of a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") refers to the URL and connection options used), it
    is typically valid to make observations about a single connection that can be
    safely assumed to be valid about all subsequent connections, such as the database
    version, the server and client encoding settings, collation settings, and many
    others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is to be “invalidated”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked, either from
    API usage or via “auto-invalidation”, without the `soft` flag.
  prefs: []
  type: TYPE_NORMAL
- en: The event occurs before a final attempt to call `.close()` on the connection
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](pooling.html#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Called before the “reset” action occurs for a pooled connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event now accepts the arguments [`PoolEvents.reset.dbapi_connection`](#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.connection_record`](#sqlalchemy.events.PoolEvents.reset.params.connection_record
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.reset_state`](#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset"). Support for listener functions which accept
    the previous argument signature(s) listed above as “deprecated” will be removed
    in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: This event represents when the `rollback()` method is called on the DBAPI connection
    before it is returned to the pool or discarded. A custom “reset” strategy may
    be implemented using this event hook, which may also be combined with disabling
    the default “reset” behavior using the [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The primary difference between the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") and [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") events are that [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") is called not just for pooled connections
    that are being returned to the pool, but also for connections that were detached
    using the [`Connection.detach()`](connections.html#sqlalchemy.engine.Connection.detach
    "sqlalchemy.engine.Connection.detach") method as well as asyncio connections that
    are being discarded due to garbage collection taking place on connections before
    the connection was checked in.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the event **is not** invoked for connections that were invalidated
    using [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate"). These events may be intercepted using
    the [`PoolEvents.soft_invalidate()`](#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") and [`PoolEvents.invalidate()`](#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event hooks, and all “connection close”
    events may be intercepted using [`PoolEvents.close()`](#sqlalchemy.events.PoolEvents.close
    "sqlalchemy.events.PoolEvents.close").
  prefs: []
  type: TYPE_NORMAL
- en: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    event is usually followed by the [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event, except in those cases where the
    connection is discarded immediately after reset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reset_state` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PoolResetState`](#sqlalchemy.events.PoolResetState "sqlalchemy.events.PoolResetState")
    instance which provides information about the circumstances under which the connection
    is being reset.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reset On Return](pooling.html#pool-reset-on-return)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.rollback()`](#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.commit()`](#sqlalchemy.events.ConnectionEvents.commit "sqlalchemy.events.ConnectionEvents.commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is to be “soft invalidated”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked with the `soft`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: Soft invalidation refers to when the connection record that tracks this connection
    will force a reconnect after the current connection is checked in. It does not
    actively close the dbapi_connection at the point at which it is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: describes the state of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[asyncio_safe](#sqlalchemy.events.PoolResetState.asyncio_safe), [terminate_only](#sqlalchemy.events.PoolResetState.terminate_only),
    [transaction_was_reset](#sqlalchemy.events.PoolResetState.transaction_was_reset)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the reset operation is occurring within a scope where an enclosing
    event loop is expected to be present for asyncio applications.
  prefs: []
  type: TYPE_NORMAL
- en: Will be False in the case that the connection is being garbage collected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: indicates if the connection is to be immediately terminated and not checked
    in to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: This occurs for connections that were invalidated, as well as asyncio connections
    that were not cleanly handled by the calling code that are instead being garbage
    collected. In the latter case, operations can’t be safely run on asyncio connections
    within garbage collection as there is not necessarily an event loop present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the transaction on the DBAPI connection was already essentially
    “reset” back by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object.
  prefs: []
  type: TYPE_NORMAL
- en: This boolean is True if the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had transactional state present upon it, which
    was then not closed using the [`Connection.rollback()`](connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") or [`Connection.commit()`](connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") method; instead, the transaction was closed
    inline within the [`Connection.close()`](connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method so is guaranteed to remain non-present
    when this event is reached.
  prefs: []
  type: TYPE_NORMAL
- en: '## SQL Execution and Connection Events'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ConnectionEvents](#sqlalchemy.events.ConnectionEvents) | Available events
    for [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [DialectEvents](#sqlalchemy.events.DialectEvents) | event interface for execution-replacement
    functions. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Available events for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'An event listener can be associated with any [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance, such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'or with a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When the methods are called with a statement parameter, such as in [`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") or [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"), the statement is
    the exact SQL string that was prepared for transmission to the DBAPI `cursor`
    in the connection’s [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events can also be
    established with the `retval=True` flag, which allows modification of the statement
    and parameters to be sent to the database. The [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event is particularly
    useful here to add ad-hoc string transformations, such as comments, to all executions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    can be established on any combination of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), as well as instances of each of those classes.
    Events across all four scopes will fire off for a given instance of [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). However, for performance reasons, the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object determines at instantiation time whether
    or not its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    has event listeners established. Event listeners added to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or to an instance of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") *after* the instantiation of a dependent [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instance will usually *not* be available on that
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    instance. The newly added listeners will instead take effect for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created subsequent to those event listeners
    being established on the parent [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**retval=False** – Applies to the [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events only. When
    True, the user-defined event function must have a return value, which is a tuple
    of parameters that replace the given statement and parameters. See those methods
    for a description of specific return arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_cursor_execute()](#sqlalchemy.events.ConnectionEvents.after_cursor_execute),
    [after_execute()](#sqlalchemy.events.ConnectionEvents.after_execute), [before_cursor_execute()](#sqlalchemy.events.ConnectionEvents.before_cursor_execute),
    [before_execute()](#sqlalchemy.events.ConnectionEvents.before_execute), [begin()](#sqlalchemy.events.ConnectionEvents.begin),
    [begin_twophase()](#sqlalchemy.events.ConnectionEvents.begin_twophase), [commit()](#sqlalchemy.events.ConnectionEvents.commit),
    [commit_twophase()](#sqlalchemy.events.ConnectionEvents.commit_twophase), [dispatch](#sqlalchemy.events.ConnectionEvents.dispatch),
    [engine_connect()](#sqlalchemy.events.ConnectionEvents.engine_connect), [engine_disposed()](#sqlalchemy.events.ConnectionEvents.engine_disposed),
    [prepare_twophase()](#sqlalchemy.events.ConnectionEvents.prepare_twophase), [release_savepoint()](#sqlalchemy.events.ConnectionEvents.release_savepoint),
    [rollback()](#sqlalchemy.events.ConnectionEvents.rollback), [rollback_savepoint()](#sqlalchemy.events.ConnectionEvents.rollback_savepoint),
    [rollback_twophase()](#sqlalchemy.events.ConnectionEvents.rollback_twophase),
    [savepoint()](#sqlalchemy.events.ConnectionEvents.savepoint), [set_connection_execution_options()](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Intercept low-level cursor execute() events after execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cursor` – DBAPI cursor object. Will have results pending if the statement
    was a SELECT, but these should not be consumed as they will be needed by the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – string SQL statement, as passed to the DBAPI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Intercept high level execute() events after execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: The [`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") event now accepts the arguments
    [`ConnectionEvents.after_execute.conn`](#sqlalchemy.events.ConnectionEvents.after_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.after_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.after_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.params`](#sqlalchemy.events.ConnectionEvents.after_execute.params.params
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.after_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.result`](#sqlalchemy.events.ConnectionEvents.after_execute.params.result
    "sqlalchemy.events.ConnectionEvents.after_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Single parameter set, a single dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` – [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") generated by the execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Intercept low-level cursor execute() events before execution, receiving the
    string SQL statement and DBAPI-specific parameter list to be invoked against a
    cursor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This event is a good choice for logging as well as late modifications to the
    SQL string. It’s less ideal for parameter modifications except for those which
    are specific to a target backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can be optionally established with the `retval=True` flag. The `statement`
    and `parameters` arguments should be returned as a two-tuple in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: See the example at [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cursor` – DBAPI cursor object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – string SQL statement, as to be passed to the DBAPI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Intercept high level execute() events, receiving uncompiled SQL constructs and
    other objects prior to rendering into SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: The [`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") event now accepts the arguments
    [`ConnectionEvents.before_execute.conn`](#sqlalchemy.events.ConnectionEvents.before_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.before_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.before_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.params`](#sqlalchemy.events.ConnectionEvents.before_execute.params.params
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: This event is good for debugging SQL compilation issues as well as early manipulation
    of the parameters being sent to the database, as the parameter lists will be in
    a consistent format here.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can be optionally established with the `retval=True` flag. The `clauseelement`,
    `multiparams`, and `params` arguments should be returned as a three-tuple in this
    case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Single parameter set, a single dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Intercept begin() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Intercept begin_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Intercept commit() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    may also “auto-commit” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to the value `'commit'`. To intercept this commit, use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Intercept commit_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: The [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event now accepts the arguments
    [`ConnectionEvents.engine_connect.conn`](#sqlalchemy.events.ConnectionEvents.engine_connect.params.conn
    "sqlalchemy.events.ConnectionEvents.engine_connect"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: This event is called typically as the direct result of calling the [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") method.
  prefs: []
  type: TYPE_NORMAL
- en: It differs from the [`PoolEvents.connect()`](#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") method, which refers to the actual connection
    to a database at the DBAPI level; a DBAPI connection may be pooled and reused
    for many operations. In contrast, this event refers only to the production of
    a higher level [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    wrapper around such a DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: It also differs from the [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") event in that it is specific to the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, not the DBAPI connection that [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") deals with, although this DBAPI connection
    is available here via the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute. But note there can in fact
    be multiple [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    events within the lifespan of a single [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, if that [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is invalidated and re-established.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    the lower-level pool checkout event for an individual DBAPI connection'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Intercept when the [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")
    method instructs the engine to “dispose” of it’s connection pool (e.g. [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")), and replaces it with a new one. Disposing of the old
    pool has the effect that existing checked-in connections are closed. The new pool
    does not establish any new connections until it is first used.
  prefs: []
  type: TYPE_NORMAL
- en: This event can be used to indicate that resources related to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should also be cleaned up, keeping in mind that the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    can still be used for new requests in which case it re-acquires connection resources.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Intercept prepare_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Intercept release_savepoint() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – specified name used for the savepoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – not used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Intercept rollback() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    also “auto-rolls back” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to its default value of `'rollback'`. To intercept this rollback,
    use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Intercept rollback_savepoint() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – specified name used for the savepoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – not used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Intercept rollback_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Intercept savepoint() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – specified name used for the savepoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Intercept when the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This method is called after the new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has been produced, with the newly updated execution
    options collection, but before the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") has acted upon any of those new options.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this method is not called when a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is produced which is inheriting execution options
    from its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine");
    to intercept this condition, use the [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – The newly copied [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opts` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.set_engine_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") - event which
    is called when [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") is called.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Intercept when the [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method produces a shallow copy of
    the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which stores the new options. That new [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is passed here. A particular application of this method
    is to add a [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event handler to the given
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which will perform some per- [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") task specific to these execution options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – The newly copied [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opts` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.set_connection_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") - event
    which is called when [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") is called.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: event interface for execution-replacement functions.
  prefs: []
  type: TYPE_NORMAL
- en: These events allow direct instrumentation and replacement of key dialect functions
    which interact with the DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    hooks should be considered **semi-public** and experimental. These hooks are not
    for general use and are only for those situations where intricate re-statement
    of DBAPI mechanics must be injected onto an existing dialect. For general-use
    statement-interception events, please use the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") interface.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispatch](#sqlalchemy.events.DialectEvents.dispatch), [do_connect()](#sqlalchemy.events.DialectEvents.do_connect),
    [do_execute()](#sqlalchemy.events.DialectEvents.do_execute), [do_execute_no_params()](#sqlalchemy.events.DialectEvents.do_execute_no_params),
    [do_executemany()](#sqlalchemy.events.DialectEvents.do_executemany), [do_setinputsizes()](#sqlalchemy.events.DialectEvents.do_setinputsizes),
    [handle_error()](#sqlalchemy.events.DialectEvents.handle_error)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Receive connection arguments before a connection is made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is useful in that it allows the handler to manipulate the cargs
    and/or cparams collections that control how the DBAPI `connect()` function will
    be called. `cargs` will always be a Python list that can be mutated in-place,
    and `cparams` a Python dictionary that may also be mutated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The event hook may also be used to override the call to `connect()` entirely,
    by returning a non-`None` DBAPI connection object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Receive a cursor to have execute() called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Receive a cursor to have execute() with no parameters called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Receive a cursor to have executemany() called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Receive the setinputsizes dictionary for possible modification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: This event is emitted in the case where the dialect makes use of the DBAPI `cursor.setinputsizes()`
    method which passes information about parameter binding for a particular statement.
    The given `inputsizes` dictionary will contain [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects as keys, linked to DBAPI-specific
    type objects as values; for parameters that are not bound, they are added to the
    dictionary with `None` as the value, which means the parameter will not be included
    in the ultimate setinputsizes call. The event may be used to inspect and/or log
    the datatypes that are being bound, as well as to modify the dictionary in place.
    Parameters can be added, modified, or removed from this dictionary. Callers will
    typically want to inspect the `BindParameter.type` attribute of the given bind
    objects in order to make decisions about the DBAPI object.
  prefs: []
  type: TYPE_NORMAL
- en: After the event, the `inputsizes` dictionary is converted into an appropriate
    datastructure to be passed to `cursor.setinputsizes`; either a list for a positional
    bound parameter execution style, or a dictionary of string parameter keys to DBAPI
    type objects for a named bound parameter execution style.
  prefs: []
  type: TYPE_NORMAL
- en: The setinputsizes hook overall is only used for dialects which include the flag
    `use_setinputsizes=True`. Dialects which use this include cx_Oracle, pg8000, asyncpg,
    and pyodbc dialects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For use with pyodbc, the `use_setinputsizes` flag must be passed to the dialect,
    e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Setinputsizes Support](../dialects/mssql.html#mssql-pyodbc-setinputsizes)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.9.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Intercept all exceptions processed by the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), typically but not limited to those emitted within
    the scope of a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is moved to the [`DialectEvents`](#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") class, moved from the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") class, so that it may also participate in
    the “pre ping” operation configured with the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter. The event remains registered by using the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    as the event target, however note that using the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as an event target for [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") is no longer supported.'
  prefs: []
  type: TYPE_NORMAL
- en: This includes all exceptions emitted by the DBAPI as well as within SQLAlchemy’s
    statement invocation process, including encoding errors and other statement validation
    errors. Other areas in which the event is invoked include transaction begin and
    end, result row fetching, cursor creation.
  prefs: []
  type: TYPE_NORMAL
- en: Note that [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error "sqlalchemy.events.DialectEvents.handle_error")
    may support new kinds of exceptions and new calling scenarios at *any time*. Code
    which uses this event must expect new calling patterns to be present in minor
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: To support the wide variety of members that correspond to an exception, as well
    as to allow extensibility of the event without backwards incompatibility, the
    sole argument received is an instance of [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). This object contains data members representing
    detail about the exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use cases supported by this hook include:'
  prefs: []
  type: TYPE_NORMAL
- en: read-only, low-level exception handling for logging and debugging purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing whether a DBAPI connection error message indicates that the database
    connection needs to be reconnected, including for the “pre_ping” handler used
    by `some` dialects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing or disabling whether a connection or the owning connection pool
    is invalidated or expired in response to a specific exception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exception re-writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hook is called while the cursor from the failed operation (if any) is still
    open and accessible. Special cleanup operations can be called on this cursor;
    SQLAlchemy will attempt to close this cursor subsequent to this hook being invoked.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 2.0, the “pre_ping” handler enabled using the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter will also participate in the [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") process, **for those dialects
    that rely upon disconnect codes to detect database liveness**. Note that some
    dialects such as psycopg, psycopg2, and most MySQL dialects make use of a native
    `ping()` method supplied by the DBAPI which does not make use of disconnect codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: The [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook participates in connection
    pool “pre-ping” operations. Within this usage, the [`ExceptionContext.engine`](connections.html#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") attribute will be `None`, however
    the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in use is always available via the [`ExceptionContext.dialect`](connections.html#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.5: Added [`ExceptionContext.is_pre_ping`](connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") attribute which will be set
    to `True` when the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook is triggered within
    a connection pool pre-ping operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.5: An issue was repaired that allows for the PostgreSQL
    `psycopg` and `psycopg2` drivers, as well as all MySQL drivers, to properly participate
    in the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook during connection pool
    “pre-ping” operations; previously, the implementation was non-working for these
    drivers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A handler function has two options for replacing the SQLAlchemy-constructed
    exception into one that is user defined. It can either raise this new exception
    directly, in which case all further event listeners are bypassed and the exception
    will be raised, after appropriate cleanup as taken place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Because the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event specifically provides for
    exceptions to be re-thrown as the ultimate exception raised by the failed statement,
    **stack traces will be misleading** if the user-defined event handler itself fails
    and throws an unexpected exception; the stack trace may not illustrate the actual
    code line that failed! It is advised to code carefully here and use logging and/or
    inline debugging if unexpected exceptions are occurring.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, a “chained” style of event handling can be used, by configuring
    the handler with the `retval=True` modifier and returning the new exception instance
    from the function. In this case, event handling will continue onto the next handler.
    The “chained” exception is available using [`ExceptionContext.chained_exception`](connections.html#sqlalchemy.engine.ExceptionContext.chained_exception
    "sqlalchemy.engine.ExceptionContext.chained_exception"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Handlers that return `None` may be used within the chain; when a handler returns
    `None`, the previous exception instance, if any, is maintained as the current
    exception that is passed onto the next handler.
  prefs: []
  type: TYPE_NORMAL
- en: When a custom exception is raised or returned, SQLAlchemy raises this new exception
    as-is, it is not wrapped by any SQLAlchemy object. If the exception is not a subclass
    of [`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError"), certain features may not be available; currently
    this includes the ORM’s feature of adding a detail hint about “autoflush” to exceptions
    raised within the autoflush process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**context** – an [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") object. See this class for details on all
    available members.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Supporting new database error codes for disconnect scenarios](pooling.html#pool-new-disconnect-codes)'
  prefs: []
  type: TYPE_NORMAL
- en: Schema Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [DDLEvents](#sqlalchemy.events.DDLEvents) | Define event listeners for schema
    objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget "sqlalchemy.events.SchemaEventTarget")
    subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. |'
  prefs: []
  type: TYPE_TB
- en: '| [SchemaEventTarget](#sqlalchemy.events.SchemaEventTarget) | Base class for
    elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    events. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Define event listeners for schema objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create / Drop Events**'
  prefs: []
  type: TYPE_NORMAL
- en: Events emitted when CREATE and DROP commands are emitted to the database. The
    event hooks in this category include [`DDLEvents.before_create()`](#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop").
  prefs: []
  type: TYPE_NORMAL
- en: These events are emitted when using schema-level methods such as [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). Per-object create/drop methods such as
    [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create"),
    [`Table.drop()`](metadata.html#sqlalchemy.schema.Table.drop "sqlalchemy.schema.Table.drop"),
    [`Index.create()`](constraints.html#sqlalchemy.schema.Index.create "sqlalchemy.schema.Index.create")
    are also included, as well as dialect-specific methods such as [`ENUM.create()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    event hooks now take place for non-table objects including constraints, indexes,
    and dialect-specific schema types.'
  prefs: []
  type: TYPE_NORMAL
- en: Event hooks may be attached directly to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object or to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, as well as to any [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") class or object that can be individually created
    and dropped using a distinct SQL command. Such classes include [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and dialect-specific classes such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example using the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event, where a custom event hook will
    emit an `ALTER TABLE` command on the current connection, after `CREATE TABLE`
    is emitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Constraint objects such as [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") may also be subscribed to these events, however
    they will **not** normally produce events as these objects are usually rendered
    inline within an enclosing `CREATE TABLE` statement and implicitly dropped from
    a `DROP TABLE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: For the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct, the event hook will be emitted for `CREATE INDEX`, however SQLAlchemy
    does not normally emit `DROP INDEX` when dropping tables as this is again implicit
    within the `DROP TABLE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects for create/drop events was expanded from
    its previous support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") and [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to also include [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") and all subclasses, [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and some type-related constructs such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: These event hooks are only emitted within the scope of SQLAlchemy’s create/drop
    methods; they are not necessarily supported by tools such as [alembic](https://alembic.sqlalchemy.org).
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachment Events**'
  prefs: []
  type: TYPE_NORMAL
- en: Attachment events are provided to customize behavior whenever a child schema
    element is associated with a parent, such as when a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with its [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), when a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is associated with a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), etc. These events include [`DDLEvents.before_parent_attach()`](#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") and [`DDLEvents.after_parent_attach()`](#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach").
  prefs: []
  type: TYPE_NORMAL
- en: '**Reflection Events**'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event is used to intercept and modify
    the in-Python definition of database columns when [reflection](../glossary.html#term-reflection)
    of database tables proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use with Generic DDL**'
  prefs: []
  type: TYPE_NORMAL
- en: 'DDL events integrate closely with the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") class and the [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") hierarchy of DDL clause constructs,
    which are themselves appropriate as listener callables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '**Event Propagation to MetaData Copies**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For all `DDLEvent` events, the `propagate=True` keyword argument will ensure
    that a given event handler is propagated to copies of the object, which are made
    when using the [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The above [`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") object
    will be associated with the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event for both the `some_table` and
    the `new_table` [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Events](event.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Controlling DDL Sequences](ddl.html#schema-ddl-sequences)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_create()](#sqlalchemy.events.DDLEvents.after_create), [after_drop()](#sqlalchemy.events.DDLEvents.after_drop),
    [after_parent_attach()](#sqlalchemy.events.DDLEvents.after_parent_attach), [before_create()](#sqlalchemy.events.DDLEvents.before_create),
    [before_drop()](#sqlalchemy.events.DDLEvents.before_drop), [before_parent_attach()](#sqlalchemy.events.DDLEvents.before_parent_attach),
    [column_reflect()](#sqlalchemy.events.DDLEvents.column_reflect), [dispatch](#sqlalchemy.events.DDLEvents.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Called after CREATE statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements have
    been emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Called after DROP statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements have been
    emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Called after a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the target object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent` – the parent to which the target is being attached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Called before CREATE statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements will
    be emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `insert=True` modifier for this event; when True, the listener function
    will be prepended to the internal list of events upon discovery, and execute before
    registered listener functions that do not pass this argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Called before DROP statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements will be
    emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Called before a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the target object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent` – the parent to which the target is being attached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Called for each unit of ‘column info’ retrieved when a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is being reflected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is most easily used by applying it to a specific [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance, where it will take effect for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects within that [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") that undergo reflection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.0b2: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") hook may now be applied to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object as well as the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") class itself where it will take place for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects associated with the targeted [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  prefs: []
  type: TYPE_NORMAL
- en: 'It may also be applied to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") class across the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be applied to a specific [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at the point that one is being reflected using the
    [`Table.listeners`](metadata.html#sqlalchemy.schema.Table.params.listeners "sqlalchemy.schema.Table")
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The dictionary of column information as returned by the dialect is passed,
    and can be modified. The dictionary is that returned in each element of the list
    returned by [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"):'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` - the column’s name, is applied to the [`Column.name`](metadata.html#sqlalchemy.schema.Column.params.name
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` - the type of this column, which should be an instance of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"), is applied to the [`Column.type`](metadata.html#sqlalchemy.schema.Column.params.type
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nullable` - boolean flag if the column is NULL or NOT NULL, is applied to
    the [`Column.nullable`](metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default` - the column’s server default value. This is normally specified as
    a plain string SQL expression, however the event can pass a [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") object as well. Is applied to the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The event is called before any action is taken against this dictionary, and
    the contents can be modified; the following additional keys may be added to the
    dictionary to further modify how the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is constructed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key` - the string key that will be used to access this [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in the `.c` collection; will be applied to the [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") parameter. Is also used for ORM mapping. See the section
    [Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    for an example.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote` - force or un-force quoting on the column name; is applied to the [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column") parameter.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` - a dictionary of arbitrary data to follow along with the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), is applied to the [`Column.info`](metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    - in the ORM mapping documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[Intercepting Column Definitions](../orm/extensions/automap.html#automap-intercepting-columns)
    - in the [Automap](../orm/extensions/automap.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - in the [Reflecting Database Objects](reflection.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Base class for elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") events.
  prefs: []
  type: TYPE_NORMAL
- en: This includes [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    as well as [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") (`sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: Connection Pool Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [PoolEvents](#sqlalchemy.events.PoolEvents) | Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool"). |'
  prefs: []
  type: TYPE_TB
- en: '| [PoolResetState](#sqlalchemy.events.PoolResetState) | describes the state
    of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Available events for [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  prefs: []
  type: TYPE_NORMAL
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to accepting the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class and [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instances,
    [`PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents") also
    accepts [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects and the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    class as targets, which will be resolved to the `.pool` attribute of the given
    engine or the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[checkin()](#sqlalchemy.events.PoolEvents.checkin), [checkout()](#sqlalchemy.events.PoolEvents.checkout),
    [close()](#sqlalchemy.events.PoolEvents.close), [close_detached()](#sqlalchemy.events.PoolEvents.close_detached),
    [connect()](#sqlalchemy.events.PoolEvents.connect), [detach()](#sqlalchemy.events.PoolEvents.detach),
    [dispatch](#sqlalchemy.events.PoolEvents.dispatch), [first_connect()](#sqlalchemy.events.PoolEvents.first_connect),
    [invalidate()](#sqlalchemy.events.PoolEvents.invalidate), [reset()](#sqlalchemy.events.PoolEvents.reset),
    [soft_invalidate()](#sqlalchemy.events.PoolEvents.soft_invalidate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.PoolEvents`](#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Called when a connection returns to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Note that the connection may be closed, and may be None if the connection has
    been invalidated. `checkin` will not be called for detached connections. (They
    do not return to the pool.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Called when a connection is retrieved from the Pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_proxy` – the [`PoolProxiedConnection`](pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") object which will proxy the public interface
    of the DBAPI connection for the lifespan of the checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you raise a [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError"), the current connection will be disposed
    and a fresh connection retrieved. Processing of all checkout listeners will abort
    and restart using the new connection.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") - a similar event which occurs
    upon creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: The event is emitted before the close occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: The [`close()`](#sqlalchemy.events.PoolEvents.close "sqlalchemy.events.PoolEvents.close")
    event corresponds to a connection that’s still associated with the pool. To intercept
    close events for detached connections use [`close_detached()`](#sqlalchemy.events.PoolEvents.close_detached
    "sqlalchemy.events.PoolEvents.close_detached").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Called when a detached DBAPI connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: The event is emitted before the close occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The close of a connection can fail; typically this is because the connection
    is already closed. If the close operation fails, the connection is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Called at the moment a particular DBAPI connection is first created for a given
    [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: This event allows one to capture the point directly after which the DBAPI module-level
    `.connect()` method has been used in order to produce a new DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is “detached” from a pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: This event is emitted after the detach occurs. The connection is no longer associated
    with the given connection record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Called exactly once for the first time a DBAPI connection is checked out from
    a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: The rationale for [`PoolEvents.first_connect()`](#sqlalchemy.events.PoolEvents.first_connect
    "sqlalchemy.events.PoolEvents.first_connect") is to determine information about
    a particular series of database connections based on the settings used for all
    connections. Since a particular [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    refers to a single “creator” function (which in terms of a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") refers to the URL and connection options used), it
    is typically valid to make observations about a single connection that can be
    safely assumed to be valid about all subsequent connections, such as the database
    version, the server and client encoding settings, collation settings, and many
    others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is to be “invalidated”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked, either from
    API usage or via “auto-invalidation”, without the `soft` flag.
  prefs: []
  type: TYPE_NORMAL
- en: The event occurs before a final attempt to call `.close()` on the connection
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](pooling.html#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Called before the “reset” action occurs for a pooled connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event now accepts the arguments [`PoolEvents.reset.dbapi_connection`](#sqlalchemy.events.PoolEvents.reset.params.dbapi_connection
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.connection_record`](#sqlalchemy.events.PoolEvents.reset.params.connection_record
    "sqlalchemy.events.PoolEvents.reset"), [`PoolEvents.reset.reset_state`](#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset"). Support for listener functions which accept
    the previous argument signature(s) listed above as “deprecated” will be removed
    in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: This event represents when the `rollback()` method is called on the DBAPI connection
    before it is returned to the pool or discarded. A custom “reset” strategy may
    be implemented using this event hook, which may also be combined with disabling
    the default “reset” behavior using the [`Pool.reset_on_return`](pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The primary difference between the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") and [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") events are that [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") is called not just for pooled connections
    that are being returned to the pool, but also for connections that were detached
    using the [`Connection.detach()`](connections.html#sqlalchemy.engine.Connection.detach
    "sqlalchemy.engine.Connection.detach") method as well as asyncio connections that
    are being discarded due to garbage collection taking place on connections before
    the connection was checked in.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the event **is not** invoked for connections that were invalidated
    using [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate"). These events may be intercepted using
    the [`PoolEvents.soft_invalidate()`](#sqlalchemy.events.PoolEvents.soft_invalidate
    "sqlalchemy.events.PoolEvents.soft_invalidate") and [`PoolEvents.invalidate()`](#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event hooks, and all “connection close”
    events may be intercepted using [`PoolEvents.close()`](#sqlalchemy.events.PoolEvents.close
    "sqlalchemy.events.PoolEvents.close").
  prefs: []
  type: TYPE_NORMAL
- en: The [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    event is usually followed by the [`PoolEvents.checkin()`](#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event, except in those cases where the
    connection is discarded immediately after reset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reset_state` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PoolResetState`](#sqlalchemy.events.PoolResetState "sqlalchemy.events.PoolResetState")
    instance which provides information about the circumstances under which the connection
    is being reset.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Reset On Return](pooling.html#pool-reset-on-return)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.rollback()`](#sqlalchemy.events.ConnectionEvents.rollback
    "sqlalchemy.events.ConnectionEvents.rollback")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.commit()`](#sqlalchemy.events.ConnectionEvents.commit "sqlalchemy.events.ConnectionEvents.commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Called when a DBAPI connection is to be “soft invalidated”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: This event is called any time the [`ConnectionPoolEntry.invalidate()`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.invalidate
    "sqlalchemy.pool.ConnectionPoolEntry.invalidate") method is invoked with the `soft`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: Soft invalidation refers to when the connection record that tracks this connection
    will force a reconnect after the current connection is checked in. It does not
    actively close the dbapi_connection at the point at which it is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbapi_connection` – a DBAPI connection. The [`ConnectionPoolEntry.dbapi_connection`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection
    "sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection") attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_record` – the [`ConnectionPoolEntry`](pooling.html#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") managing the DBAPI connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exception` – the exception object corresponding to the reason for this invalidation,
    if any. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: describes the state of a DBAPI connection as it is being passed to the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") connection pool event.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[asyncio_safe](#sqlalchemy.events.PoolResetState.asyncio_safe), [terminate_only](#sqlalchemy.events.PoolResetState.terminate_only),
    [transaction_was_reset](#sqlalchemy.events.PoolResetState.transaction_was_reset)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0b3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the reset operation is occurring within a scope where an enclosing
    event loop is expected to be present for asyncio applications.
  prefs: []
  type: TYPE_NORMAL
- en: Will be False in the case that the connection is being garbage collected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: indicates if the connection is to be immediately terminated and not checked
    in to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: This occurs for connections that were invalidated, as well as asyncio connections
    that were not cleanly handled by the calling code that are instead being garbage
    collected. In the latter case, operations can’t be safely run on asyncio connections
    within garbage collection as there is not necessarily an event loop present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the transaction on the DBAPI connection was already essentially
    “reset” back by the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object.
  prefs: []
  type: TYPE_NORMAL
- en: This boolean is True if the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had transactional state present upon it, which
    was then not closed using the [`Connection.rollback()`](connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") or [`Connection.commit()`](connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") method; instead, the transaction was closed
    inline within the [`Connection.close()`](connections.html#sqlalchemy.engine.Connection.close
    "sqlalchemy.engine.Connection.close") method so is guaranteed to remain non-present
    when this event is reached.
  prefs: []
  type: TYPE_NORMAL
- en: '## SQL Execution and Connection Events'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ConnectionEvents](#sqlalchemy.events.ConnectionEvents) | Available events
    for [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [DialectEvents](#sqlalchemy.events.DialectEvents) | event interface for execution-replacement
    functions. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Available events for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: The methods here define the name of an event as well as the names of members
    that are passed to listener functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'An event listener can be associated with any [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") or [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance, such as an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'or with a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: When the methods are called with a statement parameter, such as in [`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") or [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute"), the statement is
    the exact SQL string that was prepared for transmission to the DBAPI `cursor`
    in the connection’s [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect").
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events can also be
    established with the `retval=True` flag, which allows modification of the statement
    and parameters to be sent to the database. The [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event is particularly
    useful here to add ad-hoc string transformations, such as comments, to all executions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents "sqlalchemy.events.ConnectionEvents")
    can be established on any combination of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), as well as instances of each of those classes.
    Events across all four scopes will fire off for a given instance of [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). However, for performance reasons, the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object determines at instantiation time whether
    or not its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    has event listeners established. Event listeners added to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or to an instance of [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") *after* the instantiation of a dependent [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instance will usually *not* be available on that
    [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    instance. The newly added listeners will instead take effect for [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created subsequent to those event listeners
    being established on the parent [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") class or instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**retval=False** – Applies to the [`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") and [`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") events only. When
    True, the user-defined event function must have a return value, which is a tuple
    of parameters that replace the given statement and parameters. See those methods
    for a description of specific return arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_cursor_execute()](#sqlalchemy.events.ConnectionEvents.after_cursor_execute),
    [after_execute()](#sqlalchemy.events.ConnectionEvents.after_execute), [before_cursor_execute()](#sqlalchemy.events.ConnectionEvents.before_cursor_execute),
    [before_execute()](#sqlalchemy.events.ConnectionEvents.before_execute), [begin()](#sqlalchemy.events.ConnectionEvents.begin),
    [begin_twophase()](#sqlalchemy.events.ConnectionEvents.begin_twophase), [commit()](#sqlalchemy.events.ConnectionEvents.commit),
    [commit_twophase()](#sqlalchemy.events.ConnectionEvents.commit_twophase), [dispatch](#sqlalchemy.events.ConnectionEvents.dispatch),
    [engine_connect()](#sqlalchemy.events.ConnectionEvents.engine_connect), [engine_disposed()](#sqlalchemy.events.ConnectionEvents.engine_disposed),
    [prepare_twophase()](#sqlalchemy.events.ConnectionEvents.prepare_twophase), [release_savepoint()](#sqlalchemy.events.ConnectionEvents.release_savepoint),
    [rollback()](#sqlalchemy.events.ConnectionEvents.rollback), [rollback_savepoint()](#sqlalchemy.events.ConnectionEvents.rollback_savepoint),
    [rollback_twophase()](#sqlalchemy.events.ConnectionEvents.rollback_twophase),
    [savepoint()](#sqlalchemy.events.ConnectionEvents.savepoint), [set_connection_execution_options()](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Intercept low-level cursor execute() events after execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cursor` – DBAPI cursor object. Will have results pending if the statement
    was a SELECT, but these should not be consumed as they will be needed by the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – string SQL statement, as passed to the DBAPI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Intercept high level execute() events after execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: The [`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute") event now accepts the arguments
    [`ConnectionEvents.after_execute.conn`](#sqlalchemy.events.ConnectionEvents.after_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.after_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.after_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.params`](#sqlalchemy.events.ConnectionEvents.after_execute.params.params
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.after_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.after_execute"), [`ConnectionEvents.after_execute.result`](#sqlalchemy.events.ConnectionEvents.after_execute.params.result
    "sqlalchemy.events.ConnectionEvents.after_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Single parameter set, a single dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`result` – [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") generated by the execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Intercept low-level cursor execute() events before execution, receiving the
    string SQL statement and DBAPI-specific parameter list to be invoked against a
    cursor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: This event is a good choice for logging as well as late modifications to the
    SQL string. It’s less ideal for parameter modifications except for those which
    are specific to a target backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can be optionally established with the `retval=True` flag. The `statement`
    and `parameters` arguments should be returned as a two-tuple in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: See the example at [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cursor` – DBAPI cursor object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – string SQL statement, as to be passed to the DBAPI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters` – Dictionary, tuple, or list of parameters being passed to the
    `execute()` or `executemany()` method of the DBAPI `cursor`. In some cases may
    be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – [`ExecutionContext`](internals.html#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.ExecutionContext") object in use. May be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`executemany` – boolean, if `True`, this is an `executemany()` call, if `False`,
    this is an `execute()` call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute "sqlalchemy.events.ConnectionEvents.before_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Intercept high level execute() events, receiving uncompiled SQL constructs and
    other objects prior to rendering into SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4: The [`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute") event now accepts the arguments
    [`ConnectionEvents.before_execute.conn`](#sqlalchemy.events.ConnectionEvents.before_execute.params.conn
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.clauseelement`](#sqlalchemy.events.ConnectionEvents.before_execute.params.clauseelement
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.multiparams`](#sqlalchemy.events.ConnectionEvents.before_execute.params.multiparams
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.params`](#sqlalchemy.events.ConnectionEvents.before_execute.params.params
    "sqlalchemy.events.ConnectionEvents.before_execute"), [`ConnectionEvents.before_execute.execution_options`](#sqlalchemy.events.ConnectionEvents.before_execute.params.execution_options
    "sqlalchemy.events.ConnectionEvents.before_execute"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: This event is good for debugging SQL compilation issues as well as early manipulation
    of the parameters being sent to the database, as the parameter lists will be in
    a consistent format here.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event can be optionally established with the `retval=True` flag. The `clauseelement`,
    `multiparams`, and `params` arguments should be returned as a three-tuple in this
    case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clauseelement` – SQL expression construct, [`Compiled`](internals.html#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance, or string statement passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiparams` – Multiple parameter sets, a list of dictionaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Single parameter set, a single dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of execution options passed along with the statement, if any. This
    is a merge of all options that will be used, including those of the statement,
    the connection, and those passed in to the method itself for the 2.0 style of
    execution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Intercept begin() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Intercept begin_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Intercept commit() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    may also “auto-commit” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to the value `'commit'`. To intercept this commit, use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Intercept commit_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Intercept the creation of a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: The [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event now accepts the arguments
    [`ConnectionEvents.engine_connect.conn`](#sqlalchemy.events.ConnectionEvents.engine_connect.params.conn
    "sqlalchemy.events.ConnectionEvents.engine_connect"). Support for listener functions
    which accept the previous argument signature(s) listed above as “deprecated” will
    be removed in a future release.'
  prefs: []
  type: TYPE_NORMAL
- en: This event is called typically as the direct result of calling the [`Engine.connect()`](connections.html#sqlalchemy.engine.Engine.connect
    "sqlalchemy.engine.Engine.connect") method.
  prefs: []
  type: TYPE_NORMAL
- en: It differs from the [`PoolEvents.connect()`](#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") method, which refers to the actual connection
    to a database at the DBAPI level; a DBAPI connection may be pooled and reused
    for many operations. In contrast, this event refers only to the production of
    a higher level [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    wrapper around such a DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: It also differs from the [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") event in that it is specific to the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, not the DBAPI connection that [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") deals with, although this DBAPI connection
    is available here via the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") attribute. But note there can in fact
    be multiple [`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    events within the lifespan of a single [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, if that [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is invalidated and re-established.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolEvents.checkout()`](#sqlalchemy.events.PoolEvents.checkout "sqlalchemy.events.PoolEvents.checkout")
    the lower-level pool checkout event for an individual DBAPI connection'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Intercept when the [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: The [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")
    method instructs the engine to “dispose” of it’s connection pool (e.g. [`Pool`](pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")), and replaces it with a new one. Disposing of the old
    pool has the effect that existing checked-in connections are closed. The new pool
    does not establish any new connections until it is first used.
  prefs: []
  type: TYPE_NORMAL
- en: This event can be used to indicate that resources related to the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should also be cleaned up, keeping in mind that the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    can still be used for new requests in which case it re-acquires connection resources.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Intercept prepare_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Intercept release_savepoint() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – specified name used for the savepoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – not used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Intercept rollback() events, as initiated by a [`Transaction`](connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Note that the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    also “auto-rolls back” a DBAPI connection upon checkin, if the `reset_on_return`
    flag is set to its default value of `'rollback'`. To intercept this rollback,
    use the [`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")
    hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolEvents.reset()`](#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Intercept rollback_savepoint() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – specified name used for the savepoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` – not used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Intercept rollback_twophase() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – two-phase XID identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – boolean, indicates if [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Intercept savepoint() events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – specified name used for the savepoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Intercept when the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: This method is called after the new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has been produced, with the newly updated execution
    options collection, but before the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") has acted upon any of those new options.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this method is not called when a new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is produced which is inheriting execution options
    from its parent [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine");
    to intercept this condition, use the [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – The newly copied [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opts` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.set_engine_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") - event which
    is called when [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") is called.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Intercept when the [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: The [`Engine.execution_options()`](connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method produces a shallow copy of
    the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which stores the new options. That new [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is passed here. A particular application of this method
    is to add a [`ConnectionEvents.engine_connect()`](#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") event handler to the given
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    which will perform some per- [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") task specific to these execution options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn` – The newly copied [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opts` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of options that were passed to the [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") method. This dictionary may
    be modified in place to affect the ultimate options which take effect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: the `opts` dictionary may be modified in place.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.set_connection_execution_options()`](#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") - event
    which is called when [`Connection.execution_options()`](connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") is called.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: event interface for execution-replacement functions.
  prefs: []
  type: TYPE_NORMAL
- en: These events allow direct instrumentation and replacement of key dialect functions
    which interact with the DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    hooks should be considered **semi-public** and experimental. These hooks are not
    for general use and are only for those situations where intricate re-statement
    of DBAPI mechanics must be injected onto an existing dialect. For general-use
    statement-interception events, please use the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") interface.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.before_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.before_execute()`](#sqlalchemy.events.ConnectionEvents.before_execute
    "sqlalchemy.events.ConnectionEvents.before_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.after_cursor_execute()`](#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionEvents.after_execute()`](#sqlalchemy.events.ConnectionEvents.after_execute
    "sqlalchemy.events.ConnectionEvents.after_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispatch](#sqlalchemy.events.DialectEvents.dispatch), [do_connect()](#sqlalchemy.events.DialectEvents.do_connect),
    [do_execute()](#sqlalchemy.events.DialectEvents.do_execute), [do_execute_no_params()](#sqlalchemy.events.DialectEvents.do_execute_no_params),
    [do_executemany()](#sqlalchemy.events.DialectEvents.do_executemany), [do_setinputsizes()](#sqlalchemy.events.DialectEvents.do_setinputsizes),
    [handle_error()](#sqlalchemy.events.DialectEvents.handle_error)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.DialectEvents`](#sqlalchemy.events.DialectEvents "sqlalchemy.events.DialectEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Receive connection arguments before a connection is made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is useful in that it allows the handler to manipulate the cargs
    and/or cparams collections that control how the DBAPI `connect()` function will
    be called. `cargs` will always be a Python list that can be mutated in-place,
    and `cparams` a Python dictionary that may also be mutated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'The event hook may also be used to override the call to `connect()` entirely,
    by returning a non-`None` DBAPI connection object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Receive a cursor to have execute() called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Receive a cursor to have execute() with no parameters called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Receive a cursor to have executemany() called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: Return the value True to halt further events from invoking, and to indicate
    that the cursor execution has already taken place within the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Receive the setinputsizes dictionary for possible modification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: This event is emitted in the case where the dialect makes use of the DBAPI `cursor.setinputsizes()`
    method which passes information about parameter binding for a particular statement.
    The given `inputsizes` dictionary will contain [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects as keys, linked to DBAPI-specific
    type objects as values; for parameters that are not bound, they are added to the
    dictionary with `None` as the value, which means the parameter will not be included
    in the ultimate setinputsizes call. The event may be used to inspect and/or log
    the datatypes that are being bound, as well as to modify the dictionary in place.
    Parameters can be added, modified, or removed from this dictionary. Callers will
    typically want to inspect the `BindParameter.type` attribute of the given bind
    objects in order to make decisions about the DBAPI object.
  prefs: []
  type: TYPE_NORMAL
- en: After the event, the `inputsizes` dictionary is converted into an appropriate
    datastructure to be passed to `cursor.setinputsizes`; either a list for a positional
    bound parameter execution style, or a dictionary of string parameter keys to DBAPI
    type objects for a named bound parameter execution style.
  prefs: []
  type: TYPE_NORMAL
- en: The setinputsizes hook overall is only used for dialects which include the flag
    `use_setinputsizes=True`. Dialects which use this include cx_Oracle, pg8000, asyncpg,
    and pyodbc dialects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For use with pyodbc, the `use_setinputsizes` flag must be passed to the dialect,
    e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Setinputsizes Support](../dialects/mssql.html#mssql-pyodbc-setinputsizes)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.9.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Fine grained control over cx_Oracle data binding performance with setinputsizes](../dialects/oracle.html#cx-oracle-setinputsizes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Intercept all exceptions processed by the [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect"), typically but not limited to those emitted within
    the scope of a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0: the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is moved to the [`DialectEvents`](#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") class, moved from the [`ConnectionEvents`](#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") class, so that it may also participate in
    the “pre ping” operation configured with the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter. The event remains registered by using the
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    as the event target, however note that using the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as an event target for [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") is no longer supported.'
  prefs: []
  type: TYPE_NORMAL
- en: This includes all exceptions emitted by the DBAPI as well as within SQLAlchemy’s
    statement invocation process, including encoding errors and other statement validation
    errors. Other areas in which the event is invoked include transaction begin and
    end, result row fetching, cursor creation.
  prefs: []
  type: TYPE_NORMAL
- en: Note that [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error "sqlalchemy.events.DialectEvents.handle_error")
    may support new kinds of exceptions and new calling scenarios at *any time*. Code
    which uses this event must expect new calling patterns to be present in minor
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: To support the wide variety of members that correspond to an exception, as well
    as to allow extensibility of the event without backwards incompatibility, the
    sole argument received is an instance of [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). This object contains data members representing
    detail about the exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use cases supported by this hook include:'
  prefs: []
  type: TYPE_NORMAL
- en: read-only, low-level exception handling for logging and debugging purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing whether a DBAPI connection error message indicates that the database
    connection needs to be reconnected, including for the “pre_ping” handler used
    by `some` dialects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing or disabling whether a connection or the owning connection pool
    is invalidated or expired in response to a specific exception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exception re-writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hook is called while the cursor from the failed operation (if any) is still
    open and accessible. Special cleanup operations can be called on this cursor;
    SQLAlchemy will attempt to close this cursor subsequent to this hook being invoked.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 2.0, the “pre_ping” handler enabled using the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter will also participate in the [`handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") process, **for those dialects
    that rely upon disconnect codes to detect database liveness**. Note that some
    dialects such as psycopg, psycopg2, and most MySQL dialects make use of a native
    `ping()` method supplied by the DBAPI which does not make use of disconnect codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: The [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook participates in connection
    pool “pre-ping” operations. Within this usage, the [`ExceptionContext.engine`](connections.html#sqlalchemy.engine.ExceptionContext.engine
    "sqlalchemy.engine.ExceptionContext.engine") attribute will be `None`, however
    the [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    in use is always available via the [`ExceptionContext.dialect`](connections.html#sqlalchemy.engine.ExceptionContext.dialect
    "sqlalchemy.engine.ExceptionContext.dialect") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.5: Added [`ExceptionContext.is_pre_ping`](connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") attribute which will be set
    to `True` when the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook is triggered within
    a connection pool pre-ping operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.5: An issue was repaired that allows for the PostgreSQL
    `psycopg` and `psycopg2` drivers, as well as all MySQL drivers, to properly participate
    in the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook during connection pool
    “pre-ping” operations; previously, the implementation was non-working for these
    drivers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A handler function has two options for replacing the SQLAlchemy-constructed
    exception into one that is user defined. It can either raise this new exception
    directly, in which case all further event listeners are bypassed and the exception
    will be raised, after appropriate cleanup as taken place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Because the [`DialectEvents.handle_error()`](#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event specifically provides for
    exceptions to be re-thrown as the ultimate exception raised by the failed statement,
    **stack traces will be misleading** if the user-defined event handler itself fails
    and throws an unexpected exception; the stack trace may not illustrate the actual
    code line that failed! It is advised to code carefully here and use logging and/or
    inline debugging if unexpected exceptions are occurring.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, a “chained” style of event handling can be used, by configuring
    the handler with the `retval=True` modifier and returning the new exception instance
    from the function. In this case, event handling will continue onto the next handler.
    The “chained” exception is available using [`ExceptionContext.chained_exception`](connections.html#sqlalchemy.engine.ExceptionContext.chained_exception
    "sqlalchemy.engine.ExceptionContext.chained_exception"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Handlers that return `None` may be used within the chain; when a handler returns
    `None`, the previous exception instance, if any, is maintained as the current
    exception that is passed onto the next handler.
  prefs: []
  type: TYPE_NORMAL
- en: When a custom exception is raised or returned, SQLAlchemy raises this new exception
    as-is, it is not wrapped by any SQLAlchemy object. If the exception is not a subclass
    of [`sqlalchemy.exc.StatementError`](exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError"), certain features may not be available; currently
    this includes the ORM’s feature of adding a detail hint about “autoflush” to exceptions
    raised within the autoflush process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**context** – an [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") object. See this class for details on all
    available members.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Supporting new database error codes for disconnect scenarios](pooling.html#pool-new-disconnect-codes)'
  prefs: []
  type: TYPE_NORMAL
- en: Schema Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [DDLEvents](#sqlalchemy.events.DDLEvents) | Define event listeners for schema
    objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget "sqlalchemy.events.SchemaEventTarget")
    subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData"),
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. |'
  prefs: []
  type: TYPE_TB
- en: '| [SchemaEventTarget](#sqlalchemy.events.SchemaEventTarget) | Base class for
    elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    events. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Define event listeners for schema objects, that is, [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") and other [`SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") subclasses, including [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create / Drop Events**'
  prefs: []
  type: TYPE_NORMAL
- en: Events emitted when CREATE and DROP commands are emitted to the database. The
    event hooks in this category include [`DDLEvents.before_create()`](#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), and [`DDLEvents.after_drop()`](#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop").
  prefs: []
  type: TYPE_NORMAL
- en: These events are emitted when using schema-level methods such as [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all"). Per-object create/drop methods such as
    [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create "sqlalchemy.schema.Table.create"),
    [`Table.drop()`](metadata.html#sqlalchemy.schema.Table.drop "sqlalchemy.schema.Table.drop"),
    [`Index.create()`](constraints.html#sqlalchemy.schema.Index.create "sqlalchemy.schema.Index.create")
    are also included, as well as dialect-specific methods such as [`ENUM.create()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.create
    "sqlalchemy.dialects.postgresql.ENUM.create").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    event hooks now take place for non-table objects including constraints, indexes,
    and dialect-specific schema types.'
  prefs: []
  type: TYPE_NORMAL
- en: Event hooks may be attached directly to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object or to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") collection, as well as to any [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") class or object that can be individually created
    and dropped using a distinct SQL command. Such classes include [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), and dialect-specific classes such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example using the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event, where a custom event hook will
    emit an `ALTER TABLE` command on the current connection, after `CREATE TABLE`
    is emitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Constraint objects such as [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") may also be subscribed to these events, however
    they will **not** normally produce events as these objects are usually rendered
    inline within an enclosing `CREATE TABLE` statement and implicitly dropped from
    a `DROP TABLE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: For the [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct, the event hook will be emitted for `CREATE INDEX`, however SQLAlchemy
    does not normally emit `DROP INDEX` when dropping tables as this is again implicit
    within the `DROP TABLE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects for create/drop events was expanded from
    its previous support for [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") and [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to also include [`Constraint`](constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") and all subclasses, [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and some type-related constructs such as [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: These event hooks are only emitted within the scope of SQLAlchemy’s create/drop
    methods; they are not necessarily supported by tools such as [alembic](https://alembic.sqlalchemy.org).
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachment Events**'
  prefs: []
  type: TYPE_NORMAL
- en: Attachment events are provided to customize behavior whenever a child schema
    element is associated with a parent, such as when a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with its [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), when a [`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is associated with a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), etc. These events include [`DDLEvents.before_parent_attach()`](#sqlalchemy.events.DDLEvents.before_parent_attach
    "sqlalchemy.events.DDLEvents.before_parent_attach") and [`DDLEvents.after_parent_attach()`](#sqlalchemy.events.DDLEvents.after_parent_attach
    "sqlalchemy.events.DDLEvents.after_parent_attach").
  prefs: []
  type: TYPE_NORMAL
- en: '**Reflection Events**'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") event is used to intercept and modify
    the in-Python definition of database columns when [reflection](../glossary.html#term-reflection)
    of database tables proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use with Generic DDL**'
  prefs: []
  type: TYPE_NORMAL
- en: 'DDL events integrate closely with the [`DDL`](ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") class and the [`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") hierarchy of DDL clause constructs,
    which are themselves appropriate as listener callables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '**Event Propagation to MetaData Copies**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For all `DDLEvent` events, the `propagate=True` keyword argument will ensure
    that a given event handler is propagated to copies of the object, which are made
    when using the [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: The above [`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL") object
    will be associated with the [`DDLEvents.after_create()`](#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create") event for both the `some_table` and
    the `new_table` [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Events](event.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement "sqlalchemy.schema.ExecutableDDLElement")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Controlling DDL Sequences](ddl.html#schema-ddl-sequences)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[after_create()](#sqlalchemy.events.DDLEvents.after_create), [after_drop()](#sqlalchemy.events.DDLEvents.after_drop),
    [after_parent_attach()](#sqlalchemy.events.DDLEvents.after_parent_attach), [before_create()](#sqlalchemy.events.DDLEvents.before_create),
    [before_drop()](#sqlalchemy.events.DDLEvents.before_drop), [before_parent_attach()](#sqlalchemy.events.DDLEvents.before_parent_attach),
    [column_reflect()](#sqlalchemy.events.DDLEvents.column_reflect), [dispatch](#sqlalchemy.events.DDLEvents.dispatch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.DDLEvents`](#sqlalchemy.events.DDLEvents "sqlalchemy.events.DDLEvents")
    (`sqlalchemy.event.Events`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Called after CREATE statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements have
    been emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Called after DROP statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements have been
    emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Called after a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the target object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent` – the parent to which the target is being attached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Called before CREATE statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the CREATE statement or statements will
    be emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    accepts the `insert=True` modifier for this event; when True, the listener function
    will be prepended to the internal list of events upon discovery, and execute before
    registered listener functions that do not pass this argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Called before DROP statements are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `SchemaObject`, such as a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") but also including all create/drop objects such as
    [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    etc., object which is the target of the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0: Support for all [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects was added.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`connection` – the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") where the DROP statement or statements will be
    emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – additional keyword arguments relevant to the event. The contents of
    this dictionary may vary across releases, and include the list of tables being
    generated for a metadata-level event, the checkfirst flag, and other elements
    used by internal events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Called before a [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    is associated with a parent [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` – the target object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent` – the parent to which the target is being attached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Called for each unit of ‘column info’ retrieved when a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") is being reflected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example argument forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'This event is most easily used by applying it to a specific [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") instance, where it will take effect for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects within that [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") that undergo reflection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.0b2: The [`DDLEvents.column_reflect()`](#sqlalchemy.events.DDLEvents.column_reflect
    "sqlalchemy.events.DDLEvents.column_reflect") hook may now be applied to a [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object as well as the [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") class itself where it will take place for all [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects associated with the targeted [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  prefs: []
  type: TYPE_NORMAL
- en: 'It may also be applied to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") class across the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be applied to a specific [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") at the point that one is being reflected using the
    [`Table.listeners`](metadata.html#sqlalchemy.schema.Table.params.listeners "sqlalchemy.schema.Table")
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: 'The dictionary of column information as returned by the dialect is passed,
    and can be modified. The dictionary is that returned in each element of the list
    returned by [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns"):'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` - the column’s name, is applied to the [`Column.name`](metadata.html#sqlalchemy.schema.Column.params.name
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` - the type of this column, which should be an instance of [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine"), is applied to the [`Column.type`](metadata.html#sqlalchemy.schema.Column.params.type
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nullable` - boolean flag if the column is NULL or NOT NULL, is applied to
    the [`Column.nullable`](metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default` - the column’s server default value. This is normally specified as
    a plain string SQL expression, however the event can pass a [`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue
    "sqlalchemy.schema.FetchedValue"), [`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause
    "sqlalchemy.schema.DefaultClause"), or [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") object as well. Is applied to the [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The event is called before any action is taken against this dictionary, and
    the contents can be modified; the following additional keys may be added to the
    dictionary to further modify how the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is constructed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key` - the string key that will be used to access this [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") in the `.c` collection; will be applied to the [`Column.key`](metadata.html#sqlalchemy.schema.Column.params.key
    "sqlalchemy.schema.Column") parameter. Is also used for ORM mapping. See the section
    [Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    for an example.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`quote` - force or un-force quoting on the column name; is applied to the [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column") parameter.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` - a dictionary of arbitrary data to follow along with the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), is applied to the [`Column.info`](metadata.html#sqlalchemy.schema.Column.params.info
    "sqlalchemy.schema.Column") parameter.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    also accepts the `propagate=True` modifier for this event; when True, the listener
    function will be established for any copies made of the target object, i.e. those
    copies that are generated when [`Table.to_metadata()`](metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") is used.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Automating Column Naming Schemes from Reflected Tables](../orm/declarative_tables.html#mapper-automated-reflection-schemes)
    - in the ORM mapping documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[Intercepting Column Definitions](../orm/extensions/automap.html#automap-intercepting-columns)
    - in the [Automap](../orm/extensions/automap.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#metadata-reflection-dbagnostic-types)
    - in the [Reflecting Database Objects](reflection.html) documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: reference back to the _Dispatch class.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional against _Dispatch._events
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Base class for elements that are the targets of [`DDLEvents`](#sqlalchemy.events.DDLEvents
    "sqlalchemy.events.DDLEvents") events.
  prefs: []
  type: TYPE_NORMAL
- en: This includes [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    as well as [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.events.SchemaEventTarget`](#sqlalchemy.events.SchemaEventTarget
    "sqlalchemy.events.SchemaEventTarget") (`sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
