["```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n```", "```py\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    fullname = mapped_column(String)\n    nickname = mapped_column(String(30))\n```", "```py\n# equivalent Table object produced\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String()),\n    Column(\"nickname\", String(30)),\n)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(30))\n```", "```py\n    from typing import Any\n    from typing import Dict\n    from typing import Type\n\n    import datetime\n    import decimal\n    import uuid\n\n    from sqlalchemy import types\n\n    # default type mapping, deriving the type for mapped_column()\n    # from a Mapped[] annotation\n    type_map: Dict[Type[Any], TypeEngine[Any]] = {\n        bool: types.Boolean(),\n        bytes: types.LargeBinary(),\n        datetime.date: types.Date(),\n        datetime.datetime: types.DateTime(),\n        datetime.time: types.Time(),\n        datetime.timedelta: types.Interval(),\n        decimal.Decimal: types.Numeric(),\n        float: types.Float(),\n        int: types.Integer(),\n        str: types.String(),\n        uuid.UUID: types.Uuid(),\n    }\n    ```", "```py\n    from typing import Optional\n\n    from sqlalchemy.orm import DeclarativeBase\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import mapped_column\n\n    class Base(DeclarativeBase):\n        pass\n\n    class SomeClass(Base):\n        __tablename__ = \"some_table\"\n\n        # primary_key=True, therefore will be NOT NULL\n        id: Mapped[int] = mapped_column(primary_key=True)\n\n        # not Optional[], therefore will be NOT NULL\n        data: Mapped[str]\n\n        # Optional[], therefore will be NULL\n        additional_info: Mapped[Optional[str]]\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NOT NULL, but can be None in Python\n        data: Mapped[Optional[str]] = mapped_column(nullable=False)\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NULL, but type checker will not expect\n        # the attribute to be None\n        data: Mapped[str] = mapped_column(nullable=True)\n    ```", "```py\nimport datetime\n\nfrom sqlalchemy import BIGINT, Integer, NVARCHAR, String, TIMESTAMP\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped, mapped_column, registry\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        int: BIGINT,\n        datetime.datetime: TIMESTAMP(timezone=True),\n        str: String().with_variant(NVARCHAR, \"mssql\"),\n    }\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    date: Mapped[datetime.datetime]\n    status: Mapped[str]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> from sqlalchemy.dialects import mssql, postgresql\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=mssql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGINT  NOT  NULL  IDENTITY,\n  date  TIMESTAMP  NOT  NULL,\n  status  NVARCHAR(max)  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=postgresql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGSERIAL  NOT  NULL,\n  date  TIMESTAMP  WITH  TIME  ZONE  NOT  NULL,\n  status  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom decimal import Decimal\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import Numeric\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nstr_30 = Annotated[str, 30]\nstr_50 = Annotated[str, 50]\nnum_12_4 = Annotated[Decimal, 12]\nnum_6_2 = Annotated[Decimal, 6]\n\nclass Base(DeclarativeBase):\n    registry = registry(\n        type_annotation_map={\n            str_30: String(30),\n            str_50: String(50),\n            num_12_4: Numeric(12, 4),\n            num_6_2: Numeric(6, 2),\n        }\n    )\n```", "```py\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    short_name: Mapped[str_30] = mapped_column(primary_key=True)\n    long_name: Mapped[str_50]\n    num_value: Mapped[num_12_4]\n    short_num_value: Mapped[num_6_2]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  short_name  VARCHAR(30)  NOT  NULL,\n  long_name  VARCHAR(50)  NOT  NULL,\n  num_value  NUMERIC(12,  4)  NOT  NULL,\n  short_num_value  NUMERIC(6,  2)  NOT  NULL,\n  PRIMARY  KEY  (short_name)\n) \n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import func\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import mapped_column\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\nrequired_name = Annotated[str, mapped_column(String(30), nullable=False)]\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[intpk]\n    name: Mapped[required_name]\n    created_at: Mapped[timestamp]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30)  NOT  NULL,\n  created_at  DATETIME  DEFAULT  CURRENT_TIMESTAMP  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom typing_extensions import Annotated\n\nimport datetime\nfrom typing import Optional\n\nfrom sqlalchemy.orm import DeclarativeBase\n\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    # ...\n\n    # pep-484 type will be Optional, but column will be\n    # NOT NULL\n    created_at: Mapped[Optional[timestamp]]\n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.schema import CreateTable\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[intpk]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    # add ForeignKey to mapped_column(Integer, primary_key=True)\n    id: Mapped[intpk] = mapped_column(ForeignKey(\"parent.id\"))\n\n    # change server default from CURRENT_TIMESTAMP to UTC_TIMESTAMP\n    created_at: Mapped[timestamp] = mapped_column(server_default=func.UTC_TIMESTAMP())\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  created_at  DATETIME  DEFAULT  UTC_TIMESTAMP()  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(id)  REFERENCES  parent  (id)\n) \n```", "```py\nimport enum\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nCREATE  TYPE  status  AS  ENUM  ('PENDING',  'RECEIVED',  'COMPLETED')\n\nCREATE  TABLE  some_table  (\n  id  SERIAL  NOT  NULL,\n  status  status  NOT  NULL,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum),\n        typing.Literal: sqlalchemy.Enum(enum.Enum),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\"),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status] = mapped_column(\n        sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\")\n    )\n```", "```py\nimport enum\nimport typing\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum, native_enum=False),\n        typing.Literal: sqlalchemy.Enum(enum.Enum, native_enum=False),\n    }\n```", "```py\nimport enum\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)\n    }\n```", "```py\nfrom enum import Enum\nimport sqlalchemy as sa\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    metadata = sa.MetaData(schema=\"my_schema\")\n    type_annotation_map = {Enum: sa.Enum(Enum, inherit_schema=True)}\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy import JSON\nfrom sqlalchemy.orm import DeclarativeBase\n\nmy_literal = Literal[0, 1, True, False, \"true\", \"false\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {my_literal: JSON}\n```", "```py\n# access the Table\nuser_table = User.__table__\n```", "```py\nfrom sqlalchemy import inspect\n\nuser_table = inspect(User).local_table\n```", "```py\nengine = create_engine(\"sqlite://\")\n\nBase.metadata.create_all(engine)\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = (\n        ForeignKeyConstraint([\"id\"], [\"remote_table.id\"]),\n        UniqueConstraint(\"foo\"),\n    )\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = (\n        ForeignKeyConstraint([\"id\"], [\"remote_table.id\"]),\n        UniqueConstraint(\"foo\"),\n        {\"autoload\": True},\n    )\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = {\"schema\": \"some_schema\"}\n```", "```py\nfrom sqlalchemy import MetaData\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata_obj = MetaData(schema=\"some_schema\")\n\nclass Base(DeclarativeBase):\n    metadata = metadata_obj\n\nclass MyClass(Base):\n    # will use \"some_schema\" by default\n    __tablename__ = \"sometable\"\n```", "```py\n    class User(Base):\n        __tablename__ = \"user\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        name: Mapped[str]\n        bio: Mapped[str] = mapped_column(Text, deferred=True)\n    ```", "```py\n    class User(Base):\n        __tablename__ = \"user\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        important_identifier: Mapped[str] = mapped_column(active_history=True)\n    ```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(\"user_id\", primary_key=True)\n    name: Mapped[str] = mapped_column(\"user_name\")\n```", "```py\n>>> from sqlalchemy import select\n>>> print(select(User.id, User.name).where(User.name == \"x\"))\nSELECT  \"user\".user_id,  \"user\".user_name\nFROM  \"user\"\nWHERE  \"user\".user_name  =  :user_name_1 \n```", "```py\nMyClass.some_new_column = mapped_column(String)\n```", "```py\nMyClass.some_new_column = Column(String)\n```", "```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n# construct a Table directly.  The Base.metadata collection is\n# usually a good choice for MetaData but any MetaData\n# collection may be used.\n\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String),\n    Column(\"fullname\", String),\n    Column(\"nickname\", String),\n)\n\n# construct the User class using this table.\nclass User(Base):\n    __table__ = user_table\n```", "```py\nclass User(Base):\n    __table__ = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"fullname\", String),\n        Column(\"nickname\", String),\n    )\n```", "```py\nclass Person(Base):\n    __table__ = Table(\n        \"person\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"type\", String(50)),\n    )\n\n    __mapper_args__ = {\n        \"polymorphic_on\": __table__.c.type,\n        \"polymorhpic_identity\": \"person\",\n    }\n```", "```py\nfrom sqlalchemy import func, select\n\nsubq = (\n    select(\n        func.count(orders.c.id).label(\"order_count\"),\n        func.max(orders.c.price).label(\"highest_order\"),\n        orders.c.customer_id,\n    )\n    .group_by(orders.c.customer_id)\n    .subquery()\n)\n\ncustomer_select = (\n    select(customers, subq)\n    .join_from(customers, subq, customers.c.id == subq.c.customer_id)\n    .subquery()\n)\n\nclass Customer(Base):\n    __table__ = customer_select\n```", "```py\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"user_id\", Integer, primary_key=True),\n    Column(\"user_name\", String),\n)\n\nclass User(Base):\n    __table__ = user_table\n\n    id = user_table.c.user_id\n    name = user_table.c.user_name\n```", "```py\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import Mapped\n\nclass User(Base):\n    __table__ = user_table\n\n    id: Mapped[int] = column_property(user_table.c.user_id)\n    name: Mapped[str] = column_property(user_table.c.user_name)\n```", "```py\n    from sqlalchemy.orm import deferred\n\n    user_table = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"bio\", Text),\n    )\n\n    class User(Base):\n        __table__ = user_table\n\n        bio = deferred(user_table.c.bio)\n    ```", "```py\n    from sqlalchemy.orm import deferred\n\n    user_table = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"important_identifier\", String),\n    )\n\n    class User(Base):\n        __table__ = user_table\n\n        important_identifier = column_property(\n            user_table.c.important_identifier, active_history=True\n        )\n    ```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyClass(Base):\n    __table__ = Table(\n        \"mytable\",\n        Base.metadata,\n        autoload_with=engine,\n    )\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\n\nclass Base(DeclarativeBase):\n    pass\n\nBase.metadata.reflect(engine)\n\nclass MyClass(Base):\n    __table__ = Base.metadata.tables[\"mytable\"]\n```", "```py\nfrom sqlalchemy.ext.declarative import DeferredReflection\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Reflected(DeferredReflection):\n    __abstract__ = True\n\nclass Foo(Reflected, Base):\n    __tablename__ = \"foo\"\n    bars = relationship(\"Bar\")\n\nclass Bar(Reflected, Base):\n    __tablename__ = \"bar\"\n\n    foo_id = mapped_column(Integer, ForeignKey(\"foo.id\"))\n```", "```py\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\nReflected.prepare(engine)\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n@event.listens_for(Base.metadata, \"column_reflect\")\ndef column_reflect(inspector, table, column_info):\n    # set column.key = \"attr_<lower_case_name>\"\n    column_info[\"key\"] = \"attr_%s\" % column_info[\"name\"].lower()\n```", "```py\nclass MyClass(Base):\n    __table__ = Table(\"some_table\", Base.metadata, autoload_with=some_engine)\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata = MetaData()\ngroup_users = Table(\n    \"group_users\",\n    metadata,\n    Column(\"user_id\", String(40), nullable=False),\n    Column(\"group_id\", String(40), nullable=False),\n    UniqueConstraint(\"user_id\", \"group_id\"),\n)\n\nclass Base(DeclarativeBase):\n    pass\n\nclass GroupUsers(Base):\n    __table__ = group_users\n    __mapper_args__ = {\"primary_key\": [group_users.c.user_id, group_users.c.group_id]}\n```", "```py\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\"include_properties\": [\"user_id\", \"user_name\"]}\n```", "```py\nclass Address(Base):\n    __table__ = address_table\n    __mapper_args__ = {\"exclude_properties\": [\"street\", \"city\", \"state\", \"zip\"]}\n```", "```py\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\n        \"include_properties\": [user_table.c.user_id, user_table.c.user_name]\n    }\n```", "```py\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    fullname = mapped_column(String)\n    nickname = mapped_column(String(30))\n```", "```py\n# equivalent Table object produced\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String()),\n    Column(\"nickname\", String(30)),\n)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(30))\n```", "```py\n    from typing import Any\n    from typing import Dict\n    from typing import Type\n\n    import datetime\n    import decimal\n    import uuid\n\n    from sqlalchemy import types\n\n    # default type mapping, deriving the type for mapped_column()\n    # from a Mapped[] annotation\n    type_map: Dict[Type[Any], TypeEngine[Any]] = {\n        bool: types.Boolean(),\n        bytes: types.LargeBinary(),\n        datetime.date: types.Date(),\n        datetime.datetime: types.DateTime(),\n        datetime.time: types.Time(),\n        datetime.timedelta: types.Interval(),\n        decimal.Decimal: types.Numeric(),\n        float: types.Float(),\n        int: types.Integer(),\n        str: types.String(),\n        uuid.UUID: types.Uuid(),\n    }\n    ```", "```py\n    from typing import Optional\n\n    from sqlalchemy.orm import DeclarativeBase\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import mapped_column\n\n    class Base(DeclarativeBase):\n        pass\n\n    class SomeClass(Base):\n        __tablename__ = \"some_table\"\n\n        # primary_key=True, therefore will be NOT NULL\n        id: Mapped[int] = mapped_column(primary_key=True)\n\n        # not Optional[], therefore will be NOT NULL\n        data: Mapped[str]\n\n        # Optional[], therefore will be NULL\n        additional_info: Mapped[Optional[str]]\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NOT NULL, but can be None in Python\n        data: Mapped[Optional[str]] = mapped_column(nullable=False)\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NULL, but type checker will not expect\n        # the attribute to be None\n        data: Mapped[str] = mapped_column(nullable=True)\n    ```", "```py\nimport datetime\n\nfrom sqlalchemy import BIGINT, Integer, NVARCHAR, String, TIMESTAMP\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped, mapped_column, registry\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        int: BIGINT,\n        datetime.datetime: TIMESTAMP(timezone=True),\n        str: String().with_variant(NVARCHAR, \"mssql\"),\n    }\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    date: Mapped[datetime.datetime]\n    status: Mapped[str]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> from sqlalchemy.dialects import mssql, postgresql\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=mssql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGINT  NOT  NULL  IDENTITY,\n  date  TIMESTAMP  NOT  NULL,\n  status  NVARCHAR(max)  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=postgresql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGSERIAL  NOT  NULL,\n  date  TIMESTAMP  WITH  TIME  ZONE  NOT  NULL,\n  status  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom decimal import Decimal\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import Numeric\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nstr_30 = Annotated[str, 30]\nstr_50 = Annotated[str, 50]\nnum_12_4 = Annotated[Decimal, 12]\nnum_6_2 = Annotated[Decimal, 6]\n\nclass Base(DeclarativeBase):\n    registry = registry(\n        type_annotation_map={\n            str_30: String(30),\n            str_50: String(50),\n            num_12_4: Numeric(12, 4),\n            num_6_2: Numeric(6, 2),\n        }\n    )\n```", "```py\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    short_name: Mapped[str_30] = mapped_column(primary_key=True)\n    long_name: Mapped[str_50]\n    num_value: Mapped[num_12_4]\n    short_num_value: Mapped[num_6_2]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  short_name  VARCHAR(30)  NOT  NULL,\n  long_name  VARCHAR(50)  NOT  NULL,\n  num_value  NUMERIC(12,  4)  NOT  NULL,\n  short_num_value  NUMERIC(6,  2)  NOT  NULL,\n  PRIMARY  KEY  (short_name)\n) \n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import func\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import mapped_column\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\nrequired_name = Annotated[str, mapped_column(String(30), nullable=False)]\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[intpk]\n    name: Mapped[required_name]\n    created_at: Mapped[timestamp]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30)  NOT  NULL,\n  created_at  DATETIME  DEFAULT  CURRENT_TIMESTAMP  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom typing_extensions import Annotated\n\nimport datetime\nfrom typing import Optional\n\nfrom sqlalchemy.orm import DeclarativeBase\n\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    # ...\n\n    # pep-484 type will be Optional, but column will be\n    # NOT NULL\n    created_at: Mapped[Optional[timestamp]]\n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.schema import CreateTable\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[intpk]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    # add ForeignKey to mapped_column(Integer, primary_key=True)\n    id: Mapped[intpk] = mapped_column(ForeignKey(\"parent.id\"))\n\n    # change server default from CURRENT_TIMESTAMP to UTC_TIMESTAMP\n    created_at: Mapped[timestamp] = mapped_column(server_default=func.UTC_TIMESTAMP())\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  created_at  DATETIME  DEFAULT  UTC_TIMESTAMP()  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(id)  REFERENCES  parent  (id)\n) \n```", "```py\nimport enum\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nCREATE  TYPE  status  AS  ENUM  ('PENDING',  'RECEIVED',  'COMPLETED')\n\nCREATE  TABLE  some_table  (\n  id  SERIAL  NOT  NULL,\n  status  status  NOT  NULL,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum),\n        typing.Literal: sqlalchemy.Enum(enum.Enum),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\"),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status] = mapped_column(\n        sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\")\n    )\n```", "```py\nimport enum\nimport typing\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum, native_enum=False),\n        typing.Literal: sqlalchemy.Enum(enum.Enum, native_enum=False),\n    }\n```", "```py\nimport enum\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)\n    }\n```", "```py\nfrom enum import Enum\nimport sqlalchemy as sa\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    metadata = sa.MetaData(schema=\"my_schema\")\n    type_annotation_map = {Enum: sa.Enum(Enum, inherit_schema=True)}\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy import JSON\nfrom sqlalchemy.orm import DeclarativeBase\n\nmy_literal = Literal[0, 1, True, False, \"true\", \"false\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {my_literal: JSON}\n```", "```py\n# access the Table\nuser_table = User.__table__\n```", "```py\nfrom sqlalchemy import inspect\n\nuser_table = inspect(User).local_table\n```", "```py\nengine = create_engine(\"sqlite://\")\n\nBase.metadata.create_all(engine)\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = (\n        ForeignKeyConstraint([\"id\"], [\"remote_table.id\"]),\n        UniqueConstraint(\"foo\"),\n    )\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = (\n        ForeignKeyConstraint([\"id\"], [\"remote_table.id\"]),\n        UniqueConstraint(\"foo\"),\n        {\"autoload\": True},\n    )\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = {\"schema\": \"some_schema\"}\n```", "```py\nfrom sqlalchemy import MetaData\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata_obj = MetaData(schema=\"some_schema\")\n\nclass Base(DeclarativeBase):\n    metadata = metadata_obj\n\nclass MyClass(Base):\n    # will use \"some_schema\" by default\n    __tablename__ = \"sometable\"\n```", "```py\n    class User(Base):\n        __tablename__ = \"user\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        name: Mapped[str]\n        bio: Mapped[str] = mapped_column(Text, deferred=True)\n    ```", "```py\n    class User(Base):\n        __tablename__ = \"user\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        important_identifier: Mapped[str] = mapped_column(active_history=True)\n    ```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(\"user_id\", primary_key=True)\n    name: Mapped[str] = mapped_column(\"user_name\")\n```", "```py\n>>> from sqlalchemy import select\n>>> print(select(User.id, User.name).where(User.name == \"x\"))\nSELECT  \"user\".user_id,  \"user\".user_name\nFROM  \"user\"\nWHERE  \"user\".user_name  =  :user_name_1 \n```", "```py\nMyClass.some_new_column = mapped_column(String)\n```", "```py\nMyClass.some_new_column = Column(String)\n```", "```py\nfrom typing import Optional\n\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(30))\n```", "```py\n    from typing import Any\n    from typing import Dict\n    from typing import Type\n\n    import datetime\n    import decimal\n    import uuid\n\n    from sqlalchemy import types\n\n    # default type mapping, deriving the type for mapped_column()\n    # from a Mapped[] annotation\n    type_map: Dict[Type[Any], TypeEngine[Any]] = {\n        bool: types.Boolean(),\n        bytes: types.LargeBinary(),\n        datetime.date: types.Date(),\n        datetime.datetime: types.DateTime(),\n        datetime.time: types.Time(),\n        datetime.timedelta: types.Interval(),\n        decimal.Decimal: types.Numeric(),\n        float: types.Float(),\n        int: types.Integer(),\n        str: types.String(),\n        uuid.UUID: types.Uuid(),\n    }\n    ```", "```py\n    from typing import Optional\n\n    from sqlalchemy.orm import DeclarativeBase\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import mapped_column\n\n    class Base(DeclarativeBase):\n        pass\n\n    class SomeClass(Base):\n        __tablename__ = \"some_table\"\n\n        # primary_key=True, therefore will be NOT NULL\n        id: Mapped[int] = mapped_column(primary_key=True)\n\n        # not Optional[], therefore will be NOT NULL\n        data: Mapped[str]\n\n        # Optional[], therefore will be NULL\n        additional_info: Mapped[Optional[str]]\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NOT NULL, but can be None in Python\n        data: Mapped[Optional[str]] = mapped_column(nullable=False)\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NULL, but type checker will not expect\n        # the attribute to be None\n        data: Mapped[str] = mapped_column(nullable=True)\n    ```", "```py\nimport datetime\n\nfrom sqlalchemy import BIGINT, Integer, NVARCHAR, String, TIMESTAMP\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped, mapped_column, registry\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        int: BIGINT,\n        datetime.datetime: TIMESTAMP(timezone=True),\n        str: String().with_variant(NVARCHAR, \"mssql\"),\n    }\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    date: Mapped[datetime.datetime]\n    status: Mapped[str]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> from sqlalchemy.dialects import mssql, postgresql\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=mssql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGINT  NOT  NULL  IDENTITY,\n  date  TIMESTAMP  NOT  NULL,\n  status  NVARCHAR(max)  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=postgresql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGSERIAL  NOT  NULL,\n  date  TIMESTAMP  WITH  TIME  ZONE  NOT  NULL,\n  status  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom decimal import Decimal\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import Numeric\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nstr_30 = Annotated[str, 30]\nstr_50 = Annotated[str, 50]\nnum_12_4 = Annotated[Decimal, 12]\nnum_6_2 = Annotated[Decimal, 6]\n\nclass Base(DeclarativeBase):\n    registry = registry(\n        type_annotation_map={\n            str_30: String(30),\n            str_50: String(50),\n            num_12_4: Numeric(12, 4),\n            num_6_2: Numeric(6, 2),\n        }\n    )\n```", "```py\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    short_name: Mapped[str_30] = mapped_column(primary_key=True)\n    long_name: Mapped[str_50]\n    num_value: Mapped[num_12_4]\n    short_num_value: Mapped[num_6_2]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  short_name  VARCHAR(30)  NOT  NULL,\n  long_name  VARCHAR(50)  NOT  NULL,\n  num_value  NUMERIC(12,  4)  NOT  NULL,\n  short_num_value  NUMERIC(6,  2)  NOT  NULL,\n  PRIMARY  KEY  (short_name)\n) \n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import func\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import mapped_column\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\nrequired_name = Annotated[str, mapped_column(String(30), nullable=False)]\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[intpk]\n    name: Mapped[required_name]\n    created_at: Mapped[timestamp]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30)  NOT  NULL,\n  created_at  DATETIME  DEFAULT  CURRENT_TIMESTAMP  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom typing_extensions import Annotated\n\nimport datetime\nfrom typing import Optional\n\nfrom sqlalchemy.orm import DeclarativeBase\n\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    # ...\n\n    # pep-484 type will be Optional, but column will be\n    # NOT NULL\n    created_at: Mapped[Optional[timestamp]]\n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.schema import CreateTable\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[intpk]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    # add ForeignKey to mapped_column(Integer, primary_key=True)\n    id: Mapped[intpk] = mapped_column(ForeignKey(\"parent.id\"))\n\n    # change server default from CURRENT_TIMESTAMP to UTC_TIMESTAMP\n    created_at: Mapped[timestamp] = mapped_column(server_default=func.UTC_TIMESTAMP())\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  created_at  DATETIME  DEFAULT  UTC_TIMESTAMP()  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(id)  REFERENCES  parent  (id)\n) \n```", "```py\nimport enum\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nCREATE  TYPE  status  AS  ENUM  ('PENDING',  'RECEIVED',  'COMPLETED')\n\nCREATE  TABLE  some_table  (\n  id  SERIAL  NOT  NULL,\n  status  status  NOT  NULL,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum),\n        typing.Literal: sqlalchemy.Enum(enum.Enum),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\"),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status] = mapped_column(\n        sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\")\n    )\n```", "```py\nimport enum\nimport typing\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum, native_enum=False),\n        typing.Literal: sqlalchemy.Enum(enum.Enum, native_enum=False),\n    }\n```", "```py\nimport enum\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)\n    }\n```", "```py\nfrom enum import Enum\nimport sqlalchemy as sa\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    metadata = sa.MetaData(schema=\"my_schema\")\n    type_annotation_map = {Enum: sa.Enum(Enum, inherit_schema=True)}\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy import JSON\nfrom sqlalchemy.orm import DeclarativeBase\n\nmy_literal = Literal[0, 1, True, False, \"true\", \"false\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {my_literal: JSON}\n```", "```py\n    from typing import Any\n    from typing import Dict\n    from typing import Type\n\n    import datetime\n    import decimal\n    import uuid\n\n    from sqlalchemy import types\n\n    # default type mapping, deriving the type for mapped_column()\n    # from a Mapped[] annotation\n    type_map: Dict[Type[Any], TypeEngine[Any]] = {\n        bool: types.Boolean(),\n        bytes: types.LargeBinary(),\n        datetime.date: types.Date(),\n        datetime.datetime: types.DateTime(),\n        datetime.time: types.Time(),\n        datetime.timedelta: types.Interval(),\n        decimal.Decimal: types.Numeric(),\n        float: types.Float(),\n        int: types.Integer(),\n        str: types.String(),\n        uuid.UUID: types.Uuid(),\n    }\n    ```", "```py\n    from typing import Optional\n\n    from sqlalchemy.orm import DeclarativeBase\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import mapped_column\n\n    class Base(DeclarativeBase):\n        pass\n\n    class SomeClass(Base):\n        __tablename__ = \"some_table\"\n\n        # primary_key=True, therefore will be NOT NULL\n        id: Mapped[int] = mapped_column(primary_key=True)\n\n        # not Optional[], therefore will be NOT NULL\n        data: Mapped[str]\n\n        # Optional[], therefore will be NULL\n        additional_info: Mapped[Optional[str]]\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NOT NULL, but can be None in Python\n        data: Mapped[Optional[str]] = mapped_column(nullable=False)\n    ```", "```py\n    class SomeClass(Base):\n        # ...\n\n        # will be String() NULL, but type checker will not expect\n        # the attribute to be None\n        data: Mapped[str] = mapped_column(nullable=True)\n    ```", "```py\nimport datetime\n\nfrom sqlalchemy import BIGINT, Integer, NVARCHAR, String, TIMESTAMP\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped, mapped_column, registry\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        int: BIGINT,\n        datetime.datetime: TIMESTAMP(timezone=True),\n        str: String().with_variant(NVARCHAR, \"mssql\"),\n    }\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    date: Mapped[datetime.datetime]\n    status: Mapped[str]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> from sqlalchemy.dialects import mssql, postgresql\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=mssql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGINT  NOT  NULL  IDENTITY,\n  date  TIMESTAMP  NOT  NULL,\n  status  NVARCHAR(max)  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\n>>> print(CreateTable(SomeClass.__table__).compile(dialect=postgresql.dialect()))\nCREATE  TABLE  some_table  (\n  id  BIGSERIAL  NOT  NULL,\n  date  TIMESTAMP  WITH  TIME  ZONE  NOT  NULL,\n  status  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom decimal import Decimal\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import Numeric\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nstr_30 = Annotated[str, 30]\nstr_50 = Annotated[str, 50]\nnum_12_4 = Annotated[Decimal, 12]\nnum_6_2 = Annotated[Decimal, 6]\n\nclass Base(DeclarativeBase):\n    registry = registry(\n        type_annotation_map={\n            str_30: String(30),\n            str_50: String(50),\n            num_12_4: Numeric(12, 4),\n            num_6_2: Numeric(6, 2),\n        }\n    )\n```", "```py\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    short_name: Mapped[str_30] = mapped_column(primary_key=True)\n    long_name: Mapped[str_50]\n    num_value: Mapped[num_12_4]\n    short_num_value: Mapped[num_6_2]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  short_name  VARCHAR(30)  NOT  NULL,\n  long_name  VARCHAR(50)  NOT  NULL,\n  num_value  NUMERIC(12,  4)  NOT  NULL,\n  short_num_value  NUMERIC(6,  2)  NOT  NULL,\n  PRIMARY  KEY  (short_name)\n) \n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import func\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import mapped_column\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\nrequired_name = Annotated[str, mapped_column(String(30), nullable=False)]\n```", "```py\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[intpk]\n    name: Mapped[required_name]\n    created_at: Mapped[timestamp]\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30)  NOT  NULL,\n  created_at  DATETIME  DEFAULT  CURRENT_TIMESTAMP  NOT  NULL,\n  PRIMARY  KEY  (id)\n) \n```", "```py\nfrom typing_extensions import Annotated\n\nimport datetime\nfrom typing import Optional\n\nfrom sqlalchemy.orm import DeclarativeBase\n\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    # ...\n\n    # pep-484 type will be Optional, but column will be\n    # NOT NULL\n    created_at: Mapped[Optional[timestamp]]\n```", "```py\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.schema import CreateTable\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[intpk]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    # add ForeignKey to mapped_column(Integer, primary_key=True)\n    id: Mapped[intpk] = mapped_column(ForeignKey(\"parent.id\"))\n\n    # change server default from CURRENT_TIMESTAMP to UTC_TIMESTAMP\n    created_at: Mapped[timestamp] = mapped_column(server_default=func.UTC_TIMESTAMP())\n```", "```py\n>>> from sqlalchemy.schema import CreateTable\n>>> print(CreateTable(SomeClass.__table__))\nCREATE  TABLE  some_table  (\n  id  INTEGER  NOT  NULL,\n  created_at  DATETIME  DEFAULT  UTC_TIMESTAMP()  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(id)  REFERENCES  parent  (id)\n) \n```", "```py\nimport enum\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nCREATE  TYPE  status  AS  ENUM  ('PENDING',  'RECEIVED',  'COMPLETED')\n\nCREATE  TABLE  some_table  (\n  id  SERIAL  NOT  NULL,\n  status  status  NOT  NULL,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum),\n        typing.Literal: sqlalchemy.Enum(enum.Enum),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\"),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status] = mapped_column(\n        sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\")\n    )\n```", "```py\nimport enum\nimport typing\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum, native_enum=False),\n        typing.Literal: sqlalchemy.Enum(enum.Enum, native_enum=False),\n    }\n```", "```py\nimport enum\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)\n    }\n```", "```py\nfrom enum import Enum\nimport sqlalchemy as sa\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    metadata = sa.MetaData(schema=\"my_schema\")\n    type_annotation_map = {Enum: sa.Enum(Enum, inherit_schema=True)}\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy import JSON\nfrom sqlalchemy.orm import DeclarativeBase\n\nmy_literal = Literal[0, 1, True, False, \"true\", \"false\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {my_literal: JSON}\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\"),\n    }\n```", "```py\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status] = mapped_column(\n        sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\")\n    )\n```", "```py\nimport enum\nimport typing\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum, native_enum=False),\n        typing.Literal: sqlalchemy.Enum(enum.Enum, native_enum=False),\n    }\n```", "```py\nimport enum\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)\n    }\n```", "```py\nfrom enum import Enum\nimport sqlalchemy as sa\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    metadata = sa.MetaData(schema=\"my_schema\")\n    type_annotation_map = {Enum: sa.Enum(Enum, inherit_schema=True)}\n```", "```py\nfrom typing import Literal\n\nfrom sqlalchemy import JSON\nfrom sqlalchemy.orm import DeclarativeBase\n\nmy_literal = Literal[0, 1, True, False, \"true\", \"false\"]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {my_literal: JSON}\n```", "```py\n# access the Table\nuser_table = User.__table__\n```", "```py\nfrom sqlalchemy import inspect\n\nuser_table = inspect(User).local_table\n```", "```py\nengine = create_engine(\"sqlite://\")\n\nBase.metadata.create_all(engine)\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = (\n        ForeignKeyConstraint([\"id\"], [\"remote_table.id\"]),\n        UniqueConstraint(\"foo\"),\n    )\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = (\n        ForeignKeyConstraint([\"id\"], [\"remote_table.id\"]),\n        UniqueConstraint(\"foo\"),\n        {\"autoload\": True},\n    )\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyClass(Base):\n    __tablename__ = \"sometable\"\n    __table_args__ = {\"schema\": \"some_schema\"}\n```", "```py\nfrom sqlalchemy import MetaData\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata_obj = MetaData(schema=\"some_schema\")\n\nclass Base(DeclarativeBase):\n    metadata = metadata_obj\n\nclass MyClass(Base):\n    # will use \"some_schema\" by default\n    __tablename__ = \"sometable\"\n```", "```py\n    class User(Base):\n        __tablename__ = \"user\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        name: Mapped[str]\n        bio: Mapped[str] = mapped_column(Text, deferred=True)\n    ```", "```py\n    class User(Base):\n        __tablename__ = \"user\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n        important_identifier: Mapped[str] = mapped_column(active_history=True)\n    ```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(\"user_id\", primary_key=True)\n    name: Mapped[str] = mapped_column(\"user_name\")\n```", "```py\n>>> from sqlalchemy import select\n>>> print(select(User.id, User.name).where(User.name == \"x\"))\nSELECT  \"user\".user_id,  \"user\".user_name\nFROM  \"user\"\nWHERE  \"user\".user_name  =  :user_name_1 \n```", "```py\nMyClass.some_new_column = mapped_column(String)\n```", "```py\nMyClass.some_new_column = Column(String)\n```", "```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n# construct a Table directly.  The Base.metadata collection is\n# usually a good choice for MetaData but any MetaData\n# collection may be used.\n\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String),\n    Column(\"fullname\", String),\n    Column(\"nickname\", String),\n)\n\n# construct the User class using this table.\nclass User(Base):\n    __table__ = user_table\n```", "```py\nclass User(Base):\n    __table__ = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"fullname\", String),\n        Column(\"nickname\", String),\n    )\n```", "```py\nclass Person(Base):\n    __table__ = Table(\n        \"person\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"type\", String(50)),\n    )\n\n    __mapper_args__ = {\n        \"polymorphic_on\": __table__.c.type,\n        \"polymorhpic_identity\": \"person\",\n    }\n```", "```py\nfrom sqlalchemy import func, select\n\nsubq = (\n    select(\n        func.count(orders.c.id).label(\"order_count\"),\n        func.max(orders.c.price).label(\"highest_order\"),\n        orders.c.customer_id,\n    )\n    .group_by(orders.c.customer_id)\n    .subquery()\n)\n\ncustomer_select = (\n    select(customers, subq)\n    .join_from(customers, subq, customers.c.id == subq.c.customer_id)\n    .subquery()\n)\n\nclass Customer(Base):\n    __table__ = customer_select\n```", "```py\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"user_id\", Integer, primary_key=True),\n    Column(\"user_name\", String),\n)\n\nclass User(Base):\n    __table__ = user_table\n\n    id = user_table.c.user_id\n    name = user_table.c.user_name\n```", "```py\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import Mapped\n\nclass User(Base):\n    __table__ = user_table\n\n    id: Mapped[int] = column_property(user_table.c.user_id)\n    name: Mapped[str] = column_property(user_table.c.user_name)\n```", "```py\n    from sqlalchemy.orm import deferred\n\n    user_table = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"bio\", Text),\n    )\n\n    class User(Base):\n        __table__ = user_table\n\n        bio = deferred(user_table.c.bio)\n    ```", "```py\n    from sqlalchemy.orm import deferred\n\n    user_table = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"important_identifier\", String),\n    )\n\n    class User(Base):\n        __table__ = user_table\n\n        important_identifier = column_property(\n            user_table.c.important_identifier, active_history=True\n        )\n    ```", "```py\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"user_id\", Integer, primary_key=True),\n    Column(\"user_name\", String),\n)\n\nclass User(Base):\n    __table__ = user_table\n\n    id = user_table.c.user_id\n    name = user_table.c.user_name\n```", "```py\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import Mapped\n\nclass User(Base):\n    __table__ = user_table\n\n    id: Mapped[int] = column_property(user_table.c.user_id)\n    name: Mapped[str] = column_property(user_table.c.user_name)\n```", "```py\n    from sqlalchemy.orm import deferred\n\n    user_table = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"bio\", Text),\n    )\n\n    class User(Base):\n        __table__ = user_table\n\n        bio = deferred(user_table.c.bio)\n    ```", "```py\n    from sqlalchemy.orm import deferred\n\n    user_table = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"important_identifier\", String),\n    )\n\n    class User(Base):\n        __table__ = user_table\n\n        important_identifier = column_property(\n            user_table.c.important_identifier, active_history=True\n        )\n    ```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\n\nclass Base(DeclarativeBase):\n    pass\n\nclass MyClass(Base):\n    __table__ = Table(\n        \"mytable\",\n        Base.metadata,\n        autoload_with=engine,\n    )\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\n\nclass Base(DeclarativeBase):\n    pass\n\nBase.metadata.reflect(engine)\n\nclass MyClass(Base):\n    __table__ = Base.metadata.tables[\"mytable\"]\n```", "```py\nfrom sqlalchemy.ext.declarative import DeferredReflection\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Reflected(DeferredReflection):\n    __abstract__ = True\n\nclass Foo(Reflected, Base):\n    __tablename__ = \"foo\"\n    bars = relationship(\"Bar\")\n\nclass Bar(Reflected, Base):\n    __tablename__ = \"bar\"\n\n    foo_id = mapped_column(Integer, ForeignKey(\"foo.id\"))\n```", "```py\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\nReflected.prepare(engine)\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n@event.listens_for(Base.metadata, \"column_reflect\")\ndef column_reflect(inspector, table, column_info):\n    # set column.key = \"attr_<lower_case_name>\"\n    column_info[\"key\"] = \"attr_%s\" % column_info[\"name\"].lower()\n```", "```py\nclass MyClass(Base):\n    __table__ = Table(\"some_table\", Base.metadata, autoload_with=some_engine)\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata = MetaData()\ngroup_users = Table(\n    \"group_users\",\n    metadata,\n    Column(\"user_id\", String(40), nullable=False),\n    Column(\"group_id\", String(40), nullable=False),\n    UniqueConstraint(\"user_id\", \"group_id\"),\n)\n\nclass Base(DeclarativeBase):\n    pass\n\nclass GroupUsers(Base):\n    __table__ = group_users\n    __mapper_args__ = {\"primary_key\": [group_users.c.user_id, group_users.c.group_id]}\n```", "```py\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\"include_properties\": [\"user_id\", \"user_name\"]}\n```", "```py\nclass Address(Base):\n    __table__ = address_table\n    __mapper_args__ = {\"exclude_properties\": [\"street\", \"city\", \"state\", \"zip\"]}\n```", "```py\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\n        \"include_properties\": [user_table.c.user_id, user_table.c.user_name]\n    }\n```", "```py\nfrom sqlalchemy.ext.declarative import DeferredReflection\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Reflected(DeferredReflection):\n    __abstract__ = True\n\nclass Foo(Reflected, Base):\n    __tablename__ = \"foo\"\n    bars = relationship(\"Bar\")\n\nclass Bar(Reflected, Base):\n    __tablename__ = \"bar\"\n\n    foo_id = mapped_column(Integer, ForeignKey(\"foo.id\"))\n```", "```py\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\nReflected.prepare(engine)\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n@event.listens_for(Base.metadata, \"column_reflect\")\ndef column_reflect(inspector, table, column_info):\n    # set column.key = \"attr_<lower_case_name>\"\n    column_info[\"key\"] = \"attr_%s\" % column_info[\"name\"].lower()\n```", "```py\nclass MyClass(Base):\n    __table__ = Table(\"some_table\", Base.metadata, autoload_with=some_engine)\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata = MetaData()\ngroup_users = Table(\n    \"group_users\",\n    metadata,\n    Column(\"user_id\", String(40), nullable=False),\n    Column(\"group_id\", String(40), nullable=False),\n    UniqueConstraint(\"user_id\", \"group_id\"),\n)\n\nclass Base(DeclarativeBase):\n    pass\n\nclass GroupUsers(Base):\n    __table__ = group_users\n    __mapper_args__ = {\"primary_key\": [group_users.c.user_id, group_users.c.group_id]}\n```", "```py\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\"include_properties\": [\"user_id\", \"user_name\"]}\n```", "```py\nclass Address(Base):\n    __table__ = address_table\n    __mapper_args__ = {\"exclude_properties\": [\"street\", \"city\", \"state\", \"zip\"]}\n```", "```py\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\n        \"include_properties\": [user_table.c.user_id, user_table.c.user_name]\n    }\n```"]