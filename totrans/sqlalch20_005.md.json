["```py\n>>> from sqlalchemy import MetaData\n>>> metadata_obj = MetaData()\n```", "```py\n>>> from sqlalchemy import Table, Column, Integer, String\n>>> user_table = Table(\n...     \"user_account\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"name\", String(30)),\n...     Column(\"fullname\", String),\n... )\n```", "```py\n    >>> user_table.c.name\n    Column('name', String(length=30), table=<user_account>)\n\n    >>> user_table.c.keys()\n    ['id', 'name', 'fullname']\n    ```", "```py\n>>> user_table.primary_key\nPrimaryKeyConstraint(Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False))\n```", "```py\n>>> from sqlalchemy import ForeignKey\n>>> address_table = Table(\n...     \"address\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False),\n...     Column(\"email_address\", String, nullable=False),\n... )\n```", "```py\n>>> metadata_obj.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCREATE  TABLE  user_account  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30),\n  fullname  VARCHAR,\n  PRIMARY  KEY  (id)\n)\n...\nCREATE  TABLE  address  (\n  id  INTEGER  NOT  NULL,\n  user_id  INTEGER  NOT  NULL,\n  email_address  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(user_id)  REFERENCES  user_account  (id)\n)\n...\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> class Base(DeclarativeBase):\n...     pass\n```", "```py\n>>> Base.metadata\nMetaData()\n```", "```py\n>>> Base.registry\n<sqlalchemy.orm.decl_api.registry object at 0x...>\n```", "```py\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[User] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```", "```py\n    >>> sandy = User(name=\"sandy\", fullname=\"Sandy Cheeks\")\n    ```", "```py\n>>> Base.metadata.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCOMMIT \n```", "```py\n>>> some_table = Table(\"some_table\", metadata_obj, autoload_with=engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"some_table\")\n[raw  sql]  ()\nSELECT  sql  FROM  (SELECT  *  FROM  sqlite_master  UNION  ALL  SELECT  *  FROM  sqlite_temp_master)  WHERE  name  =  ?  AND  type  in  ('table',  'view')\n[raw  sql]  ('some_table',)\nPRAGMA  main.foreign_key_list(\"some_table\")\n...\nPRAGMA  main.index_list(\"some_table\")\n...\nROLLBACK \n```", "```py\n>>> some_table\nTable('some_table', MetaData(),\n Column('x', INTEGER(), table=<some_table>),\n Column('y', INTEGER(), table=<some_table>),\n schema=None)\n```", "```py\n>>> from sqlalchemy import MetaData\n>>> metadata_obj = MetaData()\n```", "```py\n>>> from sqlalchemy import Table, Column, Integer, String\n>>> user_table = Table(\n...     \"user_account\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"name\", String(30)),\n...     Column(\"fullname\", String),\n... )\n```", "```py\n    >>> user_table.c.name\n    Column('name', String(length=30), table=<user_account>)\n\n    >>> user_table.c.keys()\n    ['id', 'name', 'fullname']\n    ```", "```py\n>>> user_table.primary_key\nPrimaryKeyConstraint(Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False))\n```", "```py\n>>> from sqlalchemy import ForeignKey\n>>> address_table = Table(\n...     \"address\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False),\n...     Column(\"email_address\", String, nullable=False),\n... )\n```", "```py\n>>> metadata_obj.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCREATE  TABLE  user_account  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30),\n  fullname  VARCHAR,\n  PRIMARY  KEY  (id)\n)\n...\nCREATE  TABLE  address  (\n  id  INTEGER  NOT  NULL,\n  user_id  INTEGER  NOT  NULL,\n  email_address  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(user_id)  REFERENCES  user_account  (id)\n)\n...\nCOMMIT \n```", "```py\n    >>> user_table.c.name\n    Column('name', String(length=30), table=<user_account>)\n\n    >>> user_table.c.keys()\n    ['id', 'name', 'fullname']\n    ```", "```py\n>>> user_table.primary_key\nPrimaryKeyConstraint(Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False))\n```", "```py\n>>> from sqlalchemy import ForeignKey\n>>> address_table = Table(\n...     \"address\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False),\n...     Column(\"email_address\", String, nullable=False),\n... )\n```", "```py\n>>> metadata_obj.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCREATE  TABLE  user_account  (\n  id  INTEGER  NOT  NULL,\n  name  VARCHAR(30),\n  fullname  VARCHAR,\n  PRIMARY  KEY  (id)\n)\n...\nCREATE  TABLE  address  (\n  id  INTEGER  NOT  NULL,\n  user_id  INTEGER  NOT  NULL,\n  email_address  VARCHAR  NOT  NULL,\n  PRIMARY  KEY  (id),\n  FOREIGN  KEY(user_id)  REFERENCES  user_account  (id)\n)\n...\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> class Base(DeclarativeBase):\n...     pass\n```", "```py\n>>> Base.metadata\nMetaData()\n```", "```py\n>>> Base.registry\n<sqlalchemy.orm.decl_api.registry object at 0x...>\n```", "```py\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[User] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```", "```py\n    >>> sandy = User(name=\"sandy\", fullname=\"Sandy Cheeks\")\n    ```", "```py\n>>> Base.metadata.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCOMMIT \n```", "```py\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> class Base(DeclarativeBase):\n...     pass\n```", "```py\n>>> Base.metadata\nMetaData()\n```", "```py\n>>> Base.registry\n<sqlalchemy.orm.decl_api.registry object at 0x...>\n```", "```py\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[User] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```", "```py\n    >>> sandy = User(name=\"sandy\", fullname=\"Sandy Cheeks\")\n    ```", "```py\n>>> Base.metadata.create_all(engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"user_account\")\n...\nPRAGMA  main.table_...info(\"address\")\n...\nCOMMIT \n```", "```py\n>>> some_table = Table(\"some_table\", metadata_obj, autoload_with=engine)\nBEGIN  (implicit)\nPRAGMA  main.table_...info(\"some_table\")\n[raw  sql]  ()\nSELECT  sql  FROM  (SELECT  *  FROM  sqlite_master  UNION  ALL  SELECT  *  FROM  sqlite_temp_master)  WHERE  name  =  ?  AND  type  in  ('table',  'view')\n[raw  sql]  ('some_table',)\nPRAGMA  main.foreign_key_list(\"some_table\")\n...\nPRAGMA  main.index_list(\"some_table\")\n...\nROLLBACK \n```", "```py\n>>> some_table\nTable('some_table', MetaData(),\n Column('x', INTEGER(), table=<some_table>),\n Column('y', INTEGER(), table=<some_table>),\n schema=None)\n```"]