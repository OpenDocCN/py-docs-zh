- en: Pseudorandom numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪随机数
- en: 原文：[`jax.readthedocs.io/en/latest/random-numbers.html`](https://jax.readthedocs.io/en/latest/random-numbers.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/random-numbers.html`](https://jax.readthedocs.io/en/latest/random-numbers.html)
- en: In this section we focus on `jax.random` and pseudo random number generation
    (PRNG); that is, the process of algorithmically generating sequences of numbers
    whose properties approximate the properties of sequences of random numbers sampled
    from an appropriate distribution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点讨论 `jax.random` 和伪随机数生成（PRNG）；即，通过算法生成数列，其特性近似于从适当分布中抽样的随机数列的过程。
- en: PRNG-generated sequences are not truly random because they are actually determined
    by their initial value, which is typically referred to as the `seed`, and each
    step of random sampling is a deterministic function of some `state` that is carried
    over from a sample to the next.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PRNG 生成的序列并非真正随机，因为它们实际上由其初始值决定，通常称为 `seed`，并且每一步的随机抽样都是由从一个样本到下一个样本传递的 `state`
    的确定性函数决定。
- en: Pseudo random number generation is an essential component of any machine learning
    or scientific computing framework. Generally, JAX strives to be compatible with
    NumPy, but pseudo random number generation is a notable exception.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 伪随机数生成是任何机器学习或科学计算框架的重要组成部分。一般而言，JAX 力求与 NumPy 兼容，但伪随机数生成是一个显著的例外。
- en: To better understand the difference between the approaches taken by JAX and
    NumPy when it comes to random number generation we will discuss both approaches
    in this section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 JAX 和 NumPy 在随机数生成方法上的差异，我们将在本节中讨论两种方法。
- en: Random numbers in NumPy
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 中的随机数
- en: Pseudo random number generation is natively supported in NumPy by the [`numpy.random`](https://numpy.org/doc/stable/reference/random/index.html#module-numpy.random
    "(in NumPy v2.0)") module. In NumPy, pseudo random number generation is based
    on a global `state`, which can be set to a deterministic initial condition using
    [`numpy.random.seed()`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.seed.html#numpy.random.seed
    "(in NumPy v2.0)").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 中的伪随机数生成由 [`numpy.random`](https://numpy.org/doc/stable/reference/random/index.html#module-numpy.random
    "(在 NumPy v2.0 中)") 模块本地支持。在 NumPy 中，伪随机数生成基于全局 `state`，可以使用 [`numpy.random.seed()`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.seed.html#numpy.random.seed
    "(在 NumPy v2.0 中)") 将其设置为确定性初始条件。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can inspect the content of the state using the following command.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令检查状态的内容。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `state` is updated by each call to a random function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每次对随机函数调用都会更新 `state`：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'NumPy allows you to sample both individual numbers, or entire vectors of numbers
    in a single function call. For instance, you may sample a vector of 3 scalars
    from a uniform distribution by doing:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 允许您在单个函数调用中同时抽取单个数字或整个向量的数字。例如，您可以通过以下方式从均匀分布中抽取一个包含 3 个标量的向量：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'NumPy provides a *sequential equivalent guarantee*, meaning that sampling N
    numbers in a row individually or sampling a vector of N numbers results in the
    same pseudo-random sequences:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了*顺序等效保证*，这意味着连续抽取 N 个数字或一次抽样 N 个数字的向量将得到相同的伪随机序列：
- en: '[PRE9]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Random numbers in JAX
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX 中的随机数
- en: 'JAX’s random number generation differs from NumPy’s in important ways, because
    NumPy’s PRNG design makes it hard to simultaneously guarantee a number of desirable
    properties. Specifically, in JAX we want PRNG generation to be:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的随机数生成与 NumPy 的方式有重要的区别，因为 NumPy 的 PRNG 设计使得同时保证多种理想特性变得困难。具体而言，在 JAX 中，我们希望
    PRNG 生成是：
- en: reproducible,
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可复现的，
- en: parallelizable,
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可并行化，
- en: vectorisable.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可向量化。
- en: 'We will discuss why in the following. First, we will focus on the implications
    of a PRNG design based on a global state. Consider the code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来讨论原因。首先，我们将集中讨论基于全局状态的伪随机数生成设计的影响。考虑以下代码：
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The function `foo` sums two scalars sampled from a uniform distribution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `foo` 对从均匀分布中抽样的两个标量求和。
- en: 'The output of this code can only satisfy requirement #1 if we assume a predictable
    order of execution for `bar()` and `baz()`. This is not a problem in NumPy, which
    always evaluates code in the order defined by the Python interpreter. In JAX,
    however, this is more problematic: for efficient execution, we want the JIT compiler
    to be free to reorder, elide, and fuse various operations in the function we define.
    Further, when executing in multi-device environments, execution efficiency would
    be hampered by the need for each process to synchronize a global state.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们假设 `bar()` 和 `baz()` 的执行顺序是可预测的，那么此代码的输出只能满足要求 #1。在 NumPy 中，这不是问题，因为它总是按照
    Python 解释器定义的顺序执行代码。然而，在 JAX 中，情况就比较复杂了：为了执行效率，我们希望 JIT 编译器可以自由地重新排序、省略和融合我们定义的函数中的各种操作。此外，在多设备环境中执行时，每个进程需要同步全局状态，这会影响执行效率。'
- en: Explicit random state
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明确的随机状态
- en: 'To avoid this issue, JAX avoids implicit global random state, and instead tracks
    state explicitly via a random `key`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，JAX 避免使用隐式的全局随机状态，而是通过随机 `key` 显式地跟踪状态：
- en: '[PRE13]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This section uses the new-style typed PRNG keys produced by `jax.random.key()`,
    rather than the old-style raw PRNG keys produced by `jax.random.PRNGKey()`. For
    details, see JEP 9263: Typed keys & pluggable RNGs.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本节使用由 `jax.random.key()` 生成的新型类型化 PRNG `key`，而不是由 `jax.random.PRNGKey()` 生成的旧型原始
    PRNG `key`。有关详情，请参阅 JEP 9263：类型化 `key` 和可插拔 RNG。
- en: A key is an array with a special dtype corresponding to the particular PRNG
    implementation being used; in the default implementation each key is backed by
    a pair of `uint32` values.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `key` 是一个具有特定 PRNG 实现对应的特殊数据类型的数组；在默认实现中，每个 `key` 由一对 `uint32` 值支持。
- en: 'The key is effectively a stand-in for NumPy’s hidden state object, but we pass
    it explicitly to `jax.random()` functions. Importantly, random functions consume
    the key, but do not modify it: feeding the same key object to a random function
    will always result in the same sample being generated.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`key` 实际上是 NumPy 隐藏状态对象的替代品，但我们显式地将其传递给 `jax.random()` 函数。重要的是，随机函数消耗 `key`，但不修改它：将相同的
    `key` 对象传递给随机函数将始终生成相同的样本。'
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Re-using the same key, even with different `random` APIs, can result in correlated
    outputs, which is generally undesirable.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用不同的 `random` API，重复使用相同的 `key` 也可能导致相关的输出，这通常是不可取的。
- en: '**The rule of thumb is: never reuse keys (unless you want identical outputs).**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验法则是：永远不要重复使用 `key`（除非你希望得到相同的输出）。**'
- en: 'In order to generate different and independent samples, you must `split()`
    the key explicitly before passing it to a random function:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成不同且独立的样本，你必须在将 `key` 传递给随机函数之前显式地调用 `split()`。
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: (Calling `del` here is not required, but we do so to emphasize that the key
    should not be reused once consumed.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: （这里调用 `del` 并非必须，但我们这样做是为了强调一旦使用过的 `key` 不应再次使用。）
- en: '`jax.random.split()` is a deterministic function that converts one `key` into
    several independent (in the pseudorandomness sense) keys. We keep one of the outputs
    as the `new_key`, and can safely use the unique extra key (called `subkey`) as
    input into a random function, and then discard it forever. If you wanted to get
    another sample from the normal distribution, you would split `key` again, and
    so on: the crucial point is that you never use the same key twice.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.random.split()` 是一个确定性函数，它将一个 `key` 转换为若干独立（在伪随机性意义上）的新 `key`。我们保留其中一个作为
    `new_key`，可以安全地将额外生成的唯一 `subkey` 作为随机函数的输入，然后永久丢弃它。如果你需要从正态分布中获取另一个样本，你需要再次执行
    `split(key)`，以此类推：关键的一点是，你永远不要重复使用同一个 `key`。'
- en: 'It doesn’t matter which part of the output of `split(key)` we call `key`, and
    which we call `subkey`. They are all independent keys with equal status. The key/subkey
    naming convention is a typical usage pattern that helps track how keys are consumed:
    subkeys are destined for immediate consumption by random functions, while the
    key is retained to generate more randomness later.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `split(key)` 的输出的哪一部分被称为 `key`，哪一部分被称为 `subkey` 并不重要。它们都是具有相同状态的独立 `key`。`key`/`subkey`
    命名约定是一种典型的使用模式，有助于跟踪 `key` 如何被消耗：`subkey` 被用于随机函数的直接消耗，而 `key` 则保留用于稍后生成更多的随机性。
- en: Usually, the above example would be written concisely as
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，上述示例可以简洁地写成
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'which discards the old key automatically. It’s worth noting that `split()`
    can create as many keys as you need, not just 2:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这会自动丢弃旧 `key`。值得注意的是，`split()` 不仅可以创建两个 `key`，还可以创建多个：
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Lack of sequential equivalence
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺乏顺序等价性
- en: Another difference between NumPy’s and JAX’s random modules relates to the sequential
    equivalence guarantee mentioned above.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 和 JAX 随机模块之间的另一个区别涉及到上述的顺序等价性保证。
- en: 'As in NumPy, JAX’s random module also allows sampling of vectors of numbers.
    However, JAX does not provide a sequential equivalence guarantee, because doing
    so would interfere with the vectorization on SIMD hardware (requirement #3 above).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '与 NumPy 类似，JAX 的随机模块也允许对向量进行抽样。但是，JAX 不提供顺序等价性保证，因为这样做会干扰 SIMD 硬件上的向量化（上述要求
    #3）。'
- en: 'In the example below, sampling 3 values out of a normal distribution individually
    using three subkeys gives a different result to using giving a single key and
    specifying `shape=(3,)`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，使用三个子密钥分别从正态分布中抽取3个值，与使用单个密钥并指定`shape=(3,)`会得到不同的结果：
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The lack of sequential equivalence gives us freedom to write code more efficiently;
    for example, instead of generating `sequence` above via a sequential loop, we
    can use `jax.vmap()` to compute the same result in a vectorized manner:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏顺序等价性使我们能够更高效地编写代码；例如，不用通过顺序循环生成上述的`sequence`，而是可以使用`jax.vmap()`以向量化方式计算相同的结果：
- en: '[PRE23]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next Steps
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步
- en: For more information on JAX random numbers, refer to the documentation of the
    `jax.random` module. If you’re interested in the details of the design of JAX’s
    random number generator, see JAX PRNG Design.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于 JAX 随机数的信息，请参阅`jax.random`模块的文档。如果您对 JAX 随机数生成器的设计细节感兴趣，请参阅 JAX PRNG
    设计。
